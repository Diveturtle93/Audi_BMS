
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008884  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08008a7c  08008a7c  00018a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008edc  08008edc  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08008edc  08008edc  00018edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ee4  08008ee4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ee4  08008ee4  00018ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ee8  08008ee8  00018ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08008eec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a0  20000060  08008f4c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  08008f4c  00020600  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b2ea  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004917  00000000  00000000  0003b3bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a8  00000000  00000000  0003fcd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000121c  00000000  00000000  00041480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000073fb  00000000  00000000  0004269c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024444  00000000  00000000  00049a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00110b8b  00000000  00000000  0006dedb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006280  00000000  00000000  0017ea68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00184ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000060 	.word	0x20000060
 8000214:	00000000 	.word	0x00000000
 8000218:	08008a64 	.word	0x08008a64

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000064 	.word	0x20000064
 8000234:	08008a64 	.word	0x08008a64

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b970 	b.w	8000540 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9e08      	ldr	r6, [sp, #32]
 800027e:	460d      	mov	r5, r1
 8000280:	4604      	mov	r4, r0
 8000282:	460f      	mov	r7, r1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d14a      	bne.n	800031e <__udivmoddi4+0xa6>
 8000288:	428a      	cmp	r2, r1
 800028a:	4694      	mov	ip, r2
 800028c:	d965      	bls.n	800035a <__udivmoddi4+0xe2>
 800028e:	fab2 f382 	clz	r3, r2
 8000292:	b143      	cbz	r3, 80002a6 <__udivmoddi4+0x2e>
 8000294:	fa02 fc03 	lsl.w	ip, r2, r3
 8000298:	f1c3 0220 	rsb	r2, r3, #32
 800029c:	409f      	lsls	r7, r3
 800029e:	fa20 f202 	lsr.w	r2, r0, r2
 80002a2:	4317      	orrs	r7, r2
 80002a4:	409c      	lsls	r4, r3
 80002a6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002aa:	fa1f f58c 	uxth.w	r5, ip
 80002ae:	fbb7 f1fe 	udiv	r1, r7, lr
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002bc:	fb01 f005 	mul.w	r0, r1, r5
 80002c0:	4290      	cmp	r0, r2
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x62>
 80002c4:	eb1c 0202 	adds.w	r2, ip, r2
 80002c8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002cc:	f080 811c 	bcs.w	8000508 <__udivmoddi4+0x290>
 80002d0:	4290      	cmp	r0, r2
 80002d2:	f240 8119 	bls.w	8000508 <__udivmoddi4+0x290>
 80002d6:	3902      	subs	r1, #2
 80002d8:	4462      	add	r2, ip
 80002da:	1a12      	subs	r2, r2, r0
 80002dc:	b2a4      	uxth	r4, r4
 80002de:	fbb2 f0fe 	udiv	r0, r2, lr
 80002e2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ea:	fb00 f505 	mul.w	r5, r0, r5
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x90>
 80002f2:	eb1c 0404 	adds.w	r4, ip, r4
 80002f6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002fa:	f080 8107 	bcs.w	800050c <__udivmoddi4+0x294>
 80002fe:	42a5      	cmp	r5, r4
 8000300:	f240 8104 	bls.w	800050c <__udivmoddi4+0x294>
 8000304:	4464      	add	r4, ip
 8000306:	3802      	subs	r0, #2
 8000308:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800030c:	1b64      	subs	r4, r4, r5
 800030e:	2100      	movs	r1, #0
 8000310:	b11e      	cbz	r6, 800031a <__udivmoddi4+0xa2>
 8000312:	40dc      	lsrs	r4, r3
 8000314:	2300      	movs	r3, #0
 8000316:	e9c6 4300 	strd	r4, r3, [r6]
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0xbc>
 8000322:	2e00      	cmp	r6, #0
 8000324:	f000 80ed 	beq.w	8000502 <__udivmoddi4+0x28a>
 8000328:	2100      	movs	r1, #0
 800032a:	e9c6 0500 	strd	r0, r5, [r6]
 800032e:	4608      	mov	r0, r1
 8000330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000334:	fab3 f183 	clz	r1, r3
 8000338:	2900      	cmp	r1, #0
 800033a:	d149      	bne.n	80003d0 <__udivmoddi4+0x158>
 800033c:	42ab      	cmp	r3, r5
 800033e:	d302      	bcc.n	8000346 <__udivmoddi4+0xce>
 8000340:	4282      	cmp	r2, r0
 8000342:	f200 80f8 	bhi.w	8000536 <__udivmoddi4+0x2be>
 8000346:	1a84      	subs	r4, r0, r2
 8000348:	eb65 0203 	sbc.w	r2, r5, r3
 800034c:	2001      	movs	r0, #1
 800034e:	4617      	mov	r7, r2
 8000350:	2e00      	cmp	r6, #0
 8000352:	d0e2      	beq.n	800031a <__udivmoddi4+0xa2>
 8000354:	e9c6 4700 	strd	r4, r7, [r6]
 8000358:	e7df      	b.n	800031a <__udivmoddi4+0xa2>
 800035a:	b902      	cbnz	r2, 800035e <__udivmoddi4+0xe6>
 800035c:	deff      	udf	#255	; 0xff
 800035e:	fab2 f382 	clz	r3, r2
 8000362:	2b00      	cmp	r3, #0
 8000364:	f040 8090 	bne.w	8000488 <__udivmoddi4+0x210>
 8000368:	1a8a      	subs	r2, r1, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2101      	movs	r1, #1
 8000374:	fbb2 f5f7 	udiv	r5, r2, r7
 8000378:	fb07 2015 	mls	r0, r7, r5, r2
 800037c:	0c22      	lsrs	r2, r4, #16
 800037e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000382:	fb0e f005 	mul.w	r0, lr, r5
 8000386:	4290      	cmp	r0, r2
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x124>
 800038a:	eb1c 0202 	adds.w	r2, ip, r2
 800038e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x122>
 8000394:	4290      	cmp	r0, r2
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2b8>
 800039a:	4645      	mov	r5, r8
 800039c:	1a12      	subs	r2, r2, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003a4:	fb07 2210 	mls	r2, r7, r0, r2
 80003a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x14e>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x14c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2c2>
 80003c4:	4610      	mov	r0, r2
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ce:	e79f      	b.n	8000310 <__udivmoddi4+0x98>
 80003d0:	f1c1 0720 	rsb	r7, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa05 f401 	lsl.w	r4, r5, r1
 80003e2:	fa20 f307 	lsr.w	r3, r0, r7
 80003e6:	40fd      	lsrs	r5, r7
 80003e8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ec:	4323      	orrs	r3, r4
 80003ee:	fbb5 f8f9 	udiv	r8, r5, r9
 80003f2:	fa1f fe8c 	uxth.w	lr, ip
 80003f6:	fb09 5518 	mls	r5, r9, r8, r5
 80003fa:	0c1c      	lsrs	r4, r3, #16
 80003fc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000400:	fb08 f50e 	mul.w	r5, r8, lr
 8000404:	42a5      	cmp	r5, r4
 8000406:	fa02 f201 	lsl.w	r2, r2, r1
 800040a:	fa00 f001 	lsl.w	r0, r0, r1
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b0>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2b4>
 800041c:	42a5      	cmp	r5, r4
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2b4>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4464      	add	r4, ip
 8000428:	1b64      	subs	r4, r4, r5
 800042a:	b29d      	uxth	r5, r3
 800042c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000430:	fb09 4413 	mls	r4, r9, r3, r4
 8000434:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000438:	fb03 fe0e 	mul.w	lr, r3, lr
 800043c:	45a6      	cmp	lr, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1da>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f103 35ff 	add.w	r5, r3, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2ac>
 800044a:	45a6      	cmp	lr, r4
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2ac>
 800044e:	3b02      	subs	r3, #2
 8000450:	4464      	add	r4, ip
 8000452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000456:	fba3 9502 	umull	r9, r5, r3, r2
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	42ac      	cmp	r4, r5
 8000460:	46c8      	mov	r8, r9
 8000462:	46ae      	mov	lr, r5
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x29c>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x298>
 8000468:	b156      	cbz	r6, 8000480 <__udivmoddi4+0x208>
 800046a:	ebb0 0208 	subs.w	r2, r0, r8
 800046e:	eb64 040e 	sbc.w	r4, r4, lr
 8000472:	fa04 f707 	lsl.w	r7, r4, r7
 8000476:	40ca      	lsrs	r2, r1
 8000478:	40cc      	lsrs	r4, r1
 800047a:	4317      	orrs	r7, r2
 800047c:	e9c6 7400 	strd	r7, r4, [r6]
 8000480:	4618      	mov	r0, r3
 8000482:	2100      	movs	r1, #0
 8000484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000488:	f1c3 0120 	rsb	r1, r3, #32
 800048c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000490:	fa20 f201 	lsr.w	r2, r0, r1
 8000494:	fa25 f101 	lsr.w	r1, r5, r1
 8000498:	409d      	lsls	r5, r3
 800049a:	432a      	orrs	r2, r5
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a8:	fb07 1510 	mls	r5, r7, r0, r1
 80004ac:	0c11      	lsrs	r1, r2, #16
 80004ae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004b2:	fb00 f50e 	mul.w	r5, r0, lr
 80004b6:	428d      	cmp	r5, r1
 80004b8:	fa04 f403 	lsl.w	r4, r4, r3
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x258>
 80004be:	eb1c 0101 	adds.w	r1, ip, r1
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1b49      	subs	r1, r1, r5
 80004d2:	b292      	uxth	r2, r2
 80004d4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d8:	fb07 1115 	mls	r1, r7, r5, r1
 80004dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e0:	fb05 f10e 	mul.w	r1, r5, lr
 80004e4:	4291      	cmp	r1, r2
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x282>
 80004e8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ec:	f105 38ff 	add.w	r8, r5, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 80004f2:	4291      	cmp	r1, r2
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2a8>
 80004f6:	3d02      	subs	r5, #2
 80004f8:	4462      	add	r2, ip
 80004fa:	1a52      	subs	r2, r2, r1
 80004fc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0xfc>
 8000502:	4631      	mov	r1, r6
 8000504:	4630      	mov	r0, r6
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xa2>
 8000508:	4639      	mov	r1, r7
 800050a:	e6e6      	b.n	80002da <__udivmoddi4+0x62>
 800050c:	4610      	mov	r0, r2
 800050e:	e6fb      	b.n	8000308 <__udivmoddi4+0x90>
 8000510:	4548      	cmp	r0, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f0>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb65 0e0c 	sbc.w	lr, r5, ip
 800051c:	3b01      	subs	r3, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f0>
 8000520:	4645      	mov	r5, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x282>
 8000524:	462b      	mov	r3, r5
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1da>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x258>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b0>
 8000530:	3d02      	subs	r5, #2
 8000532:	4462      	add	r2, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x124>
 8000536:	4608      	mov	r0, r1
 8000538:	e70a      	b.n	8000350 <__udivmoddi4+0xd8>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x14e>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
	// Sende String mit Laenge "Size", "Size" muss bekannt sein
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	b29a      	uxth	r2, r3
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	6879      	ldr	r1, [r7, #4]
 8000558:	4803      	ldr	r0, [pc, #12]	; (8000568 <uartTransmit+0x24>)
 800055a:	f007 fc9b 	bl	8007e94 <HAL_UART_Transmit>
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	2000042c 	.word	0x2000042c

0800056c <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
	char str[11];

	// Zahl umrechnen
	utoa(number, str, base);												// Zahl umrechnen anhand der Basis "base"
 8000576:	683a      	ldr	r2, [r7, #0]
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	4619      	mov	r1, r3
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f008 fa1c 	bl	80089bc <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);			// Sende Zahlen
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff fe55 	bl	8000238 <strlen>
 800058e:	4603      	mov	r3, r0
 8000590:	b29a      	uxth	r2, r3
 8000592:	f107 010c 	add.w	r1, r7, #12
 8000596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059a:	4803      	ldr	r0, [pc, #12]	; (80005a8 <uartTransmitNumber+0x3c>)
 800059c:	f007 fc7a 	bl	8007e94 <HAL_UART_Transmit>
}
 80005a0:	bf00      	nop
 80005a2:	3718      	adds	r7, #24
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	2000042c 	.word	0x2000042c

080005ac <CANinit>:
//----------------------------------------------------------------------

// Initialisiere und starte CAN-Bus
//----------------------------------------------------------------------
void CANinit(RXQUEUE_TABLE rxSize, TXQUEUE_TABLE txSize)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	460a      	mov	r2, r1
 80005b6:	80fb      	strh	r3, [r7, #6]
 80005b8:	4613      	mov	r3, r2
 80005ba:	80bb      	strh	r3, [r7, #4]
	// Beende wenn CAN-Bus aktive ist
	if (canIsActive)
 80005bc:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <CANinit+0x3c>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d10d      	bne.n	80005e0 <CANinit+0x34>
		return;

	// Status CAN aktiv
	canIsActive = true;
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <CANinit+0x3c>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	701a      	strb	r2, [r3, #0]

	// Lege Groesse des Ringbuffers fest
	sizeRxBuffer = rxSize;
 80005ca:	4a08      	ldr	r2, [pc, #32]	; (80005ec <CANinit+0x40>)
 80005cc:	88fb      	ldrh	r3, [r7, #6]
 80005ce:	8013      	strh	r3, [r2, #0]
	sizeTxBuffer = txSize;
 80005d0:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <CANinit+0x44>)
 80005d2:	88bb      	ldrh	r3, [r7, #4]
 80005d4:	8013      	strh	r3, [r2, #0]

	// Initialisiere Ringbusbuffer
	initializeBuffer();
 80005d6:	f000 f923 	bl	8000820 <initializeBuffer>

	// Konfiguriere CAN
	MX_CAN3_Init();
 80005da:	f001 fa55 	bl	8001a88 <MX_CAN3_Init>
 80005de:	e000      	b.n	80005e2 <CANinit+0x36>
		return;
 80005e0:	bf00      	nop
}
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200000a0 	.word	0x200000a0
 80005ec:	20000094 	.word	0x20000094
 80005f0:	20000096 	.word	0x20000096

080005f4 <CANwrite>:
//----------------------------------------------------------------------

// Schreibe Nachricht auf CAN-Bus oder in den Ringbuffer
//----------------------------------------------------------------------
bool CANwrite(CAN_message_t *CAN_tx_msg, bool sendMB)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	460b      	mov	r3, r1
 80005fe:	70fb      	strb	r3, [r7, #3]
	bool ret = true;
 8000600:	2301      	movs	r3, #1
 8000602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t TxMailbox;
	CAN_TxHeaderTypeDef TxHeader;

	// Schalte Sendeinterrupt aus
	HAL_CAN_DeactivateNotification(&hcan3, CAN_IT_TX_MAILBOX_EMPTY);
 8000606:	2101      	movs	r1, #1
 8000608:	4821      	ldr	r0, [pc, #132]	; (8000690 <CANwrite+0x9c>)
 800060a:	f004 f843 	bl	8004694 <HAL_CAN_DeactivateNotification>

	// CAN-Nachricht hat extended ID
	if (CAN_tx_msg->flags.extended == 1)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	79db      	ldrb	r3, [r3, #7]
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b00      	cmp	r3, #0
 800061a:	d005      	beq.n	8000628 <CANwrite+0x34>
	{
		TxHeader.ExtId = CAN_tx_msg->id;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	60fb      	str	r3, [r7, #12]
		TxHeader.IDE = CAN_ID_EXT;
 8000622:	2304      	movs	r3, #4
 8000624:	613b      	str	r3, [r7, #16]
 8000626:	e004      	b.n	8000632 <CANwrite+0x3e>
	}
	// CAN-Nachricht hat standart ID
	else
	{
		TxHeader.StdId = CAN_tx_msg->id;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	60bb      	str	r3, [r7, #8]
		TxHeader.IDE = CAN_ID_STD;
 800062e:	2300      	movs	r3, #0
 8000630:	613b      	str	r3, [r7, #16]
	}

	TxHeader.RTR = CAN_RTR_DATA;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
	TxHeader.DLC = CAN_tx_msg->len;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	7a1b      	ldrb	r3, [r3, #8]
 800063a:	61bb      	str	r3, [r7, #24]
	TxHeader.TransmitGlobalTime = DISABLE;
 800063c:	2300      	movs	r3, #0
 800063e:	773b      	strb	r3, [r7, #28]

	// Nachricht auf Bus schreiben
	if (HAL_CAN_AddTxMessage(&hcan3, &TxHeader, CAN_tx_msg->buf, &TxMailbox) != 0)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f103 0209 	add.w	r2, r3, #9
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	f107 0108 	add.w	r1, r7, #8
 800064e:	4810      	ldr	r0, [pc, #64]	; (8000690 <CANwrite+0x9c>)
 8000650:	f003 fe18 	bl	8004284 <HAL_CAN_AddTxMessage>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d010      	beq.n	800067c <CANwrite+0x88>
	{
		// Wenn Nachricht nicht gesendet werden kann in Ring schreiben
		if (sendMB != true)
 800065a:	78fb      	ldrb	r3, [r7, #3]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d00a      	beq.n	8000676 <CANwrite+0x82>
		{
			// Wenn Ring keinen Platz mehr hat
			if (addToRingBuffer(&txRing, (void *)CAN_tx_msg) == false)
 8000660:	6879      	ldr	r1, [r7, #4]
 8000662:	480c      	ldr	r0, [pc, #48]	; (8000694 <CANwrite+0xa0>)
 8000664:	f000 f93f 	bl	80008e6 <addToRingBuffer>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d106      	bne.n	800067c <CANwrite+0x88>
			{
				ret = false;												// Kein Platz mehr im Ringbuffer
 800066e:	2300      	movs	r3, #0
 8000670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000674:	e002      	b.n	800067c <CANwrite+0x88>
			}
		}
		// Wenn Nachricht nicht in den Ring geschrieben werden soll
		else
		{
			ret = false;
 8000676:	2300      	movs	r3, #0
 8000678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
	}

	// Schalte Sendeinterrupt ein
	HAL_CAN_ActivateNotification(&hcan3, CAN_IT_TX_MAILBOX_EMPTY);
 800067c:	2101      	movs	r1, #1
 800067e:	4804      	ldr	r0, [pc, #16]	; (8000690 <CANwrite+0x9c>)
 8000680:	f003 ffe2 	bl	8004648 <HAL_CAN_ActivateNotification>
	return ret;
 8000684:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000688:	4618      	mov	r0, r3
 800068a:	3728      	adds	r7, #40	; 0x28
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000224 	.word	0x20000224
 8000694:	20000088 	.word	0x20000088

08000698 <CAN_available>:
//----------------------------------------------------------------------

// Abfrage, ob CAN-Nachricht verfuegbar ist
//----------------------------------------------------------------------
uint8_t CAN_available(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
	if (rxRing.head >= rxRing.tail)
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <CAN_available+0x54>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <CAN_available+0x54>)
 80006a4:	885b      	ldrh	r3, [r3, #2]
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d30a      	bcc.n	80006c2 <CAN_available+0x2a>
		return rxRing.head - rxRing.tail;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <CAN_available+0x54>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <CAN_available+0x54>)
 80006b6:	885b      	ldrh	r3, [r3, #2]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	e00e      	b.n	80006e0 <CAN_available+0x48>
	else
		return rxRing.size - (rxRing.tail - rxRing.head);
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <CAN_available+0x54>)
 80006c4:	889b      	ldrh	r3, [r3, #4]
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <CAN_available+0x54>)
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	b2d9      	uxtb	r1, r3
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <CAN_available+0x54>)
 80006d2:	885b      	ldrh	r3, [r3, #2]
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	1acb      	subs	r3, r1, r3
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	4413      	add	r3, r2
 80006de:	b2db      	uxtb	r3, r3
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	2000007c 	.word	0x2000007c

080006f0 <CANread>:
//----------------------------------------------------------------------

// Nachricht von Ringbuffer einlesen
//----------------------------------------------------------------------
bool CANread(CAN_message_t *CAN_rx_msg)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	bool ret;

	// Schalte Empfangsinterrupt aus
	HAL_CAN_DeactivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING);
 80006f8:	2102      	movs	r1, #2
 80006fa:	4809      	ldr	r0, [pc, #36]	; (8000720 <CANread+0x30>)
 80006fc:	f003 ffca 	bl	8004694 <HAL_CAN_DeactivateNotification>

	// Lese Nachricht
	ret = removeFromRingBuffer(&rxRing, CAN_rx_msg);
 8000700:	6879      	ldr	r1, [r7, #4]
 8000702:	4808      	ldr	r0, [pc, #32]	; (8000724 <CANread+0x34>)
 8000704:	f000 f920 	bl	8000948 <removeFromRingBuffer>
 8000708:	4603      	mov	r3, r0
 800070a:	73fb      	strb	r3, [r7, #15]

	// Schalte Empfangsinterrupt ein
	HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING);
 800070c:	2102      	movs	r1, #2
 800070e:	4804      	ldr	r0, [pc, #16]	; (8000720 <CANread+0x30>)
 8000710:	f003 ff9a 	bl	8004648 <HAL_CAN_ActivateNotification>

	return ret;
 8000714:	7bfb      	ldrb	r3, [r7, #15]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000224 	.word	0x20000224
 8000724:	2000007c 	.word	0x2000007c

08000728 <CANwork>:
//----------------------------------------------------------------------

//
//----------------------------------------------------------------------
void CANwork(void)
{
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < ANZAHL_OUTPUT_PAKETE; i++)
 800072e:	2300      	movs	r3, #0
 8000730:	71fb      	strb	r3, [r7, #7]
 8000732:	e034      	b.n	800079e <CANwork+0x76>
	{
		if (CAN_Output_PaketListe[i].sende_time < (millis() - CAN_Output_PaketListe[i].sendeintervall))
 8000734:	79fa      	ldrb	r2, [r7, #7]
 8000736:	491e      	ldr	r1, [pc, #120]	; (80007b0 <CANwork+0x88>)
 8000738:	4613      	mov	r3, r2
 800073a:	00db      	lsls	r3, r3, #3
 800073c:	1a9b      	subs	r3, r3, r2
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	440b      	add	r3, r1
 8000742:	3318      	adds	r3, #24
 8000744:	681c      	ldr	r4, [r3, #0]
 8000746:	f000 ffcf 	bl	80016e8 <millis>
 800074a:	4601      	mov	r1, r0
 800074c:	79fa      	ldrb	r2, [r7, #7]
 800074e:	4818      	ldr	r0, [pc, #96]	; (80007b0 <CANwork+0x88>)
 8000750:	4613      	mov	r3, r2
 8000752:	00db      	lsls	r3, r3, #3
 8000754:	1a9b      	subs	r3, r3, r2
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4403      	add	r3, r0
 800075a:	3314      	adds	r3, #20
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	1acb      	subs	r3, r1, r3
 8000760:	429c      	cmp	r4, r3
 8000762:	d219      	bcs.n	8000798 <CANwork+0x70>
		{
			if (CANwrite(&CAN_Output_PaketListe[i].msg, false) != 1)
 8000764:	79fa      	ldrb	r2, [r7, #7]
 8000766:	4613      	mov	r3, r2
 8000768:	00db      	lsls	r3, r3, #3
 800076a:	1a9b      	subs	r3, r3, r2
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	4a10      	ldr	r2, [pc, #64]	; (80007b0 <CANwork+0x88>)
 8000770:	4413      	add	r3, r2
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff3d 	bl	80005f4 <CANwrite>
 800077a:	4603      	mov	r3, r0
 800077c:	2b01      	cmp	r3, #1
 800077e:	d10b      	bne.n	8000798 <CANwork+0x70>
			{

			}
			else
			{
				CAN_Output_PaketListe[i].sende_time = millis();
 8000780:	79fc      	ldrb	r4, [r7, #7]
 8000782:	f000 ffb1 	bl	80016e8 <millis>
 8000786:	4602      	mov	r2, r0
 8000788:	4909      	ldr	r1, [pc, #36]	; (80007b0 <CANwork+0x88>)
 800078a:	4623      	mov	r3, r4
 800078c:	00db      	lsls	r3, r3, #3
 800078e:	1b1b      	subs	r3, r3, r4
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	440b      	add	r3, r1
 8000794:	3318      	adds	r3, #24
 8000796:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < ANZAHL_OUTPUT_PAKETE; i++)
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	3301      	adds	r3, #1
 800079c:	71fb      	strb	r3, [r7, #7]
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b06      	cmp	r3, #6
 80007a2:	d9c7      	bls.n	8000734 <CANwork+0xc>
			}
		}
	}
}
 80007a4:	bf00      	nop
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd90      	pop	{r4, r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000a4 	.word	0x200000a4

080007b4 <CAN_Nachricht>:
//----------------------------------------------------------------------

// CAN Nachricht definieren, Datentyp anpassen
//----------------------------------------------------------------------
CAN_PaketTypeDef CAN_Nachricht(uint16_t id, uint8_t length, uint16_t sendeintervall, uint32_t sende_time)
{
 80007b4:	b4b0      	push	{r4, r5, r7}
 80007b6:	b08d      	sub	sp, #52	; 0x34
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	4608      	mov	r0, r1
 80007be:	4611      	mov	r1, r2
 80007c0:	461a      	mov	r2, r3
 80007c2:	4603      	mov	r3, r0
 80007c4:	817b      	strh	r3, [r7, #10]
 80007c6:	460b      	mov	r3, r1
 80007c8:	727b      	strb	r3, [r7, #9]
 80007ca:	4613      	mov	r3, r2
 80007cc:	80fb      	strh	r3, [r7, #6]
	CAN_PaketTypeDef TxHeader;

	TxHeader.msg.id = id;
 80007ce:	897b      	ldrh	r3, [r7, #10]
 80007d0:	617b      	str	r3, [r7, #20]
	TxHeader.msg.len = length;
 80007d2:	7a7b      	ldrb	r3, [r7, #9]
 80007d4:	773b      	strb	r3, [r7, #28]
	TxHeader.sendeintervall = sendeintervall - 1;
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	3b01      	subs	r3, #1
 80007da:	b29b      	uxth	r3, r3
 80007dc:	853b      	strh	r3, [r7, #40]	; 0x28
	TxHeader.sende_time = sende_time;
 80007de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c

	return TxHeader;
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	461d      	mov	r5, r3
 80007e6:	f107 0414 	add.w	r4, r7, #20
 80007ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007ee:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80007f2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80007f6:	68f8      	ldr	r0, [r7, #12]
 80007f8:	3734      	adds	r7, #52	; 0x34
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bcb0      	pop	{r4, r5, r7}
 80007fe:	4770      	bx	lr

08000800 <isInitialized>:
//----------------------------------------------------------------------

// Abfrage, ob Ringbuffer initialisiert ist
//----------------------------------------------------------------------
bool isInitialized(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
	return rxBuffer != 0;
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <isInitialized+0x1c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	bf14      	ite	ne
 800080c:	2301      	movne	r3, #1
 800080e:	2300      	moveq	r3, #0
 8000810:	b2db      	uxtb	r3, r3
}
 8000812:	4618      	mov	r0, r3
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	20000098 	.word	0x20000098

08000820 <initializeBuffer>:
//----------------------------------------------------------------------

// Initialisiere Ringbuffer
//----------------------------------------------------------------------
void initializeBuffer(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	if (isInitialized())
 8000824:	f7ff ffec 	bl	8000800 <isInitialized>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d134      	bne.n	8000898 <initializeBuffer+0x78>
		return;

	// Konfiguriere den Sende Ringbuffer
	if (txBuffer == 0)
 800082e:	4b1b      	ldr	r3, [pc, #108]	; (800089c <initializeBuffer+0x7c>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d10d      	bne.n	8000852 <initializeBuffer+0x32>
	{
		txBuffer = (CAN_message_t *)malloc(sizeTxBuffer * sizeof(CAN_message_t));
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <initializeBuffer+0x80>)
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	461a      	mov	r2, r3
 800083c:	4613      	mov	r3, r2
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	4413      	add	r3, r2
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	4618      	mov	r0, r3
 8000846:	f007 ffc3 	bl	80087d0 <malloc>
 800084a:	4603      	mov	r3, r0
 800084c:	461a      	mov	r2, r3
 800084e:	4b13      	ldr	r3, [pc, #76]	; (800089c <initializeBuffer+0x7c>)
 8000850:	601a      	str	r2, [r3, #0]
	}

	initRingBuffer(&txRing, txBuffer, sizeTxBuffer);
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <initializeBuffer+0x7c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <initializeBuffer+0x80>)
 8000858:	8812      	ldrh	r2, [r2, #0]
 800085a:	4619      	mov	r1, r3
 800085c:	4811      	ldr	r0, [pc, #68]	; (80008a4 <initializeBuffer+0x84>)
 800085e:	f000 f829 	bl	80008b4 <initRingBuffer>

	// Konfiguriere den Empfang Ringbuffer
	if (rxBuffer == 0)
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <initializeBuffer+0x88>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d10d      	bne.n	8000886 <initializeBuffer+0x66>
	{
		rxBuffer = (CAN_message_t *)malloc(sizeRxBuffer * sizeof(CAN_message_t));
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <initializeBuffer+0x8c>)
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	461a      	mov	r2, r3
 8000870:	4613      	mov	r3, r2
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	4413      	add	r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	4618      	mov	r0, r3
 800087a:	f007 ffa9 	bl	80087d0 <malloc>
 800087e:	4603      	mov	r3, r0
 8000880:	461a      	mov	r2, r3
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <initializeBuffer+0x88>)
 8000884:	601a      	str	r2, [r3, #0]
	}

	initRingBuffer(&rxRing, rxBuffer, sizeRxBuffer);
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <initializeBuffer+0x88>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a08      	ldr	r2, [pc, #32]	; (80008ac <initializeBuffer+0x8c>)
 800088c:	8812      	ldrh	r2, [r2, #0]
 800088e:	4619      	mov	r1, r3
 8000890:	4807      	ldr	r0, [pc, #28]	; (80008b0 <initializeBuffer+0x90>)
 8000892:	f000 f80f 	bl	80008b4 <initRingBuffer>
 8000896:	e000      	b.n	800089a <initializeBuffer+0x7a>
		return;
 8000898:	bf00      	nop
}
 800089a:	bd80      	pop	{r7, pc}
 800089c:	2000009c 	.word	0x2000009c
 80008a0:	20000096 	.word	0x20000096
 80008a4:	20000088 	.word	0x20000088
 80008a8:	20000098 	.word	0x20000098
 80008ac:	20000094 	.word	0x20000094
 80008b0:	2000007c 	.word	0x2000007c

080008b4 <initRingBuffer>:
//----------------------------------------------------------------------

// Initialisiere Ringbuffer
//----------------------------------------------------------------------
void initRingBuffer(RingbufferTypeDef *ring, volatile CAN_message_t *buffer, uint32_t size)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
	ring->buffer = buffer;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	68ba      	ldr	r2, [r7, #8]
 80008c4:	609a      	str	r2, [r3, #8]
	ring->size = size;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	809a      	strh	r2, [r3, #4]
	ring->head = 0;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	2200      	movs	r2, #0
 80008d2:	801a      	strh	r2, [r3, #0]
	ring->tail = 0;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2200      	movs	r2, #0
 80008d8:	805a      	strh	r2, [r3, #2]
}
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <addToRingBuffer>:
//----------------------------------------------------------------------

// Nachricht zum Ring hinzufuegen
//----------------------------------------------------------------------
bool addToRingBuffer(RingbufferTypeDef *ring, CAN_message_t *msg)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b084      	sub	sp, #16
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
 80008ee:	6039      	str	r1, [r7, #0]
	uint16_t nextEntry;
	nextEntry = (ring->head + 1) % ring->size;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	3301      	adds	r3, #1
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	8892      	ldrh	r2, [r2, #4]
 80008fc:	fb93 f1f2 	sdiv	r1, r3, r2
 8000900:	fb01 f202 	mul.w	r2, r1, r2
 8000904:	1a9b      	subs	r3, r3, r2
 8000906:	81fb      	strh	r3, [r7, #14]

	// Pruefe, ob Ringbuffer gefuellt ist
	if (nextEntry == ring->tail)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	885b      	ldrh	r3, [r3, #2]
 800090c:	b29b      	uxth	r3, r3
 800090e:	89fa      	ldrh	r2, [r7, #14]
 8000910:	429a      	cmp	r2, r3
 8000912:	d101      	bne.n	8000918 <addToRingBuffer+0x32>
		return false;
 8000914:	2300      	movs	r3, #0
 8000916:	e013      	b.n	8000940 <addToRingBuffer+0x5a>

	// Fuege Element zum Ring hinzu
	memcpy((void *)&ring->buffer[ring->head], (void *)msg, sizeof(CAN_message_t));
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	689a      	ldr	r2, [r3, #8]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	881b      	ldrh	r3, [r3, #0]
 8000920:	b29b      	uxth	r3, r3
 8000922:	4619      	mov	r1, r3
 8000924:	460b      	mov	r3, r1
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	440b      	add	r3, r1
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	4413      	add	r3, r2
 800092e:	2214      	movs	r2, #20
 8000930:	6839      	ldr	r1, [r7, #0]
 8000932:	4618      	mov	r0, r3
 8000934:	f008 f888 	bl	8008a48 <memcpy>

	// Ringbuffer Kopf hochzaehlen
	ring->head = nextEntry;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	89fa      	ldrh	r2, [r7, #14]
 800093c:	801a      	strh	r2, [r3, #0]

	return true;
 800093e:	2301      	movs	r3, #1
}
 8000940:	4618      	mov	r0, r3
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <removeFromRingBuffer>:
//----------------------------------------------------------------------

// Nachricht von Ring entfernen
//----------------------------------------------------------------------
bool removeFromRingBuffer(RingbufferTypeDef *ring, CAN_message_t *msg)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	6039      	str	r1, [r7, #0]
	// Pruefen, ob Nachrichten im Ring sind
	if (isRingBufferEmpty(ring) == true)
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f000 f828 	bl	80009a8 <isRingBufferEmpty>
 8000958:	4603      	mov	r3, r0
 800095a:	2b01      	cmp	r3, #1
 800095c:	d101      	bne.n	8000962 <removeFromRingBuffer+0x1a>
		return false;
 800095e:	2300      	movs	r3, #0
 8000960:	e01e      	b.n	80009a0 <removeFromRingBuffer+0x58>

	// Kopiere Nachricht
	memcpy((void *)msg, (void *)&ring->buffer[ring->tail], sizeof(CAN_message_t));
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	689a      	ldr	r2, [r3, #8]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	885b      	ldrh	r3, [r3, #2]
 800096a:	b29b      	uxth	r3, r3
 800096c:	4619      	mov	r1, r3
 800096e:	460b      	mov	r3, r1
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	440b      	add	r3, r1
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	4413      	add	r3, r2
 8000978:	2214      	movs	r2, #20
 800097a:	4619      	mov	r1, r3
 800097c:	6838      	ldr	r0, [r7, #0]
 800097e:	f008 f863 	bl	8008a48 <memcpy>

	// Ringbuffer Schwanz hochzaehlen
	ring->tail = (ring->tail + 1) % ring->size;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	885b      	ldrh	r3, [r3, #2]
 8000986:	b29b      	uxth	r3, r3
 8000988:	3301      	adds	r3, #1
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	8892      	ldrh	r2, [r2, #4]
 800098e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000992:	fb01 f202 	mul.w	r2, r1, r2
 8000996:	1a9b      	subs	r3, r3, r2
 8000998:	b29a      	uxth	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	805a      	strh	r2, [r3, #2]

	return true;
 800099e:	2301      	movs	r3, #1
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <isRingBufferEmpty>:
//----------------------------------------------------------------------

// Abfrage, ob Ringbuffer Nachrichten hat
//----------------------------------------------------------------------
bool isRingBufferEmpty(RingbufferTypeDef *ring)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	if (ring->head == ring->tail)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	885b      	ldrh	r3, [r3, #2]
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	429a      	cmp	r2, r3
 80009be:	d101      	bne.n	80009c4 <isRingBufferEmpty+0x1c>
		return true;
 80009c0:	2301      	movs	r3, #1
 80009c2:	e000      	b.n	80009c6 <isRingBufferEmpty+0x1e>

	return false;
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
	...

080009d4 <HAL_CAN_TxMailbox0CompleteCallback>:
//----------------------------------------------------------------------

// Sendeinterrupt Mailbox 0
//----------------------------------------------------------------------
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *CanHandler)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b088      	sub	sp, #32
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	CAN_message_t txmsg;

	// Wenn CAN1 Nachricht gesendet hat
	if (CanHandler->Instance == CAN3)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d10e      	bne.n	8000a04 <HAL_CAN_TxMailbox0CompleteCallback+0x30>
	{
		if (removeFromRingBuffer(&txRing, &txmsg) == true)
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	4619      	mov	r1, r3
 80009ec:	4808      	ldr	r0, [pc, #32]	; (8000a10 <HAL_CAN_TxMailbox0CompleteCallback+0x3c>)
 80009ee:	f7ff ffab 	bl	8000948 <removeFromRingBuffer>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d105      	bne.n	8000a04 <HAL_CAN_TxMailbox0CompleteCallback+0x30>
		{
			CANwrite(&txmsg, true);
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	2101      	movs	r1, #1
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fdf8 	bl	80005f4 <CANwrite>
		}
	}

	// TODO CAN2 und CAN3 hinzufuegen
}
 8000a04:	bf00      	nop
 8000a06:	3720      	adds	r7, #32
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40003400 	.word	0x40003400
 8000a10:	20000088 	.word	0x20000088

08000a14 <HAL_CAN_TxMailbox1CompleteCallback>:
//----------------------------------------------------------------------

// Sendeinterrupt Mailbox 1
//----------------------------------------------------------------------
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *CanHandler)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	CAN_message_t txmsg;

	// Wenn CAN1 Nachricht gesendet hat
	if (CanHandler->Instance == CAN3)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <HAL_CAN_TxMailbox1CompleteCallback+0x38>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d10e      	bne.n	8000a44 <HAL_CAN_TxMailbox1CompleteCallback+0x30>
	{
		if (removeFromRingBuffer(&txRing, &txmsg) == true)
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4808      	ldr	r0, [pc, #32]	; (8000a50 <HAL_CAN_TxMailbox1CompleteCallback+0x3c>)
 8000a2e:	f7ff ff8b 	bl	8000948 <removeFromRingBuffer>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d105      	bne.n	8000a44 <HAL_CAN_TxMailbox1CompleteCallback+0x30>
		{
			CANwrite(&txmsg, true);
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fdd8 	bl	80005f4 <CANwrite>
		}
	}

	// TODO CAN2 und CAN3 hinzufuegen
}
 8000a44:	bf00      	nop
 8000a46:	3720      	adds	r7, #32
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40003400 	.word	0x40003400
 8000a50:	20000088 	.word	0x20000088

08000a54 <HAL_CAN_TxMailbox2CompleteCallback>:
//----------------------------------------------------------------------

// Sendeinterrupt Mailbox 2
//----------------------------------------------------------------------
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *CanHandler)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	CAN_message_t txmsg;

	// Wenn CAN1 Nachricht gesendet hat
	if (CanHandler->Instance == CAN3)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <HAL_CAN_TxMailbox2CompleteCallback+0x38>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d10e      	bne.n	8000a84 <HAL_CAN_TxMailbox2CompleteCallback+0x30>
	{
		if (removeFromRingBuffer(&txRing, &txmsg) == true)
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4808      	ldr	r0, [pc, #32]	; (8000a90 <HAL_CAN_TxMailbox2CompleteCallback+0x3c>)
 8000a6e:	f7ff ff6b 	bl	8000948 <removeFromRingBuffer>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d105      	bne.n	8000a84 <HAL_CAN_TxMailbox2CompleteCallback+0x30>
		{
			CANwrite(&txmsg, true);
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fdb8 	bl	80005f4 <CANwrite>
		}
	}

	// TODO CAN2 und CAN3 hinzufuegen
}
 8000a84:	bf00      	nop
 8000a86:	3720      	adds	r7, #32
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40003400 	.word	0x40003400
 8000a90:	20000088 	.word	0x20000088

08000a94 <HAL_CAN_RxFifo0MsgPendingCallback>:
//----------------------------------------------------------------------

// Empfanginterrupt FIFO0
//----------------------------------------------------------------------
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandler)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08e      	sub	sp, #56	; 0x38
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	CAN_message_t rxmsg;
	CAN_RxHeaderTypeDef RxHeader;

	// Schreibe Nachricht von CAN-Bus in Ringbuffer
	if (HAL_CAN_GetRxMessage(CanHandler, CAN_RX_FIFO0, &RxHeader, rxmsg.buf) == HAL_OK)
 8000a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa0:	3309      	adds	r3, #9
 8000aa2:	f107 0208 	add.w	r2, r7, #8
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f003 fcbb 	bl	8004424 <HAL_CAN_GetRxMessage>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d136      	bne.n	8000b22 <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
	{
		if (RxHeader.IDE == CAN_ID_STD)
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d108      	bne.n	8000acc <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
		{
			rxmsg.id = RxHeader.StdId;
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
			rxmsg.flags.extended = 0;
 8000abe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ac2:	f36f 0300 	bfc	r3, #0, #1
 8000ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000aca:	e007      	b.n	8000adc <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
		}
		else
		{
			rxmsg.id = RxHeader.ExtId;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
			rxmsg.flags.extended = 1;
 8000ad0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		rxmsg.flags.remote = RxHeader.RTR;
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ae8:	f362 0341 	bfi	r3, r2, #1, #1
 8000aec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		rxmsg.mb = RxHeader.FilterMatchIndex;
 8000af0:	6a3b      	ldr	r3, [r7, #32]
 8000af2:	b25b      	sxtb	r3, r3
 8000af4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		rxmsg.timestamp = RxHeader.Timestamp;
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	853b      	strh	r3, [r7, #40]	; 0x28
		rxmsg.len = RxHeader.DLC;
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

		// TODO Ringbuffer fuer einzelne CAN-Busse erstellen
		if (CanHandler->Instance == CAN3)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a08      	ldr	r2, [pc, #32]	; (8000b2c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d108      	bne.n	8000b22 <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
		{
			rxmsg.bus = 1;
 8000b10:	2301      	movs	r3, #1
 8000b12:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			addToRingBuffer(&rxRing, &rxmsg);
 8000b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4804      	ldr	r0, [pc, #16]	; (8000b30 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000b1e:	f7ff fee2 	bl	80008e6 <addToRingBuffer>
		}

		// TODO CAN2 und CAN3 hinzufuegen
	}
}
 8000b22:	bf00      	nop
 8000b24:	3738      	adds	r7, #56	; 0x38
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40003400 	.word	0x40003400
 8000b30:	2000007c 	.word	0x2000007c

08000b34 <CAN3_RX0_IRQHandler>:
//----------------------------------------------------------------------

// RX IRQ Handler
//----------------------------------------------------------------------
void CAN3_RX0_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan3);
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <CAN3_RX0_IRQHandler+0x10>)
 8000b3a:	f003 fdd2 	bl	80046e2 <HAL_CAN_IRQHandler>
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000224 	.word	0x20000224

08000b48 <CAN3_TX_IRQHandler>:
//----------------------------------------------------------------------

// TX IRQ Handler
//----------------------------------------------------------------------
void CAN3_TX_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan3);
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <CAN3_TX_IRQHandler+0x10>)
 8000b4e:	f003 fdc8 	bl	80046e2 <HAL_CAN_IRQHandler>
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000224 	.word	0x20000224

08000b5c <CAN_config>:
//----------------------------------------------------------------------

// Konfiguriere CAN Nachrichten
//----------------------------------------------------------------------
void CAN_config(void)
{
 8000b5c:	b5b0      	push	{r4, r5, r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af02      	add	r7, sp, #8
	CAN_Output_PaketListe[0] = CAN_Nachricht(BMS_CAN_SAFETY, 6, 100, 17);
 8000b62:	4c42      	ldr	r4, [pc, #264]	; (8000c6c <CAN_config+0x110>)
 8000b64:	4638      	mov	r0, r7
 8000b66:	2311      	movs	r3, #17
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	2364      	movs	r3, #100	; 0x64
 8000b6c:	2206      	movs	r2, #6
 8000b6e:	f44f 719c 	mov.w	r1, #312	; 0x138
 8000b72:	f7ff fe1f 	bl	80007b4 <CAN_Nachricht>
 8000b76:	4625      	mov	r5, r4
 8000b78:	463c      	mov	r4, r7
 8000b7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b7e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000b82:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	CAN_Output_PaketListe[1] = CAN_Nachricht(BMS_CAN_DIGITAL_OUT, 5, 200, 13);
 8000b86:	4c39      	ldr	r4, [pc, #228]	; (8000c6c <CAN_config+0x110>)
 8000b88:	4638      	mov	r0, r7
 8000b8a:	230d      	movs	r3, #13
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	23c8      	movs	r3, #200	; 0xc8
 8000b90:	2205      	movs	r2, #5
 8000b92:	f240 2137 	movw	r1, #567	; 0x237
 8000b96:	f7ff fe0d 	bl	80007b4 <CAN_Nachricht>
 8000b9a:	341c      	adds	r4, #28
 8000b9c:	463d      	mov	r5, r7
 8000b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ba6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	CAN_Output_PaketListe[2] = CAN_Nachricht(BMS_CAN_DIGITAL_IN, 4, 200, 14);
 8000baa:	4c30      	ldr	r4, [pc, #192]	; (8000c6c <CAN_config+0x110>)
 8000bac:	4638      	mov	r0, r7
 8000bae:	230e      	movs	r3, #14
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	23c8      	movs	r3, #200	; 0xc8
 8000bb4:	2204      	movs	r2, #4
 8000bb6:	f44f 710e 	mov.w	r1, #568	; 0x238
 8000bba:	f7ff fdfb 	bl	80007b4 <CAN_Nachricht>
 8000bbe:	3438      	adds	r4, #56	; 0x38
 8000bc0:	463d      	mov	r5, r7
 8000bc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	CAN_Output_PaketListe[3] = CAN_Nachricht(BMS_CAN_ANALOG_IN, 8, 500, 7);
 8000bce:	4c27      	ldr	r4, [pc, #156]	; (8000c6c <CAN_config+0x110>)
 8000bd0:	4638      	mov	r0, r7
 8000bd2:	2307      	movs	r3, #7
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bda:	2208      	movs	r2, #8
 8000bdc:	f240 2139 	movw	r1, #569	; 0x239
 8000be0:	f7ff fde8 	bl	80007b4 <CAN_Nachricht>
 8000be4:	3454      	adds	r4, #84	; 0x54
 8000be6:	463d      	mov	r5, r7
 8000be8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bf0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	CAN_Output_PaketListe[4] = CAN_Nachricht(BMS_CAN_TEMPERATUR, 8, 500, 24);
 8000bf4:	4c1d      	ldr	r4, [pc, #116]	; (8000c6c <CAN_config+0x110>)
 8000bf6:	4638      	mov	r0, r7
 8000bf8:	2318      	movs	r3, #24
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c00:	2208      	movs	r2, #8
 8000c02:	f44f 61a7 	mov.w	r1, #1336	; 0x538
 8000c06:	f7ff fdd5 	bl	80007b4 <CAN_Nachricht>
 8000c0a:	3470      	adds	r4, #112	; 0x70
 8000c0c:	463d      	mov	r5, r7
 8000c0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	CAN_Output_PaketListe[5] = CAN_Nachricht(BMS_CAN_STATUS, 1, 200, 5);
 8000c1a:	4c14      	ldr	r4, [pc, #80]	; (8000c6c <CAN_config+0x110>)
 8000c1c:	4638      	mov	r0, r7
 8000c1e:	2305      	movs	r3, #5
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	23c8      	movs	r3, #200	; 0xc8
 8000c24:	2201      	movs	r2, #1
 8000c26:	f44f 61ac 	mov.w	r1, #1376	; 0x560
 8000c2a:	f7ff fdc3 	bl	80007b4 <CAN_Nachricht>
 8000c2e:	348c      	adds	r4, #140	; 0x8c
 8000c30:	463d      	mov	r5, r7
 8000c32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	CAN_Output_PaketListe[6] = CAN_Nachricht(BMS_CAN_IMD, 5, 200, 12);
 8000c3e:	4c0b      	ldr	r4, [pc, #44]	; (8000c6c <CAN_config+0x110>)
 8000c40:	4638      	mov	r0, r7
 8000c42:	230c      	movs	r3, #12
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	23c8      	movs	r3, #200	; 0xc8
 8000c48:	2205      	movs	r2, #5
 8000c4a:	f240 5165 	movw	r1, #1381	; 0x565
 8000c4e:	f7ff fdb1 	bl	80007b4 <CAN_Nachricht>
 8000c52:	34a8      	adds	r4, #168	; 0xa8
 8000c54:	463d      	mov	r5, r7
 8000c56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000c62:	bf00      	nop
 8000c64:	3720      	adds	r7, #32
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bdb0      	pop	{r4, r5, r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200000a4 	.word	0x200000a4

08000c70 <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 8000c76:	2114      	movs	r1, #20
 8000c78:	483d      	ldr	r0, [pc, #244]	; (8000d70 <collectHardwareInfo+0x100>)
 8000c7a:	f7ff fc63 	bl	8000544 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 8000c7e:	f002 fc75 	bl	800356c <HAL_GetDEVID>
 8000c82:	4603      	mov	r3, r0
 8000c84:	210a      	movs	r1, #10
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fc70 	bl	800056c <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 8000c8c:	2116      	movs	r1, #22
 8000c8e:	4839      	ldr	r0, [pc, #228]	; (8000d74 <collectHardwareInfo+0x104>)
 8000c90:	f7ff fc58 	bl	8000544 <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 8000c94:	f002 fc5e 	bl	8003554 <HAL_GetREVID>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	f242 0201 	movw	r2, #8193	; 0x2001
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d016      	beq.n	8000cd0 <collectHardwareInfo+0x60>
 8000ca2:	f242 0201 	movw	r2, #8193	; 0x2001
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d817      	bhi.n	8000cda <collectHardwareInfo+0x6a>
 8000caa:	f241 0201 	movw	r2, #4097	; 0x1001
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d004      	beq.n	8000cbc <collectHardwareInfo+0x4c>
 8000cb2:	f241 0203 	movw	r2, #4099	; 0x1003
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d005      	beq.n	8000cc6 <collectHardwareInfo+0x56>
 8000cba:	e00e      	b.n	8000cda <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	482e      	ldr	r0, [pc, #184]	; (8000d78 <collectHardwareInfo+0x108>)
 8000cc0:	f7ff fc40 	bl	8000544 <uartTransmit>
			break;
 8000cc4:	e011      	b.n	8000cea <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	482c      	ldr	r0, [pc, #176]	; (8000d7c <collectHardwareInfo+0x10c>)
 8000cca:	f7ff fc3b 	bl	8000544 <uartTransmit>
			break;
 8000cce:	e00c      	b.n	8000cea <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	482b      	ldr	r0, [pc, #172]	; (8000d80 <collectHardwareInfo+0x110>)
 8000cd4:	f7ff fc36 	bl	8000544 <uartTransmit>
			break;
 8000cd8:	e007      	b.n	8000cea <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 8000cda:	f002 fc3b 	bl	8003554 <HAL_GetREVID>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	210a      	movs	r1, #10
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fc42 	bl	800056c <uartTransmitNumber>
			break;
 8000ce8:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 8000cea:	2114      	movs	r1, #20
 8000cec:	4825      	ldr	r0, [pc, #148]	; (8000d84 <collectHardwareInfo+0x114>)
 8000cee:	f7ff fc29 	bl	8000544 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 8000cf2:	f004 fdf1 	bl	80058d8 <HAL_RCC_GetSysClockFreq>
 8000cf6:	6078      	str	r0, [r7, #4]
		frequency = frequency / 1000000;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a23      	ldr	r2, [pc, #140]	; (8000d88 <collectHardwareInfo+0x118>)
 8000cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8000d00:	0c9b      	lsrs	r3, r3, #18
 8000d02:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 8000d04:	210a      	movs	r1, #10
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff fc30 	bl	800056c <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 8000d0c:	2104      	movs	r1, #4
 8000d0e:	481f      	ldr	r0, [pc, #124]	; (8000d8c <collectHardwareInfo+0x11c>)
 8000d10:	f7ff fc18 	bl	8000544 <uartTransmit>


	uartTransmit("\n", 1);
 8000d14:	2101      	movs	r1, #1
 8000d16:	481e      	ldr	r0, [pc, #120]	; (8000d90 <collectHardwareInfo+0x120>)
 8000d18:	f7ff fc14 	bl	8000544 <uartTransmit>
	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 8000d1c:	2110      	movs	r1, #16
 8000d1e:	481d      	ldr	r0, [pc, #116]	; (8000d94 <collectHardwareInfo+0x124>)
 8000d20:	f7ff fc10 	bl	8000544 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 8000d24:	f002 fc30 	bl	8003588 <HAL_GetUIDw0>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2110      	movs	r1, #16
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fc1d 	bl	800056c <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000d32:	2101      	movs	r1, #1
 8000d34:	4818      	ldr	r0, [pc, #96]	; (8000d98 <collectHardwareInfo+0x128>)
 8000d36:	f7ff fc05 	bl	8000544 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 8000d3a:	f002 fc31 	bl	80035a0 <HAL_GetUIDw1>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2110      	movs	r1, #16
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fc12 	bl	800056c <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000d48:	2101      	movs	r1, #1
 8000d4a:	4813      	ldr	r0, [pc, #76]	; (8000d98 <collectHardwareInfo+0x128>)
 8000d4c:	f7ff fbfa 	bl	8000544 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8000d50:	f002 fc32 	bl	80035b8 <HAL_GetUIDw2>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2110      	movs	r1, #16
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fc07 	bl	800056c <uartTransmitNumber>

	uartTransmit("\n", 1);
 8000d5e:	2101      	movs	r1, #1
 8000d60:	480b      	ldr	r0, [pc, #44]	; (8000d90 <collectHardwareInfo+0x120>)
 8000d62:	f7ff fbef 	bl	8000544 <uartTransmit>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	08008a7c 	.word	0x08008a7c
 8000d74:	08008a90 	.word	0x08008a90
 8000d78:	08008aa8 	.word	0x08008aa8
 8000d7c:	08008aac 	.word	0x08008aac
 8000d80:	08008ab0 	.word	0x08008ab0
 8000d84:	08008ab4 	.word	0x08008ab4
 8000d88:	431bde83 	.word	0x431bde83
 8000d8c:	08008ac8 	.word	0x08008ac8
 8000d90:	08008ad0 	.word	0x08008ad0
 8000d94:	08008ad4 	.word	0x08008ad4
 8000d98:	08008ae4 	.word	0x08008ae4

08000d9c <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 8000da0:	2113      	movs	r1, #19
 8000da2:	4824      	ldr	r0, [pc, #144]	; (8000e34 <collectMiddlewareInfo+0x98>)
 8000da4:	f7ff fbce 	bl	8000544 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8000da8:	210a      	movs	r1, #10
 8000daa:	2005      	movs	r0, #5
 8000dac:	f7ff fbde 	bl	800056c <uartTransmitNumber>
	uartTransmit(".", 1);
 8000db0:	2101      	movs	r1, #1
 8000db2:	4821      	ldr	r0, [pc, #132]	; (8000e38 <collectMiddlewareInfo+0x9c>)
 8000db4:	f7ff fbc6 	bl	8000544 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8000db8:	210a      	movs	r1, #10
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff fbd6 	bl	800056c <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 8000dc0:	2111      	movs	r1, #17
 8000dc2:	481e      	ldr	r0, [pc, #120]	; (8000e3c <collectMiddlewareInfo+0xa0>)
 8000dc4:	f7ff fbbe 	bl	8000544 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8000dc8:	f002 fbba 	bl	8003540 <HAL_GetHalVersion>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	0e1b      	lsrs	r3, r3, #24
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	210a      	movs	r1, #10
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fbc9 	bl	800056c <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000dda:	2101      	movs	r1, #1
 8000ddc:	4816      	ldr	r0, [pc, #88]	; (8000e38 <collectMiddlewareInfo+0x9c>)
 8000dde:	f7ff fbb1 	bl	8000544 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 8000de2:	f002 fbad 	bl	8003540 <HAL_GetHalVersion>
 8000de6:	4603      	mov	r3, r0
 8000de8:	0c1b      	lsrs	r3, r3, #16
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	210a      	movs	r1, #10
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fbbc 	bl	800056c <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000df4:	2101      	movs	r1, #1
 8000df6:	4810      	ldr	r0, [pc, #64]	; (8000e38 <collectMiddlewareInfo+0x9c>)
 8000df8:	f7ff fba4 	bl	8000544 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8000dfc:	f002 fba0 	bl	8003540 <HAL_GetHalVersion>
 8000e00:	4603      	mov	r3, r0
 8000e02:	0a1b      	lsrs	r3, r3, #8
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	210a      	movs	r1, #10
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fbaf 	bl	800056c <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000e0e:	2101      	movs	r1, #1
 8000e10:	4809      	ldr	r0, [pc, #36]	; (8000e38 <collectMiddlewareInfo+0x9c>)
 8000e12:	f7ff fb97 	bl	8000544 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000e16:	f002 fb93 	bl	8003540 <HAL_GetHalVersion>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	210a      	movs	r1, #10
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fba3 	bl	800056c <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 8000e26:	2101      	movs	r1, #1
 8000e28:	4805      	ldr	r0, [pc, #20]	; (8000e40 <collectMiddlewareInfo+0xa4>)
 8000e2a:	f7ff fb8b 	bl	8000544 <uartTransmit>
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	08008ae8 	.word	0x08008ae8
 8000e38:	08008afc 	.word	0x08008afc
 8000e3c:	08008b00 	.word	0x08008b00
 8000e40:	08008ad0 	.word	0x08008ad0

08000e44 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 8000e48:	2110      	movs	r1, #16
 8000e4a:	4826      	ldr	r0, [pc, #152]	; (8000ee4 <collectSoftwareInfo+0xa0>)
 8000e4c:	f7ff fb7a 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8000e50:	2108      	movs	r1, #8
 8000e52:	4825      	ldr	r0, [pc, #148]	; (8000ee8 <collectSoftwareInfo+0xa4>)
 8000e54:	f7ff fb76 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8000e58:	2110      	movs	r1, #16
 8000e5a:	4824      	ldr	r0, [pc, #144]	; (8000eec <collectSoftwareInfo+0xa8>)
 8000e5c:	f7ff fb72 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8000e60:	2108      	movs	r1, #8
 8000e62:	4823      	ldr	r0, [pc, #140]	; (8000ef0 <collectSoftwareInfo+0xac>)
 8000e64:	f7ff fb6e 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8000e68:	210e      	movs	r1, #14
 8000e6a:	4822      	ldr	r0, [pc, #136]	; (8000ef4 <collectSoftwareInfo+0xb0>)
 8000e6c:	f7ff fb6a 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 8000e70:	2129      	movs	r1, #41	; 0x29
 8000e72:	4821      	ldr	r0, [pc, #132]	; (8000ef8 <collectSoftwareInfo+0xb4>)
 8000e74:	f7ff fb66 	bl	8000544 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000e78:	2101      	movs	r1, #1
 8000e7a:	4820      	ldr	r0, [pc, #128]	; (8000efc <collectSoftwareInfo+0xb8>)
 8000e7c:	f7ff fb62 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000e80:	2115      	movs	r1, #21
 8000e82:	481f      	ldr	r0, [pc, #124]	; (8000f00 <collectSoftwareInfo+0xbc>)
 8000e84:	f7ff fb5e 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 8000e88:	2105      	movs	r1, #5
 8000e8a:	481e      	ldr	r0, [pc, #120]	; (8000f04 <collectSoftwareInfo+0xc0>)
 8000e8c:	f7ff fb5a 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8000e90:	2114      	movs	r1, #20
 8000e92:	481d      	ldr	r0, [pc, #116]	; (8000f08 <collectSoftwareInfo+0xc4>)
 8000e94:	f7ff fb56 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 8000e98:	2108      	movs	r1, #8
 8000e9a:	481c      	ldr	r0, [pc, #112]	; (8000f0c <collectSoftwareInfo+0xc8>)
 8000e9c:	f7ff fb52 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 8000ea0:	2115      	movs	r1, #21
 8000ea2:	481b      	ldr	r0, [pc, #108]	; (8000f10 <collectSoftwareInfo+0xcc>)
 8000ea4:	f7ff fb4e 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 8000ea8:	2111      	movs	r1, #17
 8000eaa:	481a      	ldr	r0, [pc, #104]	; (8000f14 <collectSoftwareInfo+0xd0>)
 8000eac:	f7ff fb4a 	bl	8000544 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	4812      	ldr	r0, [pc, #72]	; (8000efc <collectSoftwareInfo+0xb8>)
 8000eb4:	f7ff fb46 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 8000eb8:	2110      	movs	r1, #16
 8000eba:	4817      	ldr	r0, [pc, #92]	; (8000f18 <collectSoftwareInfo+0xd4>)
 8000ebc:	f7ff fb42 	bl	8000544 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 8000ec0:	210b      	movs	r1, #11
 8000ec2:	4816      	ldr	r0, [pc, #88]	; (8000f1c <collectSoftwareInfo+0xd8>)
 8000ec4:	f7ff fb3e 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 8000ec8:	2110      	movs	r1, #16
 8000eca:	4815      	ldr	r0, [pc, #84]	; (8000f20 <collectSoftwareInfo+0xdc>)
 8000ecc:	f7ff fb3a 	bl	8000544 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 8000ed0:	2109      	movs	r1, #9
 8000ed2:	4814      	ldr	r0, [pc, #80]	; (8000f24 <collectSoftwareInfo+0xe0>)
 8000ed4:	f7ff fb36 	bl	8000544 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000ed8:	2101      	movs	r1, #1
 8000eda:	4808      	ldr	r0, [pc, #32]	; (8000efc <collectSoftwareInfo+0xb8>)
 8000edc:	f7ff fb32 	bl	8000544 <uartTransmit>
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	08008b14 	.word	0x08008b14
 8000ee8:	08008b24 	.word	0x08008b24
 8000eec:	08008b2c 	.word	0x08008b2c
 8000ef0:	08008b3c 	.word	0x08008b3c
 8000ef4:	08008b44 	.word	0x08008b44
 8000ef8:	08008b54 	.word	0x08008b54
 8000efc:	08008ad0 	.word	0x08008ad0
 8000f00:	08008b80 	.word	0x08008b80
 8000f04:	08008b98 	.word	0x08008b98
 8000f08:	08008ba0 	.word	0x08008ba0
 8000f0c:	08008bb4 	.word	0x08008bb4
 8000f10:	08008bbc 	.word	0x08008bbc
 8000f14:	08008bd4 	.word	0x08008bd4
 8000f18:	08008be8 	.word	0x08008be8
 8000f1c:	08008bf8 	.word	0x08008bf8
 8000f20:	08008c04 	.word	0x08008c04
 8000f24:	08008c14 	.word	0x08008c14

08000f28 <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 8000f2c:	2114      	movs	r1, #20
 8000f2e:	4814      	ldr	r0, [pc, #80]	; (8000f80 <collectGitcounts+0x58>)
 8000f30:	f7ff fb08 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 8000f34:	2103      	movs	r1, #3
 8000f36:	4813      	ldr	r0, [pc, #76]	; (8000f84 <collectGitcounts+0x5c>)
 8000f38:	f7ff fb04 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 8000f3c:	2116      	movs	r1, #22
 8000f3e:	4812      	ldr	r0, [pc, #72]	; (8000f88 <collectGitcounts+0x60>)
 8000f40:	f7ff fb00 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 8000f44:	2103      	movs	r1, #3
 8000f46:	4811      	ldr	r0, [pc, #68]	; (8000f8c <collectGitcounts+0x64>)
 8000f48:	f7ff fafc 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 8000f4c:	211b      	movs	r1, #27
 8000f4e:	4810      	ldr	r0, [pc, #64]	; (8000f90 <collectGitcounts+0x68>)
 8000f50:	f7ff faf8 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 8000f54:	2103      	movs	r1, #3
 8000f56:	480f      	ldr	r0, [pc, #60]	; (8000f94 <collectGitcounts+0x6c>)
 8000f58:	f7ff faf4 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000f5c:	2115      	movs	r1, #21
 8000f5e:	480e      	ldr	r0, [pc, #56]	; (8000f98 <collectGitcounts+0x70>)
 8000f60:	f7ff faf0 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8000f64:	2102      	movs	r1, #2
 8000f66:	480d      	ldr	r0, [pc, #52]	; (8000f9c <collectGitcounts+0x74>)
 8000f68:	f7ff faec 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8000f6c:	2114      	movs	r1, #20
 8000f6e:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <collectGitcounts+0x78>)
 8000f70:	f7ff fae8 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 8000f74:	2102      	movs	r1, #2
 8000f76:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <collectGitcounts+0x7c>)
 8000f78:	f7ff fae4 	bl	8000544 <uartTransmit>
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	08008c20 	.word	0x08008c20
 8000f84:	08008c34 	.word	0x08008c34
 8000f88:	08008c38 	.word	0x08008c38
 8000f8c:	08008c50 	.word	0x08008c50
 8000f90:	08008c54 	.word	0x08008c54
 8000f94:	08008c70 	.word	0x08008c70
 8000f98:	08008b80 	.word	0x08008b80
 8000f9c:	08008c74 	.word	0x08008c74
 8000fa0:	08008ba0 	.word	0x08008ba0
 8000fa4:	08008c78 	.word	0x08008c78

08000fa8 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000fac:	2111      	movs	r1, #17
 8000fae:	480e      	ldr	r0, [pc, #56]	; (8000fe8 <collectSystemInfo+0x40>)
 8000fb0:	f7ff fac8 	bl	8000544 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8000fb4:	f7ff fe5c 	bl	8000c70 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000fb8:	2111      	movs	r1, #17
 8000fba:	480c      	ldr	r0, [pc, #48]	; (8000fec <collectSystemInfo+0x44>)
 8000fbc:	f7ff fac2 	bl	8000544 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 8000fc0:	f7ff ff40 	bl	8000e44 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000fc4:	2113      	movs	r1, #19
 8000fc6:	480a      	ldr	r0, [pc, #40]	; (8000ff0 <collectSystemInfo+0x48>)
 8000fc8:	f7ff fabc 	bl	8000544 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8000fcc:	f7ff fee6 	bl	8000d9c <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 8000fd0:	2113      	movs	r1, #19
 8000fd2:	4808      	ldr	r0, [pc, #32]	; (8000ff4 <collectSystemInfo+0x4c>)
 8000fd4:	f7ff fab6 	bl	8000544 <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 8000fd8:	f7ff ffa6 	bl	8000f28 <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 8000fdc:	2103      	movs	r1, #3
 8000fde:	4806      	ldr	r0, [pc, #24]	; (8000ff8 <collectSystemInfo+0x50>)
 8000fe0:	f7ff fab0 	bl	8000544 <uartTransmit>
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	08008c7c 	.word	0x08008c7c
 8000fec:	08008c90 	.word	0x08008c90
 8000ff0:	08008ca4 	.word	0x08008ca4
 8000ff4:	08008cb8 	.word	0x08008cb8
 8000ff8:	08008ccc 	.word	0x08008ccc

08000ffc <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 8001002:	2300      	movs	r3, #0
 8001004:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8001006:	4b25      	ldr	r3, [pc, #148]	; (800109c <readResetSource+0xa0>)
 8001008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800100a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d002      	beq.n	8001018 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	3301      	adds	r3, #1
 8001016:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8001018:	4b20      	ldr	r3, [pc, #128]	; (800109c <readResetSource+0xa0>)
 800101a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800101c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d002      	beq.n	800102a <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	3302      	adds	r3, #2
 8001028:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 800102a:	4b1c      	ldr	r3, [pc, #112]	; (800109c <readResetSource+0xa0>)
 800102c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800102e:	2b00      	cmp	r3, #0
 8001030:	da02      	bge.n	8001038 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	3304      	adds	r3, #4
 8001036:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <readResetSource+0xa0>)
 800103a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800103c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d002      	beq.n	800104a <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	3308      	adds	r3, #8
 8001048:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <readResetSource+0xa0>)
 800104c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800104e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d002      	beq.n	800105c <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	3310      	adds	r3, #16
 800105a:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <readResetSource+0xa0>)
 800105e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d002      	beq.n	800106e <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	3320      	adds	r3, #32
 800106c:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <readResetSource+0xa0>)
 8001070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001072:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d002      	beq.n	8001080 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	3340      	adds	r3, #64	; 0x40
 800107e:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <readResetSource+0xa0>)
 8001082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001084:	4a05      	ldr	r2, [pc, #20]	; (800109c <readResetSource+0xa0>)
 8001086:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800108a:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 800108c:	79fb      	ldrb	r3, [r7, #7]
}
 800108e:	4618      	mov	r0, r3
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800

080010a0 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
	if (reset_flags == STARTUP)												// Regulaerer Start
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d104      	bne.n	80010ba <printResetSource+0x1a>
	{
		uartTransmit("Regular Start\r\n", 15);
 80010b0:	210f      	movs	r1, #15
 80010b2:	4827      	ldr	r0, [pc, #156]	; (8001150 <printResetSource+0xb0>)
 80010b4:	f7ff fa46 	bl	8000544 <uartTransmit>
		if (reset_flags & RMVF1)											// NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 80010b8:	e046      	b.n	8001148 <printResetSource+0xa8>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <printResetSource+0x2c>
			uartTransmit("Interner Watchdog Reset\n", 24);
 80010c4:	2118      	movs	r1, #24
 80010c6:	4823      	ldr	r0, [pc, #140]	; (8001154 <printResetSource+0xb4>)
 80010c8:	f7ff fa3c 	bl	8000544 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <printResetSource+0x3e>
			uartTransmit("Window Watchdog Reset\n", 22);
 80010d6:	2116      	movs	r1, #22
 80010d8:	481f      	ldr	r0, [pc, #124]	; (8001158 <printResetSource+0xb8>)
 80010da:	f7ff fa33 	bl	8000544 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <printResetSource+0x50>
			uartTransmit("CPU Reset\n", 10);
 80010e8:	210a      	movs	r1, #10
 80010ea:	481c      	ldr	r0, [pc, #112]	; (800115c <printResetSource+0xbc>)
 80010ec:	f7ff fa2a 	bl	8000544 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	f003 0308 	and.w	r3, r3, #8
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <printResetSource+0x62>
			uartTransmit("Brown Out Reset\n", 16);
 80010fa:	2110      	movs	r1, #16
 80010fc:	4818      	ldr	r0, [pc, #96]	; (8001160 <printResetSource+0xc0>)
 80010fe:	f7ff fa21 	bl	8000544 <uartTransmit>
		if (reset_flags & PORST1)											// Power on Reset / Power down Reser
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f003 0310 	and.w	r3, r3, #16
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <printResetSource+0x74>
			uartTransmit("Power On Reset\n", 15);
 800110c:	210f      	movs	r1, #15
 800110e:	4815      	ldr	r0, [pc, #84]	; (8001164 <printResetSource+0xc4>)
 8001110:	f7ff fa18 	bl	8000544 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	f003 0320 	and.w	r3, r3, #32
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <printResetSource+0x86>
			uartTransmit("Software Reset\n", 15);
 800111e:	210f      	movs	r1, #15
 8001120:	4811      	ldr	r0, [pc, #68]	; (8001168 <printResetSource+0xc8>)
 8001122:	f7ff fa0f 	bl	8000544 <uartTransmit>
		if (reset_flags & PINRST1)											// NRST pin
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <printResetSource+0x98>
			uartTransmit("PIN Reset\n", 10);
 8001130:	210a      	movs	r1, #10
 8001132:	480e      	ldr	r0, [pc, #56]	; (800116c <printResetSource+0xcc>)
 8001134:	f7ff fa06 	bl	8000544 <uartTransmit>
		if (reset_flags & RMVF1)											// NRST pin
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	2b00      	cmp	r3, #0
 800113e:	da03      	bge.n	8001148 <printResetSource+0xa8>
			uartTransmit("RMVF\n", 5);
 8001140:	2105      	movs	r1, #5
 8001142:	480b      	ldr	r0, [pc, #44]	; (8001170 <printResetSource+0xd0>)
 8001144:	f7ff f9fe 	bl	8000544 <uartTransmit>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	08008cd0 	.word	0x08008cd0
 8001154:	08008ce0 	.word	0x08008ce0
 8001158:	08008cfc 	.word	0x08008cfc
 800115c:	08008d14 	.word	0x08008d14
 8001160:	08008d20 	.word	0x08008d20
 8001164:	08008d34 	.word	0x08008d34
 8001168:	08008d44 	.word	0x08008d44
 800116c:	08008d54 	.word	0x08008d54
 8001170:	08008d60 	.word	0x08008d60

08001174 <ADC_STMTemperatur>:
//----------------------------------------------------------------------

// STM32 Temperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_STMTemperatur (void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;								// ADC Kanal einstellen
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <ADC_STMTemperatur+0x6c>)
 800118c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 800118e:	2301      	movs	r3, #1
 8001190:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8001192:	2301      	movs	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	4619      	mov	r1, r3
 800119a:	4812      	ldr	r0, [pc, #72]	; (80011e4 <ADC_STMTemperatur+0x70>)
 800119c:	f002 fbf6 	bl	800398c <HAL_ADC_ConfigChannel>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <ADC_STMTemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 80011a6:	f001 fc0f 	bl	80029c8 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 80011aa:	480e      	ldr	r0, [pc, #56]	; (80011e4 <ADC_STMTemperatur+0x70>)
 80011ac:	f002 fa54 	bl	8003658 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 80011b0:	2164      	movs	r1, #100	; 0x64
 80011b2:	480c      	ldr	r0, [pc, #48]	; (80011e4 <ADC_STMTemperatur+0x70>)
 80011b4:	f002 fb52 	bl	800385c <HAL_ADC_PollForConversion>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d105      	bne.n	80011ca <ADC_STMTemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 80011be:	4809      	ldr	r0, [pc, #36]	; (80011e4 <ADC_STMTemperatur+0x70>)
 80011c0:	f002 fbd7 	bl	8003972 <HAL_ADC_GetValue>
 80011c4:	4603      	mov	r3, r0
 80011c6:	82fb      	strh	r3, [r7, #22]
 80011c8:	e002      	b.n	80011d0 <ADC_STMTemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 80011ca:	200f      	movs	r0, #15
 80011cc:	f000 f988 	bl	80014e0 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 80011d0:	4804      	ldr	r0, [pc, #16]	; (80011e4 <ADC_STMTemperatur+0x70>)
 80011d2:	f002 fb0f 	bl	80037f4 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 80011d6:	8afb      	ldrh	r3, [r7, #22]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	10000012 	.word	0x10000012
 80011e4:	2000018c 	.word	0x2000018c

080011e8 <ADC_PCBTemperatur>:
//----------------------------------------------------------------------

// PCB Temperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_PCBTemperatur (void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_7;										// ADC Kanal einstellen
 80011fe:	2307      	movs	r3, #7
 8001200:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8001202:	2301      	movs	r3, #1
 8001204:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8001206:	2301      	movs	r3, #1
 8001208:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	4619      	mov	r1, r3
 800120e:	4811      	ldr	r0, [pc, #68]	; (8001254 <ADC_PCBTemperatur+0x6c>)
 8001210:	f002 fbbc 	bl	800398c <HAL_ADC_ConfigChannel>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <ADC_PCBTemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 800121a:	f001 fbd5 	bl	80029c8 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 800121e:	480d      	ldr	r0, [pc, #52]	; (8001254 <ADC_PCBTemperatur+0x6c>)
 8001220:	f002 fa1a 	bl	8003658 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8001224:	2164      	movs	r1, #100	; 0x64
 8001226:	480b      	ldr	r0, [pc, #44]	; (8001254 <ADC_PCBTemperatur+0x6c>)
 8001228:	f002 fb18 	bl	800385c <HAL_ADC_PollForConversion>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d105      	bne.n	800123e <ADC_PCBTemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8001232:	4808      	ldr	r0, [pc, #32]	; (8001254 <ADC_PCBTemperatur+0x6c>)
 8001234:	f002 fb9d 	bl	8003972 <HAL_ADC_GetValue>
 8001238:	4603      	mov	r3, r0
 800123a:	82fb      	strh	r3, [r7, #22]
 800123c:	e002      	b.n	8001244 <ADC_PCBTemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 800123e:	200f      	movs	r0, #15
 8001240:	f000 f94e 	bl	80014e0 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8001244:	4803      	ldr	r0, [pc, #12]	; (8001254 <ADC_PCBTemperatur+0x6c>)
 8001246:	f002 fad5 	bl	80037f4 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 800124a:	8afb      	ldrh	r3, [r7, #22]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	2000018c 	.word	0x2000018c

08001258 <ADC_KL15>:
//----------------------------------------------------------------------

// Spannung KL15 einlesen
//----------------------------------------------------------------------
uint16_t ADC_KL15 (void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_8;										// ADC Kanal einstellen
 800126e:	2308      	movs	r3, #8
 8001270:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8001272:	2301      	movs	r3, #1
 8001274:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8001276:	2301      	movs	r3, #1
 8001278:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	4619      	mov	r1, r3
 800127e:	4811      	ldr	r0, [pc, #68]	; (80012c4 <ADC_KL15+0x6c>)
 8001280:	f002 fb84 	bl	800398c <HAL_ADC_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <ADC_KL15+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 800128a:	f001 fb9d 	bl	80029c8 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 800128e:	480d      	ldr	r0, [pc, #52]	; (80012c4 <ADC_KL15+0x6c>)
 8001290:	f002 f9e2 	bl	8003658 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8001294:	2164      	movs	r1, #100	; 0x64
 8001296:	480b      	ldr	r0, [pc, #44]	; (80012c4 <ADC_KL15+0x6c>)
 8001298:	f002 fae0 	bl	800385c <HAL_ADC_PollForConversion>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d105      	bne.n	80012ae <ADC_KL15+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 80012a2:	4808      	ldr	r0, [pc, #32]	; (80012c4 <ADC_KL15+0x6c>)
 80012a4:	f002 fb65 	bl	8003972 <HAL_ADC_GetValue>
 80012a8:	4603      	mov	r3, r0
 80012aa:	82fb      	strh	r3, [r7, #22]
 80012ac:	e002      	b.n	80012b4 <ADC_KL15+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 80012ae:	200f      	movs	r0, #15
 80012b0:	f000 f916 	bl	80014e0 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 80012b4:	4803      	ldr	r0, [pc, #12]	; (80012c4 <ADC_KL15+0x6c>)
 80012b6:	f002 fa9d 	bl	80037f4 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 80012ba:	8afb      	ldrh	r3, [r7, #22]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	2000018c 	.word	0x2000018c

080012c8 <ADC_Temp1>:
//----------------------------------------------------------------------

// Temperatur 1 einlesen
//----------------------------------------------------------------------
uint16_t ADC_Temp1 (void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_3;										// ADC Kanal einstellen
 80012de:	2303      	movs	r3, #3
 80012e0:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 80012e2:	2301      	movs	r3, #1
 80012e4:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 80012e6:	2301      	movs	r3, #1
 80012e8:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	4619      	mov	r1, r3
 80012ee:	4811      	ldr	r0, [pc, #68]	; (8001334 <ADC_Temp1+0x6c>)
 80012f0:	f002 fb4c 	bl	800398c <HAL_ADC_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <ADC_Temp1+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 80012fa:	f001 fb65 	bl	80029c8 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 80012fe:	480d      	ldr	r0, [pc, #52]	; (8001334 <ADC_Temp1+0x6c>)
 8001300:	f002 f9aa 	bl	8003658 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8001304:	2164      	movs	r1, #100	; 0x64
 8001306:	480b      	ldr	r0, [pc, #44]	; (8001334 <ADC_Temp1+0x6c>)
 8001308:	f002 faa8 	bl	800385c <HAL_ADC_PollForConversion>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d105      	bne.n	800131e <ADC_Temp1+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8001312:	4808      	ldr	r0, [pc, #32]	; (8001334 <ADC_Temp1+0x6c>)
 8001314:	f002 fb2d 	bl	8003972 <HAL_ADC_GetValue>
 8001318:	4603      	mov	r3, r0
 800131a:	82fb      	strh	r3, [r7, #22]
 800131c:	e002      	b.n	8001324 <ADC_Temp1+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 800131e:	200f      	movs	r0, #15
 8001320:	f000 f8de 	bl	80014e0 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8001324:	4803      	ldr	r0, [pc, #12]	; (8001334 <ADC_Temp1+0x6c>)
 8001326:	f002 fa65 	bl	80037f4 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 800132a:	8afb      	ldrh	r3, [r7, #22]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	2000018c 	.word	0x2000018c

08001338 <ADC_Temp2>:
//----------------------------------------------------------------------

// Temperatur 2 einlesen
//----------------------------------------------------------------------
uint16_t ADC_Temp2 (void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_4;										// ADC Kanal einstellen
 800134e:	2304      	movs	r3, #4
 8001350:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8001352:	2301      	movs	r3, #1
 8001354:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8001356:	2301      	movs	r3, #1
 8001358:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	4619      	mov	r1, r3
 800135e:	4811      	ldr	r0, [pc, #68]	; (80013a4 <ADC_Temp2+0x6c>)
 8001360:	f002 fb14 	bl	800398c <HAL_ADC_ConfigChannel>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <ADC_Temp2+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 800136a:	f001 fb2d 	bl	80029c8 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 800136e:	480d      	ldr	r0, [pc, #52]	; (80013a4 <ADC_Temp2+0x6c>)
 8001370:	f002 f972 	bl	8003658 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8001374:	2164      	movs	r1, #100	; 0x64
 8001376:	480b      	ldr	r0, [pc, #44]	; (80013a4 <ADC_Temp2+0x6c>)
 8001378:	f002 fa70 	bl	800385c <HAL_ADC_PollForConversion>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d105      	bne.n	800138e <ADC_Temp2+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8001382:	4808      	ldr	r0, [pc, #32]	; (80013a4 <ADC_Temp2+0x6c>)
 8001384:	f002 faf5 	bl	8003972 <HAL_ADC_GetValue>
 8001388:	4603      	mov	r3, r0
 800138a:	82fb      	strh	r3, [r7, #22]
 800138c:	e002      	b.n	8001394 <ADC_Temp2+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 800138e:	200f      	movs	r0, #15
 8001390:	f000 f8a6 	bl	80014e0 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8001394:	4803      	ldr	r0, [pc, #12]	; (80013a4 <ADC_Temp2+0x6c>)
 8001396:	f002 fa2d 	bl	80037f4 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 800139a:	8afb      	ldrh	r3, [r7, #22]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	2000018c 	.word	0x2000018c

080013a8 <ADC_Temp3>:
//----------------------------------------------------------------------

// Temperatur 3 einlesen
//----------------------------------------------------------------------
uint16_t ADC_Temp3 (void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_5;										// ADC Kanal einstellen
 80013be:	2305      	movs	r3, #5
 80013c0:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 80013c2:	2301      	movs	r3, #1
 80013c4:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 80013c6:	2301      	movs	r3, #1
 80013c8:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	4619      	mov	r1, r3
 80013ce:	4811      	ldr	r0, [pc, #68]	; (8001414 <ADC_Temp3+0x6c>)
 80013d0:	f002 fadc 	bl	800398c <HAL_ADC_ConfigChannel>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <ADC_Temp3+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 80013da:	f001 faf5 	bl	80029c8 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 80013de:	480d      	ldr	r0, [pc, #52]	; (8001414 <ADC_Temp3+0x6c>)
 80013e0:	f002 f93a 	bl	8003658 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 80013e4:	2164      	movs	r1, #100	; 0x64
 80013e6:	480b      	ldr	r0, [pc, #44]	; (8001414 <ADC_Temp3+0x6c>)
 80013e8:	f002 fa38 	bl	800385c <HAL_ADC_PollForConversion>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d105      	bne.n	80013fe <ADC_Temp3+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 80013f2:	4808      	ldr	r0, [pc, #32]	; (8001414 <ADC_Temp3+0x6c>)
 80013f4:	f002 fabd 	bl	8003972 <HAL_ADC_GetValue>
 80013f8:	4603      	mov	r3, r0
 80013fa:	82fb      	strh	r3, [r7, #22]
 80013fc:	e002      	b.n	8001404 <ADC_Temp3+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 80013fe:	200f      	movs	r0, #15
 8001400:	f000 f86e 	bl	80014e0 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8001404:	4803      	ldr	r0, [pc, #12]	; (8001414 <ADC_Temp3+0x6c>)
 8001406:	f002 f9f5 	bl	80037f4 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 800140a:	8afb      	ldrh	r3, [r7, #22]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	2000018c 	.word	0x2000018c

08001418 <ADC_Temp4>:
//----------------------------------------------------------------------

// Temperatur 4 einlesen
//----------------------------------------------------------------------
uint16_t ADC_Temp4 (void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_6;										// ADC Kanal einstellen
 800142e:	2306      	movs	r3, #6
 8001430:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8001432:	2301      	movs	r3, #1
 8001434:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8001436:	2301      	movs	r3, #1
 8001438:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	4619      	mov	r1, r3
 800143e:	4811      	ldr	r0, [pc, #68]	; (8001484 <ADC_Temp4+0x6c>)
 8001440:	f002 faa4 	bl	800398c <HAL_ADC_ConfigChannel>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <ADC_Temp4+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 800144a:	f001 fabd 	bl	80029c8 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 800144e:	480d      	ldr	r0, [pc, #52]	; (8001484 <ADC_Temp4+0x6c>)
 8001450:	f002 f902 	bl	8003658 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8001454:	2164      	movs	r1, #100	; 0x64
 8001456:	480b      	ldr	r0, [pc, #44]	; (8001484 <ADC_Temp4+0x6c>)
 8001458:	f002 fa00 	bl	800385c <HAL_ADC_PollForConversion>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d105      	bne.n	800146e <ADC_Temp4+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8001462:	4808      	ldr	r0, [pc, #32]	; (8001484 <ADC_Temp4+0x6c>)
 8001464:	f002 fa85 	bl	8003972 <HAL_ADC_GetValue>
 8001468:	4603      	mov	r3, r0
 800146a:	82fb      	strh	r3, [r7, #22]
 800146c:	e002      	b.n	8001474 <ADC_Temp4+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 800146e:	200f      	movs	r0, #15
 8001470:	f000 f836 	bl	80014e0 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8001474:	4803      	ldr	r0, [pc, #12]	; (8001484 <ADC_Temp4+0x6c>)
 8001476:	f002 f9bd 	bl	80037f4 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 800147a:	8afb      	ldrh	r3, [r7, #22]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	2000018c 	.word	0x2000018c

08001488 <app_info>:
#include "app_info.h"
#include "BatteriemanagementSystem.h"
//----------------------------------------------------------------------

void app_info(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  	// Teste serielle Schnittstelle
	#define START_STRING_UART		"!--- Batteriemanagement-System ---!\n"
	uartTransmit(START_STRING_UART, sizeof(START_STRING_UART));
 800148c:	2125      	movs	r1, #37	; 0x25
 800148e:	4810      	ldr	r0, [pc, #64]	; (80014d0 <app_info+0x48>)
 8001490:	f7ff f858 	bl	8000544 <uartTransmit>
	#define VERSION_STRING_UART		"Application Version: "
	uartTransmit(VERSION_STRING_UART, sizeof(VERSION_STRING_UART));
 8001494:	2116      	movs	r1, #22
 8001496:	480f      	ldr	r0, [pc, #60]	; (80014d4 <app_info+0x4c>)
 8001498:	f7ff f854 	bl	8000544 <uartTransmit>
	uartTransmitNumber(MAJOR, 10);
 800149c:	210a      	movs	r1, #10
 800149e:	2000      	movs	r0, #0
 80014a0:	f7ff f864 	bl	800056c <uartTransmitNumber>
	uartTransmit(".", 1);
 80014a4:	2101      	movs	r1, #1
 80014a6:	480c      	ldr	r0, [pc, #48]	; (80014d8 <app_info+0x50>)
 80014a8:	f7ff f84c 	bl	8000544 <uartTransmit>
	uartTransmitNumber(MINOR, 10);
 80014ac:	210a      	movs	r1, #10
 80014ae:	2001      	movs	r0, #1
 80014b0:	f7ff f85c 	bl	800056c <uartTransmitNumber>
	uartTransmit("\n", 1);
 80014b4:	2101      	movs	r1, #1
 80014b6:	4809      	ldr	r0, [pc, #36]	; (80014dc <app_info+0x54>)
 80014b8:	f7ff f844 	bl	8000544 <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 80014bc:	f7ff fd74 	bl	8000fa8 <collectSystemInfo>
	printResetSource(readResetSource());
 80014c0:	f7ff fd9c 	bl	8000ffc <readResetSource>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fdea 	bl	80010a0 <printResetSource>
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	08008d68 	.word	0x08008d68
 80014d4:	08008d90 	.word	0x08008d90
 80014d8:	08008da8 	.word	0x08008da8
 80014dc:	08008dac 	.word	0x08008dac

080014e0 <software_error>:
//----------------------------------------------------------------------

// Diagnose Funktion falls ein Software Fehler auftritt
//----------------------------------------------------------------------
void software_error(uint8_t errorcode)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ea:	b672      	cpsid	i
}
 80014ec:	bf00      	nop
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 80014ee:	4a1e      	ldr	r2, [pc, #120]	; (8001568 <software_error+0x88>)
 80014f0:	7813      	ldrb	r3, [r2, #0]
 80014f2:	f043 0320 	orr.w	r3, r3, #32
 80014f6:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 80014f8:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <software_error+0x88>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001500:	b2db      	uxtb	r3, r3
 8001502:	461a      	mov	r2, r3
 8001504:	2104      	movs	r1, #4
 8001506:	4819      	ldr	r0, [pc, #100]	; (800156c <software_error+0x8c>)
 8001508:	f003 fdd2 	bl	80050b0 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 800150c:	4a16      	ldr	r2, [pc, #88]	; (8001568 <software_error+0x88>)
 800150e:	7813      	ldrb	r3, [r2, #0]
 8001510:	f36f 1386 	bfc	r3, #6, #1
 8001514:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <software_error+0x88>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800151e:	b2db      	uxtb	r3, r3
 8001520:	461a      	mov	r2, r3
 8001522:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001526:	4811      	ldr	r0, [pc, #68]	; (800156c <software_error+0x8c>)
 8001528:	f003 fdc2 	bl	80050b0 <HAL_GPIO_WritePin>

	// Wenn Fehler, dann AMS Limit zuruecknehmen, Emergency Run wird ausgefuehrt
	system_out.AmsLimit = 0;												// Zuruecksetzen Variable
 800152c:	4a10      	ldr	r2, [pc, #64]	; (8001570 <software_error+0x90>)
 800152e:	7813      	ldrb	r3, [r2, #0]
 8001530:	f36f 0300 	bfc	r3, #0, #1
 8001534:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(AMS_LIMIT_GPIO_Port, AMS_LIMIT_Pin, system_out.AmsLimit);// Fehler AMS Limit
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <software_error+0x90>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800153e:	b2db      	uxtb	r3, r3
 8001540:	461a      	mov	r2, r3
 8001542:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001546:	480b      	ldr	r0, [pc, #44]	; (8001574 <software_error+0x94>)
 8001548:	f003 fdb2 	bl	80050b0 <HAL_GPIO_WritePin>

#ifdef DEBUG																// Serielle Kommunukation nur waehrend Debugging
#define SOFTERRORMESSAGE			"\nSoftware Error Handler ausgeloest\n"	// Ausgabe das Fehler aufgetreten ist
	uartTransmit(SOFTERRORMESSAGE,sizeof(SOFTERRORMESSAGE));
 800154c:	2124      	movs	r1, #36	; 0x24
 800154e:	480a      	ldr	r0, [pc, #40]	; (8001578 <software_error+0x98>)
 8001550:	f7fe fff8 	bl	8000544 <uartTransmit>

#define ERRORCODE					"Error Code:\t"							// Ausgabe des Fehlers anhand von Fehlercode
	uartTransmit(ERRORCODE,sizeof(ERRORCODE));
 8001554:	210d      	movs	r1, #13
 8001556:	4809      	ldr	r0, [pc, #36]	; (800157c <software_error+0x9c>)
 8001558:	f7fe fff4 	bl	8000544 <uartTransmit>
	uartTransmitNumber(errorcode, 10);										// Fehlercode ausgeben
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	210a      	movs	r1, #10
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff f803 	bl	800056c <uartTransmitNumber>
#endif
	while (1);																// Endlosschleife
 8001566:	e7fe      	b.n	8001566 <software_error+0x86>
 8001568:	20000184 	.word	0x20000184
 800156c:	40020400 	.word	0x40020400
 8001570:	2000017c 	.word	0x2000017c
 8001574:	40021800 	.word	0x40021800
 8001578:	08008db0 	.word	0x08008db0
 800157c:	08008dd4 	.word	0x08008dd4

08001580 <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 8001584:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001588:	4850      	ldr	r0, [pc, #320]	; (80016cc <readall_inputs+0x14c>)
 800158a:	f003 fd79 	bl	8005080 <HAL_GPIO_ReadPin>
 800158e:	4603      	mov	r3, r0
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	b2d9      	uxtb	r1, r3
 8001596:	4a4e      	ldr	r2, [pc, #312]	; (80016d0 <readall_inputs+0x150>)
 8001598:	7813      	ldrb	r3, [r2, #0]
 800159a:	f361 1304 	bfi	r3, r1, #4, #1
 800159e:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 80015a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015a4:	484b      	ldr	r0, [pc, #300]	; (80016d4 <readall_inputs+0x154>)
 80015a6:	f003 fd6b 	bl	8005080 <HAL_GPIO_ReadPin>
 80015aa:	4603      	mov	r3, r0
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	b2d9      	uxtb	r1, r3
 80015b2:	4a47      	ldr	r2, [pc, #284]	; (80016d0 <readall_inputs+0x150>)
 80015b4:	7813      	ldrb	r3, [r2, #0]
 80015b6:	f361 1386 	bfi	r3, r1, #6, #1
 80015ba:	7013      	strb	r3, [r2, #0]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 80015bc:	2101      	movs	r1, #1
 80015be:	4846      	ldr	r0, [pc, #280]	; (80016d8 <readall_inputs+0x158>)
 80015c0:	f003 fd5e 	bl	8005080 <HAL_GPIO_ReadPin>
 80015c4:	4603      	mov	r3, r0
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	b2d9      	uxtb	r1, r3
 80015cc:	4a40      	ldr	r2, [pc, #256]	; (80016d0 <readall_inputs+0x150>)
 80015ce:	7813      	ldrb	r3, [r2, #0]
 80015d0:	f361 13c7 	bfi	r3, r1, #7, #1
 80015d4:	7013      	strb	r3, [r2, #0]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 80015d6:	2104      	movs	r1, #4
 80015d8:	483f      	ldr	r0, [pc, #252]	; (80016d8 <readall_inputs+0x158>)
 80015da:	f003 fd51 	bl	8005080 <HAL_GPIO_ReadPin>
 80015de:	4603      	mov	r3, r0
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	b2d9      	uxtb	r1, r3
 80015e6:	4a3a      	ldr	r2, [pc, #232]	; (80016d0 <readall_inputs+0x150>)
 80015e8:	7853      	ldrb	r3, [r2, #1]
 80015ea:	f361 0300 	bfi	r3, r1, #0, #1
 80015ee:	7053      	strb	r3, [r2, #1]

	// SDC-Eingaenge einlesen
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);					// IMD OK, Akku
 80015f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f4:	4835      	ldr	r0, [pc, #212]	; (80016cc <readall_inputs+0x14c>)
 80015f6:	f003 fd43 	bl	8005080 <HAL_GPIO_ReadPin>
 80015fa:	4603      	mov	r3, r0
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	b2d9      	uxtb	r1, r3
 8001602:	4a36      	ldr	r2, [pc, #216]	; (80016dc <readall_inputs+0x15c>)
 8001604:	7813      	ldrb	r3, [r2, #0]
 8001606:	f361 0300 	bfi	r3, r1, #0, #1
 800160a:	7013      	strb	r3, [r2, #0]
	sdc_in.HVIL = HAL_GPIO_ReadPin(SENSE_SDC_HVIL_GPIO_Port, SENSE_SDC_HVIL_Pin);				// Shutdown-Circuit HVIL, OK
 800160c:	2108      	movs	r1, #8
 800160e:	482f      	ldr	r0, [pc, #188]	; (80016cc <readall_inputs+0x14c>)
 8001610:	f003 fd36 	bl	8005080 <HAL_GPIO_ReadPin>
 8001614:	4603      	mov	r3, r0
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	b2d9      	uxtb	r1, r3
 800161c:	4a2f      	ldr	r2, [pc, #188]	; (80016dc <readall_inputs+0x15c>)
 800161e:	7813      	ldrb	r3, [r2, #0]
 8001620:	f361 0341 	bfi	r3, r1, #1, #1
 8001624:	7013      	strb	r3, [r2, #0]
	sdc_in.MotorSDC = HAL_GPIO_ReadPin(SENSE_SDC_MOTOR_GPIO_Port, SENSE_SDC_MOTOR_Pin);			// Shutdown-Circuit Akku, OK
 8001626:	2120      	movs	r1, #32
 8001628:	4828      	ldr	r0, [pc, #160]	; (80016cc <readall_inputs+0x14c>)
 800162a:	f003 fd29 	bl	8005080 <HAL_GPIO_ReadPin>
 800162e:	4603      	mov	r3, r0
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	b2d9      	uxtb	r1, r3
 8001636:	4a29      	ldr	r2, [pc, #164]	; (80016dc <readall_inputs+0x15c>)
 8001638:	7813      	ldrb	r3, [r2, #0]
 800163a:	f361 0382 	bfi	r3, r1, #2, #1
 800163e:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8001640:	2110      	movs	r1, #16
 8001642:	4822      	ldr	r0, [pc, #136]	; (80016cc <readall_inputs+0x14c>)
 8001644:	f003 fd1c 	bl	8005080 <HAL_GPIO_ReadPin>
 8001648:	4603      	mov	r3, r0
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	b2d9      	uxtb	r1, r3
 8001650:	4a22      	ldr	r2, [pc, #136]	; (80016dc <readall_inputs+0x15c>)
 8001652:	7813      	ldrb	r3, [r2, #0]
 8001654:	f361 03c3 	bfi	r3, r1, #3, #1
 8001658:	7013      	strb	r3, [r2, #0]
	sdc_in.PrechargeIn = HAL_GPIO_ReadPin(PRECHARGE_IN_GPIO_Port, PRECHARGE_IN_Pin);			// Eingang Precharge abgeschlossen
 800165a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800165e:	4820      	ldr	r0, [pc, #128]	; (80016e0 <readall_inputs+0x160>)
 8001660:	f003 fd0e 	bl	8005080 <HAL_GPIO_ReadPin>
 8001664:	4603      	mov	r3, r0
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	b2d9      	uxtb	r1, r3
 800166c:	4a1b      	ldr	r2, [pc, #108]	; (80016dc <readall_inputs+0x15c>)
 800166e:	7813      	ldrb	r3, [r2, #0]
 8001670:	f361 1304 	bfi	r3, r1, #4, #1
 8001674:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.OVC = HAL_GPIO_ReadPin(OVC_SENSE_GPIO_Port, OVC_SENSE_Pin);						// Eingang Overcurrent erkannt
 8001676:	2104      	movs	r1, #4
 8001678:	4819      	ldr	r0, [pc, #100]	; (80016e0 <readall_inputs+0x160>)
 800167a:	f003 fd01 	bl	8005080 <HAL_GPIO_ReadPin>
 800167e:	4603      	mov	r3, r0
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	b2d9      	uxtb	r1, r3
 8001686:	4a17      	ldr	r2, [pc, #92]	; (80016e4 <readall_inputs+0x164>)
 8001688:	7813      	ldrb	r3, [r2, #0]
 800168a:	f361 0300 	bfi	r3, r1, #0, #1
 800168e:	7013      	strb	r3, [r2, #0]
	komfort_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8001690:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001694:	4810      	ldr	r0, [pc, #64]	; (80016d8 <readall_inputs+0x158>)
 8001696:	f003 fcf3 	bl	8005080 <HAL_GPIO_ReadPin>
 800169a:	4603      	mov	r3, r0
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	b2d9      	uxtb	r1, r3
 80016a2:	4a10      	ldr	r2, [pc, #64]	; (80016e4 <readall_inputs+0x164>)
 80016a4:	7813      	ldrb	r3, [r2, #0]
 80016a6:	f361 0341 	bfi	r3, r1, #1, #1
 80016aa:	7013      	strb	r3, [r2, #0]
	komfort_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 80016ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016b0:	4809      	ldr	r0, [pc, #36]	; (80016d8 <readall_inputs+0x158>)
 80016b2:	f003 fce5 	bl	8005080 <HAL_GPIO_ReadPin>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	b2d9      	uxtb	r1, r3
 80016be:	4a09      	ldr	r2, [pc, #36]	; (80016e4 <readall_inputs+0x164>)
 80016c0:	7813      	ldrb	r3, [r2, #0]
 80016c2:	f361 0382 	bfi	r3, r1, #2, #1
 80016c6:	7013      	strb	r3, [r2, #0]
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40021000 	.word	0x40021000
 80016d0:	20000170 	.word	0x20000170
 80016d4:	40020c00 	.word	0x40020c00
 80016d8:	40020000 	.word	0x40020000
 80016dc:	20000174 	.word	0x20000174
 80016e0:	40021400 	.word	0x40021400
 80016e4:	20000178 	.word	0x20000178

080016e8 <millis>:
//----------------------------------------------------------------------

// Funktion millis (ms)
//----------------------------------------------------------------------
uint32_t millis(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80016ec:	f001 fef8 	bl	80034e0 <HAL_GetTick>
 80016f0:	4603      	mov	r3, r0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <writeall_outputs>:
//----------------------------------------------------------------------

// Schreibe alle Ausgaenge auf default Werte
//----------------------------------------------------------------------
void writeall_outputs(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	// Schreibe System Ausgaenge
	HAL_GPIO_WritePin(AMS_LIMIT_GPIO_Port, AMS_LIMIT_Pin, system_out.AmsLimit);						// Batteriemanagement-System Strom limitiert
 80016fc:	4b72      	ldr	r3, [pc, #456]	; (80018c8 <writeall_outputs+0x1d0>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001704:	b2db      	uxtb	r3, r3
 8001706:	461a      	mov	r2, r3
 8001708:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800170c:	486f      	ldr	r0, [pc, #444]	; (80018cc <writeall_outputs+0x1d4>)
 800170e:	f003 fccf 	bl	80050b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IMD_OK_OUT_GPIO_Port, IMD_OK_OUT_Pin, system_out.ImdOK);						// Isolationswaechter OK
 8001712:	4b6d      	ldr	r3, [pc, #436]	; (80018c8 <writeall_outputs+0x1d0>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800171a:	b2db      	uxtb	r3, r3
 800171c:	461a      	mov	r2, r3
 800171e:	2102      	movs	r1, #2
 8001720:	486b      	ldr	r0, [pc, #428]	; (80018d0 <writeall_outputs+0x1d8>)
 8001722:	f003 fcc5 	bl	80050b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, system_out.AmsOK);								// Batteriemanagement-System OK
 8001726:	4b68      	ldr	r3, [pc, #416]	; (80018c8 <writeall_outputs+0x1d0>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800172e:	b2db      	uxtb	r3, r3
 8001730:	461a      	mov	r2, r3
 8001732:	2180      	movs	r1, #128	; 0x80
 8001734:	4867      	ldr	r0, [pc, #412]	; (80018d4 <writeall_outputs+0x1dc>)
 8001736:	f003 fcbb 	bl	80050b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FREIGABE_GPIO_Port, FREIGABE_Pin, system_out.Freigabe);						// Freigabe, Run, Fahren möglich
 800173a:	4b63      	ldr	r3, [pc, #396]	; (80018c8 <writeall_outputs+0x1d0>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001742:	b2db      	uxtb	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	2101      	movs	r1, #1
 8001748:	4862      	ldr	r0, [pc, #392]	; (80018d4 <writeall_outputs+0x1dc>)
 800174a:	f003 fcb1 	bl	80050b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RECUPERATION_GPIO_Port, RECUPERATION_Pin, system_out.Recuperation);			// Rekuperation aktivieren
 800174e:	4b5e      	ldr	r3, [pc, #376]	; (80018c8 <writeall_outputs+0x1d0>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001756:	b2db      	uxtb	r3, r3
 8001758:	461a      	mov	r2, r3
 800175a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800175e:	485b      	ldr	r0, [pc, #364]	; (80018cc <writeall_outputs+0x1d4>)
 8001760:	f003 fca6 	bl	80050b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HV_P_GPIO_Port, HV_P_Pin, system_out.HV_P);									// Ausgang HV-Schuetz Plus
 8001764:	4b58      	ldr	r3, [pc, #352]	; (80018c8 <writeall_outputs+0x1d0>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800176c:	b2db      	uxtb	r3, r3
 800176e:	461a      	mov	r2, r3
 8001770:	2108      	movs	r1, #8
 8001772:	4856      	ldr	r0, [pc, #344]	; (80018cc <writeall_outputs+0x1d4>)
 8001774:	f003 fc9c 	bl	80050b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HV_N_GPIO_Port, HV_N_Pin, system_out.HV_N);									// Ausgang HV-Schuetz Minus
 8001778:	4b53      	ldr	r3, [pc, #332]	; (80018c8 <writeall_outputs+0x1d0>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001780:	b2db      	uxtb	r3, r3
 8001782:	461a      	mov	r2, r3
 8001784:	2104      	movs	r1, #4
 8001786:	4851      	ldr	r0, [pc, #324]	; (80018cc <writeall_outputs+0x1d4>)
 8001788:	f003 fc92 	bl	80050b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, system_out.Power_On);						// Selbsthaltung DCDC-Wandler Motorsteuergeraet
 800178c:	4b4e      	ldr	r3, [pc, #312]	; (80018c8 <writeall_outputs+0x1d0>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001794:	b2db      	uxtb	r3, r3
 8001796:	461a      	mov	r2, r3
 8001798:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800179c:	484e      	ldr	r0, [pc, #312]	; (80018d8 <writeall_outputs+0x1e0>)
 800179e:	f003 fc87 	bl	80050b0 <HAL_GPIO_WritePin>

	// Schreibe Hochstromfaehige Ausgaenge
	HAL_GPIO_WritePin(DIGITAL1_GPIO_Port, DIGITAL1_Pin, highcurrent_out.Digital1);					// Digitaler Ausgang 1
 80017a2:	4b4e      	ldr	r3, [pc, #312]	; (80018dc <writeall_outputs+0x1e4>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	461a      	mov	r2, r3
 80017ae:	2108      	movs	r1, #8
 80017b0:	484b      	ldr	r0, [pc, #300]	; (80018e0 <writeall_outputs+0x1e8>)
 80017b2:	f003 fc7d 	bl	80050b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIGITAL2_GPIO_Port, DIGITAL2_Pin, highcurrent_out.Digital2);					// Digitaler Ausgang 2
 80017b6:	4b49      	ldr	r3, [pc, #292]	; (80018dc <writeall_outputs+0x1e4>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	461a      	mov	r2, r3
 80017c2:	2110      	movs	r1, #16
 80017c4:	4846      	ldr	r0, [pc, #280]	; (80018e0 <writeall_outputs+0x1e8>)
 80017c6:	f003 fc73 	bl	80050b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PRECHARGE_OUT_GPIO_Port, PRECHARGE_OUT_Pin, highcurrent_out.PrechargeOut);	// Ausgang Precharge starten
 80017ca:	4b44      	ldr	r3, [pc, #272]	; (80018dc <writeall_outputs+0x1e4>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	461a      	mov	r2, r3
 80017d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017da:	4842      	ldr	r0, [pc, #264]	; (80018e4 <writeall_outputs+0x1ec>)
 80017dc:	f003 fc68 	bl	80050b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HV_M_GPIO_Port, HV_M_Pin, highcurrent_out.HV_M);								// Ausgang HV-Schuetz Mitte
 80017e0:	4b3e      	ldr	r3, [pc, #248]	; (80018dc <writeall_outputs+0x1e4>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	461a      	mov	r2, r3
 80017ec:	2110      	movs	r1, #16
 80017ee:	4837      	ldr	r0, [pc, #220]	; (80018cc <writeall_outputs+0x1d4>)
 80017f0:	f003 fc5e 	bl	80050b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HV_Charger_GPIO_Port, HV_Charger_Pin, highcurrent_out.HV_CHG);				// Ausgang HV-Schuetz Ladegeraet
 80017f4:	4b39      	ldr	r3, [pc, #228]	; (80018dc <writeall_outputs+0x1e4>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	461a      	mov	r2, r3
 8001800:	2120      	movs	r1, #32
 8001802:	4832      	ldr	r0, [pc, #200]	; (80018cc <writeall_outputs+0x1d4>)
 8001804:	f003 fc54 	bl	80050b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HEATER1_GPIO_Port, HEATER1_Pin, highcurrent_out.Heater1);						// Ausgang Heizung 1
 8001808:	4b34      	ldr	r3, [pc, #208]	; (80018dc <writeall_outputs+0x1e4>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001810:	b2db      	uxtb	r3, r3
 8001812:	461a      	mov	r2, r3
 8001814:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001818:	482d      	ldr	r0, [pc, #180]	; (80018d0 <writeall_outputs+0x1d8>)
 800181a:	f003 fc49 	bl	80050b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HEATER2_GPIO_Port, HEATER2_Pin, highcurrent_out.Heater2);						// Ausgang Heizung 2
 800181e:	4b2f      	ldr	r3, [pc, #188]	; (80018dc <writeall_outputs+0x1e4>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001826:	b2db      	uxtb	r3, r3
 8001828:	461a      	mov	r2, r3
 800182a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800182e:	4828      	ldr	r0, [pc, #160]	; (80018d0 <writeall_outputs+0x1d8>)
 8001830:	f003 fc3e 	bl	80050b0 <HAL_GPIO_WritePin>

	// Schreibe Leuchtdioden Ausgaenge
	HAL_GPIO_WritePin(INLET_RED_GPIO_Port, INLET_RED_Pin, leuchten_out.InletRed);					// Red Inlet LED
 8001834:	4b2c      	ldr	r3, [pc, #176]	; (80018e8 <writeall_outputs+0x1f0>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800183c:	b2db      	uxtb	r3, r3
 800183e:	461a      	mov	r2, r3
 8001840:	2104      	movs	r1, #4
 8001842:	4824      	ldr	r0, [pc, #144]	; (80018d4 <writeall_outputs+0x1dc>)
 8001844:	f003 fc34 	bl	80050b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INLET_GREEN_GPIO_Port, INLET_GREEN_Pin, leuchten_out.InletGreen);				// Green Inlet LED
 8001848:	4b27      	ldr	r3, [pc, #156]	; (80018e8 <writeall_outputs+0x1f0>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001850:	b2db      	uxtb	r3, r3
 8001852:	461a      	mov	r2, r3
 8001854:	2102      	movs	r1, #2
 8001856:	481f      	ldr	r0, [pc, #124]	; (80018d4 <writeall_outputs+0x1dc>)
 8001858:	f003 fc2a 	bl	80050b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AKKU_LED_GPIO_Port, AKKU_LED_Pin, leuchten_out.AkkuErrorLed);					// Akku LED Kombiinstrument
 800185c:	4b22      	ldr	r3, [pc, #136]	; (80018e8 <writeall_outputs+0x1f0>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001864:	b2db      	uxtb	r3, r3
 8001866:	461a      	mov	r2, r3
 8001868:	2180      	movs	r1, #128	; 0x80
 800186a:	4818      	ldr	r0, [pc, #96]	; (80018cc <writeall_outputs+0x1d4>)
 800186c:	f003 fc20 	bl	80050b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);							// Rote LED Platine
 8001870:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <writeall_outputs+0x1f0>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001878:	b2db      	uxtb	r3, r3
 800187a:	461a      	mov	r2, r3
 800187c:	2104      	movs	r1, #4
 800187e:	481b      	ldr	r0, [pc, #108]	; (80018ec <writeall_outputs+0x1f4>)
 8001880:	f003 fc16 	bl	80050b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);					// Gruene LED Platine
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <writeall_outputs+0x1f0>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800188c:	b2db      	uxtb	r3, r3
 800188e:	461a      	mov	r2, r3
 8001890:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001894:	4815      	ldr	r0, [pc, #84]	; (80018ec <writeall_outputs+0x1f4>)
 8001896:	f003 fc0b 	bl	80050b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, leuchten_out.BlueLed);						// Blaue LED Platine
 800189a:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <writeall_outputs+0x1f0>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	461a      	mov	r2, r3
 80018a6:	2180      	movs	r1, #128	; 0x80
 80018a8:	4810      	ldr	r0, [pc, #64]	; (80018ec <writeall_outputs+0x1f4>)
 80018aa:	f003 fc01 	bl	80050b0 <HAL_GPIO_WritePin>

	// Schreibe Komfortausgaenge
	HAL_GPIO_WritePin(TRIGGER_CURRENT_GPIO_Port, TRIGGER_CURRENT_Pin, komfort_out.TriggerOut);		// Stromsensor Triggern, mehr Infos
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <writeall_outputs+0x1f8>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	461a      	mov	r2, r3
 80018ba:	2102      	movs	r1, #2
 80018bc:	4809      	ldr	r0, [pc, #36]	; (80018e4 <writeall_outputs+0x1ec>)
 80018be:	f003 fbf7 	bl	80050b0 <HAL_GPIO_WritePin>
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	2000017c 	.word	0x2000017c
 80018cc:	40021800 	.word	0x40021800
 80018d0:	40020000 	.word	0x40020000
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40020800 	.word	0x40020800
 80018dc:	20000180 	.word	0x20000180
 80018e0:	40020c00 	.word	0x40020c00
 80018e4:	40021400 	.word	0x40021400
 80018e8:	20000184 	.word	0x20000184
 80018ec:	40020400 	.word	0x40020400
 80018f0:	20000188 	.word	0x20000188

080018f4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018fa:	463b      	mov	r3, r7
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001906:	4b21      	ldr	r3, [pc, #132]	; (800198c <MX_ADC1_Init+0x98>)
 8001908:	4a21      	ldr	r2, [pc, #132]	; (8001990 <MX_ADC1_Init+0x9c>)
 800190a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800190c:	4b1f      	ldr	r3, [pc, #124]	; (800198c <MX_ADC1_Init+0x98>)
 800190e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001912:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001914:	4b1d      	ldr	r3, [pc, #116]	; (800198c <MX_ADC1_Init+0x98>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800191a:	4b1c      	ldr	r3, [pc, #112]	; (800198c <MX_ADC1_Init+0x98>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001920:	4b1a      	ldr	r3, [pc, #104]	; (800198c <MX_ADC1_Init+0x98>)
 8001922:	2200      	movs	r2, #0
 8001924:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001926:	4b19      	ldr	r3, [pc, #100]	; (800198c <MX_ADC1_Init+0x98>)
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800192e:	4b17      	ldr	r3, [pc, #92]	; (800198c <MX_ADC1_Init+0x98>)
 8001930:	2200      	movs	r2, #0
 8001932:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001934:	4b15      	ldr	r3, [pc, #84]	; (800198c <MX_ADC1_Init+0x98>)
 8001936:	4a17      	ldr	r2, [pc, #92]	; (8001994 <MX_ADC1_Init+0xa0>)
 8001938:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800193a:	4b14      	ldr	r3, [pc, #80]	; (800198c <MX_ADC1_Init+0x98>)
 800193c:	2200      	movs	r2, #0
 800193e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <MX_ADC1_Init+0x98>)
 8001942:	2201      	movs	r2, #1
 8001944:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001946:	4b11      	ldr	r3, [pc, #68]	; (800198c <MX_ADC1_Init+0x98>)
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800194e:	4b0f      	ldr	r3, [pc, #60]	; (800198c <MX_ADC1_Init+0x98>)
 8001950:	2201      	movs	r2, #1
 8001952:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001954:	480d      	ldr	r0, [pc, #52]	; (800198c <MX_ADC1_Init+0x98>)
 8001956:	f001 fe3b 	bl	80035d0 <HAL_ADC_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001960:	f001 f832 	bl	80029c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <MX_ADC1_Init+0xa4>)
 8001966:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001968:	2301      	movs	r3, #1
 800196a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800196c:	2301      	movs	r3, #1
 800196e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001970:	463b      	mov	r3, r7
 8001972:	4619      	mov	r1, r3
 8001974:	4805      	ldr	r0, [pc, #20]	; (800198c <MX_ADC1_Init+0x98>)
 8001976:	f002 f809 	bl	800398c <HAL_ADC_ConfigChannel>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001980:	f001 f822 	bl	80029c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001984:	bf00      	nop
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	2000018c 	.word	0x2000018c
 8001990:	40012000 	.word	0x40012000
 8001994:	0f000001 	.word	0x0f000001
 8001998:	10000012 	.word	0x10000012

0800199c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	; 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a15      	ldr	r2, [pc, #84]	; (8001a10 <HAL_ADC_MspInit+0x74>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d123      	bne.n	8001a06 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <HAL_ADC_MspInit+0x78>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	4a14      	ldr	r2, [pc, #80]	; (8001a14 <HAL_ADC_MspInit+0x78>)
 80019c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_ADC_MspInit+0x78>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <HAL_ADC_MspInit+0x78>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a0e      	ldr	r2, [pc, #56]	; (8001a14 <HAL_ADC_MspInit+0x78>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <HAL_ADC_MspInit+0x78>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 80019ee:	23f8      	movs	r3, #248	; 0xf8
 80019f0:	617b      	str	r3, [r7, #20]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019f2:	2303      	movs	r3, #3
 80019f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4619      	mov	r1, r3
 8001a00:	4805      	ldr	r0, [pc, #20]	; (8001a18 <HAL_ADC_MspInit+0x7c>)
 8001a02:	f003 f991 	bl	8004d28 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001a06:	bf00      	nop
 8001a08:	3728      	adds	r7, #40	; 0x28
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40012000 	.word	0x40012000
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40020000 	.word	0x40020000

08001a1c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001a20:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <MX_CAN1_Init+0x64>)
 8001a22:	4a18      	ldr	r2, [pc, #96]	; (8001a84 <MX_CAN1_Init+0x68>)
 8001a24:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001a26:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <MX_CAN1_Init+0x64>)
 8001a28:	2210      	movs	r2, #16
 8001a2a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <MX_CAN1_Init+0x64>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a32:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <MX_CAN1_Init+0x64>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <MX_CAN1_Init+0x64>)
 8001a3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a3e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <MX_CAN1_Init+0x64>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <MX_CAN1_Init+0x64>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <MX_CAN1_Init+0x64>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001a52:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <MX_CAN1_Init+0x64>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <MX_CAN1_Init+0x64>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a5e:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <MX_CAN1_Init+0x64>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <MX_CAN1_Init+0x64>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a6a:	4805      	ldr	r0, [pc, #20]	; (8001a80 <MX_CAN1_Init+0x64>)
 8001a6c:	f002 f9de 	bl	8003e2c <HAL_CAN_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001a76:	f000 ffa7 	bl	80029c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200001fc 	.word	0x200001fc
 8001a84:	40006400 	.word	0x40006400

08001a88 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8001a8c:	4b32      	ldr	r3, [pc, #200]	; (8001b58 <MX_CAN3_Init+0xd0>)
 8001a8e:	4a33      	ldr	r2, [pc, #204]	; (8001b5c <MX_CAN3_Init+0xd4>)
 8001a90:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8001a92:	4b31      	ldr	r3, [pc, #196]	; (8001b58 <MX_CAN3_Init+0xd0>)
 8001a94:	2206      	movs	r2, #6
 8001a96:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001a98:	4b2f      	ldr	r3, [pc, #188]	; (8001b58 <MX_CAN3_Init+0xd0>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a9e:	4b2e      	ldr	r3, [pc, #184]	; (8001b58 <MX_CAN3_Init+0xd0>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001aa4:	4b2c      	ldr	r3, [pc, #176]	; (8001b58 <MX_CAN3_Init+0xd0>)
 8001aa6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001aaa:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001aac:	4b2a      	ldr	r3, [pc, #168]	; (8001b58 <MX_CAN3_Init+0xd0>)
 8001aae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ab2:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001ab4:	4b28      	ldr	r3, [pc, #160]	; (8001b58 <MX_CAN3_Init+0xd0>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8001aba:	4b27      	ldr	r3, [pc, #156]	; (8001b58 <MX_CAN3_Init+0xd0>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001ac0:	4b25      	ldr	r3, [pc, #148]	; (8001b58 <MX_CAN3_Init+0xd0>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001ac6:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <MX_CAN3_Init+0xd0>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001acc:	4b22      	ldr	r3, [pc, #136]	; (8001b58 <MX_CAN3_Init+0xd0>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8001ad2:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <MX_CAN3_Init+0xd0>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001ad8:	481f      	ldr	r0, [pc, #124]	; (8001b58 <MX_CAN3_Init+0xd0>)
 8001ada:	f002 f9a7 	bl	8003e2c <HAL_CAN_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001ae4:	f000 ff70 	bl	80029c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */
	// Starte CAN Bus
	if ((HAL_CAN_Start(&hcan3)) != HAL_OK)
 8001ae8:	481b      	ldr	r0, [pc, #108]	; (8001b58 <MX_CAN3_Init+0xd0>)
 8001aea:	f002 fb87 	bl	80041fc <HAL_CAN_Start>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_CAN3_Init+0x70>
	{
		// Fehler beim Starten des CAN-Busses
		Error_Handler();
 8001af4:	f000 ff68 	bl	80029c8 <Error_Handler>
	}

	// Aktiviere Interrupt fuer CAN-Bus
	if ((HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING)) != HAL_OK)
 8001af8:	2102      	movs	r1, #2
 8001afa:	4817      	ldr	r0, [pc, #92]	; (8001b58 <MX_CAN3_Init+0xd0>)
 8001afc:	f002 fda4 	bl	8004648 <HAL_CAN_ActivateNotification>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_CAN3_Init+0x82>
	{
		// Fehler in der Initialisierung des CAN-Interrupts
		Error_Handler();
 8001b06:	f000 ff5f 	bl	80029c8 <Error_Handler>
	}

	// Filter Bank initialisieren um Daten zu empfangen
	// Akzeptiere alle CAN-Pakete
	sFilterConfig.FilterBank = 0;
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <MX_CAN3_Init+0xd8>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001b10:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <MX_CAN3_Init+0xd8>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <MX_CAN3_Init+0xd8>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0;
 8001b1c:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <MX_CAN3_Init+0xd8>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0;
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <MX_CAN3_Init+0xd8>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0;
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <MX_CAN3_Init+0xd8>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0;
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <MX_CAN3_Init+0xd8>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = 0;
 8001b34:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <MX_CAN3_Init+0xd8>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <MX_CAN3_Init+0xd8>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	621a      	str	r2, [r3, #32]

	// Filter Bank schreiben
	if ((HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 8001b40:	4907      	ldr	r1, [pc, #28]	; (8001b60 <MX_CAN3_Init+0xd8>)
 8001b42:	4805      	ldr	r0, [pc, #20]	; (8001b58 <MX_CAN3_Init+0xd0>)
 8001b44:	f002 fa6e 	bl	8004024 <HAL_CAN_ConfigFilter>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_CAN3_Init+0xca>
	{
		// Fehler beim konfigurieren der Filterbank fue den CAN-Bus
		Error_Handler();
 8001b4e:	f000 ff3b 	bl	80029c8 <Error_Handler>
	}
  /* USER CODE END CAN3_Init 2 */

}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000224 	.word	0x20000224
 8001b5c:	40003400 	.word	0x40003400
 8001b60:	200001d4 	.word	0x200001d4

08001b64 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08c      	sub	sp, #48	; 0x30
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 031c 	add.w	r3, r7, #28
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a36      	ldr	r2, [pc, #216]	; (8001c5c <HAL_CAN_MspInit+0xf8>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d128      	bne.n	8001bd8 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b86:	4b36      	ldr	r3, [pc, #216]	; (8001c60 <HAL_CAN_MspInit+0xfc>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	4a35      	ldr	r2, [pc, #212]	; (8001c60 <HAL_CAN_MspInit+0xfc>)
 8001b8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b90:	6413      	str	r3, [r2, #64]	; 0x40
 8001b92:	4b33      	ldr	r3, [pc, #204]	; (8001c60 <HAL_CAN_MspInit+0xfc>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9a:	61bb      	str	r3, [r7, #24]
 8001b9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b9e:	4b30      	ldr	r3, [pc, #192]	; (8001c60 <HAL_CAN_MspInit+0xfc>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a2f      	ldr	r2, [pc, #188]	; (8001c60 <HAL_CAN_MspInit+0xfc>)
 8001ba4:	f043 0308 	orr.w	r3, r3, #8
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <HAL_CAN_MspInit+0xfc>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001bc6:	2309      	movs	r3, #9
 8001bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4824      	ldr	r0, [pc, #144]	; (8001c64 <HAL_CAN_MspInit+0x100>)
 8001bd2:	f003 f8a9 	bl	8004d28 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8001bd6:	e03d      	b.n	8001c54 <HAL_CAN_MspInit+0xf0>
  else if(canHandle->Instance==CAN3)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a22      	ldr	r2, [pc, #136]	; (8001c68 <HAL_CAN_MspInit+0x104>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d138      	bne.n	8001c54 <HAL_CAN_MspInit+0xf0>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001be2:	4b1f      	ldr	r3, [pc, #124]	; (8001c60 <HAL_CAN_MspInit+0xfc>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	4a1e      	ldr	r2, [pc, #120]	; (8001c60 <HAL_CAN_MspInit+0xfc>)
 8001be8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bec:	6413      	str	r3, [r2, #64]	; 0x40
 8001bee:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <HAL_CAN_MspInit+0xfc>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_CAN_MspInit+0xfc>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a18      	ldr	r2, [pc, #96]	; (8001c60 <HAL_CAN_MspInit+0xfc>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <HAL_CAN_MspInit+0xfc>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8001c12:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c20:	2303      	movs	r3, #3
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001c24:	230b      	movs	r3, #11
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c28:	f107 031c 	add.w	r3, r7, #28
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	480f      	ldr	r0, [pc, #60]	; (8001c6c <HAL_CAN_MspInit+0x108>)
 8001c30:	f003 f87a 	bl	8004d28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN3_TX_IRQn, 0, 0);
 8001c34:	2200      	movs	r2, #0
 8001c36:	2100      	movs	r1, #0
 8001c38:	2068      	movs	r0, #104	; 0x68
 8001c3a:	f003 f83e 	bl	8004cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_TX_IRQn);
 8001c3e:	2068      	movs	r0, #104	; 0x68
 8001c40:	f003 f857 	bl	8004cf2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2100      	movs	r1, #0
 8001c48:	2069      	movs	r0, #105	; 0x69
 8001c4a:	f003 f836 	bl	8004cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 8001c4e:	2069      	movs	r0, #105	; 0x69
 8001c50:	f003 f84f 	bl	8004cf2 <HAL_NVIC_EnableIRQ>
}
 8001c54:	bf00      	nop
 8001c56:	3730      	adds	r7, #48	; 0x30
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40006400 	.word	0x40006400
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40020c00 	.word	0x40020c00
 8001c68:	40003400 	.word	0x40003400
 8001c6c:	40020000 	.word	0x40020000

08001c70 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08e      	sub	sp, #56	; 0x38
 8001c74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
 8001c84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c86:	4bb5      	ldr	r3, [pc, #724]	; (8001f5c <MX_GPIO_Init+0x2ec>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4ab4      	ldr	r2, [pc, #720]	; (8001f5c <MX_GPIO_Init+0x2ec>)
 8001c8c:	f043 0310 	orr.w	r3, r3, #16
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4bb2      	ldr	r3, [pc, #712]	; (8001f5c <MX_GPIO_Init+0x2ec>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0310 	and.w	r3, r3, #16
 8001c9a:	623b      	str	r3, [r7, #32]
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c9e:	4baf      	ldr	r3, [pc, #700]	; (8001f5c <MX_GPIO_Init+0x2ec>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4aae      	ldr	r2, [pc, #696]	; (8001f5c <MX_GPIO_Init+0x2ec>)
 8001ca4:	f043 0304 	orr.w	r3, r3, #4
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4bac      	ldr	r3, [pc, #688]	; (8001f5c <MX_GPIO_Init+0x2ec>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	61fb      	str	r3, [r7, #28]
 8001cb4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cb6:	4ba9      	ldr	r3, [pc, #676]	; (8001f5c <MX_GPIO_Init+0x2ec>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4aa8      	ldr	r2, [pc, #672]	; (8001f5c <MX_GPIO_Init+0x2ec>)
 8001cbc:	f043 0320 	orr.w	r3, r3, #32
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4ba6      	ldr	r3, [pc, #664]	; (8001f5c <MX_GPIO_Init+0x2ec>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0320 	and.w	r3, r3, #32
 8001cca:	61bb      	str	r3, [r7, #24]
 8001ccc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cce:	4ba3      	ldr	r3, [pc, #652]	; (8001f5c <MX_GPIO_Init+0x2ec>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4aa2      	ldr	r2, [pc, #648]	; (8001f5c <MX_GPIO_Init+0x2ec>)
 8001cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4ba0      	ldr	r3, [pc, #640]	; (8001f5c <MX_GPIO_Init+0x2ec>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	4b9d      	ldr	r3, [pc, #628]	; (8001f5c <MX_GPIO_Init+0x2ec>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a9c      	ldr	r2, [pc, #624]	; (8001f5c <MX_GPIO_Init+0x2ec>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b9a      	ldr	r3, [pc, #616]	; (8001f5c <MX_GPIO_Init+0x2ec>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfe:	4b97      	ldr	r3, [pc, #604]	; (8001f5c <MX_GPIO_Init+0x2ec>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a96      	ldr	r2, [pc, #600]	; (8001f5c <MX_GPIO_Init+0x2ec>)
 8001d04:	f043 0302 	orr.w	r3, r3, #2
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b94      	ldr	r3, [pc, #592]	; (8001f5c <MX_GPIO_Init+0x2ec>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d16:	4b91      	ldr	r3, [pc, #580]	; (8001f5c <MX_GPIO_Init+0x2ec>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a90      	ldr	r2, [pc, #576]	; (8001f5c <MX_GPIO_Init+0x2ec>)
 8001d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b8e      	ldr	r3, [pc, #568]	; (8001f5c <MX_GPIO_Init+0x2ec>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d2e:	4b8b      	ldr	r3, [pc, #556]	; (8001f5c <MX_GPIO_Init+0x2ec>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a8a      	ldr	r2, [pc, #552]	; (8001f5c <MX_GPIO_Init+0x2ec>)
 8001d34:	f043 0308 	orr.w	r3, r3, #8
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b88      	ldr	r3, [pc, #544]	; (8001f5c <MX_GPIO_Init+0x2ec>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 8001d46:	2200      	movs	r2, #0
 8001d48:	f248 0187 	movw	r1, #32903	; 0x8087
 8001d4c:	4884      	ldr	r0, [pc, #528]	; (8001f60 <MX_GPIO_Init+0x2f0>)
 8001d4e:	f003 f9af 	bl	80050b0 <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin, GPIO_PIN_RESET);
 8001d52:	2200      	movs	r2, #0
 8001d54:	f242 0102 	movw	r1, #8194	; 0x2002
 8001d58:	4882      	ldr	r0, [pc, #520]	; (8001f64 <MX_GPIO_Init+0x2f4>)
 8001d5a:	f003 f9a9 	bl	80050b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f240 6102 	movw	r1, #1538	; 0x602
 8001d64:	4880      	ldr	r0, [pc, #512]	; (8001f68 <MX_GPIO_Init+0x2f8>)
 8001d66:	f003 f9a3 	bl	80050b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|GREEN_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f244 0184 	movw	r1, #16516	; 0x4084
 8001d70:	487e      	ldr	r0, [pc, #504]	; (8001f6c <MX_GPIO_Init+0x2fc>)
 8001d72:	f003 f99d 	bl	80050b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISOSPI_CS_GPIO_Port, ISOSPI_CS_Pin, GPIO_PIN_SET);
 8001d76:	2201      	movs	r2, #1
 8001d78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d7c:	4878      	ldr	r0, [pc, #480]	; (8001f60 <MX_GPIO_Init+0x2f0>)
 8001d7e:	f003 f997 	bl	80050b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PWM_HV_Charger_Pin|DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	f248 0118 	movw	r1, #32792	; 0x8018
 8001d88:	4879      	ldr	r0, [pc, #484]	; (8001f70 <MX_GPIO_Init+0x300>)
 8001d8a:	f003 f991 	bl	80050b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 8001d94:	4877      	ldr	r0, [pc, #476]	; (8001f74 <MX_GPIO_Init+0x304>)
 8001d96:	f003 f98b 	bl	80050b0 <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_CS_Pin|ISOSPI_EN_Pin
 8001d9a:	f648 0387 	movw	r3, #34951	; 0x8887
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
                          |FREIGABE_Pin|INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da0:	2301      	movs	r3, #1
 8001da2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da8:	2300      	movs	r3, #0
 8001daa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db0:	4619      	mov	r1, r3
 8001db2:	486b      	ldr	r0, [pc, #428]	; (8001f60 <MX_GPIO_Init+0x2f0>)
 8001db4:	f002 ffb8 	bl	8004d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 8001db8:	f44f 739c 	mov.w	r3, #312	; 0x138
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4864      	ldr	r0, [pc, #400]	; (8001f60 <MX_GPIO_Init+0x2f0>)
 8001dce:	f002 ffab 	bl	8004d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8001dd2:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de4:	4619      	mov	r1, r3
 8001de6:	485e      	ldr	r0, [pc, #376]	; (8001f60 <MX_GPIO_Init+0x2f0>)
 8001de8:	f002 ff9e 	bl	8004d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF3 PF4 PF5
                           PFPin PFPin PFPin PFPin
                           PF10 PF11 PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001dec:	f645 73f9 	movw	r3, #24569	; 0x5ff9
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001df2:	2303      	movs	r3, #3
 8001df4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4858      	ldr	r0, [pc, #352]	; (8001f64 <MX_GPIO_Init+0x2f4>)
 8001e02:	f002 ff91 	bl	8004d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin;
 8001e06:	f242 0302 	movw	r3, #8194	; 0x2002
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4851      	ldr	r0, [pc, #324]	; (8001f64 <MX_GPIO_Init+0x2f4>)
 8001e20:	f002 ff82 	bl	8004d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin|PRECHARGE_IN_Pin;
 8001e24:	f248 0304 	movw	r3, #32772	; 0x8004
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e36:	4619      	mov	r1, r3
 8001e38:	484a      	ldr	r0, [pc, #296]	; (8001f64 <MX_GPIO_Init+0x2f4>)
 8001e3a:	f002 ff75 	bl	8004d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PCPin PC7
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e3e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|SD_SW_Pin|GPIO_PIN_7
                          |SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
                          |SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e44:	2303      	movs	r3, #3
 8001e46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e50:	4619      	mov	r1, r3
 8001e52:	4849      	ldr	r0, [pc, #292]	; (8001f78 <MX_GPIO_Init+0x308>)
 8001e54:	f002 ff68 	bl	8004d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|HW_WAKE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 8001e58:	f641 0305 	movw	r3, #6149	; 0x1805
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	483e      	ldr	r0, [pc, #248]	; (8001f68 <MX_GPIO_Init+0x2f8>)
 8001e6e:	f002 ff5b 	bl	8004d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 8001e72:	f240 6302 	movw	r3, #1538	; 0x602
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	2300      	movs	r3, #0
 8001e82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4837      	ldr	r0, [pc, #220]	; (8001f68 <MX_GPIO_Init+0x2f8>)
 8001e8c:	f002 ff4c 	bl	8004d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8001e90:	f64b 7373 	movw	r3, #49011	; 0xbf73
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|I2C_SCL_Pin|I2C_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e96:	2303      	movs	r3, #3
 8001e98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4831      	ldr	r0, [pc, #196]	; (8001f6c <MX_GPIO_Init+0x2fc>)
 8001ea6:	f002 ff3f 	bl	8004d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin|BLUE_LED_Pin;
 8001eaa:	f244 0384 	movw	r3, #16516	; 0x4084
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	482a      	ldr	r0, [pc, #168]	; (8001f6c <MX_GPIO_Init+0x2fc>)
 8001ec4:	f002 ff30 	bl	8004d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG6 PG8
                           PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8
 8001ec8:	f240 3343 	movw	r3, #835	; 0x343
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
                          |POTI_MISO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eda:	4619      	mov	r1, r3
 8001edc:	4825      	ldr	r0, [pc, #148]	; (8001f74 <MX_GPIO_Init+0x304>)
 8001ede:	f002 ff23 	bl	8004d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|SD_CMD_Pin;
 8001ee2:	f240 7304 	movw	r3, #1796	; 0x704
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	481e      	ldr	r0, [pc, #120]	; (8001f70 <MX_GPIO_Init+0x300>)
 8001ef8:	f002 ff16 	bl	8004d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 8001efc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f02:	2300      	movs	r3, #0
 8001f04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 8001f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4817      	ldr	r0, [pc, #92]	; (8001f70 <MX_GPIO_Init+0x300>)
 8001f12:	f002 ff09 	bl	8004d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PWM_HV_Charger_Pin|DIGITAL1_Pin|DIGITAL2_Pin;
 8001f16:	f248 0318 	movw	r3, #32792	; 0x8018
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f24:	2300      	movs	r3, #0
 8001f26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4810      	ldr	r0, [pc, #64]	; (8001f70 <MX_GPIO_Init+0x300>)
 8001f30:	f002 fefa 	bl	8004d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8001f34:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f42:	2300      	movs	r3, #0
 8001f44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4809      	ldr	r0, [pc, #36]	; (8001f74 <MX_GPIO_Init+0x304>)
 8001f4e:	f002 feeb 	bl	8004d28 <HAL_GPIO_Init>

}
 8001f52:	bf00      	nop
 8001f54:	3738      	adds	r7, #56	; 0x38
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40021400 	.word	0x40021400
 8001f68:	40020000 	.word	0x40020000
 8001f6c:	40020400 	.word	0x40020400
 8001f70:	40020c00 	.word	0x40020c00
 8001f74:	40021800 	.word	0x40021800
 8001f78:	40020800 	.word	0x40020800

08001f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08c      	sub	sp, #48	; 0x30
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// BMS Statemaschine Zeitvariablen
	uint32_t timeStandby = 0, timeError = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f86:	2300      	movs	r3, #0
 8001f88:	62bb      	str	r3, [r7, #40]	; 0x28

	// BMS CAN-Bus Zeitvariable, Errorvariable
	uint8_t can_online = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t timeBAMO = 0, timeMOTOR = 0, timeSTROM;
 8001f90:	2300      	movs	r3, #0
 8001f92:	623b      	str	r3, [r7, #32]
 8001f94:	2300      	movs	r3, #0
 8001f96:	61fb      	str	r3, [r7, #28]

	// CAN-Bus Receive Message
	CAN_message_t RxMessage;

	bool ActivDrive = false;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f9c:	f001 fa4f 	bl	800343e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fa0:	f000 fb30 	bl	8002604 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_USART2_UART_Init();
 8001fa4:	f001 f994 	bl	80032d0 <MX_USART2_UART_Init>

#ifdef DEBUG
	app_info();
 8001fa8:	f7ff fa6e 	bl	8001488 <app_info>
	HAL_Delay(3000);
 8001fac:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001fb0:	f001 faa2 	bl	80034f8 <HAL_Delay>
#endif

	uartTransmit("Start\n", 6);
 8001fb4:	2106      	movs	r1, #6
 8001fb6:	4875      	ldr	r0, [pc, #468]	; (800218c <main+0x210>)
 8001fb8:	f7fe fac4 	bl	8000544 <uartTransmit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fbc:	f7ff fe58 	bl	8001c70 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001fc0:	f7ff fd2c 	bl	8001a1c <MX_CAN1_Init>
  MX_SPI4_Init();
 8001fc4:	f000 fdf4 	bl	8002bb0 <MX_SPI4_Init>
  MX_ADC1_Init();
 8001fc8:	f7ff fc94 	bl	80018f4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001fcc:	f000 ff76 	bl	8002ebc <MX_TIM1_Init>
  MX_TIM4_Init();
 8001fd0:	f001 f818 	bl	8003004 <MX_TIM4_Init>
  MX_SPI1_Init();
 8001fd4:	f000 fdae 	bl	8002b34 <MX_SPI1_Init>
  MX_CAN3_Init();
 8001fd8:	f7ff fd56 	bl	8001a88 <MX_CAN3_Init>
  MX_TIM6_Init();
 8001fdc:	f001 f882 	bl	80030e4 <MX_TIM6_Init>
  MX_RTC_Init();
 8001fe0:	f000 fd20 	bl	8002a24 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

#ifdef DEBUG
	#define MAINWHILE			"\nStarte While Schleife\n"
	uartTransmit(MAINWHILE, sizeof(MAINWHILE));
 8001fe4:	2118      	movs	r1, #24
 8001fe6:	486a      	ldr	r0, [pc, #424]	; (8002190 <main+0x214>)
 8001fe8:	f7fe faac 	bl	8000544 <uartTransmit>

	uartTransmit("Ready\n", 6);
 8001fec:	2106      	movs	r1, #6
 8001fee:	4869      	ldr	r0, [pc, #420]	; (8002194 <main+0x218>)
 8001ff0:	f7fe faa8 	bl	8000544 <uartTransmit>

//	HAL_PWR_EnableBkUpAccess();
//	Backup = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0);
//	HAL_PWR_DisableBkUpAccess();

	CANinit(RX_SIZE_16, TX_SIZE_16);
 8001ff4:	2110      	movs	r1, #16
 8001ff6:	2010      	movs	r0, #16
 8001ff8:	f7fe fad8 	bl	80005ac <CANinit>
	CAN_config();
 8001ffc:	f7fe fdae 	bl	8000b5c <CAN_config>
	// system_out.Power_On = true;
	BMS_state.State = Ready;
 8002000:	4a65      	ldr	r2, [pc, #404]	; (8002198 <main+0x21c>)
 8002002:	7813      	ldrb	r3, [r2, #0]
 8002004:	2101      	movs	r1, #1
 8002006:	f361 0303 	bfi	r3, r1, #0, #4
 800200a:	7013      	strb	r3, [r2, #0]

	// BMS Fehler zuruecksetzen bei Systemstart
	system_out.AmsLimit = true;
 800200c:	4a63      	ldr	r2, [pc, #396]	; (800219c <main+0x220>)
 800200e:	7813      	ldrb	r3, [r2, #0]
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	7013      	strb	r3, [r2, #0]
	system_out.ImdOK = true;
 8002016:	4a61      	ldr	r2, [pc, #388]	; (800219c <main+0x220>)
 8002018:	7813      	ldrb	r3, [r2, #0]
 800201a:	f043 0302 	orr.w	r3, r3, #2
 800201e:	7013      	strb	r3, [r2, #0]

	for (uint8_t j = 0; j < ANZAHL_OUTPUT_PAKETE; j++)
 8002020:	2300      	movs	r3, #0
 8002022:	75bb      	strb	r3, [r7, #22]
 8002024:	e02b      	b.n	800207e <main+0x102>
	{
		CAN_Output_PaketListe[0].msg.buf[j] = 0;
 8002026:	7dbb      	ldrb	r3, [r7, #22]
 8002028:	4a5d      	ldr	r2, [pc, #372]	; (80021a0 <main+0x224>)
 800202a:	4413      	add	r3, r2
 800202c:	2200      	movs	r2, #0
 800202e:	725a      	strb	r2, [r3, #9]
		CAN_Output_PaketListe[1].msg.buf[j] = 0;
 8002030:	7dbb      	ldrb	r3, [r7, #22]
 8002032:	4a5b      	ldr	r2, [pc, #364]	; (80021a0 <main+0x224>)
 8002034:	4413      	add	r3, r2
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		CAN_Output_PaketListe[2].msg.buf[j] = 0;
 800203c:	7dbb      	ldrb	r3, [r7, #22]
 800203e:	4a58      	ldr	r2, [pc, #352]	; (80021a0 <main+0x224>)
 8002040:	4413      	add	r3, r2
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		CAN_Output_PaketListe[3].msg.buf[j] = 0;
 8002048:	7dbb      	ldrb	r3, [r7, #22]
 800204a:	4a55      	ldr	r2, [pc, #340]	; (80021a0 <main+0x224>)
 800204c:	4413      	add	r3, r2
 800204e:	2200      	movs	r2, #0
 8002050:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		CAN_Output_PaketListe[4].msg.buf[j] = 0;
 8002054:	7dbb      	ldrb	r3, [r7, #22]
 8002056:	4a52      	ldr	r2, [pc, #328]	; (80021a0 <main+0x224>)
 8002058:	4413      	add	r3, r2
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
		CAN_Output_PaketListe[5].msg.buf[j] = 0;
 8002060:	7dbb      	ldrb	r3, [r7, #22]
 8002062:	4a4f      	ldr	r2, [pc, #316]	; (80021a0 <main+0x224>)
 8002064:	4413      	add	r3, r2
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
		CAN_Output_PaketListe[6].msg.buf[j] = 0;
 800206c:	7dbb      	ldrb	r3, [r7, #22]
 800206e:	4a4c      	ldr	r2, [pc, #304]	; (80021a0 <main+0x224>)
 8002070:	4413      	add	r3, r2
 8002072:	2200      	movs	r2, #0
 8002074:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	for (uint8_t j = 0; j < ANZAHL_OUTPUT_PAKETE; j++)
 8002078:	7dbb      	ldrb	r3, [r7, #22]
 800207a:	3301      	adds	r3, #1
 800207c:	75bb      	strb	r3, [r7, #22]
 800207e:	7dbb      	ldrb	r3, [r7, #22]
 8002080:	2b06      	cmp	r3, #6
 8002082:	d9d0      	bls.n	8002026 <main+0xaa>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Alle Eingaenge einlesen
	  readall_inputs();
 8002084:	f7ff fa7c 	bl	8001580 <readall_inputs>

	  // Alle ADC einlesen
	  ADC_VAL[0] = ADC_STMTemperatur();
 8002088:	f7ff f874 	bl	8001174 <ADC_STMTemperatur>
 800208c:	4603      	mov	r3, r0
 800208e:	461a      	mov	r2, r3
 8002090:	4b44      	ldr	r3, [pc, #272]	; (80021a4 <main+0x228>)
 8002092:	801a      	strh	r2, [r3, #0]
	  ADC_VAL[1] = ADC_PCBTemperatur();
 8002094:	f7ff f8a8 	bl	80011e8 <ADC_PCBTemperatur>
 8002098:	4603      	mov	r3, r0
 800209a:	461a      	mov	r2, r3
 800209c:	4b41      	ldr	r3, [pc, #260]	; (80021a4 <main+0x228>)
 800209e:	805a      	strh	r2, [r3, #2]
	  ADC_VAL[2] = ADC_KL15();
 80020a0:	f7ff f8da 	bl	8001258 <ADC_KL15>
 80020a4:	4603      	mov	r3, r0
 80020a6:	461a      	mov	r2, r3
 80020a8:	4b3e      	ldr	r3, [pc, #248]	; (80021a4 <main+0x228>)
 80020aa:	809a      	strh	r2, [r3, #4]
	  ADC_VAL[3] = ADC_Temp1();
 80020ac:	f7ff f90c 	bl	80012c8 <ADC_Temp1>
 80020b0:	4603      	mov	r3, r0
 80020b2:	461a      	mov	r2, r3
 80020b4:	4b3b      	ldr	r3, [pc, #236]	; (80021a4 <main+0x228>)
 80020b6:	80da      	strh	r2, [r3, #6]
	  ADC_VAL[4] = ADC_Temp2();
 80020b8:	f7ff f93e 	bl	8001338 <ADC_Temp2>
 80020bc:	4603      	mov	r3, r0
 80020be:	461a      	mov	r2, r3
 80020c0:	4b38      	ldr	r3, [pc, #224]	; (80021a4 <main+0x228>)
 80020c2:	811a      	strh	r2, [r3, #8]
	  ADC_VAL[5] = ADC_Temp3();
 80020c4:	f7ff f970 	bl	80013a8 <ADC_Temp3>
 80020c8:	4603      	mov	r3, r0
 80020ca:	461a      	mov	r2, r3
 80020cc:	4b35      	ldr	r3, [pc, #212]	; (80021a4 <main+0x228>)
 80020ce:	815a      	strh	r2, [r3, #10]
	  ADC_VAL[6] = ADC_Temp4();
 80020d0:	f7ff f9a2 	bl	8001418 <ADC_Temp4>
 80020d4:	4603      	mov	r3, r0
 80020d6:	461a      	mov	r2, r3
 80020d8:	4b32      	ldr	r3, [pc, #200]	; (80021a4 <main+0x228>)
 80020da:	819a      	strh	r2, [r3, #12]

	  // Shutdown-Circuit checken
	  checkSDC();
 80020dc:	f000 fb0c 	bl	80026f8 <checkSDC>

	  // Sortiere CAN-Daten auf CAN-Buffer
	  sortCAN();
 80020e0:	f000 fb5c 	bl	800279c <sortCAN>

	  if (CAN_available() >= 1)
 80020e4:	f7fe fad8 	bl	8000698 <CAN_available>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d05f      	beq.n	80021ae <main+0x232>
	  {
		  CANread(&RxMessage);
 80020ee:	463b      	mov	r3, r7
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe fafd 	bl	80006f0 <CANread>

		  switch (RxMessage.id)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	f240 5282 	movw	r2, #1410	; 0x582
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d028      	beq.n	8002152 <main+0x1d6>
 8002100:	f240 5282 	movw	r2, #1410	; 0x582
 8002104:	4293      	cmp	r3, r2
 8002106:	d83f      	bhi.n	8002188 <main+0x20c>
 8002108:	f240 5221 	movw	r2, #1313	; 0x521
 800210c:	4293      	cmp	r3, r2
 800210e:	d031      	beq.n	8002174 <main+0x1f8>
 8002110:	f240 5221 	movw	r2, #1313	; 0x521
 8002114:	4293      	cmp	r3, r2
 8002116:	d837      	bhi.n	8002188 <main+0x20c>
 8002118:	f240 1281 	movw	r2, #385	; 0x181
 800211c:	4293      	cmp	r3, r2
 800211e:	d004      	beq.n	800212a <main+0x1ae>
 8002120:	f240 5205 	movw	r2, #1285	; 0x505
 8002124:	4293      	cmp	r3, r2
 8002126:	d00a      	beq.n	800213e <main+0x1c2>
			  }

			  //
			  default:
			  {
				  break;
 8002128:	e02e      	b.n	8002188 <main+0x20c>
				  can_online |= (1 << 0);
 800212a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				  timeBAMO = millis();
 8002136:	f7ff fad7 	bl	80016e8 <millis>
 800213a:	6238      	str	r0, [r7, #32]
				  break;
 800213c:	e037      	b.n	80021ae <main+0x232>
				  can_online |= (1 << 1);
 800213e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002142:	f043 0302 	orr.w	r3, r3, #2
 8002146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				  timeMOTOR = millis();
 800214a:	f7ff facd 	bl	80016e8 <millis>
 800214e:	61f8      	str	r0, [r7, #28]
				  break;
 8002150:	e02d      	b.n	80021ae <main+0x232>
				  if (~RxMessage.buf[2] & (1 << 7))
 8002152:	7afb      	ldrb	r3, [r7, #11]
 8002154:	b25b      	sxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	db04      	blt.n	8002164 <main+0x1e8>
					  sdc_in.Anlassen = true;
 800215a:	4a13      	ldr	r2, [pc, #76]	; (80021a8 <main+0x22c>)
 800215c:	7813      	ldrb	r3, [r2, #0]
 800215e:	f043 0320 	orr.w	r3, r3, #32
 8002162:	7013      	strb	r3, [r2, #0]
				  if (RxMessage.buf[4] & (1 << 0))
 8002164:	7b7b      	ldrb	r3, [r7, #13]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d01e      	beq.n	80021ac <main+0x230>
					  ActivDrive = true;
 800216e:	2301      	movs	r3, #1
 8002170:	75fb      	strb	r3, [r7, #23]
				  break;
 8002172:	e01b      	b.n	80021ac <main+0x230>
				  can_online |= (1 << 2);
 8002174:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002178:	f043 0304 	orr.w	r3, r3, #4
 800217c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				  timeSTROM = millis();
 8002180:	f7ff fab2 	bl	80016e8 <millis>
 8002184:	61b8      	str	r0, [r7, #24]
				  break;
 8002186:	e012      	b.n	80021ae <main+0x232>
				  break;
 8002188:	bf00      	nop
 800218a:	e010      	b.n	80021ae <main+0x232>
 800218c:	08008de4 	.word	0x08008de4
 8002190:	08008dec 	.word	0x08008dec
 8002194:	08008e04 	.word	0x08008e04
 8002198:	20000000 	.word	0x20000000
 800219c:	2000017c 	.word	0x2000017c
 80021a0:	200000a4 	.word	0x200000a4
 80021a4:	2000024c 	.word	0x2000024c
 80021a8:	20000174 	.word	0x20000174
				  break;
 80021ac:	bf00      	nop
			  }
		  }
	  }

	  if (millis() > (timeBAMO + CAN_TIMEOUT))
 80021ae:	f7ff fa9b 	bl	80016e8 <millis>
 80021b2:	4602      	mov	r2, r0
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d905      	bls.n	80021ca <main+0x24e>
	  {
		  can_online &= ~(1 << 0);
 80021be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021c2:	f023 0301 	bic.w	r3, r3, #1
 80021c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  }
	  if (millis() > (timeMOTOR + CAN_TIMEOUT))
 80021ca:	f7ff fa8d 	bl	80016e8 <millis>
 80021ce:	4602      	mov	r2, r0
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d905      	bls.n	80021e6 <main+0x26a>
	  {
		  can_online &= ~(1 << 1);
 80021da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021de:	f023 0302 	bic.w	r3, r3, #2
 80021e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  }
	  if (millis() > (timeSTROM + CAN_TIMEOUT))
 80021e6:	f7ff fa7f 	bl	80016e8 <millis>
 80021ea:	4602      	mov	r2, r0
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d905      	bls.n	8002202 <main+0x286>
	  {
		  can_online &= ~(1 << 2);
 80021f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021fa:	f023 0304 	bic.w	r3, r3, #4
 80021fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  }

	  // Crash Ausgeloest
	  if (system_in.Crash != 1)
 8002202:	4ba8      	ldr	r3, [pc, #672]	; (80024a4 <main+0x528>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	d109      	bne.n	8002224 <main+0x2a8>
	  {
		  BMS_state.CriticalError = true;
 8002210:	4aa5      	ldr	r2, [pc, #660]	; (80024a8 <main+0x52c>)
 8002212:	7813      	ldrb	r3, [r2, #0]
 8002214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002218:	7013      	strb	r3, [r2, #0]
		  BMS_state.Normal = false;
 800221a:	4aa3      	ldr	r2, [pc, #652]	; (80024a8 <main+0x52c>)
 800221c:	7813      	ldrb	r3, [r2, #0]
 800221e:	f36f 1304 	bfc	r3, #4, #1
 8002222:	7013      	strb	r3, [r2, #0]
	  }

	  // Wenn Statemaschine nicht im Standby ist
	  if (BMS_state.State != Standby)
 8002224:	4ba0      	ldr	r3, [pc, #640]	; (80024a8 <main+0x52c>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	f003 030f 	and.w	r3, r3, #15
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b07      	cmp	r3, #7
 8002230:	d001      	beq.n	8002236 <main+0x2ba>
	  {
		  // Schreibe alle CAN-Nachrichten auf BUS, wenn nicht im Standby
		  CANwork();
 8002232:	f7fe fa79 	bl	8000728 <CANwork>
	  }

	  // Statemaschine keine Fehler
	  if (BMS_state.Normal)
 8002236:	4b9c      	ldr	r3, [pc, #624]	; (80024a8 <main+0x52c>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00e      	beq.n	8002262 <main+0x2e6>
	  {
		  leuchten_out.RedLed = false;
 8002244:	4a99      	ldr	r2, [pc, #612]	; (80024ac <main+0x530>)
 8002246:	7813      	ldrb	r3, [r2, #0]
 8002248:	f36f 1345 	bfc	r3, #5, #1
 800224c:	7013      	strb	r3, [r2, #0]
		  leuchten_out.GreenLed = true;
 800224e:	4a97      	ldr	r2, [pc, #604]	; (80024ac <main+0x530>)
 8002250:	7813      	ldrb	r3, [r2, #0]
 8002252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002256:	7013      	strb	r3, [r2, #0]

		  system_out.AmsLimit = true;
 8002258:	4a95      	ldr	r2, [pc, #596]	; (80024b0 <main+0x534>)
 800225a:	7813      	ldrb	r3, [r2, #0]
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	7013      	strb	r3, [r2, #0]
	  }

	  // Statemaschine hat Warnungen
	  if (BMS_state.Warning)
 8002262:	4b91      	ldr	r3, [pc, #580]	; (80024a8 <main+0x52c>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	d023      	beq.n	80022b8 <main+0x33c>
	  {
		  if (millis() - timeError > 1000)
 8002270:	f7ff fa3a 	bl	80016e8 <millis>
 8002274:	4602      	mov	r2, r0
 8002276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800227e:	d911      	bls.n	80022a4 <main+0x328>
		  {
			  leuchten_out.RedLed = !leuchten_out.RedLed;
 8002280:	4b8a      	ldr	r3, [pc, #552]	; (80024ac <main+0x530>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	f003 0320 	and.w	r3, r3, #32
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	bf0c      	ite	eq
 800228e:	2301      	moveq	r3, #1
 8002290:	2300      	movne	r3, #0
 8002292:	b2d9      	uxtb	r1, r3
 8002294:	4a85      	ldr	r2, [pc, #532]	; (80024ac <main+0x530>)
 8002296:	7813      	ldrb	r3, [r2, #0]
 8002298:	f361 1345 	bfi	r3, r1, #5, #1
 800229c:	7013      	strb	r3, [r2, #0]
			  timeError = millis();
 800229e:	f7ff fa23 	bl	80016e8 <millis>
 80022a2:	62b8      	str	r0, [r7, #40]	; 0x28
		  }

		  leuchten_out.GreenLed = true;
 80022a4:	4a81      	ldr	r2, [pc, #516]	; (80024ac <main+0x530>)
 80022a6:	7813      	ldrb	r3, [r2, #0]
 80022a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022ac:	7013      	strb	r3, [r2, #0]

		  system_out.AmsLimit = true;
 80022ae:	4a80      	ldr	r2, [pc, #512]	; (80024b0 <main+0x534>)
 80022b0:	7813      	ldrb	r3, [r2, #0]
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	7013      	strb	r3, [r2, #0]
	  }

	  // Statemaschine hat Error
	  if (BMS_state.Error)
 80022b8:	4b7b      	ldr	r3, [pc, #492]	; (80024a8 <main+0x52c>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d023      	beq.n	800230e <main+0x392>
	  {
		  if (millis() - timeError > 1000)
 80022c6:	f7ff fa0f 	bl	80016e8 <millis>
 80022ca:	4602      	mov	r2, r0
 80022cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022d4:	d911      	bls.n	80022fa <main+0x37e>
		  {
			  leuchten_out.RedLed = !leuchten_out.RedLed;
 80022d6:	4b75      	ldr	r3, [pc, #468]	; (80024ac <main+0x530>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	f003 0320 	and.w	r3, r3, #32
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	bf0c      	ite	eq
 80022e4:	2301      	moveq	r3, #1
 80022e6:	2300      	movne	r3, #0
 80022e8:	b2d9      	uxtb	r1, r3
 80022ea:	4a70      	ldr	r2, [pc, #448]	; (80024ac <main+0x530>)
 80022ec:	7813      	ldrb	r3, [r2, #0]
 80022ee:	f361 1345 	bfi	r3, r1, #5, #1
 80022f2:	7013      	strb	r3, [r2, #0]
			  timeError = millis();
 80022f4:	f7ff f9f8 	bl	80016e8 <millis>
 80022f8:	62b8      	str	r0, [r7, #40]	; 0x28
		  }

		  leuchten_out.GreenLed = false;
 80022fa:	4a6c      	ldr	r2, [pc, #432]	; (80024ac <main+0x530>)
 80022fc:	7813      	ldrb	r3, [r2, #0]
 80022fe:	f36f 1386 	bfc	r3, #6, #1
 8002302:	7013      	strb	r3, [r2, #0]

		  system_out.AmsLimit = false;
 8002304:	4a6a      	ldr	r2, [pc, #424]	; (80024b0 <main+0x534>)
 8002306:	7813      	ldrb	r3, [r2, #0]
 8002308:	f36f 0300 	bfc	r3, #0, #1
 800230c:	7013      	strb	r3, [r2, #0]
	  }

	  // Statemaschine hat Kritische Fehler
	  if (BMS_state.CriticalError)
 800230e:	4b66      	ldr	r3, [pc, #408]	; (80024a8 <main+0x52c>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00e      	beq.n	800233a <main+0x3be>
	  {
		  leuchten_out.RedLed = true;
 800231c:	4a63      	ldr	r2, [pc, #396]	; (80024ac <main+0x530>)
 800231e:	7813      	ldrb	r3, [r2, #0]
 8002320:	f043 0320 	orr.w	r3, r3, #32
 8002324:	7013      	strb	r3, [r2, #0]
		  leuchten_out.GreenLed = false;
 8002326:	4a61      	ldr	r2, [pc, #388]	; (80024ac <main+0x530>)
 8002328:	7813      	ldrb	r3, [r2, #0]
 800232a:	f36f 1386 	bfc	r3, #6, #1
 800232e:	7013      	strb	r3, [r2, #0]

		  system_out.AmsLimit = false;
 8002330:	4a5f      	ldr	r2, [pc, #380]	; (80024b0 <main+0x534>)
 8002332:	7813      	ldrb	r3, [r2, #0]
 8002334:	f36f 0300 	bfc	r3, #0, #1
 8002338:	7013      	strb	r3, [r2, #0]
	  }

	  // Statemaschine vom Batteriemanagement-System
	  switch(BMS_state.State)
 800233a:	4b5b      	ldr	r3, [pc, #364]	; (80024a8 <main+0x52c>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002342:	b2db      	uxtb	r3, r3
 8002344:	3b01      	subs	r3, #1
 8002346:	2b07      	cmp	r3, #7
 8002348:	f200 812d 	bhi.w	80025a6 <main+0x62a>
 800234c:	a201      	add	r2, pc, #4	; (adr r2, 8002354 <main+0x3d8>)
 800234e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002352:	bf00      	nop
 8002354:	08002375 	.word	0x08002375
 8002358:	0800238b 	.word	0x0800238b
 800235c:	08002407 	.word	0x08002407
 8002360:	08002455 	.word	0x08002455
 8002364:	080024d5 	.word	0x080024d5
 8002368:	08002519 	.word	0x08002519
 800236c:	08002543 	.word	0x08002543
 8002370:	0800258d 	.word	0x0800258d
	  {
		  // State Ready, Vorbereiten des Batteriemanagement
		  case Ready:
		  {
			  uartTransmit("KL15\n", 5);
 8002374:	2105      	movs	r1, #5
 8002376:	484f      	ldr	r0, [pc, #316]	; (80024b4 <main+0x538>)
 8002378:	f7fe f8e4 	bl	8000544 <uartTransmit>
			  BMS_state.State = KL15;
 800237c:	4a4a      	ldr	r2, [pc, #296]	; (80024a8 <main+0x52c>)
 800237e:	7813      	ldrb	r3, [r2, #0]
 8002380:	2102      	movs	r1, #2
 8002382:	f361 0303 	bfi	r3, r1, #0, #4
 8002386:	7013      	strb	r3, [r2, #0]

			  break;
 8002388:	e120      	b.n	80025cc <main+0x650>
		  }

		  // State KL15, wenn Schluessel auf Position 2, KL15 eingeschaltet
		  case KL15:
		  {
			  if (sdc_in.Anlassen == true)
 800238a:	4b4b      	ldr	r3, [pc, #300]	; (80024b8 <main+0x53c>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	f003 0320 	and.w	r3, r3, #32
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d020      	beq.n	80023da <main+0x45e>
			  {
				  if (!(BMS_state.CriticalError))
 8002398:	4b43      	ldr	r3, [pc, #268]	; (80024a8 <main+0x52c>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d119      	bne.n	80023da <main+0x45e>
				  {
					  uartTransmit("Anlassen\n", 9);
 80023a6:	2109      	movs	r1, #9
 80023a8:	4844      	ldr	r0, [pc, #272]	; (80024bc <main+0x540>)
 80023aa:	f7fe f8cb 	bl	8000544 <uartTransmit>
					  BMS_state.State = Anlassen;
 80023ae:	4a3e      	ldr	r2, [pc, #248]	; (80024a8 <main+0x52c>)
 80023b0:	7813      	ldrb	r3, [r2, #0]
 80023b2:	2103      	movs	r1, #3
 80023b4:	f361 0303 	bfi	r3, r1, #0, #4
 80023b8:	7013      	strb	r3, [r2, #0]

					  highcurrent_out.HV_CHG = true;
 80023ba:	4a41      	ldr	r2, [pc, #260]	; (80024c0 <main+0x544>)
 80023bc:	7813      	ldrb	r3, [r2, #0]
 80023be:	f043 0310 	orr.w	r3, r3, #16
 80023c2:	7013      	strb	r3, [r2, #0]
					  HAL_GPIO_WritePin(PWM_HV_Charger_GPIO_Port, PWM_HV_Charger_Pin, true);
 80023c4:	2201      	movs	r2, #1
 80023c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023ca:	483e      	ldr	r0, [pc, #248]	; (80024c4 <main+0x548>)
 80023cc:	f002 fe70 	bl	80050b0 <HAL_GPIO_WritePin>

					  system_out.AmsOK = true;
 80023d0:	4a37      	ldr	r2, [pc, #220]	; (80024b0 <main+0x534>)
 80023d2:	7813      	ldrb	r3, [r2, #0]
 80023d4:	f043 0304 	orr.w	r3, r3, #4
 80023d8:	7013      	strb	r3, [r2, #0]
				  }
			  }

			  if (system_in.KL15 == 1)
 80023da:	4b32      	ldr	r3, [pc, #200]	; (80024a4 <main+0x528>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 80e6 	beq.w	80025b6 <main+0x63a>
			  {
				  uartTransmit("Standby\n", 8);
 80023ea:	2108      	movs	r1, #8
 80023ec:	4836      	ldr	r0, [pc, #216]	; (80024c8 <main+0x54c>)
 80023ee:	f7fe f8a9 	bl	8000544 <uartTransmit>
				  BMS_state.State = Standby;
 80023f2:	4a2d      	ldr	r2, [pc, #180]	; (80024a8 <main+0x52c>)
 80023f4:	7813      	ldrb	r3, [r2, #0]
 80023f6:	2107      	movs	r1, #7
 80023f8:	f361 0303 	bfi	r3, r1, #0, #4
 80023fc:	7013      	strb	r3, [r2, #0]
				  timeStandby = millis();
 80023fe:	f7ff f973 	bl	80016e8 <millis>
 8002402:	62f8      	str	r0, [r7, #44]	; 0x2c
			  }

			  break;
 8002404:	e0d7      	b.n	80025b6 <main+0x63a>
		  }

		  // State Anlassen, wenn Schluessel auf Position 3 und keine kritischen Fehler, Anlasser einschalten
		  case Anlassen:
		  {
			  if (sdc_in.Anlassen == true)
 8002406:	4b2c      	ldr	r3, [pc, #176]	; (80024b8 <main+0x53c>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	f003 0320 	and.w	r3, r3, #32
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d009      	beq.n	8002428 <main+0x4ac>
			  {
				  uartTransmit("Precharge\n", 10);
 8002414:	210a      	movs	r1, #10
 8002416:	482d      	ldr	r0, [pc, #180]	; (80024cc <main+0x550>)
 8002418:	f7fe f894 	bl	8000544 <uartTransmit>
				  BMS_state.State = Precharge;
 800241c:	4a22      	ldr	r2, [pc, #136]	; (80024a8 <main+0x52c>)
 800241e:	7813      	ldrb	r3, [r2, #0]
 8002420:	2104      	movs	r1, #4
 8002422:	f361 0303 	bfi	r3, r1, #0, #4
 8002426:	7013      	strb	r3, [r2, #0]
			  }

			  if (system_in.KL15 == 1)
 8002428:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <main+0x528>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 80c1 	beq.w	80025ba <main+0x63e>
			  {
				  uartTransmit("Standby\n", 8);
 8002438:	2108      	movs	r1, #8
 800243a:	4823      	ldr	r0, [pc, #140]	; (80024c8 <main+0x54c>)
 800243c:	f7fe f882 	bl	8000544 <uartTransmit>
				  BMS_state.State = Standby;
 8002440:	4a19      	ldr	r2, [pc, #100]	; (80024a8 <main+0x52c>)
 8002442:	7813      	ldrb	r3, [r2, #0]
 8002444:	2107      	movs	r1, #7
 8002446:	f361 0303 	bfi	r3, r1, #0, #4
 800244a:	7013      	strb	r3, [r2, #0]
				  timeStandby = millis();
 800244c:	f7ff f94c 	bl	80016e8 <millis>
 8002450:	62f8      	str	r0, [r7, #44]	; 0x2c
			  }

			  break;
 8002452:	e0b2      	b.n	80025ba <main+0x63e>
		  }

		  // State Precharge,
		  case Precharge:
		  {
			  if (sdc_in.PrechargeIn == 1)
 8002454:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <main+0x53c>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	f003 0310 	and.w	r3, r3, #16
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d009      	beq.n	8002476 <main+0x4fa>
			  {
				  uartTransmit("ReadyToDrive\n", 13);
 8002462:	210d      	movs	r1, #13
 8002464:	481a      	ldr	r0, [pc, #104]	; (80024d0 <main+0x554>)
 8002466:	f7fe f86d 	bl	8000544 <uartTransmit>
				  BMS_state.State = ReadyToDrive;
 800246a:	4a0f      	ldr	r2, [pc, #60]	; (80024a8 <main+0x52c>)
 800246c:	7813      	ldrb	r3, [r2, #0]
 800246e:	2105      	movs	r1, #5
 8002470:	f361 0303 	bfi	r3, r1, #0, #4
 8002474:	7013      	strb	r3, [r2, #0]
			  }

			  if (system_in.KL15 == 1)
 8002476:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <main+0x528>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 809c 	beq.w	80025be <main+0x642>
			  {
				  uartTransmit("Standby\n", 8);
 8002486:	2108      	movs	r1, #8
 8002488:	480f      	ldr	r0, [pc, #60]	; (80024c8 <main+0x54c>)
 800248a:	f7fe f85b 	bl	8000544 <uartTransmit>
				  BMS_state.State = Standby;
 800248e:	4a06      	ldr	r2, [pc, #24]	; (80024a8 <main+0x52c>)
 8002490:	7813      	ldrb	r3, [r2, #0]
 8002492:	2107      	movs	r1, #7
 8002494:	f361 0303 	bfi	r3, r1, #0, #4
 8002498:	7013      	strb	r3, [r2, #0]
				  timeStandby = millis();
 800249a:	f7ff f925 	bl	80016e8 <millis>
 800249e:	62f8      	str	r0, [r7, #44]	; 0x2c
			  }

			  break;
 80024a0:	e08d      	b.n	80025be <main+0x642>
 80024a2:	bf00      	nop
 80024a4:	20000170 	.word	0x20000170
 80024a8:	20000000 	.word	0x20000000
 80024ac:	20000184 	.word	0x20000184
 80024b0:	2000017c 	.word	0x2000017c
 80024b4:	08008e0c 	.word	0x08008e0c
 80024b8:	20000174 	.word	0x20000174
 80024bc:	08008e14 	.word	0x08008e14
 80024c0:	20000180 	.word	0x20000180
 80024c4:	40020c00 	.word	0x40020c00
 80024c8:	08008e20 	.word	0x08008e20
 80024cc:	08008e2c 	.word	0x08008e2c
 80024d0:	08008e38 	.word	0x08008e38
		  }

		  // State ReadyToDrive, wenn SDC OK ist
		  case ReadyToDrive:
		  {
			  if (ActivDrive)
 80024d4:	7dfb      	ldrb	r3, [r7, #23]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d009      	beq.n	80024ee <main+0x572>
			  {
				  uartTransmit("Drive\n", 6);
 80024da:	2106      	movs	r1, #6
 80024dc:	483d      	ldr	r0, [pc, #244]	; (80025d4 <main+0x658>)
 80024de:	f7fe f831 	bl	8000544 <uartTransmit>
				  BMS_state.State = Drive;
 80024e2:	4a3d      	ldr	r2, [pc, #244]	; (80025d8 <main+0x65c>)
 80024e4:	7813      	ldrb	r3, [r2, #0]
 80024e6:	2106      	movs	r1, #6
 80024e8:	f361 0303 	bfi	r3, r1, #0, #4
 80024ec:	7013      	strb	r3, [r2, #0]
			  }

			  if (system_in.KL15 == 1)
 80024ee:	4b3b      	ldr	r3, [pc, #236]	; (80025dc <main+0x660>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d062      	beq.n	80025c2 <main+0x646>
			  {
				  uartTransmit("Standby\n", 8);
 80024fc:	2108      	movs	r1, #8
 80024fe:	4838      	ldr	r0, [pc, #224]	; (80025e0 <main+0x664>)
 8002500:	f7fe f820 	bl	8000544 <uartTransmit>
				  BMS_state.State = Standby;
 8002504:	4a34      	ldr	r2, [pc, #208]	; (80025d8 <main+0x65c>)
 8002506:	7813      	ldrb	r3, [r2, #0]
 8002508:	2107      	movs	r1, #7
 800250a:	f361 0303 	bfi	r3, r1, #0, #4
 800250e:	7013      	strb	r3, [r2, #0]
				  timeStandby = millis();
 8002510:	f7ff f8ea 	bl	80016e8 <millis>
 8002514:	62f8      	str	r0, [r7, #44]	; 0x2c
			  }

			  break;
 8002516:	e054      	b.n	80025c2 <main+0x646>
		  }

		  // State Drive, wenn Fahrmodus manuell aktiviert wird
		  case Drive:
		  {
			  if (system_in.KL15 == 1)
 8002518:	4b30      	ldr	r3, [pc, #192]	; (80025dc <main+0x660>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d04f      	beq.n	80025c6 <main+0x64a>
			  {
				  uartTransmit("Standby\n", 8);
 8002526:	2108      	movs	r1, #8
 8002528:	482d      	ldr	r0, [pc, #180]	; (80025e0 <main+0x664>)
 800252a:	f7fe f80b 	bl	8000544 <uartTransmit>
				  BMS_state.State = Standby;
 800252e:	4a2a      	ldr	r2, [pc, #168]	; (80025d8 <main+0x65c>)
 8002530:	7813      	ldrb	r3, [r2, #0]
 8002532:	2107      	movs	r1, #7
 8002534:	f361 0303 	bfi	r3, r1, #0, #4
 8002538:	7013      	strb	r3, [r2, #0]
				  timeStandby = millis();
 800253a:	f7ff f8d5 	bl	80016e8 <millis>
 800253e:	62f8      	str	r0, [r7, #44]	; 0x2c
			  }

			  break;
 8002540:	e041      	b.n	80025c6 <main+0x64a>
		  }

		  // State Standby, wenn Schluessel gezogen wird, KL15 ausgeschaltet
		  case Standby:
		  {
			  if (millis() - timeStandby > BMSTIME)
 8002542:	f7ff f8d1 	bl	80016e8 <millis>
 8002546:	4602      	mov	r2, r0
 8002548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	4a25      	ldr	r2, [pc, #148]	; (80025e4 <main+0x668>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d90a      	bls.n	8002568 <main+0x5ec>
			  {
				  uartTransmit("Ausschalten\n", 12);
 8002552:	210c      	movs	r1, #12
 8002554:	4824      	ldr	r0, [pc, #144]	; (80025e8 <main+0x66c>)
 8002556:	f7fd fff5 	bl	8000544 <uartTransmit>
				  BMS_state.State = Ausschalten;
 800255a:	4a1f      	ldr	r2, [pc, #124]	; (80025d8 <main+0x65c>)
 800255c:	7813      	ldrb	r3, [r2, #0]
 800255e:	2108      	movs	r1, #8
 8002560:	f361 0303 	bfi	r3, r1, #0, #4
 8002564:	7013      	strb	r3, [r2, #0]
			  {
				  uartTransmit("Ready\n", 6);
				  BMS_state.State = Ready;
			  }

			  break;
 8002566:	e030      	b.n	80025ca <main+0x64e>
			  else if (system_in.KL15 != 1)
 8002568:	4b1c      	ldr	r3, [pc, #112]	; (80025dc <main+0x660>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d129      	bne.n	80025ca <main+0x64e>
				  uartTransmit("Ready\n", 6);
 8002576:	2106      	movs	r1, #6
 8002578:	481c      	ldr	r0, [pc, #112]	; (80025ec <main+0x670>)
 800257a:	f7fd ffe3 	bl	8000544 <uartTransmit>
				  BMS_state.State = Ready;
 800257e:	4a16      	ldr	r2, [pc, #88]	; (80025d8 <main+0x65c>)
 8002580:	7813      	ldrb	r3, [r2, #0]
 8002582:	2101      	movs	r1, #1
 8002584:	f361 0303 	bfi	r3, r1, #0, #4
 8002588:	7013      	strb	r3, [r2, #0]
			  break;
 800258a:	e01e      	b.n	80025ca <main+0x64e>
		  }

		  // State Ausschalten, wenn Standby State laenger als 5min dauert
		  case Ausschalten:
		  {
			  system_out.systemoutput = 0;
 800258c:	4b18      	ldr	r3, [pc, #96]	; (80025f0 <main+0x674>)
 800258e:	2200      	movs	r2, #0
 8002590:	701a      	strb	r2, [r3, #0]
			  highcurrent_out.high_out = 0;
 8002592:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <main+0x678>)
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
			  leuchten_out.ledoutput = 0;
 8002598:	4b17      	ldr	r3, [pc, #92]	; (80025f8 <main+0x67c>)
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]
			  sdc_in.sdcinput = 0;
 800259e:	4b17      	ldr	r3, [pc, #92]	; (80025fc <main+0x680>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]

			  break;
 80025a4:	e012      	b.n	80025cc <main+0x650>
		  }

		  // Falls kein State zutrifft, dann kritischer Fehler
		  default:
		  {
			  uartTransmit("BMS Kritischer Fehler\n!", 24);
 80025a6:	2118      	movs	r1, #24
 80025a8:	4815      	ldr	r0, [pc, #84]	; (8002600 <main+0x684>)
 80025aa:	f7fd ffcb 	bl	8000544 <uartTransmit>
			  setStatus(CriticalError);
 80025ae:	2080      	movs	r0, #128	; 0x80
 80025b0:	f000 f9d4 	bl	800295c <setStatus>

			  break;
 80025b4:	e00a      	b.n	80025cc <main+0x650>
			  break;
 80025b6:	bf00      	nop
 80025b8:	e008      	b.n	80025cc <main+0x650>
			  break;
 80025ba:	bf00      	nop
 80025bc:	e006      	b.n	80025cc <main+0x650>
			  break;
 80025be:	bf00      	nop
 80025c0:	e004      	b.n	80025cc <main+0x650>
			  break;
 80025c2:	bf00      	nop
 80025c4:	e002      	b.n	80025cc <main+0x650>
			  break;
 80025c6:	bf00      	nop
 80025c8:	e000      	b.n	80025cc <main+0x650>
			  break;
 80025ca:	bf00      	nop
		  }
	  }

	  // Alle Ausgaenge schreiben
	  writeall_outputs();
 80025cc:	f7ff f894 	bl	80016f8 <writeall_outputs>
	  readall_inputs();
 80025d0:	e558      	b.n	8002084 <main+0x108>
 80025d2:	bf00      	nop
 80025d4:	08008e48 	.word	0x08008e48
 80025d8:	20000000 	.word	0x20000000
 80025dc:	20000170 	.word	0x20000170
 80025e0:	08008e20 	.word	0x08008e20
 80025e4:	000493e0 	.word	0x000493e0
 80025e8:	08008e50 	.word	0x08008e50
 80025ec:	08008e04 	.word	0x08008e04
 80025f0:	2000017c 	.word	0x2000017c
 80025f4:	20000180 	.word	0x20000180
 80025f8:	20000184 	.word	0x20000184
 80025fc:	20000174 	.word	0x20000174
 8002600:	08008e60 	.word	0x08008e60

08002604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b094      	sub	sp, #80	; 0x50
 8002608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800260a:	f107 031c 	add.w	r3, r7, #28
 800260e:	2234      	movs	r2, #52	; 0x34
 8002610:	2100      	movs	r1, #0
 8002612:	4618      	mov	r0, r3
 8002614:	f006 f9d4 	bl	80089c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002618:	f107 0308 	add.w	r3, r7, #8
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002628:	f002 fd5c 	bl	80050e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800262c:	4b30      	ldr	r3, [pc, #192]	; (80026f0 <SystemClock_Config+0xec>)
 800262e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002630:	4a2f      	ldr	r2, [pc, #188]	; (80026f0 <SystemClock_Config+0xec>)
 8002632:	f023 0318 	bic.w	r3, r3, #24
 8002636:	6713      	str	r3, [r2, #112]	; 0x70

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002638:	4b2d      	ldr	r3, [pc, #180]	; (80026f0 <SystemClock_Config+0xec>)
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	4a2c      	ldr	r2, [pc, #176]	; (80026f0 <SystemClock_Config+0xec>)
 800263e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002642:	6413      	str	r3, [r2, #64]	; 0x40
 8002644:	4b2a      	ldr	r3, [pc, #168]	; (80026f0 <SystemClock_Config+0xec>)
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264c:	607b      	str	r3, [r7, #4]
 800264e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002650:	4b28      	ldr	r3, [pc, #160]	; (80026f4 <SystemClock_Config+0xf0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a27      	ldr	r2, [pc, #156]	; (80026f4 <SystemClock_Config+0xf0>)
 8002656:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <SystemClock_Config+0xf0>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002664:	603b      	str	r3, [r7, #0]
 8002666:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002668:	2305      	movs	r3, #5
 800266a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800266c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002670:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002672:	2301      	movs	r3, #1
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002676:	2302      	movs	r3, #2
 8002678:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800267a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800267e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002680:	2319      	movs	r3, #25
 8002682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002684:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002688:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800268a:	2302      	movs	r3, #2
 800268c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800268e:	2308      	movs	r3, #8
 8002690:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002692:	2302      	movs	r3, #2
 8002694:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002696:	f107 031c 	add.w	r3, r7, #28
 800269a:	4618      	mov	r0, r3
 800269c:	f002 fd82 	bl	80051a4 <HAL_RCC_OscConfig>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80026a6:	f000 f98f 	bl	80029c8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80026aa:	f002 fd2b 	bl	8005104 <HAL_PWREx_EnableOverDrive>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80026b4:	f000 f988 	bl	80029c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026b8:	230f      	movs	r3, #15
 80026ba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026bc:	2302      	movs	r3, #2
 80026be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026c0:	2300      	movs	r3, #0
 80026c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80026c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80026c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80026ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80026d0:	f107 0308 	add.w	r3, r7, #8
 80026d4:	2107      	movs	r1, #7
 80026d6:	4618      	mov	r0, r3
 80026d8:	f003 f812 	bl	8005700 <HAL_RCC_ClockConfig>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80026e2:	f000 f971 	bl	80029c8 <Error_Handler>
  }
}
 80026e6:	bf00      	nop
 80026e8:	3750      	adds	r7, #80	; 0x50
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40007000 	.word	0x40007000

080026f8 <checkSDC>:

/* USER CODE BEGIN 4 */
void checkSDC(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
	sdc_in.SDC_OK = 1;
 80026fc:	4a26      	ldr	r2, [pc, #152]	; (8002798 <checkSDC+0xa0>)
 80026fe:	7813      	ldrb	r3, [r2, #0]
 8002700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002704:	7013      	strb	r3, [r2, #0]

	if (sdc_in.IMD_OK_IN == 1)
 8002706:	4b24      	ldr	r3, [pc, #144]	; (8002798 <checkSDC+0xa0>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d007      	beq.n	8002724 <checkSDC+0x2c>
	{
		setStatus(StateError);
 8002714:	2040      	movs	r0, #64	; 0x40
 8002716:	f000 f921 	bl	800295c <setStatus>
		sdc_in.SDC_OK = 0;
 800271a:	4a1f      	ldr	r2, [pc, #124]	; (8002798 <checkSDC+0xa0>)
 800271c:	7813      	ldrb	r3, [r2, #0]
 800271e:	f36f 1386 	bfc	r3, #6, #1
 8002722:	7013      	strb	r3, [r2, #0]
	}

	if (sdc_in.HVIL == 1)
 8002724:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <checkSDC+0xa0>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d007      	beq.n	8002742 <checkSDC+0x4a>
	{
		setStatus(StateError);
 8002732:	2040      	movs	r0, #64	; 0x40
 8002734:	f000 f912 	bl	800295c <setStatus>
		sdc_in.SDC_OK = 0;
 8002738:	4a17      	ldr	r2, [pc, #92]	; (8002798 <checkSDC+0xa0>)
 800273a:	7813      	ldrb	r3, [r2, #0]
 800273c:	f36f 1386 	bfc	r3, #6, #1
 8002740:	7013      	strb	r3, [r2, #0]
	}

	if (sdc_in.BTB_SDC == 1)
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <checkSDC+0xa0>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d007      	beq.n	8002760 <checkSDC+0x68>
	{
		setStatus(StateError);
 8002750:	2040      	movs	r0, #64	; 0x40
 8002752:	f000 f903 	bl	800295c <setStatus>
		sdc_in.SDC_OK = 0;
 8002756:	4a10      	ldr	r2, [pc, #64]	; (8002798 <checkSDC+0xa0>)
 8002758:	7813      	ldrb	r3, [r2, #0]
 800275a:	f36f 1386 	bfc	r3, #6, #1
 800275e:	7013      	strb	r3, [r2, #0]
	}

	if (sdc_in.MotorSDC == 1)
 8002760:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <checkSDC+0xa0>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d007      	beq.n	800277e <checkSDC+0x86>
	{
		setStatus(StateError);
 800276e:	2040      	movs	r0, #64	; 0x40
 8002770:	f000 f8f4 	bl	800295c <setStatus>
		sdc_in.SDC_OK = 0;
 8002774:	4a08      	ldr	r2, [pc, #32]	; (8002798 <checkSDC+0xa0>)
 8002776:	7813      	ldrb	r3, [r2, #0]
 8002778:	f36f 1386 	bfc	r3, #6, #1
 800277c:	7013      	strb	r3, [r2, #0]
	}

	if (sdc_in.SDC_OK == 1)
 800277e:	4b06      	ldr	r3, [pc, #24]	; (8002798 <checkSDC+0xa0>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <checkSDC+0x9a>
	{
		setStatus(StateNormal);
 800278c:	2010      	movs	r0, #16
 800278e:	f000 f8e5 	bl	800295c <setStatus>
	}
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000174 	.word	0x20000174

0800279c <sortCAN>:

// Sortiere CAN Daten
void sortCAN(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
	// Digital-Ausgaenge
	CAN_Output_PaketListe[1].msg.buf[0] = system_out.systemoutput;
 80027a0:	4b63      	ldr	r3, [pc, #396]	; (8002930 <sortCAN+0x194>)
 80027a2:	781a      	ldrb	r2, [r3, #0]
 80027a4:	4b63      	ldr	r3, [pc, #396]	; (8002934 <sortCAN+0x198>)
 80027a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	CAN_Output_PaketListe[1].msg.buf[1] = highcurrent_out.high_out;
 80027aa:	4b63      	ldr	r3, [pc, #396]	; (8002938 <sortCAN+0x19c>)
 80027ac:	781a      	ldrb	r2, [r3, #0]
 80027ae:	4b61      	ldr	r3, [pc, #388]	; (8002934 <sortCAN+0x198>)
 80027b0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	CAN_Output_PaketListe[1].msg.buf[2] = leuchten_out.ledoutput;
 80027b4:	4b61      	ldr	r3, [pc, #388]	; (800293c <sortCAN+0x1a0>)
 80027b6:	781a      	ldrb	r2, [r3, #0]
 80027b8:	4b5e      	ldr	r3, [pc, #376]	; (8002934 <sortCAN+0x198>)
 80027ba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	CAN_Output_PaketListe[1].msg.buf[3] = komfort_out.komfortoutput;
 80027be:	4b60      	ldr	r3, [pc, #384]	; (8002940 <sortCAN+0x1a4>)
 80027c0:	781a      	ldrb	r2, [r3, #0]
 80027c2:	4b5c      	ldr	r3, [pc, #368]	; (8002934 <sortCAN+0x198>)
 80027c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	CAN_Output_PaketListe[1].msg.buf[4] = 0;
 80027c8:	4b5a      	ldr	r3, [pc, #360]	; (8002934 <sortCAN+0x198>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	// Digital-Eingaenge
	CAN_Output_PaketListe[2].msg.buf[0] = 0;
 80027d0:	4b58      	ldr	r3, [pc, #352]	; (8002934 <sortCAN+0x198>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	CAN_Output_PaketListe[2].msg.buf[1] = system_in.systeminput;
 80027d8:	4b5a      	ldr	r3, [pc, #360]	; (8002944 <sortCAN+0x1a8>)
 80027da:	781a      	ldrb	r2, [r3, #0]
 80027dc:	4b55      	ldr	r3, [pc, #340]	; (8002934 <sortCAN+0x198>)
 80027de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	CAN_Output_PaketListe[2].msg.buf[2] = sdc_in.sdcinput;
 80027e2:	4b59      	ldr	r3, [pc, #356]	; (8002948 <sortCAN+0x1ac>)
 80027e4:	781a      	ldrb	r2, [r3, #0]
 80027e6:	4b53      	ldr	r3, [pc, #332]	; (8002934 <sortCAN+0x198>)
 80027e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	CAN_Output_PaketListe[2].msg.buf[3] = komfort_in.komfortinput;
 80027ec:	4b57      	ldr	r3, [pc, #348]	; (800294c <sortCAN+0x1b0>)
 80027ee:	781a      	ldrb	r2, [r3, #0]
 80027f0:	4b50      	ldr	r3, [pc, #320]	; (8002934 <sortCAN+0x198>)
 80027f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	// Analogeingaenge
	CAN_Output_PaketListe[3].msg.buf[0] = ADC_VAL[0];
 80027f6:	4b56      	ldr	r3, [pc, #344]	; (8002950 <sortCAN+0x1b4>)
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	4b4d      	ldr	r3, [pc, #308]	; (8002934 <sortCAN+0x198>)
 80027fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	CAN_Output_PaketListe[3].msg.buf[1] = (ADC_VAL[0] >> 8) | (ADC_VAL[1] << 4);
 8002802:	4b53      	ldr	r3, [pc, #332]	; (8002950 <sortCAN+0x1b4>)
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	0a1b      	lsrs	r3, r3, #8
 8002808:	b29b      	uxth	r3, r3
 800280a:	b25a      	sxtb	r2, r3
 800280c:	4b50      	ldr	r3, [pc, #320]	; (8002950 <sortCAN+0x1b4>)
 800280e:	885b      	ldrh	r3, [r3, #2]
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	b25b      	sxtb	r3, r3
 8002814:	4313      	orrs	r3, r2
 8002816:	b25b      	sxtb	r3, r3
 8002818:	b2da      	uxtb	r2, r3
 800281a:	4b46      	ldr	r3, [pc, #280]	; (8002934 <sortCAN+0x198>)
 800281c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	CAN_Output_PaketListe[3].msg.buf[2] = (ADC_VAL[1] >> 4);
 8002820:	4b4b      	ldr	r3, [pc, #300]	; (8002950 <sortCAN+0x1b4>)
 8002822:	885b      	ldrh	r3, [r3, #2]
 8002824:	091b      	lsrs	r3, r3, #4
 8002826:	b29b      	uxth	r3, r3
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4b42      	ldr	r3, [pc, #264]	; (8002934 <sortCAN+0x198>)
 800282c:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	CAN_Output_PaketListe[3].msg.buf[3] = ADC_VAL[2];
 8002830:	4b47      	ldr	r3, [pc, #284]	; (8002950 <sortCAN+0x1b4>)
 8002832:	889b      	ldrh	r3, [r3, #4]
 8002834:	b2da      	uxtb	r2, r3
 8002836:	4b3f      	ldr	r3, [pc, #252]	; (8002934 <sortCAN+0x198>)
 8002838:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	CAN_Output_PaketListe[3].msg.buf[4] = (ADC_VAL[2] >> 8);
 800283c:	4b44      	ldr	r3, [pc, #272]	; (8002950 <sortCAN+0x1b4>)
 800283e:	889b      	ldrh	r3, [r3, #4]
 8002840:	0a1b      	lsrs	r3, r3, #8
 8002842:	b29b      	uxth	r3, r3
 8002844:	b2da      	uxtb	r2, r3
 8002846:	4b3b      	ldr	r3, [pc, #236]	; (8002934 <sortCAN+0x198>)
 8002848:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	CAN_Output_PaketListe[3].msg.buf[5] = 0;
 800284c:	4b39      	ldr	r3, [pc, #228]	; (8002934 <sortCAN+0x198>)
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	CAN_Output_PaketListe[3].msg.buf[6] = 0;
 8002854:	4b37      	ldr	r3, [pc, #220]	; (8002934 <sortCAN+0x198>)
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	CAN_Output_PaketListe[3].msg.buf[7] = 0;
 800285c:	4b35      	ldr	r3, [pc, #212]	; (8002934 <sortCAN+0x198>)
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

	// Temperatureingaenge
	CAN_Output_PaketListe[4].msg.buf[0] = ADC_VAL[3];
 8002864:	4b3a      	ldr	r3, [pc, #232]	; (8002950 <sortCAN+0x1b4>)
 8002866:	88db      	ldrh	r3, [r3, #6]
 8002868:	b2da      	uxtb	r2, r3
 800286a:	4b32      	ldr	r3, [pc, #200]	; (8002934 <sortCAN+0x198>)
 800286c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	CAN_Output_PaketListe[4].msg.buf[1] = (ADC_VAL[3] >> 8) | (ADC_VAL[4] << 4);
 8002870:	4b37      	ldr	r3, [pc, #220]	; (8002950 <sortCAN+0x1b4>)
 8002872:	88db      	ldrh	r3, [r3, #6]
 8002874:	0a1b      	lsrs	r3, r3, #8
 8002876:	b29b      	uxth	r3, r3
 8002878:	b25a      	sxtb	r2, r3
 800287a:	4b35      	ldr	r3, [pc, #212]	; (8002950 <sortCAN+0x1b4>)
 800287c:	891b      	ldrh	r3, [r3, #8]
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	b25b      	sxtb	r3, r3
 8002882:	4313      	orrs	r3, r2
 8002884:	b25b      	sxtb	r3, r3
 8002886:	b2da      	uxtb	r2, r3
 8002888:	4b2a      	ldr	r3, [pc, #168]	; (8002934 <sortCAN+0x198>)
 800288a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	CAN_Output_PaketListe[4].msg.buf[2] = (ADC_VAL[4] >> 4);
 800288e:	4b30      	ldr	r3, [pc, #192]	; (8002950 <sortCAN+0x1b4>)
 8002890:	891b      	ldrh	r3, [r3, #8]
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	b29b      	uxth	r3, r3
 8002896:	b2da      	uxtb	r2, r3
 8002898:	4b26      	ldr	r3, [pc, #152]	; (8002934 <sortCAN+0x198>)
 800289a:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	CAN_Output_PaketListe[4].msg.buf[3] = ADC_VAL[5];
 800289e:	4b2c      	ldr	r3, [pc, #176]	; (8002950 <sortCAN+0x1b4>)
 80028a0:	895b      	ldrh	r3, [r3, #10]
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	4b23      	ldr	r3, [pc, #140]	; (8002934 <sortCAN+0x198>)
 80028a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	CAN_Output_PaketListe[4].msg.buf[4] = (ADC_VAL[5] >> 8) | (ADC_VAL[6] << 4);
 80028aa:	4b29      	ldr	r3, [pc, #164]	; (8002950 <sortCAN+0x1b4>)
 80028ac:	895b      	ldrh	r3, [r3, #10]
 80028ae:	0a1b      	lsrs	r3, r3, #8
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	b25a      	sxtb	r2, r3
 80028b4:	4b26      	ldr	r3, [pc, #152]	; (8002950 <sortCAN+0x1b4>)
 80028b6:	899b      	ldrh	r3, [r3, #12]
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	b25b      	sxtb	r3, r3
 80028bc:	4313      	orrs	r3, r2
 80028be:	b25b      	sxtb	r3, r3
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	4b1c      	ldr	r3, [pc, #112]	; (8002934 <sortCAN+0x198>)
 80028c4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
	CAN_Output_PaketListe[4].msg.buf[5] = (ADC_VAL[6] >> 4);
 80028c8:	4b21      	ldr	r3, [pc, #132]	; (8002950 <sortCAN+0x1b4>)
 80028ca:	899b      	ldrh	r3, [r3, #12]
 80028cc:	091b      	lsrs	r3, r3, #4
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	4b18      	ldr	r3, [pc, #96]	; (8002934 <sortCAN+0x198>)
 80028d4:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	CAN_Output_PaketListe[4].msg.buf[6] = 0;
 80028d8:	4b16      	ldr	r3, [pc, #88]	; (8002934 <sortCAN+0x198>)
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	CAN_Output_PaketListe[4].msg.buf[7] = 0;
 80028e0:	4b14      	ldr	r3, [pc, #80]	; (8002934 <sortCAN+0x198>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	// Batteriemanagement Status
	CAN_Output_PaketListe[5].msg.buf[0] = BMS_state.status;
 80028e8:	4b1a      	ldr	r3, [pc, #104]	; (8002954 <sortCAN+0x1b8>)
 80028ea:	781a      	ldrb	r2, [r3, #0]
 80028ec:	4b11      	ldr	r3, [pc, #68]	; (8002934 <sortCAN+0x198>)
 80028ee:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

	// IMD Status
	CAN_Output_PaketListe[6].msg.buf[0] = imd.status[0];
 80028f2:	4b19      	ldr	r3, [pc, #100]	; (8002958 <sortCAN+0x1bc>)
 80028f4:	781a      	ldrb	r2, [r3, #0]
 80028f6:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <sortCAN+0x198>)
 80028f8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	CAN_Output_PaketListe[6].msg.buf[1] = imd.status[1];
 80028fc:	4b16      	ldr	r3, [pc, #88]	; (8002958 <sortCAN+0x1bc>)
 80028fe:	785a      	ldrb	r2, [r3, #1]
 8002900:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <sortCAN+0x198>)
 8002902:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	CAN_Output_PaketListe[6].msg.buf[2] = imd.status[2];
 8002906:	4b14      	ldr	r3, [pc, #80]	; (8002958 <sortCAN+0x1bc>)
 8002908:	789a      	ldrb	r2, [r3, #2]
 800290a:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <sortCAN+0x198>)
 800290c:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	CAN_Output_PaketListe[6].msg.buf[3] = imd.status[3];
 8002910:	4b11      	ldr	r3, [pc, #68]	; (8002958 <sortCAN+0x1bc>)
 8002912:	78da      	ldrb	r2, [r3, #3]
 8002914:	4b07      	ldr	r3, [pc, #28]	; (8002934 <sortCAN+0x198>)
 8002916:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	CAN_Output_PaketListe[6].msg.buf[4] = imd.status[4];
 800291a:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <sortCAN+0x1bc>)
 800291c:	791a      	ldrb	r2, [r3, #4]
 800291e:	4b05      	ldr	r3, [pc, #20]	; (8002934 <sortCAN+0x198>)
 8002920:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	2000017c 	.word	0x2000017c
 8002934:	200000a4 	.word	0x200000a4
 8002938:	20000180 	.word	0x20000180
 800293c:	20000184 	.word	0x20000184
 8002940:	20000188 	.word	0x20000188
 8002944:	20000170 	.word	0x20000170
 8002948:	20000174 	.word	0x20000174
 800294c:	20000178 	.word	0x20000178
 8002950:	2000024c 	.word	0x2000024c
 8002954:	20000000 	.word	0x20000000
 8002958:	20000168 	.word	0x20000168

0800295c <setStatus>:

// Set Status der Statemaschine
void setStatus(uint8_t Status)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	71fb      	strb	r3, [r7, #7]
	switch (Status & 0xF0)
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800296c:	2b80      	cmp	r3, #128	; 0x80
 800296e:	d009      	beq.n	8002984 <setStatus+0x28>
 8002970:	2b80      	cmp	r3, #128	; 0x80
 8002972:	dc13      	bgt.n	800299c <setStatus+0x40>
 8002974:	2b40      	cmp	r3, #64	; 0x40
 8002976:	d005      	beq.n	8002984 <setStatus+0x28>
 8002978:	2b40      	cmp	r3, #64	; 0x40
 800297a:	dc0f      	bgt.n	800299c <setStatus+0x40>
 800297c:	2b10      	cmp	r3, #16
 800297e:	d001      	beq.n	8002984 <setStatus+0x28>
 8002980:	2b20      	cmp	r3, #32
 8002982:	d10b      	bne.n	800299c <setStatus+0x40>
		case StateNormal:
		case StateWarning:
		case StateError:
		case CriticalError:
		{
			BMS_state.status = (Status | BMS_state.State);
 8002984:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <setStatus+0x68>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800298c:	b2db      	uxtb	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	4313      	orrs	r3, r2
 8002994:	b2da      	uxtb	r2, r3
 8002996:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <setStatus+0x68>)
 8002998:	701a      	strb	r2, [r3, #0]
			break;
 800299a:	e00c      	b.n	80029b6 <setStatus+0x5a>
		}
		default:
		{
			BMS_state.status = (CriticalError | BMS_state.State);
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <setStatus+0x68>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	b25b      	sxtb	r3, r3
 80029a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029ac:	b25b      	sxtb	r3, r3
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	4b04      	ldr	r3, [pc, #16]	; (80029c4 <setStatus+0x68>)
 80029b2:	701a      	strb	r2, [r3, #0]
			break;
 80029b4:	bf00      	nop
		}
	}
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20000000 	.word	0x20000000

080029c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80029cc:	b672      	cpsid	i
}
 80029ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 80029d0:	4a11      	ldr	r2, [pc, #68]	; (8002a18 <Error_Handler+0x50>)
 80029d2:	7813      	ldrb	r3, [r2, #0]
 80029d4:	f043 0320 	orr.w	r3, r3, #32
 80029d8:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 80029da:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <Error_Handler+0x50>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	2104      	movs	r1, #4
 80029e8:	480c      	ldr	r0, [pc, #48]	; (8002a1c <Error_Handler+0x54>)
 80029ea:	f002 fb61 	bl	80050b0 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 80029ee:	4a0a      	ldr	r2, [pc, #40]	; (8002a18 <Error_Handler+0x50>)
 80029f0:	7813      	ldrb	r3, [r2, #0]
 80029f2:	f36f 1386 	bfc	r3, #6, #1
 80029f6:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 80029f8:	4b07      	ldr	r3, [pc, #28]	; (8002a18 <Error_Handler+0x50>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a08:	4804      	ldr	r0, [pc, #16]	; (8002a1c <Error_Handler+0x54>)
 8002a0a:	f002 fb51 	bl	80050b0 <HAL_GPIO_WritePin>

	// Sende Nachricht auf Uart-Interface
#ifdef DEBUG
#define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
	uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 8002a0e:	2122      	movs	r1, #34	; 0x22
 8002a10:	4803      	ldr	r0, [pc, #12]	; (8002a20 <Error_Handler+0x58>)
 8002a12:	f7fd fd97 	bl	8000544 <uartTransmit>
#endif
	// Beginne Endlosschleife nachdem Fehler aufgetreten ist
	while (1)
 8002a16:	e7fe      	b.n	8002a16 <Error_Handler+0x4e>
 8002a18:	20000184 	.word	0x20000184
 8002a1c:	40020400 	.word	0x40020400
 8002a20:	08008e78 	.word	0x08008e78

08002a24 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002a28:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <MX_RTC_Init+0x5c>)
 8002a2a:	4a16      	ldr	r2, [pc, #88]	; (8002a84 <MX_RTC_Init+0x60>)
 8002a2c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a2e:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <MX_RTC_Init+0x5c>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002a34:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <MX_RTC_Init+0x5c>)
 8002a36:	227f      	movs	r2, #127	; 0x7f
 8002a38:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002a3a:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <MX_RTC_Init+0x5c>)
 8002a3c:	22ff      	movs	r2, #255	; 0xff
 8002a3e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_WAKEUP;
 8002a40:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <MX_RTC_Init+0x5c>)
 8002a42:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8002a46:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_LOW;
 8002a48:	4b0d      	ldr	r3, [pc, #52]	; (8002a80 <MX_RTC_Init+0x5c>)
 8002a4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a4e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <MX_RTC_Init+0x5c>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002a56:	480a      	ldr	r0, [pc, #40]	; (8002a80 <MX_RTC_Init+0x5c>)
 8002a58:	f003 fc60 	bl	800631c <HAL_RTC_Init>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_RTC_Init+0x42>
  {
    Error_Handler();
 8002a62:	f7ff ffb1 	bl	80029c8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002a66:	2200      	movs	r2, #0
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4805      	ldr	r0, [pc, #20]	; (8002a80 <MX_RTC_Init+0x5c>)
 8002a6c:	f003 fd5e 	bl	800652c <HAL_RTCEx_SetWakeUpTimer>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8002a76:	f7ff ffa7 	bl	80029c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	2000025c 	.word	0x2000025c
 8002a84:	40002800 	.word	0x40002800

08002a88 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b0ac      	sub	sp, #176	; 0xb0
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002aa0:	f107 030c 	add.w	r3, r7, #12
 8002aa4:	2290      	movs	r2, #144	; 0x90
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f005 ff89 	bl	80089c0 <memset>
  if(rtcHandle->Instance==RTC)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <HAL_RTC_MspInit+0xa0>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d133      	bne.n	8002b20 <HAL_RTC_MspInit+0x98>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002ab8:	2320      	movs	r3, #32
 8002aba:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002abc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ac2:	f107 030c 	add.w	r3, r7, #12
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f003 f800 	bl	8005acc <HAL_RCCEx_PeriphCLKConfig>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_RTC_MspInit+0x4e>
    {
      Error_Handler();
 8002ad2:	f7ff ff79 	bl	80029c8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ad6:	4b15      	ldr	r3, [pc, #84]	; (8002b2c <HAL_RTC_MspInit+0xa4>)
 8002ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ada:	4a14      	ldr	r2, [pc, #80]	; (8002b2c <HAL_RTC_MspInit+0xa4>)
 8002adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ae0:	6713      	str	r3, [r2, #112]	; 0x70

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ae2:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <HAL_RTC_MspInit+0xa4>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	4a11      	ldr	r2, [pc, #68]	; (8002b2c <HAL_RTC_MspInit+0xa4>)
 8002ae8:	f043 0304 	orr.w	r3, r3, #4
 8002aec:	6313      	str	r3, [r2, #48]	; 0x30
 8002aee:	4b0f      	ldr	r3, [pc, #60]	; (8002b2c <HAL_RTC_MspInit+0xa4>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration
    PC13     ------> RTC_OUT
    */
    GPIO_InitStruct.Pin = POWER_ON_Pin;
 8002afa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002afe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b02:	2302      	movs	r3, #2
 8002b04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8002b14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4805      	ldr	r0, [pc, #20]	; (8002b30 <HAL_RTC_MspInit+0xa8>)
 8002b1c:	f002 f904 	bl	8004d28 <HAL_GPIO_Init>

  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002b20:	bf00      	nop
 8002b22:	37b0      	adds	r7, #176	; 0xb0
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40002800 	.word	0x40002800
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40020800 	.word	0x40020800

08002b34 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002b38:	4b1b      	ldr	r3, [pc, #108]	; (8002ba8 <MX_SPI1_Init+0x74>)
 8002b3a:	4a1c      	ldr	r2, [pc, #112]	; (8002bac <MX_SPI1_Init+0x78>)
 8002b3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ba8 <MX_SPI1_Init+0x74>)
 8002b40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b46:	4b18      	ldr	r3, [pc, #96]	; (8002ba8 <MX_SPI1_Init+0x74>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b4c:	4b16      	ldr	r3, [pc, #88]	; (8002ba8 <MX_SPI1_Init+0x74>)
 8002b4e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b52:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b54:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <MX_SPI1_Init+0x74>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b5a:	4b13      	ldr	r3, [pc, #76]	; (8002ba8 <MX_SPI1_Init+0x74>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002b60:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <MX_SPI1_Init+0x74>)
 8002b62:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002b66:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <MX_SPI1_Init+0x74>)
 8002b6a:	2230      	movs	r2, #48	; 0x30
 8002b6c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <MX_SPI1_Init+0x74>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <MX_SPI1_Init+0x74>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <MX_SPI1_Init+0x74>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002b80:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <MX_SPI1_Init+0x74>)
 8002b82:	2207      	movs	r2, #7
 8002b84:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b86:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <MX_SPI1_Init+0x74>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b8c:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <MX_SPI1_Init+0x74>)
 8002b8e:	2208      	movs	r2, #8
 8002b90:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b92:	4805      	ldr	r0, [pc, #20]	; (8002ba8 <MX_SPI1_Init+0x74>)
 8002b94:	f003 fd67 	bl	8006666 <HAL_SPI_Init>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002b9e:	f7ff ff13 	bl	80029c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	2000027c 	.word	0x2000027c
 8002bac:	40013000 	.word	0x40013000

08002bb0 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002bb4:	4b1b      	ldr	r3, [pc, #108]	; (8002c24 <MX_SPI4_Init+0x74>)
 8002bb6:	4a1c      	ldr	r2, [pc, #112]	; (8002c28 <MX_SPI4_Init+0x78>)
 8002bb8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002bba:	4b1a      	ldr	r3, [pc, #104]	; (8002c24 <MX_SPI4_Init+0x74>)
 8002bbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002bc0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002bc2:	4b18      	ldr	r3, [pc, #96]	; (8002c24 <MX_SPI4_Init+0x74>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bc8:	4b16      	ldr	r3, [pc, #88]	; (8002c24 <MX_SPI4_Init+0x74>)
 8002bca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002bce:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002bd0:	4b14      	ldr	r3, [pc, #80]	; (8002c24 <MX_SPI4_Init+0x74>)
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002bd6:	4b13      	ldr	r3, [pc, #76]	; (8002c24 <MX_SPI4_Init+0x74>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002bdc:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <MX_SPI4_Init+0x74>)
 8002bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002be2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002be4:	4b0f      	ldr	r3, [pc, #60]	; (8002c24 <MX_SPI4_Init+0x74>)
 8002be6:	2230      	movs	r2, #48	; 0x30
 8002be8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bea:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <MX_SPI4_Init+0x74>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bf0:	4b0c      	ldr	r3, [pc, #48]	; (8002c24 <MX_SPI4_Init+0x74>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bf6:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <MX_SPI4_Init+0x74>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002bfc:	4b09      	ldr	r3, [pc, #36]	; (8002c24 <MX_SPI4_Init+0x74>)
 8002bfe:	2207      	movs	r2, #7
 8002c00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c02:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <MX_SPI4_Init+0x74>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002c08:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <MX_SPI4_Init+0x74>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002c0e:	4805      	ldr	r0, [pc, #20]	; (8002c24 <MX_SPI4_Init+0x74>)
 8002c10:	f003 fd29 	bl	8006666 <HAL_SPI_Init>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002c1a:	f7ff fed5 	bl	80029c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	200002e0 	.word	0x200002e0
 8002c28:	40013400 	.word	0x40013400

08002c2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08c      	sub	sp, #48	; 0x30
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c34:	f107 031c 	add.w	r3, r7, #28
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	60da      	str	r2, [r3, #12]
 8002c42:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a3d      	ldr	r2, [pc, #244]	; (8002d40 <HAL_SPI_MspInit+0x114>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d145      	bne.n	8002cda <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c4e:	4b3d      	ldr	r3, [pc, #244]	; (8002d44 <HAL_SPI_MspInit+0x118>)
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	4a3c      	ldr	r2, [pc, #240]	; (8002d44 <HAL_SPI_MspInit+0x118>)
 8002c54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c58:	6453      	str	r3, [r2, #68]	; 0x44
 8002c5a:	4b3a      	ldr	r3, [pc, #232]	; (8002d44 <HAL_SPI_MspInit+0x118>)
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c62:	61bb      	str	r3, [r7, #24]
 8002c64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c66:	4b37      	ldr	r3, [pc, #220]	; (8002d44 <HAL_SPI_MspInit+0x118>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	4a36      	ldr	r2, [pc, #216]	; (8002d44 <HAL_SPI_MspInit+0x118>)
 8002c6c:	f043 0308 	orr.w	r3, r3, #8
 8002c70:	6313      	str	r3, [r2, #48]	; 0x30
 8002c72:	4b34      	ldr	r3, [pc, #208]	; (8002d44 <HAL_SPI_MspInit+0x118>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c7e:	4b31      	ldr	r3, [pc, #196]	; (8002d44 <HAL_SPI_MspInit+0x118>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	4a30      	ldr	r2, [pc, #192]	; (8002d44 <HAL_SPI_MspInit+0x118>)
 8002c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c88:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8a:	4b2e      	ldr	r3, [pc, #184]	; (8002d44 <HAL_SPI_MspInit+0x118>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 8002c96:	2380      	movs	r3, #128	; 0x80
 8002c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ca6:	2305      	movs	r3, #5
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002caa:	f107 031c 	add.w	r3, r7, #28
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4825      	ldr	r0, [pc, #148]	; (8002d48 <HAL_SPI_MspInit+0x11c>)
 8002cb2:	f002 f839 	bl	8004d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTI_CS_Pin|POTI_SCK_Pin;
 8002cb6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cc8:	2305      	movs	r3, #5
 8002cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ccc:	f107 031c 	add.w	r3, r7, #28
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	481e      	ldr	r0, [pc, #120]	; (8002d4c <HAL_SPI_MspInit+0x120>)
 8002cd4:	f002 f828 	bl	8004d28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002cd8:	e02d      	b.n	8002d36 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI4)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a1c      	ldr	r2, [pc, #112]	; (8002d50 <HAL_SPI_MspInit+0x124>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d128      	bne.n	8002d36 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002ce4:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <HAL_SPI_MspInit+0x118>)
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce8:	4a16      	ldr	r2, [pc, #88]	; (8002d44 <HAL_SPI_MspInit+0x118>)
 8002cea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cee:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf0:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <HAL_SPI_MspInit+0x118>)
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cfc:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <HAL_SPI_MspInit+0x118>)
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	4a10      	ldr	r2, [pc, #64]	; (8002d44 <HAL_SPI_MspInit+0x118>)
 8002d02:	f043 0310 	orr.w	r3, r3, #16
 8002d06:	6313      	str	r3, [r2, #48]	; 0x30
 8002d08:	4b0e      	ldr	r3, [pc, #56]	; (8002d44 <HAL_SPI_MspInit+0x118>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 8002d14:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d22:	2303      	movs	r3, #3
 8002d24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002d26:	2305      	movs	r3, #5
 8002d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d2a:	f107 031c 	add.w	r3, r7, #28
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4808      	ldr	r0, [pc, #32]	; (8002d54 <HAL_SPI_MspInit+0x128>)
 8002d32:	f001 fff9 	bl	8004d28 <HAL_GPIO_Init>
}
 8002d36:	bf00      	nop
 8002d38:	3730      	adds	r7, #48	; 0x30
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40013000 	.word	0x40013000
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40020c00 	.word	0x40020c00
 8002d4c:	40021800 	.word	0x40021800
 8002d50:	40013400 	.word	0x40013400
 8002d54:	40021000 	.word	0x40021000

08002d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d5e:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <HAL_MspInit+0x44>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	4a0e      	ldr	r2, [pc, #56]	; (8002d9c <HAL_MspInit+0x44>)
 8002d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d68:	6413      	str	r3, [r2, #64]	; 0x40
 8002d6a:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <HAL_MspInit+0x44>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d72:	607b      	str	r3, [r7, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d76:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <HAL_MspInit+0x44>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	4a08      	ldr	r2, [pc, #32]	; (8002d9c <HAL_MspInit+0x44>)
 8002d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d80:	6453      	str	r3, [r2, #68]	; 0x44
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HAL_MspInit+0x44>)
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d8a:	603b      	str	r3, [r7, #0]
 8002d8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40023800 	.word	0x40023800

08002da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dae:	b480      	push	{r7}
 8002db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002db2:	e7fe      	b.n	8002db2 <HardFault_Handler+0x4>

08002db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002db8:	e7fe      	b.n	8002db8 <MemManage_Handler+0x4>

08002dba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dbe:	e7fe      	b.n	8002dbe <BusFault_Handler+0x4>

08002dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dc4:	e7fe      	b.n	8002dc4 <UsageFault_Handler+0x4>

08002dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dd8:	bf00      	nop
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002de2:	b480      	push	{r7}
 8002de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002de6:	bf00      	nop
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002df4:	f000 fb60 	bl	80034b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002df8:	bf00      	nop
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e00:	4802      	ldr	r0, [pc, #8]	; (8002e0c <TIM1_CC_IRQHandler+0x10>)
 8002e02:	f003 fdea 	bl	80069da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002e06:	bf00      	nop
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000348 	.word	0x20000348

08002e10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e14:	4802      	ldr	r0, [pc, #8]	; (8002e20 <TIM6_DAC_IRQHandler+0x10>)
 8002e16:	f003 fde0 	bl	80069da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	200003e0 	.word	0x200003e0

08002e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e2c:	4a14      	ldr	r2, [pc, #80]	; (8002e80 <_sbrk+0x5c>)
 8002e2e:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <_sbrk+0x60>)
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e38:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <_sbrk+0x64>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d102      	bne.n	8002e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e40:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <_sbrk+0x64>)
 8002e42:	4a12      	ldr	r2, [pc, #72]	; (8002e8c <_sbrk+0x68>)
 8002e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e46:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <_sbrk+0x64>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d207      	bcs.n	8002e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e54:	f005 fdcc 	bl	80089f0 <__errno>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	220c      	movs	r2, #12
 8002e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e62:	e009      	b.n	8002e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e64:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <_sbrk+0x64>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e6a:	4b07      	ldr	r3, [pc, #28]	; (8002e88 <_sbrk+0x64>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4413      	add	r3, r2
 8002e72:	4a05      	ldr	r2, [pc, #20]	; (8002e88 <_sbrk+0x64>)
 8002e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e76:	68fb      	ldr	r3, [r7, #12]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20080000 	.word	0x20080000
 8002e84:	00000400 	.word	0x00000400
 8002e88:	20000344 	.word	0x20000344
 8002e8c:	20000600 	.word	0x20000600

08002e90 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e94:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <SystemInit+0x28>)
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9a:	4a07      	ldr	r2, [pc, #28]	; (8002eb8 <SystemInit+0x28>)
 8002e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ea4:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <SystemInit+0x28>)
 8002ea6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002eaa:	609a      	str	r2, [r3, #8]
#endif
}
 8002eac:	bf00      	nop
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b090      	sub	sp, #64	; 0x40
 8002ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ec2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	609a      	str	r2, [r3, #8]
 8002ece:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002ed0:	f107 031c 	add.w	r3, r7, #28
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002ee0:	f107 030c 	add.w	r3, r7, #12
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eee:	463b      	mov	r3, r7
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ef8:	4b40      	ldr	r3, [pc, #256]	; (8002ffc <MX_TIM1_Init+0x140>)
 8002efa:	4a41      	ldr	r2, [pc, #260]	; (8003000 <MX_TIM1_Init+0x144>)
 8002efc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 675 - 1;
 8002efe:	4b3f      	ldr	r3, [pc, #252]	; (8002ffc <MX_TIM1_Init+0x140>)
 8002f00:	f240 22a2 	movw	r2, #674	; 0x2a2
 8002f04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f06:	4b3d      	ldr	r3, [pc, #244]	; (8002ffc <MX_TIM1_Init+0x140>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002f0c:	4b3b      	ldr	r3, [pc, #236]	; (8002ffc <MX_TIM1_Init+0x140>)
 8002f0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f14:	4b39      	ldr	r3, [pc, #228]	; (8002ffc <MX_TIM1_Init+0x140>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f1a:	4b38      	ldr	r3, [pc, #224]	; (8002ffc <MX_TIM1_Init+0x140>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f20:	4b36      	ldr	r3, [pc, #216]	; (8002ffc <MX_TIM1_Init+0x140>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f26:	4835      	ldr	r0, [pc, #212]	; (8002ffc <MX_TIM1_Init+0x140>)
 8002f28:	f003 fc48 	bl	80067bc <HAL_TIM_Base_Init>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002f32:	f7ff fd49 	bl	80029c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f3a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f40:	4619      	mov	r1, r3
 8002f42:	482e      	ldr	r0, [pc, #184]	; (8002ffc <MX_TIM1_Init+0x140>)
 8002f44:	f004 f818 	bl	8006f78 <HAL_TIM_ConfigClockSource>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002f4e:	f7ff fd3b 	bl	80029c8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002f52:	482a      	ldr	r0, [pc, #168]	; (8002ffc <MX_TIM1_Init+0x140>)
 8002f54:	f003 fce0 	bl	8006918 <HAL_TIM_IC_Init>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002f5e:	f7ff fd33 	bl	80029c8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002f62:	2304      	movs	r3, #4
 8002f64:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002f66:	2350      	movs	r3, #80	; 0x50
 8002f68:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002f76:	f107 031c 	add.w	r3, r7, #28
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	481f      	ldr	r0, [pc, #124]	; (8002ffc <MX_TIM1_Init+0x140>)
 8002f7e:	f004 f8c5 	bl	800710c <HAL_TIM_SlaveConfigSynchro>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8002f88:	f7ff fd1e 	bl	80029c8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002f90:	2301      	movs	r3, #1
 8002f92:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002f9c:	f107 030c 	add.w	r3, r7, #12
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4815      	ldr	r0, [pc, #84]	; (8002ffc <MX_TIM1_Init+0x140>)
 8002fa6:	f003 fe37 	bl	8006c18 <HAL_TIM_IC_ConfigChannel>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002fb0:	f7ff fd0a 	bl	80029c8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002fb8:	2302      	movs	r3, #2
 8002fba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002fbc:	f107 030c 	add.w	r3, r7, #12
 8002fc0:	2204      	movs	r2, #4
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	480d      	ldr	r0, [pc, #52]	; (8002ffc <MX_TIM1_Init+0x140>)
 8002fc6:	f003 fe27 	bl	8006c18 <HAL_TIM_IC_ConfigChannel>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8002fd0:	f7ff fcfa 	bl	80029c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002fe0:	463b      	mov	r3, r7
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4805      	ldr	r0, [pc, #20]	; (8002ffc <MX_TIM1_Init+0x140>)
 8002fe6:	f004 fe5b 	bl	8007ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8002ff0:	f7ff fcea 	bl	80029c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002ff4:	bf00      	nop
 8002ff6:	3740      	adds	r7, #64	; 0x40
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	20000348 	.word	0x20000348
 8003000:	40010000 	.word	0x40010000

08003004 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08a      	sub	sp, #40	; 0x28
 8003008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800300a:	f107 031c 	add.w	r3, r7, #28
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	605a      	str	r2, [r3, #4]
 8003014:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003016:	463b      	mov	r3, r7
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	60da      	str	r2, [r3, #12]
 8003022:	611a      	str	r2, [r3, #16]
 8003024:	615a      	str	r2, [r3, #20]
 8003026:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003028:	4b2c      	ldr	r3, [pc, #176]	; (80030dc <MX_TIM4_Init+0xd8>)
 800302a:	4a2d      	ldr	r2, [pc, #180]	; (80030e0 <MX_TIM4_Init+0xdc>)
 800302c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800302e:	4b2b      	ldr	r3, [pc, #172]	; (80030dc <MX_TIM4_Init+0xd8>)
 8003030:	2200      	movs	r2, #0
 8003032:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003034:	4b29      	ldr	r3, [pc, #164]	; (80030dc <MX_TIM4_Init+0xd8>)
 8003036:	2200      	movs	r2, #0
 8003038:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800303a:	4b28      	ldr	r3, [pc, #160]	; (80030dc <MX_TIM4_Init+0xd8>)
 800303c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003040:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003042:	4b26      	ldr	r3, [pc, #152]	; (80030dc <MX_TIM4_Init+0xd8>)
 8003044:	2200      	movs	r2, #0
 8003046:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003048:	4b24      	ldr	r3, [pc, #144]	; (80030dc <MX_TIM4_Init+0xd8>)
 800304a:	2200      	movs	r2, #0
 800304c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800304e:	4823      	ldr	r0, [pc, #140]	; (80030dc <MX_TIM4_Init+0xd8>)
 8003050:	f003 fc0b 	bl	800686a <HAL_TIM_PWM_Init>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800305a:	f7ff fcb5 	bl	80029c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800305e:	2300      	movs	r3, #0
 8003060:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003062:	2300      	movs	r3, #0
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003066:	f107 031c 	add.w	r3, r7, #28
 800306a:	4619      	mov	r1, r3
 800306c:	481b      	ldr	r0, [pc, #108]	; (80030dc <MX_TIM4_Init+0xd8>)
 800306e:	f004 fe17 	bl	8007ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8003078:	f7ff fca6 	bl	80029c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800307c:	2360      	movs	r3, #96	; 0x60
 800307e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003080:	2300      	movs	r3, #0
 8003082:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003084:	2300      	movs	r3, #0
 8003086:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003088:	2300      	movs	r3, #0
 800308a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800308c:	463b      	mov	r3, r7
 800308e:	2200      	movs	r2, #0
 8003090:	4619      	mov	r1, r3
 8003092:	4812      	ldr	r0, [pc, #72]	; (80030dc <MX_TIM4_Init+0xd8>)
 8003094:	f003 fe5c 	bl	8006d50 <HAL_TIM_PWM_ConfigChannel>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800309e:	f7ff fc93 	bl	80029c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80030a2:	463b      	mov	r3, r7
 80030a4:	2204      	movs	r2, #4
 80030a6:	4619      	mov	r1, r3
 80030a8:	480c      	ldr	r0, [pc, #48]	; (80030dc <MX_TIM4_Init+0xd8>)
 80030aa:	f003 fe51 	bl	8006d50 <HAL_TIM_PWM_ConfigChannel>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80030b4:	f7ff fc88 	bl	80029c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80030b8:	463b      	mov	r3, r7
 80030ba:	2208      	movs	r2, #8
 80030bc:	4619      	mov	r1, r3
 80030be:	4807      	ldr	r0, [pc, #28]	; (80030dc <MX_TIM4_Init+0xd8>)
 80030c0:	f003 fe46 	bl	8006d50 <HAL_TIM_PWM_ConfigChannel>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80030ca:	f7ff fc7d 	bl	80029c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80030ce:	4803      	ldr	r0, [pc, #12]	; (80030dc <MX_TIM4_Init+0xd8>)
 80030d0:	f000 f8c6 	bl	8003260 <HAL_TIM_MspPostInit>

}
 80030d4:	bf00      	nop
 80030d6:	3728      	adds	r7, #40	; 0x28
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	20000394 	.word	0x20000394
 80030e0:	40000800 	.word	0x40000800

080030e4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030ea:	1d3b      	adds	r3, r7, #4
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80030f4:	4b14      	ldr	r3, [pc, #80]	; (8003148 <MX_TIM6_Init+0x64>)
 80030f6:	4a15      	ldr	r2, [pc, #84]	; (800314c <MX_TIM6_Init+0x68>)
 80030f8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 27;
 80030fa:	4b13      	ldr	r3, [pc, #76]	; (8003148 <MX_TIM6_Init+0x64>)
 80030fc:	221b      	movs	r2, #27
 80030fe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003100:	4b11      	ldr	r3, [pc, #68]	; (8003148 <MX_TIM6_Init+0x64>)
 8003102:	2200      	movs	r2, #0
 8003104:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000;
 8003106:	4b10      	ldr	r3, [pc, #64]	; (8003148 <MX_TIM6_Init+0x64>)
 8003108:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800310c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800310e:	4b0e      	ldr	r3, [pc, #56]	; (8003148 <MX_TIM6_Init+0x64>)
 8003110:	2200      	movs	r2, #0
 8003112:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003114:	480c      	ldr	r0, [pc, #48]	; (8003148 <MX_TIM6_Init+0x64>)
 8003116:	f003 fb51 	bl	80067bc <HAL_TIM_Base_Init>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003120:	f7ff fc52 	bl	80029c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003124:	2300      	movs	r3, #0
 8003126:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003128:	2300      	movs	r3, #0
 800312a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800312c:	1d3b      	adds	r3, r7, #4
 800312e:	4619      	mov	r1, r3
 8003130:	4805      	ldr	r0, [pc, #20]	; (8003148 <MX_TIM6_Init+0x64>)
 8003132:	f004 fdb5 	bl	8007ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800313c:	f7ff fc44 	bl	80029c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003140:	bf00      	nop
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	200003e0 	.word	0x200003e0
 800314c:	40001000 	.word	0x40001000

08003150 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08a      	sub	sp, #40	; 0x28
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003158:	f107 0314 	add.w	r3, r7, #20
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	60da      	str	r2, [r3, #12]
 8003166:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a28      	ldr	r2, [pc, #160]	; (8003210 <HAL_TIM_Base_MspInit+0xc0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d131      	bne.n	80031d6 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003172:	4b28      	ldr	r3, [pc, #160]	; (8003214 <HAL_TIM_Base_MspInit+0xc4>)
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	4a27      	ldr	r2, [pc, #156]	; (8003214 <HAL_TIM_Base_MspInit+0xc4>)
 8003178:	f043 0301 	orr.w	r3, r3, #1
 800317c:	6453      	str	r3, [r2, #68]	; 0x44
 800317e:	4b25      	ldr	r3, [pc, #148]	; (8003214 <HAL_TIM_Base_MspInit+0xc4>)
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	613b      	str	r3, [r7, #16]
 8003188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800318a:	4b22      	ldr	r3, [pc, #136]	; (8003214 <HAL_TIM_Base_MspInit+0xc4>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	4a21      	ldr	r2, [pc, #132]	; (8003214 <HAL_TIM_Base_MspInit+0xc4>)
 8003190:	f043 0310 	orr.w	r3, r3, #16
 8003194:	6313      	str	r3, [r2, #48]	; 0x30
 8003196:	4b1f      	ldr	r3, [pc, #124]	; (8003214 <HAL_TIM_Base_MspInit+0xc4>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	f003 0310 	and.w	r3, r3, #16
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 80031a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a8:	2302      	movs	r3, #2
 80031aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b0:	2300      	movs	r3, #0
 80031b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80031b4:	2301      	movs	r3, #1
 80031b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 80031b8:	f107 0314 	add.w	r3, r7, #20
 80031bc:	4619      	mov	r1, r3
 80031be:	4816      	ldr	r0, [pc, #88]	; (8003218 <HAL_TIM_Base_MspInit+0xc8>)
 80031c0:	f001 fdb2 	bl	8004d28 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80031c4:	2200      	movs	r2, #0
 80031c6:	2100      	movs	r1, #0
 80031c8:	201b      	movs	r0, #27
 80031ca:	f001 fd76 	bl	8004cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80031ce:	201b      	movs	r0, #27
 80031d0:	f001 fd8f 	bl	8004cf2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80031d4:	e018      	b.n	8003208 <HAL_TIM_Base_MspInit+0xb8>
  else if(tim_baseHandle->Instance==TIM6)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a10      	ldr	r2, [pc, #64]	; (800321c <HAL_TIM_Base_MspInit+0xcc>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d113      	bne.n	8003208 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80031e0:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <HAL_TIM_Base_MspInit+0xc4>)
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	4a0b      	ldr	r2, [pc, #44]	; (8003214 <HAL_TIM_Base_MspInit+0xc4>)
 80031e6:	f043 0310 	orr.w	r3, r3, #16
 80031ea:	6413      	str	r3, [r2, #64]	; 0x40
 80031ec:	4b09      	ldr	r3, [pc, #36]	; (8003214 <HAL_TIM_Base_MspInit+0xc4>)
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	f003 0310 	and.w	r3, r3, #16
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80031f8:	2200      	movs	r2, #0
 80031fa:	2100      	movs	r1, #0
 80031fc:	2036      	movs	r0, #54	; 0x36
 80031fe:	f001 fd5c 	bl	8004cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003202:	2036      	movs	r0, #54	; 0x36
 8003204:	f001 fd75 	bl	8004cf2 <HAL_NVIC_EnableIRQ>
}
 8003208:	bf00      	nop
 800320a:	3728      	adds	r7, #40	; 0x28
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40010000 	.word	0x40010000
 8003214:	40023800 	.word	0x40023800
 8003218:	40021000 	.word	0x40021000
 800321c:	40001000 	.word	0x40001000

08003220 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <HAL_TIM_PWM_MspInit+0x38>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d10b      	bne.n	800324a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003232:	4b0a      	ldr	r3, [pc, #40]	; (800325c <HAL_TIM_PWM_MspInit+0x3c>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	4a09      	ldr	r2, [pc, #36]	; (800325c <HAL_TIM_PWM_MspInit+0x3c>)
 8003238:	f043 0304 	orr.w	r3, r3, #4
 800323c:	6413      	str	r3, [r2, #64]	; 0x40
 800323e:	4b07      	ldr	r3, [pc, #28]	; (800325c <HAL_TIM_PWM_MspInit+0x3c>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800324a:	bf00      	nop
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40000800 	.word	0x40000800
 800325c:	40023800 	.word	0x40023800

08003260 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003268:	f107 030c 	add.w	r3, r7, #12
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	60da      	str	r2, [r3, #12]
 8003276:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a11      	ldr	r2, [pc, #68]	; (80032c4 <HAL_TIM_MspPostInit+0x64>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d11c      	bne.n	80032bc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003282:	4b11      	ldr	r3, [pc, #68]	; (80032c8 <HAL_TIM_MspPostInit+0x68>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	4a10      	ldr	r2, [pc, #64]	; (80032c8 <HAL_TIM_MspPostInit+0x68>)
 8003288:	f043 0308 	orr.w	r3, r3, #8
 800328c:	6313      	str	r3, [r2, #48]	; 0x30
 800328e:	4b0e      	ldr	r3, [pc, #56]	; (80032c8 <HAL_TIM_MspPostInit+0x68>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	60bb      	str	r3, [r7, #8]
 8003298:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin;
 800329a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800329e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a0:	2302      	movs	r3, #2
 80032a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a8:	2300      	movs	r3, #0
 80032aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80032ac:	2302      	movs	r3, #2
 80032ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032b0:	f107 030c 	add.w	r3, r7, #12
 80032b4:	4619      	mov	r1, r3
 80032b6:	4805      	ldr	r0, [pc, #20]	; (80032cc <HAL_TIM_MspPostInit+0x6c>)
 80032b8:	f001 fd36 	bl	8004d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80032bc:	bf00      	nop
 80032be:	3720      	adds	r7, #32
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40000800 	.word	0x40000800
 80032c8:	40023800 	.word	0x40023800
 80032cc:	40020c00 	.word	0x40020c00

080032d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80032d4:	4b14      	ldr	r3, [pc, #80]	; (8003328 <MX_USART2_UART_Init+0x58>)
 80032d6:	4a15      	ldr	r2, [pc, #84]	; (800332c <MX_USART2_UART_Init+0x5c>)
 80032d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80032da:	4b13      	ldr	r3, [pc, #76]	; (8003328 <MX_USART2_UART_Init+0x58>)
 80032dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80032e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032e2:	4b11      	ldr	r3, [pc, #68]	; (8003328 <MX_USART2_UART_Init+0x58>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80032e8:	4b0f      	ldr	r3, [pc, #60]	; (8003328 <MX_USART2_UART_Init+0x58>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80032ee:	4b0e      	ldr	r3, [pc, #56]	; (8003328 <MX_USART2_UART_Init+0x58>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032f4:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <MX_USART2_UART_Init+0x58>)
 80032f6:	220c      	movs	r2, #12
 80032f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032fa:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <MX_USART2_UART_Init+0x58>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003300:	4b09      	ldr	r3, [pc, #36]	; (8003328 <MX_USART2_UART_Init+0x58>)
 8003302:	2200      	movs	r2, #0
 8003304:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003306:	4b08      	ldr	r3, [pc, #32]	; (8003328 <MX_USART2_UART_Init+0x58>)
 8003308:	2200      	movs	r2, #0
 800330a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800330c:	4b06      	ldr	r3, [pc, #24]	; (8003328 <MX_USART2_UART_Init+0x58>)
 800330e:	2200      	movs	r2, #0
 8003310:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003312:	4805      	ldr	r0, [pc, #20]	; (8003328 <MX_USART2_UART_Init+0x58>)
 8003314:	f004 fd70 	bl	8007df8 <HAL_UART_Init>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800331e:	f7ff fb53 	bl	80029c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003322:	bf00      	nop
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	2000042c 	.word	0x2000042c
 800332c:	40004400 	.word	0x40004400

08003330 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b0ae      	sub	sp, #184	; 0xb8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003338:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	60da      	str	r2, [r3, #12]
 8003346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003348:	f107 0314 	add.w	r3, r7, #20
 800334c:	2290      	movs	r2, #144	; 0x90
 800334e:	2100      	movs	r1, #0
 8003350:	4618      	mov	r0, r3
 8003352:	f005 fb35 	bl	80089c0 <memset>
  if(uartHandle->Instance==USART2)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a21      	ldr	r2, [pc, #132]	; (80033e0 <HAL_UART_MspInit+0xb0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d13a      	bne.n	80033d6 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003360:	2380      	movs	r3, #128	; 0x80
 8003362:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003364:	2300      	movs	r3, #0
 8003366:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003368:	f107 0314 	add.w	r3, r7, #20
 800336c:	4618      	mov	r0, r3
 800336e:	f002 fbad 	bl	8005acc <HAL_RCCEx_PeriphCLKConfig>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003378:	f7ff fb26 	bl	80029c8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800337c:	4b19      	ldr	r3, [pc, #100]	; (80033e4 <HAL_UART_MspInit+0xb4>)
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	4a18      	ldr	r2, [pc, #96]	; (80033e4 <HAL_UART_MspInit+0xb4>)
 8003382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003386:	6413      	str	r3, [r2, #64]	; 0x40
 8003388:	4b16      	ldr	r3, [pc, #88]	; (80033e4 <HAL_UART_MspInit+0xb4>)
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003394:	4b13      	ldr	r3, [pc, #76]	; (80033e4 <HAL_UART_MspInit+0xb4>)
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003398:	4a12      	ldr	r2, [pc, #72]	; (80033e4 <HAL_UART_MspInit+0xb4>)
 800339a:	f043 0308 	orr.w	r3, r3, #8
 800339e:	6313      	str	r3, [r2, #48]	; 0x30
 80033a0:	4b10      	ldr	r3, [pc, #64]	; (80033e4 <HAL_UART_MspInit+0xb4>)
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80033ac:	2360      	movs	r3, #96	; 0x60
 80033ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b2:	2302      	movs	r3, #2
 80033b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033be:	2303      	movs	r3, #3
 80033c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033c4:	2307      	movs	r3, #7
 80033c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80033ce:	4619      	mov	r1, r3
 80033d0:	4805      	ldr	r0, [pc, #20]	; (80033e8 <HAL_UART_MspInit+0xb8>)
 80033d2:	f001 fca9 	bl	8004d28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80033d6:	bf00      	nop
 80033d8:	37b8      	adds	r7, #184	; 0xb8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40004400 	.word	0x40004400
 80033e4:	40023800 	.word	0x40023800
 80033e8:	40020c00 	.word	0x40020c00

080033ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80033ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003424 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80033f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80033f2:	e003      	b.n	80033fc <LoopCopyDataInit>

080033f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80033f4:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80033f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80033f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80033fa:	3104      	adds	r1, #4

080033fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80033fc:	480b      	ldr	r0, [pc, #44]	; (800342c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80033fe:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003400:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003402:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003404:	d3f6      	bcc.n	80033f4 <CopyDataInit>
  ldr  r2, =_sbss
 8003406:	4a0b      	ldr	r2, [pc, #44]	; (8003434 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003408:	e002      	b.n	8003410 <LoopFillZerobss>

0800340a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800340a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800340c:	f842 3b04 	str.w	r3, [r2], #4

08003410 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003410:	4b09      	ldr	r3, [pc, #36]	; (8003438 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003412:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003414:	d3f9      	bcc.n	800340a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003416:	f7ff fd3b 	bl	8002e90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800341a:	f005 faef 	bl	80089fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800341e:	f7fe fdad 	bl	8001f7c <main>
  bx  lr    
 8003422:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003424:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003428:	08008eec 	.word	0x08008eec
  ldr  r0, =_sdata
 800342c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003430:	20000060 	.word	0x20000060
  ldr  r2, =_sbss
 8003434:	20000060 	.word	0x20000060
  ldr  r3, = _ebss
 8003438:	20000600 	.word	0x20000600

0800343c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800343c:	e7fe      	b.n	800343c <ADC_IRQHandler>

0800343e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003442:	2003      	movs	r0, #3
 8003444:	f001 fc2e 	bl	8004ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003448:	2000      	movs	r0, #0
 800344a:	f000 f805 	bl	8003458 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800344e:	f7ff fc83 	bl	8002d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003460:	4b12      	ldr	r3, [pc, #72]	; (80034ac <HAL_InitTick+0x54>)
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <HAL_InitTick+0x58>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	4619      	mov	r1, r3
 800346a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800346e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003472:	fbb2 f3f3 	udiv	r3, r2, r3
 8003476:	4618      	mov	r0, r3
 8003478:	f001 fc49 	bl	8004d0e <HAL_SYSTICK_Config>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e00e      	b.n	80034a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b0f      	cmp	r3, #15
 800348a:	d80a      	bhi.n	80034a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800348c:	2200      	movs	r2, #0
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	f04f 30ff 	mov.w	r0, #4294967295
 8003494:	f001 fc11 	bl	8004cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003498:	4a06      	ldr	r2, [pc, #24]	; (80034b4 <HAL_InitTick+0x5c>)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	e000      	b.n	80034a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	20000004 	.word	0x20000004
 80034b0:	2000000c 	.word	0x2000000c
 80034b4:	20000008 	.word	0x20000008

080034b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034bc:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <HAL_IncTick+0x20>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	461a      	mov	r2, r3
 80034c2:	4b06      	ldr	r3, [pc, #24]	; (80034dc <HAL_IncTick+0x24>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4413      	add	r3, r2
 80034c8:	4a04      	ldr	r2, [pc, #16]	; (80034dc <HAL_IncTick+0x24>)
 80034ca:	6013      	str	r3, [r2, #0]
}
 80034cc:	bf00      	nop
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	2000000c 	.word	0x2000000c
 80034dc:	200004b4 	.word	0x200004b4

080034e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  return uwTick;
 80034e4:	4b03      	ldr	r3, [pc, #12]	; (80034f4 <HAL_GetTick+0x14>)
 80034e6:	681b      	ldr	r3, [r3, #0]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	200004b4 	.word	0x200004b4

080034f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003500:	f7ff ffee 	bl	80034e0 <HAL_GetTick>
 8003504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003510:	d005      	beq.n	800351e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003512:	4b0a      	ldr	r3, [pc, #40]	; (800353c <HAL_Delay+0x44>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4413      	add	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800351e:	bf00      	nop
 8003520:	f7ff ffde 	bl	80034e0 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	429a      	cmp	r2, r3
 800352e:	d8f7      	bhi.n	8003520 <HAL_Delay+0x28>
  {
  }
}
 8003530:	bf00      	nop
 8003532:	bf00      	nop
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	2000000c 	.word	0x2000000c

08003540 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 8003544:	4b02      	ldr	r3, [pc, #8]	; (8003550 <HAL_GetHalVersion+0x10>)
}
 8003546:	4618      	mov	r0, r3
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	01030000 	.word	0x01030000

08003554 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8003558:	4b03      	ldr	r3, [pc, #12]	; (8003568 <HAL_GetREVID+0x14>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	0c1b      	lsrs	r3, r3, #16
}
 800355e:	4618      	mov	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	e0042000 	.word	0xe0042000

0800356c <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8003570:	4b04      	ldr	r3, [pc, #16]	; (8003584 <HAL_GetDEVID+0x18>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8003578:	4618      	mov	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	e0042000 	.word	0xe0042000

08003588 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800358c:	4b03      	ldr	r3, [pc, #12]	; (800359c <HAL_GetUIDw0+0x14>)
 800358e:	681b      	ldr	r3, [r3, #0]
}
 8003590:	4618      	mov	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	1ff0f420 	.word	0x1ff0f420

080035a0 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80035a4:	4b03      	ldr	r3, [pc, #12]	; (80035b4 <HAL_GetUIDw1+0x14>)
 80035a6:	681b      	ldr	r3, [r3, #0]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	1ff0f424 	.word	0x1ff0f424

080035b8 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80035bc:	4b03      	ldr	r3, [pc, #12]	; (80035cc <HAL_GetUIDw2+0x14>)
 80035be:	681b      	ldr	r3, [r3, #0]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	1ff0f428 	.word	0x1ff0f428

080035d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e031      	b.n	800364a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d109      	bne.n	8003602 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7fe f9d4 	bl	800199c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	f003 0310 	and.w	r3, r3, #16
 800360a:	2b00      	cmp	r3, #0
 800360c:	d116      	bne.n	800363c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003612:	4b10      	ldr	r3, [pc, #64]	; (8003654 <HAL_ADC_Init+0x84>)
 8003614:	4013      	ands	r3, r2
 8003616:	f043 0202 	orr.w	r2, r3, #2
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fb0a 	bl	8003c38 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f023 0303 	bic.w	r3, r3, #3
 8003632:	f043 0201 	orr.w	r2, r3, #1
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	641a      	str	r2, [r3, #64]	; 0x40
 800363a:	e001      	b.n	8003640 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003648:	7bfb      	ldrb	r3, [r7, #15]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	ffffeefd 	.word	0xffffeefd

08003658 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003660:	2300      	movs	r3, #0
 8003662:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800366a:	2b01      	cmp	r3, #1
 800366c:	d101      	bne.n	8003672 <HAL_ADC_Start+0x1a>
 800366e:	2302      	movs	r3, #2
 8003670:	e0ad      	b.n	80037ce <HAL_ADC_Start+0x176>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b01      	cmp	r3, #1
 8003686:	d018      	beq.n	80036ba <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0201 	orr.w	r2, r2, #1
 8003696:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003698:	4b50      	ldr	r3, [pc, #320]	; (80037dc <HAL_ADC_Start+0x184>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a50      	ldr	r2, [pc, #320]	; (80037e0 <HAL_ADC_Start+0x188>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	0c9a      	lsrs	r2, r3, #18
 80036a4:	4613      	mov	r3, r2
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	4413      	add	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80036ac:	e002      	b.n	80036b4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	3b01      	subs	r3, #1
 80036b2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f9      	bne.n	80036ae <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d175      	bne.n	80037b4 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036cc:	4b45      	ldr	r3, [pc, #276]	; (80037e4 <HAL_ADC_Start+0x18c>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d007      	beq.n	80036f6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003702:	d106      	bne.n	8003712 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003708:	f023 0206 	bic.w	r2, r3, #6
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	645a      	str	r2, [r3, #68]	; 0x44
 8003710:	e002      	b.n	8003718 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003728:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800372a:	4b2f      	ldr	r3, [pc, #188]	; (80037e8 <HAL_ADC_Start+0x190>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f003 031f 	and.w	r3, r3, #31
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10f      	bne.n	8003756 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d143      	bne.n	80037cc <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003752:	609a      	str	r2, [r3, #8]
 8003754:	e03a      	b.n	80037cc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a24      	ldr	r2, [pc, #144]	; (80037ec <HAL_ADC_Start+0x194>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d10e      	bne.n	800377e <HAL_ADC_Start+0x126>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d107      	bne.n	800377e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800377c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800377e:	4b1a      	ldr	r3, [pc, #104]	; (80037e8 <HAL_ADC_Start+0x190>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f003 0310 	and.w	r3, r3, #16
 8003786:	2b00      	cmp	r3, #0
 8003788:	d120      	bne.n	80037cc <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a18      	ldr	r2, [pc, #96]	; (80037f0 <HAL_ADC_Start+0x198>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d11b      	bne.n	80037cc <HAL_ADC_Start+0x174>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d114      	bne.n	80037cc <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80037b0:	609a      	str	r2, [r3, #8]
 80037b2:	e00b      	b.n	80037cc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	f043 0210 	orr.w	r2, r3, #16
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c4:	f043 0201 	orr.w	r2, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	20000004 	.word	0x20000004
 80037e0:	431bde83 	.word	0x431bde83
 80037e4:	fffff8fe 	.word	0xfffff8fe
 80037e8:	40012300 	.word	0x40012300
 80037ec:	40012000 	.word	0x40012000
 80037f0:	40012200 	.word	0x40012200

080037f4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <HAL_ADC_Stop+0x16>
 8003806:	2302      	movs	r3, #2
 8003808:	e01f      	b.n	800384a <HAL_ADC_Stop+0x56>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0201 	bic.w	r2, r2, #1
 8003820:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d107      	bne.n	8003840 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003834:	4b08      	ldr	r3, [pc, #32]	; (8003858 <HAL_ADC_Stop+0x64>)
 8003836:	4013      	ands	r3, r2
 8003838:	f043 0201 	orr.w	r2, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	ffffeefe 	.word	0xffffeefe

0800385c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003878:	d113      	bne.n	80038a2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003888:	d10b      	bne.n	80038a2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f043 0220 	orr.w	r2, r3, #32
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e063      	b.n	800396a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80038a2:	f7ff fe1d 	bl	80034e0 <HAL_GetTick>
 80038a6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80038a8:	e021      	b.n	80038ee <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b0:	d01d      	beq.n	80038ee <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d007      	beq.n	80038c8 <HAL_ADC_PollForConversion+0x6c>
 80038b8:	f7ff fe12 	bl	80034e0 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d212      	bcs.n	80038ee <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d00b      	beq.n	80038ee <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	f043 0204 	orr.w	r2, r3, #4
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e03d      	b.n	800396a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d1d6      	bne.n	80038aa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0212 	mvn.w	r2, #18
 8003904:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d123      	bne.n	8003968 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003924:	2b00      	cmp	r3, #0
 8003926:	d11f      	bne.n	8003968 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003932:	2b00      	cmp	r3, #0
 8003934:	d006      	beq.n	8003944 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003940:	2b00      	cmp	r3, #0
 8003942:	d111      	bne.n	8003968 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d105      	bne.n	8003968 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	f043 0201 	orr.w	r2, r3, #1
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003980:	4618      	mov	r0, r3
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x1c>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e136      	b.n	8003c16 <HAL_ADC_ConfigChannel+0x28a>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b09      	cmp	r3, #9
 80039b6:	d93a      	bls.n	8003a2e <HAL_ADC_ConfigChannel+0xa2>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039c0:	d035      	beq.n	8003a2e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68d9      	ldr	r1, [r3, #12]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	461a      	mov	r2, r3
 80039d0:	4613      	mov	r3, r2
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	4413      	add	r3, r2
 80039d6:	3b1e      	subs	r3, #30
 80039d8:	2207      	movs	r2, #7
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	43da      	mvns	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	400a      	ands	r2, r1
 80039e6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a8d      	ldr	r2, [pc, #564]	; (8003c24 <HAL_ADC_ConfigChannel+0x298>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d10a      	bne.n	8003a08 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68d9      	ldr	r1, [r3, #12]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	061a      	lsls	r2, r3, #24
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a06:	e035      	b.n	8003a74 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68d9      	ldr	r1, [r3, #12]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	4618      	mov	r0, r3
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	4403      	add	r3, r0
 8003a20:	3b1e      	subs	r3, #30
 8003a22:	409a      	lsls	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a2c:	e022      	b.n	8003a74 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6919      	ldr	r1, [r3, #16]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	4413      	add	r3, r2
 8003a42:	2207      	movs	r2, #7
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	43da      	mvns	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	400a      	ands	r2, r1
 8003a50:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6919      	ldr	r1, [r3, #16]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	4618      	mov	r0, r3
 8003a64:	4603      	mov	r3, r0
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	4403      	add	r3, r0
 8003a6a:	409a      	lsls	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b06      	cmp	r3, #6
 8003a7a:	d824      	bhi.n	8003ac6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	4613      	mov	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	3b05      	subs	r3, #5
 8003a8e:	221f      	movs	r2, #31
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43da      	mvns	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	400a      	ands	r2, r1
 8003a9c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	4618      	mov	r0, r3
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3b05      	subs	r3, #5
 8003ab8:	fa00 f203 	lsl.w	r2, r0, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	635a      	str	r2, [r3, #52]	; 0x34
 8003ac4:	e04c      	b.n	8003b60 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b0c      	cmp	r3, #12
 8003acc:	d824      	bhi.n	8003b18 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	3b23      	subs	r3, #35	; 0x23
 8003ae0:	221f      	movs	r2, #31
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	43da      	mvns	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	400a      	ands	r2, r1
 8003aee:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	4618      	mov	r0, r3
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	4613      	mov	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4413      	add	r3, r2
 8003b08:	3b23      	subs	r3, #35	; 0x23
 8003b0a:	fa00 f203 	lsl.w	r2, r0, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	631a      	str	r2, [r3, #48]	; 0x30
 8003b16:	e023      	b.n	8003b60 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	3b41      	subs	r3, #65	; 0x41
 8003b2a:	221f      	movs	r2, #31
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	43da      	mvns	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	400a      	ands	r2, r1
 8003b38:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	4618      	mov	r0, r3
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	3b41      	subs	r3, #65	; 0x41
 8003b54:	fa00 f203 	lsl.w	r2, r0, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a30      	ldr	r2, [pc, #192]	; (8003c28 <HAL_ADC_ConfigChannel+0x29c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d10a      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x1f4>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b72:	d105      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003b74:	4b2d      	ldr	r3, [pc, #180]	; (8003c2c <HAL_ADC_ConfigChannel+0x2a0>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	4a2c      	ldr	r2, [pc, #176]	; (8003c2c <HAL_ADC_ConfigChannel+0x2a0>)
 8003b7a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003b7e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a28      	ldr	r2, [pc, #160]	; (8003c28 <HAL_ADC_ConfigChannel+0x29c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d10f      	bne.n	8003baa <HAL_ADC_ConfigChannel+0x21e>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b12      	cmp	r3, #18
 8003b90:	d10b      	bne.n	8003baa <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003b92:	4b26      	ldr	r3, [pc, #152]	; (8003c2c <HAL_ADC_ConfigChannel+0x2a0>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	4a25      	ldr	r2, [pc, #148]	; (8003c2c <HAL_ADC_ConfigChannel+0x2a0>)
 8003b98:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b9c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003b9e:	4b23      	ldr	r3, [pc, #140]	; (8003c2c <HAL_ADC_ConfigChannel+0x2a0>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	4a22      	ldr	r2, [pc, #136]	; (8003c2c <HAL_ADC_ConfigChannel+0x2a0>)
 8003ba4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ba8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a1e      	ldr	r2, [pc, #120]	; (8003c28 <HAL_ADC_ConfigChannel+0x29c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d12b      	bne.n	8003c0c <HAL_ADC_ConfigChannel+0x280>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a1a      	ldr	r2, [pc, #104]	; (8003c24 <HAL_ADC_ConfigChannel+0x298>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d003      	beq.n	8003bc6 <HAL_ADC_ConfigChannel+0x23a>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b11      	cmp	r3, #17
 8003bc4:	d122      	bne.n	8003c0c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003bc6:	4b19      	ldr	r3, [pc, #100]	; (8003c2c <HAL_ADC_ConfigChannel+0x2a0>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	4a18      	ldr	r2, [pc, #96]	; (8003c2c <HAL_ADC_ConfigChannel+0x2a0>)
 8003bcc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003bd0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003bd2:	4b16      	ldr	r3, [pc, #88]	; (8003c2c <HAL_ADC_ConfigChannel+0x2a0>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	4a15      	ldr	r2, [pc, #84]	; (8003c2c <HAL_ADC_ConfigChannel+0x2a0>)
 8003bd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bdc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a10      	ldr	r2, [pc, #64]	; (8003c24 <HAL_ADC_ConfigChannel+0x298>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d111      	bne.n	8003c0c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003be8:	4b11      	ldr	r3, [pc, #68]	; (8003c30 <HAL_ADC_ConfigChannel+0x2a4>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a11      	ldr	r2, [pc, #68]	; (8003c34 <HAL_ADC_ConfigChannel+0x2a8>)
 8003bee:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf2:	0c9a      	lsrs	r2, r3, #18
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003bfe:	e002      	b.n	8003c06 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1f9      	bne.n	8003c00 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	10000012 	.word	0x10000012
 8003c28:	40012000 	.word	0x40012000
 8003c2c:	40012300 	.word	0x40012300
 8003c30:	20000004 	.word	0x20000004
 8003c34:	431bde83 	.word	0x431bde83

08003c38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003c40:	4b78      	ldr	r3, [pc, #480]	; (8003e24 <ADC_Init+0x1ec>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	4a77      	ldr	r2, [pc, #476]	; (8003e24 <ADC_Init+0x1ec>)
 8003c46:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003c4a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003c4c:	4b75      	ldr	r3, [pc, #468]	; (8003e24 <ADC_Init+0x1ec>)
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	4973      	ldr	r1, [pc, #460]	; (8003e24 <ADC_Init+0x1ec>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6859      	ldr	r1, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	021a      	lsls	r2, r3, #8
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6859      	ldr	r1, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6899      	ldr	r1, [r3, #8]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc6:	4a58      	ldr	r2, [pc, #352]	; (8003e28 <ADC_Init+0x1f0>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d022      	beq.n	8003d12 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cda:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6899      	ldr	r1, [r3, #8]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003cfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6899      	ldr	r1, [r3, #8]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	609a      	str	r2, [r3, #8]
 8003d10:	e00f      	b.n	8003d32 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0202 	bic.w	r2, r2, #2
 8003d40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6899      	ldr	r1, [r3, #8]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	005a      	lsls	r2, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d01b      	beq.n	8003d98 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003d7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6859      	ldr	r1, [r3, #4]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	035a      	lsls	r2, r3, #13
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	605a      	str	r2, [r3, #4]
 8003d96:	e007      	b.n	8003da8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003da6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003db6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	051a      	lsls	r2, r3, #20
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ddc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6899      	ldr	r1, [r3, #8]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003dea:	025a      	lsls	r2, r3, #9
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6899      	ldr	r1, [r3, #8]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	029a      	lsls	r2, r3, #10
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	609a      	str	r2, [r3, #8]
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	40012300 	.word	0x40012300
 8003e28:	0f000001 	.word	0x0f000001

08003e2c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e0ed      	b.n	800401a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d102      	bne.n	8003e50 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7fd fe8a 	bl	8001b64 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0201 	orr.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e60:	f7ff fb3e 	bl	80034e0 <HAL_GetTick>
 8003e64:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e66:	e012      	b.n	8003e8e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e68:	f7ff fb3a 	bl	80034e0 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b0a      	cmp	r3, #10
 8003e74:	d90b      	bls.n	8003e8e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2205      	movs	r2, #5
 8003e86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e0c5      	b.n	800401a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0e5      	beq.n	8003e68 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0202 	bic.w	r2, r2, #2
 8003eaa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003eac:	f7ff fb18 	bl	80034e0 <HAL_GetTick>
 8003eb0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003eb2:	e012      	b.n	8003eda <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003eb4:	f7ff fb14 	bl	80034e0 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b0a      	cmp	r3, #10
 8003ec0:	d90b      	bls.n	8003eda <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2205      	movs	r2, #5
 8003ed2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e09f      	b.n	800401a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e5      	bne.n	8003eb4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	7e1b      	ldrb	r3, [r3, #24]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d108      	bne.n	8003f02 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	e007      	b.n	8003f12 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	7e5b      	ldrb	r3, [r3, #25]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d108      	bne.n	8003f2c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	e007      	b.n	8003f3c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	7e9b      	ldrb	r3, [r3, #26]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d108      	bne.n	8003f56 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0220 	orr.w	r2, r2, #32
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	e007      	b.n	8003f66 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0220 	bic.w	r2, r2, #32
 8003f64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	7edb      	ldrb	r3, [r3, #27]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d108      	bne.n	8003f80 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0210 	bic.w	r2, r2, #16
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	e007      	b.n	8003f90 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0210 	orr.w	r2, r2, #16
 8003f8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	7f1b      	ldrb	r3, [r3, #28]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d108      	bne.n	8003faa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0208 	orr.w	r2, r2, #8
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	e007      	b.n	8003fba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0208 	bic.w	r2, r2, #8
 8003fb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	7f5b      	ldrb	r3, [r3, #29]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d108      	bne.n	8003fd4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f042 0204 	orr.w	r2, r2, #4
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	e007      	b.n	8003fe4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0204 	bic.w	r2, r2, #4
 8003fe2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	ea42 0103 	orr.w	r1, r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	1e5a      	subs	r2, r3, #1
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3020 	ldrb.w	r3, [r3, #32]
 800403a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800403c:	7cfb      	ldrb	r3, [r7, #19]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d003      	beq.n	800404a <HAL_CAN_ConfigFilter+0x26>
 8004042:	7cfb      	ldrb	r3, [r7, #19]
 8004044:	2b02      	cmp	r3, #2
 8004046:	f040 80c7 	bne.w	80041d8 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a69      	ldr	r2, [pc, #420]	; (80041f4 <HAL_CAN_ConfigFilter+0x1d0>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d001      	beq.n	8004058 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8004054:	4b68      	ldr	r3, [pc, #416]	; (80041f8 <HAL_CAN_ConfigFilter+0x1d4>)
 8004056:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800405e:	f043 0201 	orr.w	r2, r3, #1
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	4a63      	ldr	r2, [pc, #396]	; (80041f8 <HAL_CAN_ConfigFilter+0x1d4>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d111      	bne.n	8004094 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004076:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	021b      	lsls	r3, r3, #8
 800408c:	431a      	orrs	r2, r3
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	f003 031f 	and.w	r3, r3, #31
 800409c:	2201      	movs	r2, #1
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	43db      	mvns	r3, r3
 80040ae:	401a      	ands	r2, r3
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d123      	bne.n	8004106 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	43db      	mvns	r3, r3
 80040c8:	401a      	ands	r2, r3
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80040e0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	3248      	adds	r2, #72	; 0x48
 80040e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040fa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040fc:	6979      	ldr	r1, [r7, #20]
 80040fe:	3348      	adds	r3, #72	; 0x48
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	440b      	add	r3, r1
 8004104:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d122      	bne.n	8004154 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	431a      	orrs	r2, r3
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800412e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	3248      	adds	r2, #72	; 0x48
 8004134:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004148:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800414a:	6979      	ldr	r1, [r7, #20]
 800414c:	3348      	adds	r3, #72	; 0x48
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	440b      	add	r3, r1
 8004152:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d109      	bne.n	8004170 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	43db      	mvns	r3, r3
 8004166:	401a      	ands	r2, r3
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800416e:	e007      	b.n	8004180 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	431a      	orrs	r2, r3
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d109      	bne.n	800419c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	43db      	mvns	r3, r3
 8004192:	401a      	ands	r2, r3
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800419a:	e007      	b.n	80041ac <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	431a      	orrs	r2, r3
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d107      	bne.n	80041c4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	431a      	orrs	r2, r3
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80041ca:	f023 0201 	bic.w	r2, r3, #1
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80041d4:	2300      	movs	r3, #0
 80041d6:	e006      	b.n	80041e6 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
  }
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	371c      	adds	r7, #28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40003400 	.word	0x40003400
 80041f8:	40006400 	.word	0x40006400

080041fc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 3020 	ldrb.w	r3, [r3, #32]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b01      	cmp	r3, #1
 800420e:	d12e      	bne.n	800426e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004228:	f7ff f95a 	bl	80034e0 <HAL_GetTick>
 800422c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800422e:	e012      	b.n	8004256 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004230:	f7ff f956 	bl	80034e0 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b0a      	cmp	r3, #10
 800423c:	d90b      	bls.n	8004256 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2205      	movs	r2, #5
 800424e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e012      	b.n	800427c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e5      	bne.n	8004230 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	e006      	b.n	800427c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
  }
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004284:	b480      	push	{r7}
 8004286:	b089      	sub	sp, #36	; 0x24
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
 8004290:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004298:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80042a2:	7ffb      	ldrb	r3, [r7, #31]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d003      	beq.n	80042b0 <HAL_CAN_AddTxMessage+0x2c>
 80042a8:	7ffb      	ldrb	r3, [r7, #31]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	f040 80ad 	bne.w	800440a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10a      	bne.n	80042d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d105      	bne.n	80042d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 8095 	beq.w	80043fa <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	0e1b      	lsrs	r3, r3, #24
 80042d4:	f003 0303 	and.w	r3, r3, #3
 80042d8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80042da:	2201      	movs	r2, #1
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	409a      	lsls	r2, r3
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10d      	bne.n	8004308 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80042f6:	68f9      	ldr	r1, [r7, #12]
 80042f8:	6809      	ldr	r1, [r1, #0]
 80042fa:	431a      	orrs	r2, r3
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	3318      	adds	r3, #24
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	440b      	add	r3, r1
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	e00f      	b.n	8004328 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004312:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004318:	68f9      	ldr	r1, [r7, #12]
 800431a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800431c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	3318      	adds	r3, #24
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	440b      	add	r3, r1
 8004326:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6819      	ldr	r1, [r3, #0]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	3318      	adds	r3, #24
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	440b      	add	r3, r1
 8004338:	3304      	adds	r3, #4
 800433a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	7d1b      	ldrb	r3, [r3, #20]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d111      	bne.n	8004368 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	3318      	adds	r3, #24
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	4413      	add	r3, r2
 8004350:	3304      	adds	r3, #4
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	6811      	ldr	r1, [r2, #0]
 8004358:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	3318      	adds	r3, #24
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	440b      	add	r3, r1
 8004364:	3304      	adds	r3, #4
 8004366:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3307      	adds	r3, #7
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	061a      	lsls	r2, r3, #24
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3306      	adds	r3, #6
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	041b      	lsls	r3, r3, #16
 8004378:	431a      	orrs	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3305      	adds	r3, #5
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	021b      	lsls	r3, r3, #8
 8004382:	4313      	orrs	r3, r2
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	3204      	adds	r2, #4
 8004388:	7812      	ldrb	r2, [r2, #0]
 800438a:	4610      	mov	r0, r2
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	6811      	ldr	r1, [r2, #0]
 8004390:	ea43 0200 	orr.w	r2, r3, r0
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	440b      	add	r3, r1
 800439a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800439e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3303      	adds	r3, #3
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	061a      	lsls	r2, r3, #24
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3302      	adds	r3, #2
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	041b      	lsls	r3, r3, #16
 80043b0:	431a      	orrs	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3301      	adds	r3, #1
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	021b      	lsls	r3, r3, #8
 80043ba:	4313      	orrs	r3, r2
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	7812      	ldrb	r2, [r2, #0]
 80043c0:	4610      	mov	r0, r2
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	6811      	ldr	r1, [r2, #0]
 80043c6:	ea43 0200 	orr.w	r2, r3, r0
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	440b      	add	r3, r1
 80043d0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80043d4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	3318      	adds	r3, #24
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	4413      	add	r3, r2
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	6811      	ldr	r1, [r2, #0]
 80043e8:	f043 0201 	orr.w	r2, r3, #1
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	3318      	adds	r3, #24
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	440b      	add	r3, r1
 80043f4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	e00e      	b.n	8004418 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e006      	b.n	8004418 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
  }
}
 8004418:	4618      	mov	r0, r3
 800441a:	3724      	adds	r7, #36	; 0x24
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
 8004430:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004438:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800443a:	7dfb      	ldrb	r3, [r7, #23]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d003      	beq.n	8004448 <HAL_CAN_GetRxMessage+0x24>
 8004440:	7dfb      	ldrb	r3, [r7, #23]
 8004442:	2b02      	cmp	r3, #2
 8004444:	f040 80f3 	bne.w	800462e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10e      	bne.n	800446c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f003 0303 	and.w	r3, r3, #3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d116      	bne.n	800448a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e0e7      	b.n	800463c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d107      	bne.n	800448a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e0d8      	b.n	800463c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	331b      	adds	r3, #27
 8004492:	011b      	lsls	r3, r3, #4
 8004494:	4413      	add	r3, r2
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0204 	and.w	r2, r3, #4
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10c      	bne.n	80044c2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	331b      	adds	r3, #27
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	4413      	add	r3, r2
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	0d5b      	lsrs	r3, r3, #21
 80044b8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	e00b      	b.n	80044da <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	331b      	adds	r3, #27
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	4413      	add	r3, r2
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	08db      	lsrs	r3, r3, #3
 80044d2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	331b      	adds	r3, #27
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	4413      	add	r3, r2
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0202 	and.w	r2, r3, #2
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	331b      	adds	r3, #27
 80044f8:	011b      	lsls	r3, r3, #4
 80044fa:	4413      	add	r3, r2
 80044fc:	3304      	adds	r3, #4
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 020f 	and.w	r2, r3, #15
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	331b      	adds	r3, #27
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	4413      	add	r3, r2
 8004514:	3304      	adds	r3, #4
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	0a1b      	lsrs	r3, r3, #8
 800451a:	b2da      	uxtb	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	331b      	adds	r3, #27
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	4413      	add	r3, r2
 800452c:	3304      	adds	r3, #4
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	0c1b      	lsrs	r3, r3, #16
 8004532:	b29a      	uxth	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	4413      	add	r3, r2
 8004542:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	b2da      	uxtb	r2, r3
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	4413      	add	r3, r2
 8004558:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	0a1a      	lsrs	r2, r3, #8
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	3301      	adds	r3, #1
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	4413      	add	r3, r2
 8004572:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	0c1a      	lsrs	r2, r3, #16
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	3302      	adds	r3, #2
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	011b      	lsls	r3, r3, #4
 800458a:	4413      	add	r3, r2
 800458c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	0e1a      	lsrs	r2, r3, #24
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	3303      	adds	r3, #3
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	011b      	lsls	r3, r3, #4
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	3304      	adds	r3, #4
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	4413      	add	r3, r2
 80045be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	0a1a      	lsrs	r2, r3, #8
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	3305      	adds	r3, #5
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	4413      	add	r3, r2
 80045d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	0c1a      	lsrs	r2, r3, #16
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	3306      	adds	r3, #6
 80045e4:	b2d2      	uxtb	r2, r2
 80045e6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	0e1a      	lsrs	r2, r3, #24
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	3307      	adds	r3, #7
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d108      	bne.n	800461a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0220 	orr.w	r2, r2, #32
 8004616:	60da      	str	r2, [r3, #12]
 8004618:	e007      	b.n	800462a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	691a      	ldr	r2, [r3, #16]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f042 0220 	orr.w	r2, r2, #32
 8004628:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	e006      	b.n	800463c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
  }
}
 800463c:	4618      	mov	r0, r3
 800463e:	371c      	adds	r7, #28
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004658:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800465a:	7bfb      	ldrb	r3, [r7, #15]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d002      	beq.n	8004666 <HAL_CAN_ActivateNotification+0x1e>
 8004660:	7bfb      	ldrb	r3, [r7, #15]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d109      	bne.n	800467a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6959      	ldr	r1, [r3, #20]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004676:	2300      	movs	r3, #0
 8004678:	e006      	b.n	8004688 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
  }
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046a4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80046a6:	7bfb      	ldrb	r3, [r7, #15]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d002      	beq.n	80046b2 <HAL_CAN_DeactivateNotification+0x1e>
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d10a      	bne.n	80046c8 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6959      	ldr	r1, [r3, #20]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	43da      	mvns	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	400a      	ands	r2, r1
 80046c2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	e006      	b.n	80046d6 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
  }
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b08a      	sub	sp, #40	; 0x28
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80046ea:	2300      	movs	r3, #0
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	d07c      	beq.n	8004822 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d023      	beq.n	800477a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2201      	movs	r2, #1
 8004738:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7fc f945 	bl	80009d4 <HAL_CAN_TxMailbox0CompleteCallback>
 800474a:	e016      	b.n	800477a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	f003 0304 	and.w	r3, r3, #4
 8004752:	2b00      	cmp	r3, #0
 8004754:	d004      	beq.n	8004760 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
 800475e:	e00c      	b.n	800477a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b00      	cmp	r3, #0
 8004768:	d004      	beq.n	8004774 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
 8004772:	e002      	b.n	800477a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 f96b 	bl	8004a50 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004780:	2b00      	cmp	r3, #0
 8004782:	d024      	beq.n	80047ce <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f44f 7280 	mov.w	r2, #256	; 0x100
 800478c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7fc f93b 	bl	8000a14 <HAL_CAN_TxMailbox1CompleteCallback>
 800479e:	e016      	b.n	80047ce <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d004      	beq.n	80047b4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047b0:	627b      	str	r3, [r7, #36]	; 0x24
 80047b2:	e00c      	b.n	80047ce <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d004      	beq.n	80047c8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
 80047c6:	e002      	b.n	80047ce <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f94b 	bl	8004a64 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d024      	beq.n	8004822 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80047e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7fc f931 	bl	8000a54 <HAL_CAN_TxMailbox2CompleteCallback>
 80047f2:	e016      	b.n	8004822 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d004      	beq.n	8004808 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004804:	627b      	str	r3, [r7, #36]	; 0x24
 8004806:	e00c      	b.n	8004822 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d004      	beq.n	800481c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004818:	627b      	str	r3, [r7, #36]	; 0x24
 800481a:	e002      	b.n	8004822 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f92b 	bl	8004a78 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00c      	beq.n	8004846 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f003 0310 	and.w	r3, r3, #16
 8004832:	2b00      	cmp	r3, #0
 8004834:	d007      	beq.n	8004846 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800483c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2210      	movs	r2, #16
 8004844:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00b      	beq.n	8004868 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f003 0308 	and.w	r3, r3, #8
 8004856:	2b00      	cmp	r3, #0
 8004858:	d006      	beq.n	8004868 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2208      	movs	r2, #8
 8004860:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f912 	bl	8004a8c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d009      	beq.n	8004886 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f003 0303 	and.w	r3, r3, #3
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7fc f907 	bl	8000a94 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00c      	beq.n	80048aa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f003 0310 	and.w	r3, r3, #16
 8004896:	2b00      	cmp	r3, #0
 8004898:	d007      	beq.n	80048aa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2210      	movs	r2, #16
 80048a8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	f003 0320 	and.w	r3, r3, #32
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00b      	beq.n	80048cc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d006      	beq.n	80048cc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2208      	movs	r2, #8
 80048c4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f8f4 	bl	8004ab4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	f003 0310 	and.w	r3, r3, #16
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d009      	beq.n	80048ea <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	f003 0303 	and.w	r3, r3, #3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f8db 	bl	8004aa0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00b      	beq.n	800490c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	f003 0310 	and.w	r3, r3, #16
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d006      	beq.n	800490c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2210      	movs	r2, #16
 8004904:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f8de 	bl	8004ac8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800490c:	6a3b      	ldr	r3, [r7, #32]
 800490e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00b      	beq.n	800492e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b00      	cmp	r3, #0
 800491e:	d006      	beq.n	800492e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2208      	movs	r2, #8
 8004926:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f8d7 	bl	8004adc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d07b      	beq.n	8004a30 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	f003 0304 	and.w	r3, r3, #4
 800493e:	2b00      	cmp	r3, #0
 8004940:	d072      	beq.n	8004a28 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004948:	2b00      	cmp	r3, #0
 800494a:	d008      	beq.n	800495e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	f043 0301 	orr.w	r3, r3, #1
 800495c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004964:	2b00      	cmp	r3, #0
 8004966:	d008      	beq.n	800497a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	f043 0302 	orr.w	r3, r3, #2
 8004978:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004980:	2b00      	cmp	r3, #0
 8004982:	d008      	beq.n	8004996 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	f043 0304 	orr.w	r3, r3, #4
 8004994:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800499c:	2b00      	cmp	r3, #0
 800499e:	d043      	beq.n	8004a28 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d03e      	beq.n	8004a28 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049b0:	2b60      	cmp	r3, #96	; 0x60
 80049b2:	d02b      	beq.n	8004a0c <HAL_CAN_IRQHandler+0x32a>
 80049b4:	2b60      	cmp	r3, #96	; 0x60
 80049b6:	d82e      	bhi.n	8004a16 <HAL_CAN_IRQHandler+0x334>
 80049b8:	2b50      	cmp	r3, #80	; 0x50
 80049ba:	d022      	beq.n	8004a02 <HAL_CAN_IRQHandler+0x320>
 80049bc:	2b50      	cmp	r3, #80	; 0x50
 80049be:	d82a      	bhi.n	8004a16 <HAL_CAN_IRQHandler+0x334>
 80049c0:	2b40      	cmp	r3, #64	; 0x40
 80049c2:	d019      	beq.n	80049f8 <HAL_CAN_IRQHandler+0x316>
 80049c4:	2b40      	cmp	r3, #64	; 0x40
 80049c6:	d826      	bhi.n	8004a16 <HAL_CAN_IRQHandler+0x334>
 80049c8:	2b30      	cmp	r3, #48	; 0x30
 80049ca:	d010      	beq.n	80049ee <HAL_CAN_IRQHandler+0x30c>
 80049cc:	2b30      	cmp	r3, #48	; 0x30
 80049ce:	d822      	bhi.n	8004a16 <HAL_CAN_IRQHandler+0x334>
 80049d0:	2b10      	cmp	r3, #16
 80049d2:	d002      	beq.n	80049da <HAL_CAN_IRQHandler+0x2f8>
 80049d4:	2b20      	cmp	r3, #32
 80049d6:	d005      	beq.n	80049e4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80049d8:	e01d      	b.n	8004a16 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80049da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049dc:	f043 0308 	orr.w	r3, r3, #8
 80049e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049e2:	e019      	b.n	8004a18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	f043 0310 	orr.w	r3, r3, #16
 80049ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049ec:	e014      	b.n	8004a18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	f043 0320 	orr.w	r3, r3, #32
 80049f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049f6:	e00f      	b.n	8004a18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a00:	e00a      	b.n	8004a18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a0a:	e005      	b.n	8004a18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a14:	e000      	b.n	8004a18 <HAL_CAN_IRQHandler+0x336>
            break;
 8004a16:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699a      	ldr	r2, [r3, #24]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004a26:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2204      	movs	r2, #4
 8004a2e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d008      	beq.n	8004a48 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f854 	bl	8004af0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004a48:	bf00      	nop
 8004a4a:	3728      	adds	r7, #40	; 0x28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b14:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <__NVIC_SetPriorityGrouping+0x40>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b20:	4013      	ands	r3, r2
 8004b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b2c:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <__NVIC_SetPriorityGrouping+0x44>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b32:	4a04      	ldr	r2, [pc, #16]	; (8004b44 <__NVIC_SetPriorityGrouping+0x40>)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	60d3      	str	r3, [r2, #12]
}
 8004b38:	bf00      	nop
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	e000ed00 	.word	0xe000ed00
 8004b48:	05fa0000 	.word	0x05fa0000

08004b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b50:	4b04      	ldr	r3, [pc, #16]	; (8004b64 <__NVIC_GetPriorityGrouping+0x18>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	0a1b      	lsrs	r3, r3, #8
 8004b56:	f003 0307 	and.w	r3, r3, #7
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	e000ed00 	.word	0xe000ed00

08004b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	4603      	mov	r3, r0
 8004b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	db0b      	blt.n	8004b92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b7a:	79fb      	ldrb	r3, [r7, #7]
 8004b7c:	f003 021f 	and.w	r2, r3, #31
 8004b80:	4907      	ldr	r1, [pc, #28]	; (8004ba0 <__NVIC_EnableIRQ+0x38>)
 8004b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b86:	095b      	lsrs	r3, r3, #5
 8004b88:	2001      	movs	r0, #1
 8004b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	e000e100 	.word	0xe000e100

08004ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	4603      	mov	r3, r0
 8004bac:	6039      	str	r1, [r7, #0]
 8004bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	db0a      	blt.n	8004bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	490c      	ldr	r1, [pc, #48]	; (8004bf0 <__NVIC_SetPriority+0x4c>)
 8004bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc2:	0112      	lsls	r2, r2, #4
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bcc:	e00a      	b.n	8004be4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	4908      	ldr	r1, [pc, #32]	; (8004bf4 <__NVIC_SetPriority+0x50>)
 8004bd4:	79fb      	ldrb	r3, [r7, #7]
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	3b04      	subs	r3, #4
 8004bdc:	0112      	lsls	r2, r2, #4
 8004bde:	b2d2      	uxtb	r2, r2
 8004be0:	440b      	add	r3, r1
 8004be2:	761a      	strb	r2, [r3, #24]
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	e000e100 	.word	0xe000e100
 8004bf4:	e000ed00 	.word	0xe000ed00

08004bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b089      	sub	sp, #36	; 0x24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	f1c3 0307 	rsb	r3, r3, #7
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	bf28      	it	cs
 8004c16:	2304      	movcs	r3, #4
 8004c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	2b06      	cmp	r3, #6
 8004c20:	d902      	bls.n	8004c28 <NVIC_EncodePriority+0x30>
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	3b03      	subs	r3, #3
 8004c26:	e000      	b.n	8004c2a <NVIC_EncodePriority+0x32>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	fa02 f303 	lsl.w	r3, r2, r3
 8004c36:	43da      	mvns	r2, r3
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	401a      	ands	r2, r3
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c40:	f04f 31ff 	mov.w	r1, #4294967295
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4a:	43d9      	mvns	r1, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c50:	4313      	orrs	r3, r2
         );
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3724      	adds	r7, #36	; 0x24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
	...

08004c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c70:	d301      	bcc.n	8004c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c72:	2301      	movs	r3, #1
 8004c74:	e00f      	b.n	8004c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c76:	4a0a      	ldr	r2, [pc, #40]	; (8004ca0 <SysTick_Config+0x40>)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c7e:	210f      	movs	r1, #15
 8004c80:	f04f 30ff 	mov.w	r0, #4294967295
 8004c84:	f7ff ff8e 	bl	8004ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c88:	4b05      	ldr	r3, [pc, #20]	; (8004ca0 <SysTick_Config+0x40>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c8e:	4b04      	ldr	r3, [pc, #16]	; (8004ca0 <SysTick_Config+0x40>)
 8004c90:	2207      	movs	r2, #7
 8004c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	e000e010 	.word	0xe000e010

08004ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7ff ff29 	bl	8004b04 <__NVIC_SetPriorityGrouping>
}
 8004cb2:	bf00      	nop
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b086      	sub	sp, #24
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	607a      	str	r2, [r7, #4]
 8004cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ccc:	f7ff ff3e 	bl	8004b4c <__NVIC_GetPriorityGrouping>
 8004cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	68b9      	ldr	r1, [r7, #8]
 8004cd6:	6978      	ldr	r0, [r7, #20]
 8004cd8:	f7ff ff8e 	bl	8004bf8 <NVIC_EncodePriority>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff ff5d 	bl	8004ba4 <__NVIC_SetPriority>
}
 8004cea:	bf00      	nop
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b082      	sub	sp, #8
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff ff31 	bl	8004b68 <__NVIC_EnableIRQ>
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b082      	sub	sp, #8
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7ff ffa2 	bl	8004c60 <SysTick_Config>
 8004d1c:	4603      	mov	r3, r0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
	...

08004d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b089      	sub	sp, #36	; 0x24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004d36:	2300      	movs	r3, #0
 8004d38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004d42:	2300      	movs	r3, #0
 8004d44:	61fb      	str	r3, [r7, #28]
 8004d46:	e175      	b.n	8005034 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004d48:	2201      	movs	r2, #1
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	4013      	ands	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	f040 8164 	bne.w	800502e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d005      	beq.n	8004d7e <HAL_GPIO_Init+0x56>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d130      	bne.n	8004de0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	2203      	movs	r2, #3
 8004d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8e:	43db      	mvns	r3, r3
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	4013      	ands	r3, r2
 8004d94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	68da      	ldr	r2, [r3, #12]
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	005b      	lsls	r3, r3, #1
 8004d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	69ba      	ldr	r2, [r7, #24]
 8004dac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004db4:	2201      	movs	r2, #1
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbc:	43db      	mvns	r3, r3
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	091b      	lsrs	r3, r3, #4
 8004dca:	f003 0201 	and.w	r2, r3, #1
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f003 0303 	and.w	r3, r3, #3
 8004de8:	2b03      	cmp	r3, #3
 8004dea:	d017      	beq.n	8004e1c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	2203      	movs	r2, #3
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	4013      	ands	r3, r2
 8004e02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f003 0303 	and.w	r3, r3, #3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d123      	bne.n	8004e70 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	08da      	lsrs	r2, r3, #3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	3208      	adds	r2, #8
 8004e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	f003 0307 	and.w	r3, r3, #7
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	220f      	movs	r2, #15
 8004e40:	fa02 f303 	lsl.w	r3, r2, r3
 8004e44:	43db      	mvns	r3, r3
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	08da      	lsrs	r2, r3, #3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	3208      	adds	r2, #8
 8004e6a:	69b9      	ldr	r1, [r7, #24]
 8004e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	2203      	movs	r2, #3
 8004e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e80:	43db      	mvns	r3, r3
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	4013      	ands	r3, r2
 8004e86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f003 0203 	and.w	r2, r3, #3
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 80be 	beq.w	800502e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eb2:	4b66      	ldr	r3, [pc, #408]	; (800504c <HAL_GPIO_Init+0x324>)
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb6:	4a65      	ldr	r2, [pc, #404]	; (800504c <HAL_GPIO_Init+0x324>)
 8004eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8004ebe:	4b63      	ldr	r3, [pc, #396]	; (800504c <HAL_GPIO_Init+0x324>)
 8004ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004eca:	4a61      	ldr	r2, [pc, #388]	; (8005050 <HAL_GPIO_Init+0x328>)
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	089b      	lsrs	r3, r3, #2
 8004ed0:	3302      	adds	r3, #2
 8004ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	220f      	movs	r2, #15
 8004ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee6:	43db      	mvns	r3, r3
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	4013      	ands	r3, r2
 8004eec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a58      	ldr	r2, [pc, #352]	; (8005054 <HAL_GPIO_Init+0x32c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d037      	beq.n	8004f66 <HAL_GPIO_Init+0x23e>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a57      	ldr	r2, [pc, #348]	; (8005058 <HAL_GPIO_Init+0x330>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d031      	beq.n	8004f62 <HAL_GPIO_Init+0x23a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a56      	ldr	r2, [pc, #344]	; (800505c <HAL_GPIO_Init+0x334>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d02b      	beq.n	8004f5e <HAL_GPIO_Init+0x236>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a55      	ldr	r2, [pc, #340]	; (8005060 <HAL_GPIO_Init+0x338>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d025      	beq.n	8004f5a <HAL_GPIO_Init+0x232>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a54      	ldr	r2, [pc, #336]	; (8005064 <HAL_GPIO_Init+0x33c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d01f      	beq.n	8004f56 <HAL_GPIO_Init+0x22e>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a53      	ldr	r2, [pc, #332]	; (8005068 <HAL_GPIO_Init+0x340>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d019      	beq.n	8004f52 <HAL_GPIO_Init+0x22a>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a52      	ldr	r2, [pc, #328]	; (800506c <HAL_GPIO_Init+0x344>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d013      	beq.n	8004f4e <HAL_GPIO_Init+0x226>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a51      	ldr	r2, [pc, #324]	; (8005070 <HAL_GPIO_Init+0x348>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d00d      	beq.n	8004f4a <HAL_GPIO_Init+0x222>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a50      	ldr	r2, [pc, #320]	; (8005074 <HAL_GPIO_Init+0x34c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d007      	beq.n	8004f46 <HAL_GPIO_Init+0x21e>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a4f      	ldr	r2, [pc, #316]	; (8005078 <HAL_GPIO_Init+0x350>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d101      	bne.n	8004f42 <HAL_GPIO_Init+0x21a>
 8004f3e:	2309      	movs	r3, #9
 8004f40:	e012      	b.n	8004f68 <HAL_GPIO_Init+0x240>
 8004f42:	230a      	movs	r3, #10
 8004f44:	e010      	b.n	8004f68 <HAL_GPIO_Init+0x240>
 8004f46:	2308      	movs	r3, #8
 8004f48:	e00e      	b.n	8004f68 <HAL_GPIO_Init+0x240>
 8004f4a:	2307      	movs	r3, #7
 8004f4c:	e00c      	b.n	8004f68 <HAL_GPIO_Init+0x240>
 8004f4e:	2306      	movs	r3, #6
 8004f50:	e00a      	b.n	8004f68 <HAL_GPIO_Init+0x240>
 8004f52:	2305      	movs	r3, #5
 8004f54:	e008      	b.n	8004f68 <HAL_GPIO_Init+0x240>
 8004f56:	2304      	movs	r3, #4
 8004f58:	e006      	b.n	8004f68 <HAL_GPIO_Init+0x240>
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e004      	b.n	8004f68 <HAL_GPIO_Init+0x240>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	e002      	b.n	8004f68 <HAL_GPIO_Init+0x240>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <HAL_GPIO_Init+0x240>
 8004f66:	2300      	movs	r3, #0
 8004f68:	69fa      	ldr	r2, [r7, #28]
 8004f6a:	f002 0203 	and.w	r2, r2, #3
 8004f6e:	0092      	lsls	r2, r2, #2
 8004f70:	4093      	lsls	r3, r2
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004f78:	4935      	ldr	r1, [pc, #212]	; (8005050 <HAL_GPIO_Init+0x328>)
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	089b      	lsrs	r3, r3, #2
 8004f7e:	3302      	adds	r3, #2
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f86:	4b3d      	ldr	r3, [pc, #244]	; (800507c <HAL_GPIO_Init+0x354>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	43db      	mvns	r3, r3
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	4013      	ands	r3, r2
 8004f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004faa:	4a34      	ldr	r2, [pc, #208]	; (800507c <HAL_GPIO_Init+0x354>)
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fb0:	4b32      	ldr	r3, [pc, #200]	; (800507c <HAL_GPIO_Init+0x354>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	43db      	mvns	r3, r3
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fd4:	4a29      	ldr	r2, [pc, #164]	; (800507c <HAL_GPIO_Init+0x354>)
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004fda:	4b28      	ldr	r3, [pc, #160]	; (800507c <HAL_GPIO_Init+0x354>)
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	43db      	mvns	r3, r3
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ffe:	4a1f      	ldr	r2, [pc, #124]	; (800507c <HAL_GPIO_Init+0x354>)
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005004:	4b1d      	ldr	r3, [pc, #116]	; (800507c <HAL_GPIO_Init+0x354>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	43db      	mvns	r3, r3
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	4013      	ands	r3, r2
 8005012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	4313      	orrs	r3, r2
 8005026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005028:	4a14      	ldr	r2, [pc, #80]	; (800507c <HAL_GPIO_Init+0x354>)
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	3301      	adds	r3, #1
 8005032:	61fb      	str	r3, [r7, #28]
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	2b0f      	cmp	r3, #15
 8005038:	f67f ae86 	bls.w	8004d48 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800503c:	bf00      	nop
 800503e:	bf00      	nop
 8005040:	3724      	adds	r7, #36	; 0x24
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40023800 	.word	0x40023800
 8005050:	40013800 	.word	0x40013800
 8005054:	40020000 	.word	0x40020000
 8005058:	40020400 	.word	0x40020400
 800505c:	40020800 	.word	0x40020800
 8005060:	40020c00 	.word	0x40020c00
 8005064:	40021000 	.word	0x40021000
 8005068:	40021400 	.word	0x40021400
 800506c:	40021800 	.word	0x40021800
 8005070:	40021c00 	.word	0x40021c00
 8005074:	40022000 	.word	0x40022000
 8005078:	40022400 	.word	0x40022400
 800507c:	40013c00 	.word	0x40013c00

08005080 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	460b      	mov	r3, r1
 800508a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691a      	ldr	r2, [r3, #16]
 8005090:	887b      	ldrh	r3, [r7, #2]
 8005092:	4013      	ands	r3, r2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005098:	2301      	movs	r3, #1
 800509a:	73fb      	strb	r3, [r7, #15]
 800509c:	e001      	b.n	80050a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800509e:	2300      	movs	r3, #0
 80050a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	460b      	mov	r3, r1
 80050ba:	807b      	strh	r3, [r7, #2]
 80050bc:	4613      	mov	r3, r2
 80050be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050c0:	787b      	ldrb	r3, [r7, #1]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050c6:	887a      	ldrh	r2, [r7, #2]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80050cc:	e003      	b.n	80050d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80050ce:	887b      	ldrh	r3, [r7, #2]
 80050d0:	041a      	lsls	r2, r3, #16
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	619a      	str	r2, [r3, #24]
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
	...

080050e4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80050e4:	b480      	push	{r7}
 80050e6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050e8:	4b05      	ldr	r3, [pc, #20]	; (8005100 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a04      	ldr	r2, [pc, #16]	; (8005100 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80050ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050f2:	6013      	str	r3, [r2, #0]
}
 80050f4:	bf00      	nop
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40007000 	.word	0x40007000

08005104 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800510a:	2300      	movs	r3, #0
 800510c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800510e:	4b23      	ldr	r3, [pc, #140]	; (800519c <HAL_PWREx_EnableOverDrive+0x98>)
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	4a22      	ldr	r2, [pc, #136]	; (800519c <HAL_PWREx_EnableOverDrive+0x98>)
 8005114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005118:	6413      	str	r3, [r2, #64]	; 0x40
 800511a:	4b20      	ldr	r3, [pc, #128]	; (800519c <HAL_PWREx_EnableOverDrive+0x98>)
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005122:	603b      	str	r3, [r7, #0]
 8005124:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005126:	4b1e      	ldr	r3, [pc, #120]	; (80051a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a1d      	ldr	r2, [pc, #116]	; (80051a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800512c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005130:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005132:	f7fe f9d5 	bl	80034e0 <HAL_GetTick>
 8005136:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005138:	e009      	b.n	800514e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800513a:	f7fe f9d1 	bl	80034e0 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005148:	d901      	bls.n	800514e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e022      	b.n	8005194 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800514e:	4b14      	ldr	r3, [pc, #80]	; (80051a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800515a:	d1ee      	bne.n	800513a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800515c:	4b10      	ldr	r3, [pc, #64]	; (80051a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a0f      	ldr	r2, [pc, #60]	; (80051a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005166:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005168:	f7fe f9ba 	bl	80034e0 <HAL_GetTick>
 800516c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800516e:	e009      	b.n	8005184 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005170:	f7fe f9b6 	bl	80034e0 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800517e:	d901      	bls.n	8005184 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e007      	b.n	8005194 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005184:	4b06      	ldr	r3, [pc, #24]	; (80051a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005190:	d1ee      	bne.n	8005170 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3708      	adds	r7, #8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	40023800 	.word	0x40023800
 80051a0:	40007000 	.word	0x40007000

080051a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80051ac:	2300      	movs	r3, #0
 80051ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e29b      	b.n	80056f2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 8087 	beq.w	80052d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051c8:	4b96      	ldr	r3, [pc, #600]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f003 030c 	and.w	r3, r3, #12
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d00c      	beq.n	80051ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051d4:	4b93      	ldr	r3, [pc, #588]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f003 030c 	and.w	r3, r3, #12
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d112      	bne.n	8005206 <HAL_RCC_OscConfig+0x62>
 80051e0:	4b90      	ldr	r3, [pc, #576]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051ec:	d10b      	bne.n	8005206 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051ee:	4b8d      	ldr	r3, [pc, #564]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d06c      	beq.n	80052d4 <HAL_RCC_OscConfig+0x130>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d168      	bne.n	80052d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e275      	b.n	80056f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800520e:	d106      	bne.n	800521e <HAL_RCC_OscConfig+0x7a>
 8005210:	4b84      	ldr	r3, [pc, #528]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a83      	ldr	r2, [pc, #524]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 8005216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800521a:	6013      	str	r3, [r2, #0]
 800521c:	e02e      	b.n	800527c <HAL_RCC_OscConfig+0xd8>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10c      	bne.n	8005240 <HAL_RCC_OscConfig+0x9c>
 8005226:	4b7f      	ldr	r3, [pc, #508]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a7e      	ldr	r2, [pc, #504]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 800522c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	4b7c      	ldr	r3, [pc, #496]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a7b      	ldr	r2, [pc, #492]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 8005238:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	e01d      	b.n	800527c <HAL_RCC_OscConfig+0xd8>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005248:	d10c      	bne.n	8005264 <HAL_RCC_OscConfig+0xc0>
 800524a:	4b76      	ldr	r3, [pc, #472]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a75      	ldr	r2, [pc, #468]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 8005250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005254:	6013      	str	r3, [r2, #0]
 8005256:	4b73      	ldr	r3, [pc, #460]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a72      	ldr	r2, [pc, #456]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 800525c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	e00b      	b.n	800527c <HAL_RCC_OscConfig+0xd8>
 8005264:	4b6f      	ldr	r3, [pc, #444]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a6e      	ldr	r2, [pc, #440]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 800526a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800526e:	6013      	str	r3, [r2, #0]
 8005270:	4b6c      	ldr	r3, [pc, #432]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a6b      	ldr	r2, [pc, #428]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 8005276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800527a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d013      	beq.n	80052ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005284:	f7fe f92c 	bl	80034e0 <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800528c:	f7fe f928 	bl	80034e0 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b64      	cmp	r3, #100	; 0x64
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e229      	b.n	80056f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800529e:	4b61      	ldr	r3, [pc, #388]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0f0      	beq.n	800528c <HAL_RCC_OscConfig+0xe8>
 80052aa:	e014      	b.n	80052d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ac:	f7fe f918 	bl	80034e0 <HAL_GetTick>
 80052b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052b2:	e008      	b.n	80052c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052b4:	f7fe f914 	bl	80034e0 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b64      	cmp	r3, #100	; 0x64
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e215      	b.n	80056f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052c6:	4b57      	ldr	r3, [pc, #348]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1f0      	bne.n	80052b4 <HAL_RCC_OscConfig+0x110>
 80052d2:	e000      	b.n	80052d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d069      	beq.n	80053b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052e2:	4b50      	ldr	r3, [pc, #320]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f003 030c 	and.w	r3, r3, #12
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00b      	beq.n	8005306 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052ee:	4b4d      	ldr	r3, [pc, #308]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f003 030c 	and.w	r3, r3, #12
 80052f6:	2b08      	cmp	r3, #8
 80052f8:	d11c      	bne.n	8005334 <HAL_RCC_OscConfig+0x190>
 80052fa:	4b4a      	ldr	r3, [pc, #296]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d116      	bne.n	8005334 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005306:	4b47      	ldr	r3, [pc, #284]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d005      	beq.n	800531e <HAL_RCC_OscConfig+0x17a>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d001      	beq.n	800531e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e1e9      	b.n	80056f2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800531e:	4b41      	ldr	r3, [pc, #260]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	493d      	ldr	r1, [pc, #244]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 800532e:	4313      	orrs	r3, r2
 8005330:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005332:	e040      	b.n	80053b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d023      	beq.n	8005384 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800533c:	4b39      	ldr	r3, [pc, #228]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a38      	ldr	r2, [pc, #224]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 8005342:	f043 0301 	orr.w	r3, r3, #1
 8005346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005348:	f7fe f8ca 	bl	80034e0 <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005350:	f7fe f8c6 	bl	80034e0 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e1c7      	b.n	80056f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005362:	4b30      	ldr	r3, [pc, #192]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0f0      	beq.n	8005350 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800536e:	4b2d      	ldr	r3, [pc, #180]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	4929      	ldr	r1, [pc, #164]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 800537e:	4313      	orrs	r3, r2
 8005380:	600b      	str	r3, [r1, #0]
 8005382:	e018      	b.n	80053b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005384:	4b27      	ldr	r3, [pc, #156]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a26      	ldr	r2, [pc, #152]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 800538a:	f023 0301 	bic.w	r3, r3, #1
 800538e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005390:	f7fe f8a6 	bl	80034e0 <HAL_GetTick>
 8005394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005396:	e008      	b.n	80053aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005398:	f7fe f8a2 	bl	80034e0 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e1a3      	b.n	80056f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053aa:	4b1e      	ldr	r3, [pc, #120]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1f0      	bne.n	8005398 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0308 	and.w	r3, r3, #8
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d038      	beq.n	8005434 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d019      	beq.n	80053fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053ca:	4b16      	ldr	r3, [pc, #88]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 80053cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ce:	4a15      	ldr	r2, [pc, #84]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 80053d0:	f043 0301 	orr.w	r3, r3, #1
 80053d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d6:	f7fe f883 	bl	80034e0 <HAL_GetTick>
 80053da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053dc:	e008      	b.n	80053f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053de:	f7fe f87f 	bl	80034e0 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d901      	bls.n	80053f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e180      	b.n	80056f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053f0:	4b0c      	ldr	r3, [pc, #48]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 80053f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0f0      	beq.n	80053de <HAL_RCC_OscConfig+0x23a>
 80053fc:	e01a      	b.n	8005434 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053fe:	4b09      	ldr	r3, [pc, #36]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 8005400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005402:	4a08      	ldr	r2, [pc, #32]	; (8005424 <HAL_RCC_OscConfig+0x280>)
 8005404:	f023 0301 	bic.w	r3, r3, #1
 8005408:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800540a:	f7fe f869 	bl	80034e0 <HAL_GetTick>
 800540e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005410:	e00a      	b.n	8005428 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005412:	f7fe f865 	bl	80034e0 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d903      	bls.n	8005428 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e166      	b.n	80056f2 <HAL_RCC_OscConfig+0x54e>
 8005424:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005428:	4b92      	ldr	r3, [pc, #584]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 800542a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1ee      	bne.n	8005412 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	2b00      	cmp	r3, #0
 800543e:	f000 80a4 	beq.w	800558a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005442:	4b8c      	ldr	r3, [pc, #560]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10d      	bne.n	800546a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800544e:	4b89      	ldr	r3, [pc, #548]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	4a88      	ldr	r2, [pc, #544]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 8005454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005458:	6413      	str	r3, [r2, #64]	; 0x40
 800545a:	4b86      	ldr	r3, [pc, #536]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005462:	60bb      	str	r3, [r7, #8]
 8005464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005466:	2301      	movs	r3, #1
 8005468:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800546a:	4b83      	ldr	r3, [pc, #524]	; (8005678 <HAL_RCC_OscConfig+0x4d4>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005472:	2b00      	cmp	r3, #0
 8005474:	d118      	bne.n	80054a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005476:	4b80      	ldr	r3, [pc, #512]	; (8005678 <HAL_RCC_OscConfig+0x4d4>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a7f      	ldr	r2, [pc, #508]	; (8005678 <HAL_RCC_OscConfig+0x4d4>)
 800547c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005482:	f7fe f82d 	bl	80034e0 <HAL_GetTick>
 8005486:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005488:	e008      	b.n	800549c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800548a:	f7fe f829 	bl	80034e0 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b64      	cmp	r3, #100	; 0x64
 8005496:	d901      	bls.n	800549c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e12a      	b.n	80056f2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800549c:	4b76      	ldr	r3, [pc, #472]	; (8005678 <HAL_RCC_OscConfig+0x4d4>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d0f0      	beq.n	800548a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d106      	bne.n	80054be <HAL_RCC_OscConfig+0x31a>
 80054b0:	4b70      	ldr	r3, [pc, #448]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 80054b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b4:	4a6f      	ldr	r2, [pc, #444]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 80054b6:	f043 0301 	orr.w	r3, r3, #1
 80054ba:	6713      	str	r3, [r2, #112]	; 0x70
 80054bc:	e02d      	b.n	800551a <HAL_RCC_OscConfig+0x376>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10c      	bne.n	80054e0 <HAL_RCC_OscConfig+0x33c>
 80054c6:	4b6b      	ldr	r3, [pc, #428]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 80054c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ca:	4a6a      	ldr	r2, [pc, #424]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 80054cc:	f023 0301 	bic.w	r3, r3, #1
 80054d0:	6713      	str	r3, [r2, #112]	; 0x70
 80054d2:	4b68      	ldr	r3, [pc, #416]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 80054d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d6:	4a67      	ldr	r2, [pc, #412]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 80054d8:	f023 0304 	bic.w	r3, r3, #4
 80054dc:	6713      	str	r3, [r2, #112]	; 0x70
 80054de:	e01c      	b.n	800551a <HAL_RCC_OscConfig+0x376>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	2b05      	cmp	r3, #5
 80054e6:	d10c      	bne.n	8005502 <HAL_RCC_OscConfig+0x35e>
 80054e8:	4b62      	ldr	r3, [pc, #392]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 80054ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ec:	4a61      	ldr	r2, [pc, #388]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 80054ee:	f043 0304 	orr.w	r3, r3, #4
 80054f2:	6713      	str	r3, [r2, #112]	; 0x70
 80054f4:	4b5f      	ldr	r3, [pc, #380]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 80054f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f8:	4a5e      	ldr	r2, [pc, #376]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 80054fa:	f043 0301 	orr.w	r3, r3, #1
 80054fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005500:	e00b      	b.n	800551a <HAL_RCC_OscConfig+0x376>
 8005502:	4b5c      	ldr	r3, [pc, #368]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 8005504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005506:	4a5b      	ldr	r2, [pc, #364]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 8005508:	f023 0301 	bic.w	r3, r3, #1
 800550c:	6713      	str	r3, [r2, #112]	; 0x70
 800550e:	4b59      	ldr	r3, [pc, #356]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 8005510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005512:	4a58      	ldr	r2, [pc, #352]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 8005514:	f023 0304 	bic.w	r3, r3, #4
 8005518:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d015      	beq.n	800554e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005522:	f7fd ffdd 	bl	80034e0 <HAL_GetTick>
 8005526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005528:	e00a      	b.n	8005540 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800552a:	f7fd ffd9 	bl	80034e0 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	f241 3288 	movw	r2, #5000	; 0x1388
 8005538:	4293      	cmp	r3, r2
 800553a:	d901      	bls.n	8005540 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e0d8      	b.n	80056f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005540:	4b4c      	ldr	r3, [pc, #304]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 8005542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0ee      	beq.n	800552a <HAL_RCC_OscConfig+0x386>
 800554c:	e014      	b.n	8005578 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800554e:	f7fd ffc7 	bl	80034e0 <HAL_GetTick>
 8005552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005554:	e00a      	b.n	800556c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005556:	f7fd ffc3 	bl	80034e0 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	f241 3288 	movw	r2, #5000	; 0x1388
 8005564:	4293      	cmp	r3, r2
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e0c2      	b.n	80056f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800556c:	4b41      	ldr	r3, [pc, #260]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 800556e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1ee      	bne.n	8005556 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005578:	7dfb      	ldrb	r3, [r7, #23]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d105      	bne.n	800558a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800557e:	4b3d      	ldr	r3, [pc, #244]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 8005580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005582:	4a3c      	ldr	r2, [pc, #240]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 8005584:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005588:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 80ae 	beq.w	80056f0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005594:	4b37      	ldr	r3, [pc, #220]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f003 030c 	and.w	r3, r3, #12
 800559c:	2b08      	cmp	r3, #8
 800559e:	d06d      	beq.n	800567c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d14b      	bne.n	8005640 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055a8:	4b32      	ldr	r3, [pc, #200]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a31      	ldr	r2, [pc, #196]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 80055ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b4:	f7fd ff94 	bl	80034e0 <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ba:	e008      	b.n	80055ce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055bc:	f7fd ff90 	bl	80034e0 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e091      	b.n	80056f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ce:	4b29      	ldr	r3, [pc, #164]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1f0      	bne.n	80055bc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	69da      	ldr	r2, [r3, #28]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	431a      	orrs	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	019b      	lsls	r3, r3, #6
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f0:	085b      	lsrs	r3, r3, #1
 80055f2:	3b01      	subs	r3, #1
 80055f4:	041b      	lsls	r3, r3, #16
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fc:	061b      	lsls	r3, r3, #24
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005604:	071b      	lsls	r3, r3, #28
 8005606:	491b      	ldr	r1, [pc, #108]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 8005608:	4313      	orrs	r3, r2
 800560a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800560c:	4b19      	ldr	r3, [pc, #100]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a18      	ldr	r2, [pc, #96]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 8005612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005618:	f7fd ff62 	bl	80034e0 <HAL_GetTick>
 800561c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800561e:	e008      	b.n	8005632 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005620:	f7fd ff5e 	bl	80034e0 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b02      	cmp	r3, #2
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e05f      	b.n	80056f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005632:	4b10      	ldr	r3, [pc, #64]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d0f0      	beq.n	8005620 <HAL_RCC_OscConfig+0x47c>
 800563e:	e057      	b.n	80056f0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005640:	4b0c      	ldr	r3, [pc, #48]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a0b      	ldr	r2, [pc, #44]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 8005646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800564a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800564c:	f7fd ff48 	bl	80034e0 <HAL_GetTick>
 8005650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005652:	e008      	b.n	8005666 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005654:	f7fd ff44 	bl	80034e0 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b02      	cmp	r3, #2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e045      	b.n	80056f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005666:	4b03      	ldr	r3, [pc, #12]	; (8005674 <HAL_RCC_OscConfig+0x4d0>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1f0      	bne.n	8005654 <HAL_RCC_OscConfig+0x4b0>
 8005672:	e03d      	b.n	80056f0 <HAL_RCC_OscConfig+0x54c>
 8005674:	40023800 	.word	0x40023800
 8005678:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800567c:	4b1f      	ldr	r3, [pc, #124]	; (80056fc <HAL_RCC_OscConfig+0x558>)
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d030      	beq.n	80056ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005694:	429a      	cmp	r2, r3
 8005696:	d129      	bne.n	80056ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d122      	bne.n	80056ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056ac:	4013      	ands	r3, r2
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d119      	bne.n	80056ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c2:	085b      	lsrs	r3, r3, #1
 80056c4:	3b01      	subs	r3, #1
 80056c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d10f      	bne.n	80056ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80056d8:	429a      	cmp	r2, r3
 80056da:	d107      	bne.n	80056ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d001      	beq.n	80056f0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e000      	b.n	80056f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3718      	adds	r7, #24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40023800 	.word	0x40023800

08005700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800570a:	2300      	movs	r3, #0
 800570c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e0d0      	b.n	80058ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005718:	4b6a      	ldr	r3, [pc, #424]	; (80058c4 <HAL_RCC_ClockConfig+0x1c4>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 030f 	and.w	r3, r3, #15
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	429a      	cmp	r2, r3
 8005724:	d910      	bls.n	8005748 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005726:	4b67      	ldr	r3, [pc, #412]	; (80058c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f023 020f 	bic.w	r2, r3, #15
 800572e:	4965      	ldr	r1, [pc, #404]	; (80058c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	4313      	orrs	r3, r2
 8005734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005736:	4b63      	ldr	r3, [pc, #396]	; (80058c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 030f 	and.w	r3, r3, #15
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	429a      	cmp	r2, r3
 8005742:	d001      	beq.n	8005748 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e0b8      	b.n	80058ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d020      	beq.n	8005796 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0304 	and.w	r3, r3, #4
 800575c:	2b00      	cmp	r3, #0
 800575e:	d005      	beq.n	800576c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005760:	4b59      	ldr	r3, [pc, #356]	; (80058c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	4a58      	ldr	r2, [pc, #352]	; (80058c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005766:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800576a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0308 	and.w	r3, r3, #8
 8005774:	2b00      	cmp	r3, #0
 8005776:	d005      	beq.n	8005784 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005778:	4b53      	ldr	r3, [pc, #332]	; (80058c8 <HAL_RCC_ClockConfig+0x1c8>)
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	4a52      	ldr	r2, [pc, #328]	; (80058c8 <HAL_RCC_ClockConfig+0x1c8>)
 800577e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005782:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005784:	4b50      	ldr	r3, [pc, #320]	; (80058c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	494d      	ldr	r1, [pc, #308]	; (80058c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005792:	4313      	orrs	r3, r2
 8005794:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d040      	beq.n	8005824 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d107      	bne.n	80057ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057aa:	4b47      	ldr	r3, [pc, #284]	; (80058c8 <HAL_RCC_ClockConfig+0x1c8>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d115      	bne.n	80057e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e07f      	b.n	80058ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d107      	bne.n	80057d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057c2:	4b41      	ldr	r3, [pc, #260]	; (80058c8 <HAL_RCC_ClockConfig+0x1c8>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d109      	bne.n	80057e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e073      	b.n	80058ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057d2:	4b3d      	ldr	r3, [pc, #244]	; (80058c8 <HAL_RCC_ClockConfig+0x1c8>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e06b      	b.n	80058ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057e2:	4b39      	ldr	r3, [pc, #228]	; (80058c8 <HAL_RCC_ClockConfig+0x1c8>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f023 0203 	bic.w	r2, r3, #3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	4936      	ldr	r1, [pc, #216]	; (80058c8 <HAL_RCC_ClockConfig+0x1c8>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057f4:	f7fd fe74 	bl	80034e0 <HAL_GetTick>
 80057f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057fa:	e00a      	b.n	8005812 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057fc:	f7fd fe70 	bl	80034e0 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	f241 3288 	movw	r2, #5000	; 0x1388
 800580a:	4293      	cmp	r3, r2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e053      	b.n	80058ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005812:	4b2d      	ldr	r3, [pc, #180]	; (80058c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 020c 	and.w	r2, r3, #12
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	429a      	cmp	r2, r3
 8005822:	d1eb      	bne.n	80057fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005824:	4b27      	ldr	r3, [pc, #156]	; (80058c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 030f 	and.w	r3, r3, #15
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	429a      	cmp	r2, r3
 8005830:	d210      	bcs.n	8005854 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005832:	4b24      	ldr	r3, [pc, #144]	; (80058c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f023 020f 	bic.w	r2, r3, #15
 800583a:	4922      	ldr	r1, [pc, #136]	; (80058c4 <HAL_RCC_ClockConfig+0x1c4>)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	4313      	orrs	r3, r2
 8005840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005842:	4b20      	ldr	r3, [pc, #128]	; (80058c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 030f 	and.w	r3, r3, #15
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	429a      	cmp	r2, r3
 800584e:	d001      	beq.n	8005854 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e032      	b.n	80058ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b00      	cmp	r3, #0
 800585e:	d008      	beq.n	8005872 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005860:	4b19      	ldr	r3, [pc, #100]	; (80058c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	4916      	ldr	r1, [pc, #88]	; (80058c8 <HAL_RCC_ClockConfig+0x1c8>)
 800586e:	4313      	orrs	r3, r2
 8005870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0308 	and.w	r3, r3, #8
 800587a:	2b00      	cmp	r3, #0
 800587c:	d009      	beq.n	8005892 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800587e:	4b12      	ldr	r3, [pc, #72]	; (80058c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	490e      	ldr	r1, [pc, #56]	; (80058c8 <HAL_RCC_ClockConfig+0x1c8>)
 800588e:	4313      	orrs	r3, r2
 8005890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005892:	f000 f821 	bl	80058d8 <HAL_RCC_GetSysClockFreq>
 8005896:	4602      	mov	r2, r0
 8005898:	4b0b      	ldr	r3, [pc, #44]	; (80058c8 <HAL_RCC_ClockConfig+0x1c8>)
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	091b      	lsrs	r3, r3, #4
 800589e:	f003 030f 	and.w	r3, r3, #15
 80058a2:	490a      	ldr	r1, [pc, #40]	; (80058cc <HAL_RCC_ClockConfig+0x1cc>)
 80058a4:	5ccb      	ldrb	r3, [r1, r3]
 80058a6:	fa22 f303 	lsr.w	r3, r2, r3
 80058aa:	4a09      	ldr	r2, [pc, #36]	; (80058d0 <HAL_RCC_ClockConfig+0x1d0>)
 80058ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80058ae:	4b09      	ldr	r3, [pc, #36]	; (80058d4 <HAL_RCC_ClockConfig+0x1d4>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fd fdd0 	bl	8003458 <HAL_InitTick>

  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	40023c00 	.word	0x40023c00
 80058c8:	40023800 	.word	0x40023800
 80058cc:	08008e9c 	.word	0x08008e9c
 80058d0:	20000004 	.word	0x20000004
 80058d4:	20000008 	.word	0x20000008

080058d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058dc:	b090      	sub	sp, #64	; 0x40
 80058de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80058e0:	2300      	movs	r3, #0
 80058e2:	637b      	str	r3, [r7, #52]	; 0x34
 80058e4:	2300      	movs	r3, #0
 80058e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058e8:	2300      	movs	r3, #0
 80058ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80058ec:	2300      	movs	r3, #0
 80058ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058f0:	4b59      	ldr	r3, [pc, #356]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x180>)
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f003 030c 	and.w	r3, r3, #12
 80058f8:	2b08      	cmp	r3, #8
 80058fa:	d00d      	beq.n	8005918 <HAL_RCC_GetSysClockFreq+0x40>
 80058fc:	2b08      	cmp	r3, #8
 80058fe:	f200 80a1 	bhi.w	8005a44 <HAL_RCC_GetSysClockFreq+0x16c>
 8005902:	2b00      	cmp	r3, #0
 8005904:	d002      	beq.n	800590c <HAL_RCC_GetSysClockFreq+0x34>
 8005906:	2b04      	cmp	r3, #4
 8005908:	d003      	beq.n	8005912 <HAL_RCC_GetSysClockFreq+0x3a>
 800590a:	e09b      	b.n	8005a44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800590c:	4b53      	ldr	r3, [pc, #332]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x184>)
 800590e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005910:	e09b      	b.n	8005a4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005912:	4b53      	ldr	r3, [pc, #332]	; (8005a60 <HAL_RCC_GetSysClockFreq+0x188>)
 8005914:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005916:	e098      	b.n	8005a4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005918:	4b4f      	ldr	r3, [pc, #316]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x180>)
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005920:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005922:	4b4d      	ldr	r3, [pc, #308]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x180>)
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d028      	beq.n	8005980 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800592e:	4b4a      	ldr	r3, [pc, #296]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x180>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	099b      	lsrs	r3, r3, #6
 8005934:	2200      	movs	r2, #0
 8005936:	623b      	str	r3, [r7, #32]
 8005938:	627a      	str	r2, [r7, #36]	; 0x24
 800593a:	6a3b      	ldr	r3, [r7, #32]
 800593c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005940:	2100      	movs	r1, #0
 8005942:	4b47      	ldr	r3, [pc, #284]	; (8005a60 <HAL_RCC_GetSysClockFreq+0x188>)
 8005944:	fb03 f201 	mul.w	r2, r3, r1
 8005948:	2300      	movs	r3, #0
 800594a:	fb00 f303 	mul.w	r3, r0, r3
 800594e:	4413      	add	r3, r2
 8005950:	4a43      	ldr	r2, [pc, #268]	; (8005a60 <HAL_RCC_GetSysClockFreq+0x188>)
 8005952:	fba0 1202 	umull	r1, r2, r0, r2
 8005956:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005958:	460a      	mov	r2, r1
 800595a:	62ba      	str	r2, [r7, #40]	; 0x28
 800595c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800595e:	4413      	add	r3, r2
 8005960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005964:	2200      	movs	r2, #0
 8005966:	61bb      	str	r3, [r7, #24]
 8005968:	61fa      	str	r2, [r7, #28]
 800596a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800596e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005972:	f7fa fc69 	bl	8000248 <__aeabi_uldivmod>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4613      	mov	r3, r2
 800597c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800597e:	e053      	b.n	8005a28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005980:	4b35      	ldr	r3, [pc, #212]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x180>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	099b      	lsrs	r3, r3, #6
 8005986:	2200      	movs	r2, #0
 8005988:	613b      	str	r3, [r7, #16]
 800598a:	617a      	str	r2, [r7, #20]
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005992:	f04f 0b00 	mov.w	fp, #0
 8005996:	4652      	mov	r2, sl
 8005998:	465b      	mov	r3, fp
 800599a:	f04f 0000 	mov.w	r0, #0
 800599e:	f04f 0100 	mov.w	r1, #0
 80059a2:	0159      	lsls	r1, r3, #5
 80059a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059a8:	0150      	lsls	r0, r2, #5
 80059aa:	4602      	mov	r2, r0
 80059ac:	460b      	mov	r3, r1
 80059ae:	ebb2 080a 	subs.w	r8, r2, sl
 80059b2:	eb63 090b 	sbc.w	r9, r3, fp
 80059b6:	f04f 0200 	mov.w	r2, #0
 80059ba:	f04f 0300 	mov.w	r3, #0
 80059be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80059c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80059c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80059ca:	ebb2 0408 	subs.w	r4, r2, r8
 80059ce:	eb63 0509 	sbc.w	r5, r3, r9
 80059d2:	f04f 0200 	mov.w	r2, #0
 80059d6:	f04f 0300 	mov.w	r3, #0
 80059da:	00eb      	lsls	r3, r5, #3
 80059dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059e0:	00e2      	lsls	r2, r4, #3
 80059e2:	4614      	mov	r4, r2
 80059e4:	461d      	mov	r5, r3
 80059e6:	eb14 030a 	adds.w	r3, r4, sl
 80059ea:	603b      	str	r3, [r7, #0]
 80059ec:	eb45 030b 	adc.w	r3, r5, fp
 80059f0:	607b      	str	r3, [r7, #4]
 80059f2:	f04f 0200 	mov.w	r2, #0
 80059f6:	f04f 0300 	mov.w	r3, #0
 80059fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059fe:	4629      	mov	r1, r5
 8005a00:	028b      	lsls	r3, r1, #10
 8005a02:	4621      	mov	r1, r4
 8005a04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a08:	4621      	mov	r1, r4
 8005a0a:	028a      	lsls	r2, r1, #10
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	4619      	mov	r1, r3
 8005a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a12:	2200      	movs	r2, #0
 8005a14:	60bb      	str	r3, [r7, #8]
 8005a16:	60fa      	str	r2, [r7, #12]
 8005a18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a1c:	f7fa fc14 	bl	8000248 <__aeabi_uldivmod>
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	4613      	mov	r3, r2
 8005a26:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005a28:	4b0b      	ldr	r3, [pc, #44]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	0c1b      	lsrs	r3, r3, #16
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	3301      	adds	r3, #1
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8005a38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a42:	e002      	b.n	8005a4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a44:	4b05      	ldr	r3, [pc, #20]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x184>)
 8005a46:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3740      	adds	r7, #64	; 0x40
 8005a50:	46bd      	mov	sp, r7
 8005a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a56:	bf00      	nop
 8005a58:	40023800 	.word	0x40023800
 8005a5c:	00f42400 	.word	0x00f42400
 8005a60:	017d7840 	.word	0x017d7840

08005a64 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a64:	b480      	push	{r7}
 8005a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a68:	4b03      	ldr	r3, [pc, #12]	; (8005a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	20000004 	.word	0x20000004

08005a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a80:	f7ff fff0 	bl	8005a64 <HAL_RCC_GetHCLKFreq>
 8005a84:	4602      	mov	r2, r0
 8005a86:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	0a9b      	lsrs	r3, r3, #10
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	4903      	ldr	r1, [pc, #12]	; (8005aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a92:	5ccb      	ldrb	r3, [r1, r3]
 8005a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	40023800 	.word	0x40023800
 8005aa0:	08008eac 	.word	0x08008eac

08005aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005aa8:	f7ff ffdc 	bl	8005a64 <HAL_RCC_GetHCLKFreq>
 8005aac:	4602      	mov	r2, r0
 8005aae:	4b05      	ldr	r3, [pc, #20]	; (8005ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	0b5b      	lsrs	r3, r3, #13
 8005ab4:	f003 0307 	and.w	r3, r3, #7
 8005ab8:	4903      	ldr	r1, [pc, #12]	; (8005ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005aba:	5ccb      	ldrb	r3, [r1, r3]
 8005abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40023800 	.word	0x40023800
 8005ac8:	08008eac 	.word	0x08008eac

08005acc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b088      	sub	sp, #32
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005adc:	2300      	movs	r3, #0
 8005ade:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d012      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005af4:	4b69      	ldr	r3, [pc, #420]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	4a68      	ldr	r2, [pc, #416]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005afa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005afe:	6093      	str	r3, [r2, #8]
 8005b00:	4b66      	ldr	r3, [pc, #408]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b02:	689a      	ldr	r2, [r3, #8]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b08:	4964      	ldr	r1, [pc, #400]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005b16:	2301      	movs	r3, #1
 8005b18:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d017      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b26:	4b5d      	ldr	r3, [pc, #372]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b34:	4959      	ldr	r1, [pc, #356]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b44:	d101      	bne.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005b46:	2301      	movs	r3, #1
 8005b48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005b52:	2301      	movs	r3, #1
 8005b54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d017      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005b62:	4b4e      	ldr	r3, [pc, #312]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b68:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b70:	494a      	ldr	r1, [pc, #296]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b80:	d101      	bne.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005b82:	2301      	movs	r3, #1
 8005b84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0320 	and.w	r3, r3, #32
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 808b 	beq.w	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bb0:	4b3a      	ldr	r3, [pc, #232]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb4:	4a39      	ldr	r2, [pc, #228]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bba:	6413      	str	r3, [r2, #64]	; 0x40
 8005bbc:	4b37      	ldr	r3, [pc, #220]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bc4:	60bb      	str	r3, [r7, #8]
 8005bc6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005bc8:	4b35      	ldr	r3, [pc, #212]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a34      	ldr	r2, [pc, #208]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bd4:	f7fd fc84 	bl	80034e0 <HAL_GetTick>
 8005bd8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005bda:	e008      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bdc:	f7fd fc80 	bl	80034e0 <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	2b64      	cmp	r3, #100	; 0x64
 8005be8:	d901      	bls.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e38f      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005bee:	4b2c      	ldr	r3, [pc, #176]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d0f0      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005bfa:	4b28      	ldr	r3, [pc, #160]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c02:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d035      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d02e      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c18:	4b20      	ldr	r3, [pc, #128]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c20:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c22:	4b1e      	ldr	r3, [pc, #120]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c26:	4a1d      	ldr	r2, [pc, #116]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c2c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c2e:	4b1b      	ldr	r3, [pc, #108]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c32:	4a1a      	ldr	r2, [pc, #104]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c38:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005c3a:	4a18      	ldr	r2, [pc, #96]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c40:	4b16      	ldr	r3, [pc, #88]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d114      	bne.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c4c:	f7fd fc48 	bl	80034e0 <HAL_GetTick>
 8005c50:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c52:	e00a      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c54:	f7fd fc44 	bl	80034e0 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e351      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c6a:	4b0c      	ldr	r3, [pc, #48]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0ee      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c82:	d111      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005c84:	4b05      	ldr	r3, [pc, #20]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005c90:	4b04      	ldr	r3, [pc, #16]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c92:	400b      	ands	r3, r1
 8005c94:	4901      	ldr	r1, [pc, #4]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	608b      	str	r3, [r1, #8]
 8005c9a:	e00b      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005c9c:	40023800 	.word	0x40023800
 8005ca0:	40007000 	.word	0x40007000
 8005ca4:	0ffffcff 	.word	0x0ffffcff
 8005ca8:	4bac      	ldr	r3, [pc, #688]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	4aab      	ldr	r2, [pc, #684]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005cb2:	6093      	str	r3, [r2, #8]
 8005cb4:	4ba9      	ldr	r3, [pc, #676]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cc0:	49a6      	ldr	r1, [pc, #664]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0310 	and.w	r3, r3, #16
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d010      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005cd2:	4ba2      	ldr	r3, [pc, #648]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cd8:	4aa0      	ldr	r2, [pc, #640]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cde:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005ce2:	4b9e      	ldr	r3, [pc, #632]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ce4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cec:	499b      	ldr	r1, [pc, #620]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00a      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d00:	4b96      	ldr	r3, [pc, #600]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d0e:	4993      	ldr	r1, [pc, #588]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00a      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d22:	4b8e      	ldr	r3, [pc, #568]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d30:	498a      	ldr	r1, [pc, #552]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00a      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d44:	4b85      	ldr	r3, [pc, #532]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d52:	4982      	ldr	r1, [pc, #520]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00a      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d66:	4b7d      	ldr	r3, [pc, #500]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d74:	4979      	ldr	r1, [pc, #484]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00a      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d88:	4b74      	ldr	r3, [pc, #464]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d8e:	f023 0203 	bic.w	r2, r3, #3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d96:	4971      	ldr	r1, [pc, #452]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00a      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005daa:	4b6c      	ldr	r3, [pc, #432]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db0:	f023 020c 	bic.w	r2, r3, #12
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005db8:	4968      	ldr	r1, [pc, #416]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00a      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005dcc:	4b63      	ldr	r3, [pc, #396]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dda:	4960      	ldr	r1, [pc, #384]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005dee:	4b5b      	ldr	r3, [pc, #364]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dfc:	4957      	ldr	r1, [pc, #348]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00a      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e10:	4b52      	ldr	r3, [pc, #328]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e1e:	494f      	ldr	r1, [pc, #316]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00a      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005e32:	4b4a      	ldr	r3, [pc, #296]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e38:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e40:	4946      	ldr	r1, [pc, #280]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00a      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005e54:	4b41      	ldr	r3, [pc, #260]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e5a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e62:	493e      	ldr	r1, [pc, #248]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005e76:	4b39      	ldr	r3, [pc, #228]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e84:	4935      	ldr	r1, [pc, #212]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00a      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e98:	4b30      	ldr	r3, [pc, #192]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e9e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ea6:	492d      	ldr	r1, [pc, #180]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d011      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005eba:	4b28      	ldr	r3, [pc, #160]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ec8:	4924      	ldr	r1, [pc, #144]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ed4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ed8:	d101      	bne.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005eda:	2301      	movs	r3, #1
 8005edc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0308 	and.w	r3, r3, #8
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005eea:	2301      	movs	r3, #1
 8005eec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00a      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005efa:	4b18      	ldr	r3, [pc, #96]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f00:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f08:	4914      	ldr	r1, [pc, #80]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00b      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005f1c:	4b0f      	ldr	r3, [pc, #60]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f22:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f2c:	490b      	ldr	r1, [pc, #44]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00f      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005f40:	4b06      	ldr	r3, [pc, #24]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f46:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f50:	4902      	ldr	r1, [pc, #8]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005f58:	e002      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005f5a:	bf00      	nop
 8005f5c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00b      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f6c:	4b8a      	ldr	r3, [pc, #552]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f72:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7c:	4986      	ldr	r1, [pc, #536]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00b      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005f90:	4b81      	ldr	r3, [pc, #516]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f96:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fa0:	497d      	ldr	r1, [pc, #500]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d006      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f000 80d6 	beq.w	8006168 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005fbc:	4b76      	ldr	r3, [pc, #472]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a75      	ldr	r2, [pc, #468]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005fc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fc8:	f7fd fa8a 	bl	80034e0 <HAL_GetTick>
 8005fcc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fce:	e008      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005fd0:	f7fd fa86 	bl	80034e0 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b64      	cmp	r3, #100	; 0x64
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e195      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fe2:	4b6d      	ldr	r3, [pc, #436]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1f0      	bne.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d021      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d11d      	bne.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006002:	4b65      	ldr	r3, [pc, #404]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006008:	0c1b      	lsrs	r3, r3, #16
 800600a:	f003 0303 	and.w	r3, r3, #3
 800600e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006010:	4b61      	ldr	r3, [pc, #388]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006016:	0e1b      	lsrs	r3, r3, #24
 8006018:	f003 030f 	and.w	r3, r3, #15
 800601c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	019a      	lsls	r2, r3, #6
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	041b      	lsls	r3, r3, #16
 8006028:	431a      	orrs	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	061b      	lsls	r3, r3, #24
 800602e:	431a      	orrs	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	071b      	lsls	r3, r3, #28
 8006036:	4958      	ldr	r1, [pc, #352]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006038:	4313      	orrs	r3, r2
 800603a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d004      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006052:	d00a      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800605c:	2b00      	cmp	r3, #0
 800605e:	d02e      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006064:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006068:	d129      	bne.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800606a:	4b4b      	ldr	r3, [pc, #300]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800606c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006070:	0c1b      	lsrs	r3, r3, #16
 8006072:	f003 0303 	and.w	r3, r3, #3
 8006076:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006078:	4b47      	ldr	r3, [pc, #284]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800607a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800607e:	0f1b      	lsrs	r3, r3, #28
 8006080:	f003 0307 	and.w	r3, r3, #7
 8006084:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	019a      	lsls	r2, r3, #6
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	041b      	lsls	r3, r3, #16
 8006090:	431a      	orrs	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	061b      	lsls	r3, r3, #24
 8006098:	431a      	orrs	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	071b      	lsls	r3, r3, #28
 800609e:	493e      	ldr	r1, [pc, #248]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80060a6:	4b3c      	ldr	r3, [pc, #240]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ac:	f023 021f 	bic.w	r2, r3, #31
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b4:	3b01      	subs	r3, #1
 80060b6:	4938      	ldr	r1, [pc, #224]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d01d      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80060ca:	4b33      	ldr	r3, [pc, #204]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060d0:	0e1b      	lsrs	r3, r3, #24
 80060d2:	f003 030f 	and.w	r3, r3, #15
 80060d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80060d8:	4b2f      	ldr	r3, [pc, #188]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060de:	0f1b      	lsrs	r3, r3, #28
 80060e0:	f003 0307 	and.w	r3, r3, #7
 80060e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	019a      	lsls	r2, r3, #6
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	041b      	lsls	r3, r3, #16
 80060f2:	431a      	orrs	r2, r3
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	061b      	lsls	r3, r3, #24
 80060f8:	431a      	orrs	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	071b      	lsls	r3, r3, #28
 80060fe:	4926      	ldr	r1, [pc, #152]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006100:	4313      	orrs	r3, r2
 8006102:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d011      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	019a      	lsls	r2, r3, #6
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	041b      	lsls	r3, r3, #16
 800611e:	431a      	orrs	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	061b      	lsls	r3, r3, #24
 8006126:	431a      	orrs	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	071b      	lsls	r3, r3, #28
 800612e:	491a      	ldr	r1, [pc, #104]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006130:	4313      	orrs	r3, r2
 8006132:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006136:	4b18      	ldr	r3, [pc, #96]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a17      	ldr	r2, [pc, #92]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800613c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006140:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006142:	f7fd f9cd 	bl	80034e0 <HAL_GetTick>
 8006146:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006148:	e008      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800614a:	f7fd f9c9 	bl	80034e0 <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	2b64      	cmp	r3, #100	; 0x64
 8006156:	d901      	bls.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e0d8      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800615c:	4b0e      	ldr	r3, [pc, #56]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d0f0      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	2b01      	cmp	r3, #1
 800616c:	f040 80ce 	bne.w	800630c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006170:	4b09      	ldr	r3, [pc, #36]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a08      	ldr	r2, [pc, #32]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800617a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800617c:	f7fd f9b0 	bl	80034e0 <HAL_GetTick>
 8006180:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006182:	e00b      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006184:	f7fd f9ac 	bl	80034e0 <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	2b64      	cmp	r3, #100	; 0x64
 8006190:	d904      	bls.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e0bb      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006196:	bf00      	nop
 8006198:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800619c:	4b5e      	ldr	r3, [pc, #376]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061a8:	d0ec      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d003      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d009      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d02e      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d12a      	bne.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80061d2:	4b51      	ldr	r3, [pc, #324]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d8:	0c1b      	lsrs	r3, r3, #16
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80061e0:	4b4d      	ldr	r3, [pc, #308]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e6:	0f1b      	lsrs	r3, r3, #28
 80061e8:	f003 0307 	and.w	r3, r3, #7
 80061ec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	019a      	lsls	r2, r3, #6
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	041b      	lsls	r3, r3, #16
 80061f8:	431a      	orrs	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	061b      	lsls	r3, r3, #24
 8006200:	431a      	orrs	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	071b      	lsls	r3, r3, #28
 8006206:	4944      	ldr	r1, [pc, #272]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006208:	4313      	orrs	r3, r2
 800620a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800620e:	4b42      	ldr	r3, [pc, #264]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006214:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621c:	3b01      	subs	r3, #1
 800621e:	021b      	lsls	r3, r3, #8
 8006220:	493d      	ldr	r1, [pc, #244]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006222:	4313      	orrs	r3, r2
 8006224:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d022      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006238:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800623c:	d11d      	bne.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800623e:	4b36      	ldr	r3, [pc, #216]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006244:	0e1b      	lsrs	r3, r3, #24
 8006246:	f003 030f 	and.w	r3, r3, #15
 800624a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800624c:	4b32      	ldr	r3, [pc, #200]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800624e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006252:	0f1b      	lsrs	r3, r3, #28
 8006254:	f003 0307 	and.w	r3, r3, #7
 8006258:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	019a      	lsls	r2, r3, #6
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a1b      	ldr	r3, [r3, #32]
 8006264:	041b      	lsls	r3, r3, #16
 8006266:	431a      	orrs	r2, r3
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	061b      	lsls	r3, r3, #24
 800626c:	431a      	orrs	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	071b      	lsls	r3, r3, #28
 8006272:	4929      	ldr	r1, [pc, #164]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006274:	4313      	orrs	r3, r2
 8006276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0308 	and.w	r3, r3, #8
 8006282:	2b00      	cmp	r3, #0
 8006284:	d028      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006286:	4b24      	ldr	r3, [pc, #144]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800628c:	0e1b      	lsrs	r3, r3, #24
 800628e:	f003 030f 	and.w	r3, r3, #15
 8006292:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006294:	4b20      	ldr	r3, [pc, #128]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800629a:	0c1b      	lsrs	r3, r3, #16
 800629c:	f003 0303 	and.w	r3, r3, #3
 80062a0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	019a      	lsls	r2, r3, #6
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	041b      	lsls	r3, r3, #16
 80062ac:	431a      	orrs	r2, r3
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	061b      	lsls	r3, r3, #24
 80062b2:	431a      	orrs	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	071b      	lsls	r3, r3, #28
 80062ba:	4917      	ldr	r1, [pc, #92]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80062c2:	4b15      	ldr	r3, [pc, #84]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d0:	4911      	ldr	r1, [pc, #68]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80062d8:	4b0f      	ldr	r3, [pc, #60]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a0e      	ldr	r2, [pc, #56]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062e4:	f7fd f8fc 	bl	80034e0 <HAL_GetTick>
 80062e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80062ea:	e008      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80062ec:	f7fd f8f8 	bl	80034e0 <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	2b64      	cmp	r3, #100	; 0x64
 80062f8:	d901      	bls.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e007      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80062fe:	4b06      	ldr	r3, [pc, #24]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006306:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800630a:	d1ef      	bne.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3720      	adds	r7, #32
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	40023800 	.word	0x40023800

0800631c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d101      	bne.n	8006332 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e071      	b.n	8006416 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	7f5b      	ldrb	r3, [r3, #29]
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b00      	cmp	r3, #0
 800633a:	d105      	bne.n	8006348 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7fc fba0 	bl	8002a88 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	f003 0310 	and.w	r3, r3, #16
 8006358:	2b10      	cmp	r3, #16
 800635a:	d053      	beq.n	8006404 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	22ca      	movs	r2, #202	; 0xca
 8006362:	625a      	str	r2, [r3, #36]	; 0x24
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2253      	movs	r2, #83	; 0x53
 800636a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 f881 	bl	8006474 <RTC_EnterInitMode>
 8006372:	4603      	mov	r3, r0
 8006374:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006376:	7bfb      	ldrb	r3, [r7, #15]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d12a      	bne.n	80063d2 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6899      	ldr	r1, [r3, #8]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	4b26      	ldr	r3, [pc, #152]	; (8006420 <HAL_RTC_Init+0x104>)
 8006388:	400b      	ands	r3, r1
 800638a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6899      	ldr	r1, [r3, #8]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	431a      	orrs	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	431a      	orrs	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	68d2      	ldr	r2, [r2, #12]
 80063b2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6919      	ldr	r1, [r3, #16]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	041a      	lsls	r2, r3, #16
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f88a 	bl	80064e2 <RTC_ExitInitMode>
 80063ce:	4603      	mov	r3, r0
 80063d0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80063d2:	7bfb      	ldrb	r3, [r7, #15]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d110      	bne.n	80063fa <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0208 	bic.w	r2, r2, #8
 80063e6:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	699a      	ldr	r2, [r3, #24]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	22ff      	movs	r2, #255	; 0xff
 8006400:	625a      	str	r2, [r3, #36]	; 0x24
 8006402:	e001      	b.n	8006408 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006404:	2300      	movs	r3, #0
 8006406:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006408:	7bfb      	ldrb	r3, [r7, #15]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d102      	bne.n	8006414 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006414:	7bfb      	ldrb	r3, [r7, #15]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	ff8fffbf 	.word	0xff8fffbf

08006424 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800642c:	2300      	movs	r3, #0
 800642e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68da      	ldr	r2, [r3, #12]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800643e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006440:	f7fd f84e 	bl	80034e0 <HAL_GetTick>
 8006444:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006446:	e009      	b.n	800645c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006448:	f7fd f84a 	bl	80034e0 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006456:	d901      	bls.n	800645c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e007      	b.n	800646c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	f003 0320 	and.w	r3, r3, #32
 8006466:	2b00      	cmp	r3, #0
 8006468:	d0ee      	beq.n	8006448 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800647c:	2300      	movs	r3, #0
 800647e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006480:	2300      	movs	r3, #0
 8006482:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648e:	2b00      	cmp	r3, #0
 8006490:	d122      	bne.n	80064d8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68da      	ldr	r2, [r3, #12]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80064a0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80064a2:	f7fd f81d 	bl	80034e0 <HAL_GetTick>
 80064a6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80064a8:	e00c      	b.n	80064c4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80064aa:	f7fd f819 	bl	80034e0 <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064b8:	d904      	bls.n	80064c4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2204      	movs	r2, #4
 80064be:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d102      	bne.n	80064d8 <RTC_EnterInitMode+0x64>
 80064d2:	7bfb      	ldrb	r3, [r7, #15]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d1e8      	bne.n	80064aa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80064d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b084      	sub	sp, #16
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68da      	ldr	r2, [r3, #12]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064fc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f003 0320 	and.w	r3, r3, #32
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10a      	bne.n	8006522 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7ff ff89 	bl	8006424 <HAL_RTC_WaitForSynchro>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d004      	beq.n	8006522 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2204      	movs	r2, #4
 800651c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006522:	7bfb      	ldrb	r3, [r7, #15]
}
 8006524:	4618      	mov	r0, r3
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8006538:	2300      	movs	r3, #0
 800653a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	7f1b      	ldrb	r3, [r3, #28]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d101      	bne.n	8006548 <HAL_RTCEx_SetWakeUpTimer+0x1c>
 8006544:	2302      	movs	r3, #2
 8006546:	e08a      	b.n	800665e <HAL_RTCEx_SetWakeUpTimer+0x132>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2201      	movs	r2, #1
 800654c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2202      	movs	r2, #2
 8006552:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	22ca      	movs	r2, #202	; 0xca
 800655a:	625a      	str	r2, [r3, #36]	; 0x24
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2253      	movs	r2, #83	; 0x53
 8006562:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800656e:	2b00      	cmp	r3, #0
 8006570:	d01e      	beq.n	80065b0 <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 8006572:	f7fc ffb5 	bl	80034e0 <HAL_GetTick>
 8006576:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8006578:	e013      	b.n	80065a2 <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800657a:	f7fc ffb1 	bl	80034e0 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006588:	d90b      	bls.n	80065a2 <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	22ff      	movs	r2, #255	; 0xff
 8006590:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2203      	movs	r2, #3
 8006596:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e05d      	b.n	800665e <HAL_RTCEx_SetWakeUpTimer+0x132>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f003 0304 	and.w	r3, r3, #4
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1e4      	bne.n	800657a <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689a      	ldr	r2, [r3, #8]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065be:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80065d0:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065d2:	f7fc ff85 	bl	80034e0 <HAL_GetTick>
 80065d6:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80065d8:	e013      	b.n	8006602 <HAL_RTCEx_SetWakeUpTimer+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80065da:	f7fc ff81 	bl	80034e0 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065e8:	d90b      	bls.n	8006602 <HAL_RTCEx_SetWakeUpTimer+0xd6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	22ff      	movs	r2, #255	; 0xff
 80065f0:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2203      	movs	r2, #3
 80065f6:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e02d      	b.n	800665e <HAL_RTCEx_SetWakeUpTimer+0x132>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	d0e4      	beq.n	80065da <HAL_RTCEx_SetWakeUpTimer+0xae>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689a      	ldr	r2, [r3, #8]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 0207 	bic.w	r2, r2, #7
 800661e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6899      	ldr	r1, [r3, #8]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	430a      	orrs	r2, r1
 800662e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689a      	ldr	r2, [r3, #8]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006646:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	22ff      	movs	r2, #255	; 0xff
 800664e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2201      	movs	r2, #1
 8006654:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b084      	sub	sp, #16
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e09d      	b.n	80067b4 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	2b00      	cmp	r3, #0
 800667e:	d108      	bne.n	8006692 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006688:	d009      	beq.n	800669e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	61da      	str	r2, [r3, #28]
 8006690:	e005      	b.n	800669e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d106      	bne.n	80066be <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7fc fab7 	bl	8002c2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2202      	movs	r2, #2
 80066c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066d4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066de:	d902      	bls.n	80066e6 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80066e0:	2300      	movs	r3, #0
 80066e2:	60fb      	str	r3, [r7, #12]
 80066e4:	e002      	b.n	80066ec <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80066e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066ea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80066f4:	d007      	beq.n	8006706 <HAL_SPI_Init+0xa0>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066fe:	d002      	beq.n	8006706 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006716:	431a      	orrs	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	f003 0302 	and.w	r3, r3, #2
 8006720:	431a      	orrs	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	431a      	orrs	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006734:	431a      	orrs	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	69db      	ldr	r3, [r3, #28]
 800673a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800673e:	431a      	orrs	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a1b      	ldr	r3, [r3, #32]
 8006744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006748:	ea42 0103 	orr.w	r1, r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006750:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	430a      	orrs	r2, r1
 800675a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	0c1b      	lsrs	r3, r3, #16
 8006762:	f003 0204 	and.w	r2, r3, #4
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676a:	f003 0310 	and.w	r3, r3, #16
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006774:	f003 0308 	and.w	r3, r3, #8
 8006778:	431a      	orrs	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006782:	ea42 0103 	orr.w	r1, r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	430a      	orrs	r2, r1
 8006792:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	69da      	ldr	r2, [r3, #28]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e049      	b.n	8006862 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d106      	bne.n	80067e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7fc fcb4 	bl	8003150 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	3304      	adds	r3, #4
 80067f8:	4619      	mov	r1, r3
 80067fa:	4610      	mov	r0, r2
 80067fc:	f000 fcfa 	bl	80071f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b082      	sub	sp, #8
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e049      	b.n	8006910 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b00      	cmp	r3, #0
 8006886:	d106      	bne.n	8006896 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f7fc fcc5 	bl	8003220 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2202      	movs	r2, #2
 800689a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	3304      	adds	r3, #4
 80068a6:	4619      	mov	r1, r3
 80068a8:	4610      	mov	r0, r2
 80068aa:	f000 fca3 	bl	80071f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3708      	adds	r7, #8
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e049      	b.n	80069be <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d106      	bne.n	8006944 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f841 	bl	80069c6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2202      	movs	r2, #2
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	3304      	adds	r3, #4
 8006954:	4619      	mov	r1, r3
 8006956:	4610      	mov	r0, r2
 8006958:	f000 fc4c 	bl	80071f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b083      	sub	sp, #12
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80069ce:	bf00      	nop
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b082      	sub	sp, #8
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d122      	bne.n	8006a36 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d11b      	bne.n	8006a36 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f06f 0202 	mvn.w	r2, #2
 8006a06:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	f003 0303 	and.w	r3, r3, #3
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d003      	beq.n	8006a24 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fbcb 	bl	80071b8 <HAL_TIM_IC_CaptureCallback>
 8006a22:	e005      	b.n	8006a30 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fbbd 	bl	80071a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fbce 	bl	80071cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	f003 0304 	and.w	r3, r3, #4
 8006a40:	2b04      	cmp	r3, #4
 8006a42:	d122      	bne.n	8006a8a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	f003 0304 	and.w	r3, r3, #4
 8006a4e:	2b04      	cmp	r3, #4
 8006a50:	d11b      	bne.n	8006a8a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f06f 0204 	mvn.w	r2, #4
 8006a5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d003      	beq.n	8006a78 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fba1 	bl	80071b8 <HAL_TIM_IC_CaptureCallback>
 8006a76:	e005      	b.n	8006a84 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fb93 	bl	80071a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fba4 	bl	80071cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	f003 0308 	and.w	r3, r3, #8
 8006a94:	2b08      	cmp	r3, #8
 8006a96:	d122      	bne.n	8006ade <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	f003 0308 	and.w	r3, r3, #8
 8006aa2:	2b08      	cmp	r3, #8
 8006aa4:	d11b      	bne.n	8006ade <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f06f 0208 	mvn.w	r2, #8
 8006aae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2204      	movs	r2, #4
 8006ab4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	f003 0303 	and.w	r3, r3, #3
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d003      	beq.n	8006acc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 fb77 	bl	80071b8 <HAL_TIM_IC_CaptureCallback>
 8006aca:	e005      	b.n	8006ad8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fb69 	bl	80071a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 fb7a 	bl	80071cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	f003 0310 	and.w	r3, r3, #16
 8006ae8:	2b10      	cmp	r3, #16
 8006aea:	d122      	bne.n	8006b32 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	f003 0310 	and.w	r3, r3, #16
 8006af6:	2b10      	cmp	r3, #16
 8006af8:	d11b      	bne.n	8006b32 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f06f 0210 	mvn.w	r2, #16
 8006b02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2208      	movs	r2, #8
 8006b08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	69db      	ldr	r3, [r3, #28]
 8006b10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d003      	beq.n	8006b20 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 fb4d 	bl	80071b8 <HAL_TIM_IC_CaptureCallback>
 8006b1e:	e005      	b.n	8006b2c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fb3f 	bl	80071a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 fb50 	bl	80071cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d10e      	bne.n	8006b5e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d107      	bne.n	8006b5e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f06f 0201 	mvn.w	r2, #1
 8006b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fb19 	bl	8007190 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b68:	2b80      	cmp	r3, #128	; 0x80
 8006b6a:	d10e      	bne.n	8006b8a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b76:	2b80      	cmp	r3, #128	; 0x80
 8006b78:	d107      	bne.n	8006b8a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f001 f923 	bl	8007dd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b98:	d10e      	bne.n	8006bb8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba4:	2b80      	cmp	r3, #128	; 0x80
 8006ba6:	d107      	bne.n	8006bb8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f001 f916 	bl	8007de4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc2:	2b40      	cmp	r3, #64	; 0x40
 8006bc4:	d10e      	bne.n	8006be4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd0:	2b40      	cmp	r3, #64	; 0x40
 8006bd2:	d107      	bne.n	8006be4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fafe 	bl	80071e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	f003 0320 	and.w	r3, r3, #32
 8006bee:	2b20      	cmp	r3, #32
 8006bf0:	d10e      	bne.n	8006c10 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	f003 0320 	and.w	r3, r3, #32
 8006bfc:	2b20      	cmp	r3, #32
 8006bfe:	d107      	bne.n	8006c10 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f06f 0220 	mvn.w	r2, #32
 8006c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f001 f8d6 	bl	8007dbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c10:	bf00      	nop
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d101      	bne.n	8006c36 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006c32:	2302      	movs	r3, #2
 8006c34:	e088      	b.n	8006d48 <HAL_TIM_IC_ConfigChannel+0x130>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d11b      	bne.n	8006c7c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006c54:	f000 fe60 	bl	8007918 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	699a      	ldr	r2, [r3, #24]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 020c 	bic.w	r2, r2, #12
 8006c66:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6999      	ldr	r1, [r3, #24]
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	689a      	ldr	r2, [r3, #8]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	619a      	str	r2, [r3, #24]
 8006c7a:	e060      	b.n	8006d3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	d11c      	bne.n	8006cbc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006c92:	f000 fee4 	bl	8007a5e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	699a      	ldr	r2, [r3, #24]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006ca4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6999      	ldr	r1, [r3, #24]
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	021a      	lsls	r2, r3, #8
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	619a      	str	r2, [r3, #24]
 8006cba:	e040      	b.n	8006d3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b08      	cmp	r3, #8
 8006cc0:	d11b      	bne.n	8006cfa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006cd2:	f000 ff31 	bl	8007b38 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	69da      	ldr	r2, [r3, #28]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f022 020c 	bic.w	r2, r2, #12
 8006ce4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	69d9      	ldr	r1, [r3, #28]
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	689a      	ldr	r2, [r3, #8]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	61da      	str	r2, [r3, #28]
 8006cf8:	e021      	b.n	8006d3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2b0c      	cmp	r3, #12
 8006cfe:	d11c      	bne.n	8006d3a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006d10:	f000 ff4e 	bl	8007bb0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	69da      	ldr	r2, [r3, #28]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006d22:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	69d9      	ldr	r1, [r3, #28]
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	021a      	lsls	r2, r3, #8
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	61da      	str	r2, [r3, #28]
 8006d38:	e001      	b.n	8006d3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3718      	adds	r7, #24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d101      	bne.n	8006d6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	e0ff      	b.n	8006f6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b14      	cmp	r3, #20
 8006d7a:	f200 80f0 	bhi.w	8006f5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006d7e:	a201      	add	r2, pc, #4	; (adr r2, 8006d84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d84:	08006dd9 	.word	0x08006dd9
 8006d88:	08006f5f 	.word	0x08006f5f
 8006d8c:	08006f5f 	.word	0x08006f5f
 8006d90:	08006f5f 	.word	0x08006f5f
 8006d94:	08006e19 	.word	0x08006e19
 8006d98:	08006f5f 	.word	0x08006f5f
 8006d9c:	08006f5f 	.word	0x08006f5f
 8006da0:	08006f5f 	.word	0x08006f5f
 8006da4:	08006e5b 	.word	0x08006e5b
 8006da8:	08006f5f 	.word	0x08006f5f
 8006dac:	08006f5f 	.word	0x08006f5f
 8006db0:	08006f5f 	.word	0x08006f5f
 8006db4:	08006e9b 	.word	0x08006e9b
 8006db8:	08006f5f 	.word	0x08006f5f
 8006dbc:	08006f5f 	.word	0x08006f5f
 8006dc0:	08006f5f 	.word	0x08006f5f
 8006dc4:	08006edd 	.word	0x08006edd
 8006dc8:	08006f5f 	.word	0x08006f5f
 8006dcc:	08006f5f 	.word	0x08006f5f
 8006dd0:	08006f5f 	.word	0x08006f5f
 8006dd4:	08006f1d 	.word	0x08006f1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68b9      	ldr	r1, [r7, #8]
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 faa8 	bl	8007334 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	699a      	ldr	r2, [r3, #24]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f042 0208 	orr.w	r2, r2, #8
 8006df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	699a      	ldr	r2, [r3, #24]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f022 0204 	bic.w	r2, r2, #4
 8006e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6999      	ldr	r1, [r3, #24]
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	691a      	ldr	r2, [r3, #16]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	619a      	str	r2, [r3, #24]
      break;
 8006e16:	e0a5      	b.n	8006f64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68b9      	ldr	r1, [r7, #8]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 fafa 	bl	8007418 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	699a      	ldr	r2, [r3, #24]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	699a      	ldr	r2, [r3, #24]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6999      	ldr	r1, [r3, #24]
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	021a      	lsls	r2, r3, #8
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	430a      	orrs	r2, r1
 8006e56:	619a      	str	r2, [r3, #24]
      break;
 8006e58:	e084      	b.n	8006f64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68b9      	ldr	r1, [r7, #8]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 fb51 	bl	8007508 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	69da      	ldr	r2, [r3, #28]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f042 0208 	orr.w	r2, r2, #8
 8006e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	69da      	ldr	r2, [r3, #28]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f022 0204 	bic.w	r2, r2, #4
 8006e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	69d9      	ldr	r1, [r3, #28]
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	691a      	ldr	r2, [r3, #16]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	430a      	orrs	r2, r1
 8006e96:	61da      	str	r2, [r3, #28]
      break;
 8006e98:	e064      	b.n	8006f64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68b9      	ldr	r1, [r7, #8]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f000 fba7 	bl	80075f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	69da      	ldr	r2, [r3, #28]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	69da      	ldr	r2, [r3, #28]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	69d9      	ldr	r1, [r3, #28]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	021a      	lsls	r2, r3, #8
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	61da      	str	r2, [r3, #28]
      break;
 8006eda:	e043      	b.n	8006f64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68b9      	ldr	r1, [r7, #8]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f000 fbde 	bl	80076a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f042 0208 	orr.w	r2, r2, #8
 8006ef6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f022 0204 	bic.w	r2, r2, #4
 8006f06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	691a      	ldr	r2, [r3, #16]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	430a      	orrs	r2, r1
 8006f18:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006f1a:	e023      	b.n	8006f64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68b9      	ldr	r1, [r7, #8]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 fc10 	bl	8007748 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	021a      	lsls	r2, r3, #8
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006f5c:	e002      	b.n	8006f64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	75fb      	strb	r3, [r7, #23]
      break;
 8006f62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3718      	adds	r7, #24
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop

08006f78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f82:	2300      	movs	r3, #0
 8006f84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d101      	bne.n	8006f94 <HAL_TIM_ConfigClockSource+0x1c>
 8006f90:	2302      	movs	r3, #2
 8006f92:	e0b4      	b.n	80070fe <HAL_TIM_ConfigClockSource+0x186>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	4b56      	ldr	r3, [pc, #344]	; (8007108 <HAL_TIM_ConfigClockSource+0x190>)
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fcc:	d03e      	beq.n	800704c <HAL_TIM_ConfigClockSource+0xd4>
 8006fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fd2:	f200 8087 	bhi.w	80070e4 <HAL_TIM_ConfigClockSource+0x16c>
 8006fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fda:	f000 8086 	beq.w	80070ea <HAL_TIM_ConfigClockSource+0x172>
 8006fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fe2:	d87f      	bhi.n	80070e4 <HAL_TIM_ConfigClockSource+0x16c>
 8006fe4:	2b70      	cmp	r3, #112	; 0x70
 8006fe6:	d01a      	beq.n	800701e <HAL_TIM_ConfigClockSource+0xa6>
 8006fe8:	2b70      	cmp	r3, #112	; 0x70
 8006fea:	d87b      	bhi.n	80070e4 <HAL_TIM_ConfigClockSource+0x16c>
 8006fec:	2b60      	cmp	r3, #96	; 0x60
 8006fee:	d050      	beq.n	8007092 <HAL_TIM_ConfigClockSource+0x11a>
 8006ff0:	2b60      	cmp	r3, #96	; 0x60
 8006ff2:	d877      	bhi.n	80070e4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ff4:	2b50      	cmp	r3, #80	; 0x50
 8006ff6:	d03c      	beq.n	8007072 <HAL_TIM_ConfigClockSource+0xfa>
 8006ff8:	2b50      	cmp	r3, #80	; 0x50
 8006ffa:	d873      	bhi.n	80070e4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ffc:	2b40      	cmp	r3, #64	; 0x40
 8006ffe:	d058      	beq.n	80070b2 <HAL_TIM_ConfigClockSource+0x13a>
 8007000:	2b40      	cmp	r3, #64	; 0x40
 8007002:	d86f      	bhi.n	80070e4 <HAL_TIM_ConfigClockSource+0x16c>
 8007004:	2b30      	cmp	r3, #48	; 0x30
 8007006:	d064      	beq.n	80070d2 <HAL_TIM_ConfigClockSource+0x15a>
 8007008:	2b30      	cmp	r3, #48	; 0x30
 800700a:	d86b      	bhi.n	80070e4 <HAL_TIM_ConfigClockSource+0x16c>
 800700c:	2b20      	cmp	r3, #32
 800700e:	d060      	beq.n	80070d2 <HAL_TIM_ConfigClockSource+0x15a>
 8007010:	2b20      	cmp	r3, #32
 8007012:	d867      	bhi.n	80070e4 <HAL_TIM_ConfigClockSource+0x16c>
 8007014:	2b00      	cmp	r3, #0
 8007016:	d05c      	beq.n	80070d2 <HAL_TIM_ConfigClockSource+0x15a>
 8007018:	2b10      	cmp	r3, #16
 800701a:	d05a      	beq.n	80070d2 <HAL_TIM_ConfigClockSource+0x15a>
 800701c:	e062      	b.n	80070e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800702e:	f000 fe17 	bl	8007c60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007040:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	609a      	str	r2, [r3, #8]
      break;
 800704a:	e04f      	b.n	80070ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800705c:	f000 fe00 	bl	8007c60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	689a      	ldr	r2, [r3, #8]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800706e:	609a      	str	r2, [r3, #8]
      break;
 8007070:	e03c      	b.n	80070ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800707e:	461a      	mov	r2, r3
 8007080:	f000 fcbe 	bl	8007a00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2150      	movs	r1, #80	; 0x50
 800708a:	4618      	mov	r0, r3
 800708c:	f000 fdcd 	bl	8007c2a <TIM_ITRx_SetConfig>
      break;
 8007090:	e02c      	b.n	80070ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800709e:	461a      	mov	r2, r3
 80070a0:	f000 fd1a 	bl	8007ad8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2160      	movs	r1, #96	; 0x60
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 fdbd 	bl	8007c2a <TIM_ITRx_SetConfig>
      break;
 80070b0:	e01c      	b.n	80070ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070be:	461a      	mov	r2, r3
 80070c0:	f000 fc9e 	bl	8007a00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2140      	movs	r1, #64	; 0x40
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 fdad 	bl	8007c2a <TIM_ITRx_SetConfig>
      break;
 80070d0:	e00c      	b.n	80070ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4619      	mov	r1, r3
 80070dc:	4610      	mov	r0, r2
 80070de:	f000 fda4 	bl	8007c2a <TIM_ITRx_SetConfig>
      break;
 80070e2:	e003      	b.n	80070ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	73fb      	strb	r3, [r7, #15]
      break;
 80070e8:	e000      	b.n	80070ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80070ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	fffeff88 	.word	0xfffeff88

0800710c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800711c:	2b01      	cmp	r3, #1
 800711e:	d101      	bne.n	8007124 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007120:	2302      	movs	r3, #2
 8007122:	e031      	b.n	8007188 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2202      	movs	r2, #2
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 fb5a 	bl	80077f0 <TIM_SlaveTimer_SetConfig>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d009      	beq.n	8007156 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e018      	b.n	8007188 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68da      	ldr	r2, [r3, #12]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007164:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68da      	ldr	r2, [r3, #12]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007174:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2201      	movs	r2, #1
 800717a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007198:	bf00      	nop
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a40      	ldr	r2, [pc, #256]	; (8007308 <TIM_Base_SetConfig+0x114>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d013      	beq.n	8007234 <TIM_Base_SetConfig+0x40>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007212:	d00f      	beq.n	8007234 <TIM_Base_SetConfig+0x40>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a3d      	ldr	r2, [pc, #244]	; (800730c <TIM_Base_SetConfig+0x118>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d00b      	beq.n	8007234 <TIM_Base_SetConfig+0x40>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a3c      	ldr	r2, [pc, #240]	; (8007310 <TIM_Base_SetConfig+0x11c>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d007      	beq.n	8007234 <TIM_Base_SetConfig+0x40>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a3b      	ldr	r2, [pc, #236]	; (8007314 <TIM_Base_SetConfig+0x120>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d003      	beq.n	8007234 <TIM_Base_SetConfig+0x40>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a3a      	ldr	r2, [pc, #232]	; (8007318 <TIM_Base_SetConfig+0x124>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d108      	bne.n	8007246 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	4313      	orrs	r3, r2
 8007244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4a2f      	ldr	r2, [pc, #188]	; (8007308 <TIM_Base_SetConfig+0x114>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d02b      	beq.n	80072a6 <TIM_Base_SetConfig+0xb2>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007254:	d027      	beq.n	80072a6 <TIM_Base_SetConfig+0xb2>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a2c      	ldr	r2, [pc, #176]	; (800730c <TIM_Base_SetConfig+0x118>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d023      	beq.n	80072a6 <TIM_Base_SetConfig+0xb2>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a2b      	ldr	r2, [pc, #172]	; (8007310 <TIM_Base_SetConfig+0x11c>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d01f      	beq.n	80072a6 <TIM_Base_SetConfig+0xb2>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a2a      	ldr	r2, [pc, #168]	; (8007314 <TIM_Base_SetConfig+0x120>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d01b      	beq.n	80072a6 <TIM_Base_SetConfig+0xb2>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a29      	ldr	r2, [pc, #164]	; (8007318 <TIM_Base_SetConfig+0x124>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d017      	beq.n	80072a6 <TIM_Base_SetConfig+0xb2>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a28      	ldr	r2, [pc, #160]	; (800731c <TIM_Base_SetConfig+0x128>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d013      	beq.n	80072a6 <TIM_Base_SetConfig+0xb2>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a27      	ldr	r2, [pc, #156]	; (8007320 <TIM_Base_SetConfig+0x12c>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d00f      	beq.n	80072a6 <TIM_Base_SetConfig+0xb2>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a26      	ldr	r2, [pc, #152]	; (8007324 <TIM_Base_SetConfig+0x130>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d00b      	beq.n	80072a6 <TIM_Base_SetConfig+0xb2>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a25      	ldr	r2, [pc, #148]	; (8007328 <TIM_Base_SetConfig+0x134>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d007      	beq.n	80072a6 <TIM_Base_SetConfig+0xb2>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a24      	ldr	r2, [pc, #144]	; (800732c <TIM_Base_SetConfig+0x138>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d003      	beq.n	80072a6 <TIM_Base_SetConfig+0xb2>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a23      	ldr	r2, [pc, #140]	; (8007330 <TIM_Base_SetConfig+0x13c>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d108      	bne.n	80072b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	689a      	ldr	r2, [r3, #8]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a0a      	ldr	r2, [pc, #40]	; (8007308 <TIM_Base_SetConfig+0x114>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d003      	beq.n	80072ec <TIM_Base_SetConfig+0xf8>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a0c      	ldr	r2, [pc, #48]	; (8007318 <TIM_Base_SetConfig+0x124>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d103      	bne.n	80072f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	691a      	ldr	r2, [r3, #16]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	615a      	str	r2, [r3, #20]
}
 80072fa:	bf00      	nop
 80072fc:	3714      	adds	r7, #20
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	40010000 	.word	0x40010000
 800730c:	40000400 	.word	0x40000400
 8007310:	40000800 	.word	0x40000800
 8007314:	40000c00 	.word	0x40000c00
 8007318:	40010400 	.word	0x40010400
 800731c:	40014000 	.word	0x40014000
 8007320:	40014400 	.word	0x40014400
 8007324:	40014800 	.word	0x40014800
 8007328:	40001800 	.word	0x40001800
 800732c:	40001c00 	.word	0x40001c00
 8007330:	40002000 	.word	0x40002000

08007334 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007334:	b480      	push	{r7}
 8007336:	b087      	sub	sp, #28
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	f023 0201 	bic.w	r2, r3, #1
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	4b2b      	ldr	r3, [pc, #172]	; (800740c <TIM_OC1_SetConfig+0xd8>)
 8007360:	4013      	ands	r3, r2
 8007362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f023 0303 	bic.w	r3, r3, #3
 800736a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	4313      	orrs	r3, r2
 8007374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f023 0302 	bic.w	r3, r3, #2
 800737c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	4313      	orrs	r3, r2
 8007386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a21      	ldr	r2, [pc, #132]	; (8007410 <TIM_OC1_SetConfig+0xdc>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d003      	beq.n	8007398 <TIM_OC1_SetConfig+0x64>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a20      	ldr	r2, [pc, #128]	; (8007414 <TIM_OC1_SetConfig+0xe0>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d10c      	bne.n	80073b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	f023 0308 	bic.w	r3, r3, #8
 800739e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	f023 0304 	bic.w	r3, r3, #4
 80073b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a16      	ldr	r2, [pc, #88]	; (8007410 <TIM_OC1_SetConfig+0xdc>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d003      	beq.n	80073c2 <TIM_OC1_SetConfig+0x8e>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a15      	ldr	r2, [pc, #84]	; (8007414 <TIM_OC1_SetConfig+0xe0>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d111      	bne.n	80073e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	4313      	orrs	r3, r2
 80073da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	685a      	ldr	r2, [r3, #4]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	621a      	str	r2, [r3, #32]
}
 8007400:	bf00      	nop
 8007402:	371c      	adds	r7, #28
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	fffeff8f 	.word	0xfffeff8f
 8007410:	40010000 	.word	0x40010000
 8007414:	40010400 	.word	0x40010400

08007418 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007418:	b480      	push	{r7}
 800741a:	b087      	sub	sp, #28
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	f023 0210 	bic.w	r2, r3, #16
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	4b2e      	ldr	r3, [pc, #184]	; (80074fc <TIM_OC2_SetConfig+0xe4>)
 8007444:	4013      	ands	r3, r2
 8007446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800744e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	021b      	lsls	r3, r3, #8
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	4313      	orrs	r3, r2
 800745a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	f023 0320 	bic.w	r3, r3, #32
 8007462:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	011b      	lsls	r3, r3, #4
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	4313      	orrs	r3, r2
 800746e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a23      	ldr	r2, [pc, #140]	; (8007500 <TIM_OC2_SetConfig+0xe8>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d003      	beq.n	8007480 <TIM_OC2_SetConfig+0x68>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a22      	ldr	r2, [pc, #136]	; (8007504 <TIM_OC2_SetConfig+0xec>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d10d      	bne.n	800749c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	011b      	lsls	r3, r3, #4
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	4313      	orrs	r3, r2
 8007492:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800749a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a18      	ldr	r2, [pc, #96]	; (8007500 <TIM_OC2_SetConfig+0xe8>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d003      	beq.n	80074ac <TIM_OC2_SetConfig+0x94>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a17      	ldr	r2, [pc, #92]	; (8007504 <TIM_OC2_SetConfig+0xec>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d113      	bne.n	80074d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	695b      	ldr	r3, [r3, #20]
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	693a      	ldr	r2, [r7, #16]
 80074d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	621a      	str	r2, [r3, #32]
}
 80074ee:	bf00      	nop
 80074f0:	371c      	adds	r7, #28
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	feff8fff 	.word	0xfeff8fff
 8007500:	40010000 	.word	0x40010000
 8007504:	40010400 	.word	0x40010400

08007508 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007508:	b480      	push	{r7}
 800750a:	b087      	sub	sp, #28
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	69db      	ldr	r3, [r3, #28]
 800752e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	4b2d      	ldr	r3, [pc, #180]	; (80075e8 <TIM_OC3_SetConfig+0xe0>)
 8007534:	4013      	ands	r3, r2
 8007536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f023 0303 	bic.w	r3, r3, #3
 800753e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	4313      	orrs	r3, r2
 8007548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	021b      	lsls	r3, r3, #8
 8007558:	697a      	ldr	r2, [r7, #20]
 800755a:	4313      	orrs	r3, r2
 800755c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a22      	ldr	r2, [pc, #136]	; (80075ec <TIM_OC3_SetConfig+0xe4>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d003      	beq.n	800756e <TIM_OC3_SetConfig+0x66>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a21      	ldr	r2, [pc, #132]	; (80075f0 <TIM_OC3_SetConfig+0xe8>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d10d      	bne.n	800758a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007574:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	021b      	lsls	r3, r3, #8
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	4313      	orrs	r3, r2
 8007580:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007588:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a17      	ldr	r2, [pc, #92]	; (80075ec <TIM_OC3_SetConfig+0xe4>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d003      	beq.n	800759a <TIM_OC3_SetConfig+0x92>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a16      	ldr	r2, [pc, #88]	; (80075f0 <TIM_OC3_SetConfig+0xe8>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d113      	bne.n	80075c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	011b      	lsls	r3, r3, #4
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	011b      	lsls	r3, r3, #4
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	4313      	orrs	r3, r2
 80075c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	693a      	ldr	r2, [r7, #16]
 80075c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	685a      	ldr	r2, [r3, #4]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	621a      	str	r2, [r3, #32]
}
 80075dc:	bf00      	nop
 80075de:	371c      	adds	r7, #28
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr
 80075e8:	fffeff8f 	.word	0xfffeff8f
 80075ec:	40010000 	.word	0x40010000
 80075f0:	40010400 	.word	0x40010400

080075f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b087      	sub	sp, #28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	69db      	ldr	r3, [r3, #28]
 800761a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	4b1e      	ldr	r3, [pc, #120]	; (8007698 <TIM_OC4_SetConfig+0xa4>)
 8007620:	4013      	ands	r3, r2
 8007622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800762a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	021b      	lsls	r3, r3, #8
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	4313      	orrs	r3, r2
 8007636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800763e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	031b      	lsls	r3, r3, #12
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	4313      	orrs	r3, r2
 800764a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a13      	ldr	r2, [pc, #76]	; (800769c <TIM_OC4_SetConfig+0xa8>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d003      	beq.n	800765c <TIM_OC4_SetConfig+0x68>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a12      	ldr	r2, [pc, #72]	; (80076a0 <TIM_OC4_SetConfig+0xac>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d109      	bne.n	8007670 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007662:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	695b      	ldr	r3, [r3, #20]
 8007668:	019b      	lsls	r3, r3, #6
 800766a:	697a      	ldr	r2, [r7, #20]
 800766c:	4313      	orrs	r3, r2
 800766e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	685a      	ldr	r2, [r3, #4]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	693a      	ldr	r2, [r7, #16]
 8007688:	621a      	str	r2, [r3, #32]
}
 800768a:	bf00      	nop
 800768c:	371c      	adds	r7, #28
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	feff8fff 	.word	0xfeff8fff
 800769c:	40010000 	.word	0x40010000
 80076a0:	40010400 	.word	0x40010400

080076a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b087      	sub	sp, #28
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	4b1b      	ldr	r3, [pc, #108]	; (800773c <TIM_OC5_SetConfig+0x98>)
 80076d0:	4013      	ands	r3, r2
 80076d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	4313      	orrs	r3, r2
 80076dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80076e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	041b      	lsls	r3, r3, #16
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a12      	ldr	r2, [pc, #72]	; (8007740 <TIM_OC5_SetConfig+0x9c>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d003      	beq.n	8007702 <TIM_OC5_SetConfig+0x5e>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a11      	ldr	r2, [pc, #68]	; (8007744 <TIM_OC5_SetConfig+0xa0>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d109      	bne.n	8007716 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007708:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	021b      	lsls	r3, r3, #8
 8007710:	697a      	ldr	r2, [r7, #20]
 8007712:	4313      	orrs	r3, r2
 8007714:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	685a      	ldr	r2, [r3, #4]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	693a      	ldr	r2, [r7, #16]
 800772e:	621a      	str	r2, [r3, #32]
}
 8007730:	bf00      	nop
 8007732:	371c      	adds	r7, #28
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr
 800773c:	fffeff8f 	.word	0xfffeff8f
 8007740:	40010000 	.word	0x40010000
 8007744:	40010400 	.word	0x40010400

08007748 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007748:	b480      	push	{r7}
 800774a:	b087      	sub	sp, #28
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a1b      	ldr	r3, [r3, #32]
 8007762:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800776e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	4b1c      	ldr	r3, [pc, #112]	; (80077e4 <TIM_OC6_SetConfig+0x9c>)
 8007774:	4013      	ands	r3, r2
 8007776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	021b      	lsls	r3, r3, #8
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	4313      	orrs	r3, r2
 8007782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800778a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	051b      	lsls	r3, r3, #20
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	4313      	orrs	r3, r2
 8007796:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a13      	ldr	r2, [pc, #76]	; (80077e8 <TIM_OC6_SetConfig+0xa0>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d003      	beq.n	80077a8 <TIM_OC6_SetConfig+0x60>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a12      	ldr	r2, [pc, #72]	; (80077ec <TIM_OC6_SetConfig+0xa4>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d109      	bne.n	80077bc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	695b      	ldr	r3, [r3, #20]
 80077b4:	029b      	lsls	r3, r3, #10
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	697a      	ldr	r2, [r7, #20]
 80077c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	685a      	ldr	r2, [r3, #4]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	693a      	ldr	r2, [r7, #16]
 80077d4:	621a      	str	r2, [r3, #32]
}
 80077d6:	bf00      	nop
 80077d8:	371c      	adds	r7, #28
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	feff8fff 	.word	0xfeff8fff
 80077e8:	40010000 	.word	0x40010000
 80077ec:	40010400 	.word	0x40010400

080077f0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800780c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	693a      	ldr	r2, [r7, #16]
 8007814:	4313      	orrs	r3, r2
 8007816:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	4b3e      	ldr	r3, [pc, #248]	; (8007914 <TIM_SlaveTimer_SetConfig+0x124>)
 800781c:	4013      	ands	r3, r2
 800781e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	693a      	ldr	r2, [r7, #16]
 8007826:	4313      	orrs	r3, r2
 8007828:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	2b70      	cmp	r3, #112	; 0x70
 8007838:	d01a      	beq.n	8007870 <TIM_SlaveTimer_SetConfig+0x80>
 800783a:	2b70      	cmp	r3, #112	; 0x70
 800783c:	d860      	bhi.n	8007900 <TIM_SlaveTimer_SetConfig+0x110>
 800783e:	2b60      	cmp	r3, #96	; 0x60
 8007840:	d054      	beq.n	80078ec <TIM_SlaveTimer_SetConfig+0xfc>
 8007842:	2b60      	cmp	r3, #96	; 0x60
 8007844:	d85c      	bhi.n	8007900 <TIM_SlaveTimer_SetConfig+0x110>
 8007846:	2b50      	cmp	r3, #80	; 0x50
 8007848:	d046      	beq.n	80078d8 <TIM_SlaveTimer_SetConfig+0xe8>
 800784a:	2b50      	cmp	r3, #80	; 0x50
 800784c:	d858      	bhi.n	8007900 <TIM_SlaveTimer_SetConfig+0x110>
 800784e:	2b40      	cmp	r3, #64	; 0x40
 8007850:	d019      	beq.n	8007886 <TIM_SlaveTimer_SetConfig+0x96>
 8007852:	2b40      	cmp	r3, #64	; 0x40
 8007854:	d854      	bhi.n	8007900 <TIM_SlaveTimer_SetConfig+0x110>
 8007856:	2b30      	cmp	r3, #48	; 0x30
 8007858:	d055      	beq.n	8007906 <TIM_SlaveTimer_SetConfig+0x116>
 800785a:	2b30      	cmp	r3, #48	; 0x30
 800785c:	d850      	bhi.n	8007900 <TIM_SlaveTimer_SetConfig+0x110>
 800785e:	2b20      	cmp	r3, #32
 8007860:	d051      	beq.n	8007906 <TIM_SlaveTimer_SetConfig+0x116>
 8007862:	2b20      	cmp	r3, #32
 8007864:	d84c      	bhi.n	8007900 <TIM_SlaveTimer_SetConfig+0x110>
 8007866:	2b00      	cmp	r3, #0
 8007868:	d04d      	beq.n	8007906 <TIM_SlaveTimer_SetConfig+0x116>
 800786a:	2b10      	cmp	r3, #16
 800786c:	d04b      	beq.n	8007906 <TIM_SlaveTimer_SetConfig+0x116>
 800786e:	e047      	b.n	8007900 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8007880:	f000 f9ee 	bl	8007c60 <TIM_ETR_SetConfig>
      break;
 8007884:	e040      	b.n	8007908 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b05      	cmp	r3, #5
 800788c:	d101      	bne.n	8007892 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e03b      	b.n	800790a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6a1b      	ldr	r3, [r3, #32]
 8007898:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	6a1a      	ldr	r2, [r3, #32]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f022 0201 	bic.w	r2, r2, #1
 80078a8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078b8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	011b      	lsls	r3, r3, #4
 80078c0:	68ba      	ldr	r2, [r7, #8]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	68ba      	ldr	r2, [r7, #8]
 80078cc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	621a      	str	r2, [r3, #32]
      break;
 80078d6:	e017      	b.n	8007908 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078e4:	461a      	mov	r2, r3
 80078e6:	f000 f88b 	bl	8007a00 <TIM_TI1_ConfigInputStage>
      break;
 80078ea:	e00d      	b.n	8007908 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078f8:	461a      	mov	r2, r3
 80078fa:	f000 f8ed 	bl	8007ad8 <TIM_TI2_ConfigInputStage>
      break;
 80078fe:	e003      	b.n	8007908 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	75fb      	strb	r3, [r7, #23]
      break;
 8007904:	e000      	b.n	8007908 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007906:	bf00      	nop
  }

  return status;
 8007908:	7dfb      	ldrb	r3, [r7, #23]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3718      	adds	r7, #24
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	fffefff8 	.word	0xfffefff8

08007918 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007918:	b480      	push	{r7}
 800791a:	b087      	sub	sp, #28
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
 8007924:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	f023 0201 	bic.w	r2, r3, #1
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	699b      	ldr	r3, [r3, #24]
 8007936:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6a1b      	ldr	r3, [r3, #32]
 800793c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	4a28      	ldr	r2, [pc, #160]	; (80079e4 <TIM_TI1_SetConfig+0xcc>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d01b      	beq.n	800797e <TIM_TI1_SetConfig+0x66>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800794c:	d017      	beq.n	800797e <TIM_TI1_SetConfig+0x66>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	4a25      	ldr	r2, [pc, #148]	; (80079e8 <TIM_TI1_SetConfig+0xd0>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d013      	beq.n	800797e <TIM_TI1_SetConfig+0x66>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	4a24      	ldr	r2, [pc, #144]	; (80079ec <TIM_TI1_SetConfig+0xd4>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d00f      	beq.n	800797e <TIM_TI1_SetConfig+0x66>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	4a23      	ldr	r2, [pc, #140]	; (80079f0 <TIM_TI1_SetConfig+0xd8>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d00b      	beq.n	800797e <TIM_TI1_SetConfig+0x66>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	4a22      	ldr	r2, [pc, #136]	; (80079f4 <TIM_TI1_SetConfig+0xdc>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d007      	beq.n	800797e <TIM_TI1_SetConfig+0x66>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	4a21      	ldr	r2, [pc, #132]	; (80079f8 <TIM_TI1_SetConfig+0xe0>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d003      	beq.n	800797e <TIM_TI1_SetConfig+0x66>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	4a20      	ldr	r2, [pc, #128]	; (80079fc <TIM_TI1_SetConfig+0xe4>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d101      	bne.n	8007982 <TIM_TI1_SetConfig+0x6a>
 800797e:	2301      	movs	r3, #1
 8007980:	e000      	b.n	8007984 <TIM_TI1_SetConfig+0x6c>
 8007982:	2300      	movs	r3, #0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d008      	beq.n	800799a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	f023 0303 	bic.w	r3, r3, #3
 800798e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007990:	697a      	ldr	r2, [r7, #20]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4313      	orrs	r3, r2
 8007996:	617b      	str	r3, [r7, #20]
 8007998:	e003      	b.n	80079a2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	f043 0301 	orr.w	r3, r3, #1
 80079a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	011b      	lsls	r3, r3, #4
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	697a      	ldr	r2, [r7, #20]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	f023 030a 	bic.w	r3, r3, #10
 80079bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	f003 030a 	and.w	r3, r3, #10
 80079c4:	693a      	ldr	r2, [r7, #16]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	621a      	str	r2, [r3, #32]
}
 80079d6:	bf00      	nop
 80079d8:	371c      	adds	r7, #28
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop
 80079e4:	40010000 	.word	0x40010000
 80079e8:	40000400 	.word	0x40000400
 80079ec:	40000800 	.word	0x40000800
 80079f0:	40000c00 	.word	0x40000c00
 80079f4:	40010400 	.word	0x40010400
 80079f8:	40014000 	.word	0x40014000
 80079fc:	40001800 	.word	0x40001800

08007a00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b087      	sub	sp, #28
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6a1b      	ldr	r3, [r3, #32]
 8007a10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	f023 0201 	bic.w	r2, r3, #1
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	011b      	lsls	r3, r3, #4
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f023 030a 	bic.w	r3, r3, #10
 8007a3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	621a      	str	r2, [r3, #32]
}
 8007a52:	bf00      	nop
 8007a54:	371c      	adds	r7, #28
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr

08007a5e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b087      	sub	sp, #28
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	60f8      	str	r0, [r7, #12]
 8007a66:	60b9      	str	r1, [r7, #8]
 8007a68:	607a      	str	r2, [r7, #4]
 8007a6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6a1b      	ldr	r3, [r3, #32]
 8007a70:	f023 0210 	bic.w	r2, r3, #16
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6a1b      	ldr	r3, [r3, #32]
 8007a82:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	021b      	lsls	r3, r3, #8
 8007a90:	697a      	ldr	r2, [r7, #20]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	031b      	lsls	r3, r3, #12
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	697a      	ldr	r2, [r7, #20]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ab0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	011b      	lsls	r3, r3, #4
 8007ab6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	693a      	ldr	r2, [r7, #16]
 8007aca:	621a      	str	r2, [r3, #32]
}
 8007acc:	bf00      	nop
 8007ace:	371c      	adds	r7, #28
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b087      	sub	sp, #28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6a1b      	ldr	r3, [r3, #32]
 8007ae8:	f023 0210 	bic.w	r2, r3, #16
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	031b      	lsls	r3, r3, #12
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	011b      	lsls	r3, r3, #4
 8007b1a:	693a      	ldr	r2, [r7, #16]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	621a      	str	r2, [r3, #32]
}
 8007b2c:	bf00      	nop
 8007b2e:	371c      	adds	r7, #28
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
 8007b44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	69db      	ldr	r3, [r3, #28]
 8007b56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6a1b      	ldr	r3, [r3, #32]
 8007b5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	f023 0303 	bic.w	r3, r3, #3
 8007b64:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	011b      	lsls	r3, r3, #4
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007b88:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	021b      	lsls	r3, r3, #8
 8007b8e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007b92:	693a      	ldr	r2, [r7, #16]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	693a      	ldr	r2, [r7, #16]
 8007ba2:	621a      	str	r2, [r3, #32]
}
 8007ba4:	bf00      	nop
 8007ba6:	371c      	adds	r7, #28
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b087      	sub	sp, #28
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	607a      	str	r2, [r7, #4]
 8007bbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	69db      	ldr	r3, [r3, #28]
 8007bce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6a1b      	ldr	r3, [r3, #32]
 8007bd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bdc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	021b      	lsls	r3, r3, #8
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007bee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	031b      	lsls	r3, r3, #12
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007c02:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	031b      	lsls	r3, r3, #12
 8007c08:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	693a      	ldr	r2, [r7, #16]
 8007c1c:	621a      	str	r2, [r3, #32]
}
 8007c1e:	bf00      	nop
 8007c20:	371c      	adds	r7, #28
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b085      	sub	sp, #20
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c42:	683a      	ldr	r2, [r7, #0]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	f043 0307 	orr.w	r3, r3, #7
 8007c4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	609a      	str	r2, [r3, #8]
}
 8007c54:	bf00      	nop
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b087      	sub	sp, #28
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
 8007c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	021a      	lsls	r2, r3, #8
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	431a      	orrs	r2, r3
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	697a      	ldr	r2, [r7, #20]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	697a      	ldr	r2, [r7, #20]
 8007c92:	609a      	str	r2, [r3, #8]
}
 8007c94:	bf00      	nop
 8007c96:	371c      	adds	r7, #28
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d101      	bne.n	8007cb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	e06d      	b.n	8007d94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a30      	ldr	r2, [pc, #192]	; (8007da0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d004      	beq.n	8007cec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a2f      	ldr	r2, [pc, #188]	; (8007da4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d108      	bne.n	8007cfe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007cf2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a20      	ldr	r2, [pc, #128]	; (8007da0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d022      	beq.n	8007d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d2a:	d01d      	beq.n	8007d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a1d      	ldr	r2, [pc, #116]	; (8007da8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d018      	beq.n	8007d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a1c      	ldr	r2, [pc, #112]	; (8007dac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d013      	beq.n	8007d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a1a      	ldr	r2, [pc, #104]	; (8007db0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d00e      	beq.n	8007d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a15      	ldr	r2, [pc, #84]	; (8007da4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d009      	beq.n	8007d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a16      	ldr	r2, [pc, #88]	; (8007db4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d004      	beq.n	8007d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a15      	ldr	r2, [pc, #84]	; (8007db8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d10c      	bne.n	8007d82 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	40010000 	.word	0x40010000
 8007da4:	40010400 	.word	0x40010400
 8007da8:	40000400 	.word	0x40000400
 8007dac:	40000800 	.word	0x40000800
 8007db0:	40000c00 	.word	0x40000c00
 8007db4:	40014000 	.word	0x40014000
 8007db8:	40001800 	.word	0x40001800

08007dbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d101      	bne.n	8007e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e040      	b.n	8007e8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d106      	bne.n	8007e20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f7fb fa88 	bl	8003330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2224      	movs	r2, #36	; 0x24
 8007e24:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f022 0201 	bic.w	r2, r2, #1
 8007e34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f8b0 	bl	8007f9c <UART_SetConfig>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d101      	bne.n	8007e46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e022      	b.n	8007e8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d002      	beq.n	8007e54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 fb08 	bl	8008464 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	689a      	ldr	r2, [r3, #8]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f042 0201 	orr.w	r2, r2, #1
 8007e82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fb8f 	bl	80085a8 <UART_CheckIdleState>
 8007e8a:	4603      	mov	r3, r0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b08a      	sub	sp, #40	; 0x28
 8007e98:	af02      	add	r7, sp, #8
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	603b      	str	r3, [r7, #0]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ea8:	2b20      	cmp	r3, #32
 8007eaa:	d171      	bne.n	8007f90 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d002      	beq.n	8007eb8 <HAL_UART_Transmit+0x24>
 8007eb2:	88fb      	ldrh	r3, [r7, #6]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d101      	bne.n	8007ebc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e06a      	b.n	8007f92 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2221      	movs	r2, #33	; 0x21
 8007ec8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007eca:	f7fb fb09 	bl	80034e0 <HAL_GetTick>
 8007ece:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	88fa      	ldrh	r2, [r7, #6]
 8007ed4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	88fa      	ldrh	r2, [r7, #6]
 8007edc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ee8:	d108      	bne.n	8007efc <HAL_UART_Transmit+0x68>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d104      	bne.n	8007efc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	61bb      	str	r3, [r7, #24]
 8007efa:	e003      	b.n	8007f04 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f00:	2300      	movs	r3, #0
 8007f02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007f04:	e02c      	b.n	8007f60 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	2180      	movs	r1, #128	; 0x80
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f000 fb96 	bl	8008642 <UART_WaitOnFlagUntilTimeout>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d001      	beq.n	8007f20 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	e038      	b.n	8007f92 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10b      	bne.n	8007f3e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	881b      	ldrh	r3, [r3, #0]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f34:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	3302      	adds	r3, #2
 8007f3a:	61bb      	str	r3, [r7, #24]
 8007f3c:	e007      	b.n	8007f4e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	781a      	ldrb	r2, [r3, #0]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	3b01      	subs	r3, #1
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d1cc      	bne.n	8007f06 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	9300      	str	r3, [sp, #0]
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	2200      	movs	r2, #0
 8007f74:	2140      	movs	r1, #64	; 0x40
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f000 fb63 	bl	8008642 <UART_WaitOnFlagUntilTimeout>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e005      	b.n	8007f92 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2220      	movs	r2, #32
 8007f8a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	e000      	b.n	8007f92 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007f90:	2302      	movs	r3, #2
  }
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3720      	adds	r7, #32
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
	...

08007f9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b088      	sub	sp, #32
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	689a      	ldr	r2, [r3, #8]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	431a      	orrs	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	431a      	orrs	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	69db      	ldr	r3, [r3, #28]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	4ba6      	ldr	r3, [pc, #664]	; (8008260 <UART_SetConfig+0x2c4>)
 8007fc8:	4013      	ands	r3, r2
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	6812      	ldr	r2, [r2, #0]
 8007fce:	6979      	ldr	r1, [r7, #20]
 8007fd0:	430b      	orrs	r3, r1
 8007fd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	68da      	ldr	r2, [r3, #12]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	430a      	orrs	r2, r1
 8007fe8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	699b      	ldr	r3, [r3, #24]
 8007fee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a1b      	ldr	r3, [r3, #32]
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	697a      	ldr	r2, [r7, #20]
 800800a:	430a      	orrs	r2, r1
 800800c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a94      	ldr	r2, [pc, #592]	; (8008264 <UART_SetConfig+0x2c8>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d120      	bne.n	800805a <UART_SetConfig+0xbe>
 8008018:	4b93      	ldr	r3, [pc, #588]	; (8008268 <UART_SetConfig+0x2cc>)
 800801a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800801e:	f003 0303 	and.w	r3, r3, #3
 8008022:	2b03      	cmp	r3, #3
 8008024:	d816      	bhi.n	8008054 <UART_SetConfig+0xb8>
 8008026:	a201      	add	r2, pc, #4	; (adr r2, 800802c <UART_SetConfig+0x90>)
 8008028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802c:	0800803d 	.word	0x0800803d
 8008030:	08008049 	.word	0x08008049
 8008034:	08008043 	.word	0x08008043
 8008038:	0800804f 	.word	0x0800804f
 800803c:	2301      	movs	r3, #1
 800803e:	77fb      	strb	r3, [r7, #31]
 8008040:	e150      	b.n	80082e4 <UART_SetConfig+0x348>
 8008042:	2302      	movs	r3, #2
 8008044:	77fb      	strb	r3, [r7, #31]
 8008046:	e14d      	b.n	80082e4 <UART_SetConfig+0x348>
 8008048:	2304      	movs	r3, #4
 800804a:	77fb      	strb	r3, [r7, #31]
 800804c:	e14a      	b.n	80082e4 <UART_SetConfig+0x348>
 800804e:	2308      	movs	r3, #8
 8008050:	77fb      	strb	r3, [r7, #31]
 8008052:	e147      	b.n	80082e4 <UART_SetConfig+0x348>
 8008054:	2310      	movs	r3, #16
 8008056:	77fb      	strb	r3, [r7, #31]
 8008058:	e144      	b.n	80082e4 <UART_SetConfig+0x348>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a83      	ldr	r2, [pc, #524]	; (800826c <UART_SetConfig+0x2d0>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d132      	bne.n	80080ca <UART_SetConfig+0x12e>
 8008064:	4b80      	ldr	r3, [pc, #512]	; (8008268 <UART_SetConfig+0x2cc>)
 8008066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800806a:	f003 030c 	and.w	r3, r3, #12
 800806e:	2b0c      	cmp	r3, #12
 8008070:	d828      	bhi.n	80080c4 <UART_SetConfig+0x128>
 8008072:	a201      	add	r2, pc, #4	; (adr r2, 8008078 <UART_SetConfig+0xdc>)
 8008074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008078:	080080ad 	.word	0x080080ad
 800807c:	080080c5 	.word	0x080080c5
 8008080:	080080c5 	.word	0x080080c5
 8008084:	080080c5 	.word	0x080080c5
 8008088:	080080b9 	.word	0x080080b9
 800808c:	080080c5 	.word	0x080080c5
 8008090:	080080c5 	.word	0x080080c5
 8008094:	080080c5 	.word	0x080080c5
 8008098:	080080b3 	.word	0x080080b3
 800809c:	080080c5 	.word	0x080080c5
 80080a0:	080080c5 	.word	0x080080c5
 80080a4:	080080c5 	.word	0x080080c5
 80080a8:	080080bf 	.word	0x080080bf
 80080ac:	2300      	movs	r3, #0
 80080ae:	77fb      	strb	r3, [r7, #31]
 80080b0:	e118      	b.n	80082e4 <UART_SetConfig+0x348>
 80080b2:	2302      	movs	r3, #2
 80080b4:	77fb      	strb	r3, [r7, #31]
 80080b6:	e115      	b.n	80082e4 <UART_SetConfig+0x348>
 80080b8:	2304      	movs	r3, #4
 80080ba:	77fb      	strb	r3, [r7, #31]
 80080bc:	e112      	b.n	80082e4 <UART_SetConfig+0x348>
 80080be:	2308      	movs	r3, #8
 80080c0:	77fb      	strb	r3, [r7, #31]
 80080c2:	e10f      	b.n	80082e4 <UART_SetConfig+0x348>
 80080c4:	2310      	movs	r3, #16
 80080c6:	77fb      	strb	r3, [r7, #31]
 80080c8:	e10c      	b.n	80082e4 <UART_SetConfig+0x348>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a68      	ldr	r2, [pc, #416]	; (8008270 <UART_SetConfig+0x2d4>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d120      	bne.n	8008116 <UART_SetConfig+0x17a>
 80080d4:	4b64      	ldr	r3, [pc, #400]	; (8008268 <UART_SetConfig+0x2cc>)
 80080d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80080de:	2b30      	cmp	r3, #48	; 0x30
 80080e0:	d013      	beq.n	800810a <UART_SetConfig+0x16e>
 80080e2:	2b30      	cmp	r3, #48	; 0x30
 80080e4:	d814      	bhi.n	8008110 <UART_SetConfig+0x174>
 80080e6:	2b20      	cmp	r3, #32
 80080e8:	d009      	beq.n	80080fe <UART_SetConfig+0x162>
 80080ea:	2b20      	cmp	r3, #32
 80080ec:	d810      	bhi.n	8008110 <UART_SetConfig+0x174>
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d002      	beq.n	80080f8 <UART_SetConfig+0x15c>
 80080f2:	2b10      	cmp	r3, #16
 80080f4:	d006      	beq.n	8008104 <UART_SetConfig+0x168>
 80080f6:	e00b      	b.n	8008110 <UART_SetConfig+0x174>
 80080f8:	2300      	movs	r3, #0
 80080fa:	77fb      	strb	r3, [r7, #31]
 80080fc:	e0f2      	b.n	80082e4 <UART_SetConfig+0x348>
 80080fe:	2302      	movs	r3, #2
 8008100:	77fb      	strb	r3, [r7, #31]
 8008102:	e0ef      	b.n	80082e4 <UART_SetConfig+0x348>
 8008104:	2304      	movs	r3, #4
 8008106:	77fb      	strb	r3, [r7, #31]
 8008108:	e0ec      	b.n	80082e4 <UART_SetConfig+0x348>
 800810a:	2308      	movs	r3, #8
 800810c:	77fb      	strb	r3, [r7, #31]
 800810e:	e0e9      	b.n	80082e4 <UART_SetConfig+0x348>
 8008110:	2310      	movs	r3, #16
 8008112:	77fb      	strb	r3, [r7, #31]
 8008114:	e0e6      	b.n	80082e4 <UART_SetConfig+0x348>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a56      	ldr	r2, [pc, #344]	; (8008274 <UART_SetConfig+0x2d8>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d120      	bne.n	8008162 <UART_SetConfig+0x1c6>
 8008120:	4b51      	ldr	r3, [pc, #324]	; (8008268 <UART_SetConfig+0x2cc>)
 8008122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008126:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800812a:	2bc0      	cmp	r3, #192	; 0xc0
 800812c:	d013      	beq.n	8008156 <UART_SetConfig+0x1ba>
 800812e:	2bc0      	cmp	r3, #192	; 0xc0
 8008130:	d814      	bhi.n	800815c <UART_SetConfig+0x1c0>
 8008132:	2b80      	cmp	r3, #128	; 0x80
 8008134:	d009      	beq.n	800814a <UART_SetConfig+0x1ae>
 8008136:	2b80      	cmp	r3, #128	; 0x80
 8008138:	d810      	bhi.n	800815c <UART_SetConfig+0x1c0>
 800813a:	2b00      	cmp	r3, #0
 800813c:	d002      	beq.n	8008144 <UART_SetConfig+0x1a8>
 800813e:	2b40      	cmp	r3, #64	; 0x40
 8008140:	d006      	beq.n	8008150 <UART_SetConfig+0x1b4>
 8008142:	e00b      	b.n	800815c <UART_SetConfig+0x1c0>
 8008144:	2300      	movs	r3, #0
 8008146:	77fb      	strb	r3, [r7, #31]
 8008148:	e0cc      	b.n	80082e4 <UART_SetConfig+0x348>
 800814a:	2302      	movs	r3, #2
 800814c:	77fb      	strb	r3, [r7, #31]
 800814e:	e0c9      	b.n	80082e4 <UART_SetConfig+0x348>
 8008150:	2304      	movs	r3, #4
 8008152:	77fb      	strb	r3, [r7, #31]
 8008154:	e0c6      	b.n	80082e4 <UART_SetConfig+0x348>
 8008156:	2308      	movs	r3, #8
 8008158:	77fb      	strb	r3, [r7, #31]
 800815a:	e0c3      	b.n	80082e4 <UART_SetConfig+0x348>
 800815c:	2310      	movs	r3, #16
 800815e:	77fb      	strb	r3, [r7, #31]
 8008160:	e0c0      	b.n	80082e4 <UART_SetConfig+0x348>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a44      	ldr	r2, [pc, #272]	; (8008278 <UART_SetConfig+0x2dc>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d125      	bne.n	80081b8 <UART_SetConfig+0x21c>
 800816c:	4b3e      	ldr	r3, [pc, #248]	; (8008268 <UART_SetConfig+0x2cc>)
 800816e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008176:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800817a:	d017      	beq.n	80081ac <UART_SetConfig+0x210>
 800817c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008180:	d817      	bhi.n	80081b2 <UART_SetConfig+0x216>
 8008182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008186:	d00b      	beq.n	80081a0 <UART_SetConfig+0x204>
 8008188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800818c:	d811      	bhi.n	80081b2 <UART_SetConfig+0x216>
 800818e:	2b00      	cmp	r3, #0
 8008190:	d003      	beq.n	800819a <UART_SetConfig+0x1fe>
 8008192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008196:	d006      	beq.n	80081a6 <UART_SetConfig+0x20a>
 8008198:	e00b      	b.n	80081b2 <UART_SetConfig+0x216>
 800819a:	2300      	movs	r3, #0
 800819c:	77fb      	strb	r3, [r7, #31]
 800819e:	e0a1      	b.n	80082e4 <UART_SetConfig+0x348>
 80081a0:	2302      	movs	r3, #2
 80081a2:	77fb      	strb	r3, [r7, #31]
 80081a4:	e09e      	b.n	80082e4 <UART_SetConfig+0x348>
 80081a6:	2304      	movs	r3, #4
 80081a8:	77fb      	strb	r3, [r7, #31]
 80081aa:	e09b      	b.n	80082e4 <UART_SetConfig+0x348>
 80081ac:	2308      	movs	r3, #8
 80081ae:	77fb      	strb	r3, [r7, #31]
 80081b0:	e098      	b.n	80082e4 <UART_SetConfig+0x348>
 80081b2:	2310      	movs	r3, #16
 80081b4:	77fb      	strb	r3, [r7, #31]
 80081b6:	e095      	b.n	80082e4 <UART_SetConfig+0x348>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a2f      	ldr	r2, [pc, #188]	; (800827c <UART_SetConfig+0x2e0>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d125      	bne.n	800820e <UART_SetConfig+0x272>
 80081c2:	4b29      	ldr	r3, [pc, #164]	; (8008268 <UART_SetConfig+0x2cc>)
 80081c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80081cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081d0:	d017      	beq.n	8008202 <UART_SetConfig+0x266>
 80081d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081d6:	d817      	bhi.n	8008208 <UART_SetConfig+0x26c>
 80081d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081dc:	d00b      	beq.n	80081f6 <UART_SetConfig+0x25a>
 80081de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081e2:	d811      	bhi.n	8008208 <UART_SetConfig+0x26c>
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d003      	beq.n	80081f0 <UART_SetConfig+0x254>
 80081e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ec:	d006      	beq.n	80081fc <UART_SetConfig+0x260>
 80081ee:	e00b      	b.n	8008208 <UART_SetConfig+0x26c>
 80081f0:	2301      	movs	r3, #1
 80081f2:	77fb      	strb	r3, [r7, #31]
 80081f4:	e076      	b.n	80082e4 <UART_SetConfig+0x348>
 80081f6:	2302      	movs	r3, #2
 80081f8:	77fb      	strb	r3, [r7, #31]
 80081fa:	e073      	b.n	80082e4 <UART_SetConfig+0x348>
 80081fc:	2304      	movs	r3, #4
 80081fe:	77fb      	strb	r3, [r7, #31]
 8008200:	e070      	b.n	80082e4 <UART_SetConfig+0x348>
 8008202:	2308      	movs	r3, #8
 8008204:	77fb      	strb	r3, [r7, #31]
 8008206:	e06d      	b.n	80082e4 <UART_SetConfig+0x348>
 8008208:	2310      	movs	r3, #16
 800820a:	77fb      	strb	r3, [r7, #31]
 800820c:	e06a      	b.n	80082e4 <UART_SetConfig+0x348>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a1b      	ldr	r2, [pc, #108]	; (8008280 <UART_SetConfig+0x2e4>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d138      	bne.n	800828a <UART_SetConfig+0x2ee>
 8008218:	4b13      	ldr	r3, [pc, #76]	; (8008268 <UART_SetConfig+0x2cc>)
 800821a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800821e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008222:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008226:	d017      	beq.n	8008258 <UART_SetConfig+0x2bc>
 8008228:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800822c:	d82a      	bhi.n	8008284 <UART_SetConfig+0x2e8>
 800822e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008232:	d00b      	beq.n	800824c <UART_SetConfig+0x2b0>
 8008234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008238:	d824      	bhi.n	8008284 <UART_SetConfig+0x2e8>
 800823a:	2b00      	cmp	r3, #0
 800823c:	d003      	beq.n	8008246 <UART_SetConfig+0x2aa>
 800823e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008242:	d006      	beq.n	8008252 <UART_SetConfig+0x2b6>
 8008244:	e01e      	b.n	8008284 <UART_SetConfig+0x2e8>
 8008246:	2300      	movs	r3, #0
 8008248:	77fb      	strb	r3, [r7, #31]
 800824a:	e04b      	b.n	80082e4 <UART_SetConfig+0x348>
 800824c:	2302      	movs	r3, #2
 800824e:	77fb      	strb	r3, [r7, #31]
 8008250:	e048      	b.n	80082e4 <UART_SetConfig+0x348>
 8008252:	2304      	movs	r3, #4
 8008254:	77fb      	strb	r3, [r7, #31]
 8008256:	e045      	b.n	80082e4 <UART_SetConfig+0x348>
 8008258:	2308      	movs	r3, #8
 800825a:	77fb      	strb	r3, [r7, #31]
 800825c:	e042      	b.n	80082e4 <UART_SetConfig+0x348>
 800825e:	bf00      	nop
 8008260:	efff69f3 	.word	0xefff69f3
 8008264:	40011000 	.word	0x40011000
 8008268:	40023800 	.word	0x40023800
 800826c:	40004400 	.word	0x40004400
 8008270:	40004800 	.word	0x40004800
 8008274:	40004c00 	.word	0x40004c00
 8008278:	40005000 	.word	0x40005000
 800827c:	40011400 	.word	0x40011400
 8008280:	40007800 	.word	0x40007800
 8008284:	2310      	movs	r3, #16
 8008286:	77fb      	strb	r3, [r7, #31]
 8008288:	e02c      	b.n	80082e4 <UART_SetConfig+0x348>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a72      	ldr	r2, [pc, #456]	; (8008458 <UART_SetConfig+0x4bc>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d125      	bne.n	80082e0 <UART_SetConfig+0x344>
 8008294:	4b71      	ldr	r3, [pc, #452]	; (800845c <UART_SetConfig+0x4c0>)
 8008296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800829a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800829e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80082a2:	d017      	beq.n	80082d4 <UART_SetConfig+0x338>
 80082a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80082a8:	d817      	bhi.n	80082da <UART_SetConfig+0x33e>
 80082aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082ae:	d00b      	beq.n	80082c8 <UART_SetConfig+0x32c>
 80082b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082b4:	d811      	bhi.n	80082da <UART_SetConfig+0x33e>
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d003      	beq.n	80082c2 <UART_SetConfig+0x326>
 80082ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082be:	d006      	beq.n	80082ce <UART_SetConfig+0x332>
 80082c0:	e00b      	b.n	80082da <UART_SetConfig+0x33e>
 80082c2:	2300      	movs	r3, #0
 80082c4:	77fb      	strb	r3, [r7, #31]
 80082c6:	e00d      	b.n	80082e4 <UART_SetConfig+0x348>
 80082c8:	2302      	movs	r3, #2
 80082ca:	77fb      	strb	r3, [r7, #31]
 80082cc:	e00a      	b.n	80082e4 <UART_SetConfig+0x348>
 80082ce:	2304      	movs	r3, #4
 80082d0:	77fb      	strb	r3, [r7, #31]
 80082d2:	e007      	b.n	80082e4 <UART_SetConfig+0x348>
 80082d4:	2308      	movs	r3, #8
 80082d6:	77fb      	strb	r3, [r7, #31]
 80082d8:	e004      	b.n	80082e4 <UART_SetConfig+0x348>
 80082da:	2310      	movs	r3, #16
 80082dc:	77fb      	strb	r3, [r7, #31]
 80082de:	e001      	b.n	80082e4 <UART_SetConfig+0x348>
 80082e0:	2310      	movs	r3, #16
 80082e2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	69db      	ldr	r3, [r3, #28]
 80082e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082ec:	d15b      	bne.n	80083a6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80082ee:	7ffb      	ldrb	r3, [r7, #31]
 80082f0:	2b08      	cmp	r3, #8
 80082f2:	d828      	bhi.n	8008346 <UART_SetConfig+0x3aa>
 80082f4:	a201      	add	r2, pc, #4	; (adr r2, 80082fc <UART_SetConfig+0x360>)
 80082f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fa:	bf00      	nop
 80082fc:	08008321 	.word	0x08008321
 8008300:	08008329 	.word	0x08008329
 8008304:	08008331 	.word	0x08008331
 8008308:	08008347 	.word	0x08008347
 800830c:	08008337 	.word	0x08008337
 8008310:	08008347 	.word	0x08008347
 8008314:	08008347 	.word	0x08008347
 8008318:	08008347 	.word	0x08008347
 800831c:	0800833f 	.word	0x0800833f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008320:	f7fd fbac 	bl	8005a7c <HAL_RCC_GetPCLK1Freq>
 8008324:	61b8      	str	r0, [r7, #24]
        break;
 8008326:	e013      	b.n	8008350 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008328:	f7fd fbbc 	bl	8005aa4 <HAL_RCC_GetPCLK2Freq>
 800832c:	61b8      	str	r0, [r7, #24]
        break;
 800832e:	e00f      	b.n	8008350 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008330:	4b4b      	ldr	r3, [pc, #300]	; (8008460 <UART_SetConfig+0x4c4>)
 8008332:	61bb      	str	r3, [r7, #24]
        break;
 8008334:	e00c      	b.n	8008350 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008336:	f7fd facf 	bl	80058d8 <HAL_RCC_GetSysClockFreq>
 800833a:	61b8      	str	r0, [r7, #24]
        break;
 800833c:	e008      	b.n	8008350 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800833e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008342:	61bb      	str	r3, [r7, #24]
        break;
 8008344:	e004      	b.n	8008350 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008346:	2300      	movs	r3, #0
 8008348:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	77bb      	strb	r3, [r7, #30]
        break;
 800834e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d074      	beq.n	8008440 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	005a      	lsls	r2, r3, #1
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	085b      	lsrs	r3, r3, #1
 8008360:	441a      	add	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	fbb2 f3f3 	udiv	r3, r2, r3
 800836a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	2b0f      	cmp	r3, #15
 8008370:	d916      	bls.n	80083a0 <UART_SetConfig+0x404>
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008378:	d212      	bcs.n	80083a0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	b29b      	uxth	r3, r3
 800837e:	f023 030f 	bic.w	r3, r3, #15
 8008382:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	085b      	lsrs	r3, r3, #1
 8008388:	b29b      	uxth	r3, r3
 800838a:	f003 0307 	and.w	r3, r3, #7
 800838e:	b29a      	uxth	r2, r3
 8008390:	89fb      	ldrh	r3, [r7, #14]
 8008392:	4313      	orrs	r3, r2
 8008394:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	89fa      	ldrh	r2, [r7, #14]
 800839c:	60da      	str	r2, [r3, #12]
 800839e:	e04f      	b.n	8008440 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	77bb      	strb	r3, [r7, #30]
 80083a4:	e04c      	b.n	8008440 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80083a6:	7ffb      	ldrb	r3, [r7, #31]
 80083a8:	2b08      	cmp	r3, #8
 80083aa:	d828      	bhi.n	80083fe <UART_SetConfig+0x462>
 80083ac:	a201      	add	r2, pc, #4	; (adr r2, 80083b4 <UART_SetConfig+0x418>)
 80083ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b2:	bf00      	nop
 80083b4:	080083d9 	.word	0x080083d9
 80083b8:	080083e1 	.word	0x080083e1
 80083bc:	080083e9 	.word	0x080083e9
 80083c0:	080083ff 	.word	0x080083ff
 80083c4:	080083ef 	.word	0x080083ef
 80083c8:	080083ff 	.word	0x080083ff
 80083cc:	080083ff 	.word	0x080083ff
 80083d0:	080083ff 	.word	0x080083ff
 80083d4:	080083f7 	.word	0x080083f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083d8:	f7fd fb50 	bl	8005a7c <HAL_RCC_GetPCLK1Freq>
 80083dc:	61b8      	str	r0, [r7, #24]
        break;
 80083de:	e013      	b.n	8008408 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083e0:	f7fd fb60 	bl	8005aa4 <HAL_RCC_GetPCLK2Freq>
 80083e4:	61b8      	str	r0, [r7, #24]
        break;
 80083e6:	e00f      	b.n	8008408 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083e8:	4b1d      	ldr	r3, [pc, #116]	; (8008460 <UART_SetConfig+0x4c4>)
 80083ea:	61bb      	str	r3, [r7, #24]
        break;
 80083ec:	e00c      	b.n	8008408 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083ee:	f7fd fa73 	bl	80058d8 <HAL_RCC_GetSysClockFreq>
 80083f2:	61b8      	str	r0, [r7, #24]
        break;
 80083f4:	e008      	b.n	8008408 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083fa:	61bb      	str	r3, [r7, #24]
        break;
 80083fc:	e004      	b.n	8008408 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80083fe:	2300      	movs	r3, #0
 8008400:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	77bb      	strb	r3, [r7, #30]
        break;
 8008406:	bf00      	nop
    }

    if (pclk != 0U)
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d018      	beq.n	8008440 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	085a      	lsrs	r2, r3, #1
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	441a      	add	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008420:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	2b0f      	cmp	r3, #15
 8008426:	d909      	bls.n	800843c <UART_SetConfig+0x4a0>
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800842e:	d205      	bcs.n	800843c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	b29a      	uxth	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	60da      	str	r2, [r3, #12]
 800843a:	e001      	b.n	8008440 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800844c:	7fbb      	ldrb	r3, [r7, #30]
}
 800844e:	4618      	mov	r0, r3
 8008450:	3720      	adds	r7, #32
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	40007c00 	.word	0x40007c00
 800845c:	40023800 	.word	0x40023800
 8008460:	00f42400 	.word	0x00f42400

08008464 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008470:	f003 0301 	and.w	r3, r3, #1
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00a      	beq.n	800848e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	430a      	orrs	r2, r1
 800848c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008492:	f003 0302 	and.w	r3, r3, #2
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00a      	beq.n	80084b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	430a      	orrs	r2, r1
 80084ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b4:	f003 0304 	and.w	r3, r3, #4
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00a      	beq.n	80084d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	430a      	orrs	r2, r1
 80084d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d6:	f003 0308 	and.w	r3, r3, #8
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00a      	beq.n	80084f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	430a      	orrs	r2, r1
 80084f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f8:	f003 0310 	and.w	r3, r3, #16
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00a      	beq.n	8008516 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	430a      	orrs	r2, r1
 8008514:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851a:	f003 0320 	and.w	r3, r3, #32
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00a      	beq.n	8008538 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	430a      	orrs	r2, r1
 8008536:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008540:	2b00      	cmp	r3, #0
 8008542:	d01a      	beq.n	800857a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	430a      	orrs	r2, r1
 8008558:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008562:	d10a      	bne.n	800857a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	430a      	orrs	r2, r1
 8008578:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00a      	beq.n	800859c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	430a      	orrs	r2, r1
 800859a:	605a      	str	r2, [r3, #4]
  }
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b086      	sub	sp, #24
 80085ac:	af02      	add	r7, sp, #8
 80085ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085b8:	f7fa ff92 	bl	80034e0 <HAL_GetTick>
 80085bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 0308 	and.w	r3, r3, #8
 80085c8:	2b08      	cmp	r3, #8
 80085ca:	d10e      	bne.n	80085ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f831 	bl	8008642 <UART_WaitOnFlagUntilTimeout>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d001      	beq.n	80085ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e027      	b.n	800863a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0304 	and.w	r3, r3, #4
 80085f4:	2b04      	cmp	r3, #4
 80085f6:	d10e      	bne.n	8008616 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085fc:	9300      	str	r3, [sp, #0]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f81b 	bl	8008642 <UART_WaitOnFlagUntilTimeout>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008612:	2303      	movs	r3, #3
 8008614:	e011      	b.n	800863a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2220      	movs	r2, #32
 800861a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2220      	movs	r2, #32
 8008620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b09c      	sub	sp, #112	; 0x70
 8008646:	af00      	add	r7, sp, #0
 8008648:	60f8      	str	r0, [r7, #12]
 800864a:	60b9      	str	r1, [r7, #8]
 800864c:	603b      	str	r3, [r7, #0]
 800864e:	4613      	mov	r3, r2
 8008650:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008652:	e0a7      	b.n	80087a4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008654:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865a:	f000 80a3 	beq.w	80087a4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800865e:	f7fa ff3f 	bl	80034e0 <HAL_GetTick>
 8008662:	4602      	mov	r2, r0
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	1ad3      	subs	r3, r2, r3
 8008668:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800866a:	429a      	cmp	r2, r3
 800866c:	d302      	bcc.n	8008674 <UART_WaitOnFlagUntilTimeout+0x32>
 800866e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008670:	2b00      	cmp	r3, #0
 8008672:	d13f      	bne.n	80086f4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800867c:	e853 3f00 	ldrex	r3, [r3]
 8008680:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008684:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008688:	667b      	str	r3, [r7, #100]	; 0x64
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	461a      	mov	r2, r3
 8008690:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008692:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008694:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008696:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008698:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800869a:	e841 2300 	strex	r3, r2, [r1]
 800869e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80086a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d1e6      	bne.n	8008674 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	3308      	adds	r3, #8
 80086ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086b0:	e853 3f00 	ldrex	r3, [r3]
 80086b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b8:	f023 0301 	bic.w	r3, r3, #1
 80086bc:	663b      	str	r3, [r7, #96]	; 0x60
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	3308      	adds	r3, #8
 80086c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80086c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80086c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086ce:	e841 2300 	strex	r3, r2, [r1]
 80086d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80086d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1e5      	bne.n	80086a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2220      	movs	r2, #32
 80086de:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2220      	movs	r2, #32
 80086e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80086f0:	2303      	movs	r3, #3
 80086f2:	e068      	b.n	80087c6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f003 0304 	and.w	r3, r3, #4
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d050      	beq.n	80087a4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	69db      	ldr	r3, [r3, #28]
 8008708:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800870c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008710:	d148      	bne.n	80087a4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800871a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008724:	e853 3f00 	ldrex	r3, [r3]
 8008728:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800872a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008730:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	461a      	mov	r2, r3
 8008738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800873a:	637b      	str	r3, [r7, #52]	; 0x34
 800873c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008740:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008742:	e841 2300 	strex	r3, r2, [r1]
 8008746:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1e6      	bne.n	800871c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	3308      	adds	r3, #8
 8008754:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	e853 3f00 	ldrex	r3, [r3]
 800875c:	613b      	str	r3, [r7, #16]
   return(result);
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	f023 0301 	bic.w	r3, r3, #1
 8008764:	66bb      	str	r3, [r7, #104]	; 0x68
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	3308      	adds	r3, #8
 800876c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800876e:	623a      	str	r2, [r7, #32]
 8008770:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008772:	69f9      	ldr	r1, [r7, #28]
 8008774:	6a3a      	ldr	r2, [r7, #32]
 8008776:	e841 2300 	strex	r3, r2, [r1]
 800877a:	61bb      	str	r3, [r7, #24]
   return(result);
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1e5      	bne.n	800874e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2220      	movs	r2, #32
 8008786:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2220      	movs	r2, #32
 800878c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2220      	movs	r2, #32
 8008794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2200      	movs	r2, #0
 800879c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80087a0:	2303      	movs	r3, #3
 80087a2:	e010      	b.n	80087c6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	69da      	ldr	r2, [r3, #28]
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	4013      	ands	r3, r2
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	bf0c      	ite	eq
 80087b4:	2301      	moveq	r3, #1
 80087b6:	2300      	movne	r3, #0
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	461a      	mov	r2, r3
 80087bc:	79fb      	ldrb	r3, [r7, #7]
 80087be:	429a      	cmp	r2, r3
 80087c0:	f43f af48 	beq.w	8008654 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3770      	adds	r7, #112	; 0x70
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
	...

080087d0 <malloc>:
 80087d0:	4b02      	ldr	r3, [pc, #8]	; (80087dc <malloc+0xc>)
 80087d2:	4601      	mov	r1, r0
 80087d4:	6818      	ldr	r0, [r3, #0]
 80087d6:	f000 b823 	b.w	8008820 <_malloc_r>
 80087da:	bf00      	nop
 80087dc:	2000005c 	.word	0x2000005c

080087e0 <sbrk_aligned>:
 80087e0:	b570      	push	{r4, r5, r6, lr}
 80087e2:	4e0e      	ldr	r6, [pc, #56]	; (800881c <sbrk_aligned+0x3c>)
 80087e4:	460c      	mov	r4, r1
 80087e6:	6831      	ldr	r1, [r6, #0]
 80087e8:	4605      	mov	r5, r0
 80087ea:	b911      	cbnz	r1, 80087f2 <sbrk_aligned+0x12>
 80087ec:	f000 f8f0 	bl	80089d0 <_sbrk_r>
 80087f0:	6030      	str	r0, [r6, #0]
 80087f2:	4621      	mov	r1, r4
 80087f4:	4628      	mov	r0, r5
 80087f6:	f000 f8eb 	bl	80089d0 <_sbrk_r>
 80087fa:	1c43      	adds	r3, r0, #1
 80087fc:	d00a      	beq.n	8008814 <sbrk_aligned+0x34>
 80087fe:	1cc4      	adds	r4, r0, #3
 8008800:	f024 0403 	bic.w	r4, r4, #3
 8008804:	42a0      	cmp	r0, r4
 8008806:	d007      	beq.n	8008818 <sbrk_aligned+0x38>
 8008808:	1a21      	subs	r1, r4, r0
 800880a:	4628      	mov	r0, r5
 800880c:	f000 f8e0 	bl	80089d0 <_sbrk_r>
 8008810:	3001      	adds	r0, #1
 8008812:	d101      	bne.n	8008818 <sbrk_aligned+0x38>
 8008814:	f04f 34ff 	mov.w	r4, #4294967295
 8008818:	4620      	mov	r0, r4
 800881a:	bd70      	pop	{r4, r5, r6, pc}
 800881c:	200004bc 	.word	0x200004bc

08008820 <_malloc_r>:
 8008820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008824:	1ccd      	adds	r5, r1, #3
 8008826:	f025 0503 	bic.w	r5, r5, #3
 800882a:	3508      	adds	r5, #8
 800882c:	2d0c      	cmp	r5, #12
 800882e:	bf38      	it	cc
 8008830:	250c      	movcc	r5, #12
 8008832:	2d00      	cmp	r5, #0
 8008834:	4607      	mov	r7, r0
 8008836:	db01      	blt.n	800883c <_malloc_r+0x1c>
 8008838:	42a9      	cmp	r1, r5
 800883a:	d905      	bls.n	8008848 <_malloc_r+0x28>
 800883c:	230c      	movs	r3, #12
 800883e:	603b      	str	r3, [r7, #0]
 8008840:	2600      	movs	r6, #0
 8008842:	4630      	mov	r0, r6
 8008844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008848:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800891c <_malloc_r+0xfc>
 800884c:	f000 f868 	bl	8008920 <__malloc_lock>
 8008850:	f8d8 3000 	ldr.w	r3, [r8]
 8008854:	461c      	mov	r4, r3
 8008856:	bb5c      	cbnz	r4, 80088b0 <_malloc_r+0x90>
 8008858:	4629      	mov	r1, r5
 800885a:	4638      	mov	r0, r7
 800885c:	f7ff ffc0 	bl	80087e0 <sbrk_aligned>
 8008860:	1c43      	adds	r3, r0, #1
 8008862:	4604      	mov	r4, r0
 8008864:	d155      	bne.n	8008912 <_malloc_r+0xf2>
 8008866:	f8d8 4000 	ldr.w	r4, [r8]
 800886a:	4626      	mov	r6, r4
 800886c:	2e00      	cmp	r6, #0
 800886e:	d145      	bne.n	80088fc <_malloc_r+0xdc>
 8008870:	2c00      	cmp	r4, #0
 8008872:	d048      	beq.n	8008906 <_malloc_r+0xe6>
 8008874:	6823      	ldr	r3, [r4, #0]
 8008876:	4631      	mov	r1, r6
 8008878:	4638      	mov	r0, r7
 800887a:	eb04 0903 	add.w	r9, r4, r3
 800887e:	f000 f8a7 	bl	80089d0 <_sbrk_r>
 8008882:	4581      	cmp	r9, r0
 8008884:	d13f      	bne.n	8008906 <_malloc_r+0xe6>
 8008886:	6821      	ldr	r1, [r4, #0]
 8008888:	1a6d      	subs	r5, r5, r1
 800888a:	4629      	mov	r1, r5
 800888c:	4638      	mov	r0, r7
 800888e:	f7ff ffa7 	bl	80087e0 <sbrk_aligned>
 8008892:	3001      	adds	r0, #1
 8008894:	d037      	beq.n	8008906 <_malloc_r+0xe6>
 8008896:	6823      	ldr	r3, [r4, #0]
 8008898:	442b      	add	r3, r5
 800889a:	6023      	str	r3, [r4, #0]
 800889c:	f8d8 3000 	ldr.w	r3, [r8]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d038      	beq.n	8008916 <_malloc_r+0xf6>
 80088a4:	685a      	ldr	r2, [r3, #4]
 80088a6:	42a2      	cmp	r2, r4
 80088a8:	d12b      	bne.n	8008902 <_malloc_r+0xe2>
 80088aa:	2200      	movs	r2, #0
 80088ac:	605a      	str	r2, [r3, #4]
 80088ae:	e00f      	b.n	80088d0 <_malloc_r+0xb0>
 80088b0:	6822      	ldr	r2, [r4, #0]
 80088b2:	1b52      	subs	r2, r2, r5
 80088b4:	d41f      	bmi.n	80088f6 <_malloc_r+0xd6>
 80088b6:	2a0b      	cmp	r2, #11
 80088b8:	d917      	bls.n	80088ea <_malloc_r+0xca>
 80088ba:	1961      	adds	r1, r4, r5
 80088bc:	42a3      	cmp	r3, r4
 80088be:	6025      	str	r5, [r4, #0]
 80088c0:	bf18      	it	ne
 80088c2:	6059      	strne	r1, [r3, #4]
 80088c4:	6863      	ldr	r3, [r4, #4]
 80088c6:	bf08      	it	eq
 80088c8:	f8c8 1000 	streq.w	r1, [r8]
 80088cc:	5162      	str	r2, [r4, r5]
 80088ce:	604b      	str	r3, [r1, #4]
 80088d0:	4638      	mov	r0, r7
 80088d2:	f104 060b 	add.w	r6, r4, #11
 80088d6:	f000 f829 	bl	800892c <__malloc_unlock>
 80088da:	f026 0607 	bic.w	r6, r6, #7
 80088de:	1d23      	adds	r3, r4, #4
 80088e0:	1af2      	subs	r2, r6, r3
 80088e2:	d0ae      	beq.n	8008842 <_malloc_r+0x22>
 80088e4:	1b9b      	subs	r3, r3, r6
 80088e6:	50a3      	str	r3, [r4, r2]
 80088e8:	e7ab      	b.n	8008842 <_malloc_r+0x22>
 80088ea:	42a3      	cmp	r3, r4
 80088ec:	6862      	ldr	r2, [r4, #4]
 80088ee:	d1dd      	bne.n	80088ac <_malloc_r+0x8c>
 80088f0:	f8c8 2000 	str.w	r2, [r8]
 80088f4:	e7ec      	b.n	80088d0 <_malloc_r+0xb0>
 80088f6:	4623      	mov	r3, r4
 80088f8:	6864      	ldr	r4, [r4, #4]
 80088fa:	e7ac      	b.n	8008856 <_malloc_r+0x36>
 80088fc:	4634      	mov	r4, r6
 80088fe:	6876      	ldr	r6, [r6, #4]
 8008900:	e7b4      	b.n	800886c <_malloc_r+0x4c>
 8008902:	4613      	mov	r3, r2
 8008904:	e7cc      	b.n	80088a0 <_malloc_r+0x80>
 8008906:	230c      	movs	r3, #12
 8008908:	603b      	str	r3, [r7, #0]
 800890a:	4638      	mov	r0, r7
 800890c:	f000 f80e 	bl	800892c <__malloc_unlock>
 8008910:	e797      	b.n	8008842 <_malloc_r+0x22>
 8008912:	6025      	str	r5, [r4, #0]
 8008914:	e7dc      	b.n	80088d0 <_malloc_r+0xb0>
 8008916:	605b      	str	r3, [r3, #4]
 8008918:	deff      	udf	#255	; 0xff
 800891a:	bf00      	nop
 800891c:	200004b8 	.word	0x200004b8

08008920 <__malloc_lock>:
 8008920:	4801      	ldr	r0, [pc, #4]	; (8008928 <__malloc_lock+0x8>)
 8008922:	f000 b88f 	b.w	8008a44 <__retarget_lock_acquire_recursive>
 8008926:	bf00      	nop
 8008928:	200005fc 	.word	0x200005fc

0800892c <__malloc_unlock>:
 800892c:	4801      	ldr	r0, [pc, #4]	; (8008934 <__malloc_unlock+0x8>)
 800892e:	f000 b88a 	b.w	8008a46 <__retarget_lock_release_recursive>
 8008932:	bf00      	nop
 8008934:	200005fc 	.word	0x200005fc

08008938 <__utoa>:
 8008938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800893a:	4c1f      	ldr	r4, [pc, #124]	; (80089b8 <__utoa+0x80>)
 800893c:	b08b      	sub	sp, #44	; 0x2c
 800893e:	4605      	mov	r5, r0
 8008940:	460b      	mov	r3, r1
 8008942:	466e      	mov	r6, sp
 8008944:	f104 0c20 	add.w	ip, r4, #32
 8008948:	6820      	ldr	r0, [r4, #0]
 800894a:	6861      	ldr	r1, [r4, #4]
 800894c:	4637      	mov	r7, r6
 800894e:	c703      	stmia	r7!, {r0, r1}
 8008950:	3408      	adds	r4, #8
 8008952:	4564      	cmp	r4, ip
 8008954:	463e      	mov	r6, r7
 8008956:	d1f7      	bne.n	8008948 <__utoa+0x10>
 8008958:	7921      	ldrb	r1, [r4, #4]
 800895a:	7139      	strb	r1, [r7, #4]
 800895c:	1e91      	subs	r1, r2, #2
 800895e:	6820      	ldr	r0, [r4, #0]
 8008960:	6038      	str	r0, [r7, #0]
 8008962:	2922      	cmp	r1, #34	; 0x22
 8008964:	f04f 0100 	mov.w	r1, #0
 8008968:	d904      	bls.n	8008974 <__utoa+0x3c>
 800896a:	7019      	strb	r1, [r3, #0]
 800896c:	460b      	mov	r3, r1
 800896e:	4618      	mov	r0, r3
 8008970:	b00b      	add	sp, #44	; 0x2c
 8008972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008974:	1e58      	subs	r0, r3, #1
 8008976:	4684      	mov	ip, r0
 8008978:	fbb5 f7f2 	udiv	r7, r5, r2
 800897c:	fb02 5617 	mls	r6, r2, r7, r5
 8008980:	3628      	adds	r6, #40	; 0x28
 8008982:	446e      	add	r6, sp
 8008984:	460c      	mov	r4, r1
 8008986:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800898a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800898e:	462e      	mov	r6, r5
 8008990:	42b2      	cmp	r2, r6
 8008992:	f101 0101 	add.w	r1, r1, #1
 8008996:	463d      	mov	r5, r7
 8008998:	d9ee      	bls.n	8008978 <__utoa+0x40>
 800899a:	2200      	movs	r2, #0
 800899c:	545a      	strb	r2, [r3, r1]
 800899e:	1919      	adds	r1, r3, r4
 80089a0:	1aa5      	subs	r5, r4, r2
 80089a2:	42aa      	cmp	r2, r5
 80089a4:	dae3      	bge.n	800896e <__utoa+0x36>
 80089a6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80089aa:	780e      	ldrb	r6, [r1, #0]
 80089ac:	7006      	strb	r6, [r0, #0]
 80089ae:	3201      	adds	r2, #1
 80089b0:	f801 5901 	strb.w	r5, [r1], #-1
 80089b4:	e7f4      	b.n	80089a0 <__utoa+0x68>
 80089b6:	bf00      	nop
 80089b8:	08008eb4 	.word	0x08008eb4

080089bc <utoa>:
 80089bc:	f7ff bfbc 	b.w	8008938 <__utoa>

080089c0 <memset>:
 80089c0:	4402      	add	r2, r0
 80089c2:	4603      	mov	r3, r0
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d100      	bne.n	80089ca <memset+0xa>
 80089c8:	4770      	bx	lr
 80089ca:	f803 1b01 	strb.w	r1, [r3], #1
 80089ce:	e7f9      	b.n	80089c4 <memset+0x4>

080089d0 <_sbrk_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	4d06      	ldr	r5, [pc, #24]	; (80089ec <_sbrk_r+0x1c>)
 80089d4:	2300      	movs	r3, #0
 80089d6:	4604      	mov	r4, r0
 80089d8:	4608      	mov	r0, r1
 80089da:	602b      	str	r3, [r5, #0]
 80089dc:	f7fa fa22 	bl	8002e24 <_sbrk>
 80089e0:	1c43      	adds	r3, r0, #1
 80089e2:	d102      	bne.n	80089ea <_sbrk_r+0x1a>
 80089e4:	682b      	ldr	r3, [r5, #0]
 80089e6:	b103      	cbz	r3, 80089ea <_sbrk_r+0x1a>
 80089e8:	6023      	str	r3, [r4, #0]
 80089ea:	bd38      	pop	{r3, r4, r5, pc}
 80089ec:	200005f8 	.word	0x200005f8

080089f0 <__errno>:
 80089f0:	4b01      	ldr	r3, [pc, #4]	; (80089f8 <__errno+0x8>)
 80089f2:	6818      	ldr	r0, [r3, #0]
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	2000005c 	.word	0x2000005c

080089fc <__libc_init_array>:
 80089fc:	b570      	push	{r4, r5, r6, lr}
 80089fe:	4d0d      	ldr	r5, [pc, #52]	; (8008a34 <__libc_init_array+0x38>)
 8008a00:	4c0d      	ldr	r4, [pc, #52]	; (8008a38 <__libc_init_array+0x3c>)
 8008a02:	1b64      	subs	r4, r4, r5
 8008a04:	10a4      	asrs	r4, r4, #2
 8008a06:	2600      	movs	r6, #0
 8008a08:	42a6      	cmp	r6, r4
 8008a0a:	d109      	bne.n	8008a20 <__libc_init_array+0x24>
 8008a0c:	4d0b      	ldr	r5, [pc, #44]	; (8008a3c <__libc_init_array+0x40>)
 8008a0e:	4c0c      	ldr	r4, [pc, #48]	; (8008a40 <__libc_init_array+0x44>)
 8008a10:	f000 f828 	bl	8008a64 <_init>
 8008a14:	1b64      	subs	r4, r4, r5
 8008a16:	10a4      	asrs	r4, r4, #2
 8008a18:	2600      	movs	r6, #0
 8008a1a:	42a6      	cmp	r6, r4
 8008a1c:	d105      	bne.n	8008a2a <__libc_init_array+0x2e>
 8008a1e:	bd70      	pop	{r4, r5, r6, pc}
 8008a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a24:	4798      	blx	r3
 8008a26:	3601      	adds	r6, #1
 8008a28:	e7ee      	b.n	8008a08 <__libc_init_array+0xc>
 8008a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a2e:	4798      	blx	r3
 8008a30:	3601      	adds	r6, #1
 8008a32:	e7f2      	b.n	8008a1a <__libc_init_array+0x1e>
 8008a34:	08008ee4 	.word	0x08008ee4
 8008a38:	08008ee4 	.word	0x08008ee4
 8008a3c:	08008ee4 	.word	0x08008ee4
 8008a40:	08008ee8 	.word	0x08008ee8

08008a44 <__retarget_lock_acquire_recursive>:
 8008a44:	4770      	bx	lr

08008a46 <__retarget_lock_release_recursive>:
 8008a46:	4770      	bx	lr

08008a48 <memcpy>:
 8008a48:	440a      	add	r2, r1
 8008a4a:	4291      	cmp	r1, r2
 8008a4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a50:	d100      	bne.n	8008a54 <memcpy+0xc>
 8008a52:	4770      	bx	lr
 8008a54:	b510      	push	{r4, lr}
 8008a56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a5e:	4291      	cmp	r1, r2
 8008a60:	d1f9      	bne.n	8008a56 <memcpy+0xe>
 8008a62:	bd10      	pop	{r4, pc}

08008a64 <_init>:
 8008a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a66:	bf00      	nop
 8008a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a6a:	bc08      	pop	{r3}
 8008a6c:	469e      	mov	lr, r3
 8008a6e:	4770      	bx	lr

08008a70 <_fini>:
 8008a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a72:	bf00      	nop
 8008a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a76:	bc08      	pop	{r3}
 8008a78:	469e      	mov	lr, r3
 8008a7a:	4770      	bx	lr
