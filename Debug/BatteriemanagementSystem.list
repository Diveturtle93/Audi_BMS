
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006eac  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  080070a4  080070a4  000170a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007504  08007504  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007504  08007504  00017504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800750c  0800750c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800750c  0800750c  0001750c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007510  08007510  00017510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  2000000c  08007520  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08007520  00020324  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000197d7  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038e9  00000000  00000000  00039811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  0003d100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  0003e420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c303  00000000  00000000  0003f5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000197aa  00000000  00000000  0006b8ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108594  00000000  00000000  00085055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018d5e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e30  00000000  00000000  0018d63c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800708c 	.word	0x0800708c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800708c 	.word	0x0800708c

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	b29a      	uxth	r2, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <uartTransmit+0x24>)
 8000556:	f006 f885 	bl	8006664 <HAL_UART_Transmit>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	2000029c 	.word	0x2000029c

08000568 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 8000572:	683a      	ldr	r2, [r7, #0]
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	4619      	mov	r1, r3
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f006 fd3e 	bl	8006ffc <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff fe57 	bl	8000238 <strlen>
 800058a:	4603      	mov	r3, r0
 800058c:	b29a      	uxth	r2, r3
 800058e:	f107 010c 	add.w	r1, r7, #12
 8000592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <uartTransmitNumber+0x3c>)
 8000598:	f006 f864 	bl	8006664 <HAL_UART_Transmit>
}
 800059c:	bf00      	nop
 800059e:	3718      	adds	r7, #24
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	2000029c 	.word	0x2000029c

080005a8 <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 80005ae:	2113      	movs	r1, #19
 80005b0:	483b      	ldr	r0, [pc, #236]	; (80006a0 <collectHardwareInfo+0xf8>)
 80005b2:	f7ff ffc5 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 80005b6:	f002 f947 	bl	8002848 <HAL_GetDEVID>
 80005ba:	4603      	mov	r3, r0
 80005bc:	210a      	movs	r1, #10
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff ffd2 	bl	8000568 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 80005c4:	2115      	movs	r1, #21
 80005c6:	4837      	ldr	r0, [pc, #220]	; (80006a4 <collectHardwareInfo+0xfc>)
 80005c8:	f7ff ffba 	bl	8000540 <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 80005cc:	f002 f930 	bl	8002830 <HAL_GetREVID>
 80005d0:	4603      	mov	r3, r0
 80005d2:	f242 0201 	movw	r2, #8193	; 0x2001
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d016      	beq.n	8000608 <collectHardwareInfo+0x60>
 80005da:	f242 0201 	movw	r2, #8193	; 0x2001
 80005de:	4293      	cmp	r3, r2
 80005e0:	d817      	bhi.n	8000612 <collectHardwareInfo+0x6a>
 80005e2:	f241 0201 	movw	r2, #4097	; 0x1001
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d004      	beq.n	80005f4 <collectHardwareInfo+0x4c>
 80005ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d005      	beq.n	80005fe <collectHardwareInfo+0x56>
 80005f2:	e00e      	b.n	8000612 <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 80005f4:	2101      	movs	r1, #1
 80005f6:	482c      	ldr	r0, [pc, #176]	; (80006a8 <collectHardwareInfo+0x100>)
 80005f8:	f7ff ffa2 	bl	8000540 <uartTransmit>
			break;
 80005fc:	e011      	b.n	8000622 <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 80005fe:	2101      	movs	r1, #1
 8000600:	482a      	ldr	r0, [pc, #168]	; (80006ac <collectHardwareInfo+0x104>)
 8000602:	f7ff ff9d 	bl	8000540 <uartTransmit>
			break;
 8000606:	e00c      	b.n	8000622 <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8000608:	2101      	movs	r1, #1
 800060a:	4829      	ldr	r0, [pc, #164]	; (80006b0 <collectHardwareInfo+0x108>)
 800060c:	f7ff ff98 	bl	8000540 <uartTransmit>
			break;
 8000610:	e007      	b.n	8000622 <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 8000612:	f002 f90d 	bl	8002830 <HAL_GetREVID>
 8000616:	4603      	mov	r3, r0
 8000618:	210a      	movs	r1, #10
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ffa4 	bl	8000568 <uartTransmitNumber>
			break;
 8000620:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 8000622:	2113      	movs	r1, #19
 8000624:	4823      	ldr	r0, [pc, #140]	; (80006b4 <collectHardwareInfo+0x10c>)
 8000626:	f7ff ff8b 	bl	8000540 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 800062a:	f003 fdcf 	bl	80041cc <HAL_RCC_GetSysClockFreq>
 800062e:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <collectHardwareInfo+0x110>)
 8000634:	fba2 2303 	umull	r2, r3, r2, r3
 8000638:	0c9b      	lsrs	r3, r3, #18
 800063a:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 800063c:	210a      	movs	r1, #10
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f7ff ff92 	bl	8000568 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 8000644:	2104      	movs	r1, #4
 8000646:	481d      	ldr	r0, [pc, #116]	; (80006bc <collectHardwareInfo+0x114>)
 8000648:	f7ff ff7a 	bl	8000540 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 800064c:	210f      	movs	r1, #15
 800064e:	481c      	ldr	r0, [pc, #112]	; (80006c0 <collectHardwareInfo+0x118>)
 8000650:	f7ff ff76 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 8000654:	f002 f906 	bl	8002864 <HAL_GetUIDw0>
 8000658:	4603      	mov	r3, r0
 800065a:	2110      	movs	r1, #16
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ff83 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000662:	2101      	movs	r1, #1
 8000664:	4817      	ldr	r0, [pc, #92]	; (80006c4 <collectHardwareInfo+0x11c>)
 8000666:	f7ff ff6b 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 800066a:	f002 f907 	bl	800287c <HAL_GetUIDw1>
 800066e:	4603      	mov	r3, r0
 8000670:	2110      	movs	r1, #16
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ff78 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000678:	2101      	movs	r1, #1
 800067a:	4812      	ldr	r0, [pc, #72]	; (80006c4 <collectHardwareInfo+0x11c>)
 800067c:	f7ff ff60 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8000680:	f002 f908 	bl	8002894 <HAL_GetUIDw2>
 8000684:	4603      	mov	r3, r0
 8000686:	2110      	movs	r1, #16
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff6d 	bl	8000568 <uartTransmitNumber>

	uartTransmit("\n", 1);
 800068e:	2101      	movs	r1, #1
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <collectHardwareInfo+0x120>)
 8000692:	f7ff ff55 	bl	8000540 <uartTransmit>
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	080070a4 	.word	0x080070a4
 80006a4:	080070b8 	.word	0x080070b8
 80006a8:	080070d0 	.word	0x080070d0
 80006ac:	080070d4 	.word	0x080070d4
 80006b0:	080070d8 	.word	0x080070d8
 80006b4:	080070dc 	.word	0x080070dc
 80006b8:	431bde83 	.word	0x431bde83
 80006bc:	080070f0 	.word	0x080070f0
 80006c0:	080070f8 	.word	0x080070f8
 80006c4:	08007108 	.word	0x08007108
 80006c8:	0800710c 	.word	0x0800710c

080006cc <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 80006d0:	2112      	movs	r1, #18
 80006d2:	4824      	ldr	r0, [pc, #144]	; (8000764 <collectMiddlewareInfo+0x98>)
 80006d4:	f7ff ff34 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 80006d8:	210a      	movs	r1, #10
 80006da:	2005      	movs	r0, #5
 80006dc:	f7ff ff44 	bl	8000568 <uartTransmitNumber>
	uartTransmit(".", 1);
 80006e0:	2101      	movs	r1, #1
 80006e2:	4821      	ldr	r0, [pc, #132]	; (8000768 <collectMiddlewareInfo+0x9c>)
 80006e4:	f7ff ff2c 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 80006e8:	210a      	movs	r1, #10
 80006ea:	2001      	movs	r0, #1
 80006ec:	f7ff ff3c 	bl	8000568 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 80006f0:	2110      	movs	r1, #16
 80006f2:	481e      	ldr	r0, [pc, #120]	; (800076c <collectMiddlewareInfo+0xa0>)
 80006f4:	f7ff ff24 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 80006f8:	f002 f890 	bl	800281c <HAL_GetHalVersion>
 80006fc:	4603      	mov	r3, r0
 80006fe:	0e1b      	lsrs	r3, r3, #24
 8000700:	b2db      	uxtb	r3, r3
 8000702:	210a      	movs	r1, #10
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff2f 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 800070a:	2101      	movs	r1, #1
 800070c:	4816      	ldr	r0, [pc, #88]	; (8000768 <collectMiddlewareInfo+0x9c>)
 800070e:	f7ff ff17 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 8000712:	f002 f883 	bl	800281c <HAL_GetHalVersion>
 8000716:	4603      	mov	r3, r0
 8000718:	0c1b      	lsrs	r3, r3, #16
 800071a:	b2db      	uxtb	r3, r3
 800071c:	210a      	movs	r1, #10
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff22 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000724:	2101      	movs	r1, #1
 8000726:	4810      	ldr	r0, [pc, #64]	; (8000768 <collectMiddlewareInfo+0x9c>)
 8000728:	f7ff ff0a 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 800072c:	f002 f876 	bl	800281c <HAL_GetHalVersion>
 8000730:	4603      	mov	r3, r0
 8000732:	0a1b      	lsrs	r3, r3, #8
 8000734:	b2db      	uxtb	r3, r3
 8000736:	210a      	movs	r1, #10
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff15 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 800073e:	2101      	movs	r1, #1
 8000740:	4809      	ldr	r0, [pc, #36]	; (8000768 <collectMiddlewareInfo+0x9c>)
 8000742:	f7ff fefd 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000746:	f002 f869 	bl	800281c <HAL_GetHalVersion>
 800074a:	4603      	mov	r3, r0
 800074c:	b2db      	uxtb	r3, r3
 800074e:	210a      	movs	r1, #10
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff09 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 8000756:	2101      	movs	r1, #1
 8000758:	4805      	ldr	r0, [pc, #20]	; (8000770 <collectMiddlewareInfo+0xa4>)
 800075a:	f7ff fef1 	bl	8000540 <uartTransmit>
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	08007110 	.word	0x08007110
 8000768:	08007124 	.word	0x08007124
 800076c:	08007128 	.word	0x08007128
 8000770:	0800710c 	.word	0x0800710c

08000774 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 8000778:	210f      	movs	r1, #15
 800077a:	4826      	ldr	r0, [pc, #152]	; (8000814 <collectSoftwareInfo+0xa0>)
 800077c:	f7ff fee0 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8000780:	2108      	movs	r1, #8
 8000782:	4825      	ldr	r0, [pc, #148]	; (8000818 <collectSoftwareInfo+0xa4>)
 8000784:	f7ff fedc 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8000788:	210f      	movs	r1, #15
 800078a:	4824      	ldr	r0, [pc, #144]	; (800081c <collectSoftwareInfo+0xa8>)
 800078c:	f7ff fed8 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8000790:	2104      	movs	r1, #4
 8000792:	4823      	ldr	r0, [pc, #140]	; (8000820 <collectSoftwareInfo+0xac>)
 8000794:	f7ff fed4 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8000798:	210d      	movs	r1, #13
 800079a:	4822      	ldr	r0, [pc, #136]	; (8000824 <collectSoftwareInfo+0xb0>)
 800079c:	f7ff fed0 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 80007a0:	2129      	movs	r1, #41	; 0x29
 80007a2:	4821      	ldr	r0, [pc, #132]	; (8000828 <collectSoftwareInfo+0xb4>)
 80007a4:	f7ff fecc 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80007a8:	2101      	movs	r1, #1
 80007aa:	4820      	ldr	r0, [pc, #128]	; (800082c <collectSoftwareInfo+0xb8>)
 80007ac:	f7ff fec8 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 80007b0:	2115      	movs	r1, #21
 80007b2:	481f      	ldr	r0, [pc, #124]	; (8000830 <collectSoftwareInfo+0xbc>)
 80007b4:	f7ff fec4 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 80007b8:	2105      	movs	r1, #5
 80007ba:	481e      	ldr	r0, [pc, #120]	; (8000834 <collectSoftwareInfo+0xc0>)
 80007bc:	f7ff fec0 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 80007c0:	2114      	movs	r1, #20
 80007c2:	481d      	ldr	r0, [pc, #116]	; (8000838 <collectSoftwareInfo+0xc4>)
 80007c4:	f7ff febc 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 80007c8:	2108      	movs	r1, #8
 80007ca:	481c      	ldr	r0, [pc, #112]	; (800083c <collectSoftwareInfo+0xc8>)
 80007cc:	f7ff feb8 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 80007d0:	2115      	movs	r1, #21
 80007d2:	481b      	ldr	r0, [pc, #108]	; (8000840 <collectSoftwareInfo+0xcc>)
 80007d4:	f7ff feb4 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 80007d8:	2111      	movs	r1, #17
 80007da:	481a      	ldr	r0, [pc, #104]	; (8000844 <collectSoftwareInfo+0xd0>)
 80007dc:	f7ff feb0 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80007e0:	2101      	movs	r1, #1
 80007e2:	4812      	ldr	r0, [pc, #72]	; (800082c <collectSoftwareInfo+0xb8>)
 80007e4:	f7ff feac 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 80007e8:	210f      	movs	r1, #15
 80007ea:	4817      	ldr	r0, [pc, #92]	; (8000848 <collectSoftwareInfo+0xd4>)
 80007ec:	f7ff fea8 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 80007f0:	210b      	movs	r1, #11
 80007f2:	4816      	ldr	r0, [pc, #88]	; (800084c <collectSoftwareInfo+0xd8>)
 80007f4:	f7ff fea4 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 80007f8:	210f      	movs	r1, #15
 80007fa:	4815      	ldr	r0, [pc, #84]	; (8000850 <collectSoftwareInfo+0xdc>)
 80007fc:	f7ff fea0 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 8000800:	2109      	movs	r1, #9
 8000802:	4814      	ldr	r0, [pc, #80]	; (8000854 <collectSoftwareInfo+0xe0>)
 8000804:	f7ff fe9c 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000808:	2101      	movs	r1, #1
 800080a:	4808      	ldr	r0, [pc, #32]	; (800082c <collectSoftwareInfo+0xb8>)
 800080c:	f7ff fe98 	bl	8000540 <uartTransmit>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	08007138 	.word	0x08007138
 8000818:	08007148 	.word	0x08007148
 800081c:	08007150 	.word	0x08007150
 8000820:	08007160 	.word	0x08007160
 8000824:	08007164 	.word	0x08007164
 8000828:	08007174 	.word	0x08007174
 800082c:	0800710c 	.word	0x0800710c
 8000830:	080071a0 	.word	0x080071a0
 8000834:	080071b8 	.word	0x080071b8
 8000838:	080071c0 	.word	0x080071c0
 800083c:	080071d4 	.word	0x080071d4
 8000840:	080071dc 	.word	0x080071dc
 8000844:	080071f4 	.word	0x080071f4
 8000848:	08007208 	.word	0x08007208
 800084c:	08007218 	.word	0x08007218
 8000850:	08007224 	.word	0x08007224
 8000854:	08007234 	.word	0x08007234

08000858 <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 800085c:	2114      	movs	r1, #20
 800085e:	4814      	ldr	r0, [pc, #80]	; (80008b0 <collectGitcounts+0x58>)
 8000860:	f7ff fe6e 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 8000864:	2103      	movs	r1, #3
 8000866:	4813      	ldr	r0, [pc, #76]	; (80008b4 <collectGitcounts+0x5c>)
 8000868:	f7ff fe6a 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 800086c:	2116      	movs	r1, #22
 800086e:	4812      	ldr	r0, [pc, #72]	; (80008b8 <collectGitcounts+0x60>)
 8000870:	f7ff fe66 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 8000874:	2103      	movs	r1, #3
 8000876:	4811      	ldr	r0, [pc, #68]	; (80008bc <collectGitcounts+0x64>)
 8000878:	f7ff fe62 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 800087c:	211c      	movs	r1, #28
 800087e:	4810      	ldr	r0, [pc, #64]	; (80008c0 <collectGitcounts+0x68>)
 8000880:	f7ff fe5e 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 8000884:	2103      	movs	r1, #3
 8000886:	480f      	ldr	r0, [pc, #60]	; (80008c4 <collectGitcounts+0x6c>)
 8000888:	f7ff fe5a 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 800088c:	2115      	movs	r1, #21
 800088e:	480e      	ldr	r0, [pc, #56]	; (80008c8 <collectGitcounts+0x70>)
 8000890:	f7ff fe56 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8000894:	2102      	movs	r1, #2
 8000896:	480d      	ldr	r0, [pc, #52]	; (80008cc <collectGitcounts+0x74>)
 8000898:	f7ff fe52 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 800089c:	2114      	movs	r1, #20
 800089e:	480c      	ldr	r0, [pc, #48]	; (80008d0 <collectGitcounts+0x78>)
 80008a0:	f7ff fe4e 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 80008a4:	2102      	movs	r1, #2
 80008a6:	480b      	ldr	r0, [pc, #44]	; (80008d4 <collectGitcounts+0x7c>)
 80008a8:	f7ff fe4a 	bl	8000540 <uartTransmit>
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	08007240 	.word	0x08007240
 80008b4:	08007254 	.word	0x08007254
 80008b8:	08007258 	.word	0x08007258
 80008bc:	08007270 	.word	0x08007270
 80008c0:	08007274 	.word	0x08007274
 80008c4:	08007290 	.word	0x08007290
 80008c8:	080071a0 	.word	0x080071a0
 80008cc:	08007294 	.word	0x08007294
 80008d0:	080071c0 	.word	0x080071c0
 80008d4:	08007298 	.word	0x08007298

080008d8 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 80008dc:	2111      	movs	r1, #17
 80008de:	480e      	ldr	r0, [pc, #56]	; (8000918 <collectSystemInfo+0x40>)
 80008e0:	f7ff fe2e 	bl	8000540 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 80008e4:	f7ff fe60 	bl	80005a8 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 80008e8:	2111      	movs	r1, #17
 80008ea:	480c      	ldr	r0, [pc, #48]	; (800091c <collectSystemInfo+0x44>)
 80008ec:	f7ff fe28 	bl	8000540 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 80008f0:	f7ff ff40 	bl	8000774 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 80008f4:	2113      	movs	r1, #19
 80008f6:	480a      	ldr	r0, [pc, #40]	; (8000920 <collectSystemInfo+0x48>)
 80008f8:	f7ff fe22 	bl	8000540 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 80008fc:	f7ff fee6 	bl	80006cc <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 8000900:	2113      	movs	r1, #19
 8000902:	4808      	ldr	r0, [pc, #32]	; (8000924 <collectSystemInfo+0x4c>)
 8000904:	f7ff fe1c 	bl	8000540 <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 8000908:	f7ff ffa6 	bl	8000858 <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 800090c:	2103      	movs	r1, #3
 800090e:	4806      	ldr	r0, [pc, #24]	; (8000928 <collectSystemInfo+0x50>)
 8000910:	f7ff fe16 	bl	8000540 <uartTransmit>
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	0800729c 	.word	0x0800729c
 800091c:	080072b0 	.word	0x080072b0
 8000920:	080072c4 	.word	0x080072c4
 8000924:	080072d8 	.word	0x080072d8
 8000928:	080072ec 	.word	0x080072ec

0800092c <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 8000932:	2300      	movs	r3, #0
 8000934:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8000936:	4b25      	ldr	r3, [pc, #148]	; (80009cc <readResetSource+0xa0>)
 8000938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800093a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800093e:	2b00      	cmp	r3, #0
 8000940:	d002      	beq.n	8000948 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	3301      	adds	r3, #1
 8000946:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8000948:	4b20      	ldr	r3, [pc, #128]	; (80009cc <readResetSource+0xa0>)
 800094a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800094c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000950:	2b00      	cmp	r3, #0
 8000952:	d002      	beq.n	800095a <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	3302      	adds	r3, #2
 8000958:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <readResetSource+0xa0>)
 800095c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800095e:	2b00      	cmp	r3, #0
 8000960:	da02      	bge.n	8000968 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	3304      	adds	r3, #4
 8000966:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <readResetSource+0xa0>)
 800096a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800096c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000970:	2b00      	cmp	r3, #0
 8000972:	d002      	beq.n	800097a <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	3308      	adds	r3, #8
 8000978:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <readResetSource+0xa0>)
 800097c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800097e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000982:	2b00      	cmp	r3, #0
 8000984:	d002      	beq.n	800098c <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	3310      	adds	r3, #16
 800098a:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <readResetSource+0xa0>)
 800098e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000994:	2b00      	cmp	r3, #0
 8000996:	d002      	beq.n	800099e <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	3320      	adds	r3, #32
 800099c:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <readResetSource+0xa0>)
 80009a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d002      	beq.n	80009b0 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	3340      	adds	r3, #64	; 0x40
 80009ae:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <readResetSource+0xa0>)
 80009b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009b4:	4a05      	ldr	r2, [pc, #20]	; (80009cc <readResetSource+0xa0>)
 80009b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009ba:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 80009bc:	79fb      	ldrb	r3, [r7, #7]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800

080009d0 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 80009da:	2106      	movs	r1, #6
 80009dc:	482a      	ldr	r0, [pc, #168]	; (8000a88 <printResetSource+0xb8>)
 80009de:	f7ff fdaf 	bl	8000540 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d104      	bne.n	80009f2 <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 80009e8:	210f      	movs	r1, #15
 80009ea:	4828      	ldr	r0, [pc, #160]	; (8000a8c <printResetSource+0xbc>)
 80009ec:	f7ff fda8 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 80009f0:	e046      	b.n	8000a80 <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d003      	beq.n	8000a04 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 80009fc:	2118      	movs	r1, #24
 80009fe:	4824      	ldr	r0, [pc, #144]	; (8000a90 <printResetSource+0xc0>)
 8000a00:	f7ff fd9e 	bl	8000540 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d003      	beq.n	8000a16 <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8000a0e:	2116      	movs	r1, #22
 8000a10:	4820      	ldr	r0, [pc, #128]	; (8000a94 <printResetSource+0xc4>)
 8000a12:	f7ff fd95 	bl	8000540 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	f003 0304 	and.w	r3, r3, #4
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d003      	beq.n	8000a28 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8000a20:	210a      	movs	r1, #10
 8000a22:	481d      	ldr	r0, [pc, #116]	; (8000a98 <printResetSource+0xc8>)
 8000a24:	f7ff fd8c 	bl	8000540 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	f003 0308 	and.w	r3, r3, #8
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d003      	beq.n	8000a3a <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 8000a32:	2110      	movs	r1, #16
 8000a34:	4819      	ldr	r0, [pc, #100]	; (8000a9c <printResetSource+0xcc>)
 8000a36:	f7ff fd83 	bl	8000540 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	f003 0310 	and.w	r3, r3, #16
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d003      	beq.n	8000a4c <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 8000a44:	210f      	movs	r1, #15
 8000a46:	4816      	ldr	r0, [pc, #88]	; (8000aa0 <printResetSource+0xd0>)
 8000a48:	f7ff fd7a 	bl	8000540 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	f003 0320 	and.w	r3, r3, #32
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d003      	beq.n	8000a5e <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 8000a56:	210f      	movs	r1, #15
 8000a58:	4812      	ldr	r0, [pc, #72]	; (8000aa4 <printResetSource+0xd4>)
 8000a5a:	f7ff fd71 	bl	8000540 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d003      	beq.n	8000a70 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8000a68:	210a      	movs	r1, #10
 8000a6a:	480f      	ldr	r0, [pc, #60]	; (8000aa8 <printResetSource+0xd8>)
 8000a6c:	f7ff fd68 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8000a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	da03      	bge.n	8000a80 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8000a78:	2105      	movs	r1, #5
 8000a7a:	480c      	ldr	r0, [pc, #48]	; (8000aac <printResetSource+0xdc>)
 8000a7c:	f7ff fd60 	bl	8000540 <uartTransmit>
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	080072f0 	.word	0x080072f0
 8000a8c:	080072f8 	.word	0x080072f8
 8000a90:	08007308 	.word	0x08007308
 8000a94:	08007324 	.word	0x08007324
 8000a98:	0800733c 	.word	0x0800733c
 8000a9c:	08007348 	.word	0x08007348
 8000aa0:	0800735c 	.word	0x0800735c
 8000aa4:	0800736c 	.word	0x0800736c
 8000aa8:	0800737c 	.word	0x0800737c
 8000aac:	08007388 	.word	0x08007388

08000ab0 <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (status == HAL_OK) {													// HAL OK
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d104      	bne.n	8000aca <hal_error+0x1a>
		uartTransmit("HAL OK\n", 7);
 8000ac0:	2107      	movs	r1, #7
 8000ac2:	480f      	ldr	r0, [pc, #60]	; (8000b00 <hal_error+0x50>)
 8000ac4:	f7ff fd3c 	bl	8000540 <uartTransmit>
	}
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 8000ac8:	e016      	b.n	8000af8 <hal_error+0x48>
	else if (status == HAL_ERROR) {											// HAL Error
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d104      	bne.n	8000ada <hal_error+0x2a>
		uartTransmit("HAL ERROR\n", 10);
 8000ad0:	210a      	movs	r1, #10
 8000ad2:	480c      	ldr	r0, [pc, #48]	; (8000b04 <hal_error+0x54>)
 8000ad4:	f7ff fd34 	bl	8000540 <uartTransmit>
}
 8000ad8:	e00e      	b.n	8000af8 <hal_error+0x48>
	else if (status == HAL_BUSY) {											// HAL Beschaeftigt
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d104      	bne.n	8000aea <hal_error+0x3a>
		uartTransmit("HAL BUSY\n", 9);
 8000ae0:	2109      	movs	r1, #9
 8000ae2:	4809      	ldr	r0, [pc, #36]	; (8000b08 <hal_error+0x58>)
 8000ae4:	f7ff fd2c 	bl	8000540 <uartTransmit>
}
 8000ae8:	e006      	b.n	8000af8 <hal_error+0x48>
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	2b03      	cmp	r3, #3
 8000aee:	d103      	bne.n	8000af8 <hal_error+0x48>
		uartTransmit("HAL TIMEOUT\n", 12);
 8000af0:	210c      	movs	r1, #12
 8000af2:	4806      	ldr	r0, [pc, #24]	; (8000b0c <hal_error+0x5c>)
 8000af4:	f7ff fd24 	bl	8000540 <uartTransmit>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	08007390 	.word	0x08007390
 8000b04:	08007398 	.word	0x08007398
 8000b08:	080073a4 	.word	0x080073a4
 8000b0c:	080073b0 	.word	0x080073b0

08000b10 <imd_status>:
//----------------------------------------------------------------------

// IMD Status einlesen
//----------------------------------------------------------------------
void imd_status(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	// Einlesen von IMD Ok Pin
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);		// IMD OK einlesen
 8000b14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b18:	48c2      	ldr	r0, [pc, #776]	; (8000e24 <imd_status+0x314>)
 8000b1a:	f002 ff3b 	bl	8003994 <HAL_GPIO_ReadPin>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	b2d9      	uxtb	r1, r3
 8000b26:	4ac0      	ldr	r2, [pc, #768]	; (8000e28 <imd_status+0x318>)
 8000b28:	7813      	ldrb	r3, [r2, #0]
 8000b2a:	f361 0300 	bfi	r3, r1, #0, #1
 8000b2e:	7013      	strb	r3, [r2, #0]

	// Abfrage ob IMD Ok ist
	if(sdc_in.IMD_OK_IN == 1)
 8000b30:	4bbd      	ldr	r3, [pc, #756]	; (8000e28 <imd_status+0x318>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d00e      	beq.n	8000b5c <imd_status+0x4c>
	{
		// Ausgabe IMD OK kommend BMS
		system_out.ImdOK = 1;
 8000b3e:	4abb      	ldr	r2, [pc, #748]	; (8000e2c <imd_status+0x31c>)
 8000b40:	7813      	ldrb	r3, [r2, #0]
 8000b42:	f043 0302 	orr.w	r3, r3, #2
 8000b46:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(IMD_OK_OUT_GPIO_Port, IMD_OK_OUT_Pin, system_out.ImdOK);	// IMD Status von BMS ausgeben
 8000b48:	4bb8      	ldr	r3, [pc, #736]	; (8000e2c <imd_status+0x31c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	461a      	mov	r2, r3
 8000b54:	2102      	movs	r1, #2
 8000b56:	48b6      	ldr	r0, [pc, #728]	; (8000e30 <imd_status+0x320>)
 8000b58:	f002 ff34 	bl	80039c4 <HAL_GPIO_WritePin>
	}

	// IMD ist nicht OK
	if (sdc_in.IMD_OK_IN != 1)
 8000b5c:	4bb2      	ldr	r3, [pc, #712]	; (8000e28 <imd_status+0x318>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 8176 	bne.w	8000e58 <imd_status+0x348>
	{
#ifdef DEBUG_IMD
		// Ausgabe Frequenz
		uartTransmit("Frequenz: \t", 11);
 8000b6c:	210b      	movs	r1, #11
 8000b6e:	48b1      	ldr	r0, [pc, #708]	; (8000e34 <imd_status+0x324>)
 8000b70:	f7ff fce6 	bl	8000540 <uartTransmit>
		uartTransmitNumber(imd.Frequency, 10);
 8000b74:	4bb0      	ldr	r3, [pc, #704]	; (8000e38 <imd_status+0x328>)
 8000b76:	785b      	ldrb	r3, [r3, #1]
 8000b78:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	210a      	movs	r1, #10
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fcf1 	bl	8000568 <uartTransmitNumber>
		uartTransmit("\n", 1);
 8000b86:	2101      	movs	r1, #1
 8000b88:	48ac      	ldr	r0, [pc, #688]	; (8000e3c <imd_status+0x32c>)
 8000b8a:	f7ff fcd9 	bl	8000540 <uartTransmit>

		// Ausgabe DutyCycle
		uartTransmit("DutyCycle: \t", 12);
 8000b8e:	210c      	movs	r1, #12
 8000b90:	48ab      	ldr	r0, [pc, #684]	; (8000e40 <imd_status+0x330>)
 8000b92:	f7ff fcd5 	bl	8000540 <uartTransmit>
		uartTransmitNumber(imd.DutyCycle, 10);
 8000b96:	4ba8      	ldr	r3, [pc, #672]	; (8000e38 <imd_status+0x328>)
 8000b98:	789b      	ldrb	r3, [r3, #2]
 8000b9a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	210a      	movs	r1, #10
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fce0 	bl	8000568 <uartTransmitNumber>
		uartTransmit("\n", 1);
 8000ba8:	2101      	movs	r1, #1
 8000baa:	48a4      	ldr	r0, [pc, #656]	; (8000e3c <imd_status+0x32c>)
 8000bac:	f7ff fcc8 	bl	8000540 <uartTransmit>
#endif

		// IMD PWM abfragen
		switch (imd.Frequency)
 8000bb0:	4ba1      	ldr	r3, [pc, #644]	; (8000e38 <imd_status+0x328>)
 8000bb2:	785b      	ldrb	r3, [r3, #1]
 8000bb4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	2b32      	cmp	r3, #50	; 0x32
 8000bbc:	f300 8146 	bgt.w	8000e4c <imd_status+0x33c>
 8000bc0:	2b14      	cmp	r3, #20
 8000bc2:	da04      	bge.n	8000bce <imd_status+0xbe>
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d047      	beq.n	8000c58 <imd_status+0x148>
 8000bc8:	2b0a      	cmp	r3, #10
 8000bca:	d067      	beq.n	8000c9c <imd_status+0x18c>
 8000bcc:	e13e      	b.n	8000e4c <imd_status+0x33c>
 8000bce:	3b14      	subs	r3, #20
 8000bd0:	2b1e      	cmp	r3, #30
 8000bd2:	f200 813b 	bhi.w	8000e4c <imd_status+0x33c>
 8000bd6:	a201      	add	r2, pc, #4	; (adr r2, 8000bdc <imd_status+0xcc>)
 8000bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bdc:	08000d07 	.word	0x08000d07
 8000be0:	08000e4d 	.word	0x08000e4d
 8000be4:	08000e4d 	.word	0x08000e4d
 8000be8:	08000e4d 	.word	0x08000e4d
 8000bec:	08000e4d 	.word	0x08000e4d
 8000bf0:	08000e4d 	.word	0x08000e4d
 8000bf4:	08000e4d 	.word	0x08000e4d
 8000bf8:	08000e4d 	.word	0x08000e4d
 8000bfc:	08000e4d 	.word	0x08000e4d
 8000c00:	08000e4d 	.word	0x08000e4d
 8000c04:	08000d65 	.word	0x08000d65
 8000c08:	08000e4d 	.word	0x08000e4d
 8000c0c:	08000e4d 	.word	0x08000e4d
 8000c10:	08000e4d 	.word	0x08000e4d
 8000c14:	08000e4d 	.word	0x08000e4d
 8000c18:	08000e4d 	.word	0x08000e4d
 8000c1c:	08000e4d 	.word	0x08000e4d
 8000c20:	08000e4d 	.word	0x08000e4d
 8000c24:	08000e4d 	.word	0x08000e4d
 8000c28:	08000e4d 	.word	0x08000e4d
 8000c2c:	08000db7 	.word	0x08000db7
 8000c30:	08000e4d 	.word	0x08000e4d
 8000c34:	08000e4d 	.word	0x08000e4d
 8000c38:	08000e4d 	.word	0x08000e4d
 8000c3c:	08000e4d 	.word	0x08000e4d
 8000c40:	08000e4d 	.word	0x08000e4d
 8000c44:	08000e4d 	.word	0x08000e4d
 8000c48:	08000e4d 	.word	0x08000e4d
 8000c4c:	08000e4d 	.word	0x08000e4d
 8000c50:	08000e4d 	.word	0x08000e4d
 8000c54:	08000ded 	.word	0x08000ded
		{
			case 0:																	// Case 0 Hz
				// PWM Pin einlesen
				system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);
 8000c58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c5c:	4871      	ldr	r0, [pc, #452]	; (8000e24 <imd_status+0x314>)
 8000c5e:	f002 fe99 	bl	8003994 <HAL_GPIO_ReadPin>
 8000c62:	4603      	mov	r3, r0
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	b2d9      	uxtb	r1, r3
 8000c6a:	4a76      	ldr	r2, [pc, #472]	; (8000e44 <imd_status+0x334>)
 8000c6c:	7813      	ldrb	r3, [r2, #0]
 8000c6e:	f361 03c3 	bfi	r3, r1, #3, #1
 8000c72:	7013      	strb	r3, [r2, #0]

				// Wenn IMD 1 ist
				if (system_in.IMD_PWM == 1)
 8000c74:	4b73      	ldr	r3, [pc, #460]	; (8000e44 <imd_status+0x334>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	f003 0308 	and.w	r3, r3, #8
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d006      	beq.n	8000c90 <imd_status+0x180>
				{
					// IMD Status speichern
					system_in.IMD_PWM_STATUS = IMD_KURZSCHLUSS_KL15;				// Kurzschluss von HV nach Pluspol
 8000c82:	4a70      	ldr	r2, [pc, #448]	; (8000e44 <imd_status+0x334>)
 8000c84:	7813      	ldrb	r3, [r2, #0]
 8000c86:	2106      	movs	r1, #6
 8000c88:	f361 0302 	bfi	r3, r1, #0, #3
 8000c8c:	7013      	strb	r3, [r2, #0]
				else
				{
					// IMD Status speichern
					system_in.IMD_PWM_STATUS = IMD_KURZSCHLUSS_GND;					// Kurzschluss von HV nach Masse
				}
				break;
 8000c8e:	e16d      	b.n	8000f6c <imd_status+0x45c>
					system_in.IMD_PWM_STATUS = IMD_KURZSCHLUSS_GND;					// Kurzschluss von HV nach Masse
 8000c90:	4a6c      	ldr	r2, [pc, #432]	; (8000e44 <imd_status+0x334>)
 8000c92:	7813      	ldrb	r3, [r2, #0]
 8000c94:	f36f 0302 	bfc	r3, #0, #3
 8000c98:	7013      	strb	r3, [r2, #0]
				break;
 8000c9a:	e167      	b.n	8000f6c <imd_status+0x45c>

			case 10:																// Case 10 Hz
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_NORMAL;
 8000c9c:	4a69      	ldr	r2, [pc, #420]	; (8000e44 <imd_status+0x334>)
 8000c9e:	7813      	ldrb	r3, [r2, #0]
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	f361 0302 	bfi	r3, r1, #0, #3
 8000ca6:	7013      	strb	r3, [r2, #0]

				// DutyCycle abfragen
				if (imd.DutyCycle > 5 && imd.DutyCycle < 95)						// IMD PWM
 8000ca8:	4b63      	ldr	r3, [pc, #396]	; (8000e38 <imd_status+0x328>)
 8000caa:	789b      	ldrb	r3, [r3, #2]
 8000cac:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b05      	cmp	r3, #5
 8000cb4:	d921      	bls.n	8000cfa <imd_status+0x1ea>
 8000cb6:	4b60      	ldr	r3, [pc, #384]	; (8000e38 <imd_status+0x328>)
 8000cb8:	789b      	ldrb	r3, [r3, #2]
 8000cba:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	2b5e      	cmp	r3, #94	; 0x5e
 8000cc2:	d81a      	bhi.n	8000cfa <imd_status+0x1ea>
				{
					// Widerstand berechnen
					imd.Resistanc = 90 * 1200 / (imd.DutyCycle - 5) - 1200;			// Angabe in kOhm
 8000cc4:	4b5c      	ldr	r3, [pc, #368]	; (8000e38 <imd_status+0x328>)
 8000cc6:	789b      	ldrb	r3, [r3, #2]
 8000cc8:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	3b05      	subs	r3, #5
 8000cd0:	4a5d      	ldr	r2, [pc, #372]	; (8000e48 <imd_status+0x338>)
 8000cd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cd6:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8000cda:	f3c3 0111 	ubfx	r1, r3, #0, #18
 8000cde:	4a56      	ldr	r2, [pc, #344]	; (8000e38 <imd_status+0x328>)
 8000ce0:	6853      	ldr	r3, [r2, #4]
 8000ce2:	f361 0311 	bfi	r3, r1, #0, #18
 8000ce6:	6053      	str	r3, [r2, #4]

#ifdef DEBUG_IMD
					// Ausgabe Widerstandswert
					uartTransmitNumber(imd.Resistanc, 10);
 8000ce8:	4b53      	ldr	r3, [pc, #332]	; (8000e38 <imd_status+0x328>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8000cf0:	210a      	movs	r1, #10
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fc38 	bl	8000568 <uartTransmitNumber>
				else																// IMD Invalid
				{
					// IMD Status speichern
					system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;						// Fehlerausgabe
				}
				break;
 8000cf8:	e138      	b.n	8000f6c <imd_status+0x45c>
					system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;						// Fehlerausgabe
 8000cfa:	4a52      	ldr	r2, [pc, #328]	; (8000e44 <imd_status+0x334>)
 8000cfc:	7813      	ldrb	r3, [r2, #0]
 8000cfe:	f043 0307 	orr.w	r3, r3, #7
 8000d02:	7013      	strb	r3, [r2, #0]
				break;
 8000d04:	e132      	b.n	8000f6c <imd_status+0x45c>

			case 20:																// Case 20 Hz
				// DutyCycle abfragen
				if (imd.DutyCycle > 5 && imd.DutyCycle < 95)						// IMD PWM
 8000d06:	4b4c      	ldr	r3, [pc, #304]	; (8000e38 <imd_status+0x328>)
 8000d08:	789b      	ldrb	r3, [r3, #2]
 8000d0a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b05      	cmp	r3, #5
 8000d12:	d921      	bls.n	8000d58 <imd_status+0x248>
 8000d14:	4b48      	ldr	r3, [pc, #288]	; (8000e38 <imd_status+0x328>)
 8000d16:	789b      	ldrb	r3, [r3, #2]
 8000d18:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b5e      	cmp	r3, #94	; 0x5e
 8000d20:	d81a      	bhi.n	8000d58 <imd_status+0x248>
				{
					// Widerstand berechnen
					imd.Resistanc = 90 * 1200 / (imd.DutyCycle - 5) - 1200;			// Angabe in kOhm
 8000d22:	4b45      	ldr	r3, [pc, #276]	; (8000e38 <imd_status+0x328>)
 8000d24:	789b      	ldrb	r3, [r3, #2]
 8000d26:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	3b05      	subs	r3, #5
 8000d2e:	4a46      	ldr	r2, [pc, #280]	; (8000e48 <imd_status+0x338>)
 8000d30:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d34:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8000d38:	f3c3 0111 	ubfx	r1, r3, #0, #18
 8000d3c:	4a3e      	ldr	r2, [pc, #248]	; (8000e38 <imd_status+0x328>)
 8000d3e:	6853      	ldr	r3, [r2, #4]
 8000d40:	f361 0311 	bfi	r3, r1, #0, #18
 8000d44:	6053      	str	r3, [r2, #4]

#ifdef DEBUG_IMD
					// Ausgabe Widerstandswert
					uartTransmitNumber(imd.Resistanc, 10);
 8000d46:	4b3c      	ldr	r3, [pc, #240]	; (8000e38 <imd_status+0x328>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8000d4e:	210a      	movs	r1, #10
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fc09 	bl	8000568 <uartTransmitNumber>
				else																// IMD Invalid
				{
					// IMD Status speichern
					system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;						// Fehlerausgabe
				}
				break;
 8000d56:	e109      	b.n	8000f6c <imd_status+0x45c>
					system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;						// Fehlerausgabe
 8000d58:	4a3a      	ldr	r2, [pc, #232]	; (8000e44 <imd_status+0x334>)
 8000d5a:	7813      	ldrb	r3, [r2, #0]
 8000d5c:	f043 0307 	orr.w	r3, r3, #7
 8000d60:	7013      	strb	r3, [r2, #0]
				break;
 8000d62:	e103      	b.n	8000f6c <imd_status+0x45c>

			case 30:																// Case 30 Hz
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_SCHNELLSTART;
 8000d64:	4a37      	ldr	r2, [pc, #220]	; (8000e44 <imd_status+0x334>)
 8000d66:	7813      	ldrb	r3, [r2, #0]
 8000d68:	2103      	movs	r1, #3
 8000d6a:	f361 0302 	bfi	r3, r1, #0, #3
 8000d6e:	7013      	strb	r3, [r2, #0]

				// DutyCycle abfragen
				if (imd.DutyCycle > 5 && imd.DutyCycle < 11)						// IMD Gut
 8000d70:	4b31      	ldr	r3, [pc, #196]	; (8000e38 <imd_status+0x328>)
 8000d72:	789b      	ldrb	r3, [r3, #2]
 8000d74:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b05      	cmp	r3, #5
 8000d7c:	d906      	bls.n	8000d8c <imd_status+0x27c>
 8000d7e:	4b2e      	ldr	r3, [pc, #184]	; (8000e38 <imd_status+0x328>)
 8000d80:	789b      	ldrb	r3, [r3, #2]
 8000d82:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	2b0a      	cmp	r3, #10
 8000d8a:	d913      	bls.n	8000db4 <imd_status+0x2a4>
				{

				}
				else if (imd.DutyCycle > 89 && imd.DutyCycle < 95)					// IMD Schlecht
 8000d8c:	4b2a      	ldr	r3, [pc, #168]	; (8000e38 <imd_status+0x328>)
 8000d8e:	789b      	ldrb	r3, [r3, #2]
 8000d90:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b59      	cmp	r3, #89	; 0x59
 8000d98:	d906      	bls.n	8000da8 <imd_status+0x298>
 8000d9a:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <imd_status+0x328>)
 8000d9c:	789b      	ldrb	r3, [r3, #2]
 8000d9e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	2b5e      	cmp	r3, #94	; 0x5e
 8000da6:	d905      	bls.n	8000db4 <imd_status+0x2a4>
				}
				// Falls DutyCycle nicht im Wertebereich ist
				else																// IMD Invalid
				{
					// IMD Status speichern
					system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;						// Fehlerausgabe
 8000da8:	4a26      	ldr	r2, [pc, #152]	; (8000e44 <imd_status+0x334>)
 8000daa:	7813      	ldrb	r3, [r2, #0]
 8000dac:	f043 0307 	orr.w	r3, r3, #7
 8000db0:	7013      	strb	r3, [r2, #0]
				}
				break;
 8000db2:	e0db      	b.n	8000f6c <imd_status+0x45c>
 8000db4:	e0da      	b.n	8000f6c <imd_status+0x45c>

			case 40:																// Case 40 Hz
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_GERAETEFEHLER;
 8000db6:	4a23      	ldr	r2, [pc, #140]	; (8000e44 <imd_status+0x334>)
 8000db8:	7813      	ldrb	r3, [r2, #0]
 8000dba:	2104      	movs	r1, #4
 8000dbc:	f361 0302 	bfi	r3, r1, #0, #3
 8000dc0:	7013      	strb	r3, [r2, #0]

				// DutyCyle abfragen
				if (imd.DutyCycle > 47 && imd.DutyCycle < 53)						// IMD PWM
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <imd_status+0x328>)
 8000dc4:	789b      	ldrb	r3, [r3, #2]
 8000dc6:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b2f      	cmp	r3, #47	; 0x2f
 8000dce:	d906      	bls.n	8000dde <imd_status+0x2ce>
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <imd_status+0x328>)
 8000dd2:	789b      	ldrb	r3, [r3, #2]
 8000dd4:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b34      	cmp	r3, #52	; 0x34
 8000ddc:	d905      	bls.n	8000dea <imd_status+0x2da>
				}
				// Falls DutyCycle nicht im Wertebereich ist
				else																// IMD Invalid
				{
					// IMD Status speichern
					system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;						// Fehlerausgabe
 8000dde:	4a19      	ldr	r2, [pc, #100]	; (8000e44 <imd_status+0x334>)
 8000de0:	7813      	ldrb	r3, [r2, #0]
 8000de2:	f043 0307 	orr.w	r3, r3, #7
 8000de6:	7013      	strb	r3, [r2, #0]
				}
				break;
 8000de8:	e0c0      	b.n	8000f6c <imd_status+0x45c>
 8000dea:	e0bf      	b.n	8000f6c <imd_status+0x45c>

			case 50:																// Case 50 Hz
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_ANSCHLUSSFEHLER_ERDE;
 8000dec:	4a15      	ldr	r2, [pc, #84]	; (8000e44 <imd_status+0x334>)
 8000dee:	7813      	ldrb	r3, [r2, #0]
 8000df0:	2105      	movs	r1, #5
 8000df2:	f361 0302 	bfi	r3, r1, #0, #3
 8000df6:	7013      	strb	r3, [r2, #0]

				// DutyCycle abfragen
				if (imd.DutyCycle > 47 && imd.DutyCycle < 53)						// IMD PWM
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <imd_status+0x328>)
 8000dfa:	789b      	ldrb	r3, [r3, #2]
 8000dfc:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b2f      	cmp	r3, #47	; 0x2f
 8000e04:	d906      	bls.n	8000e14 <imd_status+0x304>
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <imd_status+0x328>)
 8000e08:	789b      	ldrb	r3, [r3, #2]
 8000e0a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2b34      	cmp	r3, #52	; 0x34
 8000e12:	d905      	bls.n	8000e20 <imd_status+0x310>
				}
				// Fall DutyCycle nicht im Wertebereich ist
				else																// IMD Invalid
				{
					// IMD Status speichern
					system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;						// Fehlerausgabe
 8000e14:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <imd_status+0x334>)
 8000e16:	7813      	ldrb	r3, [r2, #0]
 8000e18:	f043 0307 	orr.w	r3, r3, #7
 8000e1c:	7013      	strb	r3, [r2, #0]
				}
				break;
 8000e1e:	e0a5      	b.n	8000f6c <imd_status+0x45c>
 8000e20:	e0a4      	b.n	8000f6c <imd_status+0x45c>
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000
 8000e28:	20000054 	.word	0x20000054
 8000e2c:	20000040 	.word	0x20000040
 8000e30:	40020000 	.word	0x40020000
 8000e34:	080073ec 	.word	0x080073ec
 8000e38:	20000038 	.word	0x20000038
 8000e3c:	080073f8 	.word	0x080073f8
 8000e40:	080073fc 	.word	0x080073fc
 8000e44:	20000044 	.word	0x20000044
 8000e48:	0001a5e0 	.word	0x0001a5e0

			default:																// Case Default Fehler
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;							// Fehlerausgabe
 8000e4c:	4a48      	ldr	r2, [pc, #288]	; (8000f70 <imd_status+0x460>)
 8000e4e:	7813      	ldrb	r3, [r2, #0]
 8000e50:	f043 0307 	orr.w	r3, r3, #7
 8000e54:	7013      	strb	r3, [r2, #0]
				break;
 8000e56:	e089      	b.n	8000f6c <imd_status+0x45c>
		}
	}
	else
	{
		switch (imd.Frequency)
 8000e58:	4b46      	ldr	r3, [pc, #280]	; (8000f74 <imd_status+0x464>)
 8000e5a:	785b      	ldrb	r3, [r3, #1]
 8000e5c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b0a      	cmp	r3, #10
 8000e64:	d002      	beq.n	8000e6c <imd_status+0x35c>
 8000e66:	2b14      	cmp	r3, #20
 8000e68:	d035      	beq.n	8000ed6 <imd_status+0x3c6>
 8000e6a:	e069      	b.n	8000f40 <imd_status+0x430>
		{
			case 10:																// Case 10 Hz
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_NORMAL;
 8000e6c:	4a40      	ldr	r2, [pc, #256]	; (8000f70 <imd_status+0x460>)
 8000e6e:	7813      	ldrb	r3, [r2, #0]
 8000e70:	2101      	movs	r1, #1
 8000e72:	f361 0302 	bfi	r3, r1, #0, #3
 8000e76:	7013      	strb	r3, [r2, #0]

				// DutyCycle abfragen
				if (imd.DutyCycle > 5 && imd.DutyCycle < 95)						// IMD PWM
 8000e78:	4b3e      	ldr	r3, [pc, #248]	; (8000f74 <imd_status+0x464>)
 8000e7a:	789b      	ldrb	r3, [r3, #2]
 8000e7c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b05      	cmp	r3, #5
 8000e84:	d921      	bls.n	8000eca <imd_status+0x3ba>
 8000e86:	4b3b      	ldr	r3, [pc, #236]	; (8000f74 <imd_status+0x464>)
 8000e88:	789b      	ldrb	r3, [r3, #2]
 8000e8a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b5e      	cmp	r3, #94	; 0x5e
 8000e92:	d81a      	bhi.n	8000eca <imd_status+0x3ba>
				{
					// Widerstand berechnen
					imd.Resistanc = 90 * 1200 / (imd.DutyCycle - 5) - 1200;			// Angabe in kOhm
 8000e94:	4b37      	ldr	r3, [pc, #220]	; (8000f74 <imd_status+0x464>)
 8000e96:	789b      	ldrb	r3, [r3, #2]
 8000e98:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	3b05      	subs	r3, #5
 8000ea0:	4a35      	ldr	r2, [pc, #212]	; (8000f78 <imd_status+0x468>)
 8000ea2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ea6:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8000eaa:	f3c3 0111 	ubfx	r1, r3, #0, #18
 8000eae:	4a31      	ldr	r2, [pc, #196]	; (8000f74 <imd_status+0x464>)
 8000eb0:	6853      	ldr	r3, [r2, #4]
 8000eb2:	f361 0311 	bfi	r3, r1, #0, #18
 8000eb6:	6053      	str	r3, [r2, #4]

#ifdef DEBUG_IMD
					// Ausgabe Widerstandswert
					uartTransmitNumber(imd.Resistanc, 10);
 8000eb8:	4b2e      	ldr	r3, [pc, #184]	; (8000f74 <imd_status+0x464>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8000ec0:	210a      	movs	r1, #10
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fb50 	bl	8000568 <uartTransmitNumber>
				else																// IMD Invalid
				{
					// IMD Status speichern
					system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;						// Fehlerausgabe
				}
				break;
 8000ec8:	e040      	b.n	8000f4c <imd_status+0x43c>
					system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;						// Fehlerausgabe
 8000eca:	4a29      	ldr	r2, [pc, #164]	; (8000f70 <imd_status+0x460>)
 8000ecc:	7813      	ldrb	r3, [r2, #0]
 8000ece:	f043 0307 	orr.w	r3, r3, #7
 8000ed2:	7013      	strb	r3, [r2, #0]
				break;
 8000ed4:	e03a      	b.n	8000f4c <imd_status+0x43c>

			case 20:
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_UNTERSPANNUNG;
 8000ed6:	4a26      	ldr	r2, [pc, #152]	; (8000f70 <imd_status+0x460>)
 8000ed8:	7813      	ldrb	r3, [r2, #0]
 8000eda:	2102      	movs	r1, #2
 8000edc:	f361 0302 	bfi	r3, r1, #0, #3
 8000ee0:	7013      	strb	r3, [r2, #0]

				// DutyCycle abfragen
				if (imd.DutyCycle > 5 && imd.DutyCycle < 95)						// IMD PWM
 8000ee2:	4b24      	ldr	r3, [pc, #144]	; (8000f74 <imd_status+0x464>)
 8000ee4:	789b      	ldrb	r3, [r3, #2]
 8000ee6:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	2b05      	cmp	r3, #5
 8000eee:	d921      	bls.n	8000f34 <imd_status+0x424>
 8000ef0:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <imd_status+0x464>)
 8000ef2:	789b      	ldrb	r3, [r3, #2]
 8000ef4:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b5e      	cmp	r3, #94	; 0x5e
 8000efc:	d81a      	bhi.n	8000f34 <imd_status+0x424>
				{
					// Widerstand berechnen
					imd.Resistanc = 90 * 1200 / (imd.DutyCycle - 5) - 1200;			// Angabe in kOhm
 8000efe:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <imd_status+0x464>)
 8000f00:	789b      	ldrb	r3, [r3, #2]
 8000f02:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	3b05      	subs	r3, #5
 8000f0a:	4a1b      	ldr	r2, [pc, #108]	; (8000f78 <imd_status+0x468>)
 8000f0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f10:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8000f14:	f3c3 0111 	ubfx	r1, r3, #0, #18
 8000f18:	4a16      	ldr	r2, [pc, #88]	; (8000f74 <imd_status+0x464>)
 8000f1a:	6853      	ldr	r3, [r2, #4]
 8000f1c:	f361 0311 	bfi	r3, r1, #0, #18
 8000f20:	6053      	str	r3, [r2, #4]

#ifdef DEBUG_IMD
					// Ausgabe Widerstandswert
					uartTransmitNumber(imd.Resistanc, 10);
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <imd_status+0x464>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8000f2a:	210a      	movs	r1, #10
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fb1b 	bl	8000568 <uartTransmitNumber>
				else																// IMD Invalid
				{
					// IMD Status speichern
					system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;						// Fehlerausgabe
				}
				break;
 8000f32:	e00b      	b.n	8000f4c <imd_status+0x43c>
					system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;						// Fehlerausgabe
 8000f34:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <imd_status+0x460>)
 8000f36:	7813      	ldrb	r3, [r2, #0]
 8000f38:	f043 0307 	orr.w	r3, r3, #7
 8000f3c:	7013      	strb	r3, [r2, #0]
				break;
 8000f3e:	e005      	b.n	8000f4c <imd_status+0x43c>

			default:																// Case Default Fehler
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;							// Fehlerausgabe
 8000f40:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <imd_status+0x460>)
 8000f42:	7813      	ldrb	r3, [r2, #0]
 8000f44:	f043 0307 	orr.w	r3, r3, #7
 8000f48:	7013      	strb	r3, [r2, #0]
				break;
 8000f4a:	bf00      	nop
		}

		// Ausgabe IMD nicht OK kommend BMS
		system_out.ImdOK = 0;
 8000f4c:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <imd_status+0x46c>)
 8000f4e:	7813      	ldrb	r3, [r2, #0]
 8000f50:	f36f 0341 	bfc	r3, #1, #1
 8000f54:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(IMD_OK_OUT_GPIO_Port, IMD_OK_OUT_Pin, system_out.ImdOK);	// IMD Status von BMS ausgeben
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <imd_status+0x46c>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	461a      	mov	r2, r3
 8000f62:	2102      	movs	r1, #2
 8000f64:	4806      	ldr	r0, [pc, #24]	; (8000f80 <imd_status+0x470>)
 8000f66:	f002 fd2d 	bl	80039c4 <HAL_GPIO_WritePin>
	}
}
 8000f6a:	bf00      	nop
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000044 	.word	0x20000044
 8000f74:	20000038 	.word	0x20000038
 8000f78:	0001a5e0 	.word	0x0001a5e0
 8000f7c:	20000040 	.word	0x20000040
 8000f80:	40020000 	.word	0x40020000

08000f84 <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 8000f88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f8c:	4850      	ldr	r0, [pc, #320]	; (80010d0 <readall_inputs+0x14c>)
 8000f8e:	f002 fd01 	bl	8003994 <HAL_GPIO_ReadPin>
 8000f92:	4603      	mov	r3, r0
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	b2d9      	uxtb	r1, r3
 8000f9a:	4a4e      	ldr	r2, [pc, #312]	; (80010d4 <readall_inputs+0x150>)
 8000f9c:	7813      	ldrb	r3, [r2, #0]
 8000f9e:	f361 03c3 	bfi	r3, r1, #3, #1
 8000fa2:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 8000fa4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa8:	484b      	ldr	r0, [pc, #300]	; (80010d8 <readall_inputs+0x154>)
 8000faa:	f002 fcf3 	bl	8003994 <HAL_GPIO_ReadPin>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	b2d9      	uxtb	r1, r3
 8000fb6:	4a47      	ldr	r2, [pc, #284]	; (80010d4 <readall_inputs+0x150>)
 8000fb8:	7813      	ldrb	r3, [r2, #0]
 8000fba:	f361 1345 	bfi	r3, r1, #5, #1
 8000fbe:	7013      	strb	r3, [r2, #0]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	4846      	ldr	r0, [pc, #280]	; (80010dc <readall_inputs+0x158>)
 8000fc4:	f002 fce6 	bl	8003994 <HAL_GPIO_ReadPin>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	b2d9      	uxtb	r1, r3
 8000fd0:	4a40      	ldr	r2, [pc, #256]	; (80010d4 <readall_inputs+0x150>)
 8000fd2:	7813      	ldrb	r3, [r2, #0]
 8000fd4:	f361 1386 	bfi	r3, r1, #6, #1
 8000fd8:	7013      	strb	r3, [r2, #0]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8000fda:	2104      	movs	r1, #4
 8000fdc:	483f      	ldr	r0, [pc, #252]	; (80010dc <readall_inputs+0x158>)
 8000fde:	f002 fcd9 	bl	8003994 <HAL_GPIO_ReadPin>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	b2d9      	uxtb	r1, r3
 8000fea:	4a3a      	ldr	r2, [pc, #232]	; (80010d4 <readall_inputs+0x150>)
 8000fec:	7813      	ldrb	r3, [r2, #0]
 8000fee:	f361 13c7 	bfi	r3, r1, #7, #1
 8000ff2:	7013      	strb	r3, [r2, #0]

	// SDC-Eingaenge einlesen
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);					// IMD OK, Akku
 8000ff4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff8:	4835      	ldr	r0, [pc, #212]	; (80010d0 <readall_inputs+0x14c>)
 8000ffa:	f002 fccb 	bl	8003994 <HAL_GPIO_ReadPin>
 8000ffe:	4603      	mov	r3, r0
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	b2d9      	uxtb	r1, r3
 8001006:	4a36      	ldr	r2, [pc, #216]	; (80010e0 <readall_inputs+0x15c>)
 8001008:	7813      	ldrb	r3, [r2, #0]
 800100a:	f361 0300 	bfi	r3, r1, #0, #1
 800100e:	7013      	strb	r3, [r2, #0]
	sdc_in.HVIL = HAL_GPIO_ReadPin(SENSE_SDC_HVIL_GPIO_Port, SENSE_SDC_HVIL_Pin);				// Shutdown-Circuit HVIL, OK
 8001010:	2108      	movs	r1, #8
 8001012:	482f      	ldr	r0, [pc, #188]	; (80010d0 <readall_inputs+0x14c>)
 8001014:	f002 fcbe 	bl	8003994 <HAL_GPIO_ReadPin>
 8001018:	4603      	mov	r3, r0
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	b2d9      	uxtb	r1, r3
 8001020:	4a2f      	ldr	r2, [pc, #188]	; (80010e0 <readall_inputs+0x15c>)
 8001022:	7813      	ldrb	r3, [r2, #0]
 8001024:	f361 0341 	bfi	r3, r1, #1, #1
 8001028:	7013      	strb	r3, [r2, #0]
	sdc_in.MotorSDC = HAL_GPIO_ReadPin(SENSE_SDC_MOTOR_GPIO_Port, SENSE_SDC_MOTOR_Pin);			// Shutdown-Circuit Akku, OK
 800102a:	2120      	movs	r1, #32
 800102c:	4828      	ldr	r0, [pc, #160]	; (80010d0 <readall_inputs+0x14c>)
 800102e:	f002 fcb1 	bl	8003994 <HAL_GPIO_ReadPin>
 8001032:	4603      	mov	r3, r0
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	b2d9      	uxtb	r1, r3
 800103a:	4a29      	ldr	r2, [pc, #164]	; (80010e0 <readall_inputs+0x15c>)
 800103c:	7813      	ldrb	r3, [r2, #0]
 800103e:	f361 0382 	bfi	r3, r1, #2, #1
 8001042:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8001044:	2110      	movs	r1, #16
 8001046:	4822      	ldr	r0, [pc, #136]	; (80010d0 <readall_inputs+0x14c>)
 8001048:	f002 fca4 	bl	8003994 <HAL_GPIO_ReadPin>
 800104c:	4603      	mov	r3, r0
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	b2d9      	uxtb	r1, r3
 8001054:	4a22      	ldr	r2, [pc, #136]	; (80010e0 <readall_inputs+0x15c>)
 8001056:	7813      	ldrb	r3, [r2, #0]
 8001058:	f361 03c3 	bfi	r3, r1, #3, #1
 800105c:	7013      	strb	r3, [r2, #0]
	sdc_in.PrechargeIn = HAL_GPIO_ReadPin(PRECHARGE_IN_GPIO_Port, PRECHARGE_IN_Pin);			// Eingang Precharge abgeschlossen
 800105e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001062:	4820      	ldr	r0, [pc, #128]	; (80010e4 <readall_inputs+0x160>)
 8001064:	f002 fc96 	bl	8003994 <HAL_GPIO_ReadPin>
 8001068:	4603      	mov	r3, r0
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	b2d9      	uxtb	r1, r3
 8001070:	4a1b      	ldr	r2, [pc, #108]	; (80010e0 <readall_inputs+0x15c>)
 8001072:	7813      	ldrb	r3, [r2, #0]
 8001074:	f361 1304 	bfi	r3, r1, #4, #1
 8001078:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.OVC = HAL_GPIO_ReadPin(OVC_SENSE_GPIO_Port, OVC_SENSE_Pin);						// Eingang Overcurrent erkannt
 800107a:	2104      	movs	r1, #4
 800107c:	4819      	ldr	r0, [pc, #100]	; (80010e4 <readall_inputs+0x160>)
 800107e:	f002 fc89 	bl	8003994 <HAL_GPIO_ReadPin>
 8001082:	4603      	mov	r3, r0
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	b2d9      	uxtb	r1, r3
 800108a:	4a17      	ldr	r2, [pc, #92]	; (80010e8 <readall_inputs+0x164>)
 800108c:	7813      	ldrb	r3, [r2, #0]
 800108e:	f361 0300 	bfi	r3, r1, #0, #1
 8001092:	7013      	strb	r3, [r2, #0]
	komfort_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8001094:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001098:	4810      	ldr	r0, [pc, #64]	; (80010dc <readall_inputs+0x158>)
 800109a:	f002 fc7b 	bl	8003994 <HAL_GPIO_ReadPin>
 800109e:	4603      	mov	r3, r0
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	b2d9      	uxtb	r1, r3
 80010a6:	4a10      	ldr	r2, [pc, #64]	; (80010e8 <readall_inputs+0x164>)
 80010a8:	7813      	ldrb	r3, [r2, #0]
 80010aa:	f361 0341 	bfi	r3, r1, #1, #1
 80010ae:	7013      	strb	r3, [r2, #0]
	komfort_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 80010b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010b4:	4809      	ldr	r0, [pc, #36]	; (80010dc <readall_inputs+0x158>)
 80010b6:	f002 fc6d 	bl	8003994 <HAL_GPIO_ReadPin>
 80010ba:	4603      	mov	r3, r0
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	b2d9      	uxtb	r1, r3
 80010c2:	4a09      	ldr	r2, [pc, #36]	; (80010e8 <readall_inputs+0x164>)
 80010c4:	7813      	ldrb	r3, [r2, #0]
 80010c6:	f361 0382 	bfi	r3, r1, #2, #1
 80010ca:	7013      	strb	r3, [r2, #0]
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40021000 	.word	0x40021000
 80010d4:	20000044 	.word	0x20000044
 80010d8:	40020c00 	.word	0x40020c00
 80010dc:	40020000 	.word	0x40020000
 80010e0:	20000054 	.word	0x20000054
 80010e4:	40021400 	.word	0x40021400
 80010e8:	2000004c 	.word	0x2000004c

080010ec <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);								// Blaue LED Platine setzen
 80010f0:	2201      	movs	r2, #1
 80010f2:	2180      	movs	r1, #128	; 0x80
 80010f4:	481b      	ldr	r0, [pc, #108]	; (8001164 <testPCB_Leds+0x78>)
 80010f6:	f002 fc65 	bl	80039c4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80010fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010fe:	f001 fb69 	bl	80027d4 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);							// Blaue LED Platine zuruecksetzen
 8001102:	2200      	movs	r2, #0
 8001104:	2180      	movs	r1, #128	; 0x80
 8001106:	4817      	ldr	r0, [pc, #92]	; (8001164 <testPCB_Leds+0x78>)
 8001108:	f002 fc5c 	bl	80039c4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 800110c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001110:	f001 fb60 	bl	80027d4 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);							// Gruene LED Platine setzen
 8001114:	2201      	movs	r2, #1
 8001116:	2104      	movs	r1, #4
 8001118:	4812      	ldr	r0, [pc, #72]	; (8001164 <testPCB_Leds+0x78>)
 800111a:	f002 fc53 	bl	80039c4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 800111e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001122:	f001 fb57 	bl	80027d4 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);							// Gruene LED Platine zuruecksetzen
 8001126:	2200      	movs	r2, #0
 8001128:	2104      	movs	r1, #4
 800112a:	480e      	ldr	r0, [pc, #56]	; (8001164 <testPCB_Leds+0x78>)
 800112c:	f002 fc4a 	bl	80039c4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001130:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001134:	f001 fb4e 	bl	80027d4 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);								// Rote LED Platine setzen
 8001138:	2201      	movs	r2, #1
 800113a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800113e:	4809      	ldr	r0, [pc, #36]	; (8001164 <testPCB_Leds+0x78>)
 8001140:	f002 fc40 	bl	80039c4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001144:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001148:	f001 fb44 	bl	80027d4 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);								// Rote LED Platine zuruecksetzen
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001152:	4804      	ldr	r0, [pc, #16]	; (8001164 <testPCB_Leds+0x78>)
 8001154:	f002 fc36 	bl	80039c4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001158:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800115c:	f001 fb3a 	bl	80027d4 <HAL_Delay>
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40020400 	.word	0x40020400

08001168 <testLeds>:
//----------------------------------------------------------------------

// Teste alle externen LEDs
//----------------------------------------------------------------------
void testLeds(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	// Leds Testen
	HAL_GPIO_WritePin(AKKU_LED_GPIO_Port, AKKU_LED_Pin, GPIO_PIN_SET);								// Akku LED Kombiinstrument setzen
 800116c:	2201      	movs	r2, #1
 800116e:	2180      	movs	r1, #128	; 0x80
 8001170:	481a      	ldr	r0, [pc, #104]	; (80011dc <testLeds+0x74>)
 8001172:	f002 fc27 	bl	80039c4 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800117a:	f001 fb2b 	bl	80027d4 <HAL_Delay>
	HAL_GPIO_WritePin(AKKU_LED_GPIO_Port, AKKU_LED_Pin, GPIO_PIN_RESET);							// Akku LED Kombiinstrument zuruecksetzen
 800117e:	2200      	movs	r2, #0
 8001180:	2180      	movs	r1, #128	; 0x80
 8001182:	4816      	ldr	r0, [pc, #88]	; (80011dc <testLeds+0x74>)
 8001184:	f002 fc1e 	bl	80039c4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001188:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800118c:	f001 fb22 	bl	80027d4 <HAL_Delay>
	HAL_GPIO_WritePin(INLET_RED_GPIO_Port, INLET_RED_Pin, GPIO_PIN_SET);							// Red Inlet LED setzen
 8001190:	2201      	movs	r2, #1
 8001192:	2104      	movs	r1, #4
 8001194:	4812      	ldr	r0, [pc, #72]	; (80011e0 <testLeds+0x78>)
 8001196:	f002 fc15 	bl	80039c4 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800119a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800119e:	f001 fb19 	bl	80027d4 <HAL_Delay>
	HAL_GPIO_WritePin(INLET_RED_GPIO_Port, INLET_RED_Pin, GPIO_PIN_RESET);							// Red Inlet LED zuruecksetzen
 80011a2:	2200      	movs	r2, #0
 80011a4:	2104      	movs	r1, #4
 80011a6:	480e      	ldr	r0, [pc, #56]	; (80011e0 <testLeds+0x78>)
 80011a8:	f002 fc0c 	bl	80039c4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80011ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011b0:	f001 fb10 	bl	80027d4 <HAL_Delay>
	HAL_GPIO_WritePin(INLET_GREEN_GPIO_Port, INLET_GREEN_Pin, GPIO_PIN_SET);						// Green Inlet LED setzen
 80011b4:	2201      	movs	r2, #1
 80011b6:	2102      	movs	r1, #2
 80011b8:	4809      	ldr	r0, [pc, #36]	; (80011e0 <testLeds+0x78>)
 80011ba:	f002 fc03 	bl	80039c4 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80011be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011c2:	f001 fb07 	bl	80027d4 <HAL_Delay>
	HAL_GPIO_WritePin(INLET_GREEN_GPIO_Port, INLET_GREEN_Pin, GPIO_PIN_RESET);						// Green Inlet LED zuruecksetzen
 80011c6:	2200      	movs	r2, #0
 80011c8:	2102      	movs	r1, #2
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <testLeds+0x78>)
 80011cc:	f002 fbfa 	bl	80039c4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80011d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011d4:	f001 fafe 	bl	80027d4 <HAL_Delay>
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40021800 	.word	0x40021800
 80011e0:	40021000 	.word	0x40021000

080011e4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ea:	463b      	mov	r3, r7
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011f6:	4b44      	ldr	r3, [pc, #272]	; (8001308 <MX_ADC1_Init+0x124>)
 80011f8:	4a44      	ldr	r2, [pc, #272]	; (800130c <MX_ADC1_Init+0x128>)
 80011fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011fc:	4b42      	ldr	r3, [pc, #264]	; (8001308 <MX_ADC1_Init+0x124>)
 80011fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001202:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001204:	4b40      	ldr	r3, [pc, #256]	; (8001308 <MX_ADC1_Init+0x124>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800120a:	4b3f      	ldr	r3, [pc, #252]	; (8001308 <MX_ADC1_Init+0x124>)
 800120c:	2201      	movs	r2, #1
 800120e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001210:	4b3d      	ldr	r3, [pc, #244]	; (8001308 <MX_ADC1_Init+0x124>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001216:	4b3c      	ldr	r3, [pc, #240]	; (8001308 <MX_ADC1_Init+0x124>)
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800121e:	4b3a      	ldr	r3, [pc, #232]	; (8001308 <MX_ADC1_Init+0x124>)
 8001220:	2200      	movs	r2, #0
 8001222:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001224:	4b38      	ldr	r3, [pc, #224]	; (8001308 <MX_ADC1_Init+0x124>)
 8001226:	4a3a      	ldr	r2, [pc, #232]	; (8001310 <MX_ADC1_Init+0x12c>)
 8001228:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800122a:	4b37      	ldr	r3, [pc, #220]	; (8001308 <MX_ADC1_Init+0x124>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001230:	4b35      	ldr	r3, [pc, #212]	; (8001308 <MX_ADC1_Init+0x124>)
 8001232:	2206      	movs	r2, #6
 8001234:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001236:	4b34      	ldr	r3, [pc, #208]	; (8001308 <MX_ADC1_Init+0x124>)
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800123e:	4b32      	ldr	r3, [pc, #200]	; (8001308 <MX_ADC1_Init+0x124>)
 8001240:	2201      	movs	r2, #1
 8001242:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001244:	4830      	ldr	r0, [pc, #192]	; (8001308 <MX_ADC1_Init+0x124>)
 8001246:	f001 fb31 	bl	80028ac <HAL_ADC_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001250:	f000 fe40 	bl	8001ed4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001254:	2307      	movs	r3, #7
 8001256:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001258:	2301      	movs	r3, #1
 800125a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800125c:	2301      	movs	r3, #1
 800125e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001260:	463b      	mov	r3, r7
 8001262:	4619      	mov	r1, r3
 8001264:	4828      	ldr	r0, [pc, #160]	; (8001308 <MX_ADC1_Init+0x124>)
 8001266:	f001 fb65 	bl	8002934 <HAL_ADC_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001270:	f000 fe30 	bl	8001ed4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001274:	2303      	movs	r3, #3
 8001276:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001278:	2302      	movs	r3, #2
 800127a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800127c:	463b      	mov	r3, r7
 800127e:	4619      	mov	r1, r3
 8001280:	4821      	ldr	r0, [pc, #132]	; (8001308 <MX_ADC1_Init+0x124>)
 8001282:	f001 fb57 	bl	8002934 <HAL_ADC_ConfigChannel>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800128c:	f000 fe22 	bl	8001ed4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001290:	2304      	movs	r3, #4
 8001292:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001294:	2303      	movs	r3, #3
 8001296:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001298:	463b      	mov	r3, r7
 800129a:	4619      	mov	r1, r3
 800129c:	481a      	ldr	r0, [pc, #104]	; (8001308 <MX_ADC1_Init+0x124>)
 800129e:	f001 fb49 	bl	8002934 <HAL_ADC_ConfigChannel>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80012a8:	f000 fe14 	bl	8001ed4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012ac:	2305      	movs	r3, #5
 80012ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80012b0:	2304      	movs	r3, #4
 80012b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b4:	463b      	mov	r3, r7
 80012b6:	4619      	mov	r1, r3
 80012b8:	4813      	ldr	r0, [pc, #76]	; (8001308 <MX_ADC1_Init+0x124>)
 80012ba:	f001 fb3b 	bl	8002934 <HAL_ADC_ConfigChannel>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80012c4:	f000 fe06 	bl	8001ed4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80012c8:	2306      	movs	r3, #6
 80012ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80012cc:	2305      	movs	r3, #5
 80012ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d0:	463b      	mov	r3, r7
 80012d2:	4619      	mov	r1, r3
 80012d4:	480c      	ldr	r0, [pc, #48]	; (8001308 <MX_ADC1_Init+0x124>)
 80012d6:	f001 fb2d 	bl	8002934 <HAL_ADC_ConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80012e0:	f000 fdf8 	bl	8001ed4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80012e4:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <MX_ADC1_Init+0x130>)
 80012e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80012e8:	2306      	movs	r3, #6
 80012ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ec:	463b      	mov	r3, r7
 80012ee:	4619      	mov	r1, r3
 80012f0:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_ADC1_Init+0x124>)
 80012f2:	f001 fb1f 	bl	8002934 <HAL_ADC_ConfigChannel>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80012fc:	f000 fdea 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000058 	.word	0x20000058
 800130c:	40012000 	.word	0x40012000
 8001310:	0f000001 	.word	0x0f000001
 8001314:	10000012 	.word	0x10000012

08001318 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a15      	ldr	r2, [pc, #84]	; (800138c <HAL_ADC_MspInit+0x74>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d123      	bne.n	8001382 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <HAL_ADC_MspInit+0x78>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	4a14      	ldr	r2, [pc, #80]	; (8001390 <HAL_ADC_MspInit+0x78>)
 8001340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001344:	6453      	str	r3, [r2, #68]	; 0x44
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_ADC_MspInit+0x78>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <HAL_ADC_MspInit+0x78>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <HAL_ADC_MspInit+0x78>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <HAL_ADC_MspInit+0x78>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 800136a:	23f8      	movs	r3, #248	; 0xf8
 800136c:	617b      	str	r3, [r7, #20]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800136e:	2303      	movs	r3, #3
 8001370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	4805      	ldr	r0, [pc, #20]	; (8001394 <HAL_ADC_MspInit+0x7c>)
 800137e:	f002 f95d 	bl	800363c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001382:	bf00      	nop
 8001384:	3728      	adds	r7, #40	; 0x28
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40012000 	.word	0x40012000
 8001390:	40023800 	.word	0x40023800
 8001394:	40020000 	.word	0x40020000

08001398 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800139c:	4b17      	ldr	r3, [pc, #92]	; (80013fc <MX_CAN1_Init+0x64>)
 800139e:	4a18      	ldr	r2, [pc, #96]	; (8001400 <MX_CAN1_Init+0x68>)
 80013a0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80013a2:	4b16      	ldr	r3, [pc, #88]	; (80013fc <MX_CAN1_Init+0x64>)
 80013a4:	2210      	movs	r2, #16
 80013a6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80013a8:	4b14      	ldr	r3, [pc, #80]	; (80013fc <MX_CAN1_Init+0x64>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013ae:	4b13      	ldr	r3, [pc, #76]	; (80013fc <MX_CAN1_Init+0x64>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <MX_CAN1_Init+0x64>)
 80013b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013ba:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <MX_CAN1_Init+0x64>)
 80013be:	2200      	movs	r2, #0
 80013c0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <MX_CAN1_Init+0x64>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <MX_CAN1_Init+0x64>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <MX_CAN1_Init+0x64>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80013d4:	4b09      	ldr	r3, [pc, #36]	; (80013fc <MX_CAN1_Init+0x64>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80013da:	4b08      	ldr	r3, [pc, #32]	; (80013fc <MX_CAN1_Init+0x64>)
 80013dc:	2200      	movs	r2, #0
 80013de:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <MX_CAN1_Init+0x64>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80013e6:	4805      	ldr	r0, [pc, #20]	; (80013fc <MX_CAN1_Init+0x64>)
 80013e8:	f001 fce8 	bl	8002dbc <HAL_CAN_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80013f2:	f000 fd6f 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200000c8 	.word	0x200000c8
 8001400:	40006400 	.word	0x40006400

08001404 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <MX_CAN3_Init+0x64>)
 800140a:	4a18      	ldr	r2, [pc, #96]	; (800146c <MX_CAN3_Init+0x68>)
 800140c:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <MX_CAN3_Init+0x64>)
 8001410:	2206      	movs	r2, #6
 8001412:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <MX_CAN3_Init+0x64>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <MX_CAN3_Init+0x64>)
 800141c:	2200      	movs	r2, #0
 800141e:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_CAN3_Init+0x64>)
 8001422:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001426:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_CAN3_Init+0x64>)
 800142a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800142e:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001430:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <MX_CAN3_Init+0x64>)
 8001432:	2200      	movs	r2, #0
 8001434:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8001436:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <MX_CAN3_Init+0x64>)
 8001438:	2200      	movs	r2, #0
 800143a:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <MX_CAN3_Init+0x64>)
 800143e:	2200      	movs	r2, #0
 8001440:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <MX_CAN3_Init+0x64>)
 8001444:	2200      	movs	r2, #0
 8001446:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001448:	4b07      	ldr	r3, [pc, #28]	; (8001468 <MX_CAN3_Init+0x64>)
 800144a:	2200      	movs	r2, #0
 800144c:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <MX_CAN3_Init+0x64>)
 8001450:	2200      	movs	r2, #0
 8001452:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <MX_CAN3_Init+0x64>)
 8001456:	f001 fcb1 	bl	8002dbc <HAL_CAN_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001460:	f000 fd38 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200000a0 	.word	0x200000a0
 800146c:	40003400 	.word	0x40003400

08001470 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08e      	sub	sp, #56	; 0x38
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a43      	ldr	r2, [pc, #268]	; (800159c <HAL_CAN_MspInit+0x12c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d131      	bne.n	80014f6 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001492:	4b43      	ldr	r3, [pc, #268]	; (80015a0 <HAL_CAN_MspInit+0x130>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3301      	adds	r3, #1
 8001498:	4a41      	ldr	r2, [pc, #260]	; (80015a0 <HAL_CAN_MspInit+0x130>)
 800149a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800149c:	4b40      	ldr	r3, [pc, #256]	; (80015a0 <HAL_CAN_MspInit+0x130>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d10b      	bne.n	80014bc <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80014a4:	4b3f      	ldr	r3, [pc, #252]	; (80015a4 <HAL_CAN_MspInit+0x134>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	4a3e      	ldr	r2, [pc, #248]	; (80015a4 <HAL_CAN_MspInit+0x134>)
 80014aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014ae:	6413      	str	r3, [r2, #64]	; 0x40
 80014b0:	4b3c      	ldr	r3, [pc, #240]	; (80015a4 <HAL_CAN_MspInit+0x134>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b8:	623b      	str	r3, [r7, #32]
 80014ba:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014bc:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <HAL_CAN_MspInit+0x134>)
 80014be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c0:	4a38      	ldr	r2, [pc, #224]	; (80015a4 <HAL_CAN_MspInit+0x134>)
 80014c2:	f043 0308 	orr.w	r3, r3, #8
 80014c6:	6313      	str	r3, [r2, #48]	; 0x30
 80014c8:	4b36      	ldr	r3, [pc, #216]	; (80015a4 <HAL_CAN_MspInit+0x134>)
 80014ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014cc:	f003 0308 	and.w	r3, r3, #8
 80014d0:	61fb      	str	r3, [r7, #28]
 80014d2:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014d4:	2303      	movs	r3, #3
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e0:	2303      	movs	r3, #3
 80014e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80014e4:	2309      	movs	r3, #9
 80014e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ec:	4619      	mov	r1, r3
 80014ee:	482e      	ldr	r0, [pc, #184]	; (80015a8 <HAL_CAN_MspInit+0x138>)
 80014f0:	f002 f8a4 	bl	800363c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 80014f4:	e04e      	b.n	8001594 <HAL_CAN_MspInit+0x124>
  else if(canHandle->Instance==CAN3)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a2c      	ldr	r2, [pc, #176]	; (80015ac <HAL_CAN_MspInit+0x13c>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d149      	bne.n	8001594 <HAL_CAN_MspInit+0x124>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001500:	4b28      	ldr	r3, [pc, #160]	; (80015a4 <HAL_CAN_MspInit+0x134>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	4a27      	ldr	r2, [pc, #156]	; (80015a4 <HAL_CAN_MspInit+0x134>)
 8001506:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800150a:	6413      	str	r3, [r2, #64]	; 0x40
 800150c:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <HAL_CAN_MspInit+0x134>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001514:	61bb      	str	r3, [r7, #24]
 8001516:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001518:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <HAL_CAN_MspInit+0x134>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	4a21      	ldr	r2, [pc, #132]	; (80015a4 <HAL_CAN_MspInit+0x134>)
 800151e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001522:	6413      	str	r3, [r2, #64]	; 0x40
 8001524:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <HAL_CAN_MspInit+0x134>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <HAL_CAN_MspInit+0x130>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	3301      	adds	r3, #1
 8001536:	4a1a      	ldr	r2, [pc, #104]	; (80015a0 <HAL_CAN_MspInit+0x130>)
 8001538:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800153a:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <HAL_CAN_MspInit+0x130>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d10b      	bne.n	800155a <HAL_CAN_MspInit+0xea>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <HAL_CAN_MspInit+0x134>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a17      	ldr	r2, [pc, #92]	; (80015a4 <HAL_CAN_MspInit+0x134>)
 8001548:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <HAL_CAN_MspInit+0x134>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_CAN_MspInit+0x134>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a11      	ldr	r2, [pc, #68]	; (80015a4 <HAL_CAN_MspInit+0x134>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_CAN_MspInit+0x134>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8001572:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001584:	230b      	movs	r3, #11
 8001586:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158c:	4619      	mov	r1, r3
 800158e:	4808      	ldr	r0, [pc, #32]	; (80015b0 <HAL_CAN_MspInit+0x140>)
 8001590:	f002 f854 	bl	800363c <HAL_GPIO_Init>
}
 8001594:	bf00      	nop
 8001596:	3738      	adds	r7, #56	; 0x38
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40006400 	.word	0x40006400
 80015a0:	20000028 	.word	0x20000028
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020c00 	.word	0x40020c00
 80015ac:	40003400 	.word	0x40003400
 80015b0:	40020000 	.word	0x40020000

080015b4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08e      	sub	sp, #56	; 0x38
 80015b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ca:	4bb6      	ldr	r3, [pc, #728]	; (80018a4 <MX_GPIO_Init+0x2f0>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4ab5      	ldr	r2, [pc, #724]	; (80018a4 <MX_GPIO_Init+0x2f0>)
 80015d0:	f043 0310 	orr.w	r3, r3, #16
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4bb3      	ldr	r3, [pc, #716]	; (80018a4 <MX_GPIO_Init+0x2f0>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0310 	and.w	r3, r3, #16
 80015de:	623b      	str	r3, [r7, #32]
 80015e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e2:	4bb0      	ldr	r3, [pc, #704]	; (80018a4 <MX_GPIO_Init+0x2f0>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4aaf      	ldr	r2, [pc, #700]	; (80018a4 <MX_GPIO_Init+0x2f0>)
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4bad      	ldr	r3, [pc, #692]	; (80018a4 <MX_GPIO_Init+0x2f0>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	61fb      	str	r3, [r7, #28]
 80015f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015fa:	4baa      	ldr	r3, [pc, #680]	; (80018a4 <MX_GPIO_Init+0x2f0>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4aa9      	ldr	r2, [pc, #676]	; (80018a4 <MX_GPIO_Init+0x2f0>)
 8001600:	f043 0320 	orr.w	r3, r3, #32
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4ba7      	ldr	r3, [pc, #668]	; (80018a4 <MX_GPIO_Init+0x2f0>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0320 	and.w	r3, r3, #32
 800160e:	61bb      	str	r3, [r7, #24]
 8001610:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001612:	4ba4      	ldr	r3, [pc, #656]	; (80018a4 <MX_GPIO_Init+0x2f0>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4aa3      	ldr	r2, [pc, #652]	; (80018a4 <MX_GPIO_Init+0x2f0>)
 8001618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4ba1      	ldr	r3, [pc, #644]	; (80018a4 <MX_GPIO_Init+0x2f0>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	4b9e      	ldr	r3, [pc, #632]	; (80018a4 <MX_GPIO_Init+0x2f0>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a9d      	ldr	r2, [pc, #628]	; (80018a4 <MX_GPIO_Init+0x2f0>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b9b      	ldr	r3, [pc, #620]	; (80018a4 <MX_GPIO_Init+0x2f0>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001642:	4b98      	ldr	r3, [pc, #608]	; (80018a4 <MX_GPIO_Init+0x2f0>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a97      	ldr	r2, [pc, #604]	; (80018a4 <MX_GPIO_Init+0x2f0>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b95      	ldr	r3, [pc, #596]	; (80018a4 <MX_GPIO_Init+0x2f0>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800165a:	4b92      	ldr	r3, [pc, #584]	; (80018a4 <MX_GPIO_Init+0x2f0>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a91      	ldr	r2, [pc, #580]	; (80018a4 <MX_GPIO_Init+0x2f0>)
 8001660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b8f      	ldr	r3, [pc, #572]	; (80018a4 <MX_GPIO_Init+0x2f0>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001672:	4b8c      	ldr	r3, [pc, #560]	; (80018a4 <MX_GPIO_Init+0x2f0>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a8b      	ldr	r2, [pc, #556]	; (80018a4 <MX_GPIO_Init+0x2f0>)
 8001678:	f043 0308 	orr.w	r3, r3, #8
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b89      	ldr	r3, [pc, #548]	; (80018a4 <MX_GPIO_Init+0x2f0>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 800168a:	2200      	movs	r2, #0
 800168c:	f248 0187 	movw	r1, #32903	; 0x8087
 8001690:	4885      	ldr	r0, [pc, #532]	; (80018a8 <MX_GPIO_Init+0x2f4>)
 8001692:	f002 f997 	bl	80039c4 <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800169c:	4883      	ldr	r0, [pc, #524]	; (80018ac <MX_GPIO_Init+0x2f8>)
 800169e:	f002 f991 	bl	80039c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin, GPIO_PIN_RESET);
 80016a2:	2200      	movs	r2, #0
 80016a4:	f242 0102 	movw	r1, #8194	; 0x2002
 80016a8:	4881      	ldr	r0, [pc, #516]	; (80018b0 <MX_GPIO_Init+0x2fc>)
 80016aa:	f002 f98b 	bl	80039c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	f240 6102 	movw	r1, #1538	; 0x602
 80016b4:	487f      	ldr	r0, [pc, #508]	; (80018b4 <MX_GPIO_Init+0x300>)
 80016b6:	f002 f985 	bl	80039c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 80016ba:	2200      	movs	r2, #0
 80016bc:	f244 0184 	movw	r1, #16516	; 0x4084
 80016c0:	487d      	ldr	r0, [pc, #500]	; (80018b8 <MX_GPIO_Init+0x304>)
 80016c2:	f002 f97f 	bl	80039c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 80016c6:	2200      	movs	r2, #0
 80016c8:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 80016cc:	487b      	ldr	r0, [pc, #492]	; (80018bc <MX_GPIO_Init+0x308>)
 80016ce:	f002 f979 	bl	80039c4 <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2118      	movs	r1, #24
 80016d6:	487a      	ldr	r0, [pc, #488]	; (80018c0 <MX_GPIO_Init+0x30c>)
 80016d8:	f002 f974 	bl	80039c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 80016dc:	f248 0387 	movw	r3, #32903	; 0x8087
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
                          |INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f2:	4619      	mov	r1, r3
 80016f4:	486c      	ldr	r0, [pc, #432]	; (80018a8 <MX_GPIO_Init+0x2f4>)
 80016f6:	f001 ffa1 	bl	800363c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 80016fa:	f44f 739c 	mov.w	r3, #312	; 0x138
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001700:	2300      	movs	r3, #0
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170c:	4619      	mov	r1, r3
 800170e:	4866      	ldr	r0, [pc, #408]	; (80018a8 <MX_GPIO_Init+0x2f4>)
 8001710:	f001 ff94 	bl	800363c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8001714:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800171a:	2303      	movs	r3, #3
 800171c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001726:	4619      	mov	r1, r3
 8001728:	485f      	ldr	r0, [pc, #380]	; (80018a8 <MX_GPIO_Init+0x2f4>)
 800172a:	f001 ff87 	bl	800363c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 800172e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8001740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001744:	4619      	mov	r1, r3
 8001746:	4859      	ldr	r0, [pc, #356]	; (80018ac <MX_GPIO_Init+0x2f8>)
 8001748:	f001 ff78 	bl	800363c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PCPin PC7 PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 800174c:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |SD_SW_Pin|GPIO_PIN_7|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001752:	2303      	movs	r3, #3
 8001754:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175e:	4619      	mov	r1, r3
 8001760:	4852      	ldr	r0, [pc, #328]	; (80018ac <MX_GPIO_Init+0x2f8>)
 8001762:	f001 ff6b 	bl	800363c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF3 PF4 PF5
                           PFPin PFPin PFPin PFPin
                           PF10 PF11 PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001766:	f645 73f9 	movw	r3, #24569	; 0x5ff9
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800176c:	2303      	movs	r3, #3
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001778:	4619      	mov	r1, r3
 800177a:	484d      	ldr	r0, [pc, #308]	; (80018b0 <MX_GPIO_Init+0x2fc>)
 800177c:	f001 ff5e 	bl	800363c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin;
 8001780:	f242 0302 	movw	r3, #8194	; 0x2002
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001786:	2301      	movs	r3, #1
 8001788:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2300      	movs	r3, #0
 8001790:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001796:	4619      	mov	r1, r3
 8001798:	4845      	ldr	r0, [pc, #276]	; (80018b0 <MX_GPIO_Init+0x2fc>)
 800179a:	f001 ff4f 	bl	800363c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin|PRECHARGE_IN_Pin;
 800179e:	f248 0304 	movw	r3, #32772	; 0x8004
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b0:	4619      	mov	r1, r3
 80017b2:	483f      	ldr	r0, [pc, #252]	; (80018b0 <MX_GPIO_Init+0x2fc>)
 80017b4:	f001 ff42 	bl	800363c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|HW_WAKE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 80017b8:	f641 0305 	movw	r3, #6149	; 0x1805
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017be:	2300      	movs	r3, #0
 80017c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ca:	4619      	mov	r1, r3
 80017cc:	4839      	ldr	r0, [pc, #228]	; (80018b4 <MX_GPIO_Init+0x300>)
 80017ce:	f001 ff35 	bl	800363c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 80017d2:	f240 6302 	movw	r3, #1538	; 0x602
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d8:	2301      	movs	r3, #1
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e8:	4619      	mov	r1, r3
 80017ea:	4832      	ldr	r0, [pc, #200]	; (80018b4 <MX_GPIO_Init+0x300>)
 80017ec:	f001 ff26 	bl	800363c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80017f0:	f64b 7373 	movw	r3, #49011	; 0xbf73
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|I2C_SCL_Pin|I2C_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f6:	2303      	movs	r3, #3
 80017f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001802:	4619      	mov	r1, r3
 8001804:	482c      	ldr	r0, [pc, #176]	; (80018b8 <MX_GPIO_Init+0x304>)
 8001806:	f001 ff19 	bl	800363c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 800180a:	f244 0384 	movw	r3, #16516	; 0x4084
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001810:	2301      	movs	r3, #1
 8001812:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2300      	movs	r3, #0
 800181a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001820:	4619      	mov	r1, r3
 8001822:	4825      	ldr	r0, [pc, #148]	; (80018b8 <MX_GPIO_Init+0x304>)
 8001824:	f001 ff0a 	bl	800363c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8;
 8001828:	f240 1343 	movw	r3, #323	; 0x143
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800182e:	2303      	movs	r3, #3
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183a:	4619      	mov	r1, r3
 800183c:	481f      	ldr	r0, [pc, #124]	; (80018bc <MX_GPIO_Init+0x308>)
 800183e:	f001 fefd 	bl	800363c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|SD_CMD_Pin;
 8001842:	f240 7304 	movw	r3, #1796	; 0x704
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001848:	2303      	movs	r3, #3
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001854:	4619      	mov	r1, r3
 8001856:	481a      	ldr	r0, [pc, #104]	; (80018c0 <MX_GPIO_Init+0x30c>)
 8001858:	f001 fef0 	bl	800363c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 800185c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001862:	2300      	movs	r3, #0
 8001864:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 800186a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186e:	4619      	mov	r1, r3
 8001870:	4813      	ldr	r0, [pc, #76]	; (80018c0 <MX_GPIO_Init+0x30c>)
 8001872:	f001 fee3 	bl	800363c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8001876:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187c:	2301      	movs	r3, #1
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2300      	movs	r3, #0
 8001886:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188c:	4619      	mov	r1, r3
 800188e:	480b      	ldr	r0, [pc, #44]	; (80018bc <MX_GPIO_Init+0x308>)
 8001890:	f001 fed4 	bl	800363c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|DIGITAL2_Pin;
 8001894:	2318      	movs	r3, #24
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	e00f      	b.n	80018c4 <MX_GPIO_Init+0x310>
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40020800 	.word	0x40020800
 80018b0:	40021400 	.word	0x40021400
 80018b4:	40020000 	.word	0x40020000
 80018b8:	40020400 	.word	0x40020400
 80018bc:	40021800 	.word	0x40021800
 80018c0:	40020c00 	.word	0x40020c00
 80018c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ca:	4619      	mov	r1, r3
 80018cc:	4803      	ldr	r0, [pc, #12]	; (80018dc <MX_GPIO_Init+0x328>)
 80018ce:	f001 feb5 	bl	800363c <HAL_GPIO_Init>

}
 80018d2:	bf00      	nop
 80018d4:	3738      	adds	r7, #56	; 0x38
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40020c00 	.word	0x40020c00

080018e0 <calculateMovingAverage>:
static uint16_t getDifference(uint16_t a, uint16_t b);

// Gleitenden Mittelwert berechnen, sehr Speicher arm
//----------------------------------------------------------------------
static int calculateMovingAverage(int oldValue, int newValue, int n)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
	return (oldValue + ((newValue - oldValue) / n));						// MovingAverage Calculation x_n  = x_{n-1} + ((x_n+x_{n-1})/n)
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	1ad2      	subs	r2, r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	fb92 f2f3 	sdiv	r2, r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4413      	add	r3, r2
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <getDifference>:
//----------------------------------------------------------------------

// Differenz Berechnen, Betrag
//----------------------------------------------------------------------
static uint16_t getDifference(uint16_t a, uint16_t b)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	460a      	mov	r2, r1
 8001912:	80fb      	strh	r3, [r7, #6]
 8001914:	4613      	mov	r3, r2
 8001916:	80bb      	strh	r3, [r7, #4]
	// A ist groesser B
	if (a > b)
 8001918:	88fa      	ldrh	r2, [r7, #6]
 800191a:	88bb      	ldrh	r3, [r7, #4]
 800191c:	429a      	cmp	r2, r3
 800191e:	d904      	bls.n	800192a <getDifference+0x22>
	{
		// B von A abziehen
		return (a - b);
 8001920:	88fa      	ldrh	r2, [r7, #6]
 8001922:	88bb      	ldrh	r3, [r7, #4]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	b29b      	uxth	r3, r3
 8001928:	e009      	b.n	800193e <getDifference+0x36>
	}
	// B ist groesser A
	else if (a < b)
 800192a:	88fa      	ldrh	r2, [r7, #6]
 800192c:	88bb      	ldrh	r3, [r7, #4]
 800192e:	429a      	cmp	r2, r3
 8001930:	d204      	bcs.n	800193c <getDifference+0x34>
	{
		// A von B abziehen
		return (b - a);
 8001932:	88ba      	ldrh	r2, [r7, #4]
 8001934:	88fb      	ldrh	r3, [r7, #6]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	b29b      	uxth	r3, r3
 800193a:	e000      	b.n	800193e <getDifference+0x36>
	}
	// A ist gleich B
	else
	{
		// Differenz ist 0
		return 0;
 800193c:	2300      	movs	r3, #0
	}
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800194c:	b5b0      	push	{r4, r5, r7, lr}
 800194e:	b0ac      	sub	sp, #176	; 0xb0
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001952:	f000 fee2 	bl	800271a <HAL_Init>

  /* USER CODE BEGIN Init */
	// Definiere Variablen fuer Main-Funktion
	uint16_t timerPeriod, count = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

	// Definiere Variablen fuer Main-Funktion
	uint8_t TxData[8], OutData[4], InData[3], status, task_start = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
  	CAN_FilterTypeDef sFilterConfig;

  	// Erstelle Can-Nachrichten
  	CAN_TxHeaderTypeDef TxMessage = {0x123, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8001962:	4bc9      	ldr	r3, [pc, #804]	; (8001c88 <main+0x33c>)
 8001964:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001968:	461d      	mov	r5, r3
 800196a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800196c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800196e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001972:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxOutput = {BMS_CAN_DIGITAL_OUT, 0, CAN_RTR_DATA, CAN_ID_STD, 4, DISABLE};
 8001976:	4bc5      	ldr	r3, [pc, #788]	; (8001c8c <main+0x340>)
 8001978:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800197c:	461d      	mov	r5, r3
 800197e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001980:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001982:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001986:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxInput = {BMS_CAN_DIGITAL_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 3, DISABLE};
 800198a:	4bc1      	ldr	r3, [pc, #772]	; (8001c90 <main+0x344>)
 800198c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001990:	461d      	mov	r5, r3
 8001992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001996:	e895 0003 	ldmia.w	r5, {r0, r1}
 800199a:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxIMD = {BMS_CAN_SAFETY, 0, CAN_RTR_DATA, CAN_ID_STD, 5, DISABLE};
 800199e:	4bbd      	ldr	r3, [pc, #756]	; (8001c94 <main+0x348>)
 80019a0:	f107 040c 	add.w	r4, r7, #12
 80019a4:	461d      	mov	r5, r3
 80019a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019ae:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019b2:	f000 f9b3 	bl	8001d1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019b6:	f7ff fdfd 	bl	80015b4 <MX_GPIO_Init>
  MX_CAN1_Init();
 80019ba:	f7ff fced 	bl	8001398 <MX_CAN1_Init>
  MX_SPI4_Init();
 80019be:	f000 facf 	bl	8001f60 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 80019c2:	f000 fe0d 	bl	80025e0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80019c6:	f7ff fc0d 	bl	80011e4 <MX_ADC1_Init>
  MX_TIM1_Init();
 80019ca:	f000 fc0f 	bl	80021ec <MX_TIM1_Init>
  MX_TIM4_Init();
 80019ce:	f000 fc93 	bl	80022f8 <MX_TIM4_Init>
  MX_SPI1_Init();
 80019d2:	f000 fa87 	bl	8001ee4 <MX_SPI1_Init>
  MX_CAN3_Init();
 80019d6:	f7ff fd15 	bl	8001404 <MX_CAN3_Init>
  MX_TIM6_Init();
 80019da:	f000 fd09 	bl	80023f0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 80019de:	f7fe ffa5 	bl	800092c <readResetSource>
 80019e2:	4603      	mov	r3, r0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fff3 	bl	80009d0 <printResetSource>

	/* Teste serielle Schnittstelle*/
	#define TEST_STRING_UART		"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 80019ea:	213a      	movs	r1, #58	; 0x3a
 80019ec:	48aa      	ldr	r0, [pc, #680]	; (8001c98 <main+0x34c>)
 80019ee:	f7fe fda7 	bl	8000540 <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 80019f2:	f7fe ff71 	bl	80008d8 <collectSystemInfo>
#endif

	timerPeriod = (HAL_RCC_GetPCLK2Freq() / htim1.Init.Prescaler);
 80019f6:	f002 fcbf 	bl	8004378 <HAL_RCC_GetPCLK2Freq>
 80019fa:	4602      	mov	r2, r0
 80019fc:	4ba7      	ldr	r3, [pc, #668]	; (8001c9c <main+0x350>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a04:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  	// Start timer
	if (HAL_TIM_Base_Start_IT(&htim1) != HAL_OK);
 8001a08:	48a4      	ldr	r0, [pc, #656]	; (8001c9c <main+0x350>)
 8001a0a:	f003 f9f3 	bl	8004df4 <HAL_TIM_Base_Start_IT>
	if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1) != HAL_OK);
 8001a0e:	2100      	movs	r1, #0
 8001a10:	48a2      	ldr	r0, [pc, #648]	; (8001c9c <main+0x350>)
 8001a12:	f003 fb15 	bl	8005040 <HAL_TIM_IC_Start_IT>
	if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2) != HAL_OK);
 8001a16:	2104      	movs	r1, #4
 8001a18:	48a0      	ldr	r0, [pc, #640]	; (8001c9c <main+0x350>)
 8001a1a:	f003 fb11 	bl	8005040 <HAL_TIM_IC_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim6);
 8001a1e:	48a0      	ldr	r0, [pc, #640]	; (8001ca0 <main+0x354>)
 8001a20:	f003 f9e8 	bl	8004df4 <HAL_TIM_Base_Start_IT>

	// Leds Testen
	testPCB_Leds();
 8001a24:	f7ff fb62 	bl	80010ec <testPCB_Leds>
	testLeds();
 8001a28:	f7ff fb9e 	bl	8001168 <testLeds>

	// Lese alle Eingaenge
	readall_inputs();
 8001a2c:	f7ff faaa 	bl	8000f84 <readall_inputs>

  	// Starte CAN Bus
  	if((status = HAL_CAN_Start(&hcan3)) != HAL_OK)
 8001a30:	489c      	ldr	r0, [pc, #624]	; (8001ca4 <main+0x358>)
 8001a32:	f001 fbab 	bl	800318c <HAL_CAN_Start>
 8001a36:	4603      	mov	r3, r0
 8001a38:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
 8001a3c:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d006      	beq.n	8001a52 <main+0x106>
  	{
  		/* Start Error */
  		hal_error(status);
 8001a44:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff f831 	bl	8000ab0 <hal_error>
  		Error_Handler();
 8001a4e:	f000 fa41 	bl	8001ed4 <Error_Handler>
  	}
  	uartTransmit("CAN START\n", 10);
 8001a52:	210a      	movs	r1, #10
 8001a54:	4894      	ldr	r0, [pc, #592]	; (8001ca8 <main+0x35c>)
 8001a56:	f7fe fd73 	bl	8000540 <uartTransmit>

  	// Aktiviere Interrupts für CAN Bus
  	if((status = HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING)) != HAL_OK)
 8001a5a:	2102      	movs	r1, #2
 8001a5c:	4891      	ldr	r0, [pc, #580]	; (8001ca4 <main+0x358>)
 8001a5e:	f001 fcb4 	bl	80033ca <HAL_CAN_ActivateNotification>
 8001a62:	4603      	mov	r3, r0
 8001a64:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
 8001a68:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d006      	beq.n	8001a7e <main+0x132>
  	{
  		/* Notification Error */
  		hal_error(status);
 8001a70:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff f81b 	bl	8000ab0 <hal_error>
  		Error_Handler();
 8001a7a:	f000 fa2b 	bl	8001ed4 <Error_Handler>
  	}
  	uartTransmit("Send Message\n", 13);
 8001a7e:	210d      	movs	r1, #13
 8001a80:	488a      	ldr	r0, [pc, #552]	; (8001cac <main+0x360>)
 8001a82:	f7fe fd5d 	bl	8000540 <uartTransmit>

  	// Filter Bank initialisieren um Daten zu empfangen
    sFilterConfig.FilterBank = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001a92:	2301      	movs	r3, #1
 8001a94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    sFilterConfig.FilterIdHigh = 0x0000;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	66fb      	str	r3, [r7, #108]	; 0x6c
    sFilterConfig.FilterIdLow = 0x0000;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	673b      	str	r3, [r7, #112]	; 0x70
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	677b      	str	r3, [r7, #116]	; 0x74
    sFilterConfig.FilterMaskIdLow = 0x0000;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	67bb      	str	r3, [r7, #120]	; 0x78
    sFilterConfig.FilterFIFOAssignment = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	67fb      	str	r3, [r7, #124]	; 0x7c
    sFilterConfig.FilterActivation = ENABLE;
 8001aac:	2301      	movs	r3, #1
 8001aae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    // Filter Bank schreiben
    if((status = HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 8001ab2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	487a      	ldr	r0, [pc, #488]	; (8001ca4 <main+0x358>)
 8001aba:	f001 fa7b 	bl	8002fb4 <HAL_CAN_ConfigFilter>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
 8001ac4:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d006      	beq.n	8001ada <main+0x18e>
    {
    	/* Filter configuration Error */
  		hal_error(status);
 8001acc:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe ffed 	bl	8000ab0 <hal_error>
  		Error_Handler();
 8001ad6:	f000 f9fd 	bl	8001ed4 <Error_Handler>
    }

    // Test CAN Nachricht beschreiben
    for (uint8_t j = 0; j < 8; j++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 8001ae0:	e00f      	b.n	8001b02 <main+0x1b6>
    {
    	TxData[j] = (j + 1);
 8001ae2:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001ae6:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8001aea:	3201      	adds	r2, #1
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8001af2:	440b      	add	r3, r1
 8001af4:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (uint8_t j = 0; j < 8; j++)
 8001af8:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001afc:	3301      	adds	r3, #1
 8001afe:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 8001b02:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001b06:	2b07      	cmp	r3, #7
 8001b08:	d9eb      	bls.n	8001ae2 <main+0x196>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// Task wird jede Millisekunde ausgefuehrt
		if (millisekunden_flag_1 == 1)
 8001b0a:	4b69      	ldr	r3, [pc, #420]	; (8001cb0 <main+0x364>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d10a      	bne.n	8001b2a <main+0x1de>
		{
			count++;													// Zaehler count hochzaehlen
 8001b14:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001b18:	3301      	adds	r3, #1
 8001b1a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
			millisekunden_flag_1 = 0;									// Setze Millisekunden-Flag zurueck
 8001b1e:	4b64      	ldr	r3, [pc, #400]	; (8001cb0 <main+0x364>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]

			task_start = 1;
 8001b24:	2301      	movs	r3, #1
 8001b26:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
		}
		
		if (((count % 250) == 0) && (task_start == 1))
 8001b2a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001b2e:	4a61      	ldr	r2, [pc, #388]	; (8001cb4 <main+0x368>)
 8001b30:	fba2 1203 	umull	r1, r2, r2, r3
 8001b34:	0912      	lsrs	r2, r2, #4
 8001b36:	21fa      	movs	r1, #250	; 0xfa
 8001b38:	fb01 f202 	mul.w	r2, r1, r2
 8001b3c:	1a9b      	subs	r3, r3, r2
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d140      	bne.n	8001bc6 <main+0x27a>
 8001b44:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d13c      	bne.n	8001bc6 <main+0x27a>
		{
			// Daten fuer Ausgaenge zusammenfuehren
			OutData[0] = system_out.systemoutput;
 8001b4c:	4b5a      	ldr	r3, [pc, #360]	; (8001cb8 <main+0x36c>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
			OutData[1] = highcurrent_out.high_out;
 8001b54:	4b59      	ldr	r3, [pc, #356]	; (8001cbc <main+0x370>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			OutData[2] = leuchten_out.ledoutput;
 8001b5c:	4b58      	ldr	r3, [pc, #352]	; (8001cc0 <main+0x374>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
			OutData[3] = komfort_out.komfortoutput;
 8001b64:	4b57      	ldr	r3, [pc, #348]	; (8001cc4 <main+0x378>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
	
			// Sende Nachricht digitale Ausgaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxOutput, OutData, (uint32_t *)CAN_TX_MAILBOX0);
 8001b6c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001b70:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001b74:	2301      	movs	r3, #1
 8001b76:	484b      	ldr	r0, [pc, #300]	; (8001ca4 <main+0x358>)
 8001b78:	f001 fb4c 	bl	8003214 <HAL_CAN_AddTxMessage>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
			//hal_error(status);

			// Daten fuer Eingaenge zusammenfuehren
			InData[0] = system_in.systeminput;
 8001b82:	4b51      	ldr	r3, [pc, #324]	; (8001cc8 <main+0x37c>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			InData[1] = sdc_in.sdcinput;
 8001b8a:	4b50      	ldr	r3, [pc, #320]	; (8001ccc <main+0x380>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
			InData[2] = komfort_in.komfortinput;
 8001b92:	4b4f      	ldr	r3, [pc, #316]	; (8001cd0 <main+0x384>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
	
			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxInput, InData, (uint32_t *)CAN_TX_MAILBOX0);
 8001b9a:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8001b9e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	483f      	ldr	r0, [pc, #252]	; (8001ca4 <main+0x358>)
 8001ba6:	f001 fb35 	bl	8003214 <HAL_CAN_AddTxMessage>
 8001baa:	4603      	mov	r3, r0
 8001bac:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
			//hal_error(status);
	
			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX0);
 8001bb0:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8001bb4:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001bb8:	2301      	movs	r3, #1
 8001bba:	483a      	ldr	r0, [pc, #232]	; (8001ca4 <main+0x358>)
 8001bbc:	f001 fb2a 	bl	8003214 <HAL_CAN_AddTxMessage>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
			//hal_error(status);
		}

		// Task wird alle 500 Millisekunden ausgefuehrt
		if (((count % 500) == 0) && (task_start == 1))
 8001bc6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001bca:	4a3a      	ldr	r2, [pc, #232]	; (8001cb4 <main+0x368>)
 8001bcc:	fba2 1203 	umull	r1, r2, r2, r3
 8001bd0:	0952      	lsrs	r2, r2, #5
 8001bd2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001bd6:	fb01 f202 	mul.w	r2, r1, r2
 8001bda:	1a9b      	subs	r3, r3, r2
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f040 8094 	bne.w	8001d0c <main+0x3c0>
 8001be4:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	f040 808f 	bne.w	8001d0c <main+0x3c0>
		{
			if (rising != 0 && falling != 0)
 8001bee:	4b39      	ldr	r3, [pc, #228]	; (8001cd4 <main+0x388>)
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d073      	beq.n	8001ce0 <main+0x394>
 8001bf8:	4b37      	ldr	r3, [pc, #220]	; (8001cd8 <main+0x38c>)
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d06e      	beq.n	8001ce0 <main+0x394>
			{
				int diff = getDifference(rising, falling);
 8001c02:	4b34      	ldr	r3, [pc, #208]	; (8001cd4 <main+0x388>)
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	4a33      	ldr	r2, [pc, #204]	; (8001cd8 <main+0x38c>)
 8001c0a:	8812      	ldrh	r2, [r2, #0]
 8001c0c:	b292      	uxth	r2, r2
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fe79 	bl	8001908 <getDifference>
 8001c16:	4603      	mov	r3, r0
 8001c18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
				imd.DutyCycle = round((float)(diff * 100) / (float)rising);	// (width / period ) * 100
 8001c1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c20:	2264      	movs	r2, #100	; 0x64
 8001c22:	fb02 f303 	mul.w	r3, r2, r3
 8001c26:	ee07 3a90 	vmov	s15, r3
 8001c2a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c2e:	4b29      	ldr	r3, [pc, #164]	; (8001cd4 <main+0x388>)
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	ee07 3a90 	vmov	s15, r3
 8001c38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c44:	eeb0 0b47 	vmov.f64	d0, d7
 8001c48:	f005 f9da 	bl	8007000 <round>
 8001c4c:	eeb0 7b40 	vmov.f64	d7, d0
 8001c50:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c54:	edc7 7a01 	vstr	s15, [r7, #4]
 8001c58:	793b      	ldrb	r3, [r7, #4]
 8001c5a:	b2d9      	uxtb	r1, r3
 8001c5c:	4a1f      	ldr	r2, [pc, #124]	; (8001cdc <main+0x390>)
 8001c5e:	7893      	ldrb	r3, [r2, #2]
 8001c60:	f361 0306 	bfi	r3, r1, #0, #7
 8001c64:	7093      	strb	r3, [r2, #2]
				imd.Frequency = timerPeriod / rising;						// timer restarts after rising edge so time between two rising edge is whatever is measured
 8001c66:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <main+0x388>)
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8001c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c7a:	b2d9      	uxtb	r1, r3
 8001c7c:	4a17      	ldr	r2, [pc, #92]	; (8001cdc <main+0x390>)
 8001c7e:	7853      	ldrb	r3, [r2, #1]
 8001c80:	f361 0305 	bfi	r3, r1, #0, #6
 8001c84:	7053      	strb	r3, [r2, #1]
			{
 8001c86:	e035      	b.n	8001cf4 <main+0x3a8>
 8001c88:	08007464 	.word	0x08007464
 8001c8c:	0800747c 	.word	0x0800747c
 8001c90:	08007494 	.word	0x08007494
 8001c94:	080074ac 	.word	0x080074ac
 8001c98:	0800740c 	.word	0x0800740c
 8001c9c:	20000250 	.word	0x20000250
 8001ca0:	20000204 	.word	0x20000204
 8001ca4:	200000a0 	.word	0x200000a0
 8001ca8:	08007448 	.word	0x08007448
 8001cac:	08007454 	.word	0x08007454
 8001cb0:	20000030 	.word	0x20000030
 8001cb4:	10624dd3 	.word	0x10624dd3
 8001cb8:	20000040 	.word	0x20000040
 8001cbc:	20000048 	.word	0x20000048
 8001cc0:	20000050 	.word	0x20000050
 8001cc4:	20000034 	.word	0x20000034
 8001cc8:	20000044 	.word	0x20000044
 8001ccc:	20000054 	.word	0x20000054
 8001cd0:	2000004c 	.word	0x2000004c
 8001cd4:	2000002c 	.word	0x2000002c
 8001cd8:	2000002e 	.word	0x2000002e
 8001cdc:	20000038 	.word	0x20000038
			}
			else
			{
				imd.DutyCycle = 0;
 8001ce0:	4a0c      	ldr	r2, [pc, #48]	; (8001d14 <main+0x3c8>)
 8001ce2:	7893      	ldrb	r3, [r2, #2]
 8001ce4:	f36f 0306 	bfc	r3, #0, #7
 8001ce8:	7093      	strb	r3, [r2, #2]
				imd.Frequency = 0;
 8001cea:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <main+0x3c8>)
 8001cec:	7853      	ldrb	r3, [r2, #1]
 8001cee:	f36f 0305 	bfc	r3, #0, #6
 8001cf2:	7053      	strb	r3, [r2, #1]
			}

			imd_status();
 8001cf4:	f7fe ff0c 	bl	8000b10 <imd_status>

			HAL_CAN_AddTxMessage(&hcan3, &TxIMD, imd.status, (uint32_t *)CAN_TX_MAILBOX0);
 8001cf8:	f107 010c 	add.w	r1, r7, #12
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	4a05      	ldr	r2, [pc, #20]	; (8001d14 <main+0x3c8>)
 8001d00:	4805      	ldr	r0, [pc, #20]	; (8001d18 <main+0x3cc>)
 8001d02:	f001 fa87 	bl	8003214 <HAL_CAN_AddTxMessage>

			count = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
		}

		task_start = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
		if (millisekunden_flag_1 == 1)
 8001d12:	e6fa      	b.n	8001b0a <main+0x1be>
 8001d14:	20000038 	.word	0x20000038
 8001d18:	200000a0 	.word	0x200000a0

08001d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b0b8      	sub	sp, #224	; 0xe0
 8001d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d22:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d26:	2234      	movs	r2, #52	; 0x34
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f005 f91c 	bl	8006f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d30:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d40:	f107 0308 	add.w	r3, r7, #8
 8001d44:	2290      	movs	r2, #144	; 0x90
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f005 f90d 	bl	8006f68 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4e:	4b3a      	ldr	r3, [pc, #232]	; (8001e38 <SystemClock_Config+0x11c>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	4a39      	ldr	r2, [pc, #228]	; (8001e38 <SystemClock_Config+0x11c>)
 8001d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d58:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5a:	4b37      	ldr	r3, [pc, #220]	; (8001e38 <SystemClock_Config+0x11c>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d66:	4b35      	ldr	r3, [pc, #212]	; (8001e3c <SystemClock_Config+0x120>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a34      	ldr	r2, [pc, #208]	; (8001e3c <SystemClock_Config+0x120>)
 8001d6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	4b32      	ldr	r3, [pc, #200]	; (8001e3c <SystemClock_Config+0x120>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001d9a:	2319      	movs	r3, #25
 8001d9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001da0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001da4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001da8:	2302      	movs	r3, #2
 8001daa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001dae:	2308      	movs	r3, #8
 8001db0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001db4:	2302      	movs	r3, #2
 8001db6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f001 fe6a 	bl	8003a98 <HAL_RCC_OscConfig>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001dca:	f000 f883 	bl	8001ed4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001dce:	f001 fe13 	bl	80039f8 <HAL_PWREx_EnableOverDrive>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001dd8:	f000 f87c 	bl	8001ed4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ddc:	230f      	movs	r3, #15
 8001dde:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001de2:	2302      	movs	r3, #2
 8001de4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001de8:	2300      	movs	r3, #0
 8001dea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001dee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001df2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001df6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001dfe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e02:	2107      	movs	r1, #7
 8001e04:	4618      	mov	r0, r3
 8001e06:	f002 f8f5 	bl	8003ff4 <HAL_RCC_ClockConfig>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001e10:	f000 f860 	bl	8001ed4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e14:	2380      	movs	r3, #128	; 0x80
 8001e16:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e1c:	f107 0308 	add.w	r3, r7, #8
 8001e20:	4618      	mov	r0, r3
 8001e22:	f002 fabd 	bl	80043a0 <HAL_RCCEx_PeriphCLKConfig>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8001e2c:	f000 f852 	bl	8001ed4 <Error_Handler>
  }
}
 8001e30:	bf00      	nop
 8001e32:	37e0      	adds	r7, #224	; 0xe0
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40007000 	.word	0x40007000

08001e40 <HAL_TIM_PeriodElapsedCallback>:
	can_change = 1;
}

// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e40:	b590      	push	{r4, r7, lr}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	// Kontrolliere welcher Timer den Ueberlauf ausgeloest hat
	if (htim == &htim6)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a1d      	ldr	r2, [pc, #116]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d102      	bne.n	8001e56 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		millisekunden_flag_1 = 1;
 8001e50:	4b1c      	ldr	r3, [pc, #112]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	701a      	strb	r2, [r3, #0]
	}

	// Timer IMD
	if (htim == &htim1)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a1b      	ldr	r2, [pc, #108]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d12c      	bne.n	8001eb8 <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	7f1b      	ldrb	r3, [r3, #28]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d112      	bne.n	8001e8c <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			rising = calculateMovingAverage(rising, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1), 64);
 8001e66:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	461c      	mov	r4, r3
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4815      	ldr	r0, [pc, #84]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001e72:	f003 fd35 	bl	80058e0 <HAL_TIM_ReadCapturedValue>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2240      	movs	r2, #64	; 0x40
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	f7ff fd2f 	bl	80018e0 <calculateMovingAverage>
 8001e82:	4603      	mov	r3, r0
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001e88:	801a      	strh	r2, [r3, #0]
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
		{
			falling = calculateMovingAverage(falling, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2), 64);
		}
	}
}
 8001e8a:	e015      	b.n	8001eb8 <HAL_TIM_PeriodElapsedCallback+0x78>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	7f1b      	ldrb	r3, [r3, #28]
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d111      	bne.n	8001eb8 <HAL_TIM_PeriodElapsedCallback+0x78>
			falling = calculateMovingAverage(falling, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2), 64);
 8001e94:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	461c      	mov	r4, r3
 8001e9c:	2104      	movs	r1, #4
 8001e9e:	480a      	ldr	r0, [pc, #40]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001ea0:	f003 fd1e 	bl	80058e0 <HAL_TIM_ReadCapturedValue>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2240      	movs	r2, #64	; 0x40
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4620      	mov	r0, r4
 8001eac:	f7ff fd18 	bl	80018e0 <calculateMovingAverage>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001eb6:	801a      	strh	r2, [r3, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd90      	pop	{r4, r7, pc}
 8001ec0:	20000204 	.word	0x20000204
 8001ec4:	20000030 	.word	0x20000030
 8001ec8:	20000250 	.word	0x20000250
 8001ecc:	2000002c 	.word	0x2000002c
 8001ed0:	2000002e 	.word	0x2000002e

08001ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001eea:	4a1c      	ldr	r2, [pc, #112]	; (8001f5c <MX_SPI1_Init+0x78>)
 8001eec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eee:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001ef0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ef4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ef6:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001efc:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001efe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001f02:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f04:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f0a:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001f10:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001f12:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001f16:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f18:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001f30:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001f32:	2207      	movs	r2, #7
 8001f34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f36:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001f3e:	2208      	movs	r2, #8
 8001f40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f42:	4805      	ldr	r0, [pc, #20]	; (8001f58 <MX_SPI1_Init+0x74>)
 8001f44:	f002 fe54 	bl	8004bf0 <HAL_SPI_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001f4e:	f7ff ffc1 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000154 	.word	0x20000154
 8001f5c:	40013000 	.word	0x40013000

08001f60 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001f64:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <MX_SPI4_Init+0x74>)
 8001f66:	4a1c      	ldr	r2, [pc, #112]	; (8001fd8 <MX_SPI4_Init+0x78>)
 8001f68:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001f6a:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <MX_SPI4_Init+0x74>)
 8001f6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f70:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001f72:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <MX_SPI4_Init+0x74>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001f78:	4b16      	ldr	r3, [pc, #88]	; (8001fd4 <MX_SPI4_Init+0x74>)
 8001f7a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001f7e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f80:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <MX_SPI4_Init+0x74>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f86:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <MX_SPI4_Init+0x74>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <MX_SPI4_Init+0x74>)
 8001f8e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001f92:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f94:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <MX_SPI4_Init+0x74>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <MX_SPI4_Init+0x74>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <MX_SPI4_Init+0x74>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <MX_SPI4_Init+0x74>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001fac:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <MX_SPI4_Init+0x74>)
 8001fae:	2207      	movs	r2, #7
 8001fb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001fb2:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <MX_SPI4_Init+0x74>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <MX_SPI4_Init+0x74>)
 8001fba:	2208      	movs	r2, #8
 8001fbc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001fbe:	4805      	ldr	r0, [pc, #20]	; (8001fd4 <MX_SPI4_Init+0x74>)
 8001fc0:	f002 fe16 	bl	8004bf0 <HAL_SPI_Init>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001fca:	f7ff ff83 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	200000f0 	.word	0x200000f0
 8001fd8:	40013400 	.word	0x40013400

08001fdc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08c      	sub	sp, #48	; 0x30
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 031c 	add.w	r3, r7, #28
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a3d      	ldr	r2, [pc, #244]	; (80020f0 <HAL_SPI_MspInit+0x114>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d145      	bne.n	800208a <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ffe:	4b3d      	ldr	r3, [pc, #244]	; (80020f4 <HAL_SPI_MspInit+0x118>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	4a3c      	ldr	r2, [pc, #240]	; (80020f4 <HAL_SPI_MspInit+0x118>)
 8002004:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002008:	6453      	str	r3, [r2, #68]	; 0x44
 800200a:	4b3a      	ldr	r3, [pc, #232]	; (80020f4 <HAL_SPI_MspInit+0x118>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002012:	61bb      	str	r3, [r7, #24]
 8002014:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002016:	4b37      	ldr	r3, [pc, #220]	; (80020f4 <HAL_SPI_MspInit+0x118>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a36      	ldr	r2, [pc, #216]	; (80020f4 <HAL_SPI_MspInit+0x118>)
 800201c:	f043 0308 	orr.w	r3, r3, #8
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b34      	ldr	r3, [pc, #208]	; (80020f4 <HAL_SPI_MspInit+0x118>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800202e:	4b31      	ldr	r3, [pc, #196]	; (80020f4 <HAL_SPI_MspInit+0x118>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a30      	ldr	r2, [pc, #192]	; (80020f4 <HAL_SPI_MspInit+0x118>)
 8002034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b2e      	ldr	r3, [pc, #184]	; (80020f4 <HAL_SPI_MspInit+0x118>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2302      	movs	r3, #2
 800204c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002052:	2303      	movs	r3, #3
 8002054:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002056:	2305      	movs	r3, #5
 8002058:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 800205a:	f107 031c 	add.w	r3, r7, #28
 800205e:	4619      	mov	r1, r3
 8002060:	4825      	ldr	r0, [pc, #148]	; (80020f8 <HAL_SPI_MspInit+0x11c>)
 8002062:	f001 faeb 	bl	800363c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTI_MISO_Pin|POTI_CS_Pin|POTI_SCK_Pin;
 8002066:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800206a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206c:	2302      	movs	r3, #2
 800206e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002074:	2303      	movs	r3, #3
 8002076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002078:	2305      	movs	r3, #5
 800207a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800207c:	f107 031c 	add.w	r3, r7, #28
 8002080:	4619      	mov	r1, r3
 8002082:	481e      	ldr	r0, [pc, #120]	; (80020fc <HAL_SPI_MspInit+0x120>)
 8002084:	f001 fada 	bl	800363c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002088:	e02d      	b.n	80020e6 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI4)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a1c      	ldr	r2, [pc, #112]	; (8002100 <HAL_SPI_MspInit+0x124>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d128      	bne.n	80020e6 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002094:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <HAL_SPI_MspInit+0x118>)
 8002096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002098:	4a16      	ldr	r2, [pc, #88]	; (80020f4 <HAL_SPI_MspInit+0x118>)
 800209a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800209e:	6453      	str	r3, [r2, #68]	; 0x44
 80020a0:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <HAL_SPI_MspInit+0x118>)
 80020a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <HAL_SPI_MspInit+0x118>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	4a10      	ldr	r2, [pc, #64]	; (80020f4 <HAL_SPI_MspInit+0x118>)
 80020b2:	f043 0310 	orr.w	r3, r3, #16
 80020b6:	6313      	str	r3, [r2, #48]	; 0x30
 80020b8:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <HAL_SPI_MspInit+0x118>)
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020bc:	f003 0310 	and.w	r3, r3, #16
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ISOSPI_CS_Pin|ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 80020c4:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80020c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ca:	2302      	movs	r3, #2
 80020cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d2:	2303      	movs	r3, #3
 80020d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80020d6:	2305      	movs	r3, #5
 80020d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020da:	f107 031c 	add.w	r3, r7, #28
 80020de:	4619      	mov	r1, r3
 80020e0:	4808      	ldr	r0, [pc, #32]	; (8002104 <HAL_SPI_MspInit+0x128>)
 80020e2:	f001 faab 	bl	800363c <HAL_GPIO_Init>
}
 80020e6:	bf00      	nop
 80020e8:	3730      	adds	r7, #48	; 0x30
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40013000 	.word	0x40013000
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40020c00 	.word	0x40020c00
 80020fc:	40021800 	.word	0x40021800
 8002100:	40013400 	.word	0x40013400
 8002104:	40021000 	.word	0x40021000

08002108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800210e:	4b0f      	ldr	r3, [pc, #60]	; (800214c <HAL_MspInit+0x44>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	4a0e      	ldr	r2, [pc, #56]	; (800214c <HAL_MspInit+0x44>)
 8002114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002118:	6413      	str	r3, [r2, #64]	; 0x40
 800211a:	4b0c      	ldr	r3, [pc, #48]	; (800214c <HAL_MspInit+0x44>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002122:	607b      	str	r3, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <HAL_MspInit+0x44>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	4a08      	ldr	r2, [pc, #32]	; (800214c <HAL_MspInit+0x44>)
 800212c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002130:	6453      	str	r3, [r2, #68]	; 0x44
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_MspInit+0x44>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40023800 	.word	0x40023800

08002150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002162:	e7fe      	b.n	8002162 <HardFault_Handler+0x4>

08002164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002168:	e7fe      	b.n	8002168 <MemManage_Handler+0x4>

0800216a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800216e:	e7fe      	b.n	800216e <BusFault_Handler+0x4>

08002170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002174:	e7fe      	b.n	8002174 <UsageFault_Handler+0x4>

08002176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a4:	f000 faf6 	bl	8002794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}

080021ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021b0:	4802      	ldr	r0, [pc, #8]	; (80021bc <TIM6_DAC_IRQHandler+0x10>)
 80021b2:	f003 f88f 	bl	80052d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000204 	.word	0x20000204

080021c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021c4:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <SystemInit+0x28>)
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ca:	4a07      	ldr	r2, [pc, #28]	; (80021e8 <SystemInit+0x28>)
 80021cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021d4:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <SystemInit+0x28>)
 80021d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021da:	609a      	str	r2, [r3, #8]
#endif
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08c      	sub	sp, #48	; 0x30
 80021f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80021f2:	f107 031c 	add.w	r3, r7, #28
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	605a      	str	r2, [r3, #4]
 80021fc:	609a      	str	r2, [r3, #8]
 80021fe:	60da      	str	r2, [r3, #12]
 8002200:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002202:	f107 030c 	add.w	r3, r7, #12
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002210:	463b      	mov	r3, r7
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]
 8002218:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800221a:	4b35      	ldr	r3, [pc, #212]	; (80022f0 <MX_TIM1_Init+0x104>)
 800221c:	4a35      	ldr	r2, [pc, #212]	; (80022f4 <MX_TIM1_Init+0x108>)
 800221e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002220:	4b33      	ldr	r3, [pc, #204]	; (80022f0 <MX_TIM1_Init+0x104>)
 8002222:	2200      	movs	r2, #0
 8002224:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002226:	4b32      	ldr	r3, [pc, #200]	; (80022f0 <MX_TIM1_Init+0x104>)
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800222c:	4b30      	ldr	r3, [pc, #192]	; (80022f0 <MX_TIM1_Init+0x104>)
 800222e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002232:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002234:	4b2e      	ldr	r3, [pc, #184]	; (80022f0 <MX_TIM1_Init+0x104>)
 8002236:	2200      	movs	r2, #0
 8002238:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800223a:	4b2d      	ldr	r3, [pc, #180]	; (80022f0 <MX_TIM1_Init+0x104>)
 800223c:	2200      	movs	r2, #0
 800223e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002240:	4b2b      	ldr	r3, [pc, #172]	; (80022f0 <MX_TIM1_Init+0x104>)
 8002242:	2200      	movs	r2, #0
 8002244:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002246:	482a      	ldr	r0, [pc, #168]	; (80022f0 <MX_TIM1_Init+0x104>)
 8002248:	f002 fea3 	bl	8004f92 <HAL_TIM_IC_Init>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8002252:	f7ff fe3f 	bl	8001ed4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002256:	2304      	movs	r3, #4
 8002258:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800225a:	2350      	movs	r3, #80	; 0x50
 800225c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800225e:	2300      	movs	r3, #0
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002262:	2300      	movs	r3, #0
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800226a:	f107 031c 	add.w	r3, r7, #28
 800226e:	4619      	mov	r1, r3
 8002270:	481f      	ldr	r0, [pc, #124]	; (80022f0 <MX_TIM1_Init+0x104>)
 8002272:	f003 faf3 	bl	800585c <HAL_TIM_SlaveConfigSynchro>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800227c:	f7ff fe2a 	bl	8001ed4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002284:	2301      	movs	r3, #1
 8002286:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002290:	f107 030c 	add.w	r3, r7, #12
 8002294:	2200      	movs	r2, #0
 8002296:	4619      	mov	r1, r3
 8002298:	4815      	ldr	r0, [pc, #84]	; (80022f0 <MX_TIM1_Init+0x104>)
 800229a:	f003 f93a 	bl	8005512 <HAL_TIM_IC_ConfigChannel>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80022a4:	f7ff fe16 	bl	8001ed4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80022a8:	2302      	movs	r3, #2
 80022aa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80022ac:	2302      	movs	r3, #2
 80022ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80022b0:	f107 030c 	add.w	r3, r7, #12
 80022b4:	2204      	movs	r2, #4
 80022b6:	4619      	mov	r1, r3
 80022b8:	480d      	ldr	r0, [pc, #52]	; (80022f0 <MX_TIM1_Init+0x104>)
 80022ba:	f003 f92a 	bl	8005512 <HAL_TIM_IC_ConfigChannel>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80022c4:	f7ff fe06 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022c8:	2300      	movs	r3, #0
 80022ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80022cc:	2300      	movs	r3, #0
 80022ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022d4:	463b      	mov	r3, r7
 80022d6:	4619      	mov	r1, r3
 80022d8:	4805      	ldr	r0, [pc, #20]	; (80022f0 <MX_TIM1_Init+0x104>)
 80022da:	f004 f8c9 	bl	8006470 <HAL_TIMEx_MasterConfigSynchronization>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80022e4:	f7ff fdf6 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80022e8:	bf00      	nop
 80022ea:	3730      	adds	r7, #48	; 0x30
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000250 	.word	0x20000250
 80022f4:	40010000 	.word	0x40010000

080022f8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08a      	sub	sp, #40	; 0x28
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022fe:	f107 031c 	add.w	r3, r7, #28
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800230a:	463b      	mov	r3, r7
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
 8002318:	615a      	str	r2, [r3, #20]
 800231a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800231c:	4b32      	ldr	r3, [pc, #200]	; (80023e8 <MX_TIM4_Init+0xf0>)
 800231e:	4a33      	ldr	r2, [pc, #204]	; (80023ec <MX_TIM4_Init+0xf4>)
 8002320:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002322:	4b31      	ldr	r3, [pc, #196]	; (80023e8 <MX_TIM4_Init+0xf0>)
 8002324:	2200      	movs	r2, #0
 8002326:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002328:	4b2f      	ldr	r3, [pc, #188]	; (80023e8 <MX_TIM4_Init+0xf0>)
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800232e:	4b2e      	ldr	r3, [pc, #184]	; (80023e8 <MX_TIM4_Init+0xf0>)
 8002330:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002334:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002336:	4b2c      	ldr	r3, [pc, #176]	; (80023e8 <MX_TIM4_Init+0xf0>)
 8002338:	2200      	movs	r2, #0
 800233a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233c:	4b2a      	ldr	r3, [pc, #168]	; (80023e8 <MX_TIM4_Init+0xf0>)
 800233e:	2200      	movs	r2, #0
 8002340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002342:	4829      	ldr	r0, [pc, #164]	; (80023e8 <MX_TIM4_Init+0xf0>)
 8002344:	f002 fdce 	bl	8004ee4 <HAL_TIM_PWM_Init>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800234e:	f7ff fdc1 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002356:	2300      	movs	r3, #0
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800235a:	f107 031c 	add.w	r3, r7, #28
 800235e:	4619      	mov	r1, r3
 8002360:	4821      	ldr	r0, [pc, #132]	; (80023e8 <MX_TIM4_Init+0xf0>)
 8002362:	f004 f885 	bl	8006470 <HAL_TIMEx_MasterConfigSynchronization>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800236c:	f7ff fdb2 	bl	8001ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002370:	2360      	movs	r3, #96	; 0x60
 8002372:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002378:	2300      	movs	r3, #0
 800237a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800237c:	2300      	movs	r3, #0
 800237e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002380:	463b      	mov	r3, r7
 8002382:	2200      	movs	r2, #0
 8002384:	4619      	mov	r1, r3
 8002386:	4818      	ldr	r0, [pc, #96]	; (80023e8 <MX_TIM4_Init+0xf0>)
 8002388:	f003 f958 	bl	800563c <HAL_TIM_PWM_ConfigChannel>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002392:	f7ff fd9f 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002396:	463b      	mov	r3, r7
 8002398:	2204      	movs	r2, #4
 800239a:	4619      	mov	r1, r3
 800239c:	4812      	ldr	r0, [pc, #72]	; (80023e8 <MX_TIM4_Init+0xf0>)
 800239e:	f003 f94d 	bl	800563c <HAL_TIM_PWM_ConfigChannel>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80023a8:	f7ff fd94 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023ac:	463b      	mov	r3, r7
 80023ae:	2208      	movs	r2, #8
 80023b0:	4619      	mov	r1, r3
 80023b2:	480d      	ldr	r0, [pc, #52]	; (80023e8 <MX_TIM4_Init+0xf0>)
 80023b4:	f003 f942 	bl	800563c <HAL_TIM_PWM_ConfigChannel>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80023be:	f7ff fd89 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023c2:	463b      	mov	r3, r7
 80023c4:	220c      	movs	r2, #12
 80023c6:	4619      	mov	r1, r3
 80023c8:	4807      	ldr	r0, [pc, #28]	; (80023e8 <MX_TIM4_Init+0xf0>)
 80023ca:	f003 f937 	bl	800563c <HAL_TIM_PWM_ConfigChannel>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80023d4:	f7ff fd7e 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80023d8:	4803      	ldr	r0, [pc, #12]	; (80023e8 <MX_TIM4_Init+0xf0>)
 80023da:	f000 f8c9 	bl	8002570 <HAL_TIM_MspPostInit>

}
 80023de:	bf00      	nop
 80023e0:	3728      	adds	r7, #40	; 0x28
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	200001b8 	.word	0x200001b8
 80023ec:	40000800 	.word	0x40000800

080023f0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023f6:	1d3b      	adds	r3, r7, #4
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002400:	4b14      	ldr	r3, [pc, #80]	; (8002454 <MX_TIM6_Init+0x64>)
 8002402:	4a15      	ldr	r2, [pc, #84]	; (8002458 <MX_TIM6_Init+0x68>)
 8002404:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 27;
 8002406:	4b13      	ldr	r3, [pc, #76]	; (8002454 <MX_TIM6_Init+0x64>)
 8002408:	221b      	movs	r2, #27
 800240a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800240c:	4b11      	ldr	r3, [pc, #68]	; (8002454 <MX_TIM6_Init+0x64>)
 800240e:	2200      	movs	r2, #0
 8002410:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000;
 8002412:	4b10      	ldr	r3, [pc, #64]	; (8002454 <MX_TIM6_Init+0x64>)
 8002414:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002418:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800241a:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <MX_TIM6_Init+0x64>)
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002420:	480c      	ldr	r0, [pc, #48]	; (8002454 <MX_TIM6_Init+0x64>)
 8002422:	f002 fc90 	bl	8004d46 <HAL_TIM_Base_Init>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800242c:	f7ff fd52 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002430:	2300      	movs	r3, #0
 8002432:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002438:	1d3b      	adds	r3, r7, #4
 800243a:	4619      	mov	r1, r3
 800243c:	4805      	ldr	r0, [pc, #20]	; (8002454 <MX_TIM6_Init+0x64>)
 800243e:	f004 f817 	bl	8006470 <HAL_TIMEx_MasterConfigSynchronization>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002448:	f7ff fd44 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800244c:	bf00      	nop
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000204 	.word	0x20000204
 8002458:	40001000 	.word	0x40001000

0800245c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08a      	sub	sp, #40	; 0x28
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 0314 	add.w	r3, r7, #20
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a17      	ldr	r2, [pc, #92]	; (80024d8 <HAL_TIM_IC_MspInit+0x7c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d128      	bne.n	80024d0 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800247e:	4b17      	ldr	r3, [pc, #92]	; (80024dc <HAL_TIM_IC_MspInit+0x80>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	4a16      	ldr	r2, [pc, #88]	; (80024dc <HAL_TIM_IC_MspInit+0x80>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	6453      	str	r3, [r2, #68]	; 0x44
 800248a:	4b14      	ldr	r3, [pc, #80]	; (80024dc <HAL_TIM_IC_MspInit+0x80>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <HAL_TIM_IC_MspInit+0x80>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	4a10      	ldr	r2, [pc, #64]	; (80024dc <HAL_TIM_IC_MspInit+0x80>)
 800249c:	f043 0310 	orr.w	r3, r3, #16
 80024a0:	6313      	str	r3, [r2, #48]	; 0x30
 80024a2:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <HAL_TIM_IC_MspInit+0x80>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f003 0310 	and.w	r3, r3, #16
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 80024ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b4:	2302      	movs	r3, #2
 80024b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024bc:	2300      	movs	r3, #0
 80024be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024c0:	2301      	movs	r3, #1
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	4619      	mov	r1, r3
 80024ca:	4805      	ldr	r0, [pc, #20]	; (80024e0 <HAL_TIM_IC_MspInit+0x84>)
 80024cc:	f001 f8b6 	bl	800363c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80024d0:	bf00      	nop
 80024d2:	3728      	adds	r7, #40	; 0x28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40010000 	.word	0x40010000
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40021000 	.word	0x40021000

080024e4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a0a      	ldr	r2, [pc, #40]	; (800251c <HAL_TIM_PWM_MspInit+0x38>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d10b      	bne.n	800250e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024f6:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <HAL_TIM_PWM_MspInit+0x3c>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	4a09      	ldr	r2, [pc, #36]	; (8002520 <HAL_TIM_PWM_MspInit+0x3c>)
 80024fc:	f043 0304 	orr.w	r3, r3, #4
 8002500:	6413      	str	r3, [r2, #64]	; 0x40
 8002502:	4b07      	ldr	r3, [pc, #28]	; (8002520 <HAL_TIM_PWM_MspInit+0x3c>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800250e:	bf00      	nop
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	40000800 	.word	0x40000800
 8002520:	40023800 	.word	0x40023800

08002524 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a0d      	ldr	r2, [pc, #52]	; (8002568 <HAL_TIM_Base_MspInit+0x44>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d113      	bne.n	800255e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002536:	4b0d      	ldr	r3, [pc, #52]	; (800256c <HAL_TIM_Base_MspInit+0x48>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	4a0c      	ldr	r2, [pc, #48]	; (800256c <HAL_TIM_Base_MspInit+0x48>)
 800253c:	f043 0310 	orr.w	r3, r3, #16
 8002540:	6413      	str	r3, [r2, #64]	; 0x40
 8002542:	4b0a      	ldr	r3, [pc, #40]	; (800256c <HAL_TIM_Base_MspInit+0x48>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f003 0310 	and.w	r3, r3, #16
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800254e:	2200      	movs	r2, #0
 8002550:	2100      	movs	r1, #0
 8002552:	2036      	movs	r0, #54	; 0x36
 8002554:	f001 f83b 	bl	80035ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002558:	2036      	movs	r0, #54	; 0x36
 800255a:	f001 f854 	bl	8003606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800255e:	bf00      	nop
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40001000 	.word	0x40001000
 800256c:	40023800 	.word	0x40023800

08002570 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002578:	f107 030c 	add.w	r3, r7, #12
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a11      	ldr	r2, [pc, #68]	; (80025d4 <HAL_TIM_MspPostInit+0x64>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d11c      	bne.n	80025cc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002592:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <HAL_TIM_MspPostInit+0x68>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	4a10      	ldr	r2, [pc, #64]	; (80025d8 <HAL_TIM_MspPostInit+0x68>)
 8002598:	f043 0308 	orr.w	r3, r3, #8
 800259c:	6313      	str	r3, [r2, #48]	; 0x30
 800259e:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <HAL_TIM_MspPostInit+0x68>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	60bb      	str	r3, [r7, #8]
 80025a8:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin|PWM_HV_Charger_Pin;
 80025aa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80025ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b0:	2302      	movs	r3, #2
 80025b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025bc:	2302      	movs	r3, #2
 80025be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025c0:	f107 030c 	add.w	r3, r7, #12
 80025c4:	4619      	mov	r1, r3
 80025c6:	4805      	ldr	r0, [pc, #20]	; (80025dc <HAL_TIM_MspPostInit+0x6c>)
 80025c8:	f001 f838 	bl	800363c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80025cc:	bf00      	nop
 80025ce:	3720      	adds	r7, #32
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40000800 	.word	0x40000800
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40020c00 	.word	0x40020c00

080025e0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025e4:	4b14      	ldr	r3, [pc, #80]	; (8002638 <MX_USART2_UART_Init+0x58>)
 80025e6:	4a15      	ldr	r2, [pc, #84]	; (800263c <MX_USART2_UART_Init+0x5c>)
 80025e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80025ea:	4b13      	ldr	r3, [pc, #76]	; (8002638 <MX_USART2_UART_Init+0x58>)
 80025ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80025f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025f2:	4b11      	ldr	r3, [pc, #68]	; (8002638 <MX_USART2_UART_Init+0x58>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025f8:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <MX_USART2_UART_Init+0x58>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025fe:	4b0e      	ldr	r3, [pc, #56]	; (8002638 <MX_USART2_UART_Init+0x58>)
 8002600:	2200      	movs	r2, #0
 8002602:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <MX_USART2_UART_Init+0x58>)
 8002606:	220c      	movs	r2, #12
 8002608:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800260a:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <MX_USART2_UART_Init+0x58>)
 800260c:	2200      	movs	r2, #0
 800260e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002610:	4b09      	ldr	r3, [pc, #36]	; (8002638 <MX_USART2_UART_Init+0x58>)
 8002612:	2200      	movs	r2, #0
 8002614:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002616:	4b08      	ldr	r3, [pc, #32]	; (8002638 <MX_USART2_UART_Init+0x58>)
 8002618:	2200      	movs	r2, #0
 800261a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <MX_USART2_UART_Init+0x58>)
 800261e:	2200      	movs	r2, #0
 8002620:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002622:	4805      	ldr	r0, [pc, #20]	; (8002638 <MX_USART2_UART_Init+0x58>)
 8002624:	f003 ffd0 	bl	80065c8 <HAL_UART_Init>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800262e:	f7ff fc51 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	2000029c 	.word	0x2000029c
 800263c:	40004400 	.word	0x40004400

08002640 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08a      	sub	sp, #40	; 0x28
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a17      	ldr	r2, [pc, #92]	; (80026bc <HAL_UART_MspInit+0x7c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d127      	bne.n	80026b2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002662:	4b17      	ldr	r3, [pc, #92]	; (80026c0 <HAL_UART_MspInit+0x80>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	4a16      	ldr	r2, [pc, #88]	; (80026c0 <HAL_UART_MspInit+0x80>)
 8002668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800266c:	6413      	str	r3, [r2, #64]	; 0x40
 800266e:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <HAL_UART_MspInit+0x80>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800267a:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <HAL_UART_MspInit+0x80>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	4a10      	ldr	r2, [pc, #64]	; (80026c0 <HAL_UART_MspInit+0x80>)
 8002680:	f043 0308 	orr.w	r3, r3, #8
 8002684:	6313      	str	r3, [r2, #48]	; 0x30
 8002686:	4b0e      	ldr	r3, [pc, #56]	; (80026c0 <HAL_UART_MspInit+0x80>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002692:	2360      	movs	r3, #96	; 0x60
 8002694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	2302      	movs	r3, #2
 8002698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269e:	2303      	movs	r3, #3
 80026a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026a2:	2307      	movs	r3, #7
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026a6:	f107 0314 	add.w	r3, r7, #20
 80026aa:	4619      	mov	r1, r3
 80026ac:	4805      	ldr	r0, [pc, #20]	; (80026c4 <HAL_UART_MspInit+0x84>)
 80026ae:	f000 ffc5 	bl	800363c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80026b2:	bf00      	nop
 80026b4:	3728      	adds	r7, #40	; 0x28
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40004400 	.word	0x40004400
 80026c0:	40023800 	.word	0x40023800
 80026c4:	40020c00 	.word	0x40020c00

080026c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002700 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80026cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026ce:	e003      	b.n	80026d8 <LoopCopyDataInit>

080026d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026d0:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80026d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026d6:	3104      	adds	r1, #4

080026d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80026d8:	480b      	ldr	r0, [pc, #44]	; (8002708 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80026da:	4b0c      	ldr	r3, [pc, #48]	; (800270c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80026dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026e0:	d3f6      	bcc.n	80026d0 <CopyDataInit>
  ldr  r2, =_sbss
 80026e2:	4a0b      	ldr	r2, [pc, #44]	; (8002710 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80026e4:	e002      	b.n	80026ec <LoopFillZerobss>

080026e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80026e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80026e8:	f842 3b04 	str.w	r3, [r2], #4

080026ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80026ec:	4b09      	ldr	r3, [pc, #36]	; (8002714 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80026ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80026f0:	d3f9      	bcc.n	80026e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026f2:	f7ff fd65 	bl	80021c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026f6:	f004 fc13 	bl	8006f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026fa:	f7ff f927 	bl	800194c <main>
  bx  lr    
 80026fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002700:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002704:	08007514 	.word	0x08007514
  ldr  r0, =_sdata
 8002708:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800270c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002710:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002714:	20000324 	.word	0x20000324

08002718 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002718:	e7fe      	b.n	8002718 <ADC_IRQHandler>

0800271a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800271e:	2003      	movs	r0, #3
 8002720:	f000 ff4a 	bl	80035b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002724:	2000      	movs	r0, #0
 8002726:	f000 f805 	bl	8002734 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800272a:	f7ff fced 	bl	8002108 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800273c:	4b12      	ldr	r3, [pc, #72]	; (8002788 <HAL_InitTick+0x54>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4b12      	ldr	r3, [pc, #72]	; (800278c <HAL_InitTick+0x58>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	4619      	mov	r1, r3
 8002746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800274a:	fbb3 f3f1 	udiv	r3, r3, r1
 800274e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002752:	4618      	mov	r0, r3
 8002754:	f000 ff65 	bl	8003622 <HAL_SYSTICK_Config>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e00e      	b.n	8002780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b0f      	cmp	r3, #15
 8002766:	d80a      	bhi.n	800277e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002768:	2200      	movs	r2, #0
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	f04f 30ff 	mov.w	r0, #4294967295
 8002770:	f000 ff2d 	bl	80035ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002774:	4a06      	ldr	r2, [pc, #24]	; (8002790 <HAL_InitTick+0x5c>)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	e000      	b.n	8002780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
}
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20000000 	.word	0x20000000
 800278c:	20000008 	.word	0x20000008
 8002790:	20000004 	.word	0x20000004

08002794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <HAL_IncTick+0x20>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	461a      	mov	r2, r3
 800279e:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_IncTick+0x24>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4413      	add	r3, r2
 80027a4:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <HAL_IncTick+0x24>)
 80027a6:	6013      	str	r3, [r2, #0]
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	20000008 	.word	0x20000008
 80027b8:	20000320 	.word	0x20000320

080027bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return uwTick;
 80027c0:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <HAL_GetTick+0x14>)
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	20000320 	.word	0x20000320

080027d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027dc:	f7ff ffee 	bl	80027bc <HAL_GetTick>
 80027e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ec:	d005      	beq.n	80027fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ee:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <HAL_Delay+0x44>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4413      	add	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027fa:	bf00      	nop
 80027fc:	f7ff ffde 	bl	80027bc <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	429a      	cmp	r2, r3
 800280a:	d8f7      	bhi.n	80027fc <HAL_Delay+0x28>
  {
  }
}
 800280c:	bf00      	nop
 800280e:	bf00      	nop
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000008 	.word	0x20000008

0800281c <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
 return __STM32F7xx_HAL_VERSION;
 8002820:	4b02      	ldr	r3, [pc, #8]	; (800282c <HAL_GetHalVersion+0x10>)
}
 8002822:	4618      	mov	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	01020900 	.word	0x01020900

08002830 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8002834:	4b03      	ldr	r3, [pc, #12]	; (8002844 <HAL_GetREVID+0x14>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	0c1b      	lsrs	r3, r3, #16
}
 800283a:	4618      	mov	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e0042000 	.word	0xe0042000

08002848 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800284c:	4b04      	ldr	r3, [pc, #16]	; (8002860 <HAL_GetDEVID+0x18>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002854:	4618      	mov	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	e0042000 	.word	0xe0042000

08002864 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8002868:	4b03      	ldr	r3, [pc, #12]	; (8002878 <HAL_GetUIDw0+0x14>)
 800286a:	681b      	ldr	r3, [r3, #0]
}
 800286c:	4618      	mov	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	1ff0f420 	.word	0x1ff0f420

0800287c <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002880:	4b03      	ldr	r3, [pc, #12]	; (8002890 <HAL_GetUIDw1+0x14>)
 8002882:	681b      	ldr	r3, [r3, #0]
}
 8002884:	4618      	mov	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	1ff0f424 	.word	0x1ff0f424

08002894 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <HAL_GetUIDw2+0x14>)
 800289a:	681b      	ldr	r3, [r3, #0]
}
 800289c:	4618      	mov	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	1ff0f428 	.word	0x1ff0f428

080028ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028b4:	2300      	movs	r3, #0
 80028b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e031      	b.n	8002926 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d109      	bne.n	80028de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fe fd24 	bl	8001318 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d116      	bne.n	8002918 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ee:	4b10      	ldr	r3, [pc, #64]	; (8002930 <HAL_ADC_Init+0x84>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	f043 0202 	orr.w	r2, r3, #2
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f964 	bl	8002bc8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f023 0303 	bic.w	r3, r3, #3
 800290e:	f043 0201 	orr.w	r2, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	641a      	str	r2, [r3, #64]	; 0x40
 8002916:	e001      	b.n	800291c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002924:	7bfb      	ldrb	r3, [r7, #15]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	ffffeefd 	.word	0xffffeefd

08002934 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x1c>
 800294c:	2302      	movs	r3, #2
 800294e:	e12a      	b.n	8002ba6 <HAL_ADC_ConfigChannel+0x272>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b09      	cmp	r3, #9
 800295e:	d93a      	bls.n	80029d6 <HAL_ADC_ConfigChannel+0xa2>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002968:	d035      	beq.n	80029d6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68d9      	ldr	r1, [r3, #12]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	b29b      	uxth	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	4613      	mov	r3, r2
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4413      	add	r3, r2
 800297e:	3b1e      	subs	r3, #30
 8002980:	2207      	movs	r2, #7
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43da      	mvns	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	400a      	ands	r2, r1
 800298e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a87      	ldr	r2, [pc, #540]	; (8002bb4 <HAL_ADC_ConfigChannel+0x280>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d10a      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68d9      	ldr	r1, [r3, #12]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	061a      	lsls	r2, r3, #24
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029ae:	e035      	b.n	8002a1c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68d9      	ldr	r1, [r3, #12]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	b29b      	uxth	r3, r3
 80029c0:	4618      	mov	r0, r3
 80029c2:	4603      	mov	r3, r0
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	4403      	add	r3, r0
 80029c8:	3b1e      	subs	r3, #30
 80029ca:	409a      	lsls	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029d4:	e022      	b.n	8002a1c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6919      	ldr	r1, [r3, #16]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	4613      	mov	r3, r2
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	4413      	add	r3, r2
 80029ea:	2207      	movs	r2, #7
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43da      	mvns	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	400a      	ands	r2, r1
 80029f8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6919      	ldr	r1, [r3, #16]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	4403      	add	r3, r0
 8002a12:	409a      	lsls	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b06      	cmp	r3, #6
 8002a22:	d824      	bhi.n	8002a6e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	3b05      	subs	r3, #5
 8002a36:	221f      	movs	r2, #31
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	43da      	mvns	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	400a      	ands	r2, r1
 8002a44:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	4618      	mov	r0, r3
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3b05      	subs	r3, #5
 8002a60:	fa00 f203 	lsl.w	r2, r0, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	635a      	str	r2, [r3, #52]	; 0x34
 8002a6c:	e04c      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b0c      	cmp	r3, #12
 8002a74:	d824      	bhi.n	8002ac0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	3b23      	subs	r3, #35	; 0x23
 8002a88:	221f      	movs	r2, #31
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43da      	mvns	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	400a      	ands	r2, r1
 8002a96:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	3b23      	subs	r3, #35	; 0x23
 8002ab2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	631a      	str	r2, [r3, #48]	; 0x30
 8002abe:	e023      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	3b41      	subs	r3, #65	; 0x41
 8002ad2:	221f      	movs	r2, #31
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43da      	mvns	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	400a      	ands	r2, r1
 8002ae0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	4618      	mov	r0, r3
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	3b41      	subs	r3, #65	; 0x41
 8002afc:	fa00 f203 	lsl.w	r2, r0, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a2a      	ldr	r2, [pc, #168]	; (8002bb8 <HAL_ADC_ConfigChannel+0x284>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d10a      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x1f4>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b1a:	d105      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002b1c:	4b27      	ldr	r3, [pc, #156]	; (8002bbc <HAL_ADC_ConfigChannel+0x288>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	4a26      	ldr	r2, [pc, #152]	; (8002bbc <HAL_ADC_ConfigChannel+0x288>)
 8002b22:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002b26:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a22      	ldr	r2, [pc, #136]	; (8002bb8 <HAL_ADC_ConfigChannel+0x284>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d109      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x212>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b12      	cmp	r3, #18
 8002b38:	d105      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002b3a:	4b20      	ldr	r3, [pc, #128]	; (8002bbc <HAL_ADC_ConfigChannel+0x288>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	4a1f      	ldr	r2, [pc, #124]	; (8002bbc <HAL_ADC_ConfigChannel+0x288>)
 8002b40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b44:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a1b      	ldr	r2, [pc, #108]	; (8002bb8 <HAL_ADC_ConfigChannel+0x284>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d125      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x268>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a17      	ldr	r2, [pc, #92]	; (8002bb4 <HAL_ADC_ConfigChannel+0x280>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d003      	beq.n	8002b62 <HAL_ADC_ConfigChannel+0x22e>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b11      	cmp	r3, #17
 8002b60:	d11c      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002b62:	4b16      	ldr	r3, [pc, #88]	; (8002bbc <HAL_ADC_ConfigChannel+0x288>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	4a15      	ldr	r2, [pc, #84]	; (8002bbc <HAL_ADC_ConfigChannel+0x288>)
 8002b68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b6c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a10      	ldr	r2, [pc, #64]	; (8002bb4 <HAL_ADC_ConfigChannel+0x280>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d111      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002b78:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <HAL_ADC_ConfigChannel+0x28c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a11      	ldr	r2, [pc, #68]	; (8002bc4 <HAL_ADC_ConfigChannel+0x290>)
 8002b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b82:	0c9a      	lsrs	r2, r3, #18
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b8e:	e002      	b.n	8002b96 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1f9      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	10000012 	.word	0x10000012
 8002bb8:	40012000 	.word	0x40012000
 8002bbc:	40012300 	.word	0x40012300
 8002bc0:	20000000 	.word	0x20000000
 8002bc4:	431bde83 	.word	0x431bde83

08002bc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002bd0:	4b78      	ldr	r3, [pc, #480]	; (8002db4 <ADC_Init+0x1ec>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	4a77      	ldr	r2, [pc, #476]	; (8002db4 <ADC_Init+0x1ec>)
 8002bd6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002bda:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002bdc:	4b75      	ldr	r3, [pc, #468]	; (8002db4 <ADC_Init+0x1ec>)
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	4973      	ldr	r1, [pc, #460]	; (8002db4 <ADC_Init+0x1ec>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	021a      	lsls	r2, r3, #8
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6859      	ldr	r1, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6899      	ldr	r1, [r3, #8]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c56:	4a58      	ldr	r2, [pc, #352]	; (8002db8 <ADC_Init+0x1f0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d022      	beq.n	8002ca2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6899      	ldr	r1, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6899      	ldr	r1, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	e00f      	b.n	8002cc2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cc0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0202 	bic.w	r2, r2, #2
 8002cd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6899      	ldr	r1, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	005a      	lsls	r2, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d01b      	beq.n	8002d28 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cfe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6859      	ldr	r1, [r3, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	035a      	lsls	r2, r3, #13
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	e007      	b.n	8002d38 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	051a      	lsls	r2, r3, #20
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6899      	ldr	r1, [r3, #8]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d7a:	025a      	lsls	r2, r3, #9
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6899      	ldr	r1, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	029a      	lsls	r2, r3, #10
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	609a      	str	r2, [r3, #8]
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	40012300 	.word	0x40012300
 8002db8:	0f000001 	.word	0x0f000001

08002dbc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e0ed      	b.n	8002faa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d102      	bne.n	8002de0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7fe fb48 	bl	8001470 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0202 	bic.w	r2, r2, #2
 8002dee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002df0:	f7ff fce4 	bl	80027bc <HAL_GetTick>
 8002df4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002df6:	e012      	b.n	8002e1e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002df8:	f7ff fce0 	bl	80027bc <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b0a      	cmp	r3, #10
 8002e04:	d90b      	bls.n	8002e1e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2205      	movs	r2, #5
 8002e16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e0c5      	b.n	8002faa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1e5      	bne.n	8002df8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e3c:	f7ff fcbe 	bl	80027bc <HAL_GetTick>
 8002e40:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e42:	e012      	b.n	8002e6a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e44:	f7ff fcba 	bl	80027bc <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b0a      	cmp	r3, #10
 8002e50:	d90b      	bls.n	8002e6a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2205      	movs	r2, #5
 8002e62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e09f      	b.n	8002faa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0e5      	beq.n	8002e44 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	7e1b      	ldrb	r3, [r3, #24]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d108      	bne.n	8002e92 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	e007      	b.n	8002ea2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ea0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	7e5b      	ldrb	r3, [r3, #25]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d108      	bne.n	8002ebc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	e007      	b.n	8002ecc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	7e9b      	ldrb	r3, [r3, #26]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d108      	bne.n	8002ee6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0220 	orr.w	r2, r2, #32
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	e007      	b.n	8002ef6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0220 	bic.w	r2, r2, #32
 8002ef4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	7edb      	ldrb	r3, [r3, #27]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d108      	bne.n	8002f10 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0210 	bic.w	r2, r2, #16
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	e007      	b.n	8002f20 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0210 	orr.w	r2, r2, #16
 8002f1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	7f1b      	ldrb	r3, [r3, #28]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d108      	bne.n	8002f3a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0208 	orr.w	r2, r2, #8
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	e007      	b.n	8002f4a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0208 	bic.w	r2, r2, #8
 8002f48:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	7f5b      	ldrb	r3, [r3, #29]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d108      	bne.n	8002f64 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f042 0204 	orr.w	r2, r2, #4
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	e007      	b.n	8002f74 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0204 	bic.w	r2, r2, #4
 8002f72:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	ea42 0103 	orr.w	r1, r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	1e5a      	subs	r2, r3, #1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fca:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002fcc:	7cfb      	ldrb	r3, [r7, #19]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d003      	beq.n	8002fda <HAL_CAN_ConfigFilter+0x26>
 8002fd2:	7cfb      	ldrb	r3, [r7, #19]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	f040 80c7 	bne.w	8003168 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a69      	ldr	r2, [pc, #420]	; (8003184 <HAL_CAN_ConfigFilter+0x1d0>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d001      	beq.n	8002fe8 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002fe4:	4b68      	ldr	r3, [pc, #416]	; (8003188 <HAL_CAN_ConfigFilter+0x1d4>)
 8002fe6:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002fee:	f043 0201 	orr.w	r2, r3, #1
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	4a63      	ldr	r2, [pc, #396]	; (8003188 <HAL_CAN_ConfigFilter+0x1d4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d111      	bne.n	8003024 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003006:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	021b      	lsls	r3, r3, #8
 800301c:	431a      	orrs	r2, r3
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	f003 031f 	and.w	r3, r3, #31
 800302c:	2201      	movs	r2, #1
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	43db      	mvns	r3, r3
 800303e:	401a      	ands	r2, r3
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d123      	bne.n	8003096 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	43db      	mvns	r3, r3
 8003058:	401a      	ands	r2, r3
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003070:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	3248      	adds	r2, #72	; 0x48
 8003076:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800308a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800308c:	6979      	ldr	r1, [r7, #20]
 800308e:	3348      	adds	r3, #72	; 0x48
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	440b      	add	r3, r1
 8003094:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d122      	bne.n	80030e4 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	431a      	orrs	r2, r3
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80030be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	3248      	adds	r2, #72	; 0x48
 80030c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030da:	6979      	ldr	r1, [r7, #20]
 80030dc:	3348      	adds	r3, #72	; 0x48
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	440b      	add	r3, r1
 80030e2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d109      	bne.n	8003100 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	43db      	mvns	r3, r3
 80030f6:	401a      	ands	r2, r3
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80030fe:	e007      	b.n	8003110 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	431a      	orrs	r2, r3
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d109      	bne.n	800312c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	43db      	mvns	r3, r3
 8003122:	401a      	ands	r2, r3
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800312a:	e007      	b.n	800313c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	431a      	orrs	r2, r3
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d107      	bne.n	8003154 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	431a      	orrs	r2, r3
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800315a:	f023 0201 	bic.w	r2, r3, #1
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003164:	2300      	movs	r3, #0
 8003166:	e006      	b.n	8003176 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
  }
}
 8003176:	4618      	mov	r0, r3
 8003178:	371c      	adds	r7, #28
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40003400 	.word	0x40003400
 8003188:	40006400 	.word	0x40006400

0800318c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3020 	ldrb.w	r3, [r3, #32]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b01      	cmp	r3, #1
 800319e:	d12e      	bne.n	80031fe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0201 	bic.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031b8:	f7ff fb00 	bl	80027bc <HAL_GetTick>
 80031bc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80031be:	e012      	b.n	80031e6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031c0:	f7ff fafc 	bl	80027bc <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b0a      	cmp	r3, #10
 80031cc:	d90b      	bls.n	80031e6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2205      	movs	r2, #5
 80031de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e012      	b.n	800320c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1e5      	bne.n	80031c0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	e006      	b.n	800320c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
  }
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003214:	b480      	push	{r7}
 8003216:	b089      	sub	sp, #36	; 0x24
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
 8003220:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003228:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003232:	7ffb      	ldrb	r3, [r7, #31]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d003      	beq.n	8003240 <HAL_CAN_AddTxMessage+0x2c>
 8003238:	7ffb      	ldrb	r3, [r7, #31]
 800323a:	2b02      	cmp	r3, #2
 800323c:	f040 80b8 	bne.w	80033b0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10a      	bne.n	8003260 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003250:	2b00      	cmp	r3, #0
 8003252:	d105      	bne.n	8003260 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 80a0 	beq.w	80033a0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	0e1b      	lsrs	r3, r3, #24
 8003264:	f003 0303 	and.w	r3, r3, #3
 8003268:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d907      	bls.n	8003280 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e09e      	b.n	80033be <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003280:	2201      	movs	r2, #1
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	409a      	lsls	r2, r3
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10d      	bne.n	80032ae <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800329c:	68f9      	ldr	r1, [r7, #12]
 800329e:	6809      	ldr	r1, [r1, #0]
 80032a0:	431a      	orrs	r2, r3
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	3318      	adds	r3, #24
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	440b      	add	r3, r1
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	e00f      	b.n	80032ce <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032b8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032be:	68f9      	ldr	r1, [r7, #12]
 80032c0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80032c2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	3318      	adds	r3, #24
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	440b      	add	r3, r1
 80032cc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6819      	ldr	r1, [r3, #0]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	691a      	ldr	r2, [r3, #16]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	3318      	adds	r3, #24
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	440b      	add	r3, r1
 80032de:	3304      	adds	r3, #4
 80032e0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	7d1b      	ldrb	r3, [r3, #20]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d111      	bne.n	800330e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	3318      	adds	r3, #24
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	4413      	add	r3, r2
 80032f6:	3304      	adds	r3, #4
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	6811      	ldr	r1, [r2, #0]
 80032fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	3318      	adds	r3, #24
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	440b      	add	r3, r1
 800330a:	3304      	adds	r3, #4
 800330c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3307      	adds	r3, #7
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	061a      	lsls	r2, r3, #24
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	3306      	adds	r3, #6
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	041b      	lsls	r3, r3, #16
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3305      	adds	r3, #5
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	021b      	lsls	r3, r3, #8
 8003328:	4313      	orrs	r3, r2
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	3204      	adds	r2, #4
 800332e:	7812      	ldrb	r2, [r2, #0]
 8003330:	4610      	mov	r0, r2
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	6811      	ldr	r1, [r2, #0]
 8003336:	ea43 0200 	orr.w	r2, r3, r0
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	440b      	add	r3, r1
 8003340:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003344:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3303      	adds	r3, #3
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	061a      	lsls	r2, r3, #24
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3302      	adds	r3, #2
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	041b      	lsls	r3, r3, #16
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3301      	adds	r3, #1
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	021b      	lsls	r3, r3, #8
 8003360:	4313      	orrs	r3, r2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	7812      	ldrb	r2, [r2, #0]
 8003366:	4610      	mov	r0, r2
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	6811      	ldr	r1, [r2, #0]
 800336c:	ea43 0200 	orr.w	r2, r3, r0
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	440b      	add	r3, r1
 8003376:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800337a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	3318      	adds	r3, #24
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	4413      	add	r3, r2
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	6811      	ldr	r1, [r2, #0]
 800338e:	f043 0201 	orr.w	r2, r3, #1
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	3318      	adds	r3, #24
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	440b      	add	r3, r1
 800339a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	e00e      	b.n	80033be <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e006      	b.n	80033be <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
  }
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3724      	adds	r7, #36	; 0x24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b085      	sub	sp, #20
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
 80033d2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033da:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d002      	beq.n	80033e8 <HAL_CAN_ActivateNotification+0x1e>
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d109      	bne.n	80033fc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6959      	ldr	r1, [r3, #20]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	e006      	b.n	800340a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
  }
}
 800340a:	4618      	mov	r0, r3
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
	...

08003418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003428:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <__NVIC_SetPriorityGrouping+0x40>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003434:	4013      	ands	r3, r2
 8003436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003440:	4b06      	ldr	r3, [pc, #24]	; (800345c <__NVIC_SetPriorityGrouping+0x44>)
 8003442:	4313      	orrs	r3, r2
 8003444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003446:	4a04      	ldr	r2, [pc, #16]	; (8003458 <__NVIC_SetPriorityGrouping+0x40>)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	60d3      	str	r3, [r2, #12]
}
 800344c:	bf00      	nop
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	e000ed00 	.word	0xe000ed00
 800345c:	05fa0000 	.word	0x05fa0000

08003460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003464:	4b04      	ldr	r3, [pc, #16]	; (8003478 <__NVIC_GetPriorityGrouping+0x18>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	0a1b      	lsrs	r3, r3, #8
 800346a:	f003 0307 	and.w	r3, r3, #7
}
 800346e:	4618      	mov	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	e000ed00 	.word	0xe000ed00

0800347c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348a:	2b00      	cmp	r3, #0
 800348c:	db0b      	blt.n	80034a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	f003 021f 	and.w	r2, r3, #31
 8003494:	4907      	ldr	r1, [pc, #28]	; (80034b4 <__NVIC_EnableIRQ+0x38>)
 8003496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	2001      	movs	r0, #1
 800349e:	fa00 f202 	lsl.w	r2, r0, r2
 80034a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	e000e100 	.word	0xe000e100

080034b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	6039      	str	r1, [r7, #0]
 80034c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	db0a      	blt.n	80034e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	490c      	ldr	r1, [pc, #48]	; (8003504 <__NVIC_SetPriority+0x4c>)
 80034d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d6:	0112      	lsls	r2, r2, #4
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	440b      	add	r3, r1
 80034dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034e0:	e00a      	b.n	80034f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	4908      	ldr	r1, [pc, #32]	; (8003508 <__NVIC_SetPriority+0x50>)
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	3b04      	subs	r3, #4
 80034f0:	0112      	lsls	r2, r2, #4
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	440b      	add	r3, r1
 80034f6:	761a      	strb	r2, [r3, #24]
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	e000e100 	.word	0xe000e100
 8003508:	e000ed00 	.word	0xe000ed00

0800350c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800350c:	b480      	push	{r7}
 800350e:	b089      	sub	sp, #36	; 0x24
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f1c3 0307 	rsb	r3, r3, #7
 8003526:	2b04      	cmp	r3, #4
 8003528:	bf28      	it	cs
 800352a:	2304      	movcs	r3, #4
 800352c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	3304      	adds	r3, #4
 8003532:	2b06      	cmp	r3, #6
 8003534:	d902      	bls.n	800353c <NVIC_EncodePriority+0x30>
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3b03      	subs	r3, #3
 800353a:	e000      	b.n	800353e <NVIC_EncodePriority+0x32>
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003540:	f04f 32ff 	mov.w	r2, #4294967295
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	43da      	mvns	r2, r3
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	401a      	ands	r2, r3
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003554:	f04f 31ff 	mov.w	r1, #4294967295
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	fa01 f303 	lsl.w	r3, r1, r3
 800355e:	43d9      	mvns	r1, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003564:	4313      	orrs	r3, r2
         );
}
 8003566:	4618      	mov	r0, r3
 8003568:	3724      	adds	r7, #36	; 0x24
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
	...

08003574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3b01      	subs	r3, #1
 8003580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003584:	d301      	bcc.n	800358a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003586:	2301      	movs	r3, #1
 8003588:	e00f      	b.n	80035aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800358a:	4a0a      	ldr	r2, [pc, #40]	; (80035b4 <SysTick_Config+0x40>)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3b01      	subs	r3, #1
 8003590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003592:	210f      	movs	r1, #15
 8003594:	f04f 30ff 	mov.w	r0, #4294967295
 8003598:	f7ff ff8e 	bl	80034b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800359c:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <SysTick_Config+0x40>)
 800359e:	2200      	movs	r2, #0
 80035a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035a2:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <SysTick_Config+0x40>)
 80035a4:	2207      	movs	r2, #7
 80035a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	e000e010 	.word	0xe000e010

080035b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff ff29 	bl	8003418 <__NVIC_SetPriorityGrouping>
}
 80035c6:	bf00      	nop
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b086      	sub	sp, #24
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	4603      	mov	r3, r0
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	607a      	str	r2, [r7, #4]
 80035da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035e0:	f7ff ff3e 	bl	8003460 <__NVIC_GetPriorityGrouping>
 80035e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	6978      	ldr	r0, [r7, #20]
 80035ec:	f7ff ff8e 	bl	800350c <NVIC_EncodePriority>
 80035f0:	4602      	mov	r2, r0
 80035f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035f6:	4611      	mov	r1, r2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff ff5d 	bl	80034b8 <__NVIC_SetPriority>
}
 80035fe:	bf00      	nop
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b082      	sub	sp, #8
 800360a:	af00      	add	r7, sp, #0
 800360c:	4603      	mov	r3, r0
 800360e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff ff31 	bl	800347c <__NVIC_EnableIRQ>
}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b082      	sub	sp, #8
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff ffa2 	bl	8003574 <SysTick_Config>
 8003630:	4603      	mov	r3, r0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800363c:	b480      	push	{r7}
 800363e:	b089      	sub	sp, #36	; 0x24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003646:	2300      	movs	r3, #0
 8003648:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800364e:	2300      	movs	r3, #0
 8003650:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003652:	2300      	movs	r3, #0
 8003654:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
 800365a:	e175      	b.n	8003948 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800365c:	2201      	movs	r2, #1
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	4013      	ands	r3, r2
 800366e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	429a      	cmp	r2, r3
 8003676:	f040 8164 	bne.w	8003942 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d00b      	beq.n	800369a <HAL_GPIO_Init+0x5e>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b02      	cmp	r3, #2
 8003688:	d007      	beq.n	800369a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800368e:	2b11      	cmp	r3, #17
 8003690:	d003      	beq.n	800369a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b12      	cmp	r3, #18
 8003698:	d130      	bne.n	80036fc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	2203      	movs	r2, #3
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	43db      	mvns	r3, r3
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	4013      	ands	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036d0:	2201      	movs	r2, #1
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	43db      	mvns	r3, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4013      	ands	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	091b      	lsrs	r3, r3, #4
 80036e6:	f003 0201 	and.w	r2, r3, #1
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	2203      	movs	r2, #3
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	43db      	mvns	r3, r3
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	4013      	ands	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4313      	orrs	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b02      	cmp	r3, #2
 8003732:	d003      	beq.n	800373c <HAL_GPIO_Init+0x100>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b12      	cmp	r3, #18
 800373a:	d123      	bne.n	8003784 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	08da      	lsrs	r2, r3, #3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3208      	adds	r2, #8
 8003744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	220f      	movs	r2, #15
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	43db      	mvns	r3, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4013      	ands	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4313      	orrs	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	08da      	lsrs	r2, r3, #3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3208      	adds	r2, #8
 800377e:	69b9      	ldr	r1, [r7, #24]
 8003780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	2203      	movs	r2, #3
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 0203 	and.w	r2, r3, #3
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 80be 	beq.w	8003942 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037c6:	4b66      	ldr	r3, [pc, #408]	; (8003960 <HAL_GPIO_Init+0x324>)
 80037c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ca:	4a65      	ldr	r2, [pc, #404]	; (8003960 <HAL_GPIO_Init+0x324>)
 80037cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037d0:	6453      	str	r3, [r2, #68]	; 0x44
 80037d2:	4b63      	ldr	r3, [pc, #396]	; (8003960 <HAL_GPIO_Init+0x324>)
 80037d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80037de:	4a61      	ldr	r2, [pc, #388]	; (8003964 <HAL_GPIO_Init+0x328>)
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	089b      	lsrs	r3, r3, #2
 80037e4:	3302      	adds	r3, #2
 80037e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	220f      	movs	r2, #15
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43db      	mvns	r3, r3
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4013      	ands	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a58      	ldr	r2, [pc, #352]	; (8003968 <HAL_GPIO_Init+0x32c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d037      	beq.n	800387a <HAL_GPIO_Init+0x23e>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a57      	ldr	r2, [pc, #348]	; (800396c <HAL_GPIO_Init+0x330>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d031      	beq.n	8003876 <HAL_GPIO_Init+0x23a>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a56      	ldr	r2, [pc, #344]	; (8003970 <HAL_GPIO_Init+0x334>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d02b      	beq.n	8003872 <HAL_GPIO_Init+0x236>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a55      	ldr	r2, [pc, #340]	; (8003974 <HAL_GPIO_Init+0x338>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d025      	beq.n	800386e <HAL_GPIO_Init+0x232>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a54      	ldr	r2, [pc, #336]	; (8003978 <HAL_GPIO_Init+0x33c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d01f      	beq.n	800386a <HAL_GPIO_Init+0x22e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a53      	ldr	r2, [pc, #332]	; (800397c <HAL_GPIO_Init+0x340>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d019      	beq.n	8003866 <HAL_GPIO_Init+0x22a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a52      	ldr	r2, [pc, #328]	; (8003980 <HAL_GPIO_Init+0x344>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d013      	beq.n	8003862 <HAL_GPIO_Init+0x226>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a51      	ldr	r2, [pc, #324]	; (8003984 <HAL_GPIO_Init+0x348>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d00d      	beq.n	800385e <HAL_GPIO_Init+0x222>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a50      	ldr	r2, [pc, #320]	; (8003988 <HAL_GPIO_Init+0x34c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d007      	beq.n	800385a <HAL_GPIO_Init+0x21e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a4f      	ldr	r2, [pc, #316]	; (800398c <HAL_GPIO_Init+0x350>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d101      	bne.n	8003856 <HAL_GPIO_Init+0x21a>
 8003852:	2309      	movs	r3, #9
 8003854:	e012      	b.n	800387c <HAL_GPIO_Init+0x240>
 8003856:	230a      	movs	r3, #10
 8003858:	e010      	b.n	800387c <HAL_GPIO_Init+0x240>
 800385a:	2308      	movs	r3, #8
 800385c:	e00e      	b.n	800387c <HAL_GPIO_Init+0x240>
 800385e:	2307      	movs	r3, #7
 8003860:	e00c      	b.n	800387c <HAL_GPIO_Init+0x240>
 8003862:	2306      	movs	r3, #6
 8003864:	e00a      	b.n	800387c <HAL_GPIO_Init+0x240>
 8003866:	2305      	movs	r3, #5
 8003868:	e008      	b.n	800387c <HAL_GPIO_Init+0x240>
 800386a:	2304      	movs	r3, #4
 800386c:	e006      	b.n	800387c <HAL_GPIO_Init+0x240>
 800386e:	2303      	movs	r3, #3
 8003870:	e004      	b.n	800387c <HAL_GPIO_Init+0x240>
 8003872:	2302      	movs	r3, #2
 8003874:	e002      	b.n	800387c <HAL_GPIO_Init+0x240>
 8003876:	2301      	movs	r3, #1
 8003878:	e000      	b.n	800387c <HAL_GPIO_Init+0x240>
 800387a:	2300      	movs	r3, #0
 800387c:	69fa      	ldr	r2, [r7, #28]
 800387e:	f002 0203 	and.w	r2, r2, #3
 8003882:	0092      	lsls	r2, r2, #2
 8003884:	4093      	lsls	r3, r2
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	4313      	orrs	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800388c:	4935      	ldr	r1, [pc, #212]	; (8003964 <HAL_GPIO_Init+0x328>)
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	089b      	lsrs	r3, r3, #2
 8003892:	3302      	adds	r3, #2
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800389a:	4b3d      	ldr	r3, [pc, #244]	; (8003990 <HAL_GPIO_Init+0x354>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	43db      	mvns	r3, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4013      	ands	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038be:	4a34      	ldr	r2, [pc, #208]	; (8003990 <HAL_GPIO_Init+0x354>)
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038c4:	4b32      	ldr	r3, [pc, #200]	; (8003990 <HAL_GPIO_Init+0x354>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	43db      	mvns	r3, r3
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	4013      	ands	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d003      	beq.n	80038e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038e8:	4a29      	ldr	r2, [pc, #164]	; (8003990 <HAL_GPIO_Init+0x354>)
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038ee:	4b28      	ldr	r3, [pc, #160]	; (8003990 <HAL_GPIO_Init+0x354>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	43db      	mvns	r3, r3
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	4013      	ands	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	4313      	orrs	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003912:	4a1f      	ldr	r2, [pc, #124]	; (8003990 <HAL_GPIO_Init+0x354>)
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003918:	4b1d      	ldr	r3, [pc, #116]	; (8003990 <HAL_GPIO_Init+0x354>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	43db      	mvns	r3, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4013      	ands	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	4313      	orrs	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800393c:	4a14      	ldr	r2, [pc, #80]	; (8003990 <HAL_GPIO_Init+0x354>)
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	3301      	adds	r3, #1
 8003946:	61fb      	str	r3, [r7, #28]
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	2b0f      	cmp	r3, #15
 800394c:	f67f ae86 	bls.w	800365c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003950:	bf00      	nop
 8003952:	bf00      	nop
 8003954:	3724      	adds	r7, #36	; 0x24
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40023800 	.word	0x40023800
 8003964:	40013800 	.word	0x40013800
 8003968:	40020000 	.word	0x40020000
 800396c:	40020400 	.word	0x40020400
 8003970:	40020800 	.word	0x40020800
 8003974:	40020c00 	.word	0x40020c00
 8003978:	40021000 	.word	0x40021000
 800397c:	40021400 	.word	0x40021400
 8003980:	40021800 	.word	0x40021800
 8003984:	40021c00 	.word	0x40021c00
 8003988:	40022000 	.word	0x40022000
 800398c:	40022400 	.word	0x40022400
 8003990:	40013c00 	.word	0x40013c00

08003994 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	887b      	ldrh	r3, [r7, #2]
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039ac:	2301      	movs	r3, #1
 80039ae:	73fb      	strb	r3, [r7, #15]
 80039b0:	e001      	b.n	80039b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039b2:	2300      	movs	r3, #0
 80039b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	807b      	strh	r3, [r7, #2]
 80039d0:	4613      	mov	r3, r2
 80039d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039d4:	787b      	ldrb	r3, [r7, #1]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039da:	887a      	ldrh	r2, [r7, #2]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80039e0:	e003      	b.n	80039ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80039e2:	887b      	ldrh	r3, [r7, #2]
 80039e4:	041a      	lsls	r2, r3, #16
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	619a      	str	r2, [r3, #24]
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
	...

080039f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80039fe:	2300      	movs	r3, #0
 8003a00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a02:	4b23      	ldr	r3, [pc, #140]	; (8003a90 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	4a22      	ldr	r2, [pc, #136]	; (8003a90 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a0e:	4b20      	ldr	r3, [pc, #128]	; (8003a90 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a1a:	4b1e      	ldr	r3, [pc, #120]	; (8003a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a1d      	ldr	r2, [pc, #116]	; (8003a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a24:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a26:	f7fe fec9 	bl	80027bc <HAL_GetTick>
 8003a2a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a2c:	e009      	b.n	8003a42 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a2e:	f7fe fec5 	bl	80027bc <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a3c:	d901      	bls.n	8003a42 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e022      	b.n	8003a88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a42:	4b14      	ldr	r3, [pc, #80]	; (8003a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a4e:	d1ee      	bne.n	8003a2e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a50:	4b10      	ldr	r3, [pc, #64]	; (8003a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a0f      	ldr	r2, [pc, #60]	; (8003a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a5a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a5c:	f7fe feae 	bl	80027bc <HAL_GetTick>
 8003a60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a62:	e009      	b.n	8003a78 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a64:	f7fe feaa 	bl	80027bc <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a72:	d901      	bls.n	8003a78 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e007      	b.n	8003a88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a78:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a84:	d1ee      	bne.n	8003a64 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40023800 	.word	0x40023800
 8003a94:	40007000 	.word	0x40007000

08003a98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e29b      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 8087 	beq.w	8003bca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003abc:	4b96      	ldr	r3, [pc, #600]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 030c 	and.w	r3, r3, #12
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d00c      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ac8:	4b93      	ldr	r3, [pc, #588]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f003 030c 	and.w	r3, r3, #12
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d112      	bne.n	8003afa <HAL_RCC_OscConfig+0x62>
 8003ad4:	4b90      	ldr	r3, [pc, #576]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003adc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ae0:	d10b      	bne.n	8003afa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae2:	4b8d      	ldr	r3, [pc, #564]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d06c      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x130>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d168      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e275      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b02:	d106      	bne.n	8003b12 <HAL_RCC_OscConfig+0x7a>
 8003b04:	4b84      	ldr	r3, [pc, #528]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a83      	ldr	r2, [pc, #524]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	e02e      	b.n	8003b70 <HAL_RCC_OscConfig+0xd8>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10c      	bne.n	8003b34 <HAL_RCC_OscConfig+0x9c>
 8003b1a:	4b7f      	ldr	r3, [pc, #508]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a7e      	ldr	r2, [pc, #504]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	4b7c      	ldr	r3, [pc, #496]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a7b      	ldr	r2, [pc, #492]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	e01d      	b.n	8003b70 <HAL_RCC_OscConfig+0xd8>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b3c:	d10c      	bne.n	8003b58 <HAL_RCC_OscConfig+0xc0>
 8003b3e:	4b76      	ldr	r3, [pc, #472]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a75      	ldr	r2, [pc, #468]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	4b73      	ldr	r3, [pc, #460]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a72      	ldr	r2, [pc, #456]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	e00b      	b.n	8003b70 <HAL_RCC_OscConfig+0xd8>
 8003b58:	4b6f      	ldr	r3, [pc, #444]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a6e      	ldr	r2, [pc, #440]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b62:	6013      	str	r3, [r2, #0]
 8003b64:	4b6c      	ldr	r3, [pc, #432]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a6b      	ldr	r2, [pc, #428]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d013      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7fe fe20 	bl	80027bc <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b80:	f7fe fe1c 	bl	80027bc <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b64      	cmp	r3, #100	; 0x64
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e229      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b92:	4b61      	ldr	r3, [pc, #388]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCC_OscConfig+0xe8>
 8003b9e:	e014      	b.n	8003bca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba0:	f7fe fe0c 	bl	80027bc <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba8:	f7fe fe08 	bl	80027bc <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b64      	cmp	r3, #100	; 0x64
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e215      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bba:	4b57      	ldr	r3, [pc, #348]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f0      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x110>
 8003bc6:	e000      	b.n	8003bca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d069      	beq.n	8003caa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bd6:	4b50      	ldr	r3, [pc, #320]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 030c 	and.w	r3, r3, #12
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00b      	beq.n	8003bfa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003be2:	4b4d      	ldr	r3, [pc, #308]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 030c 	and.w	r3, r3, #12
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d11c      	bne.n	8003c28 <HAL_RCC_OscConfig+0x190>
 8003bee:	4b4a      	ldr	r3, [pc, #296]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d116      	bne.n	8003c28 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bfa:	4b47      	ldr	r3, [pc, #284]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d005      	beq.n	8003c12 <HAL_RCC_OscConfig+0x17a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d001      	beq.n	8003c12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e1e9      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c12:	4b41      	ldr	r3, [pc, #260]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	493d      	ldr	r1, [pc, #244]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c26:	e040      	b.n	8003caa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d023      	beq.n	8003c78 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c30:	4b39      	ldr	r3, [pc, #228]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a38      	ldr	r2, [pc, #224]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3c:	f7fe fdbe 	bl	80027bc <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c44:	f7fe fdba 	bl	80027bc <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e1c7      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c56:	4b30      	ldr	r3, [pc, #192]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c62:	4b2d      	ldr	r3, [pc, #180]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4929      	ldr	r1, [pc, #164]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	600b      	str	r3, [r1, #0]
 8003c76:	e018      	b.n	8003caa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c78:	4b27      	ldr	r3, [pc, #156]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a26      	ldr	r2, [pc, #152]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003c7e:	f023 0301 	bic.w	r3, r3, #1
 8003c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c84:	f7fe fd9a 	bl	80027bc <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c8c:	f7fe fd96 	bl	80027bc <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e1a3      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c9e:	4b1e      	ldr	r3, [pc, #120]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f0      	bne.n	8003c8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d038      	beq.n	8003d28 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d019      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cbe:	4b16      	ldr	r3, [pc, #88]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc2:	4a15      	ldr	r2, [pc, #84]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003cc4:	f043 0301 	orr.w	r3, r3, #1
 8003cc8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cca:	f7fe fd77 	bl	80027bc <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd2:	f7fe fd73 	bl	80027bc <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e180      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ce4:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x23a>
 8003cf0:	e01a      	b.n	8003d28 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cf2:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf6:	4a08      	ldr	r2, [pc, #32]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003cf8:	f023 0301 	bic.w	r3, r3, #1
 8003cfc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cfe:	f7fe fd5d 	bl	80027bc <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d04:	e00a      	b.n	8003d1c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d06:	f7fe fd59 	bl	80027bc <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d903      	bls.n	8003d1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e166      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
 8003d18:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d1c:	4b92      	ldr	r3, [pc, #584]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1ee      	bne.n	8003d06 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 80a4 	beq.w	8003e7e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d36:	4b8c      	ldr	r3, [pc, #560]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10d      	bne.n	8003d5e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d42:	4b89      	ldr	r3, [pc, #548]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	4a88      	ldr	r2, [pc, #544]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d4e:	4b86      	ldr	r3, [pc, #536]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d56:	60bb      	str	r3, [r7, #8]
 8003d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d5e:	4b83      	ldr	r3, [pc, #524]	; (8003f6c <HAL_RCC_OscConfig+0x4d4>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d118      	bne.n	8003d9c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d6a:	4b80      	ldr	r3, [pc, #512]	; (8003f6c <HAL_RCC_OscConfig+0x4d4>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a7f      	ldr	r2, [pc, #508]	; (8003f6c <HAL_RCC_OscConfig+0x4d4>)
 8003d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d76:	f7fe fd21 	bl	80027bc <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d7e:	f7fe fd1d 	bl	80027bc <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b64      	cmp	r3, #100	; 0x64
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e12a      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d90:	4b76      	ldr	r3, [pc, #472]	; (8003f6c <HAL_RCC_OscConfig+0x4d4>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0f0      	beq.n	8003d7e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d106      	bne.n	8003db2 <HAL_RCC_OscConfig+0x31a>
 8003da4:	4b70      	ldr	r3, [pc, #448]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da8:	4a6f      	ldr	r2, [pc, #444]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	6713      	str	r3, [r2, #112]	; 0x70
 8003db0:	e02d      	b.n	8003e0e <HAL_RCC_OscConfig+0x376>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10c      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x33c>
 8003dba:	4b6b      	ldr	r3, [pc, #428]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbe:	4a6a      	ldr	r2, [pc, #424]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003dc0:	f023 0301 	bic.w	r3, r3, #1
 8003dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc6:	4b68      	ldr	r3, [pc, #416]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dca:	4a67      	ldr	r2, [pc, #412]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003dcc:	f023 0304 	bic.w	r3, r3, #4
 8003dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd2:	e01c      	b.n	8003e0e <HAL_RCC_OscConfig+0x376>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2b05      	cmp	r3, #5
 8003dda:	d10c      	bne.n	8003df6 <HAL_RCC_OscConfig+0x35e>
 8003ddc:	4b62      	ldr	r3, [pc, #392]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de0:	4a61      	ldr	r2, [pc, #388]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003de2:	f043 0304 	orr.w	r3, r3, #4
 8003de6:	6713      	str	r3, [r2, #112]	; 0x70
 8003de8:	4b5f      	ldr	r3, [pc, #380]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dec:	4a5e      	ldr	r2, [pc, #376]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003dee:	f043 0301 	orr.w	r3, r3, #1
 8003df2:	6713      	str	r3, [r2, #112]	; 0x70
 8003df4:	e00b      	b.n	8003e0e <HAL_RCC_OscConfig+0x376>
 8003df6:	4b5c      	ldr	r3, [pc, #368]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfa:	4a5b      	ldr	r2, [pc, #364]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003dfc:	f023 0301 	bic.w	r3, r3, #1
 8003e00:	6713      	str	r3, [r2, #112]	; 0x70
 8003e02:	4b59      	ldr	r3, [pc, #356]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	4a58      	ldr	r2, [pc, #352]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003e08:	f023 0304 	bic.w	r3, r3, #4
 8003e0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d015      	beq.n	8003e42 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e16:	f7fe fcd1 	bl	80027bc <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e1c:	e00a      	b.n	8003e34 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1e:	f7fe fccd 	bl	80027bc <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e0d8      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e34:	4b4c      	ldr	r3, [pc, #304]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0ee      	beq.n	8003e1e <HAL_RCC_OscConfig+0x386>
 8003e40:	e014      	b.n	8003e6c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e42:	f7fe fcbb 	bl	80027bc <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e48:	e00a      	b.n	8003e60 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4a:	f7fe fcb7 	bl	80027bc <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e0c2      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e60:	4b41      	ldr	r3, [pc, #260]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1ee      	bne.n	8003e4a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e6c:	7dfb      	ldrb	r3, [r7, #23]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d105      	bne.n	8003e7e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e72:	4b3d      	ldr	r3, [pc, #244]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	4a3c      	ldr	r2, [pc, #240]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 80ae 	beq.w	8003fe4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e88:	4b37      	ldr	r3, [pc, #220]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 030c 	and.w	r3, r3, #12
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d06d      	beq.n	8003f70 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d14b      	bne.n	8003f34 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e9c:	4b32      	ldr	r3, [pc, #200]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a31      	ldr	r2, [pc, #196]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003ea2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea8:	f7fe fc88 	bl	80027bc <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb0:	f7fe fc84 	bl	80027bc <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e091      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec2:	4b29      	ldr	r3, [pc, #164]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f0      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69da      	ldr	r2, [r3, #28]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	019b      	lsls	r3, r3, #6
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee4:	085b      	lsrs	r3, r3, #1
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	041b      	lsls	r3, r3, #16
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	061b      	lsls	r3, r3, #24
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef8:	071b      	lsls	r3, r3, #28
 8003efa:	491b      	ldr	r1, [pc, #108]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f00:	4b19      	ldr	r3, [pc, #100]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a18      	ldr	r2, [pc, #96]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0c:	f7fe fc56 	bl	80027bc <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f14:	f7fe fc52 	bl	80027bc <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e05f      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f26:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0f0      	beq.n	8003f14 <HAL_RCC_OscConfig+0x47c>
 8003f32:	e057      	b.n	8003fe4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f34:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a0b      	ldr	r2, [pc, #44]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003f3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f40:	f7fe fc3c 	bl	80027bc <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f48:	f7fe fc38 	bl	80027bc <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e045      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5a:	4b03      	ldr	r3, [pc, #12]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f0      	bne.n	8003f48 <HAL_RCC_OscConfig+0x4b0>
 8003f66:	e03d      	b.n	8003fe4 <HAL_RCC_OscConfig+0x54c>
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f70:	4b1f      	ldr	r3, [pc, #124]	; (8003ff0 <HAL_RCC_OscConfig+0x558>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d030      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d129      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d122      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fa6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d119      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	085b      	lsrs	r3, r3, #1
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d10f      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d107      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d001      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e000      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	40023800 	.word	0x40023800

08003ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e0d0      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800400c:	4b6a      	ldr	r3, [pc, #424]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 030f 	and.w	r3, r3, #15
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d910      	bls.n	800403c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401a:	4b67      	ldr	r3, [pc, #412]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f023 020f 	bic.w	r2, r3, #15
 8004022:	4965      	ldr	r1, [pc, #404]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	4313      	orrs	r3, r2
 8004028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800402a:	4b63      	ldr	r3, [pc, #396]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	429a      	cmp	r2, r3
 8004036:	d001      	beq.n	800403c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e0b8      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d020      	beq.n	800408a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004054:	4b59      	ldr	r3, [pc, #356]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	4a58      	ldr	r2, [pc, #352]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 800405a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800405e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b00      	cmp	r3, #0
 800406a:	d005      	beq.n	8004078 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800406c:	4b53      	ldr	r3, [pc, #332]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	4a52      	ldr	r2, [pc, #328]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 8004072:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004076:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004078:	4b50      	ldr	r3, [pc, #320]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	494d      	ldr	r1, [pc, #308]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 8004086:	4313      	orrs	r3, r2
 8004088:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d040      	beq.n	8004118 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d107      	bne.n	80040ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800409e:	4b47      	ldr	r3, [pc, #284]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d115      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e07f      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d107      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b6:	4b41      	ldr	r3, [pc, #260]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d109      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e073      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c6:	4b3d      	ldr	r3, [pc, #244]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e06b      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040d6:	4b39      	ldr	r3, [pc, #228]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f023 0203 	bic.w	r2, r3, #3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	4936      	ldr	r1, [pc, #216]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040e8:	f7fe fb68 	bl	80027bc <HAL_GetTick>
 80040ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ee:	e00a      	b.n	8004106 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f0:	f7fe fb64 	bl	80027bc <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80040fe:	4293      	cmp	r3, r2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e053      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004106:	4b2d      	ldr	r3, [pc, #180]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 020c 	and.w	r2, r3, #12
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	429a      	cmp	r2, r3
 8004116:	d1eb      	bne.n	80040f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004118:	4b27      	ldr	r3, [pc, #156]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 030f 	and.w	r3, r3, #15
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	429a      	cmp	r2, r3
 8004124:	d210      	bcs.n	8004148 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004126:	4b24      	ldr	r3, [pc, #144]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f023 020f 	bic.w	r2, r3, #15
 800412e:	4922      	ldr	r1, [pc, #136]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	4313      	orrs	r3, r2
 8004134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004136:	4b20      	ldr	r3, [pc, #128]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d001      	beq.n	8004148 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e032      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d008      	beq.n	8004166 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004154:	4b19      	ldr	r3, [pc, #100]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	4916      	ldr	r1, [pc, #88]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 8004162:	4313      	orrs	r3, r2
 8004164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0308 	and.w	r3, r3, #8
 800416e:	2b00      	cmp	r3, #0
 8004170:	d009      	beq.n	8004186 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004172:	4b12      	ldr	r3, [pc, #72]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	490e      	ldr	r1, [pc, #56]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 8004182:	4313      	orrs	r3, r2
 8004184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004186:	f000 f821 	bl	80041cc <HAL_RCC_GetSysClockFreq>
 800418a:	4602      	mov	r2, r0
 800418c:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	091b      	lsrs	r3, r3, #4
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	490a      	ldr	r1, [pc, #40]	; (80041c0 <HAL_RCC_ClockConfig+0x1cc>)
 8004198:	5ccb      	ldrb	r3, [r1, r3]
 800419a:	fa22 f303 	lsr.w	r3, r2, r3
 800419e:	4a09      	ldr	r2, [pc, #36]	; (80041c4 <HAL_RCC_ClockConfig+0x1d0>)
 80041a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041a2:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <HAL_RCC_ClockConfig+0x1d4>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fe fac4 	bl	8002734 <HAL_InitTick>

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40023c00 	.word	0x40023c00
 80041bc:	40023800 	.word	0x40023800
 80041c0:	080074c4 	.word	0x080074c4
 80041c4:	20000000 	.word	0x20000000
 80041c8:	20000004 	.word	0x20000004

080041cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041cc:	b5b0      	push	{r4, r5, r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80041d2:	2100      	movs	r1, #0
 80041d4:	6079      	str	r1, [r7, #4]
 80041d6:	2100      	movs	r1, #0
 80041d8:	60f9      	str	r1, [r7, #12]
 80041da:	2100      	movs	r1, #0
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80041de:	2100      	movs	r1, #0
 80041e0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041e2:	4952      	ldr	r1, [pc, #328]	; (800432c <HAL_RCC_GetSysClockFreq+0x160>)
 80041e4:	6889      	ldr	r1, [r1, #8]
 80041e6:	f001 010c 	and.w	r1, r1, #12
 80041ea:	2908      	cmp	r1, #8
 80041ec:	d00d      	beq.n	800420a <HAL_RCC_GetSysClockFreq+0x3e>
 80041ee:	2908      	cmp	r1, #8
 80041f0:	f200 8094 	bhi.w	800431c <HAL_RCC_GetSysClockFreq+0x150>
 80041f4:	2900      	cmp	r1, #0
 80041f6:	d002      	beq.n	80041fe <HAL_RCC_GetSysClockFreq+0x32>
 80041f8:	2904      	cmp	r1, #4
 80041fa:	d003      	beq.n	8004204 <HAL_RCC_GetSysClockFreq+0x38>
 80041fc:	e08e      	b.n	800431c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041fe:	4b4c      	ldr	r3, [pc, #304]	; (8004330 <HAL_RCC_GetSysClockFreq+0x164>)
 8004200:	60bb      	str	r3, [r7, #8]
      break;
 8004202:	e08e      	b.n	8004322 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004204:	4b4b      	ldr	r3, [pc, #300]	; (8004334 <HAL_RCC_GetSysClockFreq+0x168>)
 8004206:	60bb      	str	r3, [r7, #8]
      break;
 8004208:	e08b      	b.n	8004322 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800420a:	4948      	ldr	r1, [pc, #288]	; (800432c <HAL_RCC_GetSysClockFreq+0x160>)
 800420c:	6849      	ldr	r1, [r1, #4]
 800420e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004212:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004214:	4945      	ldr	r1, [pc, #276]	; (800432c <HAL_RCC_GetSysClockFreq+0x160>)
 8004216:	6849      	ldr	r1, [r1, #4]
 8004218:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800421c:	2900      	cmp	r1, #0
 800421e:	d024      	beq.n	800426a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004220:	4942      	ldr	r1, [pc, #264]	; (800432c <HAL_RCC_GetSysClockFreq+0x160>)
 8004222:	6849      	ldr	r1, [r1, #4]
 8004224:	0989      	lsrs	r1, r1, #6
 8004226:	4608      	mov	r0, r1
 8004228:	f04f 0100 	mov.w	r1, #0
 800422c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004230:	f04f 0500 	mov.w	r5, #0
 8004234:	ea00 0204 	and.w	r2, r0, r4
 8004238:	ea01 0305 	and.w	r3, r1, r5
 800423c:	493d      	ldr	r1, [pc, #244]	; (8004334 <HAL_RCC_GetSysClockFreq+0x168>)
 800423e:	fb01 f003 	mul.w	r0, r1, r3
 8004242:	2100      	movs	r1, #0
 8004244:	fb01 f102 	mul.w	r1, r1, r2
 8004248:	1844      	adds	r4, r0, r1
 800424a:	493a      	ldr	r1, [pc, #232]	; (8004334 <HAL_RCC_GetSysClockFreq+0x168>)
 800424c:	fba2 0101 	umull	r0, r1, r2, r1
 8004250:	1863      	adds	r3, r4, r1
 8004252:	4619      	mov	r1, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	461a      	mov	r2, r3
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	f7fb fff4 	bl	8000248 <__aeabi_uldivmod>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	4613      	mov	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	e04a      	b.n	8004300 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800426a:	4b30      	ldr	r3, [pc, #192]	; (800432c <HAL_RCC_GetSysClockFreq+0x160>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	099b      	lsrs	r3, r3, #6
 8004270:	461a      	mov	r2, r3
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	f240 10ff 	movw	r0, #511	; 0x1ff
 800427a:	f04f 0100 	mov.w	r1, #0
 800427e:	ea02 0400 	and.w	r4, r2, r0
 8004282:	ea03 0501 	and.w	r5, r3, r1
 8004286:	4620      	mov	r0, r4
 8004288:	4629      	mov	r1, r5
 800428a:	f04f 0200 	mov.w	r2, #0
 800428e:	f04f 0300 	mov.w	r3, #0
 8004292:	014b      	lsls	r3, r1, #5
 8004294:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004298:	0142      	lsls	r2, r0, #5
 800429a:	4610      	mov	r0, r2
 800429c:	4619      	mov	r1, r3
 800429e:	1b00      	subs	r0, r0, r4
 80042a0:	eb61 0105 	sbc.w	r1, r1, r5
 80042a4:	f04f 0200 	mov.w	r2, #0
 80042a8:	f04f 0300 	mov.w	r3, #0
 80042ac:	018b      	lsls	r3, r1, #6
 80042ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042b2:	0182      	lsls	r2, r0, #6
 80042b4:	1a12      	subs	r2, r2, r0
 80042b6:	eb63 0301 	sbc.w	r3, r3, r1
 80042ba:	f04f 0000 	mov.w	r0, #0
 80042be:	f04f 0100 	mov.w	r1, #0
 80042c2:	00d9      	lsls	r1, r3, #3
 80042c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042c8:	00d0      	lsls	r0, r2, #3
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	1912      	adds	r2, r2, r4
 80042d0:	eb45 0303 	adc.w	r3, r5, r3
 80042d4:	f04f 0000 	mov.w	r0, #0
 80042d8:	f04f 0100 	mov.w	r1, #0
 80042dc:	0299      	lsls	r1, r3, #10
 80042de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80042e2:	0290      	lsls	r0, r2, #10
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	4610      	mov	r0, r2
 80042ea:	4619      	mov	r1, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	461a      	mov	r2, r3
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	f7fb ffa8 	bl	8000248 <__aeabi_uldivmod>
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4613      	mov	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004300:	4b0a      	ldr	r3, [pc, #40]	; (800432c <HAL_RCC_GetSysClockFreq+0x160>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	0c1b      	lsrs	r3, r3, #16
 8004306:	f003 0303 	and.w	r3, r3, #3
 800430a:	3301      	adds	r3, #1
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	fbb2 f3f3 	udiv	r3, r2, r3
 8004318:	60bb      	str	r3, [r7, #8]
      break;
 800431a:	e002      	b.n	8004322 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800431c:	4b04      	ldr	r3, [pc, #16]	; (8004330 <HAL_RCC_GetSysClockFreq+0x164>)
 800431e:	60bb      	str	r3, [r7, #8]
      break;
 8004320:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004322:	68bb      	ldr	r3, [r7, #8]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bdb0      	pop	{r4, r5, r7, pc}
 800432c:	40023800 	.word	0x40023800
 8004330:	00f42400 	.word	0x00f42400
 8004334:	017d7840 	.word	0x017d7840

08004338 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800433c:	4b03      	ldr	r3, [pc, #12]	; (800434c <HAL_RCC_GetHCLKFreq+0x14>)
 800433e:	681b      	ldr	r3, [r3, #0]
}
 8004340:	4618      	mov	r0, r3
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	20000000 	.word	0x20000000

08004350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004354:	f7ff fff0 	bl	8004338 <HAL_RCC_GetHCLKFreq>
 8004358:	4602      	mov	r2, r0
 800435a:	4b05      	ldr	r3, [pc, #20]	; (8004370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	0a9b      	lsrs	r3, r3, #10
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	4903      	ldr	r1, [pc, #12]	; (8004374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004366:	5ccb      	ldrb	r3, [r1, r3]
 8004368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800436c:	4618      	mov	r0, r3
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40023800 	.word	0x40023800
 8004374:	080074d4 	.word	0x080074d4

08004378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800437c:	f7ff ffdc 	bl	8004338 <HAL_RCC_GetHCLKFreq>
 8004380:	4602      	mov	r2, r0
 8004382:	4b05      	ldr	r3, [pc, #20]	; (8004398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	0b5b      	lsrs	r3, r3, #13
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	4903      	ldr	r1, [pc, #12]	; (800439c <HAL_RCC_GetPCLK2Freq+0x24>)
 800438e:	5ccb      	ldrb	r3, [r1, r3]
 8004390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004394:	4618      	mov	r0, r3
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40023800 	.word	0x40023800
 800439c:	080074d4 	.word	0x080074d4

080043a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b088      	sub	sp, #32
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80043ac:	2300      	movs	r3, #0
 80043ae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80043b0:	2300      	movs	r3, #0
 80043b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80043b4:	2300      	movs	r3, #0
 80043b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80043b8:	2300      	movs	r3, #0
 80043ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d012      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043c8:	4b69      	ldr	r3, [pc, #420]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	4a68      	ldr	r2, [pc, #416]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80043d2:	6093      	str	r3, [r2, #8]
 80043d4:	4b66      	ldr	r3, [pc, #408]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043dc:	4964      	ldr	r1, [pc, #400]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80043ea:	2301      	movs	r3, #1
 80043ec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d017      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043fa:	4b5d      	ldr	r3, [pc, #372]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004400:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004408:	4959      	ldr	r1, [pc, #356]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004418:	d101      	bne.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800441a:	2301      	movs	r3, #1
 800441c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004426:	2301      	movs	r3, #1
 8004428:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d017      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004436:	4b4e      	ldr	r3, [pc, #312]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800443c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	494a      	ldr	r1, [pc, #296]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004454:	d101      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004456:	2301      	movs	r3, #1
 8004458:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004462:	2301      	movs	r3, #1
 8004464:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004472:	2301      	movs	r3, #1
 8004474:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0320 	and.w	r3, r3, #32
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 808b 	beq.w	800459a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004484:	4b3a      	ldr	r3, [pc, #232]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004488:	4a39      	ldr	r2, [pc, #228]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800448e:	6413      	str	r3, [r2, #64]	; 0x40
 8004490:	4b37      	ldr	r3, [pc, #220]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800449c:	4b35      	ldr	r3, [pc, #212]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a34      	ldr	r2, [pc, #208]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044a8:	f7fe f988 	bl	80027bc <HAL_GetTick>
 80044ac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044ae:	e008      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b0:	f7fe f984 	bl	80027bc <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b64      	cmp	r3, #100	; 0x64
 80044bc:	d901      	bls.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e38f      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044c2:	4b2c      	ldr	r3, [pc, #176]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0f0      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044ce:	4b28      	ldr	r3, [pc, #160]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d035      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d02e      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044ec:	4b20      	ldr	r3, [pc, #128]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044f6:	4b1e      	ldr	r3, [pc, #120]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fa:	4a1d      	ldr	r2, [pc, #116]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004500:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004502:	4b1b      	ldr	r3, [pc, #108]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004506:	4a1a      	ldr	r2, [pc, #104]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800450c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800450e:	4a18      	ldr	r2, [pc, #96]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004514:	4b16      	ldr	r3, [pc, #88]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b01      	cmp	r3, #1
 800451e:	d114      	bne.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7fe f94c 	bl	80027bc <HAL_GetTick>
 8004524:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004526:	e00a      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004528:	f7fe f948 	bl	80027bc <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	f241 3288 	movw	r2, #5000	; 0x1388
 8004536:	4293      	cmp	r3, r2
 8004538:	d901      	bls.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e351      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453e:	4b0c      	ldr	r3, [pc, #48]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0ee      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004552:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004556:	d111      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004558:	4b05      	ldr	r3, [pc, #20]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004564:	4b04      	ldr	r3, [pc, #16]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004566:	400b      	ands	r3, r1
 8004568:	4901      	ldr	r1, [pc, #4]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800456a:	4313      	orrs	r3, r2
 800456c:	608b      	str	r3, [r1, #8]
 800456e:	e00b      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004570:	40023800 	.word	0x40023800
 8004574:	40007000 	.word	0x40007000
 8004578:	0ffffcff 	.word	0x0ffffcff
 800457c:	4bb3      	ldr	r3, [pc, #716]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	4ab2      	ldr	r2, [pc, #712]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004582:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004586:	6093      	str	r3, [r2, #8]
 8004588:	4bb0      	ldr	r3, [pc, #704]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800458a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004594:	49ad      	ldr	r1, [pc, #692]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004596:	4313      	orrs	r3, r2
 8004598:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d010      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045a6:	4ba9      	ldr	r3, [pc, #676]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ac:	4aa7      	ldr	r2, [pc, #668]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80045b6:	4ba5      	ldr	r3, [pc, #660]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c0:	49a2      	ldr	r1, [pc, #648]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045d4:	4b9d      	ldr	r3, [pc, #628]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045e2:	499a      	ldr	r1, [pc, #616]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045f6:	4b95      	ldr	r3, [pc, #596]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004604:	4991      	ldr	r1, [pc, #580]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004618:	4b8c      	ldr	r3, [pc, #560]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800461a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004626:	4989      	ldr	r1, [pc, #548]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800463a:	4b84      	ldr	r3, [pc, #528]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800463c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004640:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004648:	4980      	ldr	r1, [pc, #512]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800465c:	4b7b      	ldr	r3, [pc, #492]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800465e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004662:	f023 0203 	bic.w	r2, r3, #3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466a:	4978      	ldr	r1, [pc, #480]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800467e:	4b73      	ldr	r3, [pc, #460]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004684:	f023 020c 	bic.w	r2, r3, #12
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800468c:	496f      	ldr	r1, [pc, #444]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00a      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046a0:	4b6a      	ldr	r3, [pc, #424]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ae:	4967      	ldr	r1, [pc, #412]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046c2:	4b62      	ldr	r3, [pc, #392]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d0:	495e      	ldr	r1, [pc, #376]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00a      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046e4:	4b59      	ldr	r3, [pc, #356]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f2:	4956      	ldr	r1, [pc, #344]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004706:	4b51      	ldr	r3, [pc, #324]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004714:	494d      	ldr	r1, [pc, #308]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004728:	4b48      	ldr	r3, [pc, #288]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800472a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004736:	4945      	ldr	r1, [pc, #276]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800474a:	4b40      	ldr	r3, [pc, #256]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800474c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004750:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004758:	493c      	ldr	r1, [pc, #240]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800476c:	4b37      	ldr	r3, [pc, #220]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800476e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004772:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800477a:	4934      	ldr	r1, [pc, #208]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d011      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800478e:	4b2f      	ldr	r3, [pc, #188]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004794:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800479c:	492b      	ldr	r1, [pc, #172]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ac:	d101      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80047ae:	2301      	movs	r3, #1
 80047b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80047be:	2301      	movs	r3, #1
 80047c0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047ce:	4b1f      	ldr	r3, [pc, #124]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047dc:	491b      	ldr	r1, [pc, #108]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00b      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047f0:	4b16      	ldr	r3, [pc, #88]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004800:	4912      	ldr	r1, [pc, #72]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00b      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004814:	4b0d      	ldr	r3, [pc, #52]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004824:	4909      	ldr	r1, [pc, #36]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00f      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004838:	4b04      	ldr	r3, [pc, #16]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800483a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800483e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004848:	e002      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800484a:	bf00      	nop
 800484c:	40023800 	.word	0x40023800
 8004850:	4986      	ldr	r1, [pc, #536]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004852:	4313      	orrs	r3, r2
 8004854:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00b      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004864:	4b81      	ldr	r3, [pc, #516]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800486a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004874:	497d      	ldr	r1, [pc, #500]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d006      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 80d6 	beq.w	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004890:	4b76      	ldr	r3, [pc, #472]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a75      	ldr	r2, [pc, #468]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004896:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800489a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800489c:	f7fd ff8e 	bl	80027bc <HAL_GetTick>
 80048a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048a2:	e008      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048a4:	f7fd ff8a 	bl	80027bc <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b64      	cmp	r3, #100	; 0x64
 80048b0:	d901      	bls.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e195      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048b6:	4b6d      	ldr	r3, [pc, #436]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1f0      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d021      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d11d      	bne.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048d6:	4b65      	ldr	r3, [pc, #404]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048dc:	0c1b      	lsrs	r3, r3, #16
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048e4:	4b61      	ldr	r3, [pc, #388]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ea:	0e1b      	lsrs	r3, r3, #24
 80048ec:	f003 030f 	and.w	r3, r3, #15
 80048f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	019a      	lsls	r2, r3, #6
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	041b      	lsls	r3, r3, #16
 80048fc:	431a      	orrs	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	061b      	lsls	r3, r3, #24
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	071b      	lsls	r3, r3, #28
 800490a:	4958      	ldr	r1, [pc, #352]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800490c:	4313      	orrs	r3, r2
 800490e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d004      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004926:	d00a      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004930:	2b00      	cmp	r3, #0
 8004932:	d02e      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004938:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800493c:	d129      	bne.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800493e:	4b4b      	ldr	r3, [pc, #300]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004944:	0c1b      	lsrs	r3, r3, #16
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800494c:	4b47      	ldr	r3, [pc, #284]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800494e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004952:	0f1b      	lsrs	r3, r3, #28
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	019a      	lsls	r2, r3, #6
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	041b      	lsls	r3, r3, #16
 8004964:	431a      	orrs	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	061b      	lsls	r3, r3, #24
 800496c:	431a      	orrs	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	071b      	lsls	r3, r3, #28
 8004972:	493e      	ldr	r1, [pc, #248]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004974:	4313      	orrs	r3, r2
 8004976:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800497a:	4b3c      	ldr	r3, [pc, #240]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800497c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004980:	f023 021f 	bic.w	r2, r3, #31
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	3b01      	subs	r3, #1
 800498a:	4938      	ldr	r1, [pc, #224]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800498c:	4313      	orrs	r3, r2
 800498e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d01d      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800499e:	4b33      	ldr	r3, [pc, #204]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049a4:	0e1b      	lsrs	r3, r3, #24
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049ac:	4b2f      	ldr	r3, [pc, #188]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049b2:	0f1b      	lsrs	r3, r3, #28
 80049b4:	f003 0307 	and.w	r3, r3, #7
 80049b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	019a      	lsls	r2, r3, #6
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	041b      	lsls	r3, r3, #16
 80049c6:	431a      	orrs	r2, r3
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	061b      	lsls	r3, r3, #24
 80049cc:	431a      	orrs	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	071b      	lsls	r3, r3, #28
 80049d2:	4926      	ldr	r1, [pc, #152]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d011      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	019a      	lsls	r2, r3, #6
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	041b      	lsls	r3, r3, #16
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	061b      	lsls	r3, r3, #24
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	071b      	lsls	r3, r3, #28
 8004a02:	491a      	ldr	r1, [pc, #104]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a0a:	4b18      	ldr	r3, [pc, #96]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a17      	ldr	r2, [pc, #92]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a16:	f7fd fed1 	bl	80027bc <HAL_GetTick>
 8004a1a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a1e:	f7fd fecd 	bl	80027bc <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b64      	cmp	r3, #100	; 0x64
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e0d8      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a30:	4b0e      	ldr	r3, [pc, #56]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0f0      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	f040 80ce 	bne.w	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a44:	4b09      	ldr	r3, [pc, #36]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a08      	ldr	r2, [pc, #32]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a50:	f7fd feb4 	bl	80027bc <HAL_GetTick>
 8004a54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a56:	e00b      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a58:	f7fd feb0 	bl	80027bc <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b64      	cmp	r3, #100	; 0x64
 8004a64:	d904      	bls.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e0bb      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004a6a:	bf00      	nop
 8004a6c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a70:	4b5e      	ldr	r3, [pc, #376]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a7c:	d0ec      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d009      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d02e      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d12a      	bne.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004aa6:	4b51      	ldr	r3, [pc, #324]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aac:	0c1b      	lsrs	r3, r3, #16
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ab4:	4b4d      	ldr	r3, [pc, #308]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aba:	0f1b      	lsrs	r3, r3, #28
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	019a      	lsls	r2, r3, #6
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	041b      	lsls	r3, r3, #16
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	061b      	lsls	r3, r3, #24
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	071b      	lsls	r3, r3, #28
 8004ada:	4944      	ldr	r1, [pc, #272]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ae2:	4b42      	ldr	r3, [pc, #264]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ae8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af0:	3b01      	subs	r3, #1
 8004af2:	021b      	lsls	r3, r3, #8
 8004af4:	493d      	ldr	r1, [pc, #244]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d022      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b10:	d11d      	bne.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b12:	4b36      	ldr	r3, [pc, #216]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b18:	0e1b      	lsrs	r3, r3, #24
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b20:	4b32      	ldr	r3, [pc, #200]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b26:	0f1b      	lsrs	r3, r3, #28
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	019a      	lsls	r2, r3, #6
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a1b      	ldr	r3, [r3, #32]
 8004b38:	041b      	lsls	r3, r3, #16
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	061b      	lsls	r3, r3, #24
 8004b40:	431a      	orrs	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	071b      	lsls	r3, r3, #28
 8004b46:	4929      	ldr	r1, [pc, #164]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d028      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b5a:	4b24      	ldr	r3, [pc, #144]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b60:	0e1b      	lsrs	r3, r3, #24
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b68:	4b20      	ldr	r3, [pc, #128]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6e:	0c1b      	lsrs	r3, r3, #16
 8004b70:	f003 0303 	and.w	r3, r3, #3
 8004b74:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	019a      	lsls	r2, r3, #6
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	041b      	lsls	r3, r3, #16
 8004b80:	431a      	orrs	r2, r3
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	061b      	lsls	r3, r3, #24
 8004b86:	431a      	orrs	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	071b      	lsls	r3, r3, #28
 8004b8e:	4917      	ldr	r1, [pc, #92]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b96:	4b15      	ldr	r3, [pc, #84]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba4:	4911      	ldr	r1, [pc, #68]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004bac:	4b0f      	ldr	r3, [pc, #60]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a0e      	ldr	r2, [pc, #56]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb8:	f7fd fe00 	bl	80027bc <HAL_GetTick>
 8004bbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bc0:	f7fd fdfc 	bl	80027bc <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b64      	cmp	r3, #100	; 0x64
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e007      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bd2:	4b06      	ldr	r3, [pc, #24]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bde:	d1ef      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3720      	adds	r7, #32
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40023800 	.word	0x40023800

08004bf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e09d      	b.n	8004d3e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d108      	bne.n	8004c1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c12:	d009      	beq.n	8004c28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	61da      	str	r2, [r3, #28]
 8004c1a:	e005      	b.n	8004c28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d106      	bne.n	8004c48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7fd f9ca 	bl	8001fdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c68:	d902      	bls.n	8004c70 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	e002      	b.n	8004c76 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c74:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c7e:	d007      	beq.n	8004c90 <HAL_SPI_Init+0xa0>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c88:	d002      	beq.n	8004c90 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd2:	ea42 0103 	orr.w	r1, r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cda:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	0c1b      	lsrs	r3, r3, #16
 8004cec:	f003 0204 	and.w	r2, r3, #4
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	f003 0310 	and.w	r3, r3, #16
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	431a      	orrs	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d0c:	ea42 0103 	orr.w	r1, r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69da      	ldr	r2, [r3, #28]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b082      	sub	sp, #8
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e049      	b.n	8004dec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d106      	bne.n	8004d72 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7fd fbd9 	bl	8002524 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2202      	movs	r2, #2
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3304      	adds	r3, #4
 8004d82:	4619      	mov	r1, r3
 8004d84:	4610      	mov	r0, r2
 8004d86:	f000 fe17 	bl	80059b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d001      	beq.n	8004e0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e054      	b.n	8004eb6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0201 	orr.w	r2, r2, #1
 8004e22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a26      	ldr	r2, [pc, #152]	; (8004ec4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d022      	beq.n	8004e74 <HAL_TIM_Base_Start_IT+0x80>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e36:	d01d      	beq.n	8004e74 <HAL_TIM_Base_Start_IT+0x80>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a22      	ldr	r2, [pc, #136]	; (8004ec8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d018      	beq.n	8004e74 <HAL_TIM_Base_Start_IT+0x80>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a21      	ldr	r2, [pc, #132]	; (8004ecc <HAL_TIM_Base_Start_IT+0xd8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d013      	beq.n	8004e74 <HAL_TIM_Base_Start_IT+0x80>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a1f      	ldr	r2, [pc, #124]	; (8004ed0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00e      	beq.n	8004e74 <HAL_TIM_Base_Start_IT+0x80>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a1e      	ldr	r2, [pc, #120]	; (8004ed4 <HAL_TIM_Base_Start_IT+0xe0>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d009      	beq.n	8004e74 <HAL_TIM_Base_Start_IT+0x80>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a1c      	ldr	r2, [pc, #112]	; (8004ed8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d004      	beq.n	8004e74 <HAL_TIM_Base_Start_IT+0x80>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a1b      	ldr	r2, [pc, #108]	; (8004edc <HAL_TIM_Base_Start_IT+0xe8>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d115      	bne.n	8004ea0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	4b19      	ldr	r3, [pc, #100]	; (8004ee0 <HAL_TIM_Base_Start_IT+0xec>)
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2b06      	cmp	r3, #6
 8004e84:	d015      	beq.n	8004eb2 <HAL_TIM_Base_Start_IT+0xbe>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8c:	d011      	beq.n	8004eb2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f042 0201 	orr.w	r2, r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e9e:	e008      	b.n	8004eb2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0201 	orr.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	e000      	b.n	8004eb4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	40010000 	.word	0x40010000
 8004ec8:	40000400 	.word	0x40000400
 8004ecc:	40000800 	.word	0x40000800
 8004ed0:	40000c00 	.word	0x40000c00
 8004ed4:	40010400 	.word	0x40010400
 8004ed8:	40014000 	.word	0x40014000
 8004edc:	40001800 	.word	0x40001800
 8004ee0:	00010007 	.word	0x00010007

08004ee4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e049      	b.n	8004f8a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d106      	bne.n	8004f10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7fd faea 	bl	80024e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3304      	adds	r3, #4
 8004f20:	4619      	mov	r1, r3
 8004f22:	4610      	mov	r0, r2
 8004f24:	f000 fd48 	bl	80059b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b082      	sub	sp, #8
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e049      	b.n	8005038 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d106      	bne.n	8004fbe <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7fd fa4f 	bl	800245c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2202      	movs	r2, #2
 8004fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	3304      	adds	r3, #4
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	f000 fcf1 	bl	80059b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3708      	adds	r7, #8
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d104      	bne.n	800505a <HAL_TIM_IC_Start_IT+0x1a>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005056:	b2db      	uxtb	r3, r3
 8005058:	e023      	b.n	80050a2 <HAL_TIM_IC_Start_IT+0x62>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b04      	cmp	r3, #4
 800505e:	d104      	bne.n	800506a <HAL_TIM_IC_Start_IT+0x2a>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005066:	b2db      	uxtb	r3, r3
 8005068:	e01b      	b.n	80050a2 <HAL_TIM_IC_Start_IT+0x62>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b08      	cmp	r3, #8
 800506e:	d104      	bne.n	800507a <HAL_TIM_IC_Start_IT+0x3a>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005076:	b2db      	uxtb	r3, r3
 8005078:	e013      	b.n	80050a2 <HAL_TIM_IC_Start_IT+0x62>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b0c      	cmp	r3, #12
 800507e:	d104      	bne.n	800508a <HAL_TIM_IC_Start_IT+0x4a>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005086:	b2db      	uxtb	r3, r3
 8005088:	e00b      	b.n	80050a2 <HAL_TIM_IC_Start_IT+0x62>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b10      	cmp	r3, #16
 800508e:	d104      	bne.n	800509a <HAL_TIM_IC_Start_IT+0x5a>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005096:	b2db      	uxtb	r3, r3
 8005098:	e003      	b.n	80050a2 <HAL_TIM_IC_Start_IT+0x62>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d104      	bne.n	80050b4 <HAL_TIM_IC_Start_IT+0x74>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	e013      	b.n	80050dc <HAL_TIM_IC_Start_IT+0x9c>
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d104      	bne.n	80050c4 <HAL_TIM_IC_Start_IT+0x84>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	e00b      	b.n	80050dc <HAL_TIM_IC_Start_IT+0x9c>
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	d104      	bne.n	80050d4 <HAL_TIM_IC_Start_IT+0x94>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	e003      	b.n	80050dc <HAL_TIM_IC_Start_IT+0x9c>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d102      	bne.n	80050ea <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80050e4:	7bbb      	ldrb	r3, [r7, #14]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d001      	beq.n	80050ee <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e0dd      	b.n	80052aa <HAL_TIM_IC_Start_IT+0x26a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d104      	bne.n	80050fe <HAL_TIM_IC_Start_IT+0xbe>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050fc:	e023      	b.n	8005146 <HAL_TIM_IC_Start_IT+0x106>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b04      	cmp	r3, #4
 8005102:	d104      	bne.n	800510e <HAL_TIM_IC_Start_IT+0xce>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800510c:	e01b      	b.n	8005146 <HAL_TIM_IC_Start_IT+0x106>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b08      	cmp	r3, #8
 8005112:	d104      	bne.n	800511e <HAL_TIM_IC_Start_IT+0xde>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800511c:	e013      	b.n	8005146 <HAL_TIM_IC_Start_IT+0x106>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b0c      	cmp	r3, #12
 8005122:	d104      	bne.n	800512e <HAL_TIM_IC_Start_IT+0xee>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800512c:	e00b      	b.n	8005146 <HAL_TIM_IC_Start_IT+0x106>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b10      	cmp	r3, #16
 8005132:	d104      	bne.n	800513e <HAL_TIM_IC_Start_IT+0xfe>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800513c:	e003      	b.n	8005146 <HAL_TIM_IC_Start_IT+0x106>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2202      	movs	r2, #2
 8005142:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d104      	bne.n	8005156 <HAL_TIM_IC_Start_IT+0x116>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005154:	e013      	b.n	800517e <HAL_TIM_IC_Start_IT+0x13e>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b04      	cmp	r3, #4
 800515a:	d104      	bne.n	8005166 <HAL_TIM_IC_Start_IT+0x126>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005164:	e00b      	b.n	800517e <HAL_TIM_IC_Start_IT+0x13e>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b08      	cmp	r3, #8
 800516a:	d104      	bne.n	8005176 <HAL_TIM_IC_Start_IT+0x136>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005174:	e003      	b.n	800517e <HAL_TIM_IC_Start_IT+0x13e>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2202      	movs	r2, #2
 800517a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b0c      	cmp	r3, #12
 8005182:	d841      	bhi.n	8005208 <HAL_TIM_IC_Start_IT+0x1c8>
 8005184:	a201      	add	r2, pc, #4	; (adr r2, 800518c <HAL_TIM_IC_Start_IT+0x14c>)
 8005186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518a:	bf00      	nop
 800518c:	080051c1 	.word	0x080051c1
 8005190:	08005209 	.word	0x08005209
 8005194:	08005209 	.word	0x08005209
 8005198:	08005209 	.word	0x08005209
 800519c:	080051d3 	.word	0x080051d3
 80051a0:	08005209 	.word	0x08005209
 80051a4:	08005209 	.word	0x08005209
 80051a8:	08005209 	.word	0x08005209
 80051ac:	080051e5 	.word	0x080051e5
 80051b0:	08005209 	.word	0x08005209
 80051b4:	08005209 	.word	0x08005209
 80051b8:	08005209 	.word	0x08005209
 80051bc:	080051f7 	.word	0x080051f7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0202 	orr.w	r2, r2, #2
 80051ce:	60da      	str	r2, [r3, #12]
      break;
 80051d0:	e01b      	b.n	800520a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68da      	ldr	r2, [r3, #12]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f042 0204 	orr.w	r2, r2, #4
 80051e0:	60da      	str	r2, [r3, #12]
      break;
 80051e2:	e012      	b.n	800520a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0208 	orr.w	r2, r2, #8
 80051f2:	60da      	str	r2, [r3, #12]
      break;
 80051f4:	e009      	b.n	800520a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f042 0210 	orr.w	r2, r2, #16
 8005204:	60da      	str	r2, [r3, #12]
      break;
 8005206:	e000      	b.n	800520a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8005208:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2201      	movs	r2, #1
 8005210:	6839      	ldr	r1, [r7, #0]
 8005212:	4618      	mov	r0, r3
 8005214:	f001 f907 	bl	8006426 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a25      	ldr	r2, [pc, #148]	; (80052b4 <HAL_TIM_IC_Start_IT+0x274>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d022      	beq.n	8005268 <HAL_TIM_IC_Start_IT+0x228>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800522a:	d01d      	beq.n	8005268 <HAL_TIM_IC_Start_IT+0x228>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a21      	ldr	r2, [pc, #132]	; (80052b8 <HAL_TIM_IC_Start_IT+0x278>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d018      	beq.n	8005268 <HAL_TIM_IC_Start_IT+0x228>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a20      	ldr	r2, [pc, #128]	; (80052bc <HAL_TIM_IC_Start_IT+0x27c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d013      	beq.n	8005268 <HAL_TIM_IC_Start_IT+0x228>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a1e      	ldr	r2, [pc, #120]	; (80052c0 <HAL_TIM_IC_Start_IT+0x280>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d00e      	beq.n	8005268 <HAL_TIM_IC_Start_IT+0x228>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a1d      	ldr	r2, [pc, #116]	; (80052c4 <HAL_TIM_IC_Start_IT+0x284>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d009      	beq.n	8005268 <HAL_TIM_IC_Start_IT+0x228>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a1b      	ldr	r2, [pc, #108]	; (80052c8 <HAL_TIM_IC_Start_IT+0x288>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d004      	beq.n	8005268 <HAL_TIM_IC_Start_IT+0x228>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a1a      	ldr	r2, [pc, #104]	; (80052cc <HAL_TIM_IC_Start_IT+0x28c>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d115      	bne.n	8005294 <HAL_TIM_IC_Start_IT+0x254>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689a      	ldr	r2, [r3, #8]
 800526e:	4b18      	ldr	r3, [pc, #96]	; (80052d0 <HAL_TIM_IC_Start_IT+0x290>)
 8005270:	4013      	ands	r3, r2
 8005272:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2b06      	cmp	r3, #6
 8005278:	d015      	beq.n	80052a6 <HAL_TIM_IC_Start_IT+0x266>
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005280:	d011      	beq.n	80052a6 <HAL_TIM_IC_Start_IT+0x266>
    {
      __HAL_TIM_ENABLE(htim);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0201 	orr.w	r2, r2, #1
 8005290:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005292:	e008      	b.n	80052a6 <HAL_TIM_IC_Start_IT+0x266>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0201 	orr.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	e000      	b.n	80052a8 <HAL_TIM_IC_Start_IT+0x268>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	40010000 	.word	0x40010000
 80052b8:	40000400 	.word	0x40000400
 80052bc:	40000800 	.word	0x40000800
 80052c0:	40000c00 	.word	0x40000c00
 80052c4:	40010400 	.word	0x40010400
 80052c8:	40014000 	.word	0x40014000
 80052cc:	40001800 	.word	0x40001800
 80052d0:	00010007 	.word	0x00010007

080052d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d122      	bne.n	8005330 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d11b      	bne.n	8005330 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f06f 0202 	mvn.w	r2, #2
 8005300:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	f003 0303 	and.w	r3, r3, #3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fb30 	bl	800597c <HAL_TIM_IC_CaptureCallback>
 800531c:	e005      	b.n	800532a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fb22 	bl	8005968 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 fb33 	bl	8005990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f003 0304 	and.w	r3, r3, #4
 800533a:	2b04      	cmp	r3, #4
 800533c:	d122      	bne.n	8005384 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b04      	cmp	r3, #4
 800534a:	d11b      	bne.n	8005384 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f06f 0204 	mvn.w	r2, #4
 8005354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2202      	movs	r2, #2
 800535a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fb06 	bl	800597c <HAL_TIM_IC_CaptureCallback>
 8005370:	e005      	b.n	800537e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 faf8 	bl	8005968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 fb09 	bl	8005990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	f003 0308 	and.w	r3, r3, #8
 800538e:	2b08      	cmp	r3, #8
 8005390:	d122      	bne.n	80053d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f003 0308 	and.w	r3, r3, #8
 800539c:	2b08      	cmp	r3, #8
 800539e:	d11b      	bne.n	80053d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f06f 0208 	mvn.w	r2, #8
 80053a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2204      	movs	r2, #4
 80053ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	f003 0303 	and.w	r3, r3, #3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fadc 	bl	800597c <HAL_TIM_IC_CaptureCallback>
 80053c4:	e005      	b.n	80053d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 face 	bl	8005968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 fadf 	bl	8005990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f003 0310 	and.w	r3, r3, #16
 80053e2:	2b10      	cmp	r3, #16
 80053e4:	d122      	bne.n	800542c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f003 0310 	and.w	r3, r3, #16
 80053f0:	2b10      	cmp	r3, #16
 80053f2:	d11b      	bne.n	800542c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f06f 0210 	mvn.w	r2, #16
 80053fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2208      	movs	r2, #8
 8005402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fab2 	bl	800597c <HAL_TIM_IC_CaptureCallback>
 8005418:	e005      	b.n	8005426 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 faa4 	bl	8005968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 fab5 	bl	8005990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b01      	cmp	r3, #1
 8005438:	d10e      	bne.n	8005458 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b01      	cmp	r3, #1
 8005446:	d107      	bne.n	8005458 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f06f 0201 	mvn.w	r2, #1
 8005450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7fc fcf4 	bl	8001e40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005462:	2b80      	cmp	r3, #128	; 0x80
 8005464:	d10e      	bne.n	8005484 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005470:	2b80      	cmp	r3, #128	; 0x80
 8005472:	d107      	bne.n	8005484 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800547c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f001 f88e 	bl	80065a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005492:	d10e      	bne.n	80054b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549e:	2b80      	cmp	r3, #128	; 0x80
 80054a0:	d107      	bne.n	80054b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f001 f881 	bl	80065b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054bc:	2b40      	cmp	r3, #64	; 0x40
 80054be:	d10e      	bne.n	80054de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ca:	2b40      	cmp	r3, #64	; 0x40
 80054cc:	d107      	bne.n	80054de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fa63 	bl	80059a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	f003 0320 	and.w	r3, r3, #32
 80054e8:	2b20      	cmp	r3, #32
 80054ea:	d10e      	bne.n	800550a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	f003 0320 	and.w	r3, r3, #32
 80054f6:	2b20      	cmp	r3, #32
 80054f8:	d107      	bne.n	800550a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f06f 0220 	mvn.w	r2, #32
 8005502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f001 f841 	bl	800658c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800550a:	bf00      	nop
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
 8005518:	60f8      	str	r0, [r7, #12]
 800551a:	60b9      	str	r1, [r7, #8]
 800551c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005524:	2b01      	cmp	r3, #1
 8005526:	d101      	bne.n	800552c <HAL_TIM_IC_ConfigChannel+0x1a>
 8005528:	2302      	movs	r3, #2
 800552a:	e082      	b.n	8005632 <HAL_TIM_IC_ConfigChannel+0x120>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d11b      	bne.n	8005572 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6818      	ldr	r0, [r3, #0]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	6819      	ldr	r1, [r3, #0]
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f000 fdc3 	bl	80060d4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	699a      	ldr	r2, [r3, #24]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 020c 	bic.w	r2, r2, #12
 800555c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6999      	ldr	r1, [r3, #24]
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	430a      	orrs	r2, r1
 800556e:	619a      	str	r2, [r3, #24]
 8005570:	e05a      	b.n	8005628 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b04      	cmp	r3, #4
 8005576:	d11c      	bne.n	80055b2 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6818      	ldr	r0, [r3, #0]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	6819      	ldr	r1, [r3, #0]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f000 fe47 	bl	800621a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	699a      	ldr	r2, [r3, #24]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800559a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6999      	ldr	r1, [r3, #24]
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	021a      	lsls	r2, r3, #8
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	619a      	str	r2, [r3, #24]
 80055b0:	e03a      	b.n	8005628 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	d11b      	bne.n	80055f0 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6818      	ldr	r0, [r3, #0]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	6819      	ldr	r1, [r3, #0]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f000 fe94 	bl	80062f4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	69da      	ldr	r2, [r3, #28]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 020c 	bic.w	r2, r2, #12
 80055da:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	69d9      	ldr	r1, [r3, #28]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	689a      	ldr	r2, [r3, #8]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	61da      	str	r2, [r3, #28]
 80055ee:	e01b      	b.n	8005628 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6818      	ldr	r0, [r3, #0]
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	6819      	ldr	r1, [r3, #0]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f000 feb4 	bl	800636c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	69da      	ldr	r2, [r3, #28]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005612:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	69d9      	ldr	r1, [r3, #28]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	021a      	lsls	r2, r3, #8
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800564e:	2b01      	cmp	r3, #1
 8005650:	d101      	bne.n	8005656 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005652:	2302      	movs	r3, #2
 8005654:	e0fd      	b.n	8005852 <HAL_TIM_PWM_ConfigChannel+0x216>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b14      	cmp	r3, #20
 8005662:	f200 80f0 	bhi.w	8005846 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005666:	a201      	add	r2, pc, #4	; (adr r2, 800566c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566c:	080056c1 	.word	0x080056c1
 8005670:	08005847 	.word	0x08005847
 8005674:	08005847 	.word	0x08005847
 8005678:	08005847 	.word	0x08005847
 800567c:	08005701 	.word	0x08005701
 8005680:	08005847 	.word	0x08005847
 8005684:	08005847 	.word	0x08005847
 8005688:	08005847 	.word	0x08005847
 800568c:	08005743 	.word	0x08005743
 8005690:	08005847 	.word	0x08005847
 8005694:	08005847 	.word	0x08005847
 8005698:	08005847 	.word	0x08005847
 800569c:	08005783 	.word	0x08005783
 80056a0:	08005847 	.word	0x08005847
 80056a4:	08005847 	.word	0x08005847
 80056a8:	08005847 	.word	0x08005847
 80056ac:	080057c5 	.word	0x080057c5
 80056b0:	08005847 	.word	0x08005847
 80056b4:	08005847 	.word	0x08005847
 80056b8:	08005847 	.word	0x08005847
 80056bc:	08005805 	.word	0x08005805
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68b9      	ldr	r1, [r7, #8]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 fa16 	bl	8005af8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	699a      	ldr	r2, [r3, #24]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f042 0208 	orr.w	r2, r2, #8
 80056da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	699a      	ldr	r2, [r3, #24]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 0204 	bic.w	r2, r2, #4
 80056ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6999      	ldr	r1, [r3, #24]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	691a      	ldr	r2, [r3, #16]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	619a      	str	r2, [r3, #24]
      break;
 80056fe:	e0a3      	b.n	8005848 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68b9      	ldr	r1, [r7, #8]
 8005706:	4618      	mov	r0, r3
 8005708:	f000 fa68 	bl	8005bdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	699a      	ldr	r2, [r3, #24]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800571a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800572a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6999      	ldr	r1, [r3, #24]
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	021a      	lsls	r2, r3, #8
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	619a      	str	r2, [r3, #24]
      break;
 8005740:	e082      	b.n	8005848 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68b9      	ldr	r1, [r7, #8]
 8005748:	4618      	mov	r0, r3
 800574a:	f000 fabf 	bl	8005ccc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	69da      	ldr	r2, [r3, #28]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f042 0208 	orr.w	r2, r2, #8
 800575c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	69da      	ldr	r2, [r3, #28]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 0204 	bic.w	r2, r2, #4
 800576c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	69d9      	ldr	r1, [r3, #28]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	691a      	ldr	r2, [r3, #16]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	61da      	str	r2, [r3, #28]
      break;
 8005780:	e062      	b.n	8005848 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68b9      	ldr	r1, [r7, #8]
 8005788:	4618      	mov	r0, r3
 800578a:	f000 fb15 	bl	8005db8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69da      	ldr	r2, [r3, #28]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800579c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	69da      	ldr	r2, [r3, #28]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69d9      	ldr	r1, [r3, #28]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	021a      	lsls	r2, r3, #8
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	61da      	str	r2, [r3, #28]
      break;
 80057c2:	e041      	b.n	8005848 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68b9      	ldr	r1, [r7, #8]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 fb4c 	bl	8005e68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f042 0208 	orr.w	r2, r2, #8
 80057de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0204 	bic.w	r2, r2, #4
 80057ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	691a      	ldr	r2, [r3, #16]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005802:	e021      	b.n	8005848 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68b9      	ldr	r1, [r7, #8]
 800580a:	4618      	mov	r0, r3
 800580c:	f000 fb7e 	bl	8005f0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800581e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800582e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	021a      	lsls	r2, r3, #8
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	430a      	orrs	r2, r1
 8005842:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005844:	e000      	b.n	8005848 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005846:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop

0800585c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800586c:	2b01      	cmp	r3, #1
 800586e:	d101      	bne.n	8005874 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005870:	2302      	movs	r3, #2
 8005872:	e031      	b.n	80058d8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005884:	6839      	ldr	r1, [r7, #0]
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fb94 	bl	8005fb4 <TIM_SlaveTimer_SetConfig>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d009      	beq.n	80058a6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e018      	b.n	80058d8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058b4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058c4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3708      	adds	r7, #8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	60fb      	str	r3, [r7, #12]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b0c      	cmp	r3, #12
 80058f2:	d831      	bhi.n	8005958 <HAL_TIM_ReadCapturedValue+0x78>
 80058f4:	a201      	add	r2, pc, #4	; (adr r2, 80058fc <HAL_TIM_ReadCapturedValue+0x1c>)
 80058f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fa:	bf00      	nop
 80058fc:	08005931 	.word	0x08005931
 8005900:	08005959 	.word	0x08005959
 8005904:	08005959 	.word	0x08005959
 8005908:	08005959 	.word	0x08005959
 800590c:	0800593b 	.word	0x0800593b
 8005910:	08005959 	.word	0x08005959
 8005914:	08005959 	.word	0x08005959
 8005918:	08005959 	.word	0x08005959
 800591c:	08005945 	.word	0x08005945
 8005920:	08005959 	.word	0x08005959
 8005924:	08005959 	.word	0x08005959
 8005928:	08005959 	.word	0x08005959
 800592c:	0800594f 	.word	0x0800594f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005936:	60fb      	str	r3, [r7, #12]

      break;
 8005938:	e00f      	b.n	800595a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005940:	60fb      	str	r3, [r7, #12]

      break;
 8005942:	e00a      	b.n	800595a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594a:	60fb      	str	r3, [r7, #12]

      break;
 800594c:	e005      	b.n	800595a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005954:	60fb      	str	r3, [r7, #12]

      break;
 8005956:	e000      	b.n	800595a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005958:	bf00      	nop
  }

  return tmpreg;
 800595a:	68fb      	ldr	r3, [r7, #12]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a40      	ldr	r2, [pc, #256]	; (8005acc <TIM_Base_SetConfig+0x114>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d013      	beq.n	80059f8 <TIM_Base_SetConfig+0x40>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d6:	d00f      	beq.n	80059f8 <TIM_Base_SetConfig+0x40>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a3d      	ldr	r2, [pc, #244]	; (8005ad0 <TIM_Base_SetConfig+0x118>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d00b      	beq.n	80059f8 <TIM_Base_SetConfig+0x40>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a3c      	ldr	r2, [pc, #240]	; (8005ad4 <TIM_Base_SetConfig+0x11c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d007      	beq.n	80059f8 <TIM_Base_SetConfig+0x40>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a3b      	ldr	r2, [pc, #236]	; (8005ad8 <TIM_Base_SetConfig+0x120>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d003      	beq.n	80059f8 <TIM_Base_SetConfig+0x40>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a3a      	ldr	r2, [pc, #232]	; (8005adc <TIM_Base_SetConfig+0x124>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d108      	bne.n	8005a0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a2f      	ldr	r2, [pc, #188]	; (8005acc <TIM_Base_SetConfig+0x114>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d02b      	beq.n	8005a6a <TIM_Base_SetConfig+0xb2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a18:	d027      	beq.n	8005a6a <TIM_Base_SetConfig+0xb2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a2c      	ldr	r2, [pc, #176]	; (8005ad0 <TIM_Base_SetConfig+0x118>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d023      	beq.n	8005a6a <TIM_Base_SetConfig+0xb2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a2b      	ldr	r2, [pc, #172]	; (8005ad4 <TIM_Base_SetConfig+0x11c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d01f      	beq.n	8005a6a <TIM_Base_SetConfig+0xb2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a2a      	ldr	r2, [pc, #168]	; (8005ad8 <TIM_Base_SetConfig+0x120>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d01b      	beq.n	8005a6a <TIM_Base_SetConfig+0xb2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a29      	ldr	r2, [pc, #164]	; (8005adc <TIM_Base_SetConfig+0x124>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d017      	beq.n	8005a6a <TIM_Base_SetConfig+0xb2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a28      	ldr	r2, [pc, #160]	; (8005ae0 <TIM_Base_SetConfig+0x128>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d013      	beq.n	8005a6a <TIM_Base_SetConfig+0xb2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a27      	ldr	r2, [pc, #156]	; (8005ae4 <TIM_Base_SetConfig+0x12c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d00f      	beq.n	8005a6a <TIM_Base_SetConfig+0xb2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a26      	ldr	r2, [pc, #152]	; (8005ae8 <TIM_Base_SetConfig+0x130>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d00b      	beq.n	8005a6a <TIM_Base_SetConfig+0xb2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a25      	ldr	r2, [pc, #148]	; (8005aec <TIM_Base_SetConfig+0x134>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d007      	beq.n	8005a6a <TIM_Base_SetConfig+0xb2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a24      	ldr	r2, [pc, #144]	; (8005af0 <TIM_Base_SetConfig+0x138>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d003      	beq.n	8005a6a <TIM_Base_SetConfig+0xb2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a23      	ldr	r2, [pc, #140]	; (8005af4 <TIM_Base_SetConfig+0x13c>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d108      	bne.n	8005a7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	689a      	ldr	r2, [r3, #8]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a0a      	ldr	r2, [pc, #40]	; (8005acc <TIM_Base_SetConfig+0x114>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d003      	beq.n	8005ab0 <TIM_Base_SetConfig+0xf8>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a0c      	ldr	r2, [pc, #48]	; (8005adc <TIM_Base_SetConfig+0x124>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d103      	bne.n	8005ab8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	691a      	ldr	r2, [r3, #16]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	615a      	str	r2, [r3, #20]
}
 8005abe:	bf00      	nop
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	40010000 	.word	0x40010000
 8005ad0:	40000400 	.word	0x40000400
 8005ad4:	40000800 	.word	0x40000800
 8005ad8:	40000c00 	.word	0x40000c00
 8005adc:	40010400 	.word	0x40010400
 8005ae0:	40014000 	.word	0x40014000
 8005ae4:	40014400 	.word	0x40014400
 8005ae8:	40014800 	.word	0x40014800
 8005aec:	40001800 	.word	0x40001800
 8005af0:	40001c00 	.word	0x40001c00
 8005af4:	40002000 	.word	0x40002000

08005af8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b087      	sub	sp, #28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	f023 0201 	bic.w	r2, r3, #1
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4b2b      	ldr	r3, [pc, #172]	; (8005bd0 <TIM_OC1_SetConfig+0xd8>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0303 	bic.w	r3, r3, #3
 8005b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f023 0302 	bic.w	r3, r3, #2
 8005b40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a21      	ldr	r2, [pc, #132]	; (8005bd4 <TIM_OC1_SetConfig+0xdc>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d003      	beq.n	8005b5c <TIM_OC1_SetConfig+0x64>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a20      	ldr	r2, [pc, #128]	; (8005bd8 <TIM_OC1_SetConfig+0xe0>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d10c      	bne.n	8005b76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f023 0308 	bic.w	r3, r3, #8
 8005b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f023 0304 	bic.w	r3, r3, #4
 8005b74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a16      	ldr	r2, [pc, #88]	; (8005bd4 <TIM_OC1_SetConfig+0xdc>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d003      	beq.n	8005b86 <TIM_OC1_SetConfig+0x8e>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a15      	ldr	r2, [pc, #84]	; (8005bd8 <TIM_OC1_SetConfig+0xe0>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d111      	bne.n	8005baa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	621a      	str	r2, [r3, #32]
}
 8005bc4:	bf00      	nop
 8005bc6:	371c      	adds	r7, #28
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	fffeff8f 	.word	0xfffeff8f
 8005bd4:	40010000 	.word	0x40010000
 8005bd8:	40010400 	.word	0x40010400

08005bdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	f023 0210 	bic.w	r2, r3, #16
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	4b2e      	ldr	r3, [pc, #184]	; (8005cc0 <TIM_OC2_SetConfig+0xe4>)
 8005c08:	4013      	ands	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	021b      	lsls	r3, r3, #8
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f023 0320 	bic.w	r3, r3, #32
 8005c26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	011b      	lsls	r3, r3, #4
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a23      	ldr	r2, [pc, #140]	; (8005cc4 <TIM_OC2_SetConfig+0xe8>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d003      	beq.n	8005c44 <TIM_OC2_SetConfig+0x68>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a22      	ldr	r2, [pc, #136]	; (8005cc8 <TIM_OC2_SetConfig+0xec>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d10d      	bne.n	8005c60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	011b      	lsls	r3, r3, #4
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a18      	ldr	r2, [pc, #96]	; (8005cc4 <TIM_OC2_SetConfig+0xe8>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d003      	beq.n	8005c70 <TIM_OC2_SetConfig+0x94>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a17      	ldr	r2, [pc, #92]	; (8005cc8 <TIM_OC2_SetConfig+0xec>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d113      	bne.n	8005c98 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	621a      	str	r2, [r3, #32]
}
 8005cb2:	bf00      	nop
 8005cb4:	371c      	adds	r7, #28
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	feff8fff 	.word	0xfeff8fff
 8005cc4:	40010000 	.word	0x40010000
 8005cc8:	40010400 	.word	0x40010400

08005ccc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4b2d      	ldr	r3, [pc, #180]	; (8005dac <TIM_OC3_SetConfig+0xe0>)
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 0303 	bic.w	r3, r3, #3
 8005d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	021b      	lsls	r3, r3, #8
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a22      	ldr	r2, [pc, #136]	; (8005db0 <TIM_OC3_SetConfig+0xe4>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d003      	beq.n	8005d32 <TIM_OC3_SetConfig+0x66>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a21      	ldr	r2, [pc, #132]	; (8005db4 <TIM_OC3_SetConfig+0xe8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d10d      	bne.n	8005d4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	021b      	lsls	r3, r3, #8
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a17      	ldr	r2, [pc, #92]	; (8005db0 <TIM_OC3_SetConfig+0xe4>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d003      	beq.n	8005d5e <TIM_OC3_SetConfig+0x92>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a16      	ldr	r2, [pc, #88]	; (8005db4 <TIM_OC3_SetConfig+0xe8>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d113      	bne.n	8005d86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	011b      	lsls	r3, r3, #4
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	011b      	lsls	r3, r3, #4
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	621a      	str	r2, [r3, #32]
}
 8005da0:	bf00      	nop
 8005da2:	371c      	adds	r7, #28
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	fffeff8f 	.word	0xfffeff8f
 8005db0:	40010000 	.word	0x40010000
 8005db4:	40010400 	.word	0x40010400

08005db8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4b1e      	ldr	r3, [pc, #120]	; (8005e5c <TIM_OC4_SetConfig+0xa4>)
 8005de4:	4013      	ands	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	021b      	lsls	r3, r3, #8
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	031b      	lsls	r3, r3, #12
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a13      	ldr	r2, [pc, #76]	; (8005e60 <TIM_OC4_SetConfig+0xa8>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d003      	beq.n	8005e20 <TIM_OC4_SetConfig+0x68>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a12      	ldr	r2, [pc, #72]	; (8005e64 <TIM_OC4_SetConfig+0xac>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d109      	bne.n	8005e34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	019b      	lsls	r3, r3, #6
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	621a      	str	r2, [r3, #32]
}
 8005e4e:	bf00      	nop
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	feff8fff 	.word	0xfeff8fff
 8005e60:	40010000 	.word	0x40010000
 8005e64:	40010400 	.word	0x40010400

08005e68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	4b1b      	ldr	r3, [pc, #108]	; (8005f00 <TIM_OC5_SetConfig+0x98>)
 8005e94:	4013      	ands	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ea8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	041b      	lsls	r3, r3, #16
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a12      	ldr	r2, [pc, #72]	; (8005f04 <TIM_OC5_SetConfig+0x9c>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d003      	beq.n	8005ec6 <TIM_OC5_SetConfig+0x5e>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a11      	ldr	r2, [pc, #68]	; (8005f08 <TIM_OC5_SetConfig+0xa0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d109      	bne.n	8005eda <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ecc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	021b      	lsls	r3, r3, #8
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	621a      	str	r2, [r3, #32]
}
 8005ef4:	bf00      	nop
 8005ef6:	371c      	adds	r7, #28
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	fffeff8f 	.word	0xfffeff8f
 8005f04:	40010000 	.word	0x40010000
 8005f08:	40010400 	.word	0x40010400

08005f0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b087      	sub	sp, #28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	4b1c      	ldr	r3, [pc, #112]	; (8005fa8 <TIM_OC6_SetConfig+0x9c>)
 8005f38:	4013      	ands	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	021b      	lsls	r3, r3, #8
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	051b      	lsls	r3, r3, #20
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a13      	ldr	r2, [pc, #76]	; (8005fac <TIM_OC6_SetConfig+0xa0>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d003      	beq.n	8005f6c <TIM_OC6_SetConfig+0x60>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a12      	ldr	r2, [pc, #72]	; (8005fb0 <TIM_OC6_SetConfig+0xa4>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d109      	bne.n	8005f80 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	029b      	lsls	r3, r3, #10
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	621a      	str	r2, [r3, #32]
}
 8005f9a:	bf00      	nop
 8005f9c:	371c      	adds	r7, #28
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	feff8fff 	.word	0xfeff8fff
 8005fac:	40010000 	.word	0x40010000
 8005fb0:	40010400 	.word	0x40010400

08005fb4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fcc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	4b3d      	ldr	r3, [pc, #244]	; (80060d0 <TIM_SlaveTimer_SetConfig+0x11c>)
 8005fdc:	4013      	ands	r3, r2
 8005fde:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	2b70      	cmp	r3, #112	; 0x70
 8005ff8:	d01a      	beq.n	8006030 <TIM_SlaveTimer_SetConfig+0x7c>
 8005ffa:	2b70      	cmp	r3, #112	; 0x70
 8005ffc:	d860      	bhi.n	80060c0 <TIM_SlaveTimer_SetConfig+0x10c>
 8005ffe:	2b60      	cmp	r3, #96	; 0x60
 8006000:	d054      	beq.n	80060ac <TIM_SlaveTimer_SetConfig+0xf8>
 8006002:	2b60      	cmp	r3, #96	; 0x60
 8006004:	d85c      	bhi.n	80060c0 <TIM_SlaveTimer_SetConfig+0x10c>
 8006006:	2b50      	cmp	r3, #80	; 0x50
 8006008:	d046      	beq.n	8006098 <TIM_SlaveTimer_SetConfig+0xe4>
 800600a:	2b50      	cmp	r3, #80	; 0x50
 800600c:	d858      	bhi.n	80060c0 <TIM_SlaveTimer_SetConfig+0x10c>
 800600e:	2b40      	cmp	r3, #64	; 0x40
 8006010:	d019      	beq.n	8006046 <TIM_SlaveTimer_SetConfig+0x92>
 8006012:	2b40      	cmp	r3, #64	; 0x40
 8006014:	d854      	bhi.n	80060c0 <TIM_SlaveTimer_SetConfig+0x10c>
 8006016:	2b30      	cmp	r3, #48	; 0x30
 8006018:	d054      	beq.n	80060c4 <TIM_SlaveTimer_SetConfig+0x110>
 800601a:	2b30      	cmp	r3, #48	; 0x30
 800601c:	d850      	bhi.n	80060c0 <TIM_SlaveTimer_SetConfig+0x10c>
 800601e:	2b20      	cmp	r3, #32
 8006020:	d050      	beq.n	80060c4 <TIM_SlaveTimer_SetConfig+0x110>
 8006022:	2b20      	cmp	r3, #32
 8006024:	d84c      	bhi.n	80060c0 <TIM_SlaveTimer_SetConfig+0x10c>
 8006026:	2b00      	cmp	r3, #0
 8006028:	d04c      	beq.n	80060c4 <TIM_SlaveTimer_SetConfig+0x110>
 800602a:	2b10      	cmp	r3, #16
 800602c:	d04a      	beq.n	80060c4 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800602e:	e047      	b.n	80060c0 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6818      	ldr	r0, [r3, #0]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	68d9      	ldr	r1, [r3, #12]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	f000 f9d1 	bl	80063e6 <TIM_ETR_SetConfig>
      break;
 8006044:	e03f      	b.n	80060c6 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2b05      	cmp	r3, #5
 800604c:	d101      	bne.n	8006052 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e03a      	b.n	80060c8 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6a1a      	ldr	r2, [r3, #32]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 0201 	bic.w	r2, r2, #1
 8006068:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006078:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	011b      	lsls	r3, r3, #4
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	621a      	str	r2, [r3, #32]
      break;
 8006096:	e016      	b.n	80060c6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6818      	ldr	r0, [r3, #0]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	6899      	ldr	r1, [r3, #8]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	461a      	mov	r2, r3
 80060a6:	f000 f889 	bl	80061bc <TIM_TI1_ConfigInputStage>
      break;
 80060aa:	e00c      	b.n	80060c6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6818      	ldr	r0, [r3, #0]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	6899      	ldr	r1, [r3, #8]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	461a      	mov	r2, r3
 80060ba:	f000 f8eb 	bl	8006294 <TIM_TI2_ConfigInputStage>
      break;
 80060be:	e002      	b.n	80060c6 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80060c0:	bf00      	nop
 80060c2:	e000      	b.n	80060c6 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80060c4:	bf00      	nop
  }
  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3718      	adds	r7, #24
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	fffefff8 	.word	0xfffefff8

080060d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b087      	sub	sp, #28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
 80060e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	f023 0201 	bic.w	r2, r3, #1
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	4a28      	ldr	r2, [pc, #160]	; (80061a0 <TIM_TI1_SetConfig+0xcc>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d01b      	beq.n	800613a <TIM_TI1_SetConfig+0x66>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006108:	d017      	beq.n	800613a <TIM_TI1_SetConfig+0x66>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	4a25      	ldr	r2, [pc, #148]	; (80061a4 <TIM_TI1_SetConfig+0xd0>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d013      	beq.n	800613a <TIM_TI1_SetConfig+0x66>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4a24      	ldr	r2, [pc, #144]	; (80061a8 <TIM_TI1_SetConfig+0xd4>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d00f      	beq.n	800613a <TIM_TI1_SetConfig+0x66>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	4a23      	ldr	r2, [pc, #140]	; (80061ac <TIM_TI1_SetConfig+0xd8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d00b      	beq.n	800613a <TIM_TI1_SetConfig+0x66>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	4a22      	ldr	r2, [pc, #136]	; (80061b0 <TIM_TI1_SetConfig+0xdc>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d007      	beq.n	800613a <TIM_TI1_SetConfig+0x66>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	4a21      	ldr	r2, [pc, #132]	; (80061b4 <TIM_TI1_SetConfig+0xe0>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d003      	beq.n	800613a <TIM_TI1_SetConfig+0x66>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	4a20      	ldr	r2, [pc, #128]	; (80061b8 <TIM_TI1_SetConfig+0xe4>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d101      	bne.n	800613e <TIM_TI1_SetConfig+0x6a>
 800613a:	2301      	movs	r3, #1
 800613c:	e000      	b.n	8006140 <TIM_TI1_SetConfig+0x6c>
 800613e:	2300      	movs	r3, #0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d008      	beq.n	8006156 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f023 0303 	bic.w	r3, r3, #3
 800614a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4313      	orrs	r3, r2
 8006152:	617b      	str	r3, [r7, #20]
 8006154:	e003      	b.n	800615e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f043 0301 	orr.w	r3, r3, #1
 800615c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006164:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	011b      	lsls	r3, r3, #4
 800616a:	b2db      	uxtb	r3, r3
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	4313      	orrs	r3, r2
 8006170:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f023 030a 	bic.w	r3, r3, #10
 8006178:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f003 030a 	and.w	r3, r3, #10
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	4313      	orrs	r3, r2
 8006184:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	621a      	str	r2, [r3, #32]
}
 8006192:	bf00      	nop
 8006194:	371c      	adds	r7, #28
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	40010000 	.word	0x40010000
 80061a4:	40000400 	.word	0x40000400
 80061a8:	40000800 	.word	0x40000800
 80061ac:	40000c00 	.word	0x40000c00
 80061b0:	40010400 	.word	0x40010400
 80061b4:	40014000 	.word	0x40014000
 80061b8:	40001800 	.word	0x40001800

080061bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061bc:	b480      	push	{r7}
 80061be:	b087      	sub	sp, #28
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	f023 0201 	bic.w	r2, r3, #1
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	011b      	lsls	r3, r3, #4
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f023 030a 	bic.w	r3, r3, #10
 80061f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	4313      	orrs	r3, r2
 8006200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	621a      	str	r2, [r3, #32]
}
 800620e:	bf00      	nop
 8006210:	371c      	adds	r7, #28
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800621a:	b480      	push	{r7}
 800621c:	b087      	sub	sp, #28
 800621e:	af00      	add	r7, sp, #0
 8006220:	60f8      	str	r0, [r7, #12]
 8006222:	60b9      	str	r1, [r7, #8]
 8006224:	607a      	str	r2, [r7, #4]
 8006226:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6a1b      	ldr	r3, [r3, #32]
 800622c:	f023 0210 	bic.w	r2, r3, #16
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006246:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	021b      	lsls	r3, r3, #8
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	4313      	orrs	r3, r2
 8006250:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006258:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	031b      	lsls	r3, r3, #12
 800625e:	b29b      	uxth	r3, r3
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	4313      	orrs	r3, r2
 8006264:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800626c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	011b      	lsls	r3, r3, #4
 8006272:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	4313      	orrs	r3, r2
 800627a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	621a      	str	r2, [r3, #32]
}
 8006288:	bf00      	nop
 800628a:	371c      	adds	r7, #28
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006294:	b480      	push	{r7}
 8006296:	b087      	sub	sp, #28
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	f023 0210 	bic.w	r2, r3, #16
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	031b      	lsls	r3, r3, #12
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	011b      	lsls	r3, r3, #4
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	4313      	orrs	r3, r2
 80062da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	621a      	str	r2, [r3, #32]
}
 80062e8:	bf00      	nop
 80062ea:	371c      	adds	r7, #28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b087      	sub	sp, #28
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
 8006300:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	69db      	ldr	r3, [r3, #28]
 8006312:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f023 0303 	bic.w	r3, r3, #3
 8006320:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4313      	orrs	r3, r2
 8006328:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006330:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	011b      	lsls	r3, r3, #4
 8006336:	b2db      	uxtb	r3, r3
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	4313      	orrs	r3, r2
 800633c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006344:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	021b      	lsls	r3, r3, #8
 800634a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	621a      	str	r2, [r3, #32]
}
 8006360:	bf00      	nop
 8006362:	371c      	adds	r7, #28
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800636c:	b480      	push	{r7}
 800636e:	b087      	sub	sp, #28
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	69db      	ldr	r3, [r3, #28]
 800638a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006398:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	021b      	lsls	r3, r3, #8
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063aa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	031b      	lsls	r3, r3, #12
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80063be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	031b      	lsls	r3, r3, #12
 80063c4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	621a      	str	r2, [r3, #32]
}
 80063da:	bf00      	nop
 80063dc:	371c      	adds	r7, #28
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b087      	sub	sp, #28
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	60f8      	str	r0, [r7, #12]
 80063ee:	60b9      	str	r1, [r7, #8]
 80063f0:	607a      	str	r2, [r7, #4]
 80063f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006400:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	021a      	lsls	r2, r3, #8
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	431a      	orrs	r2, r3
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	4313      	orrs	r3, r2
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	4313      	orrs	r3, r2
 8006412:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	609a      	str	r2, [r3, #8]
}
 800641a:	bf00      	nop
 800641c:	371c      	adds	r7, #28
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006426:	b480      	push	{r7}
 8006428:	b087      	sub	sp, #28
 800642a:	af00      	add	r7, sp, #0
 800642c:	60f8      	str	r0, [r7, #12]
 800642e:	60b9      	str	r1, [r7, #8]
 8006430:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	f003 031f 	and.w	r3, r3, #31
 8006438:	2201      	movs	r2, #1
 800643a:	fa02 f303 	lsl.w	r3, r2, r3
 800643e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a1a      	ldr	r2, [r3, #32]
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	43db      	mvns	r3, r3
 8006448:	401a      	ands	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6a1a      	ldr	r2, [r3, #32]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	f003 031f 	and.w	r3, r3, #31
 8006458:	6879      	ldr	r1, [r7, #4]
 800645a:	fa01 f303 	lsl.w	r3, r1, r3
 800645e:	431a      	orrs	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	621a      	str	r2, [r3, #32]
}
 8006464:	bf00      	nop
 8006466:	371c      	adds	r7, #28
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006480:	2b01      	cmp	r3, #1
 8006482:	d101      	bne.n	8006488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006484:	2302      	movs	r3, #2
 8006486:	e06d      	b.n	8006564 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2202      	movs	r2, #2
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a30      	ldr	r2, [pc, #192]	; (8006570 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d004      	beq.n	80064bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a2f      	ldr	r2, [pc, #188]	; (8006574 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d108      	bne.n	80064ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80064c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	4313      	orrs	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a20      	ldr	r2, [pc, #128]	; (8006570 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d022      	beq.n	8006538 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064fa:	d01d      	beq.n	8006538 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a1d      	ldr	r2, [pc, #116]	; (8006578 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d018      	beq.n	8006538 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a1c      	ldr	r2, [pc, #112]	; (800657c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d013      	beq.n	8006538 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a1a      	ldr	r2, [pc, #104]	; (8006580 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d00e      	beq.n	8006538 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a15      	ldr	r2, [pc, #84]	; (8006574 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d009      	beq.n	8006538 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a16      	ldr	r2, [pc, #88]	; (8006584 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d004      	beq.n	8006538 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a15      	ldr	r2, [pc, #84]	; (8006588 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d10c      	bne.n	8006552 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800653e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	4313      	orrs	r3, r2
 8006548:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	40010000 	.word	0x40010000
 8006574:	40010400 	.word	0x40010400
 8006578:	40000400 	.word	0x40000400
 800657c:	40000800 	.word	0x40000800
 8006580:	40000c00 	.word	0x40000c00
 8006584:	40014000 	.word	0x40014000
 8006588:	40001800 	.word	0x40001800

0800658c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e040      	b.n	800665c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d106      	bne.n	80065f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7fc f828 	bl	8002640 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2224      	movs	r2, #36	; 0x24
 80065f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f022 0201 	bic.w	r2, r2, #1
 8006604:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f8c0 	bl	800678c <UART_SetConfig>
 800660c:	4603      	mov	r3, r0
 800660e:	2b01      	cmp	r3, #1
 8006610:	d101      	bne.n	8006616 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e022      	b.n	800665c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661a:	2b00      	cmp	r3, #0
 800661c:	d002      	beq.n	8006624 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 fb16 	bl	8006c50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006632:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689a      	ldr	r2, [r3, #8]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006642:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f042 0201 	orr.w	r2, r2, #1
 8006652:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fb9d 	bl	8006d94 <UART_CheckIdleState>
 800665a:	4603      	mov	r3, r0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3708      	adds	r7, #8
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b08a      	sub	sp, #40	; 0x28
 8006668:	af02      	add	r7, sp, #8
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	603b      	str	r3, [r7, #0]
 8006670:	4613      	mov	r3, r2
 8006672:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006678:	2b20      	cmp	r3, #32
 800667a:	f040 8081 	bne.w	8006780 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d002      	beq.n	800668a <HAL_UART_Transmit+0x26>
 8006684:	88fb      	ldrh	r3, [r7, #6]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e079      	b.n	8006782 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006694:	2b01      	cmp	r3, #1
 8006696:	d101      	bne.n	800669c <HAL_UART_Transmit+0x38>
 8006698:	2302      	movs	r3, #2
 800669a:	e072      	b.n	8006782 <HAL_UART_Transmit+0x11e>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2221      	movs	r2, #33	; 0x21
 80066b0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066b2:	f7fc f883 	bl	80027bc <HAL_GetTick>
 80066b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	88fa      	ldrh	r2, [r7, #6]
 80066bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	88fa      	ldrh	r2, [r7, #6]
 80066c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066d0:	d108      	bne.n	80066e4 <HAL_UART_Transmit+0x80>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d104      	bne.n	80066e4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80066da:	2300      	movs	r3, #0
 80066dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	61bb      	str	r3, [r7, #24]
 80066e2:	e003      	b.n	80066ec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066e8:	2300      	movs	r3, #0
 80066ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80066f4:	e02c      	b.n	8006750 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	9300      	str	r3, [sp, #0]
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	2200      	movs	r2, #0
 80066fe:	2180      	movs	r1, #128	; 0x80
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f000 fb90 	bl	8006e26 <UART_WaitOnFlagUntilTimeout>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e038      	b.n	8006782 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10b      	bne.n	800672e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	881b      	ldrh	r3, [r3, #0]
 800671a:	461a      	mov	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006724:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	3302      	adds	r3, #2
 800672a:	61bb      	str	r3, [r7, #24]
 800672c:	e007      	b.n	800673e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	781a      	ldrb	r2, [r3, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	3301      	adds	r3, #1
 800673c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006744:	b29b      	uxth	r3, r3
 8006746:	3b01      	subs	r3, #1
 8006748:	b29a      	uxth	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006756:	b29b      	uxth	r3, r3
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1cc      	bne.n	80066f6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	2200      	movs	r2, #0
 8006764:	2140      	movs	r1, #64	; 0x40
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f000 fb5d 	bl	8006e26 <UART_WaitOnFlagUntilTimeout>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d001      	beq.n	8006776 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e005      	b.n	8006782 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2220      	movs	r2, #32
 800677a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800677c:	2300      	movs	r3, #0
 800677e:	e000      	b.n	8006782 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006780:	2302      	movs	r3, #2
  }
}
 8006782:	4618      	mov	r0, r3
 8006784:	3720      	adds	r7, #32
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
	...

0800678c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b088      	sub	sp, #32
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006794:	2300      	movs	r3, #0
 8006796:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689a      	ldr	r2, [r3, #8]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	431a      	orrs	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	431a      	orrs	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	69db      	ldr	r3, [r3, #28]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	4ba7      	ldr	r3, [pc, #668]	; (8006a54 <UART_SetConfig+0x2c8>)
 80067b8:	4013      	ands	r3, r2
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	6812      	ldr	r2, [r2, #0]
 80067be:	6979      	ldr	r1, [r7, #20]
 80067c0:	430b      	orrs	r3, r1
 80067c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	68da      	ldr	r2, [r3, #12]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	430a      	orrs	r2, r1
 80067fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a95      	ldr	r2, [pc, #596]	; (8006a58 <UART_SetConfig+0x2cc>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d120      	bne.n	800684a <UART_SetConfig+0xbe>
 8006808:	4b94      	ldr	r3, [pc, #592]	; (8006a5c <UART_SetConfig+0x2d0>)
 800680a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800680e:	f003 0303 	and.w	r3, r3, #3
 8006812:	2b03      	cmp	r3, #3
 8006814:	d816      	bhi.n	8006844 <UART_SetConfig+0xb8>
 8006816:	a201      	add	r2, pc, #4	; (adr r2, 800681c <UART_SetConfig+0x90>)
 8006818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681c:	0800682d 	.word	0x0800682d
 8006820:	08006839 	.word	0x08006839
 8006824:	08006833 	.word	0x08006833
 8006828:	0800683f 	.word	0x0800683f
 800682c:	2301      	movs	r3, #1
 800682e:	77fb      	strb	r3, [r7, #31]
 8006830:	e14f      	b.n	8006ad2 <UART_SetConfig+0x346>
 8006832:	2302      	movs	r3, #2
 8006834:	77fb      	strb	r3, [r7, #31]
 8006836:	e14c      	b.n	8006ad2 <UART_SetConfig+0x346>
 8006838:	2304      	movs	r3, #4
 800683a:	77fb      	strb	r3, [r7, #31]
 800683c:	e149      	b.n	8006ad2 <UART_SetConfig+0x346>
 800683e:	2308      	movs	r3, #8
 8006840:	77fb      	strb	r3, [r7, #31]
 8006842:	e146      	b.n	8006ad2 <UART_SetConfig+0x346>
 8006844:	2310      	movs	r3, #16
 8006846:	77fb      	strb	r3, [r7, #31]
 8006848:	e143      	b.n	8006ad2 <UART_SetConfig+0x346>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a84      	ldr	r2, [pc, #528]	; (8006a60 <UART_SetConfig+0x2d4>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d132      	bne.n	80068ba <UART_SetConfig+0x12e>
 8006854:	4b81      	ldr	r3, [pc, #516]	; (8006a5c <UART_SetConfig+0x2d0>)
 8006856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800685a:	f003 030c 	and.w	r3, r3, #12
 800685e:	2b0c      	cmp	r3, #12
 8006860:	d828      	bhi.n	80068b4 <UART_SetConfig+0x128>
 8006862:	a201      	add	r2, pc, #4	; (adr r2, 8006868 <UART_SetConfig+0xdc>)
 8006864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006868:	0800689d 	.word	0x0800689d
 800686c:	080068b5 	.word	0x080068b5
 8006870:	080068b5 	.word	0x080068b5
 8006874:	080068b5 	.word	0x080068b5
 8006878:	080068a9 	.word	0x080068a9
 800687c:	080068b5 	.word	0x080068b5
 8006880:	080068b5 	.word	0x080068b5
 8006884:	080068b5 	.word	0x080068b5
 8006888:	080068a3 	.word	0x080068a3
 800688c:	080068b5 	.word	0x080068b5
 8006890:	080068b5 	.word	0x080068b5
 8006894:	080068b5 	.word	0x080068b5
 8006898:	080068af 	.word	0x080068af
 800689c:	2300      	movs	r3, #0
 800689e:	77fb      	strb	r3, [r7, #31]
 80068a0:	e117      	b.n	8006ad2 <UART_SetConfig+0x346>
 80068a2:	2302      	movs	r3, #2
 80068a4:	77fb      	strb	r3, [r7, #31]
 80068a6:	e114      	b.n	8006ad2 <UART_SetConfig+0x346>
 80068a8:	2304      	movs	r3, #4
 80068aa:	77fb      	strb	r3, [r7, #31]
 80068ac:	e111      	b.n	8006ad2 <UART_SetConfig+0x346>
 80068ae:	2308      	movs	r3, #8
 80068b0:	77fb      	strb	r3, [r7, #31]
 80068b2:	e10e      	b.n	8006ad2 <UART_SetConfig+0x346>
 80068b4:	2310      	movs	r3, #16
 80068b6:	77fb      	strb	r3, [r7, #31]
 80068b8:	e10b      	b.n	8006ad2 <UART_SetConfig+0x346>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a69      	ldr	r2, [pc, #420]	; (8006a64 <UART_SetConfig+0x2d8>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d120      	bne.n	8006906 <UART_SetConfig+0x17a>
 80068c4:	4b65      	ldr	r3, [pc, #404]	; (8006a5c <UART_SetConfig+0x2d0>)
 80068c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80068ce:	2b30      	cmp	r3, #48	; 0x30
 80068d0:	d013      	beq.n	80068fa <UART_SetConfig+0x16e>
 80068d2:	2b30      	cmp	r3, #48	; 0x30
 80068d4:	d814      	bhi.n	8006900 <UART_SetConfig+0x174>
 80068d6:	2b20      	cmp	r3, #32
 80068d8:	d009      	beq.n	80068ee <UART_SetConfig+0x162>
 80068da:	2b20      	cmp	r3, #32
 80068dc:	d810      	bhi.n	8006900 <UART_SetConfig+0x174>
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d002      	beq.n	80068e8 <UART_SetConfig+0x15c>
 80068e2:	2b10      	cmp	r3, #16
 80068e4:	d006      	beq.n	80068f4 <UART_SetConfig+0x168>
 80068e6:	e00b      	b.n	8006900 <UART_SetConfig+0x174>
 80068e8:	2300      	movs	r3, #0
 80068ea:	77fb      	strb	r3, [r7, #31]
 80068ec:	e0f1      	b.n	8006ad2 <UART_SetConfig+0x346>
 80068ee:	2302      	movs	r3, #2
 80068f0:	77fb      	strb	r3, [r7, #31]
 80068f2:	e0ee      	b.n	8006ad2 <UART_SetConfig+0x346>
 80068f4:	2304      	movs	r3, #4
 80068f6:	77fb      	strb	r3, [r7, #31]
 80068f8:	e0eb      	b.n	8006ad2 <UART_SetConfig+0x346>
 80068fa:	2308      	movs	r3, #8
 80068fc:	77fb      	strb	r3, [r7, #31]
 80068fe:	e0e8      	b.n	8006ad2 <UART_SetConfig+0x346>
 8006900:	2310      	movs	r3, #16
 8006902:	77fb      	strb	r3, [r7, #31]
 8006904:	e0e5      	b.n	8006ad2 <UART_SetConfig+0x346>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a57      	ldr	r2, [pc, #348]	; (8006a68 <UART_SetConfig+0x2dc>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d120      	bne.n	8006952 <UART_SetConfig+0x1c6>
 8006910:	4b52      	ldr	r3, [pc, #328]	; (8006a5c <UART_SetConfig+0x2d0>)
 8006912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006916:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800691a:	2bc0      	cmp	r3, #192	; 0xc0
 800691c:	d013      	beq.n	8006946 <UART_SetConfig+0x1ba>
 800691e:	2bc0      	cmp	r3, #192	; 0xc0
 8006920:	d814      	bhi.n	800694c <UART_SetConfig+0x1c0>
 8006922:	2b80      	cmp	r3, #128	; 0x80
 8006924:	d009      	beq.n	800693a <UART_SetConfig+0x1ae>
 8006926:	2b80      	cmp	r3, #128	; 0x80
 8006928:	d810      	bhi.n	800694c <UART_SetConfig+0x1c0>
 800692a:	2b00      	cmp	r3, #0
 800692c:	d002      	beq.n	8006934 <UART_SetConfig+0x1a8>
 800692e:	2b40      	cmp	r3, #64	; 0x40
 8006930:	d006      	beq.n	8006940 <UART_SetConfig+0x1b4>
 8006932:	e00b      	b.n	800694c <UART_SetConfig+0x1c0>
 8006934:	2300      	movs	r3, #0
 8006936:	77fb      	strb	r3, [r7, #31]
 8006938:	e0cb      	b.n	8006ad2 <UART_SetConfig+0x346>
 800693a:	2302      	movs	r3, #2
 800693c:	77fb      	strb	r3, [r7, #31]
 800693e:	e0c8      	b.n	8006ad2 <UART_SetConfig+0x346>
 8006940:	2304      	movs	r3, #4
 8006942:	77fb      	strb	r3, [r7, #31]
 8006944:	e0c5      	b.n	8006ad2 <UART_SetConfig+0x346>
 8006946:	2308      	movs	r3, #8
 8006948:	77fb      	strb	r3, [r7, #31]
 800694a:	e0c2      	b.n	8006ad2 <UART_SetConfig+0x346>
 800694c:	2310      	movs	r3, #16
 800694e:	77fb      	strb	r3, [r7, #31]
 8006950:	e0bf      	b.n	8006ad2 <UART_SetConfig+0x346>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a45      	ldr	r2, [pc, #276]	; (8006a6c <UART_SetConfig+0x2e0>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d125      	bne.n	80069a8 <UART_SetConfig+0x21c>
 800695c:	4b3f      	ldr	r3, [pc, #252]	; (8006a5c <UART_SetConfig+0x2d0>)
 800695e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006966:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800696a:	d017      	beq.n	800699c <UART_SetConfig+0x210>
 800696c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006970:	d817      	bhi.n	80069a2 <UART_SetConfig+0x216>
 8006972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006976:	d00b      	beq.n	8006990 <UART_SetConfig+0x204>
 8006978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800697c:	d811      	bhi.n	80069a2 <UART_SetConfig+0x216>
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <UART_SetConfig+0x1fe>
 8006982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006986:	d006      	beq.n	8006996 <UART_SetConfig+0x20a>
 8006988:	e00b      	b.n	80069a2 <UART_SetConfig+0x216>
 800698a:	2300      	movs	r3, #0
 800698c:	77fb      	strb	r3, [r7, #31]
 800698e:	e0a0      	b.n	8006ad2 <UART_SetConfig+0x346>
 8006990:	2302      	movs	r3, #2
 8006992:	77fb      	strb	r3, [r7, #31]
 8006994:	e09d      	b.n	8006ad2 <UART_SetConfig+0x346>
 8006996:	2304      	movs	r3, #4
 8006998:	77fb      	strb	r3, [r7, #31]
 800699a:	e09a      	b.n	8006ad2 <UART_SetConfig+0x346>
 800699c:	2308      	movs	r3, #8
 800699e:	77fb      	strb	r3, [r7, #31]
 80069a0:	e097      	b.n	8006ad2 <UART_SetConfig+0x346>
 80069a2:	2310      	movs	r3, #16
 80069a4:	77fb      	strb	r3, [r7, #31]
 80069a6:	e094      	b.n	8006ad2 <UART_SetConfig+0x346>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a30      	ldr	r2, [pc, #192]	; (8006a70 <UART_SetConfig+0x2e4>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d125      	bne.n	80069fe <UART_SetConfig+0x272>
 80069b2:	4b2a      	ldr	r3, [pc, #168]	; (8006a5c <UART_SetConfig+0x2d0>)
 80069b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80069bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069c0:	d017      	beq.n	80069f2 <UART_SetConfig+0x266>
 80069c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069c6:	d817      	bhi.n	80069f8 <UART_SetConfig+0x26c>
 80069c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069cc:	d00b      	beq.n	80069e6 <UART_SetConfig+0x25a>
 80069ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069d2:	d811      	bhi.n	80069f8 <UART_SetConfig+0x26c>
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d003      	beq.n	80069e0 <UART_SetConfig+0x254>
 80069d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069dc:	d006      	beq.n	80069ec <UART_SetConfig+0x260>
 80069de:	e00b      	b.n	80069f8 <UART_SetConfig+0x26c>
 80069e0:	2301      	movs	r3, #1
 80069e2:	77fb      	strb	r3, [r7, #31]
 80069e4:	e075      	b.n	8006ad2 <UART_SetConfig+0x346>
 80069e6:	2302      	movs	r3, #2
 80069e8:	77fb      	strb	r3, [r7, #31]
 80069ea:	e072      	b.n	8006ad2 <UART_SetConfig+0x346>
 80069ec:	2304      	movs	r3, #4
 80069ee:	77fb      	strb	r3, [r7, #31]
 80069f0:	e06f      	b.n	8006ad2 <UART_SetConfig+0x346>
 80069f2:	2308      	movs	r3, #8
 80069f4:	77fb      	strb	r3, [r7, #31]
 80069f6:	e06c      	b.n	8006ad2 <UART_SetConfig+0x346>
 80069f8:	2310      	movs	r3, #16
 80069fa:	77fb      	strb	r3, [r7, #31]
 80069fc:	e069      	b.n	8006ad2 <UART_SetConfig+0x346>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a1c      	ldr	r2, [pc, #112]	; (8006a74 <UART_SetConfig+0x2e8>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d137      	bne.n	8006a78 <UART_SetConfig+0x2ec>
 8006a08:	4b14      	ldr	r3, [pc, #80]	; (8006a5c <UART_SetConfig+0x2d0>)
 8006a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a0e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006a12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a16:	d017      	beq.n	8006a48 <UART_SetConfig+0x2bc>
 8006a18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a1c:	d817      	bhi.n	8006a4e <UART_SetConfig+0x2c2>
 8006a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a22:	d00b      	beq.n	8006a3c <UART_SetConfig+0x2b0>
 8006a24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a28:	d811      	bhi.n	8006a4e <UART_SetConfig+0x2c2>
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d003      	beq.n	8006a36 <UART_SetConfig+0x2aa>
 8006a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a32:	d006      	beq.n	8006a42 <UART_SetConfig+0x2b6>
 8006a34:	e00b      	b.n	8006a4e <UART_SetConfig+0x2c2>
 8006a36:	2300      	movs	r3, #0
 8006a38:	77fb      	strb	r3, [r7, #31]
 8006a3a:	e04a      	b.n	8006ad2 <UART_SetConfig+0x346>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	77fb      	strb	r3, [r7, #31]
 8006a40:	e047      	b.n	8006ad2 <UART_SetConfig+0x346>
 8006a42:	2304      	movs	r3, #4
 8006a44:	77fb      	strb	r3, [r7, #31]
 8006a46:	e044      	b.n	8006ad2 <UART_SetConfig+0x346>
 8006a48:	2308      	movs	r3, #8
 8006a4a:	77fb      	strb	r3, [r7, #31]
 8006a4c:	e041      	b.n	8006ad2 <UART_SetConfig+0x346>
 8006a4e:	2310      	movs	r3, #16
 8006a50:	77fb      	strb	r3, [r7, #31]
 8006a52:	e03e      	b.n	8006ad2 <UART_SetConfig+0x346>
 8006a54:	efff69f3 	.word	0xefff69f3
 8006a58:	40011000 	.word	0x40011000
 8006a5c:	40023800 	.word	0x40023800
 8006a60:	40004400 	.word	0x40004400
 8006a64:	40004800 	.word	0x40004800
 8006a68:	40004c00 	.word	0x40004c00
 8006a6c:	40005000 	.word	0x40005000
 8006a70:	40011400 	.word	0x40011400
 8006a74:	40007800 	.word	0x40007800
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a71      	ldr	r2, [pc, #452]	; (8006c44 <UART_SetConfig+0x4b8>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d125      	bne.n	8006ace <UART_SetConfig+0x342>
 8006a82:	4b71      	ldr	r3, [pc, #452]	; (8006c48 <UART_SetConfig+0x4bc>)
 8006a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006a8c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a90:	d017      	beq.n	8006ac2 <UART_SetConfig+0x336>
 8006a92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a96:	d817      	bhi.n	8006ac8 <UART_SetConfig+0x33c>
 8006a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a9c:	d00b      	beq.n	8006ab6 <UART_SetConfig+0x32a>
 8006a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aa2:	d811      	bhi.n	8006ac8 <UART_SetConfig+0x33c>
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d003      	beq.n	8006ab0 <UART_SetConfig+0x324>
 8006aa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006aac:	d006      	beq.n	8006abc <UART_SetConfig+0x330>
 8006aae:	e00b      	b.n	8006ac8 <UART_SetConfig+0x33c>
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	77fb      	strb	r3, [r7, #31]
 8006ab4:	e00d      	b.n	8006ad2 <UART_SetConfig+0x346>
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	77fb      	strb	r3, [r7, #31]
 8006aba:	e00a      	b.n	8006ad2 <UART_SetConfig+0x346>
 8006abc:	2304      	movs	r3, #4
 8006abe:	77fb      	strb	r3, [r7, #31]
 8006ac0:	e007      	b.n	8006ad2 <UART_SetConfig+0x346>
 8006ac2:	2308      	movs	r3, #8
 8006ac4:	77fb      	strb	r3, [r7, #31]
 8006ac6:	e004      	b.n	8006ad2 <UART_SetConfig+0x346>
 8006ac8:	2310      	movs	r3, #16
 8006aca:	77fb      	strb	r3, [r7, #31]
 8006acc:	e001      	b.n	8006ad2 <UART_SetConfig+0x346>
 8006ace:	2310      	movs	r3, #16
 8006ad0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ada:	d15b      	bne.n	8006b94 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006adc:	7ffb      	ldrb	r3, [r7, #31]
 8006ade:	2b08      	cmp	r3, #8
 8006ae0:	d827      	bhi.n	8006b32 <UART_SetConfig+0x3a6>
 8006ae2:	a201      	add	r2, pc, #4	; (adr r2, 8006ae8 <UART_SetConfig+0x35c>)
 8006ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae8:	08006b0d 	.word	0x08006b0d
 8006aec:	08006b15 	.word	0x08006b15
 8006af0:	08006b1d 	.word	0x08006b1d
 8006af4:	08006b33 	.word	0x08006b33
 8006af8:	08006b23 	.word	0x08006b23
 8006afc:	08006b33 	.word	0x08006b33
 8006b00:	08006b33 	.word	0x08006b33
 8006b04:	08006b33 	.word	0x08006b33
 8006b08:	08006b2b 	.word	0x08006b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b0c:	f7fd fc20 	bl	8004350 <HAL_RCC_GetPCLK1Freq>
 8006b10:	61b8      	str	r0, [r7, #24]
        break;
 8006b12:	e013      	b.n	8006b3c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b14:	f7fd fc30 	bl	8004378 <HAL_RCC_GetPCLK2Freq>
 8006b18:	61b8      	str	r0, [r7, #24]
        break;
 8006b1a:	e00f      	b.n	8006b3c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b1c:	4b4b      	ldr	r3, [pc, #300]	; (8006c4c <UART_SetConfig+0x4c0>)
 8006b1e:	61bb      	str	r3, [r7, #24]
        break;
 8006b20:	e00c      	b.n	8006b3c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b22:	f7fd fb53 	bl	80041cc <HAL_RCC_GetSysClockFreq>
 8006b26:	61b8      	str	r0, [r7, #24]
        break;
 8006b28:	e008      	b.n	8006b3c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b2e:	61bb      	str	r3, [r7, #24]
        break;
 8006b30:	e004      	b.n	8006b3c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006b32:	2300      	movs	r3, #0
 8006b34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	77bb      	strb	r3, [r7, #30]
        break;
 8006b3a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d074      	beq.n	8006c2c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	005a      	lsls	r2, r3, #1
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	085b      	lsrs	r3, r3, #1
 8006b4c:	441a      	add	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	2b0f      	cmp	r3, #15
 8006b5e:	d916      	bls.n	8006b8e <UART_SetConfig+0x402>
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b66:	d212      	bcs.n	8006b8e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	f023 030f 	bic.w	r3, r3, #15
 8006b70:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	085b      	lsrs	r3, r3, #1
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	f003 0307 	and.w	r3, r3, #7
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	89fb      	ldrh	r3, [r7, #14]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	89fa      	ldrh	r2, [r7, #14]
 8006b8a:	60da      	str	r2, [r3, #12]
 8006b8c:	e04e      	b.n	8006c2c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	77bb      	strb	r3, [r7, #30]
 8006b92:	e04b      	b.n	8006c2c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b94:	7ffb      	ldrb	r3, [r7, #31]
 8006b96:	2b08      	cmp	r3, #8
 8006b98:	d827      	bhi.n	8006bea <UART_SetConfig+0x45e>
 8006b9a:	a201      	add	r2, pc, #4	; (adr r2, 8006ba0 <UART_SetConfig+0x414>)
 8006b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba0:	08006bc5 	.word	0x08006bc5
 8006ba4:	08006bcd 	.word	0x08006bcd
 8006ba8:	08006bd5 	.word	0x08006bd5
 8006bac:	08006beb 	.word	0x08006beb
 8006bb0:	08006bdb 	.word	0x08006bdb
 8006bb4:	08006beb 	.word	0x08006beb
 8006bb8:	08006beb 	.word	0x08006beb
 8006bbc:	08006beb 	.word	0x08006beb
 8006bc0:	08006be3 	.word	0x08006be3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bc4:	f7fd fbc4 	bl	8004350 <HAL_RCC_GetPCLK1Freq>
 8006bc8:	61b8      	str	r0, [r7, #24]
        break;
 8006bca:	e013      	b.n	8006bf4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bcc:	f7fd fbd4 	bl	8004378 <HAL_RCC_GetPCLK2Freq>
 8006bd0:	61b8      	str	r0, [r7, #24]
        break;
 8006bd2:	e00f      	b.n	8006bf4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bd4:	4b1d      	ldr	r3, [pc, #116]	; (8006c4c <UART_SetConfig+0x4c0>)
 8006bd6:	61bb      	str	r3, [r7, #24]
        break;
 8006bd8:	e00c      	b.n	8006bf4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bda:	f7fd faf7 	bl	80041cc <HAL_RCC_GetSysClockFreq>
 8006bde:	61b8      	str	r0, [r7, #24]
        break;
 8006be0:	e008      	b.n	8006bf4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006be6:	61bb      	str	r3, [r7, #24]
        break;
 8006be8:	e004      	b.n	8006bf4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006bea:	2300      	movs	r3, #0
 8006bec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	77bb      	strb	r3, [r7, #30]
        break;
 8006bf2:	bf00      	nop
    }

    if (pclk != 0U)
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d018      	beq.n	8006c2c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	085a      	lsrs	r2, r3, #1
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	441a      	add	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	2b0f      	cmp	r3, #15
 8006c14:	d908      	bls.n	8006c28 <UART_SetConfig+0x49c>
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c1c:	d204      	bcs.n	8006c28 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	60da      	str	r2, [r3, #12]
 8006c26:	e001      	b.n	8006c2c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006c38:	7fbb      	ldrb	r3, [r7, #30]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3720      	adds	r7, #32
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	40007c00 	.word	0x40007c00
 8006c48:	40023800 	.word	0x40023800
 8006c4c:	00f42400 	.word	0x00f42400

08006c50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5c:	f003 0301 	and.w	r3, r3, #1
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00a      	beq.n	8006c7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00a      	beq.n	8006c9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	f003 0304 	and.w	r3, r3, #4
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00a      	beq.n	8006cbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc2:	f003 0308 	and.w	r3, r3, #8
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00a      	beq.n	8006ce0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce4:	f003 0310 	and.w	r3, r3, #16
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00a      	beq.n	8006d02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d06:	f003 0320 	and.w	r3, r3, #32
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00a      	beq.n	8006d24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d01a      	beq.n	8006d66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d4e:	d10a      	bne.n	8006d66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00a      	beq.n	8006d88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	430a      	orrs	r2, r1
 8006d86:	605a      	str	r2, [r3, #4]
  }
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af02      	add	r7, sp, #8
 8006d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006da4:	f7fb fd0a 	bl	80027bc <HAL_GetTick>
 8006da8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0308 	and.w	r3, r3, #8
 8006db4:	2b08      	cmp	r3, #8
 8006db6:	d10e      	bne.n	8006dd6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006db8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dbc:	9300      	str	r3, [sp, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f82d 	bl	8006e26 <UART_WaitOnFlagUntilTimeout>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e023      	b.n	8006e1e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0304 	and.w	r3, r3, #4
 8006de0:	2b04      	cmp	r3, #4
 8006de2:	d10e      	bne.n	8006e02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006de4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f817 	bl	8006e26 <UART_WaitOnFlagUntilTimeout>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d001      	beq.n	8006e02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e00d      	b.n	8006e1e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2220      	movs	r2, #32
 8006e06:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2220      	movs	r2, #32
 8006e0c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b084      	sub	sp, #16
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	60f8      	str	r0, [r7, #12]
 8006e2e:	60b9      	str	r1, [r7, #8]
 8006e30:	603b      	str	r3, [r7, #0]
 8006e32:	4613      	mov	r3, r2
 8006e34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e36:	e05e      	b.n	8006ef6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3e:	d05a      	beq.n	8006ef6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e40:	f7fb fcbc 	bl	80027bc <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d302      	bcc.n	8006e56 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d11b      	bne.n	8006e8e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e64:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	689a      	ldr	r2, [r3, #8]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f022 0201 	bic.w	r2, r2, #1
 8006e74:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2220      	movs	r2, #32
 8006e7a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e043      	b.n	8006f16 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0304 	and.w	r3, r3, #4
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d02c      	beq.n	8006ef6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	69db      	ldr	r3, [r3, #28]
 8006ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ea6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eaa:	d124      	bne.n	8006ef6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006eb4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ec4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689a      	ldr	r2, [r3, #8]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f022 0201 	bic.w	r2, r2, #1
 8006ed4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2220      	movs	r2, #32
 8006ee6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e00f      	b.n	8006f16 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	69da      	ldr	r2, [r3, #28]
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	4013      	ands	r3, r2
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	bf0c      	ite	eq
 8006f06:	2301      	moveq	r3, #1
 8006f08:	2300      	movne	r3, #0
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	79fb      	ldrb	r3, [r7, #7]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d091      	beq.n	8006e38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
	...

08006f20 <__libc_init_array>:
 8006f20:	b570      	push	{r4, r5, r6, lr}
 8006f22:	4d0d      	ldr	r5, [pc, #52]	; (8006f58 <__libc_init_array+0x38>)
 8006f24:	4c0d      	ldr	r4, [pc, #52]	; (8006f5c <__libc_init_array+0x3c>)
 8006f26:	1b64      	subs	r4, r4, r5
 8006f28:	10a4      	asrs	r4, r4, #2
 8006f2a:	2600      	movs	r6, #0
 8006f2c:	42a6      	cmp	r6, r4
 8006f2e:	d109      	bne.n	8006f44 <__libc_init_array+0x24>
 8006f30:	4d0b      	ldr	r5, [pc, #44]	; (8006f60 <__libc_init_array+0x40>)
 8006f32:	4c0c      	ldr	r4, [pc, #48]	; (8006f64 <__libc_init_array+0x44>)
 8006f34:	f000 f8aa 	bl	800708c <_init>
 8006f38:	1b64      	subs	r4, r4, r5
 8006f3a:	10a4      	asrs	r4, r4, #2
 8006f3c:	2600      	movs	r6, #0
 8006f3e:	42a6      	cmp	r6, r4
 8006f40:	d105      	bne.n	8006f4e <__libc_init_array+0x2e>
 8006f42:	bd70      	pop	{r4, r5, r6, pc}
 8006f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f48:	4798      	blx	r3
 8006f4a:	3601      	adds	r6, #1
 8006f4c:	e7ee      	b.n	8006f2c <__libc_init_array+0xc>
 8006f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f52:	4798      	blx	r3
 8006f54:	3601      	adds	r6, #1
 8006f56:	e7f2      	b.n	8006f3e <__libc_init_array+0x1e>
 8006f58:	0800750c 	.word	0x0800750c
 8006f5c:	0800750c 	.word	0x0800750c
 8006f60:	0800750c 	.word	0x0800750c
 8006f64:	08007510 	.word	0x08007510

08006f68 <memset>:
 8006f68:	4402      	add	r2, r0
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d100      	bne.n	8006f72 <memset+0xa>
 8006f70:	4770      	bx	lr
 8006f72:	f803 1b01 	strb.w	r1, [r3], #1
 8006f76:	e7f9      	b.n	8006f6c <memset+0x4>

08006f78 <__utoa>:
 8006f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f7a:	4c1f      	ldr	r4, [pc, #124]	; (8006ff8 <__utoa+0x80>)
 8006f7c:	b08b      	sub	sp, #44	; 0x2c
 8006f7e:	4605      	mov	r5, r0
 8006f80:	460b      	mov	r3, r1
 8006f82:	466e      	mov	r6, sp
 8006f84:	f104 0c20 	add.w	ip, r4, #32
 8006f88:	6820      	ldr	r0, [r4, #0]
 8006f8a:	6861      	ldr	r1, [r4, #4]
 8006f8c:	4637      	mov	r7, r6
 8006f8e:	c703      	stmia	r7!, {r0, r1}
 8006f90:	3408      	adds	r4, #8
 8006f92:	4564      	cmp	r4, ip
 8006f94:	463e      	mov	r6, r7
 8006f96:	d1f7      	bne.n	8006f88 <__utoa+0x10>
 8006f98:	7921      	ldrb	r1, [r4, #4]
 8006f9a:	7139      	strb	r1, [r7, #4]
 8006f9c:	1e91      	subs	r1, r2, #2
 8006f9e:	6820      	ldr	r0, [r4, #0]
 8006fa0:	6038      	str	r0, [r7, #0]
 8006fa2:	2922      	cmp	r1, #34	; 0x22
 8006fa4:	f04f 0100 	mov.w	r1, #0
 8006fa8:	d904      	bls.n	8006fb4 <__utoa+0x3c>
 8006faa:	7019      	strb	r1, [r3, #0]
 8006fac:	460b      	mov	r3, r1
 8006fae:	4618      	mov	r0, r3
 8006fb0:	b00b      	add	sp, #44	; 0x2c
 8006fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fb4:	1e58      	subs	r0, r3, #1
 8006fb6:	4684      	mov	ip, r0
 8006fb8:	fbb5 f7f2 	udiv	r7, r5, r2
 8006fbc:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8006fc0:	fb02 5617 	mls	r6, r2, r7, r5
 8006fc4:	4476      	add	r6, lr
 8006fc6:	460c      	mov	r4, r1
 8006fc8:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006fcc:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006fd0:	462e      	mov	r6, r5
 8006fd2:	42b2      	cmp	r2, r6
 8006fd4:	f101 0101 	add.w	r1, r1, #1
 8006fd8:	463d      	mov	r5, r7
 8006fda:	d9ed      	bls.n	8006fb8 <__utoa+0x40>
 8006fdc:	2200      	movs	r2, #0
 8006fde:	545a      	strb	r2, [r3, r1]
 8006fe0:	1919      	adds	r1, r3, r4
 8006fe2:	1aa5      	subs	r5, r4, r2
 8006fe4:	42aa      	cmp	r2, r5
 8006fe6:	dae2      	bge.n	8006fae <__utoa+0x36>
 8006fe8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006fec:	780e      	ldrb	r6, [r1, #0]
 8006fee:	7006      	strb	r6, [r0, #0]
 8006ff0:	3201      	adds	r2, #1
 8006ff2:	f801 5901 	strb.w	r5, [r1], #-1
 8006ff6:	e7f4      	b.n	8006fe2 <__utoa+0x6a>
 8006ff8:	080074dc 	.word	0x080074dc

08006ffc <utoa>:
 8006ffc:	f7ff bfbc 	b.w	8006f78 <__utoa>

08007000 <round>:
 8007000:	ee10 1a90 	vmov	r1, s1
 8007004:	f3c1 500a 	ubfx	r0, r1, #20, #11
 8007008:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 800700c:	2a13      	cmp	r2, #19
 800700e:	b510      	push	{r4, lr}
 8007010:	ee10 3a10 	vmov	r3, s0
 8007014:	dc19      	bgt.n	800704a <round+0x4a>
 8007016:	2a00      	cmp	r2, #0
 8007018:	da09      	bge.n	800702e <round+0x2e>
 800701a:	3201      	adds	r2, #1
 800701c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007020:	d103      	bne.n	800702a <round+0x2a>
 8007022:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8007026:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800702a:	2000      	movs	r0, #0
 800702c:	e027      	b.n	800707e <round+0x7e>
 800702e:	4816      	ldr	r0, [pc, #88]	; (8007088 <round+0x88>)
 8007030:	4110      	asrs	r0, r2
 8007032:	ea01 0400 	and.w	r4, r1, r0
 8007036:	4323      	orrs	r3, r4
 8007038:	d00e      	beq.n	8007058 <round+0x58>
 800703a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800703e:	fa43 f202 	asr.w	r2, r3, r2
 8007042:	4411      	add	r1, r2
 8007044:	ea21 0100 	bic.w	r1, r1, r0
 8007048:	e7ef      	b.n	800702a <round+0x2a>
 800704a:	2a33      	cmp	r2, #51	; 0x33
 800704c:	dd05      	ble.n	800705a <round+0x5a>
 800704e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007052:	d101      	bne.n	8007058 <round+0x58>
 8007054:	ee30 0b00 	vadd.f64	d0, d0, d0
 8007058:	bd10      	pop	{r4, pc}
 800705a:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 800705e:	f04f 30ff 	mov.w	r0, #4294967295
 8007062:	fa20 f404 	lsr.w	r4, r0, r4
 8007066:	4223      	tst	r3, r4
 8007068:	d0f6      	beq.n	8007058 <round+0x58>
 800706a:	2001      	movs	r0, #1
 800706c:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 8007070:	fa00 f202 	lsl.w	r2, r0, r2
 8007074:	189b      	adds	r3, r3, r2
 8007076:	bf28      	it	cs
 8007078:	1809      	addcs	r1, r1, r0
 800707a:	ea23 0004 	bic.w	r0, r3, r4
 800707e:	460b      	mov	r3, r1
 8007080:	4602      	mov	r2, r0
 8007082:	ec43 2b10 	vmov	d0, r2, r3
 8007086:	e7e7      	b.n	8007058 <round+0x58>
 8007088:	000fffff 	.word	0x000fffff

0800708c <_init>:
 800708c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708e:	bf00      	nop
 8007090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007092:	bc08      	pop	{r3}
 8007094:	469e      	mov	lr, r3
 8007096:	4770      	bx	lr

08007098 <_fini>:
 8007098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709a:	bf00      	nop
 800709c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800709e:	bc08      	pop	{r3}
 80070a0:	469e      	mov	lr, r3
 80070a2:	4770      	bx	lr
