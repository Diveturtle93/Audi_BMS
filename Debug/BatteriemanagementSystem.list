
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005178  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005370  08005370  00015370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005388  08005388  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005388  08005388  00015388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005390  08005390  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005390  08005390  00015390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005394  08005394  00015394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  2000000c  080053a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  080053a4  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015349  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e72  00000000  00000000  00035383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  000381f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  000393e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003699  00000000  00000000  0003a480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016958  00000000  00000000  0003db19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106d4f  00000000  00000000  00054471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015b1c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a18  00000000  00000000  0015b214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005358 	.word	0x08005358

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08005358 	.word	0x08005358

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 8000534:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000538:	4850      	ldr	r0, [pc, #320]	; (800067c <readall_inputs+0x14c>)
 800053a:	f001 ff3b 	bl	80023b4 <HAL_GPIO_ReadPin>
 800053e:	4603      	mov	r3, r0
 8000540:	f003 0301 	and.w	r3, r3, #1
 8000544:	b2d9      	uxtb	r1, r3
 8000546:	4a4e      	ldr	r2, [pc, #312]	; (8000680 <readall_inputs+0x150>)
 8000548:	7813      	ldrb	r3, [r2, #0]
 800054a:	f361 0300 	bfi	r3, r1, #0, #1
 800054e:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 8000550:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000554:	484b      	ldr	r0, [pc, #300]	; (8000684 <readall_inputs+0x154>)
 8000556:	f001 ff2d 	bl	80023b4 <HAL_GPIO_ReadPin>
 800055a:	4603      	mov	r3, r0
 800055c:	f003 0301 	and.w	r3, r3, #1
 8000560:	b2d9      	uxtb	r1, r3
 8000562:	4a47      	ldr	r2, [pc, #284]	; (8000680 <readall_inputs+0x150>)
 8000564:	7813      	ldrb	r3, [r2, #0]
 8000566:	f361 0341 	bfi	r3, r1, #1, #1
 800056a:	7013      	strb	r3, [r2, #0]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 800056c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000570:	4845      	ldr	r0, [pc, #276]	; (8000688 <readall_inputs+0x158>)
 8000572:	f001 ff1f 	bl	80023b4 <HAL_GPIO_ReadPin>
 8000576:	4603      	mov	r3, r0
 8000578:	f003 0301 	and.w	r3, r3, #1
 800057c:	b2d9      	uxtb	r1, r3
 800057e:	4a40      	ldr	r2, [pc, #256]	; (8000680 <readall_inputs+0x150>)
 8000580:	7813      	ldrb	r3, [r2, #0]
 8000582:	f361 03c3 	bfi	r3, r1, #3, #1
 8000586:	7013      	strb	r3, [r2, #0]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8000588:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800058c:	483e      	ldr	r0, [pc, #248]	; (8000688 <readall_inputs+0x158>)
 800058e:	f001 ff11 	bl	80023b4 <HAL_GPIO_ReadPin>
 8000592:	4603      	mov	r3, r0
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	b2d9      	uxtb	r1, r3
 800059a:	4a39      	ldr	r2, [pc, #228]	; (8000680 <readall_inputs+0x150>)
 800059c:	7813      	ldrb	r3, [r2, #0]
 800059e:	f361 1304 	bfi	r3, r1, #4, #1
 80005a2:	7013      	strb	r3, [r2, #0]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 80005a4:	2101      	movs	r1, #1
 80005a6:	4838      	ldr	r0, [pc, #224]	; (8000688 <readall_inputs+0x158>)
 80005a8:	f001 ff04 	bl	80023b4 <HAL_GPIO_ReadPin>
 80005ac:	4603      	mov	r3, r0
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	b2d9      	uxtb	r1, r3
 80005b4:	4a32      	ldr	r2, [pc, #200]	; (8000680 <readall_inputs+0x150>)
 80005b6:	7813      	ldrb	r3, [r2, #0]
 80005b8:	f361 1345 	bfi	r3, r1, #5, #1
 80005bc:	7013      	strb	r3, [r2, #0]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 80005be:	2104      	movs	r1, #4
 80005c0:	4831      	ldr	r0, [pc, #196]	; (8000688 <readall_inputs+0x158>)
 80005c2:	f001 fef7 	bl	80023b4 <HAL_GPIO_ReadPin>
 80005c6:	4603      	mov	r3, r0
 80005c8:	f003 0301 	and.w	r3, r3, #1
 80005cc:	b2d9      	uxtb	r1, r3
 80005ce:	4a2c      	ldr	r2, [pc, #176]	; (8000680 <readall_inputs+0x150>)
 80005d0:	7813      	ldrb	r3, [r2, #0]
 80005d2:	f361 1386 	bfi	r3, r1, #6, #1
 80005d6:	7013      	strb	r3, [r2, #0]

	// SDC-Eingaenge einlesen
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);					// IMD OK, Akku
 80005d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005dc:	4827      	ldr	r0, [pc, #156]	; (800067c <readall_inputs+0x14c>)
 80005de:	f001 fee9 	bl	80023b4 <HAL_GPIO_ReadPin>
 80005e2:	4603      	mov	r3, r0
 80005e4:	f003 0301 	and.w	r3, r3, #1
 80005e8:	b2d9      	uxtb	r1, r3
 80005ea:	4a28      	ldr	r2, [pc, #160]	; (800068c <readall_inputs+0x15c>)
 80005ec:	7813      	ldrb	r3, [r2, #0]
 80005ee:	f361 0300 	bfi	r3, r1, #0, #1
 80005f2:	7013      	strb	r3, [r2, #0]
	sdc_in.HVIL = HAL_GPIO_ReadPin(SENSE_SDC_HVIL_GPIO_Port, SENSE_SDC_HVIL_Pin);				// Shutdown-Circuit HVIL, OK
 80005f4:	2108      	movs	r1, #8
 80005f6:	4821      	ldr	r0, [pc, #132]	; (800067c <readall_inputs+0x14c>)
 80005f8:	f001 fedc 	bl	80023b4 <HAL_GPIO_ReadPin>
 80005fc:	4603      	mov	r3, r0
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	b2d9      	uxtb	r1, r3
 8000604:	4a21      	ldr	r2, [pc, #132]	; (800068c <readall_inputs+0x15c>)
 8000606:	7813      	ldrb	r3, [r2, #0]
 8000608:	f361 0341 	bfi	r3, r1, #1, #1
 800060c:	7013      	strb	r3, [r2, #0]
	sdc_in.MotorSDC = HAL_GPIO_ReadPin(SENSE_SDC_MOTOR_GPIO_Port, SENSE_SDC_MOTOR_Pin);			// Shutdown-Circuit Akku, OK
 800060e:	2120      	movs	r1, #32
 8000610:	481a      	ldr	r0, [pc, #104]	; (800067c <readall_inputs+0x14c>)
 8000612:	f001 fecf 	bl	80023b4 <HAL_GPIO_ReadPin>
 8000616:	4603      	mov	r3, r0
 8000618:	f003 0301 	and.w	r3, r3, #1
 800061c:	b2d9      	uxtb	r1, r3
 800061e:	4a1b      	ldr	r2, [pc, #108]	; (800068c <readall_inputs+0x15c>)
 8000620:	7813      	ldrb	r3, [r2, #0]
 8000622:	f361 0382 	bfi	r3, r1, #2, #1
 8000626:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8000628:	2110      	movs	r1, #16
 800062a:	4814      	ldr	r0, [pc, #80]	; (800067c <readall_inputs+0x14c>)
 800062c:	f001 fec2 	bl	80023b4 <HAL_GPIO_ReadPin>
 8000630:	4603      	mov	r3, r0
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	b2d9      	uxtb	r1, r3
 8000638:	4a14      	ldr	r2, [pc, #80]	; (800068c <readall_inputs+0x15c>)
 800063a:	7813      	ldrb	r3, [r2, #0]
 800063c:	f361 03c3 	bfi	r3, r1, #3, #1
 8000640:	7013      	strb	r3, [r2, #0]
	sdc_in.PrechargeIn = HAL_GPIO_ReadPin(PRECHARGE_IN_GPIO_Port, PRECHARGE_IN_Pin);			// Eingang Precharge abgeschlossen
 8000642:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000646:	4812      	ldr	r0, [pc, #72]	; (8000690 <readall_inputs+0x160>)
 8000648:	f001 feb4 	bl	80023b4 <HAL_GPIO_ReadPin>
 800064c:	4603      	mov	r3, r0
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	b2d9      	uxtb	r1, r3
 8000654:	4a0d      	ldr	r2, [pc, #52]	; (800068c <readall_inputs+0x15c>)
 8000656:	7813      	ldrb	r3, [r2, #0]
 8000658:	f361 1304 	bfi	r3, r1, #4, #1
 800065c:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.OVC = HAL_GPIO_ReadPin(OVC_SENSE_GPIO_Port, OVC_SENSE_Pin);						// Eingang Overcurrent erkannt
 800065e:	2104      	movs	r1, #4
 8000660:	480b      	ldr	r0, [pc, #44]	; (8000690 <readall_inputs+0x160>)
 8000662:	f001 fea7 	bl	80023b4 <HAL_GPIO_ReadPin>
 8000666:	4603      	mov	r3, r0
 8000668:	f003 0301 	and.w	r3, r3, #1
 800066c:	b2d9      	uxtb	r1, r3
 800066e:	4a09      	ldr	r2, [pc, #36]	; (8000694 <readall_inputs+0x164>)
 8000670:	7813      	ldrb	r3, [r2, #0]
 8000672:	f361 0300 	bfi	r3, r1, #0, #1
 8000676:	7013      	strb	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40021000 	.word	0x40021000
 8000680:	2000002c 	.word	0x2000002c
 8000684:	40020c00 	.word	0x40020c00
 8000688:	40020000 	.word	0x40020000
 800068c:	20000034 	.word	0x20000034
 8000690:	40021400 	.word	0x40021400
 8000694:	20000030 	.word	0x20000030

08000698 <power_on>:
//----------------------------------------------------------------------

// Selbsterhalten einschalten / DCDC-Wandler einschalten
//----------------------------------------------------------------------
void power_on(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	system_out.Power_On = 1;																		// Power On Variable setzen
 800069c:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <power_on+0x28>)
 800069e:	7813      	ldrb	r3, [r2, #0]
 80006a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a4:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, system_out.Power_On);						// Selbsthaltung DCDC-Wandler Motorsteuergeraet
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <power_on+0x28>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	461a      	mov	r2, r3
 80006b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b6:	4803      	ldr	r0, [pc, #12]	; (80006c4 <power_on+0x2c>)
 80006b8:	f001 fe94 	bl	80023e4 <HAL_GPIO_WritePin>
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	2000003c 	.word	0x2000003c
 80006c4:	40020800 	.word	0x40020800

080006c8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ce:	463b      	mov	r3, r7
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006da:	4b21      	ldr	r3, [pc, #132]	; (8000760 <MX_ADC1_Init+0x98>)
 80006dc:	4a21      	ldr	r2, [pc, #132]	; (8000764 <MX_ADC1_Init+0x9c>)
 80006de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e0:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <MX_ADC1_Init+0x98>)
 80006e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006e8:	4b1d      	ldr	r3, [pc, #116]	; (8000760 <MX_ADC1_Init+0x98>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ee:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <MX_ADC1_Init+0x98>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006f4:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <MX_ADC1_Init+0x98>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006fa:	4b19      	ldr	r3, [pc, #100]	; (8000760 <MX_ADC1_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000702:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_ADC1_Init+0x98>)
 8000704:	2200      	movs	r2, #0
 8000706:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000708:	4b15      	ldr	r3, [pc, #84]	; (8000760 <MX_ADC1_Init+0x98>)
 800070a:	4a17      	ldr	r2, [pc, #92]	; (8000768 <MX_ADC1_Init+0xa0>)
 800070c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_ADC1_Init+0x98>)
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_ADC1_Init+0x98>)
 8000716:	2201      	movs	r2, #1
 8000718:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_ADC1_Init+0x98>)
 800071c:	2200      	movs	r2, #0
 800071e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_ADC1_Init+0x98>)
 8000724:	2201      	movs	r2, #1
 8000726:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000728:	480d      	ldr	r0, [pc, #52]	; (8000760 <MX_ADC1_Init+0x98>)
 800072a:	f001 f82d 	bl	8001788 <HAL_ADC_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000734:	f000 fbc8 	bl	8000ec8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000738:	2304      	movs	r3, #4
 800073a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800073c:	2301      	movs	r3, #1
 800073e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000744:	463b      	mov	r3, r7
 8000746:	4619      	mov	r1, r3
 8000748:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_ADC1_Init+0x98>)
 800074a:	f001 f861 	bl	8001810 <HAL_ADC_ConfigChannel>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000754:	f000 fbb8 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000048 	.word	0x20000048
 8000764:	40012000 	.word	0x40012000
 8000768:	0f000001 	.word	0x0f000001

0800076c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a15      	ldr	r2, [pc, #84]	; (80007e0 <HAL_ADC_MspInit+0x74>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d123      	bne.n	80007d6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <HAL_ADC_MspInit+0x78>)
 8000790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000792:	4a14      	ldr	r2, [pc, #80]	; (80007e4 <HAL_ADC_MspInit+0x78>)
 8000794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000798:	6453      	str	r3, [r2, #68]	; 0x44
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <HAL_ADC_MspInit+0x78>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <HAL_ADC_MspInit+0x78>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a0e      	ldr	r2, [pc, #56]	; (80007e4 <HAL_ADC_MspInit+0x78>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <HAL_ADC_MspInit+0x78>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 80007be:	23f8      	movs	r3, #248	; 0xf8
 80007c0:	617b      	str	r3, [r7, #20]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c2:	2303      	movs	r3, #3
 80007c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4619      	mov	r1, r3
 80007d0:	4805      	ldr	r0, [pc, #20]	; (80007e8 <HAL_ADC_MspInit+0x7c>)
 80007d2:	f001 fc43 	bl	800205c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007d6:	bf00      	nop
 80007d8:	3728      	adds	r7, #40	; 0x28
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40012000 	.word	0x40012000
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40020000 	.word	0x40020000

080007ec <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_CAN1_Init+0x64>)
 80007f2:	4a18      	ldr	r2, [pc, #96]	; (8000854 <MX_CAN1_Init+0x68>)
 80007f4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <MX_CAN1_Init+0x64>)
 80007f8:	2210      	movs	r2, #16
 80007fa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_CAN1_Init+0x64>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <MX_CAN1_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_CAN1_Init+0x64>)
 800080a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800080e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_CAN1_Init+0x64>)
 8000812:	2200      	movs	r2, #0
 8000814:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_CAN1_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_CAN1_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_CAN1_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_CAN1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_CAN1_Init+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_CAN1_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_CAN1_Init+0x64>)
 800083c:	f001 fa2c 	bl	8001c98 <HAL_CAN_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000846:	f000 fb3f 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000b8 	.word	0x200000b8
 8000854:	40006400 	.word	0x40006400

08000858 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 800085c:	4b17      	ldr	r3, [pc, #92]	; (80008bc <MX_CAN3_Init+0x64>)
 800085e:	4a18      	ldr	r2, [pc, #96]	; (80008c0 <MX_CAN3_Init+0x68>)
 8000860:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <MX_CAN3_Init+0x64>)
 8000864:	2206      	movs	r2, #6
 8000866:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_CAN3_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800086e:	4b13      	ldr	r3, [pc, #76]	; (80008bc <MX_CAN3_Init+0x64>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_CAN3_Init+0x64>)
 8000876:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800087a:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_CAN3_Init+0x64>)
 800087e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000882:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8000884:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <MX_CAN3_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_CAN3_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <MX_CAN3_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_CAN3_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <MX_CAN3_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_CAN3_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_CAN3_Init+0x64>)
 80008aa:	f001 f9f5 	bl	8001c98 <HAL_CAN_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 80008b4:	f000 fb08 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000090 	.word	0x20000090
 80008c0:	40003400 	.word	0x40003400

080008c4 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08e      	sub	sp, #56	; 0x38
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a43      	ldr	r2, [pc, #268]	; (80009f0 <HAL_CAN_MspInit+0x12c>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d131      	bne.n	800094a <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80008e6:	4b43      	ldr	r3, [pc, #268]	; (80009f4 <HAL_CAN_MspInit+0x130>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	3301      	adds	r3, #1
 80008ec:	4a41      	ldr	r2, [pc, #260]	; (80009f4 <HAL_CAN_MspInit+0x130>)
 80008ee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80008f0:	4b40      	ldr	r3, [pc, #256]	; (80009f4 <HAL_CAN_MspInit+0x130>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d10b      	bne.n	8000910 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80008f8:	4b3f      	ldr	r3, [pc, #252]	; (80009f8 <HAL_CAN_MspInit+0x134>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fc:	4a3e      	ldr	r2, [pc, #248]	; (80009f8 <HAL_CAN_MspInit+0x134>)
 80008fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000902:	6413      	str	r3, [r2, #64]	; 0x40
 8000904:	4b3c      	ldr	r3, [pc, #240]	; (80009f8 <HAL_CAN_MspInit+0x134>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800090c:	623b      	str	r3, [r7, #32]
 800090e:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000910:	4b39      	ldr	r3, [pc, #228]	; (80009f8 <HAL_CAN_MspInit+0x134>)
 8000912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000914:	4a38      	ldr	r2, [pc, #224]	; (80009f8 <HAL_CAN_MspInit+0x134>)
 8000916:	f043 0308 	orr.w	r3, r3, #8
 800091a:	6313      	str	r3, [r2, #48]	; 0x30
 800091c:	4b36      	ldr	r3, [pc, #216]	; (80009f8 <HAL_CAN_MspInit+0x134>)
 800091e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000920:	f003 0308 	and.w	r3, r3, #8
 8000924:	61fb      	str	r3, [r7, #28]
 8000926:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000928:	2303      	movs	r3, #3
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000938:	2309      	movs	r3, #9
 800093a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800093c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000940:	4619      	mov	r1, r3
 8000942:	482e      	ldr	r0, [pc, #184]	; (80009fc <HAL_CAN_MspInit+0x138>)
 8000944:	f001 fb8a 	bl	800205c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8000948:	e04e      	b.n	80009e8 <HAL_CAN_MspInit+0x124>
  else if(canHandle->Instance==CAN3)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a2c      	ldr	r2, [pc, #176]	; (8000a00 <HAL_CAN_MspInit+0x13c>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d149      	bne.n	80009e8 <HAL_CAN_MspInit+0x124>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8000954:	4b28      	ldr	r3, [pc, #160]	; (80009f8 <HAL_CAN_MspInit+0x134>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	4a27      	ldr	r2, [pc, #156]	; (80009f8 <HAL_CAN_MspInit+0x134>)
 800095a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800095e:	6413      	str	r3, [r2, #64]	; 0x40
 8000960:	4b25      	ldr	r3, [pc, #148]	; (80009f8 <HAL_CAN_MspInit+0x134>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000968:	61bb      	str	r3, [r7, #24]
 800096a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 800096c:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <HAL_CAN_MspInit+0x134>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	4a21      	ldr	r2, [pc, #132]	; (80009f8 <HAL_CAN_MspInit+0x134>)
 8000972:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000976:	6413      	str	r3, [r2, #64]	; 0x40
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <HAL_CAN_MspInit+0x134>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000984:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <HAL_CAN_MspInit+0x130>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	3301      	adds	r3, #1
 800098a:	4a1a      	ldr	r2, [pc, #104]	; (80009f4 <HAL_CAN_MspInit+0x130>)
 800098c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800098e:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <HAL_CAN_MspInit+0x130>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d10b      	bne.n	80009ae <HAL_CAN_MspInit+0xea>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <HAL_CAN_MspInit+0x134>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	4a17      	ldr	r2, [pc, #92]	; (80009f8 <HAL_CAN_MspInit+0x134>)
 800099c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009a0:	6413      	str	r3, [r2, #64]	; 0x40
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <HAL_CAN_MspInit+0x134>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <HAL_CAN_MspInit+0x134>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a11      	ldr	r2, [pc, #68]	; (80009f8 <HAL_CAN_MspInit+0x134>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <HAL_CAN_MspInit+0x134>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 80009c6:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 80009d8:	230b      	movs	r3, #11
 80009da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e0:	4619      	mov	r1, r3
 80009e2:	4808      	ldr	r0, [pc, #32]	; (8000a04 <HAL_CAN_MspInit+0x140>)
 80009e4:	f001 fb3a 	bl	800205c <HAL_GPIO_Init>
}
 80009e8:	bf00      	nop
 80009ea:	3738      	adds	r7, #56	; 0x38
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40006400 	.word	0x40006400
 80009f4:	20000028 	.word	0x20000028
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020c00 	.word	0x40020c00
 8000a00:	40003400 	.word	0x40003400
 8000a04:	40020000 	.word	0x40020000

08000a08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08e      	sub	sp, #56	; 0x38
 8000a0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a1e:	4ba9      	ldr	r3, [pc, #676]	; (8000cc4 <MX_GPIO_Init+0x2bc>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4aa8      	ldr	r2, [pc, #672]	; (8000cc4 <MX_GPIO_Init+0x2bc>)
 8000a24:	f043 0310 	orr.w	r3, r3, #16
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4ba6      	ldr	r3, [pc, #664]	; (8000cc4 <MX_GPIO_Init+0x2bc>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0310 	and.w	r3, r3, #16
 8000a32:	623b      	str	r3, [r7, #32]
 8000a34:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a36:	4ba3      	ldr	r3, [pc, #652]	; (8000cc4 <MX_GPIO_Init+0x2bc>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4aa2      	ldr	r2, [pc, #648]	; (8000cc4 <MX_GPIO_Init+0x2bc>)
 8000a3c:	f043 0304 	orr.w	r3, r3, #4
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4ba0      	ldr	r3, [pc, #640]	; (8000cc4 <MX_GPIO_Init+0x2bc>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0304 	and.w	r3, r3, #4
 8000a4a:	61fb      	str	r3, [r7, #28]
 8000a4c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a4e:	4b9d      	ldr	r3, [pc, #628]	; (8000cc4 <MX_GPIO_Init+0x2bc>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a9c      	ldr	r2, [pc, #624]	; (8000cc4 <MX_GPIO_Init+0x2bc>)
 8000a54:	f043 0320 	orr.w	r3, r3, #32
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b9a      	ldr	r3, [pc, #616]	; (8000cc4 <MX_GPIO_Init+0x2bc>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0320 	and.w	r3, r3, #32
 8000a62:	61bb      	str	r3, [r7, #24]
 8000a64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a66:	4b97      	ldr	r3, [pc, #604]	; (8000cc4 <MX_GPIO_Init+0x2bc>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a96      	ldr	r2, [pc, #600]	; (8000cc4 <MX_GPIO_Init+0x2bc>)
 8000a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b94      	ldr	r3, [pc, #592]	; (8000cc4 <MX_GPIO_Init+0x2bc>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	4b91      	ldr	r3, [pc, #580]	; (8000cc4 <MX_GPIO_Init+0x2bc>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a90      	ldr	r2, [pc, #576]	; (8000cc4 <MX_GPIO_Init+0x2bc>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b8e      	ldr	r3, [pc, #568]	; (8000cc4 <MX_GPIO_Init+0x2bc>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a96:	4b8b      	ldr	r3, [pc, #556]	; (8000cc4 <MX_GPIO_Init+0x2bc>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a8a      	ldr	r2, [pc, #552]	; (8000cc4 <MX_GPIO_Init+0x2bc>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b88      	ldr	r3, [pc, #544]	; (8000cc4 <MX_GPIO_Init+0x2bc>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aae:	4b85      	ldr	r3, [pc, #532]	; (8000cc4 <MX_GPIO_Init+0x2bc>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a84      	ldr	r2, [pc, #528]	; (8000cc4 <MX_GPIO_Init+0x2bc>)
 8000ab4:	f043 0308 	orr.w	r3, r3, #8
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b82      	ldr	r3, [pc, #520]	; (8000cc4 <MX_GPIO_Init+0x2bc>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0308 	and.w	r3, r3, #8
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ac6:	4b7f      	ldr	r3, [pc, #508]	; (8000cc4 <MX_GPIO_Init+0x2bc>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a7e      	ldr	r2, [pc, #504]	; (8000cc4 <MX_GPIO_Init+0x2bc>)
 8000acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b7c      	ldr	r3, [pc, #496]	; (8000cc4 <MX_GPIO_Init+0x2bc>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f248 0187 	movw	r1, #32903	; 0x8087
 8000ae4:	4878      	ldr	r0, [pc, #480]	; (8000cc8 <MX_GPIO_Init+0x2c0>)
 8000ae6:	f001 fc7d 	bl	80023e4 <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin|PRECHARGE_IN_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f24a 0102 	movw	r1, #40962	; 0xa002
 8000af0:	4876      	ldr	r0, [pc, #472]	; (8000ccc <MX_GPIO_Init+0x2c4>)
 8000af2:	f001 fc77 	bl	80023e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	f240 6102 	movw	r1, #1538	; 0x602
 8000afc:	4874      	ldr	r0, [pc, #464]	; (8000cd0 <MX_GPIO_Init+0x2c8>)
 8000afe:	f001 fc71 	bl	80023e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	f244 0184 	movw	r1, #16516	; 0x4084
 8000b08:	4872      	ldr	r0, [pc, #456]	; (8000cd4 <MX_GPIO_Init+0x2cc>)
 8000b0a:	f001 fc6b 	bl	80023e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 8000b14:	4870      	ldr	r0, [pc, #448]	; (8000cd8 <MX_GPIO_Init+0x2d0>)
 8000b16:	f001 fc65 	bl	80023e4 <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2118      	movs	r1, #24
 8000b1e:	486f      	ldr	r0, [pc, #444]	; (8000cdc <MX_GPIO_Init+0x2d4>)
 8000b20:	f001 fc60 	bl	80023e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 8000b24:	f248 0387 	movw	r3, #32903	; 0x8087
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
                          |INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4862      	ldr	r0, [pc, #392]	; (8000cc8 <MX_GPIO_Init+0x2c0>)
 8000b3e:	f001 fa8d 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 8000b42:	f44f 739c 	mov.w	r3, #312	; 0x138
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	485c      	ldr	r0, [pc, #368]	; (8000cc8 <MX_GPIO_Init+0x2c0>)
 8000b58:	f001 fa80 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 8000b5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b62:	4b5f      	ldr	r3, [pc, #380]	; (8000ce0 <MX_GPIO_Init+0x2d8>)
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6e:	4619      	mov	r1, r3
 8000b70:	485c      	ldr	r0, [pc, #368]	; (8000ce4 <MX_GPIO_Init+0x2dc>)
 8000b72:	f001 fa73 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin|PRECHARGE_IN_Pin;
 8000b76:	f24a 0302 	movw	r3, #40962	; 0xa002
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	484f      	ldr	r0, [pc, #316]	; (8000ccc <MX_GPIO_Init+0x2c4>)
 8000b90:	f001 fa64 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin;
 8000b94:	2304      	movs	r3, #4
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OVC_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4849      	ldr	r0, [pc, #292]	; (8000ccc <MX_GPIO_Init+0x2c4>)
 8000ba8:	f001 fa58 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8000bac:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4842      	ldr	r0, [pc, #264]	; (8000ccc <MX_GPIO_Init+0x2c4>)
 8000bc2:	f001 fa4b 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 8000bc6:	f240 6302 	movw	r3, #1538	; 0x602
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	483c      	ldr	r0, [pc, #240]	; (8000cd0 <MX_GPIO_Init+0x2c8>)
 8000be0:	f001 fa3c 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 8000be4:	f244 0384 	movw	r3, #16516	; 0x4084
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	2301      	movs	r3, #1
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4835      	ldr	r0, [pc, #212]	; (8000cd4 <MX_GPIO_Init+0x2cc>)
 8000bfe:	f001 fa2d 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 8000c02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c14:	4619      	mov	r1, r3
 8000c16:	4831      	ldr	r0, [pc, #196]	; (8000cdc <MX_GPIO_Init+0x2d4>)
 8000c18:	f001 fa20 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8000c1c:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c32:	4619      	mov	r1, r3
 8000c34:	4828      	ldr	r0, [pc, #160]	; (8000cd8 <MX_GPIO_Init+0x2d0>)
 8000c36:	f001 fa11 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = SD_SW_Pin|SD_D0_Pin|SD_D1_Pin|SD_D2_Pin
 8000c3a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
                          |SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c40:	2303      	movs	r3, #3
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4825      	ldr	r0, [pc, #148]	; (8000ce4 <MX_GPIO_Init+0x2dc>)
 8000c50:	f001 fa04 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON1_Pin;
 8000c54:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c66:	4619      	mov	r1, r3
 8000c68:	4819      	ldr	r0, [pc, #100]	; (8000cd0 <MX_GPIO_Init+0x2c8>)
 8000c6a:	f001 f9f7 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CMD_Pin;
 8000c6e:	2304      	movs	r3, #4
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c72:	2303      	movs	r3, #3
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4816      	ldr	r0, [pc, #88]	; (8000cdc <MX_GPIO_Init+0x2d4>)
 8000c82:	f001 f9eb 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|DIGITAL2_Pin;
 8000c86:	2318      	movs	r3, #24
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	480f      	ldr	r0, [pc, #60]	; (8000cdc <MX_GPIO_Init+0x2d4>)
 8000c9e:	f001 f9dd 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8000ca2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4807      	ldr	r0, [pc, #28]	; (8000cd4 <MX_GPIO_Init+0x2cc>)
 8000cb8:	f001 f9d0 	bl	800205c <HAL_GPIO_Init>

}
 8000cbc:	bf00      	nop
 8000cbe:	3738      	adds	r7, #56	; 0x38
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	40021400 	.word	0x40021400
 8000cd0:	40020000 	.word	0x40020000
 8000cd4:	40020400 	.word	0x40020400
 8000cd8:	40021800 	.word	0x40021800
 8000cdc:	40020c00 	.word	0x40020c00
 8000ce0:	10110000 	.word	0x10110000
 8000ce4:	40020800 	.word	0x40020800

08000ce8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cec:	f000 fccb 	bl	8001686 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf0:	f000 f858 	bl	8000da4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf4:	f7ff fe88 	bl	8000a08 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000cf8:	f7ff fd78 	bl	80007ec <MX_CAN1_Init>
  MX_SPI4_Init();
 8000cfc:	f000 f92a 	bl	8000f54 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 8000d00:	f000 fc24 	bl	800154c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d04:	f7ff fce0 	bl	80006c8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d08:	f000 fa64 	bl	80011d4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000d0c:	f000 fb06 	bl	800131c <MX_TIM4_Init>
  MX_SPI1_Init();
 8000d10:	f000 f8e2 	bl	8000ed8 <MX_SPI1_Init>
  MX_CAN3_Init();
 8000d14:	f7ff fda0 	bl	8000858 <MX_CAN3_Init>
  /* USER CODE BEGIN 2 */

  // DCDC-Wandler Selbsterhaltung
  power_on();
 8000d18:	f7ff fcbe 	bl	8000698 <power_on>

  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d22:	481c      	ldr	r0, [pc, #112]	; (8000d94 <main+0xac>)
 8000d24:	f001 fb5e 	bl	80023e4 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(5000);
 8000d28:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d2c:	f000 fd08 	bl	8001740 <HAL_Delay>
	  HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 8000d30:	2104      	movs	r1, #4
 8000d32:	4818      	ldr	r0, [pc, #96]	; (8000d94 <main+0xac>)
 8000d34:	f001 fb6f 	bl	8002416 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8000d38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d3c:	4815      	ldr	r0, [pc, #84]	; (8000d94 <main+0xac>)
 8000d3e:	f001 fb6a 	bl	8002416 <HAL_GPIO_TogglePin>
	  readall_inputs();
 8000d42:	f7ff fbf5 	bl	8000530 <readall_inputs>
	  if ((system_in.KL15 == 0) && (HAL_GPIO_ReadPin(GREEN_LED_GPIO_Port, GREEN_LED_Pin)))
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <main+0xb0>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d116      	bne.n	8000d82 <main+0x9a>
 8000d54:	2104      	movs	r1, #4
 8000d56:	480f      	ldr	r0, [pc, #60]	; (8000d94 <main+0xac>)
 8000d58:	f001 fb2c 	bl	80023b4 <HAL_GPIO_ReadPin>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d00f      	beq.n	8000d82 <main+0x9a>
	  {
		  system_out.Power_On = 0;
 8000d62:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <main+0xb4>)
 8000d64:	7813      	ldrb	r3, [r2, #0]
 8000d66:	f36f 13c7 	bfc	r3, #7, #1
 8000d6a:	7013      	strb	r3, [r2, #0]
		  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, system_out.Power_On);
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <main+0xb4>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	461a      	mov	r2, r3
 8000d78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d7c:	4808      	ldr	r0, [pc, #32]	; (8000da0 <main+0xb8>)
 8000d7e:	f001 fb31 	bl	80023e4 <HAL_GPIO_WritePin>
	  }
	  HAL_Delay(5000);
 8000d82:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d86:	f000 fcdb 	bl	8001740 <HAL_Delay>
	  HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8000d8a:	2180      	movs	r1, #128	; 0x80
 8000d8c:	4801      	ldr	r0, [pc, #4]	; (8000d94 <main+0xac>)
 8000d8e:	f001 fb42 	bl	8002416 <HAL_GPIO_TogglePin>
	  HAL_Delay(5000);
 8000d92:	e7c9      	b.n	8000d28 <main+0x40>
 8000d94:	40020400 	.word	0x40020400
 8000d98:	2000002c 	.word	0x2000002c
 8000d9c:	2000003c 	.word	0x2000003c
 8000da0:	40020800 	.word	0x40020800

08000da4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b0b8      	sub	sp, #224	; 0xe0
 8000da8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000daa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000dae:	2234      	movs	r2, #52	; 0x34
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f004 fac8 	bl	8005348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc8:	f107 0308 	add.w	r3, r7, #8
 8000dcc:	2290      	movs	r2, #144	; 0x90
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f004 fab9 	bl	8005348 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd6:	4b3a      	ldr	r3, [pc, #232]	; (8000ec0 <SystemClock_Config+0x11c>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	4a39      	ldr	r2, [pc, #228]	; (8000ec0 <SystemClock_Config+0x11c>)
 8000ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de0:	6413      	str	r3, [r2, #64]	; 0x40
 8000de2:	4b37      	ldr	r3, [pc, #220]	; (8000ec0 <SystemClock_Config+0x11c>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dee:	4b35      	ldr	r3, [pc, #212]	; (8000ec4 <SystemClock_Config+0x120>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a34      	ldr	r2, [pc, #208]	; (8000ec4 <SystemClock_Config+0x120>)
 8000df4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	4b32      	ldr	r3, [pc, #200]	; (8000ec4 <SystemClock_Config+0x120>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e06:	2301      	movs	r3, #1
 8000e08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e14:	2302      	movs	r3, #2
 8000e16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000e22:	2319      	movs	r3, #25
 8000e24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e28:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e30:	2302      	movs	r3, #2
 8000e32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000e36:	2308      	movs	r3, #8
 8000e38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e42:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e46:	4618      	mov	r0, r3
 8000e48:	f001 fb50 	bl	80024ec <HAL_RCC_OscConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000e52:	f000 f839 	bl	8000ec8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e56:	f001 faf9 	bl	800244c <HAL_PWREx_EnableOverDrive>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e60:	f000 f832 	bl	8000ec8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e64:	230f      	movs	r3, #15
 8000e66:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e76:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e86:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e8a:	2107      	movs	r1, #7
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f001 fddb 	bl	8002a48 <HAL_RCC_ClockConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000e98:	f000 f816 	bl	8000ec8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e9c:	2380      	movs	r3, #128	; 0x80
 8000e9e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea4:	f107 0308 	add.w	r3, r7, #8
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f001 ffa3 	bl	8002df4 <HAL_RCCEx_PeriphCLKConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000eb4:	f000 f808 	bl	8000ec8 <Error_Handler>
  }
}
 8000eb8:	bf00      	nop
 8000eba:	37e0      	adds	r7, #224	; 0xe0
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40007000 	.word	0x40007000

08000ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000edc:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <MX_SPI1_Init+0x74>)
 8000ede:	4a1c      	ldr	r2, [pc, #112]	; (8000f50 <MX_SPI1_Init+0x78>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ee2:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <MX_SPI1_Init+0x74>)
 8000ee4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ee8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eea:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <MX_SPI1_Init+0x74>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ef0:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <MX_SPI1_Init+0x74>)
 8000ef2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ef6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ef8:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <MX_SPI1_Init+0x74>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000efe:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <MX_SPI1_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_SPI1_Init+0x74>)
 8000f06:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <MX_SPI1_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_SPI1_Init+0x74>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MX_SPI1_Init+0x74>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <MX_SPI1_Init+0x74>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_SPI1_Init+0x74>)
 8000f26:	2207      	movs	r2, #7
 8000f28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f2a:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <MX_SPI1_Init+0x74>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_SPI1_Init+0x74>)
 8000f32:	2208      	movs	r2, #8
 8000f34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <MX_SPI1_Init+0x74>)
 8000f38:	f002 fb84 	bl	8003644 <HAL_SPI_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f42:	f7ff ffc1 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000144 	.word	0x20000144
 8000f50:	40013000 	.word	0x40013000

08000f54 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000f58:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <MX_SPI4_Init+0x74>)
 8000f5a:	4a1c      	ldr	r2, [pc, #112]	; (8000fcc <MX_SPI4_Init+0x78>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000f5e:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <MX_SPI4_Init+0x74>)
 8000f60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f64:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <MX_SPI4_Init+0x74>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f6c:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <MX_SPI4_Init+0x74>)
 8000f6e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f72:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <MX_SPI4_Init+0x74>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <MX_SPI4_Init+0x74>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_SPI4_Init+0x74>)
 8000f82:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f86:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_SPI4_Init+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_SPI4_Init+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_SPI4_Init+0x74>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <MX_SPI4_Init+0x74>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_SPI4_Init+0x74>)
 8000fa2:	2207      	movs	r2, #7
 8000fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <MX_SPI4_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_SPI4_Init+0x74>)
 8000fae:	2208      	movs	r2, #8
 8000fb0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_SPI4_Init+0x74>)
 8000fb4:	f002 fb46 	bl	8003644 <HAL_SPI_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8000fbe:	f7ff ff83 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200000e0 	.word	0x200000e0
 8000fcc:	40013400 	.word	0x40013400

08000fd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08c      	sub	sp, #48	; 0x30
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a3d      	ldr	r2, [pc, #244]	; (80010e4 <HAL_SPI_MspInit+0x114>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d145      	bne.n	800107e <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ff2:	4b3d      	ldr	r3, [pc, #244]	; (80010e8 <HAL_SPI_MspInit+0x118>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	4a3c      	ldr	r2, [pc, #240]	; (80010e8 <HAL_SPI_MspInit+0x118>)
 8000ff8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffe:	4b3a      	ldr	r3, [pc, #232]	; (80010e8 <HAL_SPI_MspInit+0x118>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001006:	61bb      	str	r3, [r7, #24]
 8001008:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800100a:	4b37      	ldr	r3, [pc, #220]	; (80010e8 <HAL_SPI_MspInit+0x118>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a36      	ldr	r2, [pc, #216]	; (80010e8 <HAL_SPI_MspInit+0x118>)
 8001010:	f043 0308 	orr.w	r3, r3, #8
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b34      	ldr	r3, [pc, #208]	; (80010e8 <HAL_SPI_MspInit+0x118>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0308 	and.w	r3, r3, #8
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001022:	4b31      	ldr	r3, [pc, #196]	; (80010e8 <HAL_SPI_MspInit+0x118>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a30      	ldr	r2, [pc, #192]	; (80010e8 <HAL_SPI_MspInit+0x118>)
 8001028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b2e      	ldr	r3, [pc, #184]	; (80010e8 <HAL_SPI_MspInit+0x118>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 800103a:	2380      	movs	r3, #128	; 0x80
 800103c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001046:	2303      	movs	r3, #3
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800104a:	2305      	movs	r3, #5
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	4619      	mov	r1, r3
 8001054:	4825      	ldr	r0, [pc, #148]	; (80010ec <HAL_SPI_MspInit+0x11c>)
 8001056:	f001 f801 	bl	800205c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTI_MISO_Pin|POTI_CS_Pin|POTI_SCK_Pin;
 800105a:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800105e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800106c:	2305      	movs	r3, #5
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	4619      	mov	r1, r3
 8001076:	481e      	ldr	r0, [pc, #120]	; (80010f0 <HAL_SPI_MspInit+0x120>)
 8001078:	f000 fff0 	bl	800205c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800107c:	e02d      	b.n	80010da <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI4)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <HAL_SPI_MspInit+0x124>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d128      	bne.n	80010da <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001088:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <HAL_SPI_MspInit+0x118>)
 800108a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108c:	4a16      	ldr	r2, [pc, #88]	; (80010e8 <HAL_SPI_MspInit+0x118>)
 800108e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001092:	6453      	str	r3, [r2, #68]	; 0x44
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <HAL_SPI_MspInit+0x118>)
 8001096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001098:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_SPI_MspInit+0x118>)
 80010a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a4:	4a10      	ldr	r2, [pc, #64]	; (80010e8 <HAL_SPI_MspInit+0x118>)
 80010a6:	f043 0310 	orr.w	r3, r3, #16
 80010aa:	6313      	str	r3, [r2, #48]	; 0x30
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_SPI_MspInit+0x118>)
 80010ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b0:	f003 0310 	and.w	r3, r3, #16
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ISOSPI_CS_Pin|ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 80010b8:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80010bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80010ca:	2305      	movs	r3, #5
 80010cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4619      	mov	r1, r3
 80010d4:	4808      	ldr	r0, [pc, #32]	; (80010f8 <HAL_SPI_MspInit+0x128>)
 80010d6:	f000 ffc1 	bl	800205c <HAL_GPIO_Init>
}
 80010da:	bf00      	nop
 80010dc:	3730      	adds	r7, #48	; 0x30
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40013000 	.word	0x40013000
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020c00 	.word	0x40020c00
 80010f0:	40021800 	.word	0x40021800
 80010f4:	40013400 	.word	0x40013400
 80010f8:	40021000 	.word	0x40021000

080010fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <HAL_MspInit+0x4c>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	4a10      	ldr	r2, [pc, #64]	; (8001148 <HAL_MspInit+0x4c>)
 8001108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110c:	6413      	str	r3, [r2, #64]	; 0x40
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <HAL_MspInit+0x4c>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <HAL_MspInit+0x4c>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <HAL_MspInit+0x4c>)
 8001120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001124:	6453      	str	r3, [r2, #68]	; 0x44
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <HAL_MspInit+0x4c>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	210f      	movs	r1, #15
 8001136:	f06f 0001 	mvn.w	r0, #1
 800113a:	f000 ff66 	bl	800200a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800

0800114c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115e:	e7fe      	b.n	800115e <HardFault_Handler+0x4>

08001160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001164:	e7fe      	b.n	8001164 <MemManage_Handler+0x4>

08001166 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116a:	e7fe      	b.n	800116a <BusFault_Handler+0x4>

0800116c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <UsageFault_Handler+0x4>

08001172 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80011a0:	f000 faae 	bl	8001700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <SystemInit+0x28>)
 80011ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b2:	4a07      	ldr	r2, [pc, #28]	; (80011d0 <SystemInit+0x28>)
 80011b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <SystemInit+0x28>)
 80011be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011c2:	609a      	str	r2, [r3, #8]
#endif
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b090      	sub	sp, #64	; 0x40
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001206:	463b      	mov	r3, r7
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001210:	4b40      	ldr	r3, [pc, #256]	; (8001314 <MX_TIM1_Init+0x140>)
 8001212:	4a41      	ldr	r2, [pc, #260]	; (8001318 <MX_TIM1_Init+0x144>)
 8001214:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001216:	4b3f      	ldr	r3, [pc, #252]	; (8001314 <MX_TIM1_Init+0x140>)
 8001218:	2200      	movs	r2, #0
 800121a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121c:	4b3d      	ldr	r3, [pc, #244]	; (8001314 <MX_TIM1_Init+0x140>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001222:	4b3c      	ldr	r3, [pc, #240]	; (8001314 <MX_TIM1_Init+0x140>)
 8001224:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001228:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122a:	4b3a      	ldr	r3, [pc, #232]	; (8001314 <MX_TIM1_Init+0x140>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001230:	4b38      	ldr	r3, [pc, #224]	; (8001314 <MX_TIM1_Init+0x140>)
 8001232:	2200      	movs	r2, #0
 8001234:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001236:	4b37      	ldr	r3, [pc, #220]	; (8001314 <MX_TIM1_Init+0x140>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800123c:	4835      	ldr	r0, [pc, #212]	; (8001314 <MX_TIM1_Init+0x140>)
 800123e:	f002 faac 	bl	800379a <HAL_TIM_Base_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001248:	f7ff fe3e 	bl	8000ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001250:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001252:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001256:	4619      	mov	r1, r3
 8001258:	482e      	ldr	r0, [pc, #184]	; (8001314 <MX_TIM1_Init+0x140>)
 800125a:	f002 fd51 	bl	8003d00 <HAL_TIM_ConfigClockSource>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001264:	f7ff fe30 	bl	8000ec8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001268:	482a      	ldr	r0, [pc, #168]	; (8001314 <MX_TIM1_Init+0x140>)
 800126a:	f002 fb44 	bl	80038f6 <HAL_TIM_IC_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001274:	f7ff fe28 	bl	8000ec8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001278:	2304      	movs	r3, #4
 800127a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800127c:	2350      	movs	r3, #80	; 0x50
 800127e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001280:	2300      	movs	r3, #0
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	4619      	mov	r1, r3
 8001292:	4820      	ldr	r0, [pc, #128]	; (8001314 <MX_TIM1_Init+0x140>)
 8001294:	f002 fdfa 	bl	8003e8c <HAL_TIM_SlaveConfigSynchro>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800129e:	f7ff fe13 	bl	8000ec8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012a6:	2301      	movs	r3, #1
 80012a8:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012b2:	f107 030c 	add.w	r3, r7, #12
 80012b6:	2200      	movs	r2, #0
 80012b8:	4619      	mov	r1, r3
 80012ba:	4816      	ldr	r0, [pc, #88]	; (8001314 <MX_TIM1_Init+0x140>)
 80012bc:	f002 fb7c 	bl	80039b8 <HAL_TIM_IC_ConfigChannel>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80012c6:	f7ff fdff 	bl	8000ec8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80012ca:	2302      	movs	r3, #2
 80012cc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80012ce:	2302      	movs	r3, #2
 80012d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	2204      	movs	r2, #4
 80012d8:	4619      	mov	r1, r3
 80012da:	480e      	ldr	r0, [pc, #56]	; (8001314 <MX_TIM1_Init+0x140>)
 80012dc:	f002 fb6c 	bl	80039b8 <HAL_TIM_IC_ConfigChannel>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80012e6:	f7ff fdef 	bl	8000ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012f6:	463b      	mov	r3, r7
 80012f8:	4619      	mov	r1, r3
 80012fa:	4806      	ldr	r0, [pc, #24]	; (8001314 <MX_TIM1_Init+0x140>)
 80012fc:	f003 fb5a 	bl	80049b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8001306:	f7ff fddf 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	3740      	adds	r7, #64	; 0x40
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200001f4 	.word	0x200001f4
 8001318:	40010000 	.word	0x40010000

0800131c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800132e:	463b      	mov	r3, r7
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
 800133c:	615a      	str	r2, [r3, #20]
 800133e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001340:	4b32      	ldr	r3, [pc, #200]	; (800140c <MX_TIM4_Init+0xf0>)
 8001342:	4a33      	ldr	r2, [pc, #204]	; (8001410 <MX_TIM4_Init+0xf4>)
 8001344:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001346:	4b31      	ldr	r3, [pc, #196]	; (800140c <MX_TIM4_Init+0xf0>)
 8001348:	2200      	movs	r2, #0
 800134a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134c:	4b2f      	ldr	r3, [pc, #188]	; (800140c <MX_TIM4_Init+0xf0>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001352:	4b2e      	ldr	r3, [pc, #184]	; (800140c <MX_TIM4_Init+0xf0>)
 8001354:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001358:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135a:	4b2c      	ldr	r3, [pc, #176]	; (800140c <MX_TIM4_Init+0xf0>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001360:	4b2a      	ldr	r3, [pc, #168]	; (800140c <MX_TIM4_Init+0xf0>)
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001366:	4829      	ldr	r0, [pc, #164]	; (800140c <MX_TIM4_Init+0xf0>)
 8001368:	f002 fa6e 	bl	8003848 <HAL_TIM_PWM_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001372:	f7ff fda9 	bl	8000ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	4619      	mov	r1, r3
 8001384:	4821      	ldr	r0, [pc, #132]	; (800140c <MX_TIM4_Init+0xf0>)
 8001386:	f003 fb15 	bl	80049b4 <HAL_TIMEx_MasterConfigSynchronization>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001390:	f7ff fd9a 	bl	8000ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001394:	2360      	movs	r3, #96	; 0x60
 8001396:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800139c:	2300      	movs	r3, #0
 800139e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013a4:	463b      	mov	r3, r7
 80013a6:	2200      	movs	r2, #0
 80013a8:	4619      	mov	r1, r3
 80013aa:	4818      	ldr	r0, [pc, #96]	; (800140c <MX_TIM4_Init+0xf0>)
 80013ac:	f002 fb98 	bl	8003ae0 <HAL_TIM_PWM_ConfigChannel>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80013b6:	f7ff fd87 	bl	8000ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013ba:	463b      	mov	r3, r7
 80013bc:	2204      	movs	r2, #4
 80013be:	4619      	mov	r1, r3
 80013c0:	4812      	ldr	r0, [pc, #72]	; (800140c <MX_TIM4_Init+0xf0>)
 80013c2:	f002 fb8d 	bl	8003ae0 <HAL_TIM_PWM_ConfigChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80013cc:	f7ff fd7c 	bl	8000ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013d0:	463b      	mov	r3, r7
 80013d2:	2208      	movs	r2, #8
 80013d4:	4619      	mov	r1, r3
 80013d6:	480d      	ldr	r0, [pc, #52]	; (800140c <MX_TIM4_Init+0xf0>)
 80013d8:	f002 fb82 	bl	8003ae0 <HAL_TIM_PWM_ConfigChannel>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80013e2:	f7ff fd71 	bl	8000ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013e6:	463b      	mov	r3, r7
 80013e8:	220c      	movs	r2, #12
 80013ea:	4619      	mov	r1, r3
 80013ec:	4807      	ldr	r0, [pc, #28]	; (800140c <MX_TIM4_Init+0xf0>)
 80013ee:	f002 fb77 	bl	8003ae0 <HAL_TIM_PWM_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80013f8:	f7ff fd66 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013fc:	4803      	ldr	r0, [pc, #12]	; (800140c <MX_TIM4_Init+0xf0>)
 80013fe:	f000 f86d 	bl	80014dc <HAL_TIM_MspPostInit>

}
 8001402:	bf00      	nop
 8001404:	3728      	adds	r7, #40	; 0x28
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200001a8 	.word	0x200001a8
 8001410:	40000800 	.word	0x40000800

08001414 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	; 0x28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a17      	ldr	r2, [pc, #92]	; (8001490 <HAL_TIM_Base_MspInit+0x7c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d128      	bne.n	8001488 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <HAL_TIM_Base_MspInit+0x80>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	4a16      	ldr	r2, [pc, #88]	; (8001494 <HAL_TIM_Base_MspInit+0x80>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <HAL_TIM_Base_MspInit+0x80>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <HAL_TIM_Base_MspInit+0x80>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a10      	ldr	r2, [pc, #64]	; (8001494 <HAL_TIM_Base_MspInit+0x80>)
 8001454:	f043 0310 	orr.w	r3, r3, #16
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <HAL_TIM_Base_MspInit+0x80>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0310 	and.w	r3, r3, #16
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 8001466:	f44f 7300 	mov.w	r3, #512	; 0x200
 800146a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001478:	2301      	movs	r3, #1
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <HAL_TIM_Base_MspInit+0x84>)
 8001484:	f000 fdea 	bl	800205c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001488:	bf00      	nop
 800148a:	3728      	adds	r7, #40	; 0x28
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40010000 	.word	0x40010000
 8001494:	40023800 	.word	0x40023800
 8001498:	40021000 	.word	0x40021000

0800149c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <HAL_TIM_PWM_MspInit+0x38>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d10b      	bne.n	80014c6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a09      	ldr	r2, [pc, #36]	; (80014d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80014b4:	f043 0304 	orr.w	r3, r3, #4
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80014c6:	bf00      	nop
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40000800 	.word	0x40000800
 80014d8:	40023800 	.word	0x40023800

080014dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a11      	ldr	r2, [pc, #68]	; (8001540 <HAL_TIM_MspPostInit+0x64>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d11c      	bne.n	8001538 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <HAL_TIM_MspPostInit+0x68>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a10      	ldr	r2, [pc, #64]	; (8001544 <HAL_TIM_MspPostInit+0x68>)
 8001504:	f043 0308 	orr.w	r3, r3, #8
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <HAL_TIM_MspPostInit+0x68>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin|PWM_HV_Charger_Pin;
 8001516:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800151a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001528:	2302      	movs	r3, #2
 800152a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	4619      	mov	r1, r3
 8001532:	4805      	ldr	r0, [pc, #20]	; (8001548 <HAL_TIM_MspPostInit+0x6c>)
 8001534:	f000 fd92 	bl	800205c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001538:	bf00      	nop
 800153a:	3720      	adds	r7, #32
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40000800 	.word	0x40000800
 8001544:	40023800 	.word	0x40023800
 8001548:	40020c00 	.word	0x40020c00

0800154c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <MX_USART2_UART_Init+0x58>)
 8001552:	4a15      	ldr	r2, [pc, #84]	; (80015a8 <MX_USART2_UART_Init+0x5c>)
 8001554:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <MX_USART2_UART_Init+0x58>)
 8001558:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800155c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <MX_USART2_UART_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <MX_USART2_UART_Init+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <MX_USART2_UART_Init+0x58>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <MX_USART2_UART_Init+0x58>)
 8001572:	220c      	movs	r2, #12
 8001574:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <MX_USART2_UART_Init+0x58>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <MX_USART2_UART_Init+0x58>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001582:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <MX_USART2_UART_Init+0x58>)
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <MX_USART2_UART_Init+0x58>)
 800158a:	2200      	movs	r2, #0
 800158c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <MX_USART2_UART_Init+0x58>)
 8001590:	f003 fa9e 	bl	8004ad0 <HAL_UART_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800159a:	f7ff fc95 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000240 	.word	0x20000240
 80015a8:	40004400 	.word	0x40004400

080015ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08a      	sub	sp, #40	; 0x28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a17      	ldr	r2, [pc, #92]	; (8001628 <HAL_UART_MspInit+0x7c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d127      	bne.n	800161e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ce:	4b17      	ldr	r3, [pc, #92]	; (800162c <HAL_UART_MspInit+0x80>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	4a16      	ldr	r2, [pc, #88]	; (800162c <HAL_UART_MspInit+0x80>)
 80015d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d8:	6413      	str	r3, [r2, #64]	; 0x40
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <HAL_UART_MspInit+0x80>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <HAL_UART_MspInit+0x80>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a10      	ldr	r2, [pc, #64]	; (800162c <HAL_UART_MspInit+0x80>)
 80015ec:	f043 0308 	orr.w	r3, r3, #8
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <HAL_UART_MspInit+0x80>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80015fe:	2360      	movs	r3, #96	; 0x60
 8001600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800160e:	2307      	movs	r3, #7
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	; (8001630 <HAL_UART_MspInit+0x84>)
 800161a:	f000 fd1f 	bl	800205c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	; 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40004400 	.word	0x40004400
 800162c:	40023800 	.word	0x40023800
 8001630:	40020c00 	.word	0x40020c00

08001634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800166c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001638:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800163a:	e003      	b.n	8001644 <LoopCopyDataInit>

0800163c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800163e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001640:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001642:	3104      	adds	r1, #4

08001644 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001644:	480b      	ldr	r0, [pc, #44]	; (8001674 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001648:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800164a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800164c:	d3f6      	bcc.n	800163c <CopyDataInit>
  ldr  r2, =_sbss
 800164e:	4a0b      	ldr	r2, [pc, #44]	; (800167c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001650:	e002      	b.n	8001658 <LoopFillZerobss>

08001652 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001652:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001654:	f842 3b04 	str.w	r3, [r2], #4

08001658 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800165a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800165c:	d3f9      	bcc.n	8001652 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800165e:	f7ff fda3 	bl	80011a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001662:	f003 fe4d 	bl	8005300 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001666:	f7ff fb3f 	bl	8000ce8 <main>
  bx  lr    
 800166a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800166c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001670:	08005398 	.word	0x08005398
  ldr  r0, =_sdata
 8001674:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001678:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800167c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001680:	200002c8 	.word	0x200002c8

08001684 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001684:	e7fe      	b.n	8001684 <ADC_IRQHandler>

08001686 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800168a:	2003      	movs	r0, #3
 800168c:	f000 fcb2 	bl	8001ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001690:	2000      	movs	r0, #0
 8001692:	f000 f805 	bl	80016a0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001696:	f7ff fd31 	bl	80010fc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_InitTick+0x54>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_InitTick+0x58>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	4619      	mov	r1, r3
 80016b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 fcbf 	bl	8002042 <HAL_SYSTICK_Config>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00e      	b.n	80016ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b0f      	cmp	r3, #15
 80016d2:	d80a      	bhi.n	80016ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d4:	2200      	movs	r2, #0
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295
 80016dc:	f000 fc95 	bl	800200a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e0:	4a06      	ldr	r2, [pc, #24]	; (80016fc <HAL_InitTick+0x5c>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e000      	b.n	80016ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000000 	.word	0x20000000
 80016f8:	20000008 	.word	0x20000008
 80016fc:	20000004 	.word	0x20000004

08001700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_IncTick+0x20>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_IncTick+0x24>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	4a04      	ldr	r2, [pc, #16]	; (8001724 <HAL_IncTick+0x24>)
 8001712:	6013      	str	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20000008 	.word	0x20000008
 8001724:	200002c4 	.word	0x200002c4

08001728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return uwTick;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <HAL_GetTick+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	200002c4 	.word	0x200002c4

08001740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001748:	f7ff ffee 	bl	8001728 <HAL_GetTick>
 800174c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001758:	d005      	beq.n	8001766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <HAL_Delay+0x44>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4413      	add	r3, r2
 8001764:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001766:	bf00      	nop
 8001768:	f7ff ffde 	bl	8001728 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	429a      	cmp	r2, r3
 8001776:	d8f7      	bhi.n	8001768 <HAL_Delay+0x28>
  {
  }
}
 8001778:	bf00      	nop
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000008 	.word	0x20000008

08001788 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e031      	b.n	8001802 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d109      	bne.n	80017ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7fe ffe0 	bl	800076c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f003 0310 	and.w	r3, r3, #16
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d116      	bne.n	80017f4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017ca:	4b10      	ldr	r3, [pc, #64]	; (800180c <HAL_ADC_Init+0x84>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	f043 0202 	orr.w	r2, r3, #2
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 f964 	bl	8001aa4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f023 0303 	bic.w	r3, r3, #3
 80017ea:	f043 0201 	orr.w	r2, r3, #1
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	641a      	str	r2, [r3, #64]	; 0x40
 80017f2:	e001      	b.n	80017f8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001800:	7bfb      	ldrb	r3, [r7, #15]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	ffffeefd 	.word	0xffffeefd

08001810 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001824:	2b01      	cmp	r3, #1
 8001826:	d101      	bne.n	800182c <HAL_ADC_ConfigChannel+0x1c>
 8001828:	2302      	movs	r3, #2
 800182a:	e12a      	b.n	8001a82 <HAL_ADC_ConfigChannel+0x272>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b09      	cmp	r3, #9
 800183a:	d93a      	bls.n	80018b2 <HAL_ADC_ConfigChannel+0xa2>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001844:	d035      	beq.n	80018b2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68d9      	ldr	r1, [r3, #12]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	b29b      	uxth	r3, r3
 8001852:	461a      	mov	r2, r3
 8001854:	4613      	mov	r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4413      	add	r3, r2
 800185a:	3b1e      	subs	r3, #30
 800185c:	2207      	movs	r2, #7
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43da      	mvns	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	400a      	ands	r2, r1
 800186a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a87      	ldr	r2, [pc, #540]	; (8001a90 <HAL_ADC_ConfigChannel+0x280>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d10a      	bne.n	800188c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68d9      	ldr	r1, [r3, #12]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	061a      	lsls	r2, r3, #24
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800188a:	e035      	b.n	80018f8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68d9      	ldr	r1, [r3, #12]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	689a      	ldr	r2, [r3, #8]
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	b29b      	uxth	r3, r3
 800189c:	4618      	mov	r0, r3
 800189e:	4603      	mov	r3, r0
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4403      	add	r3, r0
 80018a4:	3b1e      	subs	r3, #30
 80018a6:	409a      	lsls	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018b0:	e022      	b.n	80018f8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6919      	ldr	r1, [r3, #16]
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	461a      	mov	r2, r3
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	2207      	movs	r2, #7
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43da      	mvns	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	400a      	ands	r2, r1
 80018d4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6919      	ldr	r1, [r3, #16]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	4603      	mov	r3, r0
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	4403      	add	r3, r0
 80018ee:	409a      	lsls	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b06      	cmp	r3, #6
 80018fe:	d824      	bhi.n	800194a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	4613      	mov	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	3b05      	subs	r3, #5
 8001912:	221f      	movs	r2, #31
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43da      	mvns	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	400a      	ands	r2, r1
 8001920:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	b29b      	uxth	r3, r3
 800192e:	4618      	mov	r0, r3
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	3b05      	subs	r3, #5
 800193c:	fa00 f203 	lsl.w	r2, r0, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	430a      	orrs	r2, r1
 8001946:	635a      	str	r2, [r3, #52]	; 0x34
 8001948:	e04c      	b.n	80019e4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b0c      	cmp	r3, #12
 8001950:	d824      	bhi.n	800199c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	3b23      	subs	r3, #35	; 0x23
 8001964:	221f      	movs	r2, #31
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	400a      	ands	r2, r1
 8001972:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	b29b      	uxth	r3, r3
 8001980:	4618      	mov	r0, r3
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	3b23      	subs	r3, #35	; 0x23
 800198e:	fa00 f203 	lsl.w	r2, r0, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	631a      	str	r2, [r3, #48]	; 0x30
 800199a:	e023      	b.n	80019e4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	3b41      	subs	r3, #65	; 0x41
 80019ae:	221f      	movs	r2, #31
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43da      	mvns	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	400a      	ands	r2, r1
 80019bc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	3b41      	subs	r3, #65	; 0x41
 80019d8:	fa00 f203 	lsl.w	r2, r0, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a2a      	ldr	r2, [pc, #168]	; (8001a94 <HAL_ADC_ConfigChannel+0x284>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d10a      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x1f4>
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019f6:	d105      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80019f8:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <HAL_ADC_ConfigChannel+0x288>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	4a26      	ldr	r2, [pc, #152]	; (8001a98 <HAL_ADC_ConfigChannel+0x288>)
 80019fe:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001a02:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a22      	ldr	r2, [pc, #136]	; (8001a94 <HAL_ADC_ConfigChannel+0x284>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d109      	bne.n	8001a22 <HAL_ADC_ConfigChannel+0x212>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b12      	cmp	r3, #18
 8001a14:	d105      	bne.n	8001a22 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HAL_ADC_ConfigChannel+0x288>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4a1f      	ldr	r2, [pc, #124]	; (8001a98 <HAL_ADC_ConfigChannel+0x288>)
 8001a1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a20:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a1b      	ldr	r2, [pc, #108]	; (8001a94 <HAL_ADC_ConfigChannel+0x284>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d125      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x268>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a17      	ldr	r2, [pc, #92]	; (8001a90 <HAL_ADC_ConfigChannel+0x280>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d003      	beq.n	8001a3e <HAL_ADC_ConfigChannel+0x22e>
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b11      	cmp	r3, #17
 8001a3c:	d11c      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001a3e:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <HAL_ADC_ConfigChannel+0x288>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	4a15      	ldr	r2, [pc, #84]	; (8001a98 <HAL_ADC_ConfigChannel+0x288>)
 8001a44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a48:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a10      	ldr	r2, [pc, #64]	; (8001a90 <HAL_ADC_ConfigChannel+0x280>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d111      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <HAL_ADC_ConfigChannel+0x28c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a11      	ldr	r2, [pc, #68]	; (8001aa0 <HAL_ADC_ConfigChannel+0x290>)
 8001a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5e:	0c9a      	lsrs	r2, r3, #18
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a6a:	e002      	b.n	8001a72 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1f9      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	10000012 	.word	0x10000012
 8001a94:	40012000 	.word	0x40012000
 8001a98:	40012300 	.word	0x40012300
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	431bde83 	.word	0x431bde83

08001aa4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001aac:	4b78      	ldr	r3, [pc, #480]	; (8001c90 <ADC_Init+0x1ec>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	4a77      	ldr	r2, [pc, #476]	; (8001c90 <ADC_Init+0x1ec>)
 8001ab2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ab6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001ab8:	4b75      	ldr	r3, [pc, #468]	; (8001c90 <ADC_Init+0x1ec>)
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	4973      	ldr	r1, [pc, #460]	; (8001c90 <ADC_Init+0x1ec>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ad4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6859      	ldr	r1, [r3, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	021a      	lsls	r2, r3, #8
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001af8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6859      	ldr	r1, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6899      	ldr	r1, [r3, #8]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68da      	ldr	r2, [r3, #12]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b32:	4a58      	ldr	r2, [pc, #352]	; (8001c94 <ADC_Init+0x1f0>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d022      	beq.n	8001b7e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6899      	ldr	r1, [r3, #8]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6899      	ldr	r1, [r3, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	e00f      	b.n	8001b9e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 0202 	bic.w	r2, r2, #2
 8001bac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6899      	ldr	r1, [r3, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	005a      	lsls	r2, r3, #1
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d01b      	beq.n	8001c04 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bda:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001bea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6859      	ldr	r1, [r3, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	035a      	lsls	r2, r3, #13
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	e007      	b.n	8001c14 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	051a      	lsls	r2, r3, #20
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6899      	ldr	r1, [r3, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c56:	025a      	lsls	r2, r3, #9
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6899      	ldr	r1, [r3, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	029a      	lsls	r2, r3, #10
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	609a      	str	r2, [r3, #8]
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	40012300 	.word	0x40012300
 8001c94:	0f000001 	.word	0x0f000001

08001c98 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e0ed      	b.n	8001e86 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d102      	bne.n	8001cbc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7fe fe04 	bl	80008c4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0202 	bic.w	r2, r2, #2
 8001cca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ccc:	f7ff fd2c 	bl	8001728 <HAL_GetTick>
 8001cd0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cd2:	e012      	b.n	8001cfa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cd4:	f7ff fd28 	bl	8001728 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b0a      	cmp	r3, #10
 8001ce0:	d90b      	bls.n	8001cfa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2205      	movs	r2, #5
 8001cf2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e0c5      	b.n	8001e86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1e5      	bne.n	8001cd4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0201 	orr.w	r2, r2, #1
 8001d16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d18:	f7ff fd06 	bl	8001728 <HAL_GetTick>
 8001d1c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d1e:	e012      	b.n	8001d46 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d20:	f7ff fd02 	bl	8001728 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b0a      	cmp	r3, #10
 8001d2c:	d90b      	bls.n	8001d46 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2205      	movs	r2, #5
 8001d3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e09f      	b.n	8001e86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0e5      	beq.n	8001d20 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	7e1b      	ldrb	r3, [r3, #24]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d108      	bne.n	8001d6e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	e007      	b.n	8001d7e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	7e5b      	ldrb	r3, [r3, #25]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d108      	bne.n	8001d98 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	e007      	b.n	8001da8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001da6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	7e9b      	ldrb	r3, [r3, #26]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d108      	bne.n	8001dc2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0220 	orr.w	r2, r2, #32
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	e007      	b.n	8001dd2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0220 	bic.w	r2, r2, #32
 8001dd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	7edb      	ldrb	r3, [r3, #27]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d108      	bne.n	8001dec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0210 	bic.w	r2, r2, #16
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	e007      	b.n	8001dfc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0210 	orr.w	r2, r2, #16
 8001dfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	7f1b      	ldrb	r3, [r3, #28]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d108      	bne.n	8001e16 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0208 	orr.w	r2, r2, #8
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	e007      	b.n	8001e26 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0208 	bic.w	r2, r2, #8
 8001e24:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	7f5b      	ldrb	r3, [r3, #29]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d108      	bne.n	8001e40 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f042 0204 	orr.w	r2, r2, #4
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e007      	b.n	8001e50 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0204 	bic.w	r2, r2, #4
 8001e4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	ea42 0103 	orr.w	r1, r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	1e5a      	subs	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <__NVIC_SetPriorityGrouping+0x40>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eac:	4013      	ands	r3, r2
 8001eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ebe:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <__NVIC_SetPriorityGrouping+0x40>)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	60d3      	str	r3, [r2, #12]
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	e000ed00 	.word	0xe000ed00
 8001ed4:	05fa0000 	.word	0x05fa0000

08001ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	f003 0307 	and.w	r3, r3, #7
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	db0a      	blt.n	8001f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	490c      	ldr	r1, [pc, #48]	; (8001f40 <__NVIC_SetPriority+0x4c>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	0112      	lsls	r2, r2, #4
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	440b      	add	r3, r1
 8001f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f1c:	e00a      	b.n	8001f34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4908      	ldr	r1, [pc, #32]	; (8001f44 <__NVIC_SetPriority+0x50>)
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	3b04      	subs	r3, #4
 8001f2c:	0112      	lsls	r2, r2, #4
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	440b      	add	r3, r1
 8001f32:	761a      	strb	r2, [r3, #24]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000e100 	.word	0xe000e100
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f1c3 0307 	rsb	r3, r3, #7
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	bf28      	it	cs
 8001f66:	2304      	movcs	r3, #4
 8001f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	2b06      	cmp	r3, #6
 8001f70:	d902      	bls.n	8001f78 <NVIC_EncodePriority+0x30>
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3b03      	subs	r3, #3
 8001f76:	e000      	b.n	8001f7a <NVIC_EncodePriority+0x32>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f90:	f04f 31ff 	mov.w	r1, #4294967295
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	43d9      	mvns	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	4313      	orrs	r3, r2
         );
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3724      	adds	r7, #36	; 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc0:	d301      	bcc.n	8001fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e00f      	b.n	8001fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <SysTick_Config+0x40>)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fce:	210f      	movs	r1, #15
 8001fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd4:	f7ff ff8e 	bl	8001ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <SysTick_Config+0x40>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fde:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <SysTick_Config+0x40>)
 8001fe0:	2207      	movs	r2, #7
 8001fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	e000e010 	.word	0xe000e010

08001ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ff47 	bl	8001e90 <__NVIC_SetPriorityGrouping>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800200a:	b580      	push	{r7, lr}
 800200c:	b086      	sub	sp, #24
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800201c:	f7ff ff5c 	bl	8001ed8 <__NVIC_GetPriorityGrouping>
 8002020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	6978      	ldr	r0, [r7, #20]
 8002028:	f7ff ff8e 	bl	8001f48 <NVIC_EncodePriority>
 800202c:	4602      	mov	r2, r0
 800202e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff5d 	bl	8001ef4 <__NVIC_SetPriority>
}
 800203a:	bf00      	nop
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff ffb0 	bl	8001fb0 <SysTick_Config>
 8002050:	4603      	mov	r3, r0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800205c:	b480      	push	{r7}
 800205e:	b089      	sub	sp, #36	; 0x24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002072:	2300      	movs	r3, #0
 8002074:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
 800207a:	e175      	b.n	8002368 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800207c:	2201      	movs	r2, #1
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	429a      	cmp	r2, r3
 8002096:	f040 8164 	bne.w	8002362 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d00b      	beq.n	80020ba <HAL_GPIO_Init+0x5e>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d007      	beq.n	80020ba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020ae:	2b11      	cmp	r3, #17
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b12      	cmp	r3, #18
 80020b8:	d130      	bne.n	800211c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	2203      	movs	r2, #3
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020f0:	2201      	movs	r2, #1
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	091b      	lsrs	r3, r3, #4
 8002106:	f003 0201 	and.w	r2, r3, #1
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	2203      	movs	r2, #3
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b02      	cmp	r3, #2
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x100>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b12      	cmp	r3, #18
 800215a:	d123      	bne.n	80021a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	08da      	lsrs	r2, r3, #3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3208      	adds	r2, #8
 8002164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	220f      	movs	r2, #15
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	691a      	ldr	r2, [r3, #16]
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	08da      	lsrs	r2, r3, #3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3208      	adds	r2, #8
 800219e:	69b9      	ldr	r1, [r7, #24]
 80021a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	2203      	movs	r2, #3
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 0203 	and.w	r2, r3, #3
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 80be 	beq.w	8002362 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e6:	4b66      	ldr	r3, [pc, #408]	; (8002380 <HAL_GPIO_Init+0x324>)
 80021e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ea:	4a65      	ldr	r2, [pc, #404]	; (8002380 <HAL_GPIO_Init+0x324>)
 80021ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f0:	6453      	str	r3, [r2, #68]	; 0x44
 80021f2:	4b63      	ldr	r3, [pc, #396]	; (8002380 <HAL_GPIO_Init+0x324>)
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80021fe:	4a61      	ldr	r2, [pc, #388]	; (8002384 <HAL_GPIO_Init+0x328>)
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	089b      	lsrs	r3, r3, #2
 8002204:	3302      	adds	r3, #2
 8002206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	220f      	movs	r2, #15
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4013      	ands	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a58      	ldr	r2, [pc, #352]	; (8002388 <HAL_GPIO_Init+0x32c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d037      	beq.n	800229a <HAL_GPIO_Init+0x23e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a57      	ldr	r2, [pc, #348]	; (800238c <HAL_GPIO_Init+0x330>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d031      	beq.n	8002296 <HAL_GPIO_Init+0x23a>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a56      	ldr	r2, [pc, #344]	; (8002390 <HAL_GPIO_Init+0x334>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d02b      	beq.n	8002292 <HAL_GPIO_Init+0x236>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a55      	ldr	r2, [pc, #340]	; (8002394 <HAL_GPIO_Init+0x338>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d025      	beq.n	800228e <HAL_GPIO_Init+0x232>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a54      	ldr	r2, [pc, #336]	; (8002398 <HAL_GPIO_Init+0x33c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d01f      	beq.n	800228a <HAL_GPIO_Init+0x22e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a53      	ldr	r2, [pc, #332]	; (800239c <HAL_GPIO_Init+0x340>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d019      	beq.n	8002286 <HAL_GPIO_Init+0x22a>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a52      	ldr	r2, [pc, #328]	; (80023a0 <HAL_GPIO_Init+0x344>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d013      	beq.n	8002282 <HAL_GPIO_Init+0x226>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a51      	ldr	r2, [pc, #324]	; (80023a4 <HAL_GPIO_Init+0x348>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d00d      	beq.n	800227e <HAL_GPIO_Init+0x222>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a50      	ldr	r2, [pc, #320]	; (80023a8 <HAL_GPIO_Init+0x34c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d007      	beq.n	800227a <HAL_GPIO_Init+0x21e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a4f      	ldr	r2, [pc, #316]	; (80023ac <HAL_GPIO_Init+0x350>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d101      	bne.n	8002276 <HAL_GPIO_Init+0x21a>
 8002272:	2309      	movs	r3, #9
 8002274:	e012      	b.n	800229c <HAL_GPIO_Init+0x240>
 8002276:	230a      	movs	r3, #10
 8002278:	e010      	b.n	800229c <HAL_GPIO_Init+0x240>
 800227a:	2308      	movs	r3, #8
 800227c:	e00e      	b.n	800229c <HAL_GPIO_Init+0x240>
 800227e:	2307      	movs	r3, #7
 8002280:	e00c      	b.n	800229c <HAL_GPIO_Init+0x240>
 8002282:	2306      	movs	r3, #6
 8002284:	e00a      	b.n	800229c <HAL_GPIO_Init+0x240>
 8002286:	2305      	movs	r3, #5
 8002288:	e008      	b.n	800229c <HAL_GPIO_Init+0x240>
 800228a:	2304      	movs	r3, #4
 800228c:	e006      	b.n	800229c <HAL_GPIO_Init+0x240>
 800228e:	2303      	movs	r3, #3
 8002290:	e004      	b.n	800229c <HAL_GPIO_Init+0x240>
 8002292:	2302      	movs	r3, #2
 8002294:	e002      	b.n	800229c <HAL_GPIO_Init+0x240>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_GPIO_Init+0x240>
 800229a:	2300      	movs	r3, #0
 800229c:	69fa      	ldr	r2, [r7, #28]
 800229e:	f002 0203 	and.w	r2, r2, #3
 80022a2:	0092      	lsls	r2, r2, #2
 80022a4:	4093      	lsls	r3, r2
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022ac:	4935      	ldr	r1, [pc, #212]	; (8002384 <HAL_GPIO_Init+0x328>)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	089b      	lsrs	r3, r3, #2
 80022b2:	3302      	adds	r3, #2
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022ba:	4b3d      	ldr	r3, [pc, #244]	; (80023b0 <HAL_GPIO_Init+0x354>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022de:	4a34      	ldr	r2, [pc, #208]	; (80023b0 <HAL_GPIO_Init+0x354>)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022e4:	4b32      	ldr	r3, [pc, #200]	; (80023b0 <HAL_GPIO_Init+0x354>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002308:	4a29      	ldr	r2, [pc, #164]	; (80023b0 <HAL_GPIO_Init+0x354>)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800230e:	4b28      	ldr	r3, [pc, #160]	; (80023b0 <HAL_GPIO_Init+0x354>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002332:	4a1f      	ldr	r2, [pc, #124]	; (80023b0 <HAL_GPIO_Init+0x354>)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002338:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <HAL_GPIO_Init+0x354>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800235c:	4a14      	ldr	r2, [pc, #80]	; (80023b0 <HAL_GPIO_Init+0x354>)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3301      	adds	r3, #1
 8002366:	61fb      	str	r3, [r7, #28]
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	2b0f      	cmp	r3, #15
 800236c:	f67f ae86 	bls.w	800207c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	3724      	adds	r7, #36	; 0x24
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
 8002384:	40013800 	.word	0x40013800
 8002388:	40020000 	.word	0x40020000
 800238c:	40020400 	.word	0x40020400
 8002390:	40020800 	.word	0x40020800
 8002394:	40020c00 	.word	0x40020c00
 8002398:	40021000 	.word	0x40021000
 800239c:	40021400 	.word	0x40021400
 80023a0:	40021800 	.word	0x40021800
 80023a4:	40021c00 	.word	0x40021c00
 80023a8:	40022000 	.word	0x40022000
 80023ac:	40022400 	.word	0x40022400
 80023b0:	40013c00 	.word	0x40013c00

080023b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	887b      	ldrh	r3, [r7, #2]
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023cc:	2301      	movs	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
 80023d0:	e001      	b.n	80023d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	807b      	strh	r3, [r7, #2]
 80023f0:	4613      	mov	r3, r2
 80023f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023f4:	787b      	ldrb	r3, [r7, #1]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023fa:	887a      	ldrh	r2, [r7, #2]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002400:	e003      	b.n	800240a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002402:	887b      	ldrh	r3, [r7, #2]
 8002404:	041a      	lsls	r2, r3, #16
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	619a      	str	r2, [r3, #24]
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002416:	b480      	push	{r7}
 8002418:	b085      	sub	sp, #20
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	460b      	mov	r3, r1
 8002420:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002428:	887a      	ldrh	r2, [r7, #2]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	4013      	ands	r3, r2
 800242e:	041a      	lsls	r2, r3, #16
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	43d9      	mvns	r1, r3
 8002434:	887b      	ldrh	r3, [r7, #2]
 8002436:	400b      	ands	r3, r1
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	619a      	str	r2, [r3, #24]
}
 800243e:	bf00      	nop
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002456:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	4a22      	ldr	r2, [pc, #136]	; (80024e4 <HAL_PWREx_EnableOverDrive+0x98>)
 800245c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002460:	6413      	str	r3, [r2, #64]	; 0x40
 8002462:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246a:	603b      	str	r3, [r7, #0]
 800246c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800246e:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a1d      	ldr	r2, [pc, #116]	; (80024e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002478:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800247a:	f7ff f955 	bl	8001728 <HAL_GetTick>
 800247e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002480:	e009      	b.n	8002496 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002482:	f7ff f951 	bl	8001728 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002490:	d901      	bls.n	8002496 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e022      	b.n	80024dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002496:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a2:	d1ee      	bne.n	8002482 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80024a4:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a0f      	ldr	r2, [pc, #60]	; (80024e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024b0:	f7ff f93a 	bl	8001728 <HAL_GetTick>
 80024b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024b6:	e009      	b.n	80024cc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024b8:	f7ff f936 	bl	8001728 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024c6:	d901      	bls.n	80024cc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e007      	b.n	80024dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024cc:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024d8:	d1ee      	bne.n	80024b8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40007000 	.word	0x40007000

080024ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80024f4:	2300      	movs	r3, #0
 80024f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e29b      	b.n	8002a3a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 8087 	beq.w	800261e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002510:	4b96      	ldr	r3, [pc, #600]	; (800276c <HAL_RCC_OscConfig+0x280>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 030c 	and.w	r3, r3, #12
 8002518:	2b04      	cmp	r3, #4
 800251a:	d00c      	beq.n	8002536 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800251c:	4b93      	ldr	r3, [pc, #588]	; (800276c <HAL_RCC_OscConfig+0x280>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 030c 	and.w	r3, r3, #12
 8002524:	2b08      	cmp	r3, #8
 8002526:	d112      	bne.n	800254e <HAL_RCC_OscConfig+0x62>
 8002528:	4b90      	ldr	r3, [pc, #576]	; (800276c <HAL_RCC_OscConfig+0x280>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002530:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002534:	d10b      	bne.n	800254e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002536:	4b8d      	ldr	r3, [pc, #564]	; (800276c <HAL_RCC_OscConfig+0x280>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d06c      	beq.n	800261c <HAL_RCC_OscConfig+0x130>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d168      	bne.n	800261c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e275      	b.n	8002a3a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002556:	d106      	bne.n	8002566 <HAL_RCC_OscConfig+0x7a>
 8002558:	4b84      	ldr	r3, [pc, #528]	; (800276c <HAL_RCC_OscConfig+0x280>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a83      	ldr	r2, [pc, #524]	; (800276c <HAL_RCC_OscConfig+0x280>)
 800255e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	e02e      	b.n	80025c4 <HAL_RCC_OscConfig+0xd8>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10c      	bne.n	8002588 <HAL_RCC_OscConfig+0x9c>
 800256e:	4b7f      	ldr	r3, [pc, #508]	; (800276c <HAL_RCC_OscConfig+0x280>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a7e      	ldr	r2, [pc, #504]	; (800276c <HAL_RCC_OscConfig+0x280>)
 8002574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	4b7c      	ldr	r3, [pc, #496]	; (800276c <HAL_RCC_OscConfig+0x280>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a7b      	ldr	r2, [pc, #492]	; (800276c <HAL_RCC_OscConfig+0x280>)
 8002580:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	e01d      	b.n	80025c4 <HAL_RCC_OscConfig+0xd8>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002590:	d10c      	bne.n	80025ac <HAL_RCC_OscConfig+0xc0>
 8002592:	4b76      	ldr	r3, [pc, #472]	; (800276c <HAL_RCC_OscConfig+0x280>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a75      	ldr	r2, [pc, #468]	; (800276c <HAL_RCC_OscConfig+0x280>)
 8002598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	4b73      	ldr	r3, [pc, #460]	; (800276c <HAL_RCC_OscConfig+0x280>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a72      	ldr	r2, [pc, #456]	; (800276c <HAL_RCC_OscConfig+0x280>)
 80025a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	e00b      	b.n	80025c4 <HAL_RCC_OscConfig+0xd8>
 80025ac:	4b6f      	ldr	r3, [pc, #444]	; (800276c <HAL_RCC_OscConfig+0x280>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a6e      	ldr	r2, [pc, #440]	; (800276c <HAL_RCC_OscConfig+0x280>)
 80025b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	4b6c      	ldr	r3, [pc, #432]	; (800276c <HAL_RCC_OscConfig+0x280>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a6b      	ldr	r2, [pc, #428]	; (800276c <HAL_RCC_OscConfig+0x280>)
 80025be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d013      	beq.n	80025f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025cc:	f7ff f8ac 	bl	8001728 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d4:	f7ff f8a8 	bl	8001728 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b64      	cmp	r3, #100	; 0x64
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e229      	b.n	8002a3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e6:	4b61      	ldr	r3, [pc, #388]	; (800276c <HAL_RCC_OscConfig+0x280>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f0      	beq.n	80025d4 <HAL_RCC_OscConfig+0xe8>
 80025f2:	e014      	b.n	800261e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f4:	f7ff f898 	bl	8001728 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025fc:	f7ff f894 	bl	8001728 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b64      	cmp	r3, #100	; 0x64
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e215      	b.n	8002a3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260e:	4b57      	ldr	r3, [pc, #348]	; (800276c <HAL_RCC_OscConfig+0x280>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f0      	bne.n	80025fc <HAL_RCC_OscConfig+0x110>
 800261a:	e000      	b.n	800261e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800261c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d069      	beq.n	80026fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800262a:	4b50      	ldr	r3, [pc, #320]	; (800276c <HAL_RCC_OscConfig+0x280>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00b      	beq.n	800264e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002636:	4b4d      	ldr	r3, [pc, #308]	; (800276c <HAL_RCC_OscConfig+0x280>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b08      	cmp	r3, #8
 8002640:	d11c      	bne.n	800267c <HAL_RCC_OscConfig+0x190>
 8002642:	4b4a      	ldr	r3, [pc, #296]	; (800276c <HAL_RCC_OscConfig+0x280>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d116      	bne.n	800267c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264e:	4b47      	ldr	r3, [pc, #284]	; (800276c <HAL_RCC_OscConfig+0x280>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d005      	beq.n	8002666 <HAL_RCC_OscConfig+0x17a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d001      	beq.n	8002666 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e1e9      	b.n	8002a3a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002666:	4b41      	ldr	r3, [pc, #260]	; (800276c <HAL_RCC_OscConfig+0x280>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	493d      	ldr	r1, [pc, #244]	; (800276c <HAL_RCC_OscConfig+0x280>)
 8002676:	4313      	orrs	r3, r2
 8002678:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800267a:	e040      	b.n	80026fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d023      	beq.n	80026cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002684:	4b39      	ldr	r3, [pc, #228]	; (800276c <HAL_RCC_OscConfig+0x280>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a38      	ldr	r2, [pc, #224]	; (800276c <HAL_RCC_OscConfig+0x280>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002690:	f7ff f84a 	bl	8001728 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002698:	f7ff f846 	bl	8001728 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e1c7      	b.n	8002a3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026aa:	4b30      	ldr	r3, [pc, #192]	; (800276c <HAL_RCC_OscConfig+0x280>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b6:	4b2d      	ldr	r3, [pc, #180]	; (800276c <HAL_RCC_OscConfig+0x280>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4929      	ldr	r1, [pc, #164]	; (800276c <HAL_RCC_OscConfig+0x280>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]
 80026ca:	e018      	b.n	80026fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026cc:	4b27      	ldr	r3, [pc, #156]	; (800276c <HAL_RCC_OscConfig+0x280>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a26      	ldr	r2, [pc, #152]	; (800276c <HAL_RCC_OscConfig+0x280>)
 80026d2:	f023 0301 	bic.w	r3, r3, #1
 80026d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7ff f826 	bl	8001728 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e0:	f7ff f822 	bl	8001728 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e1a3      	b.n	8002a3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f2:	4b1e      	ldr	r3, [pc, #120]	; (800276c <HAL_RCC_OscConfig+0x280>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d038      	beq.n	800277c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d019      	beq.n	8002746 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002712:	4b16      	ldr	r3, [pc, #88]	; (800276c <HAL_RCC_OscConfig+0x280>)
 8002714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002716:	4a15      	ldr	r2, [pc, #84]	; (800276c <HAL_RCC_OscConfig+0x280>)
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271e:	f7ff f803 	bl	8001728 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002726:	f7fe ffff 	bl	8001728 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e180      	b.n	8002a3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <HAL_RCC_OscConfig+0x280>)
 800273a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0f0      	beq.n	8002726 <HAL_RCC_OscConfig+0x23a>
 8002744:	e01a      	b.n	800277c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002746:	4b09      	ldr	r3, [pc, #36]	; (800276c <HAL_RCC_OscConfig+0x280>)
 8002748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800274a:	4a08      	ldr	r2, [pc, #32]	; (800276c <HAL_RCC_OscConfig+0x280>)
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002752:	f7fe ffe9 	bl	8001728 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002758:	e00a      	b.n	8002770 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800275a:	f7fe ffe5 	bl	8001728 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d903      	bls.n	8002770 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e166      	b.n	8002a3a <HAL_RCC_OscConfig+0x54e>
 800276c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002770:	4b92      	ldr	r3, [pc, #584]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 8002772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1ee      	bne.n	800275a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 80a4 	beq.w	80028d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800278a:	4b8c      	ldr	r3, [pc, #560]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10d      	bne.n	80027b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002796:	4b89      	ldr	r3, [pc, #548]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	4a88      	ldr	r2, [pc, #544]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 800279c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a0:	6413      	str	r3, [r2, #64]	; 0x40
 80027a2:	4b86      	ldr	r3, [pc, #536]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ae:	2301      	movs	r3, #1
 80027b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027b2:	4b83      	ldr	r3, [pc, #524]	; (80029c0 <HAL_RCC_OscConfig+0x4d4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d118      	bne.n	80027f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80027be:	4b80      	ldr	r3, [pc, #512]	; (80029c0 <HAL_RCC_OscConfig+0x4d4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a7f      	ldr	r2, [pc, #508]	; (80029c0 <HAL_RCC_OscConfig+0x4d4>)
 80027c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ca:	f7fe ffad 	bl	8001728 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d2:	f7fe ffa9 	bl	8001728 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b64      	cmp	r3, #100	; 0x64
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e12a      	b.n	8002a3a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027e4:	4b76      	ldr	r3, [pc, #472]	; (80029c0 <HAL_RCC_OscConfig+0x4d4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0f0      	beq.n	80027d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d106      	bne.n	8002806 <HAL_RCC_OscConfig+0x31a>
 80027f8:	4b70      	ldr	r3, [pc, #448]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fc:	4a6f      	ldr	r2, [pc, #444]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	6713      	str	r3, [r2, #112]	; 0x70
 8002804:	e02d      	b.n	8002862 <HAL_RCC_OscConfig+0x376>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10c      	bne.n	8002828 <HAL_RCC_OscConfig+0x33c>
 800280e:	4b6b      	ldr	r3, [pc, #428]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 8002810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002812:	4a6a      	ldr	r2, [pc, #424]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 8002814:	f023 0301 	bic.w	r3, r3, #1
 8002818:	6713      	str	r3, [r2, #112]	; 0x70
 800281a:	4b68      	ldr	r3, [pc, #416]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 800281c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281e:	4a67      	ldr	r2, [pc, #412]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 8002820:	f023 0304 	bic.w	r3, r3, #4
 8002824:	6713      	str	r3, [r2, #112]	; 0x70
 8002826:	e01c      	b.n	8002862 <HAL_RCC_OscConfig+0x376>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b05      	cmp	r3, #5
 800282e:	d10c      	bne.n	800284a <HAL_RCC_OscConfig+0x35e>
 8002830:	4b62      	ldr	r3, [pc, #392]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 8002832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002834:	4a61      	ldr	r2, [pc, #388]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 8002836:	f043 0304 	orr.w	r3, r3, #4
 800283a:	6713      	str	r3, [r2, #112]	; 0x70
 800283c:	4b5f      	ldr	r3, [pc, #380]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 800283e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002840:	4a5e      	ldr	r2, [pc, #376]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	6713      	str	r3, [r2, #112]	; 0x70
 8002848:	e00b      	b.n	8002862 <HAL_RCC_OscConfig+0x376>
 800284a:	4b5c      	ldr	r3, [pc, #368]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284e:	4a5b      	ldr	r2, [pc, #364]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 8002850:	f023 0301 	bic.w	r3, r3, #1
 8002854:	6713      	str	r3, [r2, #112]	; 0x70
 8002856:	4b59      	ldr	r3, [pc, #356]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285a:	4a58      	ldr	r2, [pc, #352]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 800285c:	f023 0304 	bic.w	r3, r3, #4
 8002860:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d015      	beq.n	8002896 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286a:	f7fe ff5d 	bl	8001728 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002870:	e00a      	b.n	8002888 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002872:	f7fe ff59 	bl	8001728 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002880:	4293      	cmp	r3, r2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e0d8      	b.n	8002a3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002888:	4b4c      	ldr	r3, [pc, #304]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 800288a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0ee      	beq.n	8002872 <HAL_RCC_OscConfig+0x386>
 8002894:	e014      	b.n	80028c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002896:	f7fe ff47 	bl	8001728 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800289c:	e00a      	b.n	80028b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289e:	f7fe ff43 	bl	8001728 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e0c2      	b.n	8002a3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b4:	4b41      	ldr	r3, [pc, #260]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 80028b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1ee      	bne.n	800289e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028c0:	7dfb      	ldrb	r3, [r7, #23]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d105      	bne.n	80028d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c6:	4b3d      	ldr	r3, [pc, #244]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	4a3c      	ldr	r2, [pc, #240]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 80028cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 80ae 	beq.w	8002a38 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028dc:	4b37      	ldr	r3, [pc, #220]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 030c 	and.w	r3, r3, #12
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d06d      	beq.n	80029c4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d14b      	bne.n	8002988 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f0:	4b32      	ldr	r3, [pc, #200]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a31      	ldr	r2, [pc, #196]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 80028f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fc:	f7fe ff14 	bl	8001728 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002904:	f7fe ff10 	bl	8001728 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e091      	b.n	8002a3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002916:	4b29      	ldr	r3, [pc, #164]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f0      	bne.n	8002904 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69da      	ldr	r2, [r3, #28]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	019b      	lsls	r3, r3, #6
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	085b      	lsrs	r3, r3, #1
 800293a:	3b01      	subs	r3, #1
 800293c:	041b      	lsls	r3, r3, #16
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	061b      	lsls	r3, r3, #24
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294c:	071b      	lsls	r3, r3, #28
 800294e:	491b      	ldr	r1, [pc, #108]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 8002950:	4313      	orrs	r3, r2
 8002952:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002954:	4b19      	ldr	r3, [pc, #100]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a18      	ldr	r2, [pc, #96]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 800295a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800295e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fe fee2 	bl	8001728 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002968:	f7fe fede 	bl	8001728 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e05f      	b.n	8002a3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x47c>
 8002986:	e057      	b.n	8002a38 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a0b      	ldr	r2, [pc, #44]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 800298e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002994:	f7fe fec8 	bl	8001728 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800299c:	f7fe fec4 	bl	8001728 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e045      	b.n	8002a3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ae:	4b03      	ldr	r3, [pc, #12]	; (80029bc <HAL_RCC_OscConfig+0x4d0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x4b0>
 80029ba:	e03d      	b.n	8002a38 <HAL_RCC_OscConfig+0x54c>
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80029c4:	4b1f      	ldr	r3, [pc, #124]	; (8002a44 <HAL_RCC_OscConfig+0x558>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d030      	beq.n	8002a34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029dc:	429a      	cmp	r2, r3
 80029de:	d129      	bne.n	8002a34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d122      	bne.n	8002a34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029f4:	4013      	ands	r3, r2
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d119      	bne.n	8002a34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0a:	085b      	lsrs	r3, r3, #1
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d10f      	bne.n	8002a34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d107      	bne.n	8002a34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800

08002a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0d0      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a60:	4b6a      	ldr	r3, [pc, #424]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d910      	bls.n	8002a90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6e:	4b67      	ldr	r3, [pc, #412]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 020f 	bic.w	r2, r3, #15
 8002a76:	4965      	ldr	r1, [pc, #404]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7e:	4b63      	ldr	r3, [pc, #396]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0b8      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d020      	beq.n	8002ade <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa8:	4b59      	ldr	r3, [pc, #356]	; (8002c10 <HAL_RCC_ClockConfig+0x1c8>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	4a58      	ldr	r2, [pc, #352]	; (8002c10 <HAL_RCC_ClockConfig+0x1c8>)
 8002aae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ab2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ac0:	4b53      	ldr	r3, [pc, #332]	; (8002c10 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	4a52      	ldr	r2, [pc, #328]	; (8002c10 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002aca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002acc:	4b50      	ldr	r3, [pc, #320]	; (8002c10 <HAL_RCC_ClockConfig+0x1c8>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	494d      	ldr	r1, [pc, #308]	; (8002c10 <HAL_RCC_ClockConfig+0x1c8>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d040      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d107      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af2:	4b47      	ldr	r3, [pc, #284]	; (8002c10 <HAL_RCC_ClockConfig+0x1c8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d115      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e07f      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d107      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0a:	4b41      	ldr	r3, [pc, #260]	; (8002c10 <HAL_RCC_ClockConfig+0x1c8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d109      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e073      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1a:	4b3d      	ldr	r3, [pc, #244]	; (8002c10 <HAL_RCC_ClockConfig+0x1c8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e06b      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b2a:	4b39      	ldr	r3, [pc, #228]	; (8002c10 <HAL_RCC_ClockConfig+0x1c8>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f023 0203 	bic.w	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4936      	ldr	r1, [pc, #216]	; (8002c10 <HAL_RCC_ClockConfig+0x1c8>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b3c:	f7fe fdf4 	bl	8001728 <HAL_GetTick>
 8002b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b42:	e00a      	b.n	8002b5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b44:	f7fe fdf0 	bl	8001728 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e053      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5a:	4b2d      	ldr	r3, [pc, #180]	; (8002c10 <HAL_RCC_ClockConfig+0x1c8>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 020c 	and.w	r2, r3, #12
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d1eb      	bne.n	8002b44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b6c:	4b27      	ldr	r3, [pc, #156]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 030f 	and.w	r3, r3, #15
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d210      	bcs.n	8002b9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7a:	4b24      	ldr	r3, [pc, #144]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 020f 	bic.w	r2, r3, #15
 8002b82:	4922      	ldr	r1, [pc, #136]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8a:	4b20      	ldr	r3, [pc, #128]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e032      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba8:	4b19      	ldr	r3, [pc, #100]	; (8002c10 <HAL_RCC_ClockConfig+0x1c8>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	4916      	ldr	r1, [pc, #88]	; (8002c10 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d009      	beq.n	8002bda <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bc6:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	490e      	ldr	r1, [pc, #56]	; (8002c10 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bda:	f000 f821 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8002bde:	4602      	mov	r2, r0
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <HAL_RCC_ClockConfig+0x1c8>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	091b      	lsrs	r3, r3, #4
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	490a      	ldr	r1, [pc, #40]	; (8002c14 <HAL_RCC_ClockConfig+0x1cc>)
 8002bec:	5ccb      	ldrb	r3, [r1, r3]
 8002bee:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf2:	4a09      	ldr	r2, [pc, #36]	; (8002c18 <HAL_RCC_ClockConfig+0x1d0>)
 8002bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bf6:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <HAL_RCC_ClockConfig+0x1d4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fe fd50 	bl	80016a0 <HAL_InitTick>

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40023c00 	.word	0x40023c00
 8002c10:	40023800 	.word	0x40023800
 8002c14:	08005370 	.word	0x08005370
 8002c18:	20000000 	.word	0x20000000
 8002c1c:	20000004 	.word	0x20000004

08002c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c20:	b5b0      	push	{r4, r5, r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002c26:	2100      	movs	r1, #0
 8002c28:	6079      	str	r1, [r7, #4]
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	60f9      	str	r1, [r7, #12]
 8002c2e:	2100      	movs	r1, #0
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002c32:	2100      	movs	r1, #0
 8002c34:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c36:	4952      	ldr	r1, [pc, #328]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c38:	6889      	ldr	r1, [r1, #8]
 8002c3a:	f001 010c 	and.w	r1, r1, #12
 8002c3e:	2908      	cmp	r1, #8
 8002c40:	d00d      	beq.n	8002c5e <HAL_RCC_GetSysClockFreq+0x3e>
 8002c42:	2908      	cmp	r1, #8
 8002c44:	f200 8094 	bhi.w	8002d70 <HAL_RCC_GetSysClockFreq+0x150>
 8002c48:	2900      	cmp	r1, #0
 8002c4a:	d002      	beq.n	8002c52 <HAL_RCC_GetSysClockFreq+0x32>
 8002c4c:	2904      	cmp	r1, #4
 8002c4e:	d003      	beq.n	8002c58 <HAL_RCC_GetSysClockFreq+0x38>
 8002c50:	e08e      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c52:	4b4c      	ldr	r3, [pc, #304]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x164>)
 8002c54:	60bb      	str	r3, [r7, #8]
      break;
 8002c56:	e08e      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c58:	4b4b      	ldr	r3, [pc, #300]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x168>)
 8002c5a:	60bb      	str	r3, [r7, #8]
      break;
 8002c5c:	e08b      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c5e:	4948      	ldr	r1, [pc, #288]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c60:	6849      	ldr	r1, [r1, #4]
 8002c62:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002c66:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c68:	4945      	ldr	r1, [pc, #276]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c6a:	6849      	ldr	r1, [r1, #4]
 8002c6c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002c70:	2900      	cmp	r1, #0
 8002c72:	d024      	beq.n	8002cbe <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c74:	4942      	ldr	r1, [pc, #264]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c76:	6849      	ldr	r1, [r1, #4]
 8002c78:	0989      	lsrs	r1, r1, #6
 8002c7a:	4608      	mov	r0, r1
 8002c7c:	f04f 0100 	mov.w	r1, #0
 8002c80:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002c84:	f04f 0500 	mov.w	r5, #0
 8002c88:	ea00 0204 	and.w	r2, r0, r4
 8002c8c:	ea01 0305 	and.w	r3, r1, r5
 8002c90:	493d      	ldr	r1, [pc, #244]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x168>)
 8002c92:	fb01 f003 	mul.w	r0, r1, r3
 8002c96:	2100      	movs	r1, #0
 8002c98:	fb01 f102 	mul.w	r1, r1, r2
 8002c9c:	1844      	adds	r4, r0, r1
 8002c9e:	493a      	ldr	r1, [pc, #232]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x168>)
 8002ca0:	fba2 0101 	umull	r0, r1, r2, r1
 8002ca4:	1863      	adds	r3, r4, r1
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	461a      	mov	r2, r3
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	f7fd fac2 	bl	8000238 <__aeabi_uldivmod>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4613      	mov	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	e04a      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cbe:	4b30      	ldr	r3, [pc, #192]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	099b      	lsrs	r3, r3, #6
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002cce:	f04f 0100 	mov.w	r1, #0
 8002cd2:	ea02 0400 	and.w	r4, r2, r0
 8002cd6:	ea03 0501 	and.w	r5, r3, r1
 8002cda:	4620      	mov	r0, r4
 8002cdc:	4629      	mov	r1, r5
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	014b      	lsls	r3, r1, #5
 8002ce8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002cec:	0142      	lsls	r2, r0, #5
 8002cee:	4610      	mov	r0, r2
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	1b00      	subs	r0, r0, r4
 8002cf4:	eb61 0105 	sbc.w	r1, r1, r5
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	018b      	lsls	r3, r1, #6
 8002d02:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d06:	0182      	lsls	r2, r0, #6
 8002d08:	1a12      	subs	r2, r2, r0
 8002d0a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d0e:	f04f 0000 	mov.w	r0, #0
 8002d12:	f04f 0100 	mov.w	r1, #0
 8002d16:	00d9      	lsls	r1, r3, #3
 8002d18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d1c:	00d0      	lsls	r0, r2, #3
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	1912      	adds	r2, r2, r4
 8002d24:	eb45 0303 	adc.w	r3, r5, r3
 8002d28:	f04f 0000 	mov.w	r0, #0
 8002d2c:	f04f 0100 	mov.w	r1, #0
 8002d30:	0299      	lsls	r1, r3, #10
 8002d32:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d36:	0290      	lsls	r0, r2, #10
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	461a      	mov	r2, r3
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	f7fd fa76 	bl	8000238 <__aeabi_uldivmod>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4613      	mov	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d54:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	0c1b      	lsrs	r3, r3, #16
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	3301      	adds	r3, #1
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6c:	60bb      	str	r3, [r7, #8]
      break;
 8002d6e:	e002      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d70:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x164>)
 8002d72:	60bb      	str	r3, [r7, #8]
      break;
 8002d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d76:	68bb      	ldr	r3, [r7, #8]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d80:	40023800 	.word	0x40023800
 8002d84:	00f42400 	.word	0x00f42400
 8002d88:	017d7840 	.word	0x017d7840

08002d8c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d90:	4b03      	ldr	r3, [pc, #12]	; (8002da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d92:	681b      	ldr	r3, [r3, #0]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	20000000 	.word	0x20000000

08002da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002da8:	f7ff fff0 	bl	8002d8c <HAL_RCC_GetHCLKFreq>
 8002dac:	4602      	mov	r2, r0
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	0a9b      	lsrs	r3, r3, #10
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	4903      	ldr	r1, [pc, #12]	; (8002dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dba:	5ccb      	ldrb	r3, [r1, r3]
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	08005380 	.word	0x08005380

08002dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dd0:	f7ff ffdc 	bl	8002d8c <HAL_RCC_GetHCLKFreq>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	0b5b      	lsrs	r3, r3, #13
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	4903      	ldr	r1, [pc, #12]	; (8002df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002de2:	5ccb      	ldrb	r3, [r1, r3]
 8002de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40023800 	.word	0x40023800
 8002df0:	08005380 	.word	0x08005380

08002df4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b088      	sub	sp, #32
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d012      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e1c:	4b69      	ldr	r3, [pc, #420]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	4a68      	ldr	r2, [pc, #416]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e26:	6093      	str	r3, [r2, #8]
 8002e28:	4b66      	ldr	r3, [pc, #408]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e30:	4964      	ldr	r1, [pc, #400]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d017      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e4e:	4b5d      	ldr	r3, [pc, #372]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5c:	4959      	ldr	r1, [pc, #356]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d017      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e8a:	4b4e      	ldr	r3, [pc, #312]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	494a      	ldr	r1, [pc, #296]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ea8:	d101      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 808b 	beq.w	8002fee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ed8:	4b3a      	ldr	r3, [pc, #232]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	4a39      	ldr	r2, [pc, #228]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee4:	4b37      	ldr	r3, [pc, #220]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ef0:	4b35      	ldr	r3, [pc, #212]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a34      	ldr	r2, [pc, #208]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002efa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002efc:	f7fe fc14 	bl	8001728 <HAL_GetTick>
 8002f00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f04:	f7fe fc10 	bl	8001728 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b64      	cmp	r3, #100	; 0x64
 8002f10:	d901      	bls.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e38f      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f16:	4b2c      	ldr	r3, [pc, #176]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f0      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f22:	4b28      	ldr	r3, [pc, #160]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d035      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d02e      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f40:	4b20      	ldr	r3, [pc, #128]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f4a:	4b1e      	ldr	r3, [pc, #120]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4e:	4a1d      	ldr	r2, [pc, #116]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f54:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f56:	4b1b      	ldr	r3, [pc, #108]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5a:	4a1a      	ldr	r2, [pc, #104]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f62:	4a18      	ldr	r2, [pc, #96]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f68:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d114      	bne.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7fe fbd8 	bl	8001728 <HAL_GetTick>
 8002f78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7a:	e00a      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f7c:	f7fe fbd4 	bl	8001728 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e351      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f92:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0ee      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002faa:	d111      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002fac:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fb8:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fba:	400b      	ands	r3, r1
 8002fbc:	4901      	ldr	r1, [pc, #4]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	608b      	str	r3, [r1, #8]
 8002fc2:	e00b      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	40007000 	.word	0x40007000
 8002fcc:	0ffffcff 	.word	0x0ffffcff
 8002fd0:	4bb3      	ldr	r3, [pc, #716]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	4ab2      	ldr	r2, [pc, #712]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fd6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002fda:	6093      	str	r3, [r2, #8]
 8002fdc:	4bb0      	ldr	r3, [pc, #704]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe8:	49ad      	ldr	r1, [pc, #692]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0310 	and.w	r3, r3, #16
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d010      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ffa:	4ba9      	ldr	r3, [pc, #676]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003000:	4aa7      	ldr	r2, [pc, #668]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003006:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800300a:	4ba5      	ldr	r3, [pc, #660]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800300c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003014:	49a2      	ldr	r1, [pc, #648]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003016:	4313      	orrs	r3, r2
 8003018:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00a      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003028:	4b9d      	ldr	r3, [pc, #628]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800302a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003036:	499a      	ldr	r1, [pc, #616]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003038:	4313      	orrs	r3, r2
 800303a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00a      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800304a:	4b95      	ldr	r3, [pc, #596]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800304c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003050:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003058:	4991      	ldr	r1, [pc, #580]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800305a:	4313      	orrs	r3, r2
 800305c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00a      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800306c:	4b8c      	ldr	r3, [pc, #560]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800306e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003072:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800307a:	4989      	ldr	r1, [pc, #548]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800308e:	4b84      	ldr	r3, [pc, #528]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003094:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309c:	4980      	ldr	r1, [pc, #512]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00a      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030b0:	4b7b      	ldr	r3, [pc, #492]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b6:	f023 0203 	bic.w	r2, r3, #3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030be:	4978      	ldr	r1, [pc, #480]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030d2:	4b73      	ldr	r3, [pc, #460]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d8:	f023 020c 	bic.w	r2, r3, #12
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030e0:	496f      	ldr	r1, [pc, #444]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030f4:	4b6a      	ldr	r3, [pc, #424]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003102:	4967      	ldr	r1, [pc, #412]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003116:	4b62      	ldr	r3, [pc, #392]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003124:	495e      	ldr	r1, [pc, #376]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003138:	4b59      	ldr	r3, [pc, #356]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800313a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003146:	4956      	ldr	r1, [pc, #344]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800315a:	4b51      	ldr	r3, [pc, #324]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800315c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003160:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003168:	494d      	ldr	r1, [pc, #308]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800317c:	4b48      	ldr	r3, [pc, #288]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800317e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003182:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318a:	4945      	ldr	r1, [pc, #276]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800319e:	4b40      	ldr	r3, [pc, #256]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ac:	493c      	ldr	r1, [pc, #240]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00a      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031c0:	4b37      	ldr	r3, [pc, #220]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031ce:	4934      	ldr	r1, [pc, #208]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d011      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80031e2:	4b2f      	ldr	r3, [pc, #188]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031f0:	492b      	ldr	r1, [pc, #172]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003200:	d101      	bne.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003202:	2301      	movs	r3, #1
 8003204:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003212:	2301      	movs	r3, #1
 8003214:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003222:	4b1f      	ldr	r3, [pc, #124]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003228:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003230:	491b      	ldr	r1, [pc, #108]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003232:	4313      	orrs	r3, r2
 8003234:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00b      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003244:	4b16      	ldr	r3, [pc, #88]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003254:	4912      	ldr	r1, [pc, #72]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00b      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003268:	4b0d      	ldr	r3, [pc, #52]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800326a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003278:	4909      	ldr	r1, [pc, #36]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00f      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800328c:	4b04      	ldr	r3, [pc, #16]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800328e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003292:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329c:	e002      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800329e:	bf00      	nop
 80032a0:	40023800 	.word	0x40023800
 80032a4:	4986      	ldr	r1, [pc, #536]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00b      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80032b8:	4b81      	ldr	r3, [pc, #516]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032c8:	497d      	ldr	r1, [pc, #500]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d006      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 80d6 	beq.w	8003490 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80032e4:	4b76      	ldr	r3, [pc, #472]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a75      	ldr	r2, [pc, #468]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032f0:	f7fe fa1a 	bl	8001728 <HAL_GetTick>
 80032f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032f8:	f7fe fa16 	bl	8001728 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b64      	cmp	r3, #100	; 0x64
 8003304:	d901      	bls.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e195      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800330a:	4b6d      	ldr	r3, [pc, #436]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d021      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003326:	2b00      	cmp	r3, #0
 8003328:	d11d      	bne.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800332a:	4b65      	ldr	r3, [pc, #404]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800332c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003330:	0c1b      	lsrs	r3, r3, #16
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003338:	4b61      	ldr	r3, [pc, #388]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800333a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800333e:	0e1b      	lsrs	r3, r3, #24
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	019a      	lsls	r2, r3, #6
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	041b      	lsls	r3, r3, #16
 8003350:	431a      	orrs	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	061b      	lsls	r3, r3, #24
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	071b      	lsls	r3, r3, #28
 800335e:	4958      	ldr	r1, [pc, #352]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d004      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003376:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800337a:	d00a      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003384:	2b00      	cmp	r3, #0
 8003386:	d02e      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003390:	d129      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003392:	4b4b      	ldr	r3, [pc, #300]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003398:	0c1b      	lsrs	r3, r3, #16
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033a0:	4b47      	ldr	r3, [pc, #284]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033a6:	0f1b      	lsrs	r3, r3, #28
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	019a      	lsls	r2, r3, #6
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	041b      	lsls	r3, r3, #16
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	061b      	lsls	r3, r3, #24
 80033c0:	431a      	orrs	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	071b      	lsls	r3, r3, #28
 80033c6:	493e      	ldr	r1, [pc, #248]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80033ce:	4b3c      	ldr	r3, [pc, #240]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033d4:	f023 021f 	bic.w	r2, r3, #31
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	3b01      	subs	r3, #1
 80033de:	4938      	ldr	r1, [pc, #224]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d01d      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033f2:	4b33      	ldr	r3, [pc, #204]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033f8:	0e1b      	lsrs	r3, r3, #24
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003400:	4b2f      	ldr	r3, [pc, #188]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003406:	0f1b      	lsrs	r3, r3, #28
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	019a      	lsls	r2, r3, #6
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	041b      	lsls	r3, r3, #16
 800341a:	431a      	orrs	r2, r3
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	061b      	lsls	r3, r3, #24
 8003420:	431a      	orrs	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	071b      	lsls	r3, r3, #28
 8003426:	4926      	ldr	r1, [pc, #152]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d011      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	019a      	lsls	r2, r3, #6
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	041b      	lsls	r3, r3, #16
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	061b      	lsls	r3, r3, #24
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	071b      	lsls	r3, r3, #28
 8003456:	491a      	ldr	r1, [pc, #104]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003458:	4313      	orrs	r3, r2
 800345a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800345e:	4b18      	ldr	r3, [pc, #96]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a17      	ldr	r2, [pc, #92]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003464:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003468:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800346a:	f7fe f95d 	bl	8001728 <HAL_GetTick>
 800346e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003470:	e008      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003472:	f7fe f959 	bl	8001728 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b64      	cmp	r3, #100	; 0x64
 800347e:	d901      	bls.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e0d8      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003484:	4b0e      	ldr	r3, [pc, #56]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0f0      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	2b01      	cmp	r3, #1
 8003494:	f040 80ce 	bne.w	8003634 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003498:	4b09      	ldr	r3, [pc, #36]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a08      	ldr	r2, [pc, #32]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800349e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034a4:	f7fe f940 	bl	8001728 <HAL_GetTick>
 80034a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034aa:	e00b      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034ac:	f7fe f93c 	bl	8001728 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b64      	cmp	r3, #100	; 0x64
 80034b8:	d904      	bls.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e0bb      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80034be:	bf00      	nop
 80034c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034c4:	4b5e      	ldr	r3, [pc, #376]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034d0:	d0ec      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d009      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d02e      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d12a      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034fa:	4b51      	ldr	r3, [pc, #324]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003500:	0c1b      	lsrs	r3, r3, #16
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003508:	4b4d      	ldr	r3, [pc, #308]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350e:	0f1b      	lsrs	r3, r3, #28
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	019a      	lsls	r2, r3, #6
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	041b      	lsls	r3, r3, #16
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	061b      	lsls	r3, r3, #24
 8003528:	431a      	orrs	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	071b      	lsls	r3, r3, #28
 800352e:	4944      	ldr	r1, [pc, #272]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003536:	4b42      	ldr	r3, [pc, #264]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800353c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003544:	3b01      	subs	r3, #1
 8003546:	021b      	lsls	r3, r3, #8
 8003548:	493d      	ldr	r1, [pc, #244]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d022      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003560:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003564:	d11d      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003566:	4b36      	ldr	r3, [pc, #216]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356c:	0e1b      	lsrs	r3, r3, #24
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003574:	4b32      	ldr	r3, [pc, #200]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357a:	0f1b      	lsrs	r3, r3, #28
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	019a      	lsls	r2, r3, #6
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	041b      	lsls	r3, r3, #16
 800358e:	431a      	orrs	r2, r3
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	061b      	lsls	r3, r3, #24
 8003594:	431a      	orrs	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	071b      	lsls	r3, r3, #28
 800359a:	4929      	ldr	r1, [pc, #164]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d028      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035ae:	4b24      	ldr	r3, [pc, #144]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b4:	0e1b      	lsrs	r3, r3, #24
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035bc:	4b20      	ldr	r3, [pc, #128]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c2:	0c1b      	lsrs	r3, r3, #16
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	019a      	lsls	r2, r3, #6
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	041b      	lsls	r3, r3, #16
 80035d4:	431a      	orrs	r2, r3
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	061b      	lsls	r3, r3, #24
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	071b      	lsls	r3, r3, #28
 80035e2:	4917      	ldr	r1, [pc, #92]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80035ea:	4b15      	ldr	r3, [pc, #84]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	4911      	ldr	r1, [pc, #68]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003600:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a0e      	ldr	r2, [pc, #56]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800360a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800360c:	f7fe f88c 	bl	8001728 <HAL_GetTick>
 8003610:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003614:	f7fe f888 	bl	8001728 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	; 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e007      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003626:	4b06      	ldr	r3, [pc, #24]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800362e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003632:	d1ef      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3720      	adds	r7, #32
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	40023800 	.word	0x40023800

08003644 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e09d      	b.n	8003792 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	2b00      	cmp	r3, #0
 800365c:	d108      	bne.n	8003670 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003666:	d009      	beq.n	800367c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	61da      	str	r2, [r3, #28]
 800366e:	e005      	b.n	800367c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7fd fc9a 	bl	8000fd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036bc:	d902      	bls.n	80036c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80036be:	2300      	movs	r3, #0
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	e002      	b.n	80036ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80036c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80036d2:	d007      	beq.n	80036e4 <HAL_SPI_Init+0xa0>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036dc:	d002      	beq.n	80036e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80036f4:	431a      	orrs	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800371c:	431a      	orrs	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003726:	ea42 0103 	orr.w	r1, r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	0c1b      	lsrs	r3, r3, #16
 8003740:	f003 0204 	and.w	r2, r3, #4
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	f003 0310 	and.w	r3, r3, #16
 800374c:	431a      	orrs	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003760:	ea42 0103 	orr.w	r1, r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69da      	ldr	r2, [r3, #28]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003780:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b082      	sub	sp, #8
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e049      	b.n	8003840 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d106      	bne.n	80037c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7fd fe27 	bl	8001414 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2202      	movs	r2, #2
 80037ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3304      	adds	r3, #4
 80037d6:	4619      	mov	r1, r3
 80037d8:	4610      	mov	r0, r2
 80037da:	f000 fb99 	bl	8003f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e049      	b.n	80038ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fd fe14 	bl	800149c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3304      	adds	r3, #4
 8003884:	4619      	mov	r1, r3
 8003886:	4610      	mov	r0, r2
 8003888:	f000 fb42 	bl	8003f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e049      	b.n	800399c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b00      	cmp	r3, #0
 8003912:	d106      	bne.n	8003922 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f841 	bl	80039a4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2202      	movs	r2, #2
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	3304      	adds	r3, #4
 8003932:	4619      	mov	r1, r3
 8003934:	4610      	mov	r0, r2
 8003936:	f000 faeb 	bl	8003f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_TIM_IC_ConfigChannel+0x1a>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e082      	b.n	8003ad8 <HAL_TIM_IC_ConfigChannel+0x120>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d11b      	bne.n	8003a18 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6818      	ldr	r0, [r3, #0]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	6819      	ldr	r1, [r3, #0]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f000 fe1c 	bl	800462c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	699a      	ldr	r2, [r3, #24]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 020c 	bic.w	r2, r2, #12
 8003a02:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6999      	ldr	r1, [r3, #24]
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	619a      	str	r2, [r3, #24]
 8003a16:	e05a      	b.n	8003ace <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d11c      	bne.n	8003a58 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	6819      	ldr	r1, [r3, #0]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f000 fea0 	bl	8004772 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	699a      	ldr	r2, [r3, #24]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a40:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6999      	ldr	r1, [r3, #24]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	021a      	lsls	r2, r3, #8
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	619a      	str	r2, [r3, #24]
 8003a56:	e03a      	b.n	8003ace <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d11b      	bne.n	8003a96 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	6819      	ldr	r1, [r3, #0]
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f000 feed 	bl	800484c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	69da      	ldr	r2, [r3, #28]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 020c 	bic.w	r2, r2, #12
 8003a80:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	69d9      	ldr	r1, [r3, #28]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	61da      	str	r2, [r3, #28]
 8003a94:	e01b      	b.n	8003ace <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6818      	ldr	r0, [r3, #0]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	6819      	ldr	r1, [r3, #0]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f000 ff0d 	bl	80048c4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	69da      	ldr	r2, [r3, #28]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003ab8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	69d9      	ldr	r1, [r3, #28]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	021a      	lsls	r2, r3, #8
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d101      	bne.n	8003afa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003af6:	2302      	movs	r3, #2
 8003af8:	e0fd      	b.n	8003cf6 <HAL_TIM_PWM_ConfigChannel+0x216>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b14      	cmp	r3, #20
 8003b06:	f200 80f0 	bhi.w	8003cea <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003b0a:	a201      	add	r2, pc, #4	; (adr r2, 8003b10 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b10:	08003b65 	.word	0x08003b65
 8003b14:	08003ceb 	.word	0x08003ceb
 8003b18:	08003ceb 	.word	0x08003ceb
 8003b1c:	08003ceb 	.word	0x08003ceb
 8003b20:	08003ba5 	.word	0x08003ba5
 8003b24:	08003ceb 	.word	0x08003ceb
 8003b28:	08003ceb 	.word	0x08003ceb
 8003b2c:	08003ceb 	.word	0x08003ceb
 8003b30:	08003be7 	.word	0x08003be7
 8003b34:	08003ceb 	.word	0x08003ceb
 8003b38:	08003ceb 	.word	0x08003ceb
 8003b3c:	08003ceb 	.word	0x08003ceb
 8003b40:	08003c27 	.word	0x08003c27
 8003b44:	08003ceb 	.word	0x08003ceb
 8003b48:	08003ceb 	.word	0x08003ceb
 8003b4c:	08003ceb 	.word	0x08003ceb
 8003b50:	08003c69 	.word	0x08003c69
 8003b54:	08003ceb 	.word	0x08003ceb
 8003b58:	08003ceb 	.word	0x08003ceb
 8003b5c:	08003ceb 	.word	0x08003ceb
 8003b60:	08003ca9 	.word	0x08003ca9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68b9      	ldr	r1, [r7, #8]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 fa70 	bl	8004050 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 0208 	orr.w	r2, r2, #8
 8003b7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0204 	bic.w	r2, r2, #4
 8003b8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6999      	ldr	r1, [r3, #24]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	619a      	str	r2, [r3, #24]
      break;
 8003ba2:	e0a3      	b.n	8003cec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68b9      	ldr	r1, [r7, #8]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 fac2 	bl	8004134 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699a      	ldr	r2, [r3, #24]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	699a      	ldr	r2, [r3, #24]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6999      	ldr	r1, [r3, #24]
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	021a      	lsls	r2, r3, #8
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	619a      	str	r2, [r3, #24]
      break;
 8003be4:	e082      	b.n	8003cec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68b9      	ldr	r1, [r7, #8]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 fb19 	bl	8004224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69da      	ldr	r2, [r3, #28]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f042 0208 	orr.w	r2, r2, #8
 8003c00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	69da      	ldr	r2, [r3, #28]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0204 	bic.w	r2, r2, #4
 8003c10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69d9      	ldr	r1, [r3, #28]
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	691a      	ldr	r2, [r3, #16]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	61da      	str	r2, [r3, #28]
      break;
 8003c24:	e062      	b.n	8003cec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68b9      	ldr	r1, [r7, #8]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fb6f 	bl	8004310 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69da      	ldr	r2, [r3, #28]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	69da      	ldr	r2, [r3, #28]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	69d9      	ldr	r1, [r3, #28]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	021a      	lsls	r2, r3, #8
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	61da      	str	r2, [r3, #28]
      break;
 8003c66:	e041      	b.n	8003cec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68b9      	ldr	r1, [r7, #8]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fba6 	bl	80043c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0208 	orr.w	r2, r2, #8
 8003c82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0204 	bic.w	r2, r2, #4
 8003c92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	691a      	ldr	r2, [r3, #16]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003ca6:	e021      	b.n	8003cec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68b9      	ldr	r1, [r7, #8]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 fbd8 	bl	8004464 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cc2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	021a      	lsls	r2, r3, #8
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003ce8:	e000      	b.n	8003cec <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8003cea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop

08003d00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_TIM_ConfigClockSource+0x18>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e0b3      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x180>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4b55      	ldr	r3, [pc, #340]	; (8003e88 <HAL_TIM_ConfigClockSource+0x188>)
 8003d34:	4013      	ands	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d3e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d50:	d03e      	beq.n	8003dd0 <HAL_TIM_ConfigClockSource+0xd0>
 8003d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d56:	f200 8087 	bhi.w	8003e68 <HAL_TIM_ConfigClockSource+0x168>
 8003d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d5e:	f000 8085 	beq.w	8003e6c <HAL_TIM_ConfigClockSource+0x16c>
 8003d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d66:	d87f      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x168>
 8003d68:	2b70      	cmp	r3, #112	; 0x70
 8003d6a:	d01a      	beq.n	8003da2 <HAL_TIM_ConfigClockSource+0xa2>
 8003d6c:	2b70      	cmp	r3, #112	; 0x70
 8003d6e:	d87b      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x168>
 8003d70:	2b60      	cmp	r3, #96	; 0x60
 8003d72:	d050      	beq.n	8003e16 <HAL_TIM_ConfigClockSource+0x116>
 8003d74:	2b60      	cmp	r3, #96	; 0x60
 8003d76:	d877      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x168>
 8003d78:	2b50      	cmp	r3, #80	; 0x50
 8003d7a:	d03c      	beq.n	8003df6 <HAL_TIM_ConfigClockSource+0xf6>
 8003d7c:	2b50      	cmp	r3, #80	; 0x50
 8003d7e:	d873      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x168>
 8003d80:	2b40      	cmp	r3, #64	; 0x40
 8003d82:	d058      	beq.n	8003e36 <HAL_TIM_ConfigClockSource+0x136>
 8003d84:	2b40      	cmp	r3, #64	; 0x40
 8003d86:	d86f      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x168>
 8003d88:	2b30      	cmp	r3, #48	; 0x30
 8003d8a:	d064      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0x156>
 8003d8c:	2b30      	cmp	r3, #48	; 0x30
 8003d8e:	d86b      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x168>
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d060      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0x156>
 8003d94:	2b20      	cmp	r3, #32
 8003d96:	d867      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x168>
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d05c      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0x156>
 8003d9c:	2b10      	cmp	r3, #16
 8003d9e:	d05a      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003da0:	e062      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6899      	ldr	r1, [r3, #8]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f000 fddf 	bl	8004974 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dc4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	609a      	str	r2, [r3, #8]
      break;
 8003dce:	e04e      	b.n	8003e6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6818      	ldr	r0, [r3, #0]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	6899      	ldr	r1, [r3, #8]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f000 fdc8 	bl	8004974 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003df2:	609a      	str	r2, [r3, #8]
      break;
 8003df4:	e03b      	b.n	8003e6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6818      	ldr	r0, [r3, #0]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	6859      	ldr	r1, [r3, #4]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	461a      	mov	r2, r3
 8003e04:	f000 fc86 	bl	8004714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2150      	movs	r1, #80	; 0x50
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fd95 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 8003e14:	e02b      	b.n	8003e6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	6859      	ldr	r1, [r3, #4]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	461a      	mov	r2, r3
 8003e24:	f000 fce2 	bl	80047ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2160      	movs	r1, #96	; 0x60
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fd85 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 8003e34:	e01b      	b.n	8003e6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6818      	ldr	r0, [r3, #0]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	6859      	ldr	r1, [r3, #4]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	461a      	mov	r2, r3
 8003e44:	f000 fc66 	bl	8004714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2140      	movs	r1, #64	; 0x40
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fd75 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 8003e54:	e00b      	b.n	8003e6e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4610      	mov	r0, r2
 8003e62:	f000 fd6c 	bl	800493e <TIM_ITRx_SetConfig>
        break;
 8003e66:	e002      	b.n	8003e6e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e68:	bf00      	nop
 8003e6a:	e000      	b.n	8003e6e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e6c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	fffeff88 	.word	0xfffeff88

08003e8c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e031      	b.n	8003f08 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003eb4:	6839      	ldr	r1, [r7, #0]
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 fb28 	bl	800450c <TIM_SlaveTimer_SetConfig>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d009      	beq.n	8003ed6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e018      	b.n	8003f08 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ee4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68da      	ldr	r2, [r3, #12]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ef4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a40      	ldr	r2, [pc, #256]	; (8004024 <TIM_Base_SetConfig+0x114>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d013      	beq.n	8003f50 <TIM_Base_SetConfig+0x40>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2e:	d00f      	beq.n	8003f50 <TIM_Base_SetConfig+0x40>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a3d      	ldr	r2, [pc, #244]	; (8004028 <TIM_Base_SetConfig+0x118>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d00b      	beq.n	8003f50 <TIM_Base_SetConfig+0x40>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a3c      	ldr	r2, [pc, #240]	; (800402c <TIM_Base_SetConfig+0x11c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d007      	beq.n	8003f50 <TIM_Base_SetConfig+0x40>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a3b      	ldr	r2, [pc, #236]	; (8004030 <TIM_Base_SetConfig+0x120>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d003      	beq.n	8003f50 <TIM_Base_SetConfig+0x40>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a3a      	ldr	r2, [pc, #232]	; (8004034 <TIM_Base_SetConfig+0x124>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d108      	bne.n	8003f62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a2f      	ldr	r2, [pc, #188]	; (8004024 <TIM_Base_SetConfig+0x114>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d02b      	beq.n	8003fc2 <TIM_Base_SetConfig+0xb2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f70:	d027      	beq.n	8003fc2 <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a2c      	ldr	r2, [pc, #176]	; (8004028 <TIM_Base_SetConfig+0x118>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d023      	beq.n	8003fc2 <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a2b      	ldr	r2, [pc, #172]	; (800402c <TIM_Base_SetConfig+0x11c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d01f      	beq.n	8003fc2 <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a2a      	ldr	r2, [pc, #168]	; (8004030 <TIM_Base_SetConfig+0x120>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d01b      	beq.n	8003fc2 <TIM_Base_SetConfig+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a29      	ldr	r2, [pc, #164]	; (8004034 <TIM_Base_SetConfig+0x124>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d017      	beq.n	8003fc2 <TIM_Base_SetConfig+0xb2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a28      	ldr	r2, [pc, #160]	; (8004038 <TIM_Base_SetConfig+0x128>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d013      	beq.n	8003fc2 <TIM_Base_SetConfig+0xb2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a27      	ldr	r2, [pc, #156]	; (800403c <TIM_Base_SetConfig+0x12c>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d00f      	beq.n	8003fc2 <TIM_Base_SetConfig+0xb2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a26      	ldr	r2, [pc, #152]	; (8004040 <TIM_Base_SetConfig+0x130>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00b      	beq.n	8003fc2 <TIM_Base_SetConfig+0xb2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a25      	ldr	r2, [pc, #148]	; (8004044 <TIM_Base_SetConfig+0x134>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d007      	beq.n	8003fc2 <TIM_Base_SetConfig+0xb2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a24      	ldr	r2, [pc, #144]	; (8004048 <TIM_Base_SetConfig+0x138>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d003      	beq.n	8003fc2 <TIM_Base_SetConfig+0xb2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a23      	ldr	r2, [pc, #140]	; (800404c <TIM_Base_SetConfig+0x13c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d108      	bne.n	8003fd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a0a      	ldr	r2, [pc, #40]	; (8004024 <TIM_Base_SetConfig+0x114>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d003      	beq.n	8004008 <TIM_Base_SetConfig+0xf8>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a0c      	ldr	r2, [pc, #48]	; (8004034 <TIM_Base_SetConfig+0x124>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d103      	bne.n	8004010 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	691a      	ldr	r2, [r3, #16]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	615a      	str	r2, [r3, #20]
}
 8004016:	bf00      	nop
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	40010000 	.word	0x40010000
 8004028:	40000400 	.word	0x40000400
 800402c:	40000800 	.word	0x40000800
 8004030:	40000c00 	.word	0x40000c00
 8004034:	40010400 	.word	0x40010400
 8004038:	40014000 	.word	0x40014000
 800403c:	40014400 	.word	0x40014400
 8004040:	40014800 	.word	0x40014800
 8004044:	40001800 	.word	0x40001800
 8004048:	40001c00 	.word	0x40001c00
 800404c:	40002000 	.word	0x40002000

08004050 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	f023 0201 	bic.w	r2, r3, #1
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	4b2b      	ldr	r3, [pc, #172]	; (8004128 <TIM_OC1_SetConfig+0xd8>)
 800407c:	4013      	ands	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0303 	bic.w	r3, r3, #3
 8004086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f023 0302 	bic.w	r3, r3, #2
 8004098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a21      	ldr	r2, [pc, #132]	; (800412c <TIM_OC1_SetConfig+0xdc>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d003      	beq.n	80040b4 <TIM_OC1_SetConfig+0x64>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a20      	ldr	r2, [pc, #128]	; (8004130 <TIM_OC1_SetConfig+0xe0>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d10c      	bne.n	80040ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f023 0308 	bic.w	r3, r3, #8
 80040ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f023 0304 	bic.w	r3, r3, #4
 80040cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a16      	ldr	r2, [pc, #88]	; (800412c <TIM_OC1_SetConfig+0xdc>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d003      	beq.n	80040de <TIM_OC1_SetConfig+0x8e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a15      	ldr	r2, [pc, #84]	; (8004130 <TIM_OC1_SetConfig+0xe0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d111      	bne.n	8004102 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	621a      	str	r2, [r3, #32]
}
 800411c:	bf00      	nop
 800411e:	371c      	adds	r7, #28
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	fffeff8f 	.word	0xfffeff8f
 800412c:	40010000 	.word	0x40010000
 8004130:	40010400 	.word	0x40010400

08004134 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	f023 0210 	bic.w	r2, r3, #16
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	4b2e      	ldr	r3, [pc, #184]	; (8004218 <TIM_OC2_SetConfig+0xe4>)
 8004160:	4013      	ands	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800416a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	021b      	lsls	r3, r3, #8
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4313      	orrs	r3, r2
 8004176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f023 0320 	bic.w	r3, r3, #32
 800417e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	4313      	orrs	r3, r2
 800418a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a23      	ldr	r2, [pc, #140]	; (800421c <TIM_OC2_SetConfig+0xe8>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d003      	beq.n	800419c <TIM_OC2_SetConfig+0x68>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a22      	ldr	r2, [pc, #136]	; (8004220 <TIM_OC2_SetConfig+0xec>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d10d      	bne.n	80041b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a18      	ldr	r2, [pc, #96]	; (800421c <TIM_OC2_SetConfig+0xe8>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d003      	beq.n	80041c8 <TIM_OC2_SetConfig+0x94>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a17      	ldr	r2, [pc, #92]	; (8004220 <TIM_OC2_SetConfig+0xec>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d113      	bne.n	80041f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	621a      	str	r2, [r3, #32]
}
 800420a:	bf00      	nop
 800420c:	371c      	adds	r7, #28
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	feff8fff 	.word	0xfeff8fff
 800421c:	40010000 	.word	0x40010000
 8004220:	40010400 	.word	0x40010400

08004224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	4b2d      	ldr	r3, [pc, #180]	; (8004304 <TIM_OC3_SetConfig+0xe0>)
 8004250:	4013      	ands	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0303 	bic.w	r3, r3, #3
 800425a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800426c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	021b      	lsls	r3, r3, #8
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a22      	ldr	r2, [pc, #136]	; (8004308 <TIM_OC3_SetConfig+0xe4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d003      	beq.n	800428a <TIM_OC3_SetConfig+0x66>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a21      	ldr	r2, [pc, #132]	; (800430c <TIM_OC3_SetConfig+0xe8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d10d      	bne.n	80042a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a17      	ldr	r2, [pc, #92]	; (8004308 <TIM_OC3_SetConfig+0xe4>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d003      	beq.n	80042b6 <TIM_OC3_SetConfig+0x92>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a16      	ldr	r2, [pc, #88]	; (800430c <TIM_OC3_SetConfig+0xe8>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d113      	bne.n	80042de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	621a      	str	r2, [r3, #32]
}
 80042f8:	bf00      	nop
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	fffeff8f 	.word	0xfffeff8f
 8004308:	40010000 	.word	0x40010000
 800430c:	40010400 	.word	0x40010400

08004310 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4b1e      	ldr	r3, [pc, #120]	; (80043b4 <TIM_OC4_SetConfig+0xa4>)
 800433c:	4013      	ands	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	021b      	lsls	r3, r3, #8
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800435a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	031b      	lsls	r3, r3, #12
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	4313      	orrs	r3, r2
 8004366:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a13      	ldr	r2, [pc, #76]	; (80043b8 <TIM_OC4_SetConfig+0xa8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d003      	beq.n	8004378 <TIM_OC4_SetConfig+0x68>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a12      	ldr	r2, [pc, #72]	; (80043bc <TIM_OC4_SetConfig+0xac>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d109      	bne.n	800438c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800437e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	019b      	lsls	r3, r3, #6
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	621a      	str	r2, [r3, #32]
}
 80043a6:	bf00      	nop
 80043a8:	371c      	adds	r7, #28
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	feff8fff 	.word	0xfeff8fff
 80043b8:	40010000 	.word	0x40010000
 80043bc:	40010400 	.word	0x40010400

080043c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	4b1b      	ldr	r3, [pc, #108]	; (8004458 <TIM_OC5_SetConfig+0x98>)
 80043ec:	4013      	ands	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004400:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	041b      	lsls	r3, r3, #16
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a12      	ldr	r2, [pc, #72]	; (800445c <TIM_OC5_SetConfig+0x9c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d003      	beq.n	800441e <TIM_OC5_SetConfig+0x5e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a11      	ldr	r2, [pc, #68]	; (8004460 <TIM_OC5_SetConfig+0xa0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d109      	bne.n	8004432 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004424:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	021b      	lsls	r3, r3, #8
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	4313      	orrs	r3, r2
 8004430:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	621a      	str	r2, [r3, #32]
}
 800444c:	bf00      	nop
 800444e:	371c      	adds	r7, #28
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	fffeff8f 	.word	0xfffeff8f
 800445c:	40010000 	.word	0x40010000
 8004460:	40010400 	.word	0x40010400

08004464 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4b1c      	ldr	r3, [pc, #112]	; (8004500 <TIM_OC6_SetConfig+0x9c>)
 8004490:	4013      	ands	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	021b      	lsls	r3, r3, #8
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4313      	orrs	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80044a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	051b      	lsls	r3, r3, #20
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a13      	ldr	r2, [pc, #76]	; (8004504 <TIM_OC6_SetConfig+0xa0>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d003      	beq.n	80044c4 <TIM_OC6_SetConfig+0x60>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a12      	ldr	r2, [pc, #72]	; (8004508 <TIM_OC6_SetConfig+0xa4>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d109      	bne.n	80044d8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	029b      	lsls	r3, r3, #10
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	621a      	str	r2, [r3, #32]
}
 80044f2:	bf00      	nop
 80044f4:	371c      	adds	r7, #28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	feff8fff 	.word	0xfeff8fff
 8004504:	40010000 	.word	0x40010000
 8004508:	40010400 	.word	0x40010400

0800450c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004524:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	4b3d      	ldr	r3, [pc, #244]	; (8004628 <TIM_SlaveTimer_SetConfig+0x11c>)
 8004534:	4013      	ands	r3, r2
 8004536:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	4313      	orrs	r3, r2
 8004540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b70      	cmp	r3, #112	; 0x70
 8004550:	d01a      	beq.n	8004588 <TIM_SlaveTimer_SetConfig+0x7c>
 8004552:	2b70      	cmp	r3, #112	; 0x70
 8004554:	d860      	bhi.n	8004618 <TIM_SlaveTimer_SetConfig+0x10c>
 8004556:	2b60      	cmp	r3, #96	; 0x60
 8004558:	d054      	beq.n	8004604 <TIM_SlaveTimer_SetConfig+0xf8>
 800455a:	2b60      	cmp	r3, #96	; 0x60
 800455c:	d85c      	bhi.n	8004618 <TIM_SlaveTimer_SetConfig+0x10c>
 800455e:	2b50      	cmp	r3, #80	; 0x50
 8004560:	d046      	beq.n	80045f0 <TIM_SlaveTimer_SetConfig+0xe4>
 8004562:	2b50      	cmp	r3, #80	; 0x50
 8004564:	d858      	bhi.n	8004618 <TIM_SlaveTimer_SetConfig+0x10c>
 8004566:	2b40      	cmp	r3, #64	; 0x40
 8004568:	d019      	beq.n	800459e <TIM_SlaveTimer_SetConfig+0x92>
 800456a:	2b40      	cmp	r3, #64	; 0x40
 800456c:	d854      	bhi.n	8004618 <TIM_SlaveTimer_SetConfig+0x10c>
 800456e:	2b30      	cmp	r3, #48	; 0x30
 8004570:	d054      	beq.n	800461c <TIM_SlaveTimer_SetConfig+0x110>
 8004572:	2b30      	cmp	r3, #48	; 0x30
 8004574:	d850      	bhi.n	8004618 <TIM_SlaveTimer_SetConfig+0x10c>
 8004576:	2b20      	cmp	r3, #32
 8004578:	d050      	beq.n	800461c <TIM_SlaveTimer_SetConfig+0x110>
 800457a:	2b20      	cmp	r3, #32
 800457c:	d84c      	bhi.n	8004618 <TIM_SlaveTimer_SetConfig+0x10c>
 800457e:	2b00      	cmp	r3, #0
 8004580:	d04c      	beq.n	800461c <TIM_SlaveTimer_SetConfig+0x110>
 8004582:	2b10      	cmp	r3, #16
 8004584:	d04a      	beq.n	800461c <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8004586:	e047      	b.n	8004618 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6818      	ldr	r0, [r3, #0]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	68d9      	ldr	r1, [r3, #12]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	f000 f9ec 	bl	8004974 <TIM_ETR_SetConfig>
      break;
 800459c:	e03f      	b.n	800461e <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b05      	cmp	r3, #5
 80045a4:	d101      	bne.n	80045aa <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e03a      	b.n	8004620 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6a1a      	ldr	r2, [r3, #32]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0201 	bic.w	r2, r2, #1
 80045c0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045d0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	621a      	str	r2, [r3, #32]
      break;
 80045ee:	e016      	b.n	800461e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6818      	ldr	r0, [r3, #0]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	6899      	ldr	r1, [r3, #8]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	461a      	mov	r2, r3
 80045fe:	f000 f889 	bl	8004714 <TIM_TI1_ConfigInputStage>
      break;
 8004602:	e00c      	b.n	800461e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6818      	ldr	r0, [r3, #0]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	6899      	ldr	r1, [r3, #8]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	461a      	mov	r2, r3
 8004612:	f000 f8eb 	bl	80047ec <TIM_TI2_ConfigInputStage>
      break;
 8004616:	e002      	b.n	800461e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8004618:	bf00      	nop
 800461a:	e000      	b.n	800461e <TIM_SlaveTimer_SetConfig+0x112>
        break;
 800461c:	bf00      	nop
  }
  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	fffefff8 	.word	0xfffefff8

0800462c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
 8004638:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	f023 0201 	bic.w	r2, r3, #1
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	4a28      	ldr	r2, [pc, #160]	; (80046f8 <TIM_TI1_SetConfig+0xcc>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d01b      	beq.n	8004692 <TIM_TI1_SetConfig+0x66>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004660:	d017      	beq.n	8004692 <TIM_TI1_SetConfig+0x66>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4a25      	ldr	r2, [pc, #148]	; (80046fc <TIM_TI1_SetConfig+0xd0>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d013      	beq.n	8004692 <TIM_TI1_SetConfig+0x66>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4a24      	ldr	r2, [pc, #144]	; (8004700 <TIM_TI1_SetConfig+0xd4>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d00f      	beq.n	8004692 <TIM_TI1_SetConfig+0x66>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	4a23      	ldr	r2, [pc, #140]	; (8004704 <TIM_TI1_SetConfig+0xd8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d00b      	beq.n	8004692 <TIM_TI1_SetConfig+0x66>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4a22      	ldr	r2, [pc, #136]	; (8004708 <TIM_TI1_SetConfig+0xdc>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d007      	beq.n	8004692 <TIM_TI1_SetConfig+0x66>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	4a21      	ldr	r2, [pc, #132]	; (800470c <TIM_TI1_SetConfig+0xe0>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d003      	beq.n	8004692 <TIM_TI1_SetConfig+0x66>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4a20      	ldr	r2, [pc, #128]	; (8004710 <TIM_TI1_SetConfig+0xe4>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d101      	bne.n	8004696 <TIM_TI1_SetConfig+0x6a>
 8004692:	2301      	movs	r3, #1
 8004694:	e000      	b.n	8004698 <TIM_TI1_SetConfig+0x6c>
 8004696:	2300      	movs	r3, #0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d008      	beq.n	80046ae <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f023 0303 	bic.w	r3, r3, #3
 80046a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	e003      	b.n	80046b6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	011b      	lsls	r3, r3, #4
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	f023 030a 	bic.w	r3, r3, #10
 80046d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f003 030a 	and.w	r3, r3, #10
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	4313      	orrs	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	621a      	str	r2, [r3, #32]
}
 80046ea:	bf00      	nop
 80046ec:	371c      	adds	r7, #28
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	40010000 	.word	0x40010000
 80046fc:	40000400 	.word	0x40000400
 8004700:	40000800 	.word	0x40000800
 8004704:	40000c00 	.word	0x40000c00
 8004708:	40010400 	.word	0x40010400
 800470c:	40014000 	.word	0x40014000
 8004710:	40001800 	.word	0x40001800

08004714 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	f023 0201 	bic.w	r2, r3, #1
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800473e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	011b      	lsls	r3, r3, #4
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	4313      	orrs	r3, r2
 8004748:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f023 030a 	bic.w	r3, r3, #10
 8004750:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4313      	orrs	r3, r2
 8004758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	621a      	str	r2, [r3, #32]
}
 8004766:	bf00      	nop
 8004768:	371c      	adds	r7, #28
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004772:	b480      	push	{r7}
 8004774:	b087      	sub	sp, #28
 8004776:	af00      	add	r7, sp, #0
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	607a      	str	r2, [r7, #4]
 800477e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	f023 0210 	bic.w	r2, r3, #16
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800479e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	021b      	lsls	r3, r3, #8
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	031b      	lsls	r3, r3, #12
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	621a      	str	r2, [r3, #32]
}
 80047e0:	bf00      	nop
 80047e2:	371c      	adds	r7, #28
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	f023 0210 	bic.w	r2, r3, #16
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004816:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	031b      	lsls	r3, r3, #12
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	4313      	orrs	r3, r2
 8004820:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004828:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	011b      	lsls	r3, r3, #4
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	4313      	orrs	r3, r2
 8004832:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	621a      	str	r2, [r3, #32]
}
 8004840:	bf00      	nop
 8004842:	371c      	adds	r7, #28
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800484c:	b480      	push	{r7}
 800484e:	b087      	sub	sp, #28
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
 8004858:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f023 0303 	bic.w	r3, r3, #3
 8004878:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4313      	orrs	r3, r2
 8004880:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004888:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	011b      	lsls	r3, r3, #4
 800488e:	b2db      	uxtb	r3, r3
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800489c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	021b      	lsls	r3, r3, #8
 80048a2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	621a      	str	r2, [r3, #32]
}
 80048b8:	bf00      	nop
 80048ba:	371c      	adds	r7, #28
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b087      	sub	sp, #28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	021b      	lsls	r3, r3, #8
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004902:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	031b      	lsls	r3, r3, #12
 8004908:	b29b      	uxth	r3, r3
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4313      	orrs	r3, r2
 800490e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004916:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	031b      	lsls	r3, r3, #12
 800491c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	621a      	str	r2, [r3, #32]
}
 8004932:	bf00      	nop
 8004934:	371c      	adds	r7, #28
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800493e:	b480      	push	{r7}
 8004940:	b085      	sub	sp, #20
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004954:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	f043 0307 	orr.w	r3, r3, #7
 8004960:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	609a      	str	r2, [r3, #8]
}
 8004968:	bf00      	nop
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800498e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	021a      	lsls	r2, r3, #8
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	431a      	orrs	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	4313      	orrs	r3, r2
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	609a      	str	r2, [r3, #8]
}
 80049a8:	bf00      	nop
 80049aa:	371c      	adds	r7, #28
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e06d      	b.n	8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a30      	ldr	r2, [pc, #192]	; (8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d004      	beq.n	8004a00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a2f      	ldr	r2, [pc, #188]	; (8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d108      	bne.n	8004a12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a20      	ldr	r2, [pc, #128]	; (8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d022      	beq.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a3e:	d01d      	beq.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a1d      	ldr	r2, [pc, #116]	; (8004abc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d018      	beq.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a1c      	ldr	r2, [pc, #112]	; (8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d013      	beq.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a1a      	ldr	r2, [pc, #104]	; (8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d00e      	beq.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a15      	ldr	r2, [pc, #84]	; (8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d009      	beq.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a16      	ldr	r2, [pc, #88]	; (8004ac8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d004      	beq.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a15      	ldr	r2, [pc, #84]	; (8004acc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d10c      	bne.n	8004a96 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	40010000 	.word	0x40010000
 8004ab8:	40010400 	.word	0x40010400
 8004abc:	40000400 	.word	0x40000400
 8004ac0:	40000800 	.word	0x40000800
 8004ac4:	40000c00 	.word	0x40000c00
 8004ac8:	40014000 	.word	0x40014000
 8004acc:	40001800 	.word	0x40001800

08004ad0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e040      	b.n	8004b64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d106      	bne.n	8004af8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7fc fd5a 	bl	80015ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2224      	movs	r2, #36	; 0x24
 8004afc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0201 	bic.w	r2, r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f82c 	bl	8004b6c <UART_SetConfig>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d101      	bne.n	8004b1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e022      	b.n	8004b64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fa82 	bl	8005030 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689a      	ldr	r2, [r3, #8]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0201 	orr.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 fb09 	bl	8005174 <UART_CheckIdleState>
 8004b62:	4603      	mov	r3, r0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b088      	sub	sp, #32
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	431a      	orrs	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	431a      	orrs	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	4ba7      	ldr	r3, [pc, #668]	; (8004e34 <UART_SetConfig+0x2c8>)
 8004b98:	4013      	ands	r3, r2
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6812      	ldr	r2, [r2, #0]
 8004b9e:	6979      	ldr	r1, [r7, #20]
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68da      	ldr	r2, [r3, #12]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a95      	ldr	r2, [pc, #596]	; (8004e38 <UART_SetConfig+0x2cc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d120      	bne.n	8004c2a <UART_SetConfig+0xbe>
 8004be8:	4b94      	ldr	r3, [pc, #592]	; (8004e3c <UART_SetConfig+0x2d0>)
 8004bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	2b03      	cmp	r3, #3
 8004bf4:	d816      	bhi.n	8004c24 <UART_SetConfig+0xb8>
 8004bf6:	a201      	add	r2, pc, #4	; (adr r2, 8004bfc <UART_SetConfig+0x90>)
 8004bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfc:	08004c0d 	.word	0x08004c0d
 8004c00:	08004c19 	.word	0x08004c19
 8004c04:	08004c13 	.word	0x08004c13
 8004c08:	08004c1f 	.word	0x08004c1f
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	77fb      	strb	r3, [r7, #31]
 8004c10:	e14f      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004c12:	2302      	movs	r3, #2
 8004c14:	77fb      	strb	r3, [r7, #31]
 8004c16:	e14c      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004c18:	2304      	movs	r3, #4
 8004c1a:	77fb      	strb	r3, [r7, #31]
 8004c1c:	e149      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004c1e:	2308      	movs	r3, #8
 8004c20:	77fb      	strb	r3, [r7, #31]
 8004c22:	e146      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004c24:	2310      	movs	r3, #16
 8004c26:	77fb      	strb	r3, [r7, #31]
 8004c28:	e143      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a84      	ldr	r2, [pc, #528]	; (8004e40 <UART_SetConfig+0x2d4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d132      	bne.n	8004c9a <UART_SetConfig+0x12e>
 8004c34:	4b81      	ldr	r3, [pc, #516]	; (8004e3c <UART_SetConfig+0x2d0>)
 8004c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3a:	f003 030c 	and.w	r3, r3, #12
 8004c3e:	2b0c      	cmp	r3, #12
 8004c40:	d828      	bhi.n	8004c94 <UART_SetConfig+0x128>
 8004c42:	a201      	add	r2, pc, #4	; (adr r2, 8004c48 <UART_SetConfig+0xdc>)
 8004c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c48:	08004c7d 	.word	0x08004c7d
 8004c4c:	08004c95 	.word	0x08004c95
 8004c50:	08004c95 	.word	0x08004c95
 8004c54:	08004c95 	.word	0x08004c95
 8004c58:	08004c89 	.word	0x08004c89
 8004c5c:	08004c95 	.word	0x08004c95
 8004c60:	08004c95 	.word	0x08004c95
 8004c64:	08004c95 	.word	0x08004c95
 8004c68:	08004c83 	.word	0x08004c83
 8004c6c:	08004c95 	.word	0x08004c95
 8004c70:	08004c95 	.word	0x08004c95
 8004c74:	08004c95 	.word	0x08004c95
 8004c78:	08004c8f 	.word	0x08004c8f
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	77fb      	strb	r3, [r7, #31]
 8004c80:	e117      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004c82:	2302      	movs	r3, #2
 8004c84:	77fb      	strb	r3, [r7, #31]
 8004c86:	e114      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004c88:	2304      	movs	r3, #4
 8004c8a:	77fb      	strb	r3, [r7, #31]
 8004c8c:	e111      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004c8e:	2308      	movs	r3, #8
 8004c90:	77fb      	strb	r3, [r7, #31]
 8004c92:	e10e      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004c94:	2310      	movs	r3, #16
 8004c96:	77fb      	strb	r3, [r7, #31]
 8004c98:	e10b      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a69      	ldr	r2, [pc, #420]	; (8004e44 <UART_SetConfig+0x2d8>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d120      	bne.n	8004ce6 <UART_SetConfig+0x17a>
 8004ca4:	4b65      	ldr	r3, [pc, #404]	; (8004e3c <UART_SetConfig+0x2d0>)
 8004ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004caa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004cae:	2b30      	cmp	r3, #48	; 0x30
 8004cb0:	d013      	beq.n	8004cda <UART_SetConfig+0x16e>
 8004cb2:	2b30      	cmp	r3, #48	; 0x30
 8004cb4:	d814      	bhi.n	8004ce0 <UART_SetConfig+0x174>
 8004cb6:	2b20      	cmp	r3, #32
 8004cb8:	d009      	beq.n	8004cce <UART_SetConfig+0x162>
 8004cba:	2b20      	cmp	r3, #32
 8004cbc:	d810      	bhi.n	8004ce0 <UART_SetConfig+0x174>
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <UART_SetConfig+0x15c>
 8004cc2:	2b10      	cmp	r3, #16
 8004cc4:	d006      	beq.n	8004cd4 <UART_SetConfig+0x168>
 8004cc6:	e00b      	b.n	8004ce0 <UART_SetConfig+0x174>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	77fb      	strb	r3, [r7, #31]
 8004ccc:	e0f1      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004cce:	2302      	movs	r3, #2
 8004cd0:	77fb      	strb	r3, [r7, #31]
 8004cd2:	e0ee      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004cd4:	2304      	movs	r3, #4
 8004cd6:	77fb      	strb	r3, [r7, #31]
 8004cd8:	e0eb      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004cda:	2308      	movs	r3, #8
 8004cdc:	77fb      	strb	r3, [r7, #31]
 8004cde:	e0e8      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004ce0:	2310      	movs	r3, #16
 8004ce2:	77fb      	strb	r3, [r7, #31]
 8004ce4:	e0e5      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a57      	ldr	r2, [pc, #348]	; (8004e48 <UART_SetConfig+0x2dc>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d120      	bne.n	8004d32 <UART_SetConfig+0x1c6>
 8004cf0:	4b52      	ldr	r3, [pc, #328]	; (8004e3c <UART_SetConfig+0x2d0>)
 8004cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004cfa:	2bc0      	cmp	r3, #192	; 0xc0
 8004cfc:	d013      	beq.n	8004d26 <UART_SetConfig+0x1ba>
 8004cfe:	2bc0      	cmp	r3, #192	; 0xc0
 8004d00:	d814      	bhi.n	8004d2c <UART_SetConfig+0x1c0>
 8004d02:	2b80      	cmp	r3, #128	; 0x80
 8004d04:	d009      	beq.n	8004d1a <UART_SetConfig+0x1ae>
 8004d06:	2b80      	cmp	r3, #128	; 0x80
 8004d08:	d810      	bhi.n	8004d2c <UART_SetConfig+0x1c0>
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <UART_SetConfig+0x1a8>
 8004d0e:	2b40      	cmp	r3, #64	; 0x40
 8004d10:	d006      	beq.n	8004d20 <UART_SetConfig+0x1b4>
 8004d12:	e00b      	b.n	8004d2c <UART_SetConfig+0x1c0>
 8004d14:	2300      	movs	r3, #0
 8004d16:	77fb      	strb	r3, [r7, #31]
 8004d18:	e0cb      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	77fb      	strb	r3, [r7, #31]
 8004d1e:	e0c8      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004d20:	2304      	movs	r3, #4
 8004d22:	77fb      	strb	r3, [r7, #31]
 8004d24:	e0c5      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004d26:	2308      	movs	r3, #8
 8004d28:	77fb      	strb	r3, [r7, #31]
 8004d2a:	e0c2      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004d2c:	2310      	movs	r3, #16
 8004d2e:	77fb      	strb	r3, [r7, #31]
 8004d30:	e0bf      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a45      	ldr	r2, [pc, #276]	; (8004e4c <UART_SetConfig+0x2e0>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d125      	bne.n	8004d88 <UART_SetConfig+0x21c>
 8004d3c:	4b3f      	ldr	r3, [pc, #252]	; (8004e3c <UART_SetConfig+0x2d0>)
 8004d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d4a:	d017      	beq.n	8004d7c <UART_SetConfig+0x210>
 8004d4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d50:	d817      	bhi.n	8004d82 <UART_SetConfig+0x216>
 8004d52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d56:	d00b      	beq.n	8004d70 <UART_SetConfig+0x204>
 8004d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d5c:	d811      	bhi.n	8004d82 <UART_SetConfig+0x216>
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <UART_SetConfig+0x1fe>
 8004d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d66:	d006      	beq.n	8004d76 <UART_SetConfig+0x20a>
 8004d68:	e00b      	b.n	8004d82 <UART_SetConfig+0x216>
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	77fb      	strb	r3, [r7, #31]
 8004d6e:	e0a0      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004d70:	2302      	movs	r3, #2
 8004d72:	77fb      	strb	r3, [r7, #31]
 8004d74:	e09d      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004d76:	2304      	movs	r3, #4
 8004d78:	77fb      	strb	r3, [r7, #31]
 8004d7a:	e09a      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004d7c:	2308      	movs	r3, #8
 8004d7e:	77fb      	strb	r3, [r7, #31]
 8004d80:	e097      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004d82:	2310      	movs	r3, #16
 8004d84:	77fb      	strb	r3, [r7, #31]
 8004d86:	e094      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a30      	ldr	r2, [pc, #192]	; (8004e50 <UART_SetConfig+0x2e4>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d125      	bne.n	8004dde <UART_SetConfig+0x272>
 8004d92:	4b2a      	ldr	r3, [pc, #168]	; (8004e3c <UART_SetConfig+0x2d0>)
 8004d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004da0:	d017      	beq.n	8004dd2 <UART_SetConfig+0x266>
 8004da2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004da6:	d817      	bhi.n	8004dd8 <UART_SetConfig+0x26c>
 8004da8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dac:	d00b      	beq.n	8004dc6 <UART_SetConfig+0x25a>
 8004dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004db2:	d811      	bhi.n	8004dd8 <UART_SetConfig+0x26c>
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <UART_SetConfig+0x254>
 8004db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dbc:	d006      	beq.n	8004dcc <UART_SetConfig+0x260>
 8004dbe:	e00b      	b.n	8004dd8 <UART_SetConfig+0x26c>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	77fb      	strb	r3, [r7, #31]
 8004dc4:	e075      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	77fb      	strb	r3, [r7, #31]
 8004dca:	e072      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004dcc:	2304      	movs	r3, #4
 8004dce:	77fb      	strb	r3, [r7, #31]
 8004dd0:	e06f      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004dd2:	2308      	movs	r3, #8
 8004dd4:	77fb      	strb	r3, [r7, #31]
 8004dd6:	e06c      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004dd8:	2310      	movs	r3, #16
 8004dda:	77fb      	strb	r3, [r7, #31]
 8004ddc:	e069      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a1c      	ldr	r2, [pc, #112]	; (8004e54 <UART_SetConfig+0x2e8>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d137      	bne.n	8004e58 <UART_SetConfig+0x2ec>
 8004de8:	4b14      	ldr	r3, [pc, #80]	; (8004e3c <UART_SetConfig+0x2d0>)
 8004dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004df2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004df6:	d017      	beq.n	8004e28 <UART_SetConfig+0x2bc>
 8004df8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dfc:	d817      	bhi.n	8004e2e <UART_SetConfig+0x2c2>
 8004dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e02:	d00b      	beq.n	8004e1c <UART_SetConfig+0x2b0>
 8004e04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e08:	d811      	bhi.n	8004e2e <UART_SetConfig+0x2c2>
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <UART_SetConfig+0x2aa>
 8004e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e12:	d006      	beq.n	8004e22 <UART_SetConfig+0x2b6>
 8004e14:	e00b      	b.n	8004e2e <UART_SetConfig+0x2c2>
 8004e16:	2300      	movs	r3, #0
 8004e18:	77fb      	strb	r3, [r7, #31]
 8004e1a:	e04a      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	77fb      	strb	r3, [r7, #31]
 8004e20:	e047      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004e22:	2304      	movs	r3, #4
 8004e24:	77fb      	strb	r3, [r7, #31]
 8004e26:	e044      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004e28:	2308      	movs	r3, #8
 8004e2a:	77fb      	strb	r3, [r7, #31]
 8004e2c:	e041      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004e2e:	2310      	movs	r3, #16
 8004e30:	77fb      	strb	r3, [r7, #31]
 8004e32:	e03e      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004e34:	efff69f3 	.word	0xefff69f3
 8004e38:	40011000 	.word	0x40011000
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	40004400 	.word	0x40004400
 8004e44:	40004800 	.word	0x40004800
 8004e48:	40004c00 	.word	0x40004c00
 8004e4c:	40005000 	.word	0x40005000
 8004e50:	40011400 	.word	0x40011400
 8004e54:	40007800 	.word	0x40007800
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a71      	ldr	r2, [pc, #452]	; (8005024 <UART_SetConfig+0x4b8>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d125      	bne.n	8004eae <UART_SetConfig+0x342>
 8004e62:	4b71      	ldr	r3, [pc, #452]	; (8005028 <UART_SetConfig+0x4bc>)
 8004e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e6c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e70:	d017      	beq.n	8004ea2 <UART_SetConfig+0x336>
 8004e72:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e76:	d817      	bhi.n	8004ea8 <UART_SetConfig+0x33c>
 8004e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e7c:	d00b      	beq.n	8004e96 <UART_SetConfig+0x32a>
 8004e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e82:	d811      	bhi.n	8004ea8 <UART_SetConfig+0x33c>
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <UART_SetConfig+0x324>
 8004e88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e8c:	d006      	beq.n	8004e9c <UART_SetConfig+0x330>
 8004e8e:	e00b      	b.n	8004ea8 <UART_SetConfig+0x33c>
 8004e90:	2300      	movs	r3, #0
 8004e92:	77fb      	strb	r3, [r7, #31]
 8004e94:	e00d      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004e96:	2302      	movs	r3, #2
 8004e98:	77fb      	strb	r3, [r7, #31]
 8004e9a:	e00a      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004e9c:	2304      	movs	r3, #4
 8004e9e:	77fb      	strb	r3, [r7, #31]
 8004ea0:	e007      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	77fb      	strb	r3, [r7, #31]
 8004ea6:	e004      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004ea8:	2310      	movs	r3, #16
 8004eaa:	77fb      	strb	r3, [r7, #31]
 8004eac:	e001      	b.n	8004eb2 <UART_SetConfig+0x346>
 8004eae:	2310      	movs	r3, #16
 8004eb0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eba:	d15b      	bne.n	8004f74 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004ebc:	7ffb      	ldrb	r3, [r7, #31]
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d827      	bhi.n	8004f12 <UART_SetConfig+0x3a6>
 8004ec2:	a201      	add	r2, pc, #4	; (adr r2, 8004ec8 <UART_SetConfig+0x35c>)
 8004ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec8:	08004eed 	.word	0x08004eed
 8004ecc:	08004ef5 	.word	0x08004ef5
 8004ed0:	08004efd 	.word	0x08004efd
 8004ed4:	08004f13 	.word	0x08004f13
 8004ed8:	08004f03 	.word	0x08004f03
 8004edc:	08004f13 	.word	0x08004f13
 8004ee0:	08004f13 	.word	0x08004f13
 8004ee4:	08004f13 	.word	0x08004f13
 8004ee8:	08004f0b 	.word	0x08004f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eec:	f7fd ff5a 	bl	8002da4 <HAL_RCC_GetPCLK1Freq>
 8004ef0:	61b8      	str	r0, [r7, #24]
        break;
 8004ef2:	e013      	b.n	8004f1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ef4:	f7fd ff6a 	bl	8002dcc <HAL_RCC_GetPCLK2Freq>
 8004ef8:	61b8      	str	r0, [r7, #24]
        break;
 8004efa:	e00f      	b.n	8004f1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004efc:	4b4b      	ldr	r3, [pc, #300]	; (800502c <UART_SetConfig+0x4c0>)
 8004efe:	61bb      	str	r3, [r7, #24]
        break;
 8004f00:	e00c      	b.n	8004f1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f02:	f7fd fe8d 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8004f06:	61b8      	str	r0, [r7, #24]
        break;
 8004f08:	e008      	b.n	8004f1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f0e:	61bb      	str	r3, [r7, #24]
        break;
 8004f10:	e004      	b.n	8004f1c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	77bb      	strb	r3, [r7, #30]
        break;
 8004f1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d074      	beq.n	800500c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	005a      	lsls	r2, r3, #1
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	085b      	lsrs	r3, r3, #1
 8004f2c:	441a      	add	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	2b0f      	cmp	r3, #15
 8004f3e:	d916      	bls.n	8004f6e <UART_SetConfig+0x402>
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f46:	d212      	bcs.n	8004f6e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f023 030f 	bic.w	r3, r3, #15
 8004f50:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	085b      	lsrs	r3, r3, #1
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	89fb      	ldrh	r3, [r7, #14]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	89fa      	ldrh	r2, [r7, #14]
 8004f6a:	60da      	str	r2, [r3, #12]
 8004f6c:	e04e      	b.n	800500c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	77bb      	strb	r3, [r7, #30]
 8004f72:	e04b      	b.n	800500c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f74:	7ffb      	ldrb	r3, [r7, #31]
 8004f76:	2b08      	cmp	r3, #8
 8004f78:	d827      	bhi.n	8004fca <UART_SetConfig+0x45e>
 8004f7a:	a201      	add	r2, pc, #4	; (adr r2, 8004f80 <UART_SetConfig+0x414>)
 8004f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f80:	08004fa5 	.word	0x08004fa5
 8004f84:	08004fad 	.word	0x08004fad
 8004f88:	08004fb5 	.word	0x08004fb5
 8004f8c:	08004fcb 	.word	0x08004fcb
 8004f90:	08004fbb 	.word	0x08004fbb
 8004f94:	08004fcb 	.word	0x08004fcb
 8004f98:	08004fcb 	.word	0x08004fcb
 8004f9c:	08004fcb 	.word	0x08004fcb
 8004fa0:	08004fc3 	.word	0x08004fc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa4:	f7fd fefe 	bl	8002da4 <HAL_RCC_GetPCLK1Freq>
 8004fa8:	61b8      	str	r0, [r7, #24]
        break;
 8004faa:	e013      	b.n	8004fd4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fac:	f7fd ff0e 	bl	8002dcc <HAL_RCC_GetPCLK2Freq>
 8004fb0:	61b8      	str	r0, [r7, #24]
        break;
 8004fb2:	e00f      	b.n	8004fd4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fb4:	4b1d      	ldr	r3, [pc, #116]	; (800502c <UART_SetConfig+0x4c0>)
 8004fb6:	61bb      	str	r3, [r7, #24]
        break;
 8004fb8:	e00c      	b.n	8004fd4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fba:	f7fd fe31 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8004fbe:	61b8      	str	r0, [r7, #24]
        break;
 8004fc0:	e008      	b.n	8004fd4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fc6:	61bb      	str	r3, [r7, #24]
        break;
 8004fc8:	e004      	b.n	8004fd4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	77bb      	strb	r3, [r7, #30]
        break;
 8004fd2:	bf00      	nop
    }

    if (pclk != 0U)
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d018      	beq.n	800500c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	085a      	lsrs	r2, r3, #1
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	441a      	add	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	2b0f      	cmp	r3, #15
 8004ff4:	d908      	bls.n	8005008 <UART_SetConfig+0x49c>
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ffc:	d204      	bcs.n	8005008 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	60da      	str	r2, [r3, #12]
 8005006:	e001      	b.n	800500c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005018:	7fbb      	ldrb	r3, [r7, #30]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3720      	adds	r7, #32
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	40007c00 	.word	0x40007c00
 8005028:	40023800 	.word	0x40023800
 800502c:	00f42400 	.word	0x00f42400

08005030 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00a      	beq.n	800505a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00a      	beq.n	800509e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	f003 0308 	and.w	r3, r3, #8
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	430a      	orrs	r2, r1
 80050be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	f003 0310 	and.w	r3, r3, #16
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00a      	beq.n	80050e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	f003 0320 	and.w	r3, r3, #32
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00a      	beq.n	8005104 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	430a      	orrs	r2, r1
 8005102:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510c:	2b00      	cmp	r3, #0
 800510e:	d01a      	beq.n	8005146 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800512e:	d10a      	bne.n	8005146 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00a      	beq.n	8005168 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	605a      	str	r2, [r3, #4]
  }
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af02      	add	r7, sp, #8
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005184:	f7fc fad0 	bl	8001728 <HAL_GetTick>
 8005188:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0308 	and.w	r3, r3, #8
 8005194:	2b08      	cmp	r3, #8
 8005196:	d10e      	bne.n	80051b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005198:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f82d 	bl	8005206 <UART_WaitOnFlagUntilTimeout>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e023      	b.n	80051fe <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	2b04      	cmp	r3, #4
 80051c2:	d10e      	bne.n	80051e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f817 	bl	8005206 <UART_WaitOnFlagUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e00d      	b.n	80051fe <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2220      	movs	r2, #32
 80051e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2220      	movs	r2, #32
 80051ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b084      	sub	sp, #16
 800520a:	af00      	add	r7, sp, #0
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	603b      	str	r3, [r7, #0]
 8005212:	4613      	mov	r3, r2
 8005214:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005216:	e05e      	b.n	80052d6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521e:	d05a      	beq.n	80052d6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005220:	f7fc fa82 	bl	8001728 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	429a      	cmp	r2, r3
 800522e:	d302      	bcc.n	8005236 <UART_WaitOnFlagUntilTimeout+0x30>
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d11b      	bne.n	800526e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005244:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689a      	ldr	r2, [r3, #8]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 0201 	bic.w	r2, r2, #1
 8005254:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2220      	movs	r2, #32
 800525a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2220      	movs	r2, #32
 8005260:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e043      	b.n	80052f6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b00      	cmp	r3, #0
 800527a:	d02c      	beq.n	80052d6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800528a:	d124      	bne.n	80052d6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005294:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 0201 	bic.w	r2, r2, #1
 80052b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2220      	movs	r2, #32
 80052ba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2220      	movs	r2, #32
 80052c0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e00f      	b.n	80052f6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69da      	ldr	r2, [r3, #28]
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	4013      	ands	r3, r2
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	bf0c      	ite	eq
 80052e6:	2301      	moveq	r3, #1
 80052e8:	2300      	movne	r3, #0
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	461a      	mov	r2, r3
 80052ee:	79fb      	ldrb	r3, [r7, #7]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d091      	beq.n	8005218 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
	...

08005300 <__libc_init_array>:
 8005300:	b570      	push	{r4, r5, r6, lr}
 8005302:	4d0d      	ldr	r5, [pc, #52]	; (8005338 <__libc_init_array+0x38>)
 8005304:	4c0d      	ldr	r4, [pc, #52]	; (800533c <__libc_init_array+0x3c>)
 8005306:	1b64      	subs	r4, r4, r5
 8005308:	10a4      	asrs	r4, r4, #2
 800530a:	2600      	movs	r6, #0
 800530c:	42a6      	cmp	r6, r4
 800530e:	d109      	bne.n	8005324 <__libc_init_array+0x24>
 8005310:	4d0b      	ldr	r5, [pc, #44]	; (8005340 <__libc_init_array+0x40>)
 8005312:	4c0c      	ldr	r4, [pc, #48]	; (8005344 <__libc_init_array+0x44>)
 8005314:	f000 f820 	bl	8005358 <_init>
 8005318:	1b64      	subs	r4, r4, r5
 800531a:	10a4      	asrs	r4, r4, #2
 800531c:	2600      	movs	r6, #0
 800531e:	42a6      	cmp	r6, r4
 8005320:	d105      	bne.n	800532e <__libc_init_array+0x2e>
 8005322:	bd70      	pop	{r4, r5, r6, pc}
 8005324:	f855 3b04 	ldr.w	r3, [r5], #4
 8005328:	4798      	blx	r3
 800532a:	3601      	adds	r6, #1
 800532c:	e7ee      	b.n	800530c <__libc_init_array+0xc>
 800532e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005332:	4798      	blx	r3
 8005334:	3601      	adds	r6, #1
 8005336:	e7f2      	b.n	800531e <__libc_init_array+0x1e>
 8005338:	08005390 	.word	0x08005390
 800533c:	08005390 	.word	0x08005390
 8005340:	08005390 	.word	0x08005390
 8005344:	08005394 	.word	0x08005394

08005348 <memset>:
 8005348:	4402      	add	r2, r0
 800534a:	4603      	mov	r3, r0
 800534c:	4293      	cmp	r3, r2
 800534e:	d100      	bne.n	8005352 <memset+0xa>
 8005350:	4770      	bx	lr
 8005352:	f803 1b01 	strb.w	r1, [r3], #1
 8005356:	e7f9      	b.n	800534c <memset+0x4>

08005358 <_init>:
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535a:	bf00      	nop
 800535c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535e:	bc08      	pop	{r3}
 8005360:	469e      	mov	lr, r3
 8005362:	4770      	bx	lr

08005364 <_fini>:
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005366:	bf00      	nop
 8005368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536a:	bc08      	pop	{r3}
 800536c:	469e      	mov	lr, r3
 800536e:	4770      	bx	lr
