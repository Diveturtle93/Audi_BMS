
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007620  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  08007818  08007818  00017818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e68  08007e68  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007e68  08007e68  00017e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e70  08007e70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e70  08007e70  00017e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e74  08007e74  00017e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  2000000c  08007e84  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08007e84  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f22  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003607  00000000  00000000  00036f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  0003a568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b0  00000000  00000000  0003b8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c363  00000000  00000000  0003ca60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001afa4  00000000  00000000  00068dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010886f  00000000  00000000  00083d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018c5d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f14  00000000  00000000  0018c628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08007800 	.word	0x08007800

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08007800 	.word	0x08007800

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
	// Sende String mit Laenge "Size", "Size" muss bekannt sein
	HAL_UART_Transmit(&huart2, (uint8_t*) str, size, 1000);
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	b29a      	uxth	r2, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	6879      	ldr	r1, [r7, #4]
 8000560:	4803      	ldr	r0, [pc, #12]	; (8000570 <uartTransmit+0x24>)
 8000562:	f006 fc35 	bl	8006dd0 <HAL_UART_Transmit>
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	2000023c 	.word	0x2000023c

08000574 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
	char str[11];

	// Zahl umrechnen
	utoa(number, str, base);												// Zahl umrechnen anhand der Basis "base"
 800057e:	683a      	ldr	r2, [r7, #0]
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4619      	mov	r1, r3
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f007 f938 	bl	80077fc <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 1000);			// Sende Zahlen
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff fe51 	bl	8000238 <strlen>
 8000596:	4603      	mov	r3, r0
 8000598:	b29a      	uxth	r2, r3
 800059a:	f107 010c 	add.w	r1, r7, #12
 800059e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a2:	4803      	ldr	r0, [pc, #12]	; (80005b0 <uartTransmitNumber+0x3c>)
 80005a4:	f006 fc14 	bl	8006dd0 <HAL_UART_Transmit>
}
 80005a8:	bf00      	nop
 80005aa:	3718      	adds	r7, #24
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	2000023c 	.word	0x2000023c

080005b4 <ltc1380_write>:
//----------------------------------------------------------------------

// Kanal auswaehlen
//----------------------------------------------------------------------
void ltc1380_write(uint8_t Address, uint8_t Channel)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	460a      	mov	r2, r1
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	4613      	mov	r3, r2
 80005c2:	71bb      	strb	r3, [r7, #6]
	ITM_SendNumber(Channel);
	ITM_SendChar('\n');
#endif

	// Definiere Array fuer Channel auswaehlen
	uint8_t off[6] = {0x69, 0x08, 0x00, 0x89, 0x7F, 0xF9};					// Daten-Bytes fuer LTC6811 mit Daten fuer LTC1380
 80005c4:	4a14      	ldr	r2, [pc, #80]	; (8000618 <ltc1380_write+0x64>)
 80005c6:	f107 0308 	add.w	r3, r7, #8
 80005ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ce:	6018      	str	r0, [r3, #0]
 80005d0:	3304      	adds	r3, #4
 80005d2:	8019      	strh	r1, [r3, #0]
	
	// Addresse und Channel waehlen
	off[1] |= ((Address & 0x0F) << 4);										// Address in Array uebertragen
 80005d4:	7a7b      	ldrb	r3, [r7, #9]
 80005d6:	b25a      	sxtb	r2, r3
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	011b      	lsls	r3, r3, #4
 80005dc:	b25b      	sxtb	r3, r3
 80005de:	4313      	orrs	r3, r2
 80005e0:	b25b      	sxtb	r3, r3
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	727b      	strb	r3, [r7, #9]
	off[3] |= ((Channel & 0x0F) << 4);										// Channel in Array uebertragen
 80005e6:	7afb      	ldrb	r3, [r7, #11]
 80005e8:	b25a      	sxtb	r2, r3
 80005ea:	79bb      	ldrb	r3, [r7, #6]
 80005ec:	011b      	lsls	r3, r3, #4
 80005ee:	b25b      	sxtb	r3, r3
 80005f0:	4313      	orrs	r3, r2
 80005f2:	b25b      	sxtb	r3, r3
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	72fb      	strb	r3, [r7, #11]
	
	// LTC6811 beschreiben und ueber I2C uebertragen
	ltc6811_write(WRCOMM, &off[0]);												// Daten in LTC6811 schreiben
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	4619      	mov	r1, r3
 80005fe:	f240 7021 	movw	r0, #1825	; 0x721
 8000602:	f000 f8a9 	bl	8000758 <ltc6811_write>
	ltc6811(STCOMM);														// Daten von LTC6811 an LTC1380 senden
 8000606:	f240 7023 	movw	r0, #1827	; 0x723
 800060a:	f000 f851 	bl	80006b0 <ltc6811>
		ITM_SendChar(' ');
		ITM_SendNumber(off[i]);
	}
	ITM_SendChar('\n');
#endif
}
 800060e:	bf00      	nop
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	08007818 	.word	0x08007818

0800061c <getDifference>:
//----------------------------------------------------------------------

// Differenz Berechnen, Betrag
//----------------------------------------------------------------------
static uint16_t getDifference(uint16_t a, uint16_t b)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	460a      	mov	r2, r1
 8000626:	80fb      	strh	r3, [r7, #6]
 8000628:	4613      	mov	r3, r2
 800062a:	80bb      	strh	r3, [r7, #4]
	// A ist groesser B
	if (a > b)
 800062c:	88fa      	ldrh	r2, [r7, #6]
 800062e:	88bb      	ldrh	r3, [r7, #4]
 8000630:	429a      	cmp	r2, r3
 8000632:	d904      	bls.n	800063e <getDifference+0x22>
	{
		// B von A abziehen
		return (a - b);
 8000634:	88fa      	ldrh	r2, [r7, #6]
 8000636:	88bb      	ldrh	r3, [r7, #4]
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	b29b      	uxth	r3, r3
 800063c:	e009      	b.n	8000652 <getDifference+0x36>
	}
	// B ist groesser A
	else if (a < b)
 800063e:	88fa      	ldrh	r2, [r7, #6]
 8000640:	88bb      	ldrh	r3, [r7, #4]
 8000642:	429a      	cmp	r2, r3
 8000644:	d204      	bcs.n	8000650 <getDifference+0x34>
	{
		// A von B abziehen
		return (b - a);
 8000646:	88ba      	ldrh	r2, [r7, #4]
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	1ad3      	subs	r3, r2, r3
 800064c:	b29b      	uxth	r3, r3
 800064e:	e000      	b.n	8000652 <getDifference+0x36>
	}
	// A ist gleich B
	else
	{
		// Differenz ist 0
		return 0;
 8000650:	2300      	movs	r3, #0
	}
}
 8000652:	4618      	mov	r0, r3
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
	...

08000660 <wakeup_ltc6811>:
//----------------------------------------------------------------------

// Wakeup LTC6811 idle
//----------------------------------------------------------------------
void wakeup_ltc6811(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
	// Debug Nachricht
#ifdef DEBUG_ISOSPI
	ITM_SendString("Chip wird geweckt.\n");
#endif

	for(uint8_t i = 0; i < LTC6811_DEVICES; i++)							// Wiederholen fuer Anzahl Slaves
 8000666:	2300      	movs	r3, #0
 8000668:	71fb      	strb	r3, [r7, #7]
 800066a:	e014      	b.n	8000696 <wakeup_ltc6811+0x36>
	{
		// ISOCS einschalten
		ISOCS_ENABLE();														// Chip-Select einschalten
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000672:	480d      	ldr	r0, [pc, #52]	; (80006a8 <wakeup_ltc6811+0x48>)
 8000674:	f003 fa6e 	bl	8003b54 <HAL_GPIO_WritePin>

		// Dummy Paket senden
		HAL_SPI_Transmit(&hspi4, (uint8_t*) 0xAA, 1, 100);					// Chip wecken, isoSPI braucht Zeit bis ready
 8000678:	2364      	movs	r3, #100	; 0x64
 800067a:	2201      	movs	r2, #1
 800067c:	21aa      	movs	r1, #170	; 0xaa
 800067e:	480b      	ldr	r0, [pc, #44]	; (80006ac <wakeup_ltc6811+0x4c>)
 8000680:	f004 fc39 	bl	8004ef6 <HAL_SPI_Transmit>

		//HAL_Delay(2);														// isoSPI braucht Zeit bis ready

		// ISOCS ausschalten
		ISOCS_DISABLE();													// Chip-Select ausschalten
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800068a:	4807      	ldr	r0, [pc, #28]	; (80006a8 <wakeup_ltc6811+0x48>)
 800068c:	f003 fa62 	bl	8003b54 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < LTC6811_DEVICES; i++)							// Wiederholen fuer Anzahl Slaves
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	3301      	adds	r3, #1
 8000694:	71fb      	strb	r3, [r7, #7]
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d0e7      	beq.n	800066c <wakeup_ltc6811+0xc>
	}
}
 800069c:	bf00      	nop
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000
 80006ac:	20000140 	.word	0x20000140

080006b0 <ltc6811>:
//----------------------------------------------------------------------

// Broadcast Command
//----------------------------------------------------------------------
void ltc6811(uint16_t command)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	80fb      	strh	r3, [r7, #6]
#endif

	// PEC berechnen, Anhand Command
	uint16_t pec;															// pec = Zwischenspeicher 16-Bit Command
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	pec = peccommand(command);
 80006ba:	88fb      	ldrh	r3, [r7, #6]
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 f953 	bl	8000968 <peccommand>
 80006c2:	4603      	mov	r3, r0
 80006c4:	81bb      	strh	r3, [r7, #12]
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 80006c6:	f7ff ffcb 	bl	8000660 <wakeup_ltc6811>

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 80006ca:	88fb      	ldrh	r3, [r7, #6]
 80006cc:	0a1b      	lsrs	r3, r3, #8
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	723b      	strb	r3, [r7, #8]
	cmd[1] = (command & 0xFF);
 80006da:	88fb      	ldrh	r3, [r7, #6]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	727b      	strb	r3, [r7, #9]
	cmd[2] = ((pec >> 8) & 0xFF);
 80006e0:	89bb      	ldrh	r3, [r7, #12]
 80006e2:	0a1b      	lsrs	r3, r3, #8
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec & 0xFE);
 80006ea:	89bb      	ldrh	r3, [r7, #12]
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	f023 0301 	bic.w	r3, r3, #1
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	72fb      	strb	r3, [r7, #11]

	// ISOCS einschalten
	ISOCS_ENABLE();
 80006f6:	2200      	movs	r2, #0
 80006f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006fc:	4814      	ldr	r0, [pc, #80]	; (8000750 <ltc6811+0xa0>)
 80006fe:	f003 fa29 	bl	8003b54 <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 8000702:	f107 0108 	add.w	r1, r7, #8
 8000706:	2364      	movs	r3, #100	; 0x64
 8000708:	2204      	movs	r2, #4
 800070a:	4812      	ldr	r0, [pc, #72]	; (8000754 <ltc6811+0xa4>)
 800070c:	f004 fbf3 	bl	8004ef6 <HAL_SPI_Transmit>

	// Wenn Command = STCOMM ist dann muessen noch 72 Takte uebertragen werden
	if (command == STCOMM)
 8000710:	88fb      	ldrh	r3, [r7, #6]
 8000712:	f240 7223 	movw	r2, #1827	; 0x723
 8000716:	4293      	cmp	r3, r2
 8000718:	d10f      	bne.n	800073a <ltc6811+0x8a>
	{
		// 72 = 9 * 8 Bit Daten
		for (uint8_t i = 0; i < 9; i++)
 800071a:	2300      	movs	r3, #0
 800071c:	73fb      	strb	r3, [r7, #15]
 800071e:	e009      	b.n	8000734 <ltc6811+0x84>
		{
			// Dummy-Byte uebertragen
			HAL_SPI_Transmit(&hspi4, (uint8_t*) 0xAA, 1, HAL_MAX_DELAY);
 8000720:	f04f 33ff 	mov.w	r3, #4294967295
 8000724:	2201      	movs	r2, #1
 8000726:	21aa      	movs	r1, #170	; 0xaa
 8000728:	480a      	ldr	r0, [pc, #40]	; (8000754 <ltc6811+0xa4>)
 800072a:	f004 fbe4 	bl	8004ef6 <HAL_SPI_Transmit>
		for (uint8_t i = 0; i < 9; i++)
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	3301      	adds	r3, #1
 8000732:	73fb      	strb	r3, [r7, #15]
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	2b08      	cmp	r3, #8
 8000738:	d9f2      	bls.n	8000720 <ltc6811+0x70>
		}
	}
	
	// ISOCS ausschalten
	ISOCS_DISABLE();
 800073a:	2201      	movs	r2, #1
 800073c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000740:	4803      	ldr	r0, [pc, #12]	; (8000750 <ltc6811+0xa0>)
 8000742:	f003 fa07 	bl	8003b54 <HAL_GPIO_WritePin>
		ITM_SendChar(' ');
		ITM_SendNumber(cmd[i]);
	}
	ITM_SendChar('\n');
#endif
}
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40021000 	.word	0x40021000
 8000754:	20000140 	.word	0x20000140

08000758 <ltc6811_write>:


// Broadcast Write Command
//----------------------------------------------------------------------
void ltc6811_write(uint16_t command, uint8_t* data)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	6039      	str	r1, [r7, #0]
 8000762:	80fb      	strh	r3, [r7, #6]

	// PEC berechnen, fuer Data Funktion nur bei einem Device gegeben
	uint16_t pec_c, pec_d;													// pec_c = Zwischenspeicher 16-Bit Command, pec_d = Zwischenspeicher 16-Bit Data
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	uint8_t tmp_data[8*LTC6811_DEVICES];									// Zwischenspeicher Daten + Pec CRC
	pec_c = peccommand(command);											// Pec Command berechnen
 8000764:	88fb      	ldrh	r3, [r7, #6]
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f8fe 	bl	8000968 <peccommand>
 800076c:	4603      	mov	r3, r0
 800076e:	83bb      	strh	r3, [r7, #28]

	// Command in cmd abspeichern
	cmd[0] = ((command  >> 8) & 0x07);
 8000770:	88fb      	ldrh	r3, [r7, #6]
 8000772:	0a1b      	lsrs	r3, r3, #8
 8000774:	b29b      	uxth	r3, r3
 8000776:	b2db      	uxtb	r3, r3
 8000778:	f003 0307 	and.w	r3, r3, #7
 800077c:	b2db      	uxtb	r3, r3
 800077e:	753b      	strb	r3, [r7, #20]
	cmd[1] = (command & 0xFF);
 8000780:	88fb      	ldrh	r3, [r7, #6]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	757b      	strb	r3, [r7, #21]
	cmd[2] = ((pec_c >> 8) & 0xFF);
 8000786:	8bbb      	ldrh	r3, [r7, #28]
 8000788:	0a1b      	lsrs	r3, r3, #8
 800078a:	b29b      	uxth	r3, r3
 800078c:	b2db      	uxtb	r3, r3
 800078e:	75bb      	strb	r3, [r7, #22]
	cmd[3] = (pec_c & 0xFE);
 8000790:	8bbb      	ldrh	r3, [r7, #28]
 8000792:	b2db      	uxtb	r3, r3
 8000794:	f023 0301 	bic.w	r3, r3, #1
 8000798:	b2db      	uxtb	r3, r3
 800079a:	75fb      	strb	r3, [r7, #23]

	// Daten in tmp_data abspeichern zum Senden
	for (uint8_t j = 0; j < LTC6811_DEVICES; j++)
 800079c:	2300      	movs	r3, #0
 800079e:	77fb      	strb	r3, [r7, #31]
 80007a0:	e035      	b.n	800080e <ltc6811_write+0xb6>
	{
		// Schleife um Daten fuer einen IC abzuspeichern
		for (uint8_t i = 0; i < 6; i++)
 80007a2:	2300      	movs	r3, #0
 80007a4:	77bb      	strb	r3, [r7, #30]
 80007a6:	e016      	b.n	80007d6 <ltc6811_write+0x7e>
		{
			tmp_data[j*8+i] = data[j*6+i];
 80007a8:	7ffa      	ldrb	r2, [r7, #31]
 80007aa:	4613      	mov	r3, r2
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	4413      	add	r3, r2
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	461a      	mov	r2, r3
 80007b4:	7fbb      	ldrb	r3, [r7, #30]
 80007b6:	4413      	add	r3, r2
 80007b8:	461a      	mov	r2, r3
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	441a      	add	r2, r3
 80007be:	7ffb      	ldrb	r3, [r7, #31]
 80007c0:	00d9      	lsls	r1, r3, #3
 80007c2:	7fbb      	ldrb	r3, [r7, #30]
 80007c4:	440b      	add	r3, r1
 80007c6:	7812      	ldrb	r2, [r2, #0]
 80007c8:	3320      	adds	r3, #32
 80007ca:	443b      	add	r3, r7
 80007cc:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (uint8_t i = 0; i < 6; i++)
 80007d0:	7fbb      	ldrb	r3, [r7, #30]
 80007d2:	3301      	adds	r3, #1
 80007d4:	77bb      	strb	r3, [r7, #30]
 80007d6:	7fbb      	ldrb	r3, [r7, #30]
 80007d8:	2b05      	cmp	r3, #5
 80007da:	d9e5      	bls.n	80007a8 <ltc6811_write+0x50>
		}

		// Pec berechnen pro IC einmal
		pec_d = peclookup(6, &tmp_data[j*8]);								// Pec Daten berechnen
 80007dc:	7ffb      	ldrb	r3, [r7, #31]
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	f107 020c 	add.w	r2, r7, #12
 80007e4:	4413      	add	r3, r2
 80007e6:	4619      	mov	r1, r3
 80007e8:	2006      	movs	r0, #6
 80007ea:	f000 f8d9 	bl	80009a0 <peclookup>
 80007ee:	4603      	mov	r3, r0
 80007f0:	837b      	strh	r3, [r7, #26]

		// Pec abspeichern fuer einen IC
		tmp_data[6] = ((pec_d >> 8) & 0xFF);
 80007f2:	8b7b      	ldrh	r3, [r7, #26]
 80007f4:	0a1b      	lsrs	r3, r3, #8
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	74bb      	strb	r3, [r7, #18]
		tmp_data[7] = (pec_d & 0xFE);
 80007fc:	8b7b      	ldrh	r3, [r7, #26]
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	f023 0301 	bic.w	r3, r3, #1
 8000804:	b2db      	uxtb	r3, r3
 8000806:	74fb      	strb	r3, [r7, #19]
	for (uint8_t j = 0; j < LTC6811_DEVICES; j++)
 8000808:	7ffb      	ldrb	r3, [r7, #31]
 800080a:	3301      	adds	r3, #1
 800080c:	77fb      	strb	r3, [r7, #31]
 800080e:	7ffb      	ldrb	r3, [r7, #31]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d0c6      	beq.n	80007a2 <ltc6811_write+0x4a>
	}
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000814:	f7ff ff24 	bl	8000660 <wakeup_ltc6811>

	// ISOCS einschalten
	ISOCS_ENABLE();
 8000818:	2200      	movs	r2, #0
 800081a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800081e:	480d      	ldr	r0, [pc, #52]	; (8000854 <ltc6811_write+0xfc>)
 8000820:	f003 f998 	bl	8003b54 <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 8000824:	f107 0114 	add.w	r1, r7, #20
 8000828:	2364      	movs	r3, #100	; 0x64
 800082a:	2204      	movs	r2, #4
 800082c:	480a      	ldr	r0, [pc, #40]	; (8000858 <ltc6811_write+0x100>)
 800082e:	f004 fb62 	bl	8004ef6 <HAL_SPI_Transmit>
	
	// Data senden
//	for (uint8_t i = 0; i < 6; i++)
//	{
		// Sende Daten fuer einen IC
		HAL_SPI_Transmit(&hspi4, tmp_data, 8, 100);
 8000832:	f107 010c 	add.w	r1, r7, #12
 8000836:	2364      	movs	r3, #100	; 0x64
 8000838:	2208      	movs	r2, #8
 800083a:	4807      	ldr	r0, [pc, #28]	; (8000858 <ltc6811_write+0x100>)
 800083c:	f004 fb5b 	bl	8004ef6 <HAL_SPI_Transmit>
//	}
	
	// ISOCS ausschalten
	ISOCS_DISABLE();
 8000840:	2201      	movs	r2, #1
 8000842:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000846:	4803      	ldr	r0, [pc, #12]	; (8000854 <ltc6811_write+0xfc>)
 8000848:	f003 f984 	bl	8003b54 <HAL_GPIO_WritePin>
		ITM_SendChar(' ');
		ITM_SendNumber(data[i]);
	}
	ITM_SendChar('\n');
#endif
}
 800084c:	bf00      	nop
 800084e:	3720      	adds	r7, #32
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40021000 	.word	0x40021000
 8000858:	20000140 	.word	0x20000140

0800085c <ltc6811_read>:
//----------------------------------------------------------------------

// Broadcast Read Command
//----------------------------------------------------------------------
uint8_t ltc6811_read(uint16_t command, uint8_t* data)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	6039      	str	r1, [r7, #0]
 8000866:	80fb      	strh	r3, [r7, #6]

	// PEC berechnen, Anhand Command
	uint16_t pec;															// pec = Zwischenspeicher 16-Bit Command
	uint16_t tmp;															// Zwischenspeicher fuer Pruefung CRC
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	pec = peccommand(command);
 8000868:	88fb      	ldrh	r3, [r7, #6]
 800086a:	4618      	mov	r0, r3
 800086c:	f000 f87c 	bl	8000968 <peccommand>
 8000870:	4603      	mov	r3, r0
 8000872:	82bb      	strh	r3, [r7, #20]
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000874:	f7ff fef4 	bl	8000660 <wakeup_ltc6811>

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 8000878:	88fb      	ldrh	r3, [r7, #6]
 800087a:	0a1b      	lsrs	r3, r3, #8
 800087c:	b29b      	uxth	r3, r3
 800087e:	b2db      	uxtb	r3, r3
 8000880:	f003 0307 	and.w	r3, r3, #7
 8000884:	b2db      	uxtb	r3, r3
 8000886:	733b      	strb	r3, [r7, #12]
	cmd[1] = (command & 0xFF);
 8000888:	88fb      	ldrh	r3, [r7, #6]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	737b      	strb	r3, [r7, #13]
	cmd[2] = ((pec >> 8) & 0xFF);
 800088e:	8abb      	ldrh	r3, [r7, #20]
 8000890:	0a1b      	lsrs	r3, r3, #8
 8000892:	b29b      	uxth	r3, r3
 8000894:	b2db      	uxtb	r3, r3
 8000896:	73bb      	strb	r3, [r7, #14]
	cmd[3] = (pec & 0xFE);
 8000898:	8abb      	ldrh	r3, [r7, #20]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	f023 0301 	bic.w	r3, r3, #1
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	73fb      	strb	r3, [r7, #15]

	// ISOCS einschalten
	ISOCS_ENABLE();
 80008a4:	2200      	movs	r2, #0
 80008a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008aa:	482d      	ldr	r0, [pc, #180]	; (8000960 <ltc6811_read+0x104>)
 80008ac:	f003 f952 	bl	8003b54 <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 80008b0:	f107 010c 	add.w	r1, r7, #12
 80008b4:	2364      	movs	r3, #100	; 0x64
 80008b6:	2204      	movs	r2, #4
 80008b8:	482a      	ldr	r0, [pc, #168]	; (8000964 <ltc6811_read+0x108>)
 80008ba:	f004 fb1c 	bl	8004ef6 <HAL_SPI_Transmit>
	
	// Data empfangen
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 80008be:	2300      	movs	r3, #0
 80008c0:	75fb      	strb	r3, [r7, #23]
 80008c2:	e00c      	b.n	80008de <ltc6811_read+0x82>
	{
		// Dummy Byte senden
		HAL_SPI_Receive(&hspi4, &data[i*8], 8, 100);
 80008c4:	7dfb      	ldrb	r3, [r7, #23]
 80008c6:	00db      	lsls	r3, r3, #3
 80008c8:	461a      	mov	r2, r3
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	1899      	adds	r1, r3, r2
 80008ce:	2364      	movs	r3, #100	; 0x64
 80008d0:	2208      	movs	r2, #8
 80008d2:	4824      	ldr	r0, [pc, #144]	; (8000964 <ltc6811_read+0x108>)
 80008d4:	f004 fc7d 	bl	80051d2 <HAL_SPI_Receive>
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 80008d8:	7dfb      	ldrb	r3, [r7, #23]
 80008da:	3301      	adds	r3, #1
 80008dc:	75fb      	strb	r3, [r7, #23]
 80008de:	7dfb      	ldrb	r3, [r7, #23]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d0ef      	beq.n	80008c4 <ltc6811_read+0x68>
	}

	// Pec zuruecksetzen
	pec = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	82bb      	strh	r3, [r7, #20]

	// Pec pruefen
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 80008e8:	2300      	movs	r3, #0
 80008ea:	75bb      	strb	r3, [r7, #22]
 80008ec:	e02a      	b.n	8000944 <ltc6811_read+0xe8>
	{
		// Variante 1, Pec berechnen und pruefen, ob richtiger Pec mitgesendet wurde
		tmp = ((data[i + 6] << 8) + data[i + 7]);
 80008ee:	7dbb      	ldrb	r3, [r7, #22]
 80008f0:	3306      	adds	r3, #6
 80008f2:	683a      	ldr	r2, [r7, #0]
 80008f4:	4413      	add	r3, r2
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	021b      	lsls	r3, r3, #8
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	7dbb      	ldrb	r3, [r7, #22]
 8000900:	3307      	adds	r3, #7
 8000902:	6839      	ldr	r1, [r7, #0]
 8000904:	440b      	add	r3, r1
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	b29b      	uxth	r3, r3
 800090a:	4413      	add	r3, r2
 800090c:	827b      	strh	r3, [r7, #18]
		pec = peclookup(6, &data[i*8]);
 800090e:	7dbb      	ldrb	r3, [r7, #22]
 8000910:	00db      	lsls	r3, r3, #3
 8000912:	461a      	mov	r2, r3
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	4413      	add	r3, r2
 8000918:	4619      	mov	r1, r3
 800091a:	2006      	movs	r0, #6
 800091c:	f000 f840 	bl	80009a0 <peclookup>
 8000920:	4603      	mov	r3, r0
 8000922:	82bb      	strh	r3, [r7, #20]
			uartTransmit("\n", 1);
		}
#endif

		// Pec zuruecksetzen
		pec = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	82bb      	strh	r3, [r7, #20]

		// Variante 2, Daten inklusive Pec mit durch Peccheck pruefen, ob Ergebnis gleich 0 ist
		pec = peccheck(8, &data[i*8]);
 8000928:	7dbb      	ldrb	r3, [r7, #22]
 800092a:	00db      	lsls	r3, r3, #3
 800092c:	461a      	mov	r2, r3
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	4413      	add	r3, r2
 8000932:	4619      	mov	r1, r3
 8000934:	2008      	movs	r0, #8
 8000936:	f000 f867 	bl	8000a08 <peccheck>
 800093a:	4603      	mov	r3, r0
 800093c:	82bb      	strh	r3, [r7, #20]
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 800093e:	7dbb      	ldrb	r3, [r7, #22]
 8000940:	3301      	adds	r3, #1
 8000942:	75bb      	strb	r3, [r7, #22]
 8000944:	7dbb      	ldrb	r3, [r7, #22]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d0d1      	beq.n	80008ee <ltc6811_read+0x92>
#endif
	}


	// ISOCS ausschalten
	ISOCS_DISABLE();
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000950:	4803      	ldr	r0, [pc, #12]	; (8000960 <ltc6811_read+0x104>)
 8000952:	f003 f8ff 	bl	8003b54 <HAL_GPIO_WritePin>
		ITM_SendNumber(data[i]);
	}
	ITM_SendChar('\n');
#endif

	return 0;
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	3718      	adds	r7, #24
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40021000 	.word	0x40021000
 8000964:	20000140 	.word	0x20000140

08000968 <peccommand>:
//----------------------------------------------------------------------

// Pec Command bauen
//----------------------------------------------------------------------
uint16_t peccommand(uint16_t command)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	80fb      	strh	r3, [r7, #6]
	// Variable definieren
	uint8_t pec[2];															// pec = Zwischenspeicher 16-Bit Command in 2x 8-Bit Bytes
	
	// 16 Bit Command in 8 Bit Array uebertragen
	pec[1] = (command & 0xFF);												// pec[1] = lower Command Byte
 8000972:	88fb      	ldrh	r3, [r7, #6]
 8000974:	b2db      	uxtb	r3, r3
 8000976:	737b      	strb	r3, [r7, #13]
	pec[0] = ((command >> 8) & 0x07);										// pec[0] = upper Command Byte
 8000978:	88fb      	ldrh	r3, [r7, #6]
 800097a:	0a1b      	lsrs	r3, r3, #8
 800097c:	b29b      	uxth	r3, r3
 800097e:	b2db      	uxtb	r3, r3
 8000980:	f003 0307 	and.w	r3, r3, #7
 8000984:	b2db      	uxtb	r3, r3
 8000986:	733b      	strb	r3, [r7, #12]
	
	// Pec zurueckgeben
	return peclookup(2, pec);
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	4619      	mov	r1, r3
 800098e:	2002      	movs	r0, #2
 8000990:	f000 f806 	bl	80009a0 <peclookup>
 8000994:	4603      	mov	r3, r0
}
 8000996:	4618      	mov	r0, r3
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <peclookup>:
//----------------------------------------------------------------------

// Pec kalculieren (Datasheet ltc6811 Page 76, Datasheet ltc6811 Page 72)
//----------------------------------------------------------------------
uint16_t peclookup(uint8_t len,	uint8_t *data)								// len = Anzahl Byte, data = Daten fuer die Pec ausgewaehlt wird
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	6039      	str	r1, [r7, #0]
 80009aa:	71fb      	strb	r3, [r7, #7]
	// Variable definieren
	uint16_t remainder, addr;												// remainder = Zwischenspeicher Pec, addr = Zwischenspeicher Addresse
	remainder = 16;															// Initialisiere reminder mit 16 (0b0000000000010000)
 80009ac:	2310      	movs	r3, #16
 80009ae:	81fb      	strh	r3, [r7, #14]
	
	// Schleife fuer die Pec-Calculation
	for(uint8_t i = 0; i < len; i++)
 80009b0:	2300      	movs	r3, #0
 80009b2:	737b      	strb	r3, [r7, #13]
 80009b4:	e019      	b.n	80009ea <peclookup+0x4a>
	{
		// Kalkuliere Pec Anhand der Lookuptabelle
		addr = ((remainder >> 7) ^ data[i]) & 0xFF;							// Tabellenaddresse berechnen
 80009b6:	89fb      	ldrh	r3, [r7, #14]
 80009b8:	09db      	lsrs	r3, r3, #7
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	7b7b      	ldrb	r3, [r7, #13]
 80009be:	6839      	ldr	r1, [r7, #0]
 80009c0:	440b      	add	r3, r1
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	4053      	eors	r3, r2
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ pec15Table[addr];					// Pec berechnen
 80009ce:	89fb      	ldrh	r3, [r7, #14]
 80009d0:	021b      	lsls	r3, r3, #8
 80009d2:	b21a      	sxth	r2, r3
 80009d4:	897b      	ldrh	r3, [r7, #10]
 80009d6:	490b      	ldr	r1, [pc, #44]	; (8000a04 <peclookup+0x64>)
 80009d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80009dc:	b21b      	sxth	r3, r3
 80009de:	4053      	eors	r3, r2
 80009e0:	b21b      	sxth	r3, r3
 80009e2:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i < len; i++)
 80009e4:	7b7b      	ldrb	r3, [r7, #13]
 80009e6:	3301      	adds	r3, #1
 80009e8:	737b      	strb	r3, [r7, #13]
 80009ea:	7b7a      	ldrb	r2, [r7, #13]
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d3e1      	bcc.n	80009b6 <peclookup+0x16>
//		uartTransmitNumber(data[i], 16);
//		uartTransmit("\n", 1);
	}
	
	// Pec zurueckgeben
	return (remainder << 1);												// Der Pec hat eine 0 als LSB, remainder muss um 1 nach links geshiftet werden
 80009f2:	89fb      	ldrh	r3, [r7, #14]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	b29b      	uxth	r3, r3
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	08007c28 	.word	0x08007c28

08000a08 <peccheck>:
//----------------------------------------------------------------------*/

// Validiere Pec von Daten
//----------------------------------------------------------------------
uint8_t peccheck(uint8_t len, uint8_t *data)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	6039      	str	r1, [r7, #0]
 8000a12:	71fb      	strb	r3, [r7, #7]
	// Variable definieren
	uint16_t pec = peclookup(len, data);
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	6839      	ldr	r1, [r7, #0]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ffc1 	bl	80009a0 <peclookup>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	81fb      	strh	r3, [r7, #14]

	// Wenn Ergebnis 0, ist Pec OK
	if (pec == 0)
 8000a22:	89fb      	ldrh	r3, [r7, #14]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d101      	bne.n	8000a2c <peccheck+0x24>
	{
		return 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	e000      	b.n	8000a2e <peccheck+0x26>
	}
	// Wenn Ergebnis 1, ist Pec nicht OK
	else
	{
		return 1;
 8000a2c:	2301      	movs	r3, #1
	}
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <ltc6811_check>:
//----------------------------------------------------------------------

// LTC6811 Status auslesen und auswerten
//----------------------------------------------------------------------
uint8_t ltc6811_check(void)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b092      	sub	sp, #72	; 0x48
 8000a3a:	af00      	add	r7, sp, #0
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Check LTC6811.\n");
#endif

	// Variablen definieren
	uint8_t tmp_data[64] = {0}, error = 0;									// Speicher Registerwerte, Fehlerspeicher
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	f107 0308 	add.w	r3, r7, #8
 8000a44:	223c      	movs	r2, #60	; 0x3c
 8000a46:	2100      	movs	r1, #0
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f006 fe8d 	bl	8007768 <memset>
 8000a4e:	2300      	movs	r3, #0
 8000a50:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000a54:	f7ff fe04 	bl	8000660 <wakeup_ltc6811>

	// Alle Register zuruecksetzen
	ltc6811(CLRCELL);														// Register Zellspannung auf default setzen
 8000a58:	f240 7011 	movw	r0, #1809	; 0x711
 8000a5c:	f7ff fe28 	bl	80006b0 <ltc6811>
	ltc6811(CLRAUX);														// Register GPIO-Spannung auf default setzen
 8000a60:	f240 7012 	movw	r0, #1810	; 0x712
 8000a64:	f7ff fe24 	bl	80006b0 <ltc6811>
	ltc6811(CLRSTAT);														// Register Interne Messungen auf default setzen
 8000a68:	f240 7013 	movw	r0, #1811	; 0x713
 8000a6c:	f7ff fe20 	bl	80006b0 <ltc6811>

	// Lese Register Status B aus
	ltc6811_read(RDSTATB, &tmp_data[0]);
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	4619      	mov	r1, r3
 8000a74:	2012      	movs	r0, #18
 8000a76:	f7ff fef1 	bl	800085c <ltc6811_read>
		ITM_SendChar('\n');
#endif
	}

	// Selbsttest 1 Digitale Filter
	if (ltc6811_test(ST1 | MD73) == 1)
 8000a7a:	f44f 7090 	mov.w	r0, #288	; 0x120
 8000a7e:	f000 f83f 	bl	8000b00 <ltc6811_test>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d105      	bne.n	8000a94 <ltc6811_check+0x5e>
	{
		error |= (1 << 1);													// Selbsttest 1 nicht bestanden
 8000a88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#ifdef DEBUG_LTC6811
		ITM_SendString("Selbsttest 1 Fehler");
		ITM_SendChar('\n');
#endif
	}
	HAL_Delay(300);
 8000a94:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a98:	f002 f9b6 	bl	8002e08 <HAL_Delay>

	// Selbsttest 2 Digitale Filter
	if (ltc6811_test(ST2 | MD73) == 1)
 8000a9c:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8000aa0:	f000 f82e 	bl	8000b00 <ltc6811_test>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d105      	bne.n	8000ab6 <ltc6811_check+0x80>
	{
		error |= (1 << 2);													// Selbsttest 2 nicht bestanden
 8000aaa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000aae:	f043 0304 	orr.w	r3, r3, #4
 8000ab2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#ifdef DEBUG_LTC6811
		ITM_SendString("Selbsttest 2 Fehler");
		ITM_SendChar('\n');
#endif
	}
	HAL_Delay(300);
 8000ab6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000aba:	f002 f9a5 	bl	8002e08 <HAL_Delay>

	// Selbsttest Multiplexer
	if (ltc6811_diagn() == 1)
 8000abe:	f000 fa09 	bl	8000ed4 <ltc6811_diagn>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d105      	bne.n	8000ad4 <ltc6811_check+0x9e>
	{
		error |= (1 << 3);													// Multiplexertest nicht bestanden
 8000ac8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000acc:	f043 0308 	orr.w	r3, r3, #8
 8000ad0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#ifdef DEBUG_LTC6811
		ITM_SendString("Multiplexer Fehler");
		ITM_SendChar('\n');
#endif
	}
	HAL_Delay(300);
 8000ad4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ad8:	f002 f996 	bl	8002e08 <HAL_Delay>

	// Open Wire Check durchfuehren
	if (ltc6811_openwire() == 1)
 8000adc:	f000 fa1c 	bl	8000f18 <ltc6811_openwire>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d105      	bne.n	8000af2 <ltc6811_check+0xbc>
	{
		error |= (1 << 4);													// Open-Wire Test nicht bestanden
 8000ae6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000aea:	f043 0310 	orr.w	r3, r3, #16
 8000aee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	ITM_SendNumber(error);
	ITM_SendChar('\n');
#endif

	// Fehlercode zurueckgeben
	return error;															// Fehler 0 = alles Ok, Fehler > 0 = Selbsttest fehlerhaft
 8000af2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3748      	adds	r7, #72	; 0x48
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <ltc6811_test>:
//----------------------------------------------------------------------

// Selbsttest Digitale Filter (Datasheet ltc6811 Page 28)
//----------------------------------------------------------------------
uint8_t ltc6811_test(uint16_t command)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b094      	sub	sp, #80	; 0x50
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	80fb      	strh	r3, [r7, #6]
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Test LTC6811.\n");
#endif

	// Variablen definieren
	uint8_t tmp_data[64] = {0};												// Speicher Registerwerte
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	223c      	movs	r2, #60	; 0x3c
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f006 fe26 	bl	8007768 <memset>
	uint16_t tmp = 0, test_pattern = 0;										// Zwischenspeicher, Kontrollvariable Selbsttest
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000b22:	2300      	movs	r3, #0
 8000b24:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	// Commands fuer Status senden  Test 1
	ltc6811(CVST | command);												// Digitalfilter Check Zellspannungen
 8000b28:	88fb      	ldrh	r3, [r7, #6]
 8000b2a:	f443 7301 	orr.w	r3, r3, #516	; 0x204
 8000b2e:	f043 0303 	orr.w	r3, r3, #3
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fdbb 	bl	80006b0 <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 8000b3a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b3e:	f002 f963 	bl	8002e08 <HAL_Delay>
	ltc6811(AUXST | command);												// Digitalfilter Check GPIO-Spannungen
 8000b42:	88fb      	ldrh	r3, [r7, #6]
 8000b44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b48:	f043 0307 	orr.w	r3, r3, #7
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fdae 	bl	80006b0 <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 8000b54:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b58:	f002 f956 	bl	8002e08 <HAL_Delay>
	ltc6811(STATST | command);												// Digitalfilter Check Interne Messungen
 8000b5c:	88fb      	ldrh	r3, [r7, #6]
 8000b5e:	f443 6381 	orr.w	r3, r3, #1032	; 0x408
 8000b62:	f043 0307 	orr.w	r3, r3, #7
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fda1 	bl	80006b0 <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 8000b6e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b72:	f002 f949 	bl	8002e08 <HAL_Delay>

	// Register auslesen Test 1
	// Spannungsregister
	ltc6811_read(RDCVA, &tmp_data[0]);										// Lese Register CVA zurueck
 8000b76:	f107 0308 	add.w	r3, r7, #8
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	2004      	movs	r0, #4
 8000b7e:	f7ff fe6d 	bl	800085c <ltc6811_read>
	ltc6811_read(RDCVB, &tmp_data[8]);										// Lese Register CVB zurueck
 8000b82:	f107 0308 	add.w	r3, r7, #8
 8000b86:	3308      	adds	r3, #8
 8000b88:	4619      	mov	r1, r3
 8000b8a:	2006      	movs	r0, #6
 8000b8c:	f7ff fe66 	bl	800085c <ltc6811_read>
	ltc6811_read(RDCVC, &tmp_data[16]);										// Lese Register CVC zurueck
 8000b90:	f107 0308 	add.w	r3, r7, #8
 8000b94:	3310      	adds	r3, #16
 8000b96:	4619      	mov	r1, r3
 8000b98:	2008      	movs	r0, #8
 8000b9a:	f7ff fe5f 	bl	800085c <ltc6811_read>
	ltc6811_read(RDCVD, &tmp_data[24]);										// Lese Register CVD zurueck
 8000b9e:	f107 0308 	add.w	r3, r7, #8
 8000ba2:	3318      	adds	r3, #24
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	200a      	movs	r0, #10
 8000ba8:	f7ff fe58 	bl	800085c <ltc6811_read>

	// GPIO-Register
	ltc6811_read(RDAUXA, &tmp_data[32]);									// Lese Register AUXA zurueck
 8000bac:	f107 0308 	add.w	r3, r7, #8
 8000bb0:	3320      	adds	r3, #32
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	200c      	movs	r0, #12
 8000bb6:	f7ff fe51 	bl	800085c <ltc6811_read>
	ltc6811_read(RDAUXB, &tmp_data[40]);									// Lese Register AUXB zurueck
 8000bba:	f107 0308 	add.w	r3, r7, #8
 8000bbe:	3328      	adds	r3, #40	; 0x28
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	200e      	movs	r0, #14
 8000bc4:	f7ff fe4a 	bl	800085c <ltc6811_read>

	// Statusregister
	ltc6811_read(RDSTATA, &tmp_data[48]);									// Lese Register STATA zurueck
 8000bc8:	f107 0308 	add.w	r3, r7, #8
 8000bcc:	3330      	adds	r3, #48	; 0x30
 8000bce:	4619      	mov	r1, r3
 8000bd0:	2010      	movs	r0, #16
 8000bd2:	f7ff fe43 	bl	800085c <ltc6811_read>
	ltc6811_read(RDSTATB, &tmp_data[56]);									// Lese Register STATB zurueck
 8000bd6:	f107 0308 	add.w	r3, r7, #8
 8000bda:	3338      	adds	r3, #56	; 0x38
 8000bdc:	4619      	mov	r1, r3
 8000bde:	2012      	movs	r0, #18
 8000be0:	f7ff fe3c 	bl	800085c <ltc6811_read>

	// Lookup fuer Selbstest digitaler Filter
	// Kontrollvariable heraussuchen
	if (command & MD2714)													// Wenn Sampling Frequenz = MD2714
 8000be4:	88fb      	ldrh	r3, [r7, #6]
 8000be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d032      	beq.n	8000c54 <ltc6811_test+0x154>
	{
		// Wenn ADCOPT gesetzt
		if (Ltc6811_Conf.ADCOPT == 1)
 8000bee:	4bb8      	ldr	r3, [pc, #736]	; (8000ed0 <ltc6811_test+0x3d0>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d013      	beq.n	8000c24 <ltc6811_test+0x124>
		{
			// Wenn Selbsttest 1 gewaehlt
			if (command == ST1)
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	2b20      	cmp	r3, #32
 8000c00:	d104      	bne.n	8000c0c <ltc6811_test+0x10c>
			{
				test_pattern = 0x9553;										// Registerwert bei 14kHz
 8000c02:	f249 5353 	movw	r3, #38227	; 0x9553
 8000c06:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c0a:	e03a      	b.n	8000c82 <ltc6811_test+0x182>
			}
			// Wenn Selbsttest 2 gewaehlt
			else if (command == ST2)
 8000c0c:	88fb      	ldrh	r3, [r7, #6]
 8000c0e:	2b40      	cmp	r3, #64	; 0x40
 8000c10:	d104      	bne.n	8000c1c <ltc6811_test+0x11c>
			{
				test_pattern = 0x6AAC;										// Registerwert bei 14kHz
 8000c12:	f646 23ac 	movw	r3, #27308	; 0x6aac
 8000c16:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c1a:	e032      	b.n	8000c82 <ltc6811_test+0x182>
			}
			// Bei fehlerhaften Einstellungen
			else
			{
				test_pattern = 0;											// Registerwert = 0 damit Fehler ausloest
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c22:	e02e      	b.n	8000c82 <ltc6811_test+0x182>
			}
		}
		else																// Wenn ADCOPT nicht gesetzt
		{
			// Wenn Selbsttest 1 gewaehlt
			if (command & ST1)
 8000c24:	88fb      	ldrh	r3, [r7, #6]
 8000c26:	f003 0320 	and.w	r3, r3, #32
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d004      	beq.n	8000c38 <ltc6811_test+0x138>
			{
				test_pattern = 0x9565;										// Registerwert bei 27kHz
 8000c2e:	f249 5365 	movw	r3, #38245	; 0x9565
 8000c32:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c36:	e024      	b.n	8000c82 <ltc6811_test+0x182>
			}
			// Wenn Selbsttest 2 gewaehlt
			else if (command & ST2)
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d004      	beq.n	8000c4c <ltc6811_test+0x14c>
			{
				test_pattern = 0x6A9A;										// Registerwert bei 27kHz
 8000c42:	f646 239a 	movw	r3, #27290	; 0x6a9a
 8000c46:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c4a:	e01a      	b.n	8000c82 <ltc6811_test+0x182>
			}
			// Bei fehlerhaften Einstellungen
			else
			{
				test_pattern = 0;											// Registerwert = 0 damit Fehler ausloest
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c52:	e016      	b.n	8000c82 <ltc6811_test+0x182>
		}
	}
	else
	{
		// Wenn Selbsttest 1 gewaehlt
		if (command & ST1)
 8000c54:	88fb      	ldrh	r3, [r7, #6]
 8000c56:	f003 0320 	and.w	r3, r3, #32
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d004      	beq.n	8000c68 <ltc6811_test+0x168>
		{
			test_pattern = 0x9555;											// Registerwert bei allen anderen Sampling Frequenzen
 8000c5e:	f249 5355 	movw	r3, #38229	; 0x9555
 8000c62:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c66:	e00c      	b.n	8000c82 <ltc6811_test+0x182>
		}
		// Wenn Selbsttest 2 gewaehlt
		else if (command & ST2)
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d004      	beq.n	8000c7c <ltc6811_test+0x17c>
		{
			test_pattern = 0x6AAA;											// Registerwert bei allen anderen Sampling Frequenzen
 8000c72:	f646 23aa 	movw	r3, #27306	; 0x6aaa
 8000c76:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c7a:	e002      	b.n	8000c82 <ltc6811_test+0x182>
		}
		// Bei fehlerhaften Einstellungen
		else
		{
			test_pattern = 0;												// Registerwert = 0 damit Fehler ausloest
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		}
	}

	// Daten pruefen Test 1
	for (uint8_t i=0; i<22; i++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8000c88:	e117      	b.n	8000eba <ltc6811_test+0x3ba>
	{
		// Auswaehlen welches Register im Array steht
		switch (i)
 8000c8a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000c8e:	2b1d      	cmp	r3, #29
 8000c90:	f200 8105 	bhi.w	8000e9e <ltc6811_test+0x39e>
 8000c94:	a201      	add	r2, pc, #4	; (adr r2, 8000c9c <ltc6811_test+0x19c>)
 8000c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c9a:	bf00      	nop
 8000c9c:	08000d15 	.word	0x08000d15
 8000ca0:	08000d15 	.word	0x08000d15
 8000ca4:	08000d15 	.word	0x08000d15
 8000ca8:	08000d43 	.word	0x08000d43
 8000cac:	08000d43 	.word	0x08000d43
 8000cb0:	08000d43 	.word	0x08000d43
 8000cb4:	08000d73 	.word	0x08000d73
 8000cb8:	08000d73 	.word	0x08000d73
 8000cbc:	08000d73 	.word	0x08000d73
 8000cc0:	08000da5 	.word	0x08000da5
 8000cc4:	08000da5 	.word	0x08000da5
 8000cc8:	08000da5 	.word	0x08000da5
 8000ccc:	08000dd7 	.word	0x08000dd7
 8000cd0:	08000dd7 	.word	0x08000dd7
 8000cd4:	08000dd7 	.word	0x08000dd7
 8000cd8:	08000e09 	.word	0x08000e09
 8000cdc:	08000e09 	.word	0x08000e09
 8000ce0:	08000e09 	.word	0x08000e09
 8000ce4:	08000e3b 	.word	0x08000e3b
 8000ce8:	08000e9f 	.word	0x08000e9f
 8000cec:	08000e3b 	.word	0x08000e3b
 8000cf0:	08000e6d 	.word	0x08000e6d
 8000cf4:	08000e9f 	.word	0x08000e9f
 8000cf8:	08000e9f 	.word	0x08000e9f
 8000cfc:	08000e9f 	.word	0x08000e9f
 8000d00:	08000e9f 	.word	0x08000e9f
 8000d04:	08000e9f 	.word	0x08000e9f
 8000d08:	08000e9f 	.word	0x08000e9f
 8000d0c:	08000e9f 	.word	0x08000e9f
 8000d10:	08000e3b 	.word	0x08000e3b
		{
			// Register CVA
			case 0:
			case 1:
			case 2:
				tmp = ((tmp_data[i*2+1]<<8)|tmp_data[i*2]);					// Register CVA umwandeln
 8000d14:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	3350      	adds	r3, #80	; 0x50
 8000d1e:	443b      	add	r3, r7
 8000d20:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d24:	021b      	lsls	r3, r3, #8
 8000d26:	b21a      	sxth	r2, r3
 8000d28:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	3350      	adds	r3, #80	; 0x50
 8000d30:	443b      	add	r3, r7
 8000d32:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d36:	b21b      	sxth	r3, r3
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	b21b      	sxth	r3, r3
 8000d3c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000d40:	e0ae      	b.n	8000ea0 <ltc6811_test+0x3a0>
			// Register CVB
			case 3:
			case 4:
			case 5:
				tmp = ((tmp_data[i*2+3] << 8)|tmp_data[i*2+2]);				// Register CVB umwandeln
 8000d42:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	3303      	adds	r3, #3
 8000d4a:	3350      	adds	r3, #80	; 0x50
 8000d4c:	443b      	add	r3, r7
 8000d4e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d52:	021b      	lsls	r3, r3, #8
 8000d54:	b21a      	sxth	r2, r3
 8000d56:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	3350      	adds	r3, #80	; 0x50
 8000d60:	443b      	add	r3, r7
 8000d62:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d66:	b21b      	sxth	r3, r3
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	b21b      	sxth	r3, r3
 8000d6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000d70:	e096      	b.n	8000ea0 <ltc6811_test+0x3a0>
			// Register CVC
			case 6:
			case 7:
			case 8:
				tmp = ((tmp_data[(i+2)*2+1] << 8)|tmp_data[(i+2)*2]);		// Register CVC umwandeln
 8000d72:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d76:	3302      	adds	r3, #2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	3350      	adds	r3, #80	; 0x50
 8000d7e:	443b      	add	r3, r7
 8000d80:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d84:	021b      	lsls	r3, r3, #8
 8000d86:	b21a      	sxth	r2, r3
 8000d88:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	3350      	adds	r3, #80	; 0x50
 8000d92:	443b      	add	r3, r7
 8000d94:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d98:	b21b      	sxth	r3, r3
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	b21b      	sxth	r3, r3
 8000d9e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000da2:	e07d      	b.n	8000ea0 <ltc6811_test+0x3a0>
			// Register CVD
			case 9:
			case 10:
			case 11:
				tmp = ((tmp_data[(i+2)*2+3] << 8)|tmp_data[(i+2)*2+2]);		// Register CVD umwandeln
 8000da4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000da8:	3302      	adds	r3, #2
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	3303      	adds	r3, #3
 8000dae:	3350      	adds	r3, #80	; 0x50
 8000db0:	443b      	add	r3, r7
 8000db2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000db6:	021b      	lsls	r3, r3, #8
 8000db8:	b21a      	sxth	r2, r3
 8000dba:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000dbe:	3303      	adds	r3, #3
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	3350      	adds	r3, #80	; 0x50
 8000dc4:	443b      	add	r3, r7
 8000dc6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000dca:	b21b      	sxth	r3, r3
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	b21b      	sxth	r3, r3
 8000dd0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000dd4:	e064      	b.n	8000ea0 <ltc6811_test+0x3a0>
			// Register AUXA
			case 12:
			case 13:
			case 14:
				tmp = ((tmp_data[(i+4)*2+1] << 8)|tmp_data[(i+4)*2]);		// Register AUXA umwandeln
 8000dd6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000dda:	3304      	adds	r3, #4
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	3301      	adds	r3, #1
 8000de0:	3350      	adds	r3, #80	; 0x50
 8000de2:	443b      	add	r3, r7
 8000de4:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000de8:	021b      	lsls	r3, r3, #8
 8000dea:	b21a      	sxth	r2, r3
 8000dec:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000df0:	3304      	adds	r3, #4
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	3350      	adds	r3, #80	; 0x50
 8000df6:	443b      	add	r3, r7
 8000df8:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000dfc:	b21b      	sxth	r3, r3
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	b21b      	sxth	r3, r3
 8000e02:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000e06:	e04b      	b.n	8000ea0 <ltc6811_test+0x3a0>
			// Register AUXB
			case 15:
			case 16:
			case 17:
				tmp = ((tmp_data[(i+4)*2+3] << 8)|tmp_data[(i+4)*2+2]);		// Register AUXB umwandeln
 8000e08:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	3303      	adds	r3, #3
 8000e12:	3350      	adds	r3, #80	; 0x50
 8000e14:	443b      	add	r3, r7
 8000e16:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e1a:	021b      	lsls	r3, r3, #8
 8000e1c:	b21a      	sxth	r2, r3
 8000e1e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e22:	3305      	adds	r3, #5
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	3350      	adds	r3, #80	; 0x50
 8000e28:	443b      	add	r3, r7
 8000e2a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e2e:	b21b      	sxth	r3, r3
 8000e30:	4313      	orrs	r3, r2
 8000e32:	b21b      	sxth	r3, r3
 8000e34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000e38:	e032      	b.n	8000ea0 <ltc6811_test+0x3a0>
			// Register STATA
			case 18:
			case 29:
			case 20:
				tmp = ((tmp_data[(i+6)*2+1] << 8)|tmp_data[(i+6)*2]);		// Register STATA umwandeln
 8000e3a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e3e:	3306      	adds	r3, #6
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	3301      	adds	r3, #1
 8000e44:	3350      	adds	r3, #80	; 0x50
 8000e46:	443b      	add	r3, r7
 8000e48:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e4c:	021b      	lsls	r3, r3, #8
 8000e4e:	b21a      	sxth	r2, r3
 8000e50:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e54:	3306      	adds	r3, #6
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	3350      	adds	r3, #80	; 0x50
 8000e5a:	443b      	add	r3, r7
 8000e5c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e60:	b21b      	sxth	r3, r3
 8000e62:	4313      	orrs	r3, r2
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000e6a:	e019      	b.n	8000ea0 <ltc6811_test+0x3a0>
			// Register STATB
			case 21:
				tmp = ((tmp_data[(i+6)*2+3] << 8)|tmp_data[(i+6)*2+2]);		// Register STATB umwandeln
 8000e6c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e70:	3306      	adds	r3, #6
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	3303      	adds	r3, #3
 8000e76:	3350      	adds	r3, #80	; 0x50
 8000e78:	443b      	add	r3, r7
 8000e7a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	b21a      	sxth	r2, r3
 8000e82:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e86:	3307      	adds	r3, #7
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	3350      	adds	r3, #80	; 0x50
 8000e8c:	443b      	add	r3, r7
 8000e8e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e92:	b21b      	sxth	r3, r3
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b21b      	sxth	r3, r3
 8000e98:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000e9c:	e000      	b.n	8000ea0 <ltc6811_test+0x3a0>
			// Kein Register
			default:
				break;
 8000e9e:	bf00      	nop
		}

		// Vergleiche Registerwert mit Vorgabewert aus Datenblatt
		if (tmp != test_pattern)
 8000ea0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8000ea4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d001      	beq.n	8000eb0 <ltc6811_test+0x3b0>
#ifdef DEBUG_LTC6811
			ITM_SendString("Test failed: ");
			ITM_SendNumber(i);
			ITM_SendChar('\n');
#endif
			return 1;														// Selbsttest 1 nicht OK
 8000eac:	2301      	movs	r3, #1
 8000eae:	e00a      	b.n	8000ec6 <ltc6811_test+0x3c6>
	for (uint8_t i=0; i<22; i++)
 8000eb0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8000eba:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ebe:	2b15      	cmp	r3, #21
 8000ec0:	f67f aee3 	bls.w	8000c8a <ltc6811_test+0x18a>
		}
	}
#ifdef DEBUG_LTC6811
	ITM_SendString("Test passed\n");
#endif
	return 0;																// Selbsttest 1 OK
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3750      	adds	r7, #80	; 0x50
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000028 	.word	0x20000028

08000ed4 <ltc6811_diagn>:
//----------------------------------------------------------------------

// Selbstdiagnose Multiplexer (Datasheet ltc6811 Page 27)
//----------------------------------------------------------------------
uint8_t ltc6811_diagn(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Diagnostic LTC6811.\n");
#endif

	// Variablen definieren
	uint8_t tmp_data[8] = {0};												// Speicher Registerwerte
 8000eda:	2300      	movs	r3, #0
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000ee2:	f7ff fbbd 	bl	8000660 <wakeup_ltc6811>

	// Command senden
	ltc6811(DIAGN);															// Multiplexer Check
 8000ee6:	f240 7015 	movw	r0, #1813	; 0x715
 8000eea:	f7ff fbe1 	bl	80006b0 <ltc6811>

	// Verzoegerungszeit 10ms, DIAG Befehl braucht ca. 400µs bis 4ms
	HAL_Delay(10);
 8000eee:	200a      	movs	r0, #10
 8000ef0:	f001 ff8a 	bl	8002e08 <HAL_Delay>

	// Lese Register
	ltc6811_read(RDSTATB, &tmp_data[0]);									// Lese Status B Register fuer Multiplexer Check
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	2012      	movs	r0, #18
 8000efa:	f7ff fcaf 	bl	800085c <ltc6811_read>

	// Multiplexer pruefen
	if (tmp_data[5] & (1 << 1))
 8000efe:	797b      	ldrb	r3, [r7, #5]
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <ltc6811_diagn+0x38>
	{
		return 1;															// Multiplexertest nicht OK
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e000      	b.n	8000f0e <ltc6811_diagn+0x3a>
	}

	return 0;																// Multiplexertest OK
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <ltc6811_openwire>:
//----------------------------------------------------------------------

// LTC6811 Openwire check
//----------------------------------------------------------------------
uint8_t ltc6811_openwire(void)
{
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b09b      	sub	sp, #108	; 0x6c
 8000f1c:	af00      	add	r7, sp, #0
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Openwire LTC6811.\n");
#endif

	// Arrays definieren
	uint8_t pulldown[32] = {0}, pullup[32] = {0};							// Speicher Registerwerte
 8000f1e:	2300      	movs	r3, #0
 8000f20:	647b      	str	r3, [r7, #68]	; 0x44
 8000f22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]
 8000f32:	615a      	str	r2, [r3, #20]
 8000f34:	619a      	str	r2, [r3, #24]
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
 8000f3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]
 8000f4a:	615a      	str	r2, [r3, #20]
 8000f4c:	619a      	str	r2, [r3, #24]
	uint16_t cell[1] = {0}, openwire[13] = {0};								// Speicher Zelle, Openwire vergleic Threshold
 8000f4e:	2300      	movs	r3, #0
 8000f50:	843b      	strh	r3, [r7, #32]
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
 8000f60:	615a      	str	r2, [r3, #20]
 8000f62:	831a      	strh	r2, [r3, #24]

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000f64:	f7ff fb7c 	bl	8000660 <wakeup_ltc6811>

	// Pullup Current, drei Durchgaenge
	for (uint8_t i = 0; i < 2; i++)
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000f6e:	e00c      	b.n	8000f8a <ltc6811_openwire+0x72>
	{

		// Commands fuer Openwire Test
		ltc6811(ADOW | MD262 | PUP);										// Pullup Current
 8000f70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f74:	f7ff fb9c 	bl	80006b0 <ltc6811>
		HAL_Delay(300);
 8000f78:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f7c:	f001 ff44 	bl	8002e08 <HAL_Delay>
	for (uint8_t i = 0; i < 2; i++)
 8000f80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f84:	3301      	adds	r3, #1
 8000f86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000f8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d9ee      	bls.n	8000f70 <ltc6811_openwire+0x58>
	}

	// Register auslesen OpenWire
	ltc6811_read(RDCVA, &pullup[0]);
 8000f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f96:	4619      	mov	r1, r3
 8000f98:	2004      	movs	r0, #4
 8000f9a:	f7ff fc5f 	bl	800085c <ltc6811_read>
	ltc6811_read(RDCVB, &pullup[8]);
 8000f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa2:	3308      	adds	r3, #8
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	2006      	movs	r0, #6
 8000fa8:	f7ff fc58 	bl	800085c <ltc6811_read>
	ltc6811_read(RDCVC, &pullup[16]);
 8000fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb0:	3310      	adds	r3, #16
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	2008      	movs	r0, #8
 8000fb6:	f7ff fc51 	bl	800085c <ltc6811_read>
	ltc6811_read(RDCVD, &pullup[24]);
 8000fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbe:	3318      	adds	r3, #24
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	200a      	movs	r0, #10
 8000fc4:	f7ff fc4a 	bl	800085c <ltc6811_read>


	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000fc8:	f7ff fb4a 	bl	8000660 <wakeup_ltc6811>

	// Pulldown Current, drei Durchgaenge
	for (uint8_t i = 0; i < 2; i++)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8000fd2:	e00c      	b.n	8000fee <ltc6811_openwire+0xd6>
	{

		// Commands fuer Openwire Test
		ltc6811(ADOW | MD262 | PUP);											// Pulldown Current
 8000fd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd8:	f7ff fb6a 	bl	80006b0 <ltc6811>
		HAL_Delay(300);
 8000fdc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000fe0:	f001 ff12 	bl	8002e08 <HAL_Delay>
	for (uint8_t i = 0; i < 2; i++)
 8000fe4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000fe8:	3301      	adds	r3, #1
 8000fea:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8000fee:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d9ee      	bls.n	8000fd4 <ltc6811_openwire+0xbc>
	}

	// Register auslesen OpenWire
	ltc6811_read(RDCVA, &pulldown[0]);
 8000ff6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	2004      	movs	r0, #4
 8000ffe:	f7ff fc2d 	bl	800085c <ltc6811_read>
	ltc6811_read(RDCVB, &pulldown[8]);
 8001002:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001006:	3308      	adds	r3, #8
 8001008:	4619      	mov	r1, r3
 800100a:	2006      	movs	r0, #6
 800100c:	f7ff fc26 	bl	800085c <ltc6811_read>
	ltc6811_read(RDCVC, &pulldown[16]);
 8001010:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001014:	3310      	adds	r3, #16
 8001016:	4619      	mov	r1, r3
 8001018:	2008      	movs	r0, #8
 800101a:	f7ff fc1f 	bl	800085c <ltc6811_read>
	ltc6811_read(RDCVD, &pulldown[24]);
 800101e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001022:	3318      	adds	r3, #24
 8001024:	4619      	mov	r1, r3
 8001026:	200a      	movs	r0, #10
 8001028:	f7ff fc18 	bl	800085c <ltc6811_read>

	// Schleife zum umformatieren der Daten
	for (uint8_t i = 0; i < 13; i++)
 800102c:	2300      	movs	r3, #0
 800102e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8001032:	e12d      	b.n	8001290 <ltc6811_openwire+0x378>
	{
		// Auswahl welche Leitung
		switch (i)
 8001034:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001038:	2b0c      	cmp	r3, #12
 800103a:	f200 8123 	bhi.w	8001284 <ltc6811_openwire+0x36c>
 800103e:	a201      	add	r2, pc, #4	; (adr r2, 8001044 <ltc6811_openwire+0x12c>)
 8001040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001044:	08001079 	.word	0x08001079
 8001048:	0800109d 	.word	0x0800109d
 800104c:	0800109d 	.word	0x0800109d
 8001050:	0800110b 	.word	0x0800110b
 8001054:	0800110b 	.word	0x0800110b
 8001058:	0800110b 	.word	0x0800110b
 800105c:	0800117d 	.word	0x0800117d
 8001060:	0800117d 	.word	0x0800117d
 8001064:	0800117d 	.word	0x0800117d
 8001068:	080011ef 	.word	0x080011ef
 800106c:	080011ef 	.word	0x080011ef
 8001070:	080011ef 	.word	0x080011ef
 8001074:	08001261 	.word	0x08001261
		{
			// Leitungen Zelle 1/2 bis 3/4
			case 0:
				openwire[i] = ((pulldown[1] << 8) + pulldown[0]);
 8001078:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800107c:	b29b      	uxth	r3, r3
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	b299      	uxth	r1, r3
 8001082:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001086:	b29a      	uxth	r2, r3
 8001088:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800108c:	440a      	add	r2, r1
 800108e:	b292      	uxth	r2, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	3368      	adds	r3, #104	; 0x68
 8001094:	443b      	add	r3, r7
 8001096:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 800109a:	e0f4      	b.n	8001286 <ltc6811_openwire+0x36e>
			case 1:
			case 2:
				openwire[i] = getDifference(((pullup[i*2+1] << 8) + pullup[i*2]), ((pulldown[i*2+1] << 8) + pulldown[i*2]));
 800109c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	3301      	adds	r3, #1
 80010a4:	3368      	adds	r3, #104	; 0x68
 80010a6:	443b      	add	r3, r7
 80010a8:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	3368      	adds	r3, #104	; 0x68
 80010ba:	443b      	add	r3, r7
 80010bc:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	4413      	add	r3, r2
 80010c4:	b298      	uxth	r0, r3
 80010c6:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	3301      	adds	r3, #1
 80010ce:	3368      	adds	r3, #104	; 0x68
 80010d0:	443b      	add	r3, r7
 80010d2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b29a      	uxth	r2, r3
 80010dc:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	3368      	adds	r3, #104	; 0x68
 80010e4:	443b      	add	r3, r7
 80010e6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	4413      	add	r3, r2
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	f897 4065 	ldrb.w	r4, [r7, #101]	; 0x65
 80010f4:	4619      	mov	r1, r3
 80010f6:	f7ff fa91 	bl	800061c <getDifference>
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	0063      	lsls	r3, r4, #1
 8001100:	3368      	adds	r3, #104	; 0x68
 8001102:	443b      	add	r3, r7
 8001104:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 8001108:	e0bd      	b.n	8001286 <ltc6811_openwire+0x36e>
			// Leitungen Zelle 4/5 bis 6/7
			case 3:
			case 4:
			case 5:
				openwire[i] = getDifference(((pullup[i*2+3] << 8) + pullup[i*2+2]), ((pulldown[i*2+3] << 8) + pulldown[i*2+2]));
 800110a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	3303      	adds	r3, #3
 8001112:	3368      	adds	r3, #104	; 0x68
 8001114:	443b      	add	r3, r7
 8001116:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800111a:	b29b      	uxth	r3, r3
 800111c:	021b      	lsls	r3, r3, #8
 800111e:	b29a      	uxth	r2, r3
 8001120:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001124:	3301      	adds	r3, #1
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	3368      	adds	r3, #104	; 0x68
 800112a:	443b      	add	r3, r7
 800112c:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001130:	b29b      	uxth	r3, r3
 8001132:	4413      	add	r3, r2
 8001134:	b298      	uxth	r0, r3
 8001136:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	3303      	adds	r3, #3
 800113e:	3368      	adds	r3, #104	; 0x68
 8001140:	443b      	add	r3, r7
 8001142:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001146:	b29b      	uxth	r3, r3
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	b29a      	uxth	r2, r3
 800114c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001150:	3301      	adds	r3, #1
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	3368      	adds	r3, #104	; 0x68
 8001156:	443b      	add	r3, r7
 8001158:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800115c:	b29b      	uxth	r3, r3
 800115e:	4413      	add	r3, r2
 8001160:	b29b      	uxth	r3, r3
 8001162:	f897 4065 	ldrb.w	r4, [r7, #101]	; 0x65
 8001166:	4619      	mov	r1, r3
 8001168:	f7ff fa58 	bl	800061c <getDifference>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	0063      	lsls	r3, r4, #1
 8001172:	3368      	adds	r3, #104	; 0x68
 8001174:	443b      	add	r3, r7
 8001176:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 800117a:	e084      	b.n	8001286 <ltc6811_openwire+0x36e>
			// Leitungen Zelle 7/8 bis 9/10
			case 6:
			case 7:
			case 8:
				openwire[i] = getDifference(((pullup[i*2+5] << 8) + pullup[i*2+4]), ((pulldown[i*2+5] << 8) + pulldown[i*2+4]));
 800117c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	3305      	adds	r3, #5
 8001184:	3368      	adds	r3, #104	; 0x68
 8001186:	443b      	add	r3, r7
 8001188:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800118c:	b29b      	uxth	r3, r3
 800118e:	021b      	lsls	r3, r3, #8
 8001190:	b29a      	uxth	r2, r3
 8001192:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001196:	3302      	adds	r3, #2
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	3368      	adds	r3, #104	; 0x68
 800119c:	443b      	add	r3, r7
 800119e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	4413      	add	r3, r2
 80011a6:	b298      	uxth	r0, r3
 80011a8:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	3305      	adds	r3, #5
 80011b0:	3368      	adds	r3, #104	; 0x68
 80011b2:	443b      	add	r3, r7
 80011b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	b29a      	uxth	r2, r3
 80011be:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80011c2:	3302      	adds	r3, #2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	3368      	adds	r3, #104	; 0x68
 80011c8:	443b      	add	r3, r7
 80011ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	4413      	add	r3, r2
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	f897 4065 	ldrb.w	r4, [r7, #101]	; 0x65
 80011d8:	4619      	mov	r1, r3
 80011da:	f7ff fa1f 	bl	800061c <getDifference>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	0063      	lsls	r3, r4, #1
 80011e4:	3368      	adds	r3, #104	; 0x68
 80011e6:	443b      	add	r3, r7
 80011e8:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 80011ec:	e04b      	b.n	8001286 <ltc6811_openwire+0x36e>
			// Leitungen Zelle 10/11 und 11/12
			case 9:
			case 10:
			case 11:
				openwire[i] = getDifference(((pullup[i*2+7] << 8) + pullup[i*2+6]), ((pulldown[i*2+7] << 8) + pulldown[i*2+6]));
 80011ee:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	3307      	adds	r3, #7
 80011f6:	3368      	adds	r3, #104	; 0x68
 80011f8:	443b      	add	r3, r7
 80011fa:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b29a      	uxth	r2, r3
 8001204:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001208:	3303      	adds	r3, #3
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	3368      	adds	r3, #104	; 0x68
 800120e:	443b      	add	r3, r7
 8001210:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001214:	b29b      	uxth	r3, r3
 8001216:	4413      	add	r3, r2
 8001218:	b298      	uxth	r0, r3
 800121a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	3307      	adds	r3, #7
 8001222:	3368      	adds	r3, #104	; 0x68
 8001224:	443b      	add	r3, r7
 8001226:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800122a:	b29b      	uxth	r3, r3
 800122c:	021b      	lsls	r3, r3, #8
 800122e:	b29a      	uxth	r2, r3
 8001230:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001234:	3303      	adds	r3, #3
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	3368      	adds	r3, #104	; 0x68
 800123a:	443b      	add	r3, r7
 800123c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001240:	b29b      	uxth	r3, r3
 8001242:	4413      	add	r3, r2
 8001244:	b29b      	uxth	r3, r3
 8001246:	f897 4065 	ldrb.w	r4, [r7, #101]	; 0x65
 800124a:	4619      	mov	r1, r3
 800124c:	f7ff f9e6 	bl	800061c <getDifference>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	0063      	lsls	r3, r4, #1
 8001256:	3368      	adds	r3, #104	; 0x68
 8001258:	443b      	add	r3, r7
 800125a:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 800125e:	e012      	b.n	8001286 <ltc6811_openwire+0x36e>
			case 12:
				openwire[i] = ((pullup[29] << 8) + pullup[28]);
 8001260:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001264:	b29b      	uxth	r3, r3
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	b299      	uxth	r1, r3
 800126a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800126e:	b29a      	uxth	r2, r3
 8001270:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001274:	440a      	add	r2, r1
 8001276:	b292      	uxth	r2, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	3368      	adds	r3, #104	; 0x68
 800127c:	443b      	add	r3, r7
 800127e:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 8001282:	e000      	b.n	8001286 <ltc6811_openwire+0x36e>
			default:
				break;
 8001284:	bf00      	nop
	for (uint8_t i = 0; i < 13; i++)
 8001286:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800128a:	3301      	adds	r3, #1
 800128c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8001290:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001294:	2b0c      	cmp	r3, #12
 8001296:	f67f aecd 	bls.w	8001034 <ltc6811_openwire+0x11c>
		}
	}

	// Schleife zum Pruefen der Daten
	for (uint8_t i = 1; i < 12; i++)
 800129a:	2301      	movs	r3, #1
 800129c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 80012a0:	e01a      	b.n	80012d8 <ltc6811_openwire+0x3c0>
	{
		// Vergleiche Messdaten mit Threshold
		if (openwire[i] > OPENWIRE_THRESHOLD)
 80012a2:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	3368      	adds	r3, #104	; 0x68
 80012aa:	443b      	add	r3, r7
 80012ac:	f833 3c64 	ldrh.w	r3, [r3, #-100]
 80012b0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80012b4:	d90b      	bls.n	80012ce <ltc6811_openwire+0x3b6>
		{
			cell[0] |= (1 << i);											// Wenn Threshold ueberschritten, Offene Leitung
 80012b6:	8c3b      	ldrh	r3, [r7, #32]
 80012b8:	b21a      	sxth	r2, r3
 80012ba:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80012be:	2101      	movs	r1, #1
 80012c0:	fa01 f303 	lsl.w	r3, r1, r3
 80012c4:	b21b      	sxth	r3, r3
 80012c6:	4313      	orrs	r3, r2
 80012c8:	b21b      	sxth	r3, r3
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	843b      	strh	r3, [r7, #32]
	for (uint8_t i = 1; i < 12; i++)
 80012ce:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80012d2:	3301      	adds	r3, #1
 80012d4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 80012d8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80012dc:	2b0b      	cmp	r3, #11
 80012de:	d9e0      	bls.n	80012a2 <ltc6811_openwire+0x38a>
		}
	}

	// Offene Leitung erste Zelle messen
	if (openwire[0] == 0)
 80012e0:	88bb      	ldrh	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d104      	bne.n	80012f0 <ltc6811_openwire+0x3d8>
	{
		cell[0] |= (1 << 0);												// Unterste Leitung Offen
 80012e6:	8c3b      	ldrh	r3, [r7, #32]
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	843b      	strh	r3, [r7, #32]
	}

	// Offene Leitung letzte Zelle messen
	if (openwire[12] == 0)
 80012f0:	8bbb      	ldrh	r3, [r7, #28]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d104      	bne.n	8001300 <ltc6811_openwire+0x3e8>
	{
		cell[0] |= (1 << 12);												// Oberste Leitung offen
 80012f6:	8c3b      	ldrh	r3, [r7, #32]
 80012f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	843b      	strh	r3, [r7, #32]
	}

	// Wenn offene Leitung vorhanden
	if (cell[0] != 0)
 8001300:	8c3b      	ldrh	r3, [r7, #32]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <ltc6811_openwire+0x3f2>
	{
		return 1;															// Open Wire nicht OK
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <ltc6811_openwire+0x3f4>
	}

	return 0;																// Open Wire OK
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	376c      	adds	r7, #108	; 0x6c
 8001310:	46bd      	mov	sp, r7
 8001312:	bd90      	pop	{r4, r7, pc}

08001314 <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t\t\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t\t\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 800131a:	2115      	movs	r1, #21
 800131c:	483b      	ldr	r0, [pc, #236]	; (800140c <collectHardwareInfo+0xf8>)
 800131e:	f7ff f915 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 8001322:	f001 fdab 	bl	8002e7c <HAL_GetDEVID>
 8001326:	4603      	mov	r3, r0
 8001328:	210a      	movs	r1, #10
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f922 	bl	8000574 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 8001330:	2117      	movs	r1, #23
 8001332:	4837      	ldr	r0, [pc, #220]	; (8001410 <collectHardwareInfo+0xfc>)
 8001334:	f7ff f90a 	bl	800054c <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 8001338:	f001 fd94 	bl	8002e64 <HAL_GetREVID>
 800133c:	4603      	mov	r3, r0
 800133e:	f242 0201 	movw	r2, #8193	; 0x2001
 8001342:	4293      	cmp	r3, r2
 8001344:	d016      	beq.n	8001374 <collectHardwareInfo+0x60>
 8001346:	f242 0201 	movw	r2, #8193	; 0x2001
 800134a:	4293      	cmp	r3, r2
 800134c:	d817      	bhi.n	800137e <collectHardwareInfo+0x6a>
 800134e:	f241 0201 	movw	r2, #4097	; 0x1001
 8001352:	4293      	cmp	r3, r2
 8001354:	d004      	beq.n	8001360 <collectHardwareInfo+0x4c>
 8001356:	f241 0203 	movw	r2, #4099	; 0x1003
 800135a:	4293      	cmp	r3, r2
 800135c:	d005      	beq.n	800136a <collectHardwareInfo+0x56>
 800135e:	e00e      	b.n	800137e <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 8001360:	2101      	movs	r1, #1
 8001362:	482c      	ldr	r0, [pc, #176]	; (8001414 <collectHardwareInfo+0x100>)
 8001364:	f7ff f8f2 	bl	800054c <uartTransmit>
			break;
 8001368:	e011      	b.n	800138e <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 800136a:	2101      	movs	r1, #1
 800136c:	482a      	ldr	r0, [pc, #168]	; (8001418 <collectHardwareInfo+0x104>)
 800136e:	f7ff f8ed 	bl	800054c <uartTransmit>
			break;
 8001372:	e00c      	b.n	800138e <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8001374:	2101      	movs	r1, #1
 8001376:	4829      	ldr	r0, [pc, #164]	; (800141c <collectHardwareInfo+0x108>)
 8001378:	f7ff f8e8 	bl	800054c <uartTransmit>
			break;
 800137c:	e007      	b.n	800138e <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 800137e:	f001 fd71 	bl	8002e64 <HAL_GetREVID>
 8001382:	4603      	mov	r3, r0
 8001384:	210a      	movs	r1, #10
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f8f4 	bl	8000574 <uartTransmitNumber>
			break;
 800138c:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 800138e:	2115      	movs	r1, #21
 8001390:	4823      	ldr	r0, [pc, #140]	; (8001420 <collectHardwareInfo+0x10c>)
 8001392:	f7ff f8db 	bl	800054c <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 8001396:	f002 ffe1 	bl	800435c <HAL_RCC_GetSysClockFreq>
 800139a:	6078      	str	r0, [r7, #4]
		frequency = frequency / 1000000;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a21      	ldr	r2, [pc, #132]	; (8001424 <collectHardwareInfo+0x110>)
 80013a0:	fba2 2303 	umull	r2, r3, r2, r3
 80013a4:	0c9b      	lsrs	r3, r3, #18
 80013a6:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 80013a8:	210a      	movs	r1, #10
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff f8e2 	bl	8000574 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 80013b0:	2104      	movs	r1, #4
 80013b2:	481d      	ldr	r0, [pc, #116]	; (8001428 <collectHardwareInfo+0x114>)
 80013b4:	f7ff f8ca 	bl	800054c <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 80013b8:	2111      	movs	r1, #17
 80013ba:	481c      	ldr	r0, [pc, #112]	; (800142c <collectHardwareInfo+0x118>)
 80013bc:	f7ff f8c6 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 80013c0:	f001 fd6a 	bl	8002e98 <HAL_GetUIDw0>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2110      	movs	r1, #16
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f8d3 	bl	8000574 <uartTransmitNumber>

	uartTransmit(" ", 1);
 80013ce:	2101      	movs	r1, #1
 80013d0:	4817      	ldr	r0, [pc, #92]	; (8001430 <collectHardwareInfo+0x11c>)
 80013d2:	f7ff f8bb 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 80013d6:	f001 fd6b 	bl	8002eb0 <HAL_GetUIDw1>
 80013da:	4603      	mov	r3, r0
 80013dc:	2110      	movs	r1, #16
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff f8c8 	bl	8000574 <uartTransmitNumber>

	uartTransmit(" ", 1);
 80013e4:	2101      	movs	r1, #1
 80013e6:	4812      	ldr	r0, [pc, #72]	; (8001430 <collectHardwareInfo+0x11c>)
 80013e8:	f7ff f8b0 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 80013ec:	f001 fd6c 	bl	8002ec8 <HAL_GetUIDw2>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2110      	movs	r1, #16
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f8bd 	bl	8000574 <uartTransmitNumber>

	uartTransmit("\n", 1);
 80013fa:	2101      	movs	r1, #1
 80013fc:	480d      	ldr	r0, [pc, #52]	; (8001434 <collectHardwareInfo+0x120>)
 80013fe:	f7ff f8a5 	bl	800054c <uartTransmit>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	08007828 	.word	0x08007828
 8001410:	08007840 	.word	0x08007840
 8001414:	08007858 	.word	0x08007858
 8001418:	0800785c 	.word	0x0800785c
 800141c:	08007860 	.word	0x08007860
 8001420:	08007864 	.word	0x08007864
 8001424:	431bde83 	.word	0x431bde83
 8001428:	0800787c 	.word	0x0800787c
 800142c:	08007884 	.word	0x08007884
 8001430:	08007898 	.word	0x08007898
 8001434:	0800789c 	.word	0x0800789c

08001438 <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t\t\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 800143c:	2114      	movs	r1, #20
 800143e:	4824      	ldr	r0, [pc, #144]	; (80014d0 <collectMiddlewareInfo+0x98>)
 8001440:	f7ff f884 	bl	800054c <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8001444:	210a      	movs	r1, #10
 8001446:	2005      	movs	r0, #5
 8001448:	f7ff f894 	bl	8000574 <uartTransmitNumber>
	uartTransmit(".", 1);
 800144c:	2101      	movs	r1, #1
 800144e:	4821      	ldr	r0, [pc, #132]	; (80014d4 <collectMiddlewareInfo+0x9c>)
 8001450:	f7ff f87c 	bl	800054c <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8001454:	210a      	movs	r1, #10
 8001456:	2001      	movs	r0, #1
 8001458:	f7ff f88c 	bl	8000574 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 800145c:	2112      	movs	r1, #18
 800145e:	481e      	ldr	r0, [pc, #120]	; (80014d8 <collectMiddlewareInfo+0xa0>)
 8001460:	f7ff f874 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8001464:	f001 fcf4 	bl	8002e50 <HAL_GetHalVersion>
 8001468:	4603      	mov	r3, r0
 800146a:	0e1b      	lsrs	r3, r3, #24
 800146c:	b2db      	uxtb	r3, r3
 800146e:	210a      	movs	r1, #10
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff f87f 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8001476:	2101      	movs	r1, #1
 8001478:	4816      	ldr	r0, [pc, #88]	; (80014d4 <collectMiddlewareInfo+0x9c>)
 800147a:	f7ff f867 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 800147e:	f001 fce7 	bl	8002e50 <HAL_GetHalVersion>
 8001482:	4603      	mov	r3, r0
 8001484:	0c1b      	lsrs	r3, r3, #16
 8001486:	b2db      	uxtb	r3, r3
 8001488:	210a      	movs	r1, #10
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff f872 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8001490:	2101      	movs	r1, #1
 8001492:	4810      	ldr	r0, [pc, #64]	; (80014d4 <collectMiddlewareInfo+0x9c>)
 8001494:	f7ff f85a 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8001498:	f001 fcda 	bl	8002e50 <HAL_GetHalVersion>
 800149c:	4603      	mov	r3, r0
 800149e:	0a1b      	lsrs	r3, r3, #8
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	210a      	movs	r1, #10
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f865 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 80014aa:	2101      	movs	r1, #1
 80014ac:	4809      	ldr	r0, [pc, #36]	; (80014d4 <collectMiddlewareInfo+0x9c>)
 80014ae:	f7ff f84d 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 80014b2:	f001 fccd 	bl	8002e50 <HAL_GetHalVersion>
 80014b6:	4603      	mov	r3, r0
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	210a      	movs	r1, #10
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff f859 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 80014c2:	2101      	movs	r1, #1
 80014c4:	4805      	ldr	r0, [pc, #20]	; (80014dc <collectMiddlewareInfo+0xa4>)
 80014c6:	f7ff f841 	bl	800054c <uartTransmit>
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	080078a0 	.word	0x080078a0
 80014d4:	080078b4 	.word	0x080078b4
 80014d8:	080078b8 	.word	0x080078b8
 80014dc:	0800789c 	.word	0x0800789c

080014e0 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 80014e4:	2111      	movs	r1, #17
 80014e6:	4826      	ldr	r0, [pc, #152]	; (8001580 <collectSoftwareInfo+0xa0>)
 80014e8:	f7ff f830 	bl	800054c <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 80014ec:	2108      	movs	r1, #8
 80014ee:	4825      	ldr	r0, [pc, #148]	; (8001584 <collectSoftwareInfo+0xa4>)
 80014f0:	f7ff f82c 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 80014f4:	2111      	movs	r1, #17
 80014f6:	4824      	ldr	r0, [pc, #144]	; (8001588 <collectSoftwareInfo+0xa8>)
 80014f8:	f7ff f828 	bl	800054c <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 80014fc:	2108      	movs	r1, #8
 80014fe:	4823      	ldr	r0, [pc, #140]	; (800158c <collectSoftwareInfo+0xac>)
 8001500:	f7ff f824 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8001504:	210f      	movs	r1, #15
 8001506:	4822      	ldr	r0, [pc, #136]	; (8001590 <collectSoftwareInfo+0xb0>)
 8001508:	f7ff f820 	bl	800054c <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 800150c:	2129      	movs	r1, #41	; 0x29
 800150e:	4821      	ldr	r0, [pc, #132]	; (8001594 <collectSoftwareInfo+0xb4>)
 8001510:	f7ff f81c 	bl	800054c <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8001514:	2101      	movs	r1, #1
 8001516:	4820      	ldr	r0, [pc, #128]	; (8001598 <collectSoftwareInfo+0xb8>)
 8001518:	f7ff f818 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 800151c:	2116      	movs	r1, #22
 800151e:	481f      	ldr	r0, [pc, #124]	; (800159c <collectSoftwareInfo+0xbc>)
 8001520:	f7ff f814 	bl	800054c <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 8001524:	2105      	movs	r1, #5
 8001526:	481e      	ldr	r0, [pc, #120]	; (80015a0 <collectSoftwareInfo+0xc0>)
 8001528:	f7ff f810 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 800152c:	2115      	movs	r1, #21
 800152e:	481d      	ldr	r0, [pc, #116]	; (80015a4 <collectSoftwareInfo+0xc4>)
 8001530:	f7ff f80c 	bl	800054c <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 8001534:	2108      	movs	r1, #8
 8001536:	481c      	ldr	r0, [pc, #112]	; (80015a8 <collectSoftwareInfo+0xc8>)
 8001538:	f7ff f808 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 800153c:	2116      	movs	r1, #22
 800153e:	481b      	ldr	r0, [pc, #108]	; (80015ac <collectSoftwareInfo+0xcc>)
 8001540:	f7ff f804 	bl	800054c <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 8001544:	2111      	movs	r1, #17
 8001546:	481a      	ldr	r0, [pc, #104]	; (80015b0 <collectSoftwareInfo+0xd0>)
 8001548:	f7ff f800 	bl	800054c <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 800154c:	2101      	movs	r1, #1
 800154e:	4812      	ldr	r0, [pc, #72]	; (8001598 <collectSoftwareInfo+0xb8>)
 8001550:	f7fe fffc 	bl	800054c <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 8001554:	2111      	movs	r1, #17
 8001556:	4817      	ldr	r0, [pc, #92]	; (80015b4 <collectSoftwareInfo+0xd4>)
 8001558:	f7fe fff8 	bl	800054c <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 800155c:	210b      	movs	r1, #11
 800155e:	4816      	ldr	r0, [pc, #88]	; (80015b8 <collectSoftwareInfo+0xd8>)
 8001560:	f7fe fff4 	bl	800054c <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 8001564:	2111      	movs	r1, #17
 8001566:	4815      	ldr	r0, [pc, #84]	; (80015bc <collectSoftwareInfo+0xdc>)
 8001568:	f7fe fff0 	bl	800054c <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 800156c:	2109      	movs	r1, #9
 800156e:	4814      	ldr	r0, [pc, #80]	; (80015c0 <collectSoftwareInfo+0xe0>)
 8001570:	f7fe ffec 	bl	800054c <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8001574:	2101      	movs	r1, #1
 8001576:	4808      	ldr	r0, [pc, #32]	; (8001598 <collectSoftwareInfo+0xb8>)
 8001578:	f7fe ffe8 	bl	800054c <uartTransmit>
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	080078cc 	.word	0x080078cc
 8001584:	080078e0 	.word	0x080078e0
 8001588:	080078e8 	.word	0x080078e8
 800158c:	080078fc 	.word	0x080078fc
 8001590:	08007904 	.word	0x08007904
 8001594:	08007914 	.word	0x08007914
 8001598:	0800789c 	.word	0x0800789c
 800159c:	08007940 	.word	0x08007940
 80015a0:	08007958 	.word	0x08007958
 80015a4:	08007960 	.word	0x08007960
 80015a8:	08007978 	.word	0x08007978
 80015ac:	08007980 	.word	0x08007980
 80015b0:	08007998 	.word	0x08007998
 80015b4:	080079ac 	.word	0x080079ac
 80015b8:	080079c0 	.word	0x080079c0
 80015bc:	080079cc 	.word	0x080079cc
 80015c0:	080079e0 	.word	0x080079e0

080015c4 <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 80015c8:	2115      	movs	r1, #21
 80015ca:	4814      	ldr	r0, [pc, #80]	; (800161c <collectGitcounts+0x58>)
 80015cc:	f7fe ffbe 	bl	800054c <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 80015d0:	2103      	movs	r1, #3
 80015d2:	4813      	ldr	r0, [pc, #76]	; (8001620 <collectGitcounts+0x5c>)
 80015d4:	f7fe ffba 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 80015d8:	2117      	movs	r1, #23
 80015da:	4812      	ldr	r0, [pc, #72]	; (8001624 <collectGitcounts+0x60>)
 80015dc:	f7fe ffb6 	bl	800054c <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 80015e0:	2103      	movs	r1, #3
 80015e2:	4811      	ldr	r0, [pc, #68]	; (8001628 <collectGitcounts+0x64>)
 80015e4:	f7fe ffb2 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 80015e8:	211c      	movs	r1, #28
 80015ea:	4810      	ldr	r0, [pc, #64]	; (800162c <collectGitcounts+0x68>)
 80015ec:	f7fe ffae 	bl	800054c <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 80015f0:	2103      	movs	r1, #3
 80015f2:	480f      	ldr	r0, [pc, #60]	; (8001630 <collectGitcounts+0x6c>)
 80015f4:	f7fe ffaa 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 80015f8:	2116      	movs	r1, #22
 80015fa:	480e      	ldr	r0, [pc, #56]	; (8001634 <collectGitcounts+0x70>)
 80015fc:	f7fe ffa6 	bl	800054c <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8001600:	2102      	movs	r1, #2
 8001602:	480d      	ldr	r0, [pc, #52]	; (8001638 <collectGitcounts+0x74>)
 8001604:	f7fe ffa2 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8001608:	2115      	movs	r1, #21
 800160a:	480c      	ldr	r0, [pc, #48]	; (800163c <collectGitcounts+0x78>)
 800160c:	f7fe ff9e 	bl	800054c <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 8001610:	2102      	movs	r1, #2
 8001612:	480b      	ldr	r0, [pc, #44]	; (8001640 <collectGitcounts+0x7c>)
 8001614:	f7fe ff9a 	bl	800054c <uartTransmit>
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	080079ec 	.word	0x080079ec
 8001620:	08007a04 	.word	0x08007a04
 8001624:	08007a08 	.word	0x08007a08
 8001628:	08007a20 	.word	0x08007a20
 800162c:	08007a24 	.word	0x08007a24
 8001630:	08007a40 	.word	0x08007a40
 8001634:	08007940 	.word	0x08007940
 8001638:	08007a44 	.word	0x08007a44
 800163c:	08007960 	.word	0x08007960
 8001640:	08007a48 	.word	0x08007a48

08001644 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8001648:	2111      	movs	r1, #17
 800164a:	480e      	ldr	r0, [pc, #56]	; (8001684 <collectSystemInfo+0x40>)
 800164c:	f7fe ff7e 	bl	800054c <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8001650:	f7ff fe60 	bl	8001314 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8001654:	2111      	movs	r1, #17
 8001656:	480c      	ldr	r0, [pc, #48]	; (8001688 <collectSystemInfo+0x44>)
 8001658:	f7fe ff78 	bl	800054c <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 800165c:	f7ff ff40 	bl	80014e0 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8001660:	2113      	movs	r1, #19
 8001662:	480a      	ldr	r0, [pc, #40]	; (800168c <collectSystemInfo+0x48>)
 8001664:	f7fe ff72 	bl	800054c <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8001668:	f7ff fee6 	bl	8001438 <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 800166c:	2113      	movs	r1, #19
 800166e:	4808      	ldr	r0, [pc, #32]	; (8001690 <collectSystemInfo+0x4c>)
 8001670:	f7fe ff6c 	bl	800054c <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 8001674:	f7ff ffa6 	bl	80015c4 <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 8001678:	2103      	movs	r1, #3
 800167a:	4806      	ldr	r0, [pc, #24]	; (8001694 <collectSystemInfo+0x50>)
 800167c:	f7fe ff66 	bl	800054c <uartTransmit>
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	08007a4c 	.word	0x08007a4c
 8001688:	08007a60 	.word	0x08007a60
 800168c:	08007a74 	.word	0x08007a74
 8001690:	08007a88 	.word	0x08007a88
 8001694:	08007a9c 	.word	0x08007a9c

08001698 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 800169e:	2300      	movs	r3, #0
 80016a0:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 80016a2:	4b25      	ldr	r3, [pc, #148]	; (8001738 <readResetSource+0xa0>)
 80016a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d002      	beq.n	80016b4 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	3301      	adds	r3, #1
 80016b2:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 80016b4:	4b20      	ldr	r3, [pc, #128]	; (8001738 <readResetSource+0xa0>)
 80016b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	3302      	adds	r3, #2
 80016c4:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 80016c6:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <readResetSource+0xa0>)
 80016c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	da02      	bge.n	80016d4 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	3304      	adds	r3, #4
 80016d2:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 80016d4:	4b18      	ldr	r3, [pc, #96]	; (8001738 <readResetSource+0xa0>)
 80016d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	3308      	adds	r3, #8
 80016e4:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 80016e6:	4b14      	ldr	r3, [pc, #80]	; (8001738 <readResetSource+0xa0>)
 80016e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d002      	beq.n	80016f8 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	3310      	adds	r3, #16
 80016f6:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <readResetSource+0xa0>)
 80016fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d002      	beq.n	800170a <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	3320      	adds	r3, #32
 8001708:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <readResetSource+0xa0>)
 800170c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800170e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	3340      	adds	r3, #64	; 0x40
 800171a:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <readResetSource+0xa0>)
 800171e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001720:	4a05      	ldr	r2, [pc, #20]	; (8001738 <readResetSource+0xa0>)
 8001722:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001726:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8001728:	79fb      	ldrb	r3, [r7, #7]
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800

0800173c <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8001746:	2106      	movs	r1, #6
 8001748:	482a      	ldr	r0, [pc, #168]	; (80017f4 <printResetSource+0xb8>)
 800174a:	f7fe feff 	bl	800054c <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d104      	bne.n	800175e <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 8001754:	210f      	movs	r1, #15
 8001756:	4828      	ldr	r0, [pc, #160]	; (80017f8 <printResetSource+0xbc>)
 8001758:	f7fe fef8 	bl	800054c <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 800175c:	e046      	b.n	80017ec <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8001768:	2118      	movs	r1, #24
 800176a:	4824      	ldr	r0, [pc, #144]	; (80017fc <printResetSource+0xc0>)
 800176c:	f7fe feee 	bl	800054c <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 800177a:	2116      	movs	r1, #22
 800177c:	4820      	ldr	r0, [pc, #128]	; (8001800 <printResetSource+0xc4>)
 800177e:	f7fe fee5 	bl	800054c <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 800178c:	210a      	movs	r1, #10
 800178e:	481d      	ldr	r0, [pc, #116]	; (8001804 <printResetSource+0xc8>)
 8001790:	f7fe fedc 	bl	800054c <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 800179e:	2110      	movs	r1, #16
 80017a0:	4819      	ldr	r0, [pc, #100]	; (8001808 <printResetSource+0xcc>)
 80017a2:	f7fe fed3 	bl	800054c <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	f003 0310 	and.w	r3, r3, #16
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 80017b0:	210f      	movs	r1, #15
 80017b2:	4816      	ldr	r0, [pc, #88]	; (800180c <printResetSource+0xd0>)
 80017b4:	f7fe feca 	bl	800054c <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	f003 0320 	and.w	r3, r3, #32
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 80017c2:	210f      	movs	r1, #15
 80017c4:	4812      	ldr	r0, [pc, #72]	; (8001810 <printResetSource+0xd4>)
 80017c6:	f7fe fec1 	bl	800054c <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 80017d4:	210a      	movs	r1, #10
 80017d6:	480f      	ldr	r0, [pc, #60]	; (8001814 <printResetSource+0xd8>)
 80017d8:	f7fe feb8 	bl	800054c <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	da03      	bge.n	80017ec <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 80017e4:	2105      	movs	r1, #5
 80017e6:	480c      	ldr	r0, [pc, #48]	; (8001818 <printResetSource+0xdc>)
 80017e8:	f7fe feb0 	bl	800054c <uartTransmit>
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	08007aa0 	.word	0x08007aa0
 80017f8:	08007aa8 	.word	0x08007aa8
 80017fc:	08007ab8 	.word	0x08007ab8
 8001800:	08007ad4 	.word	0x08007ad4
 8001804:	08007aec 	.word	0x08007aec
 8001808:	08007af8 	.word	0x08007af8
 800180c:	08007b0c 	.word	0x08007b0c
 8001810:	08007b1c 	.word	0x08007b1c
 8001814:	08007b2c 	.word	0x08007b2c
 8001818:	08007b38 	.word	0x08007b38

0800181c <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 8001820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001824:	4850      	ldr	r0, [pc, #320]	; (8001968 <readall_inputs+0x14c>)
 8001826:	f002 f97d 	bl	8003b24 <HAL_GPIO_ReadPin>
 800182a:	4603      	mov	r3, r0
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	b2d9      	uxtb	r1, r3
 8001832:	4a4e      	ldr	r2, [pc, #312]	; (800196c <readall_inputs+0x150>)
 8001834:	7813      	ldrb	r3, [r2, #0]
 8001836:	f361 0300 	bfi	r3, r1, #0, #1
 800183a:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 800183c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001840:	484b      	ldr	r0, [pc, #300]	; (8001970 <readall_inputs+0x154>)
 8001842:	f002 f96f 	bl	8003b24 <HAL_GPIO_ReadPin>
 8001846:	4603      	mov	r3, r0
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	b2d9      	uxtb	r1, r3
 800184e:	4a47      	ldr	r2, [pc, #284]	; (800196c <readall_inputs+0x150>)
 8001850:	7813      	ldrb	r3, [r2, #0]
 8001852:	f361 0341 	bfi	r3, r1, #1, #1
 8001856:	7013      	strb	r3, [r2, #0]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8001858:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800185c:	4845      	ldr	r0, [pc, #276]	; (8001974 <readall_inputs+0x158>)
 800185e:	f002 f961 	bl	8003b24 <HAL_GPIO_ReadPin>
 8001862:	4603      	mov	r3, r0
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	b2d9      	uxtb	r1, r3
 800186a:	4a40      	ldr	r2, [pc, #256]	; (800196c <readall_inputs+0x150>)
 800186c:	7813      	ldrb	r3, [r2, #0]
 800186e:	f361 03c3 	bfi	r3, r1, #3, #1
 8001872:	7013      	strb	r3, [r2, #0]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8001874:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001878:	483e      	ldr	r0, [pc, #248]	; (8001974 <readall_inputs+0x158>)
 800187a:	f002 f953 	bl	8003b24 <HAL_GPIO_ReadPin>
 800187e:	4603      	mov	r3, r0
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	b2d9      	uxtb	r1, r3
 8001886:	4a39      	ldr	r2, [pc, #228]	; (800196c <readall_inputs+0x150>)
 8001888:	7813      	ldrb	r3, [r2, #0]
 800188a:	f361 1304 	bfi	r3, r1, #4, #1
 800188e:	7013      	strb	r3, [r2, #0]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 8001890:	2101      	movs	r1, #1
 8001892:	4838      	ldr	r0, [pc, #224]	; (8001974 <readall_inputs+0x158>)
 8001894:	f002 f946 	bl	8003b24 <HAL_GPIO_ReadPin>
 8001898:	4603      	mov	r3, r0
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	b2d9      	uxtb	r1, r3
 80018a0:	4a32      	ldr	r2, [pc, #200]	; (800196c <readall_inputs+0x150>)
 80018a2:	7813      	ldrb	r3, [r2, #0]
 80018a4:	f361 1345 	bfi	r3, r1, #5, #1
 80018a8:	7013      	strb	r3, [r2, #0]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 80018aa:	2104      	movs	r1, #4
 80018ac:	4831      	ldr	r0, [pc, #196]	; (8001974 <readall_inputs+0x158>)
 80018ae:	f002 f939 	bl	8003b24 <HAL_GPIO_ReadPin>
 80018b2:	4603      	mov	r3, r0
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	b2d9      	uxtb	r1, r3
 80018ba:	4a2c      	ldr	r2, [pc, #176]	; (800196c <readall_inputs+0x150>)
 80018bc:	7813      	ldrb	r3, [r2, #0]
 80018be:	f361 1386 	bfi	r3, r1, #6, #1
 80018c2:	7013      	strb	r3, [r2, #0]

	// SDC-Eingaenge einlesen
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);					// IMD OK, Akku
 80018c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018c8:	4827      	ldr	r0, [pc, #156]	; (8001968 <readall_inputs+0x14c>)
 80018ca:	f002 f92b 	bl	8003b24 <HAL_GPIO_ReadPin>
 80018ce:	4603      	mov	r3, r0
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	b2d9      	uxtb	r1, r3
 80018d6:	4a28      	ldr	r2, [pc, #160]	; (8001978 <readall_inputs+0x15c>)
 80018d8:	7813      	ldrb	r3, [r2, #0]
 80018da:	f361 0300 	bfi	r3, r1, #0, #1
 80018de:	7013      	strb	r3, [r2, #0]
	sdc_in.HVIL = HAL_GPIO_ReadPin(SENSE_SDC_HVIL_GPIO_Port, SENSE_SDC_HVIL_Pin);				// Shutdown-Circuit HVIL, OK
 80018e0:	2108      	movs	r1, #8
 80018e2:	4821      	ldr	r0, [pc, #132]	; (8001968 <readall_inputs+0x14c>)
 80018e4:	f002 f91e 	bl	8003b24 <HAL_GPIO_ReadPin>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	b2d9      	uxtb	r1, r3
 80018f0:	4a21      	ldr	r2, [pc, #132]	; (8001978 <readall_inputs+0x15c>)
 80018f2:	7813      	ldrb	r3, [r2, #0]
 80018f4:	f361 0341 	bfi	r3, r1, #1, #1
 80018f8:	7013      	strb	r3, [r2, #0]
	sdc_in.MotorSDC = HAL_GPIO_ReadPin(SENSE_SDC_MOTOR_GPIO_Port, SENSE_SDC_MOTOR_Pin);			// Shutdown-Circuit Akku, OK
 80018fa:	2120      	movs	r1, #32
 80018fc:	481a      	ldr	r0, [pc, #104]	; (8001968 <readall_inputs+0x14c>)
 80018fe:	f002 f911 	bl	8003b24 <HAL_GPIO_ReadPin>
 8001902:	4603      	mov	r3, r0
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	b2d9      	uxtb	r1, r3
 800190a:	4a1b      	ldr	r2, [pc, #108]	; (8001978 <readall_inputs+0x15c>)
 800190c:	7813      	ldrb	r3, [r2, #0]
 800190e:	f361 0382 	bfi	r3, r1, #2, #1
 8001912:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8001914:	2110      	movs	r1, #16
 8001916:	4814      	ldr	r0, [pc, #80]	; (8001968 <readall_inputs+0x14c>)
 8001918:	f002 f904 	bl	8003b24 <HAL_GPIO_ReadPin>
 800191c:	4603      	mov	r3, r0
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	b2d9      	uxtb	r1, r3
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <readall_inputs+0x15c>)
 8001926:	7813      	ldrb	r3, [r2, #0]
 8001928:	f361 03c3 	bfi	r3, r1, #3, #1
 800192c:	7013      	strb	r3, [r2, #0]
	sdc_in.PrechargeIn = HAL_GPIO_ReadPin(PRECHARGE_IN_GPIO_Port, PRECHARGE_IN_Pin);			// Eingang Precharge abgeschlossen
 800192e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001932:	4812      	ldr	r0, [pc, #72]	; (800197c <readall_inputs+0x160>)
 8001934:	f002 f8f6 	bl	8003b24 <HAL_GPIO_ReadPin>
 8001938:	4603      	mov	r3, r0
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	b2d9      	uxtb	r1, r3
 8001940:	4a0d      	ldr	r2, [pc, #52]	; (8001978 <readall_inputs+0x15c>)
 8001942:	7813      	ldrb	r3, [r2, #0]
 8001944:	f361 1304 	bfi	r3, r1, #4, #1
 8001948:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.OVC = HAL_GPIO_ReadPin(OVC_SENSE_GPIO_Port, OVC_SENSE_Pin);						// Eingang Overcurrent erkannt
 800194a:	2104      	movs	r1, #4
 800194c:	480b      	ldr	r0, [pc, #44]	; (800197c <readall_inputs+0x160>)
 800194e:	f002 f8e9 	bl	8003b24 <HAL_GPIO_ReadPin>
 8001952:	4603      	mov	r3, r0
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	b2d9      	uxtb	r1, r3
 800195a:	4a09      	ldr	r2, [pc, #36]	; (8001980 <readall_inputs+0x164>)
 800195c:	7813      	ldrb	r3, [r2, #0]
 800195e:	f361 0300 	bfi	r3, r1, #0, #1
 8001962:	7013      	strb	r3, [r2, #0]
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40021000 	.word	0x40021000
 800196c:	20000030 	.word	0x20000030
 8001970:	40020c00 	.word	0x40020c00
 8001974:	40020000 	.word	0x40020000
 8001978:	20000034 	.word	0x20000034
 800197c:	40021400 	.word	0x40021400
 8001980:	20000038 	.word	0x20000038

08001984 <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8001988:	2201      	movs	r2, #1
 800198a:	2180      	movs	r1, #128	; 0x80
 800198c:	481b      	ldr	r0, [pc, #108]	; (80019fc <testPCB_Leds+0x78>)
 800198e:	f002 f8e1 	bl	8003b54 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001992:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001996:	f001 fa37 	bl	8002e08 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 800199a:	2200      	movs	r2, #0
 800199c:	2180      	movs	r1, #128	; 0x80
 800199e:	4817      	ldr	r0, [pc, #92]	; (80019fc <testPCB_Leds+0x78>)
 80019a0:	f002 f8d8 	bl	8003b54 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80019a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019a8:	f001 fa2e 	bl	8002e08 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 80019ac:	2201      	movs	r2, #1
 80019ae:	2104      	movs	r1, #4
 80019b0:	4812      	ldr	r0, [pc, #72]	; (80019fc <testPCB_Leds+0x78>)
 80019b2:	f002 f8cf 	bl	8003b54 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80019b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019ba:	f001 fa25 	bl	8002e08 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80019be:	2200      	movs	r2, #0
 80019c0:	2104      	movs	r1, #4
 80019c2:	480e      	ldr	r0, [pc, #56]	; (80019fc <testPCB_Leds+0x78>)
 80019c4:	f002 f8c6 	bl	8003b54 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80019c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019cc:	f001 fa1c 	bl	8002e08 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 80019d0:	2201      	movs	r2, #1
 80019d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019d6:	4809      	ldr	r0, [pc, #36]	; (80019fc <testPCB_Leds+0x78>)
 80019d8:	f002 f8bc 	bl	8003b54 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80019dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019e0:	f001 fa12 	bl	8002e08 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80019e4:	2200      	movs	r2, #0
 80019e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019ea:	4804      	ldr	r0, [pc, #16]	; (80019fc <testPCB_Leds+0x78>)
 80019ec:	f002 f8b2 	bl	8003b54 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80019f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019f4:	f001 fa08 	bl	8002e08 <HAL_Delay>
}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40020400 	.word	0x40020400

08001a00 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a06:	463b      	mov	r3, r7
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a12:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <MX_ADC1_Init+0x98>)
 8001a14:	4a21      	ldr	r2, [pc, #132]	; (8001a9c <MX_ADC1_Init+0x9c>)
 8001a16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a18:	4b1f      	ldr	r3, [pc, #124]	; (8001a98 <MX_ADC1_Init+0x98>)
 8001a1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a1e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a20:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <MX_ADC1_Init+0x98>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a26:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <MX_ADC1_Init+0x98>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <MX_ADC1_Init+0x98>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a32:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <MX_ADC1_Init+0x98>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a3a:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <MX_ADC1_Init+0x98>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a40:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <MX_ADC1_Init+0x98>)
 8001a42:	4a17      	ldr	r2, [pc, #92]	; (8001aa0 <MX_ADC1_Init+0xa0>)
 8001a44:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a46:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <MX_ADC1_Init+0x98>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <MX_ADC1_Init+0x98>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <MX_ADC1_Init+0x98>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <MX_ADC1_Init+0x98>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a60:	480d      	ldr	r0, [pc, #52]	; (8001a98 <MX_ADC1_Init+0x98>)
 8001a62:	f001 fa3d 	bl	8002ee0 <HAL_ADC_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a6c:	f000 fd72 	bl	8002554 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001a70:	2304      	movs	r3, #4
 8001a72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a74:	2301      	movs	r3, #1
 8001a76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a7c:	463b      	mov	r3, r7
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <MX_ADC1_Init+0x98>)
 8001a82:	f001 fa71 	bl	8002f68 <HAL_ADC_ConfigChannel>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a8c:	f000 fd62 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a90:	bf00      	nop
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000040 	.word	0x20000040
 8001a9c:	40012000 	.word	0x40012000
 8001aa0:	0f000001 	.word	0x0f000001

08001aa4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	; 0x28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a15      	ldr	r2, [pc, #84]	; (8001b18 <HAL_ADC_MspInit+0x74>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d123      	bne.n	8001b0e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <HAL_ADC_MspInit+0x78>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	4a14      	ldr	r2, [pc, #80]	; (8001b1c <HAL_ADC_MspInit+0x78>)
 8001acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad2:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_ADC_MspInit+0x78>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ade:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <HAL_ADC_MspInit+0x78>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a0e      	ldr	r2, [pc, #56]	; (8001b1c <HAL_ADC_MspInit+0x78>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <HAL_ADC_MspInit+0x78>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 8001af6:	23f8      	movs	r3, #248	; 0xf8
 8001af8:	617b      	str	r3, [r7, #20]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001afa:	2303      	movs	r3, #3
 8001afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4619      	mov	r1, r3
 8001b08:	4805      	ldr	r0, [pc, #20]	; (8001b20 <HAL_ADC_MspInit+0x7c>)
 8001b0a:	f001 fe5f 	bl	80037cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001b0e:	bf00      	nop
 8001b10:	3728      	adds	r7, #40	; 0x28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40012000 	.word	0x40012000
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40020000 	.word	0x40020000

08001b24 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001b28:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <MX_CAN1_Init+0x64>)
 8001b2a:	4a18      	ldr	r2, [pc, #96]	; (8001b8c <MX_CAN1_Init+0x68>)
 8001b2c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001b2e:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <MX_CAN1_Init+0x64>)
 8001b30:	2210      	movs	r2, #16
 8001b32:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001b34:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <MX_CAN1_Init+0x64>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b3a:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <MX_CAN1_Init+0x64>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <MX_CAN1_Init+0x64>)
 8001b42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b46:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <MX_CAN1_Init+0x64>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <MX_CAN1_Init+0x64>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <MX_CAN1_Init+0x64>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <MX_CAN1_Init+0x64>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <MX_CAN1_Init+0x64>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <MX_CAN1_Init+0x64>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <MX_CAN1_Init+0x64>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001b72:	4805      	ldr	r0, [pc, #20]	; (8001b88 <MX_CAN1_Init+0x64>)
 8001b74:	f001 fc48 	bl	8003408 <HAL_CAN_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001b7e:	f000 fce9 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000088 	.word	0x20000088
 8001b8c:	40006400 	.word	0x40006400

08001b90 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8001b94:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <MX_CAN3_Init+0x64>)
 8001b96:	4a18      	ldr	r2, [pc, #96]	; (8001bf8 <MX_CAN3_Init+0x68>)
 8001b98:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8001b9a:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <MX_CAN3_Init+0x64>)
 8001b9c:	2206      	movs	r2, #6
 8001b9e:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001ba0:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <MX_CAN3_Init+0x64>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001ba6:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <MX_CAN3_Init+0x64>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001bac:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <MX_CAN3_Init+0x64>)
 8001bae:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001bb2:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <MX_CAN3_Init+0x64>)
 8001bb6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001bba:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001bbc:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <MX_CAN3_Init+0x64>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <MX_CAN3_Init+0x64>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001bc8:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <MX_CAN3_Init+0x64>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <MX_CAN3_Init+0x64>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001bd4:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <MX_CAN3_Init+0x64>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <MX_CAN3_Init+0x64>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001be0:	4804      	ldr	r0, [pc, #16]	; (8001bf4 <MX_CAN3_Init+0x64>)
 8001be2:	f001 fc11 	bl	8003408 <HAL_CAN_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001bec:	f000 fcb2 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	200000b0 	.word	0x200000b0
 8001bf8:	40003400 	.word	0x40003400

08001bfc <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08e      	sub	sp, #56	; 0x38
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a43      	ldr	r2, [pc, #268]	; (8001d28 <HAL_CAN_MspInit+0x12c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d131      	bne.n	8001c82 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001c1e:	4b43      	ldr	r3, [pc, #268]	; (8001d2c <HAL_CAN_MspInit+0x130>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	3301      	adds	r3, #1
 8001c24:	4a41      	ldr	r2, [pc, #260]	; (8001d2c <HAL_CAN_MspInit+0x130>)
 8001c26:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001c28:	4b40      	ldr	r3, [pc, #256]	; (8001d2c <HAL_CAN_MspInit+0x130>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d10b      	bne.n	8001c48 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001c30:	4b3f      	ldr	r3, [pc, #252]	; (8001d30 <HAL_CAN_MspInit+0x134>)
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	4a3e      	ldr	r2, [pc, #248]	; (8001d30 <HAL_CAN_MspInit+0x134>)
 8001c36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3c:	4b3c      	ldr	r3, [pc, #240]	; (8001d30 <HAL_CAN_MspInit+0x134>)
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c44:	623b      	str	r3, [r7, #32]
 8001c46:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c48:	4b39      	ldr	r3, [pc, #228]	; (8001d30 <HAL_CAN_MspInit+0x134>)
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	4a38      	ldr	r2, [pc, #224]	; (8001d30 <HAL_CAN_MspInit+0x134>)
 8001c4e:	f043 0308 	orr.w	r3, r3, #8
 8001c52:	6313      	str	r3, [r2, #48]	; 0x30
 8001c54:	4b36      	ldr	r3, [pc, #216]	; (8001d30 <HAL_CAN_MspInit+0x134>)
 8001c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	61fb      	str	r3, [r7, #28]
 8001c5e:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c60:	2303      	movs	r3, #3
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c70:	2309      	movs	r3, #9
 8001c72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c78:	4619      	mov	r1, r3
 8001c7a:	482e      	ldr	r0, [pc, #184]	; (8001d34 <HAL_CAN_MspInit+0x138>)
 8001c7c:	f001 fda6 	bl	80037cc <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8001c80:	e04e      	b.n	8001d20 <HAL_CAN_MspInit+0x124>
  else if(canHandle->Instance==CAN3)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a2c      	ldr	r2, [pc, #176]	; (8001d38 <HAL_CAN_MspInit+0x13c>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d149      	bne.n	8001d20 <HAL_CAN_MspInit+0x124>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001c8c:	4b28      	ldr	r3, [pc, #160]	; (8001d30 <HAL_CAN_MspInit+0x134>)
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	4a27      	ldr	r2, [pc, #156]	; (8001d30 <HAL_CAN_MspInit+0x134>)
 8001c92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c96:	6413      	str	r3, [r2, #64]	; 0x40
 8001c98:	4b25      	ldr	r3, [pc, #148]	; (8001d30 <HAL_CAN_MspInit+0x134>)
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ca0:	61bb      	str	r3, [r7, #24]
 8001ca2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001ca4:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <HAL_CAN_MspInit+0x134>)
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	4a21      	ldr	r2, [pc, #132]	; (8001d30 <HAL_CAN_MspInit+0x134>)
 8001caa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cae:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <HAL_CAN_MspInit+0x134>)
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <HAL_CAN_MspInit+0x130>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	4a1a      	ldr	r2, [pc, #104]	; (8001d2c <HAL_CAN_MspInit+0x130>)
 8001cc4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001cc6:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <HAL_CAN_MspInit+0x130>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d10b      	bne.n	8001ce6 <HAL_CAN_MspInit+0xea>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001cce:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <HAL_CAN_MspInit+0x134>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	4a17      	ldr	r2, [pc, #92]	; (8001d30 <HAL_CAN_MspInit+0x134>)
 8001cd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_CAN_MspInit+0x134>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_CAN_MspInit+0x134>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a11      	ldr	r2, [pc, #68]	; (8001d30 <HAL_CAN_MspInit+0x134>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <HAL_CAN_MspInit+0x134>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8001cfe:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001d10:	230b      	movs	r3, #11
 8001d12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4808      	ldr	r0, [pc, #32]	; (8001d3c <HAL_CAN_MspInit+0x140>)
 8001d1c:	f001 fd56 	bl	80037cc <HAL_GPIO_Init>
}
 8001d20:	bf00      	nop
 8001d22:	3738      	adds	r7, #56	; 0x38
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40006400 	.word	0x40006400
 8001d2c:	200000d8 	.word	0x200000d8
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40020c00 	.word	0x40020c00
 8001d38:	40003400 	.word	0x40003400
 8001d3c:	40020000 	.word	0x40020000

08001d40 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08e      	sub	sp, #56	; 0x38
 8001d44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
 8001d54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d56:	4bb7      	ldr	r3, [pc, #732]	; (8002034 <MX_GPIO_Init+0x2f4>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4ab6      	ldr	r2, [pc, #728]	; (8002034 <MX_GPIO_Init+0x2f4>)
 8001d5c:	f043 0310 	orr.w	r3, r3, #16
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4bb4      	ldr	r3, [pc, #720]	; (8002034 <MX_GPIO_Init+0x2f4>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0310 	and.w	r3, r3, #16
 8001d6a:	623b      	str	r3, [r7, #32]
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6e:	4bb1      	ldr	r3, [pc, #708]	; (8002034 <MX_GPIO_Init+0x2f4>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4ab0      	ldr	r2, [pc, #704]	; (8002034 <MX_GPIO_Init+0x2f4>)
 8001d74:	f043 0304 	orr.w	r3, r3, #4
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4bae      	ldr	r3, [pc, #696]	; (8002034 <MX_GPIO_Init+0x2f4>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	61fb      	str	r3, [r7, #28]
 8001d84:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d86:	4bab      	ldr	r3, [pc, #684]	; (8002034 <MX_GPIO_Init+0x2f4>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4aaa      	ldr	r2, [pc, #680]	; (8002034 <MX_GPIO_Init+0x2f4>)
 8001d8c:	f043 0320 	orr.w	r3, r3, #32
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4ba8      	ldr	r3, [pc, #672]	; (8002034 <MX_GPIO_Init+0x2f4>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0320 	and.w	r3, r3, #32
 8001d9a:	61bb      	str	r3, [r7, #24]
 8001d9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d9e:	4ba5      	ldr	r3, [pc, #660]	; (8002034 <MX_GPIO_Init+0x2f4>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4aa4      	ldr	r2, [pc, #656]	; (8002034 <MX_GPIO_Init+0x2f4>)
 8001da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4ba2      	ldr	r3, [pc, #648]	; (8002034 <MX_GPIO_Init+0x2f4>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db6:	4b9f      	ldr	r3, [pc, #636]	; (8002034 <MX_GPIO_Init+0x2f4>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a9e      	ldr	r2, [pc, #632]	; (8002034 <MX_GPIO_Init+0x2f4>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b9c      	ldr	r3, [pc, #624]	; (8002034 <MX_GPIO_Init+0x2f4>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dce:	4b99      	ldr	r3, [pc, #612]	; (8002034 <MX_GPIO_Init+0x2f4>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a98      	ldr	r2, [pc, #608]	; (8002034 <MX_GPIO_Init+0x2f4>)
 8001dd4:	f043 0302 	orr.w	r3, r3, #2
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b96      	ldr	r3, [pc, #600]	; (8002034 <MX_GPIO_Init+0x2f4>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001de6:	4b93      	ldr	r3, [pc, #588]	; (8002034 <MX_GPIO_Init+0x2f4>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a92      	ldr	r2, [pc, #584]	; (8002034 <MX_GPIO_Init+0x2f4>)
 8001dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b90      	ldr	r3, [pc, #576]	; (8002034 <MX_GPIO_Init+0x2f4>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfe:	4b8d      	ldr	r3, [pc, #564]	; (8002034 <MX_GPIO_Init+0x2f4>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a8c      	ldr	r2, [pc, #560]	; (8002034 <MX_GPIO_Init+0x2f4>)
 8001e04:	f043 0308 	orr.w	r3, r3, #8
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b8a      	ldr	r3, [pc, #552]	; (8002034 <MX_GPIO_Init+0x2f4>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 8001e16:	2200      	movs	r2, #0
 8001e18:	f248 0187 	movw	r1, #32903	; 0x8087
 8001e1c:	4886      	ldr	r0, [pc, #536]	; (8002038 <MX_GPIO_Init+0x2f8>)
 8001e1e:	f001 fe99 	bl	8003b54 <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_RESET);
 8001e22:	2200      	movs	r2, #0
 8001e24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e28:	4884      	ldr	r0, [pc, #528]	; (800203c <MX_GPIO_Init+0x2fc>)
 8001e2a:	f001 fe93 	bl	8003b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin, GPIO_PIN_RESET);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f242 0102 	movw	r1, #8194	; 0x2002
 8001e34:	4882      	ldr	r0, [pc, #520]	; (8002040 <MX_GPIO_Init+0x300>)
 8001e36:	f001 fe8d 	bl	8003b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f240 6102 	movw	r1, #1538	; 0x602
 8001e40:	4880      	ldr	r0, [pc, #512]	; (8002044 <MX_GPIO_Init+0x304>)
 8001e42:	f001 fe87 	bl	8003b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8001e46:	2200      	movs	r2, #0
 8001e48:	f244 0184 	movw	r1, #16516	; 0x4084
 8001e4c:	487e      	ldr	r0, [pc, #504]	; (8002048 <MX_GPIO_Init+0x308>)
 8001e4e:	f001 fe81 	bl	8003b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISOSPI_CS_GPIO_Port, ISOSPI_CS_Pin, GPIO_PIN_SET);
 8001e52:	2201      	movs	r2, #1
 8001e54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e58:	4877      	ldr	r0, [pc, #476]	; (8002038 <MX_GPIO_Init+0x2f8>)
 8001e5a:	f001 fe7b 	bl	8003b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 8001e64:	4879      	ldr	r0, [pc, #484]	; (800204c <MX_GPIO_Init+0x30c>)
 8001e66:	f001 fe75 	bl	8003b54 <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2118      	movs	r1, #24
 8001e6e:	4878      	ldr	r0, [pc, #480]	; (8002050 <MX_GPIO_Init+0x310>)
 8001e70:	f001 fe70 	bl	8003b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_CS_Pin|ISOSPI_EN_Pin
 8001e74:	f648 0387 	movw	r3, #34951	; 0x8887
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
                          |FREIGABE_Pin|INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e82:	2300      	movs	r3, #0
 8001e84:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	486a      	ldr	r0, [pc, #424]	; (8002038 <MX_GPIO_Init+0x2f8>)
 8001e8e:	f001 fc9d 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 8001e92:	f44f 739c 	mov.w	r3, #312	; 0x138
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4864      	ldr	r0, [pc, #400]	; (8002038 <MX_GPIO_Init+0x2f8>)
 8001ea8:	f001 fc90 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8001eac:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	485d      	ldr	r0, [pc, #372]	; (8002038 <MX_GPIO_Init+0x2f8>)
 8001ec2:	f001 fc83 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 8001ec6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8001ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001edc:	4619      	mov	r1, r3
 8001ede:	4857      	ldr	r0, [pc, #348]	; (800203c <MX_GPIO_Init+0x2fc>)
 8001ee0:	f001 fc74 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PCPin PC7 PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001ee4:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |SD_SW_Pin|GPIO_PIN_7|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eea:	2303      	movs	r3, #3
 8001eec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4850      	ldr	r0, [pc, #320]	; (800203c <MX_GPIO_Init+0x2fc>)
 8001efa:	f001 fc67 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF3 PF4 PF5
                           PFPin PFPin PFPin PFPin
                           PF10 PF11 PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001efe:	f645 73f9 	movw	r3, #24569	; 0x5ff9
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f04:	2303      	movs	r3, #3
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f10:	4619      	mov	r1, r3
 8001f12:	484b      	ldr	r0, [pc, #300]	; (8002040 <MX_GPIO_Init+0x300>)
 8001f14:	f001 fc5a 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin;
 8001f18:	f242 0302 	movw	r3, #8194	; 0x2002
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f26:	2300      	movs	r3, #0
 8001f28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4843      	ldr	r0, [pc, #268]	; (8002040 <MX_GPIO_Init+0x300>)
 8001f32:	f001 fc4b 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin|PRECHARGE_IN_Pin;
 8001f36:	f248 0304 	movw	r3, #32772	; 0x8004
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f48:	4619      	mov	r1, r3
 8001f4a:	483d      	ldr	r0, [pc, #244]	; (8002040 <MX_GPIO_Init+0x300>)
 8001f4c:	f001 fc3e 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|HW_WAKE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 8001f50:	f641 0305 	movw	r3, #6149	; 0x1805
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f56:	2300      	movs	r3, #0
 8001f58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f62:	4619      	mov	r1, r3
 8001f64:	4837      	ldr	r0, [pc, #220]	; (8002044 <MX_GPIO_Init+0x304>)
 8001f66:	f001 fc31 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 8001f6a:	f240 6302 	movw	r3, #1538	; 0x602
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f70:	2301      	movs	r3, #1
 8001f72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f80:	4619      	mov	r1, r3
 8001f82:	4830      	ldr	r0, [pc, #192]	; (8002044 <MX_GPIO_Init+0x304>)
 8001f84:	f001 fc22 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8001f88:	f64b 7373 	movw	r3, #49011	; 0xbf73
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|I2C_SCL_Pin|I2C_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	482a      	ldr	r0, [pc, #168]	; (8002048 <MX_GPIO_Init+0x308>)
 8001f9e:	f001 fc15 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 8001fa2:	f244 0384 	movw	r3, #16516	; 0x4084
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4823      	ldr	r0, [pc, #140]	; (8002048 <MX_GPIO_Init+0x308>)
 8001fbc:	f001 fc06 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8;
 8001fc0:	f240 1343 	movw	r3, #323	; 0x143
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	481d      	ldr	r0, [pc, #116]	; (800204c <MX_GPIO_Init+0x30c>)
 8001fd6:	f001 fbf9 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|SD_CMD_Pin;
 8001fda:	f240 7304 	movw	r3, #1796	; 0x704
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fec:	4619      	mov	r1, r3
 8001fee:	4818      	ldr	r0, [pc, #96]	; (8002050 <MX_GPIO_Init+0x310>)
 8001ff0:	f001 fbec 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 8001ff4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 8002002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002006:	4619      	mov	r1, r3
 8002008:	4811      	ldr	r0, [pc, #68]	; (8002050 <MX_GPIO_Init+0x310>)
 800200a:	f001 fbdf 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 800200e:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002014:	2301      	movs	r3, #1
 8002016:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201c:	2300      	movs	r3, #0
 800201e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002024:	4619      	mov	r1, r3
 8002026:	4809      	ldr	r0, [pc, #36]	; (800204c <MX_GPIO_Init+0x30c>)
 8002028:	f001 fbd0 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|DIGITAL2_Pin;
 800202c:	2318      	movs	r3, #24
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
 8002030:	e010      	b.n	8002054 <MX_GPIO_Init+0x314>
 8002032:	bf00      	nop
 8002034:	40023800 	.word	0x40023800
 8002038:	40021000 	.word	0x40021000
 800203c:	40020800 	.word	0x40020800
 8002040:	40021400 	.word	0x40021400
 8002044:	40020000 	.word	0x40020000
 8002048:	40020400 	.word	0x40020400
 800204c:	40021800 	.word	0x40021800
 8002050:	40020c00 	.word	0x40020c00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002054:	2301      	movs	r3, #1
 8002056:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205c:	2300      	movs	r3, #0
 800205e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002064:	4619      	mov	r1, r3
 8002066:	4803      	ldr	r0, [pc, #12]	; (8002074 <MX_GPIO_Init+0x334>)
 8002068:	f001 fbb0 	bl	80037cc <HAL_GPIO_Init>

}
 800206c:	bf00      	nop
 800206e:	3738      	adds	r7, #56	; 0x38
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40020c00 	.word	0x40020c00

08002078 <calculateMovingAverage>:
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	80fb      	strh	r3, [r7, #6]
 8002082:	460b      	mov	r3, r1
 8002084:	80bb      	strh	r3, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	807b      	strh	r3, [r7, #2]
	return (oldValue + ((newValue - oldValue) / n));						// MovingAverage Calculation x_n  = x_{n-1} + ((x_n+x_{n-1})/n)
 800208a:	88ba      	ldrh	r2, [r7, #4]
 800208c:	88fb      	ldrh	r3, [r7, #6]
 800208e:	1ad2      	subs	r2, r2, r3
 8002090:	887b      	ldrh	r3, [r7, #2]
 8002092:	fb92 f3f3 	sdiv	r3, r2, r3
 8002096:	b29a      	uxth	r2, r3
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	4413      	add	r3, r2
 800209c:	b29b      	uxth	r3, r3
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b096      	sub	sp, #88	; 0x58
 80020b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020b2:	f000 fe4c 	bl	8002d4e <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t data[36] = {0}, temp, CFG[6] = {0};
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020be:	2220      	movs	r2, #32
 80020c0:	2100      	movs	r1, #0
 80020c2:	4618      	mov	r0, r3
 80020c4:	f005 fb50 	bl	8007768 <memset>
 80020c8:	2300      	movs	r3, #0
 80020ca:	61fb      	str	r3, [r7, #28]
 80020cc:	2300      	movs	r3, #0
 80020ce:	843b      	strh	r3, [r7, #32]
  uint32_t tmp;
  uint16_t spannungen[12] = {0}, temperatur[2] = {0}, tmp_mean;
 80020d0:	1d3b      	adds	r3, r7, #4
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	605a      	str	r2, [r3, #4]
 80020d8:	609a      	str	r2, [r3, #8]
 80020da:	60da      	str	r2, [r3, #12]
 80020dc:	611a      	str	r2, [r3, #16]
 80020de:	615a      	str	r2, [r3, #20]
 80020e0:	2300      	movs	r3, #0
 80020e2:	603b      	str	r3, [r7, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020e4:	f000 f9c6 	bl	8002474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020e8:	f7ff fe2a 	bl	8001d40 <MX_GPIO_Init>
  MX_CAN1_Init();
 80020ec:	f7ff fd1a 	bl	8001b24 <MX_CAN1_Init>
  MX_SPI4_Init();
 80020f0:	f000 fa9c 	bl	800262c <MX_SPI4_Init>
  MX_USART2_UART_Init();
 80020f4:	f000 fd74 	bl	8002be0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80020f8:	f7ff fc82 	bl	8001a00 <MX_ADC1_Init>
  MX_TIM1_Init();
 80020fc:	f000 fbd2 	bl	80028a4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8002100:	f000 fc56 	bl	80029b0 <MX_TIM4_Init>
  MX_SPI1_Init();
 8002104:	f000 fa54 	bl	80025b0 <MX_SPI1_Init>
  MX_CAN3_Init();
 8002108:	f7ff fd42 	bl	8001b90 <MX_CAN3_Init>
  /* USER CODE BEGIN 2 */

	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 800210c:	f7ff fac4 	bl	8001698 <readResetSource>
 8002110:	4603      	mov	r3, r0
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fb12 	bl	800173c <printResetSource>

	/* Teste serielle Schnittstelle*/
	#define TEST_STRING_UART	"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 8002118:	213a      	movs	r1, #58	; 0x3a
 800211a:	48ca      	ldr	r0, [pc, #808]	; (8002444 <main+0x398>)
 800211c:	f7fe fa16 	bl	800054c <uartTransmit>

	/* Sammel Systeminformationen */
	collectSystemInfo();
 8002120:	f7ff fa90 	bl	8001644 <collectSystemInfo>
#endif

	// Leds Testen
	testPCB_Leds();
 8002124:	f7ff fc2e 	bl	8001984 <testPCB_Leds>

  	// Lese alle Eingaenge
  	readall_inputs();
 8002128:	f7ff fb78 	bl	800181c <readall_inputs>

  	// IsoSPI einschalten, Isolierte Spannungsversorgung IsoSPI und HV-Precharge Messung einschalten
  	ISOSPI_ENABLE();
 800212c:	2201      	movs	r2, #1
 800212e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002132:	48c5      	ldr	r0, [pc, #788]	; (8002448 <main+0x39c>)
 8002134:	f001 fd0e 	bl	8003b54 <HAL_GPIO_WritePin>

  	// Warten fuer eine kurze Zeit
  	HAL_Delay(20);
 8002138:	2014      	movs	r0, #20
 800213a:	f000 fe65 	bl	8002e08 <HAL_Delay>

    uartTransmit("\n", 1);
 800213e:	2101      	movs	r1, #1
 8002140:	48c2      	ldr	r0, [pc, #776]	; (800244c <main+0x3a0>)
 8002142:	f7fe fa03 	bl	800054c <uartTransmit>
#define TEST_LTC6811	"Starte Batteriemanagement-System\n"
    uartTransmit(TEST_LTC6811, sizeof(TEST_LTC6811));
 8002146:	2122      	movs	r1, #34	; 0x22
 8002148:	48c1      	ldr	r0, [pc, #772]	; (8002450 <main+0x3a4>)
 800214a:	f7fe f9ff 	bl	800054c <uartTransmit>

	if ((temp = ltc6811_check()) != 0)									// LTC6804 Selftest durchfuehren
 800214e:	f7fe fc72 	bl	8000a36 <ltc6811_check>
 8002152:	4603      	mov	r3, r0
 8002154:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002158:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800215c:	2b00      	cmp	r3, #0
 800215e:	d01f      	beq.n	80021a0 <main+0xf4>
	{
#define LTC6811_FAILED	"Selbsttest LTC6811 fehlerhaft\n"
		uartTransmit(LTC6811_FAILED, sizeof(LTC6811_FAILED));			// Ausgabe bei Fehlerhaftem Selbsttest
 8002160:	211f      	movs	r1, #31
 8002162:	48bc      	ldr	r0, [pc, #752]	; (8002454 <main+0x3a8>)
 8002164:	f7fe f9f2 	bl	800054c <uartTransmit>
		leuchten_out.RedLed = 1;										// Variable setzen
 8002168:	4abb      	ldr	r2, [pc, #748]	; (8002458 <main+0x3ac>)
 800216a:	7813      	ldrb	r3, [r2, #0]
 800216c:	f043 0320 	orr.w	r3, r3, #32
 8002170:	7013      	strb	r3, [r2, #0]
	    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);// Ausgabe auf LEDs
 8002172:	4bb9      	ldr	r3, [pc, #740]	; (8002458 <main+0x3ac>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800217a:	b2db      	uxtb	r3, r3
 800217c:	461a      	mov	r2, r3
 800217e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002182:	48b6      	ldr	r0, [pc, #728]	; (800245c <main+0x3b0>)
 8002184:	f001 fce6 	bl	8003b54 <HAL_GPIO_WritePin>

	    uartTransmitNumber(temp, 10);
 8002188:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800218c:	210a      	movs	r1, #10
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe f9f0 	bl	8000574 <uartTransmitNumber>
		uartTransmit("\n", 1);
 8002194:	2101      	movs	r1, #1
 8002196:	48ad      	ldr	r0, [pc, #692]	; (800244c <main+0x3a0>)
 8002198:	f7fe f9d8 	bl	800054c <uartTransmit>

		return 0;														// Programm abbrechen
 800219c:	2300      	movs	r3, #0
 800219e:	e14c      	b.n	800243a <main+0x38e>
	}
	else
	{
#define LTC6811_PASSED	"Selbsttest LTC6811 erfolgreich\n"
		uartTransmit(LTC6811_PASSED, sizeof(LTC6811_PASSED));			// Ausgabe bei Erfolgreichem Selbsttest
 80021a0:	2120      	movs	r1, #32
 80021a2:	48af      	ldr	r0, [pc, #700]	; (8002460 <main+0x3b4>)
 80021a4:	f7fe f9d2 	bl	800054c <uartTransmit>
	}

    // LTC6811 initialisieren
	CFG[0] = 0xF8;
 80021a8:	23f8      	movs	r3, #248	; 0xf8
 80021aa:	773b      	strb	r3, [r7, #28]
	CFG[1] = 0xCF;
 80021ac:	23cf      	movs	r3, #207	; 0xcf
 80021ae:	777b      	strb	r3, [r7, #29]
	CFG[2] = 0x17;
 80021b0:	2317      	movs	r3, #23
 80021b2:	77bb      	strb	r3, [r7, #30]
	CFG[3] = 0xA4;
 80021b4:	23a4      	movs	r3, #164	; 0xa4
 80021b6:	77fb      	strb	r3, [r7, #31]
	CFG[4] = 0x00;
 80021b8:	2300      	movs	r3, #0
 80021ba:	f887 3020 	strb.w	r3, [r7, #32]
	CFG[5] = 0x00;
 80021be:	2300      	movs	r3, #0
 80021c0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	ltc6811_write(WRCFG, &CFG[0]);
 80021c4:	f107 031c 	add.w	r3, r7, #28
 80021c8:	4619      	mov	r1, r3
 80021ca:	2001      	movs	r0, #1
 80021cc:	f7fe fac4 	bl	8000758 <ltc6811_write>
		uartTransmitNumber(data[10+i], 10);
	}
	uartTransmit(";", 1);*/

	// Alle Register zuruecksetzen
	ltc6811(CLRCELL);
 80021d0:	f240 7011 	movw	r0, #1809	; 0x711
 80021d4:	f7fe fa6c 	bl	80006b0 <ltc6811>
	ltc6811(CLRSTAT);
 80021d8:	f240 7013 	movw	r0, #1811	; 0x713
 80021dc:	f7fe fa68 	bl	80006b0 <ltc6811>
	ltc6811(CLRAUX);
 80021e0:	f240 7012 	movw	r0, #1810	; 0x712
 80021e4:	f7fe fa64 	bl	80006b0 <ltc6811>

	// Erster ADC Vorgang ist ungueltig
	ltc6811(ADCVAX | MD73 | CELLALL);									// Initial Command Zellen auslesen
 80021e8:	f240 506f 	movw	r0, #1391	; 0x56f
 80021ec:	f7fe fa60 	bl	80006b0 <ltc6811>

	tmp_mean = 65535;
 80021f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		ltc6811(ADCVC | MD73 | CELLALL);
 80021f8:	f44f 7058 	mov.w	r0, #864	; 0x360
 80021fc:	f7fe fa58 	bl	80006b0 <ltc6811>
		HAL_Delay(100);
 8002200:	2064      	movs	r0, #100	; 0x64
 8002202:	f000 fe01 	bl	8002e08 <HAL_Delay>

		ltc6811_read(RDCVA, &data[0]);
 8002206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220a:	4619      	mov	r1, r3
 800220c:	2004      	movs	r0, #4
 800220e:	f7fe fb25 	bl	800085c <ltc6811_read>
		ltc6811_read(RDCVB, &data[6]);
 8002212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002216:	3306      	adds	r3, #6
 8002218:	4619      	mov	r1, r3
 800221a:	2006      	movs	r0, #6
 800221c:	f7fe fb1e 	bl	800085c <ltc6811_read>
		ltc6811_read(RDCVC, &data[12]);
 8002220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002224:	330c      	adds	r3, #12
 8002226:	4619      	mov	r1, r3
 8002228:	2008      	movs	r0, #8
 800222a:	f7fe fb17 	bl	800085c <ltc6811_read>
		ltc6811_read(RDCVD, &data[18]);
 800222e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002232:	3312      	adds	r3, #18
 8002234:	4619      	mov	r1, r3
 8002236:	200a      	movs	r0, #10
 8002238:	f7fe fb10 	bl	800085c <ltc6811_read>

		uartTransmit("Spannungen\n", 11);
 800223c:	210b      	movs	r1, #11
 800223e:	4889      	ldr	r0, [pc, #548]	; (8002464 <main+0x3b8>)
 8002240:	f7fe f984 	bl	800054c <uartTransmit>

		for (uint8_t i = 0; i < 12; i++)
 8002244:	2300      	movs	r3, #0
 8002246:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800224a:	e020      	b.n	800228e <main+0x1e2>
		{
			spannungen[i] = ((data[i*2+1]<<8) | data[i*2]);
 800224c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	3301      	adds	r3, #1
 8002254:	3358      	adds	r3, #88	; 0x58
 8002256:	443b      	add	r3, r7
 8002258:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 800225c:	021b      	lsls	r3, r3, #8
 800225e:	b21a      	sxth	r2, r3
 8002260:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	3358      	adds	r3, #88	; 0x58
 8002268:	443b      	add	r3, r7
 800226a:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 800226e:	b21b      	sxth	r3, r3
 8002270:	4313      	orrs	r3, r2
 8002272:	b21a      	sxth	r2, r3
 8002274:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002278:	b292      	uxth	r2, r2
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	3358      	adds	r3, #88	; 0x58
 800227e:	443b      	add	r3, r7
 8002280:	f823 2c54 	strh.w	r2, [r3, #-84]
		for (uint8_t i = 0; i < 12; i++)
 8002284:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002288:	3301      	adds	r3, #1
 800228a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800228e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002292:	2b0b      	cmp	r3, #11
 8002294:	d9da      	bls.n	800224c <main+0x1a0>
		}

		for (uint8_t i = 0; i < 12; i++)
 8002296:	2300      	movs	r3, #0
 8002298:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 800229c:	e013      	b.n	80022c6 <main+0x21a>
		{
			uartTransmitNumber(spannungen[i], 10);
 800229e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	3358      	adds	r3, #88	; 0x58
 80022a6:	443b      	add	r3, r7
 80022a8:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80022ac:	210a      	movs	r1, #10
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe f960 	bl	8000574 <uartTransmitNumber>
			uartTransmit(";", 1);
 80022b4:	2101      	movs	r1, #1
 80022b6:	486c      	ldr	r0, [pc, #432]	; (8002468 <main+0x3bc>)
 80022b8:	f7fe f948 	bl	800054c <uartTransmit>
		for (uint8_t i = 0; i < 12; i++)
 80022bc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80022c0:	3301      	adds	r3, #1
 80022c2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 80022c6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80022ca:	2b0b      	cmp	r3, #11
 80022cc:	d9e7      	bls.n	800229e <main+0x1f2>
		}

		tmp = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	653b      	str	r3, [r7, #80]	; 0x50
		for (uint8_t i = 0; i < 12; i++)
 80022d2:	2300      	movs	r3, #0
 80022d4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80022d8:	e00f      	b.n	80022fa <main+0x24e>
		{
			tmp += spannungen[i];
 80022da:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	3358      	adds	r3, #88	; 0x58
 80022e2:	443b      	add	r3, r7
 80022e4:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80022e8:	461a      	mov	r2, r3
 80022ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022ec:	4413      	add	r3, r2
 80022ee:	653b      	str	r3, [r7, #80]	; 0x50
		for (uint8_t i = 0; i < 12; i++)
 80022f0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80022f4:	3301      	adds	r3, #1
 80022f6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80022fa:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80022fe:	2b0b      	cmp	r3, #11
 8002300:	d9eb      	bls.n	80022da <main+0x22e>
		}
		tmp /= 12;
 8002302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002304:	4a59      	ldr	r2, [pc, #356]	; (800246c <main+0x3c0>)
 8002306:	fba2 2303 	umull	r2, r3, r2, r3
 800230a:	08db      	lsrs	r3, r3, #3
 800230c:	653b      	str	r3, [r7, #80]	; 0x50
		uartTransmitNumber(tmp, 10);
 800230e:	210a      	movs	r1, #10
 8002310:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002312:	f7fe f92f 	bl	8000574 <uartTransmitNumber>
		uartTransmit(";", 1);
 8002316:	2101      	movs	r1, #1
 8002318:	4853      	ldr	r0, [pc, #332]	; (8002468 <main+0x3bc>)
 800231a:	f7fe f917 	bl	800054c <uartTransmit>

		tmp_mean = calculateMovingAverage(tmp_mean, tmp, 10);
 800231e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002320:	b299      	uxth	r1, r3
 8002322:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002326:	220a      	movs	r2, #10
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff fea5 	bl	8002078 <calculateMovingAverage>
 800232e:	4603      	mov	r3, r0
 8002330:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		uartTransmitNumber(tmp_mean, 10);
 8002334:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002338:	210a      	movs	r1, #10
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe f91a 	bl	8000574 <uartTransmitNumber>

		uartTransmit("\n", 1);
 8002340:	2101      	movs	r1, #1
 8002342:	4842      	ldr	r0, [pc, #264]	; (800244c <main+0x3a0>)
 8002344:	f7fe f902 	bl	800054c <uartTransmit>

		uartTransmit("Temperaturen\n", 13);
 8002348:	210d      	movs	r1, #13
 800234a:	4849      	ldr	r0, [pc, #292]	; (8002470 <main+0x3c4>)
 800234c:	f7fe f8fe 	bl	800054c <uartTransmit>

		for (uint8_t j = 0; j < 8; j++)
 8002350:	2300      	movs	r3, #0
 8002352:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8002356:	e062      	b.n	800241e <main+0x372>
		{
			ltc1380_write(LTC1380_MUX0, j);									// Multiplexer 0 einstellen
 8002358:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800235c:	4619      	mov	r1, r3
 800235e:	2090      	movs	r0, #144	; 0x90
 8002360:	f7fe f928 	bl	80005b4 <ltc1380_write>
			ltc1380_write(LTC1380_MUX2, j);									// Multiplexer 1 einstellen
 8002364:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002368:	4619      	mov	r1, r3
 800236a:	2094      	movs	r0, #148	; 0x94
 800236c:	f7fe f922 	bl	80005b4 <ltc1380_write>
			ltc6811(ADAX | MD73 | GPIOALL);									// Initial Command Zellen auslesen
 8002370:	f44f 60ac 	mov.w	r0, #1376	; 0x560
 8002374:	f7fe f99c 	bl	80006b0 <ltc6811>
			ltc6811_read(RDAUXA, &data[0]);
 8002378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800237c:	4619      	mov	r1, r3
 800237e:	200c      	movs	r0, #12
 8002380:	f7fe fa6c 	bl	800085c <ltc6811_read>

			for (uint8_t i = 0; i < 3; i++)
 8002384:	2300      	movs	r3, #0
 8002386:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800238a:	e020      	b.n	80023ce <main+0x322>
			{
				temperatur[i] = ((data[i*2+1]<<8) | data[i*2]);
 800238c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	3301      	adds	r3, #1
 8002394:	3358      	adds	r3, #88	; 0x58
 8002396:	443b      	add	r3, r7
 8002398:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 800239c:	021b      	lsls	r3, r3, #8
 800239e:	b21a      	sxth	r2, r3
 80023a0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	3358      	adds	r3, #88	; 0x58
 80023a8:	443b      	add	r3, r7
 80023aa:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80023ae:	b21b      	sxth	r3, r3
 80023b0:	4313      	orrs	r3, r2
 80023b2:	b21a      	sxth	r2, r3
 80023b4:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80023b8:	b292      	uxth	r2, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	3358      	adds	r3, #88	; 0x58
 80023be:	443b      	add	r3, r7
 80023c0:	f823 2c58 	strh.w	r2, [r3, #-88]
			for (uint8_t i = 0; i < 3; i++)
 80023c4:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80023c8:	3301      	adds	r3, #1
 80023ca:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80023ce:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d9da      	bls.n	800238c <main+0x2e0>
			}
			uartTransmitNumber(temperatur[0], 10);
 80023d6:	883b      	ldrh	r3, [r7, #0]
 80023d8:	210a      	movs	r1, #10
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe f8ca 	bl	8000574 <uartTransmitNumber>
			uartTransmit(";", 1);
 80023e0:	2101      	movs	r1, #1
 80023e2:	4821      	ldr	r0, [pc, #132]	; (8002468 <main+0x3bc>)
 80023e4:	f7fe f8b2 	bl	800054c <uartTransmit>
			uartTransmitNumber(temperatur[1], 10);
 80023e8:	887b      	ldrh	r3, [r7, #2]
 80023ea:	210a      	movs	r1, #10
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe f8c1 	bl	8000574 <uartTransmitNumber>
			uartTransmit(";", 1);
 80023f2:	2101      	movs	r1, #1
 80023f4:	481c      	ldr	r0, [pc, #112]	; (8002468 <main+0x3bc>)
 80023f6:	f7fe f8a9 	bl	800054c <uartTransmit>

			if (j == 7)
 80023fa:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80023fe:	2b07      	cmp	r3, #7
 8002400:	d108      	bne.n	8002414 <main+0x368>
			{
				uartTransmitNumber(temperatur[2], 10);
 8002402:	88bb      	ldrh	r3, [r7, #4]
 8002404:	210a      	movs	r1, #10
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe f8b4 	bl	8000574 <uartTransmitNumber>
				uartTransmit(";", 1);
 800240c:	2101      	movs	r1, #1
 800240e:	4816      	ldr	r0, [pc, #88]	; (8002468 <main+0x3bc>)
 8002410:	f7fe f89c 	bl	800054c <uartTransmit>
		for (uint8_t j = 0; j < 8; j++)
 8002414:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002418:	3301      	adds	r3, #1
 800241a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 800241e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002422:	2b07      	cmp	r3, #7
 8002424:	d998      	bls.n	8002358 <main+0x2ac>
			}
		}

		uartTransmit("\n", 1);
 8002426:	2101      	movs	r1, #1
 8002428:	4808      	ldr	r0, [pc, #32]	; (800244c <main+0x3a0>)
 800242a:	f7fe f88f 	bl	800054c <uartTransmit>

		temp++;
 800242e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002432:	3301      	adds	r3, #1
 8002434:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		ltc6811(ADCVC | MD73 | CELLALL);
 8002438:	e6de      	b.n	80021f8 <main+0x14c>
  }
  /* USER CODE END 3 */
}
 800243a:	4618      	mov	r0, r3
 800243c:	3758      	adds	r7, #88	; 0x58
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	08007b40 	.word	0x08007b40
 8002448:	40021000 	.word	0x40021000
 800244c:	08007b7c 	.word	0x08007b7c
 8002450:	08007b80 	.word	0x08007b80
 8002454:	08007ba4 	.word	0x08007ba4
 8002458:	2000003c 	.word	0x2000003c
 800245c:	40020400 	.word	0x40020400
 8002460:	08007bc4 	.word	0x08007bc4
 8002464:	08007be4 	.word	0x08007be4
 8002468:	08007bf0 	.word	0x08007bf0
 800246c:	aaaaaaab 	.word	0xaaaaaaab
 8002470:	08007bf4 	.word	0x08007bf4

08002474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b094      	sub	sp, #80	; 0x50
 8002478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800247a:	f107 031c 	add.w	r3, r7, #28
 800247e:	2234      	movs	r2, #52	; 0x34
 8002480:	2100      	movs	r1, #0
 8002482:	4618      	mov	r0, r3
 8002484:	f005 f970 	bl	8007768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002488:	f107 0308 	add.w	r3, r7, #8
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002498:	4b2c      	ldr	r3, [pc, #176]	; (800254c <SystemClock_Config+0xd8>)
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	4a2b      	ldr	r2, [pc, #172]	; (800254c <SystemClock_Config+0xd8>)
 800249e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a2:	6413      	str	r3, [r2, #64]	; 0x40
 80024a4:	4b29      	ldr	r3, [pc, #164]	; (800254c <SystemClock_Config+0xd8>)
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ac:	607b      	str	r3, [r7, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024b0:	4b27      	ldr	r3, [pc, #156]	; (8002550 <SystemClock_Config+0xdc>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a26      	ldr	r2, [pc, #152]	; (8002550 <SystemClock_Config+0xdc>)
 80024b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	4b24      	ldr	r3, [pc, #144]	; (8002550 <SystemClock_Config+0xdc>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024c4:	603b      	str	r3, [r7, #0]
 80024c6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024c8:	2301      	movs	r3, #1
 80024ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024d2:	2302      	movs	r3, #2
 80024d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80024dc:	2319      	movs	r3, #25
 80024de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 80024e0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80024e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024e6:	2302      	movs	r3, #2
 80024e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80024ea:	2308      	movs	r3, #8
 80024ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80024ee:	2302      	movs	r3, #2
 80024f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024f2:	f107 031c 	add.w	r3, r7, #28
 80024f6:	4618      	mov	r0, r3
 80024f8:	f001 fb96 	bl	8003c28 <HAL_RCC_OscConfig>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002502:	f000 f827 	bl	8002554 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002506:	f001 fb3f 	bl	8003b88 <HAL_PWREx_EnableOverDrive>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002510:	f000 f820 	bl	8002554 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002514:	230f      	movs	r3, #15
 8002516:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002518:	2302      	movs	r3, #2
 800251a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800251c:	2300      	movs	r3, #0
 800251e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002520:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002524:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800252a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800252c:	f107 0308 	add.w	r3, r7, #8
 8002530:	2107      	movs	r1, #7
 8002532:	4618      	mov	r0, r3
 8002534:	f001 fe26 	bl	8004184 <HAL_RCC_ClockConfig>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800253e:	f000 f809 	bl	8002554 <Error_Handler>
  }
}
 8002542:	bf00      	nop
 8002544:	3750      	adds	r7, #80	; 0x50
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40023800 	.word	0x40023800
 8002550:	40007000 	.word	0x40007000

08002554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002558:	b672      	cpsid	i
}
 800255a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 800255c:	4a11      	ldr	r2, [pc, #68]	; (80025a4 <Error_Handler+0x50>)
 800255e:	7813      	ldrb	r3, [r2, #0]
 8002560:	f043 0320 	orr.w	r3, r3, #32
 8002564:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8002566:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <Error_Handler+0x50>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800256e:	b2db      	uxtb	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002576:	480c      	ldr	r0, [pc, #48]	; (80025a8 <Error_Handler+0x54>)
 8002578:	f001 faec 	bl	8003b54 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 800257c:	4a09      	ldr	r2, [pc, #36]	; (80025a4 <Error_Handler+0x50>)
 800257e:	7813      	ldrb	r3, [r2, #0]
 8002580:	f36f 1386 	bfc	r3, #6, #1
 8002584:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <Error_Handler+0x50>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800258e:	b2db      	uxtb	r3, r3
 8002590:	461a      	mov	r2, r3
 8002592:	2104      	movs	r1, #4
 8002594:	4804      	ldr	r0, [pc, #16]	; (80025a8 <Error_Handler+0x54>)
 8002596:	f001 fadd 	bl	8003b54 <HAL_GPIO_WritePin>

	// Sende Nachricht auf Uart-Interface
#ifdef DEBUG
#define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
	uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 800259a:	2122      	movs	r1, #34	; 0x22
 800259c:	4803      	ldr	r0, [pc, #12]	; (80025ac <Error_Handler+0x58>)
 800259e:	f7fd ffd5 	bl	800054c <uartTransmit>
#endif
	// Beginne Endlosschleife nachdem Fehler aufgetreten ist
	while (1)
 80025a2:	e7fe      	b.n	80025a2 <Error_Handler+0x4e>
 80025a4:	2000003c 	.word	0x2000003c
 80025a8:	40020400 	.word	0x40020400
 80025ac:	08007c04 	.word	0x08007c04

080025b0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80025b4:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <MX_SPI1_Init+0x74>)
 80025b6:	4a1c      	ldr	r2, [pc, #112]	; (8002628 <MX_SPI1_Init+0x78>)
 80025b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025ba:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <MX_SPI1_Init+0x74>)
 80025bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025c2:	4b18      	ldr	r3, [pc, #96]	; (8002624 <MX_SPI1_Init+0x74>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80025c8:	4b16      	ldr	r3, [pc, #88]	; (8002624 <MX_SPI1_Init+0x74>)
 80025ca:	f44f 7240 	mov.w	r2, #768	; 0x300
 80025ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025d0:	4b14      	ldr	r3, [pc, #80]	; (8002624 <MX_SPI1_Init+0x74>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025d6:	4b13      	ldr	r3, [pc, #76]	; (8002624 <MX_SPI1_Init+0x74>)
 80025d8:	2200      	movs	r2, #0
 80025da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80025dc:	4b11      	ldr	r3, [pc, #68]	; (8002624 <MX_SPI1_Init+0x74>)
 80025de:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80025e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025e4:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <MX_SPI1_Init+0x74>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <MX_SPI1_Init+0x74>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <MX_SPI1_Init+0x74>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025f6:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <MX_SPI1_Init+0x74>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <MX_SPI1_Init+0x74>)
 80025fe:	2207      	movs	r2, #7
 8002600:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002602:	4b08      	ldr	r3, [pc, #32]	; (8002624 <MX_SPI1_Init+0x74>)
 8002604:	2200      	movs	r2, #0
 8002606:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <MX_SPI1_Init+0x74>)
 800260a:	2208      	movs	r2, #8
 800260c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800260e:	4805      	ldr	r0, [pc, #20]	; (8002624 <MX_SPI1_Init+0x74>)
 8002610:	f002 fbc6 	bl	8004da0 <HAL_SPI_Init>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800261a:	f7ff ff9b 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	200000dc 	.word	0x200000dc
 8002628:	40013000 	.word	0x40013000

0800262c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002630:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <MX_SPI4_Init+0x74>)
 8002632:	4a1c      	ldr	r2, [pc, #112]	; (80026a4 <MX_SPI4_Init+0x78>)
 8002634:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002636:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <MX_SPI4_Init+0x74>)
 8002638:	f44f 7282 	mov.w	r2, #260	; 0x104
 800263c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800263e:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <MX_SPI4_Init+0x74>)
 8002640:	2200      	movs	r2, #0
 8002642:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002644:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <MX_SPI4_Init+0x74>)
 8002646:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800264a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800264c:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <MX_SPI4_Init+0x74>)
 800264e:	2202      	movs	r2, #2
 8002650:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002652:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <MX_SPI4_Init+0x74>)
 8002654:	2201      	movs	r2, #1
 8002656:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <MX_SPI4_Init+0x74>)
 800265a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800265e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002660:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <MX_SPI4_Init+0x74>)
 8002662:	2230      	movs	r2, #48	; 0x30
 8002664:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002666:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <MX_SPI4_Init+0x74>)
 8002668:	2200      	movs	r2, #0
 800266a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <MX_SPI4_Init+0x74>)
 800266e:	2200      	movs	r2, #0
 8002670:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <MX_SPI4_Init+0x74>)
 8002674:	2200      	movs	r2, #0
 8002676:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002678:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <MX_SPI4_Init+0x74>)
 800267a:	2207      	movs	r2, #7
 800267c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800267e:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <MX_SPI4_Init+0x74>)
 8002680:	2200      	movs	r2, #0
 8002682:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <MX_SPI4_Init+0x74>)
 8002686:	2200      	movs	r2, #0
 8002688:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800268a:	4805      	ldr	r0, [pc, #20]	; (80026a0 <MX_SPI4_Init+0x74>)
 800268c:	f002 fb88 	bl	8004da0 <HAL_SPI_Init>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002696:	f7ff ff5d 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000140 	.word	0x20000140
 80026a4:	40013400 	.word	0x40013400

080026a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08c      	sub	sp, #48	; 0x30
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	f107 031c 	add.w	r3, r7, #28
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a3d      	ldr	r2, [pc, #244]	; (80027bc <HAL_SPI_MspInit+0x114>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d145      	bne.n	8002756 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026ca:	4b3d      	ldr	r3, [pc, #244]	; (80027c0 <HAL_SPI_MspInit+0x118>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	4a3c      	ldr	r2, [pc, #240]	; (80027c0 <HAL_SPI_MspInit+0x118>)
 80026d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026d4:	6453      	str	r3, [r2, #68]	; 0x44
 80026d6:	4b3a      	ldr	r3, [pc, #232]	; (80027c0 <HAL_SPI_MspInit+0x118>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026de:	61bb      	str	r3, [r7, #24]
 80026e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026e2:	4b37      	ldr	r3, [pc, #220]	; (80027c0 <HAL_SPI_MspInit+0x118>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	4a36      	ldr	r2, [pc, #216]	; (80027c0 <HAL_SPI_MspInit+0x118>)
 80026e8:	f043 0308 	orr.w	r3, r3, #8
 80026ec:	6313      	str	r3, [r2, #48]	; 0x30
 80026ee:	4b34      	ldr	r3, [pc, #208]	; (80027c0 <HAL_SPI_MspInit+0x118>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80026fa:	4b31      	ldr	r3, [pc, #196]	; (80027c0 <HAL_SPI_MspInit+0x118>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	4a30      	ldr	r2, [pc, #192]	; (80027c0 <HAL_SPI_MspInit+0x118>)
 8002700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002704:	6313      	str	r3, [r2, #48]	; 0x30
 8002706:	4b2e      	ldr	r3, [pc, #184]	; (80027c0 <HAL_SPI_MspInit+0x118>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002716:	2302      	movs	r3, #2
 8002718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271e:	2303      	movs	r3, #3
 8002720:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002722:	2305      	movs	r3, #5
 8002724:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002726:	f107 031c 	add.w	r3, r7, #28
 800272a:	4619      	mov	r1, r3
 800272c:	4825      	ldr	r0, [pc, #148]	; (80027c4 <HAL_SPI_MspInit+0x11c>)
 800272e:	f001 f84d 	bl	80037cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTI_MISO_Pin|POTI_CS_Pin|POTI_SCK_Pin;
 8002732:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8002736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002738:	2302      	movs	r3, #2
 800273a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002740:	2303      	movs	r3, #3
 8002742:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002744:	2305      	movs	r3, #5
 8002746:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002748:	f107 031c 	add.w	r3, r7, #28
 800274c:	4619      	mov	r1, r3
 800274e:	481e      	ldr	r0, [pc, #120]	; (80027c8 <HAL_SPI_MspInit+0x120>)
 8002750:	f001 f83c 	bl	80037cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002754:	e02d      	b.n	80027b2 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI4)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1c      	ldr	r2, [pc, #112]	; (80027cc <HAL_SPI_MspInit+0x124>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d128      	bne.n	80027b2 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002760:	4b17      	ldr	r3, [pc, #92]	; (80027c0 <HAL_SPI_MspInit+0x118>)
 8002762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002764:	4a16      	ldr	r2, [pc, #88]	; (80027c0 <HAL_SPI_MspInit+0x118>)
 8002766:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800276a:	6453      	str	r3, [r2, #68]	; 0x44
 800276c:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <HAL_SPI_MspInit+0x118>)
 800276e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002770:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002778:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <HAL_SPI_MspInit+0x118>)
 800277a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277c:	4a10      	ldr	r2, [pc, #64]	; (80027c0 <HAL_SPI_MspInit+0x118>)
 800277e:	f043 0310 	orr.w	r3, r3, #16
 8002782:	6313      	str	r3, [r2, #48]	; 0x30
 8002784:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <HAL_SPI_MspInit+0x118>)
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	f003 0310 	and.w	r3, r3, #16
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 8002790:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279e:	2303      	movs	r3, #3
 80027a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80027a2:	2305      	movs	r3, #5
 80027a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027a6:	f107 031c 	add.w	r3, r7, #28
 80027aa:	4619      	mov	r1, r3
 80027ac:	4808      	ldr	r0, [pc, #32]	; (80027d0 <HAL_SPI_MspInit+0x128>)
 80027ae:	f001 f80d 	bl	80037cc <HAL_GPIO_Init>
}
 80027b2:	bf00      	nop
 80027b4:	3730      	adds	r7, #48	; 0x30
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40013000 	.word	0x40013000
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40020c00 	.word	0x40020c00
 80027c8:	40021800 	.word	0x40021800
 80027cc:	40013400 	.word	0x40013400
 80027d0:	40021000 	.word	0x40021000

080027d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80027da:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <HAL_MspInit+0x44>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	4a0e      	ldr	r2, [pc, #56]	; (8002818 <HAL_MspInit+0x44>)
 80027e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e4:	6413      	str	r3, [r2, #64]	; 0x40
 80027e6:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <HAL_MspInit+0x44>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ee:	607b      	str	r3, [r7, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f2:	4b09      	ldr	r3, [pc, #36]	; (8002818 <HAL_MspInit+0x44>)
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	4a08      	ldr	r2, [pc, #32]	; (8002818 <HAL_MspInit+0x44>)
 80027f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027fc:	6453      	str	r3, [r2, #68]	; 0x44
 80027fe:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_MspInit+0x44>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002806:	603b      	str	r3, [r7, #0]
 8002808:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40023800 	.word	0x40023800

0800281c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800282a:	b480      	push	{r7}
 800282c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800282e:	e7fe      	b.n	800282e <HardFault_Handler+0x4>

08002830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002834:	e7fe      	b.n	8002834 <MemManage_Handler+0x4>

08002836 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800283a:	e7fe      	b.n	800283a <BusFault_Handler+0x4>

0800283c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002840:	e7fe      	b.n	8002840 <UsageFault_Handler+0x4>

08002842 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002842:	b480      	push	{r7}
 8002844:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002854:	bf00      	nop
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800285e:	b480      	push	{r7}
 8002860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002870:	f000 faaa 	bl	8002dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}

08002878 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800287c:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <SystemInit+0x28>)
 800287e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002882:	4a07      	ldr	r2, [pc, #28]	; (80028a0 <SystemInit+0x28>)
 8002884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800288c:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <SystemInit+0x28>)
 800288e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002892:	609a      	str	r2, [r3, #8]
#endif
}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08c      	sub	sp, #48	; 0x30
 80028a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80028aa:	f107 031c 	add.w	r3, r7, #28
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	609a      	str	r2, [r3, #8]
 80028b6:	60da      	str	r2, [r3, #12]
 80028b8:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80028ba:	f107 030c 	add.w	r3, r7, #12
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	605a      	str	r2, [r3, #4]
 80028c4:	609a      	str	r2, [r3, #8]
 80028c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028c8:	463b      	mov	r3, r7
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	605a      	str	r2, [r3, #4]
 80028d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028d2:	4b35      	ldr	r3, [pc, #212]	; (80029a8 <MX_TIM1_Init+0x104>)
 80028d4:	4a35      	ldr	r2, [pc, #212]	; (80029ac <MX_TIM1_Init+0x108>)
 80028d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80028d8:	4b33      	ldr	r3, [pc, #204]	; (80029a8 <MX_TIM1_Init+0x104>)
 80028da:	2200      	movs	r2, #0
 80028dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028de:	4b32      	ldr	r3, [pc, #200]	; (80029a8 <MX_TIM1_Init+0x104>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80028e4:	4b30      	ldr	r3, [pc, #192]	; (80029a8 <MX_TIM1_Init+0x104>)
 80028e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ec:	4b2e      	ldr	r3, [pc, #184]	; (80029a8 <MX_TIM1_Init+0x104>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028f2:	4b2d      	ldr	r3, [pc, #180]	; (80029a8 <MX_TIM1_Init+0x104>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028f8:	4b2b      	ldr	r3, [pc, #172]	; (80029a8 <MX_TIM1_Init+0x104>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80028fe:	482a      	ldr	r0, [pc, #168]	; (80029a8 <MX_TIM1_Init+0x104>)
 8002900:	f003 fa05 	bl	8005d0e <HAL_TIM_IC_Init>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800290a:	f7ff fe23 	bl	8002554 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800290e:	2304      	movs	r3, #4
 8002910:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002912:	2350      	movs	r3, #80	; 0x50
 8002914:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002916:	2300      	movs	r3, #0
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800291a:	2300      	movs	r3, #0
 800291c:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800291e:	2300      	movs	r3, #0
 8002920:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002922:	f107 031c 	add.w	r3, r7, #28
 8002926:	4619      	mov	r1, r3
 8002928:	481f      	ldr	r0, [pc, #124]	; (80029a8 <MX_TIM1_Init+0x104>)
 800292a:	f003 fbf7 	bl	800611c <HAL_TIM_SlaveConfigSynchro>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002934:	f7ff fe0e 	bl	8002554 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002938:	2300      	movs	r3, #0
 800293a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800293c:	2301      	movs	r3, #1
 800293e:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002948:	f107 030c 	add.w	r3, r7, #12
 800294c:	2200      	movs	r2, #0
 800294e:	4619      	mov	r1, r3
 8002950:	4815      	ldr	r0, [pc, #84]	; (80029a8 <MX_TIM1_Init+0x104>)
 8002952:	f003 fa33 	bl	8005dbc <HAL_TIM_IC_ConfigChannel>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800295c:	f7ff fdfa 	bl	8002554 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002960:	2302      	movs	r3, #2
 8002962:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002964:	2302      	movs	r3, #2
 8002966:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002968:	f107 030c 	add.w	r3, r7, #12
 800296c:	2204      	movs	r2, #4
 800296e:	4619      	mov	r1, r3
 8002970:	480d      	ldr	r0, [pc, #52]	; (80029a8 <MX_TIM1_Init+0x104>)
 8002972:	f003 fa23 	bl	8005dbc <HAL_TIM_IC_ConfigChannel>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800297c:	f7ff fdea 	bl	8002554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002980:	2300      	movs	r3, #0
 8002982:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002984:	2300      	movs	r3, #0
 8002986:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002988:	2300      	movs	r3, #0
 800298a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800298c:	463b      	mov	r3, r7
 800298e:	4619      	mov	r1, r3
 8002990:	4805      	ldr	r0, [pc, #20]	; (80029a8 <MX_TIM1_Init+0x104>)
 8002992:	f004 f941 	bl	8006c18 <HAL_TIMEx_MasterConfigSynchronization>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800299c:	f7ff fdda 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80029a0:	bf00      	nop
 80029a2:	3730      	adds	r7, #48	; 0x30
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	200001a4 	.word	0x200001a4
 80029ac:	40010000 	.word	0x40010000

080029b0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08a      	sub	sp, #40	; 0x28
 80029b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b6:	f107 031c 	add.w	r3, r7, #28
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029c2:	463b      	mov	r3, r7
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	60da      	str	r2, [r3, #12]
 80029ce:	611a      	str	r2, [r3, #16]
 80029d0:	615a      	str	r2, [r3, #20]
 80029d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80029d4:	4b32      	ldr	r3, [pc, #200]	; (8002aa0 <MX_TIM4_Init+0xf0>)
 80029d6:	4a33      	ldr	r2, [pc, #204]	; (8002aa4 <MX_TIM4_Init+0xf4>)
 80029d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80029da:	4b31      	ldr	r3, [pc, #196]	; (8002aa0 <MX_TIM4_Init+0xf0>)
 80029dc:	2200      	movs	r2, #0
 80029de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e0:	4b2f      	ldr	r3, [pc, #188]	; (8002aa0 <MX_TIM4_Init+0xf0>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80029e6:	4b2e      	ldr	r3, [pc, #184]	; (8002aa0 <MX_TIM4_Init+0xf0>)
 80029e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029ec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ee:	4b2c      	ldr	r3, [pc, #176]	; (8002aa0 <MX_TIM4_Init+0xf0>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029f4:	4b2a      	ldr	r3, [pc, #168]	; (8002aa0 <MX_TIM4_Init+0xf0>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80029fa:	4829      	ldr	r0, [pc, #164]	; (8002aa0 <MX_TIM4_Init+0xf0>)
 80029fc:	f003 f930 	bl	8005c60 <HAL_TIM_PWM_Init>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002a06:	f7ff fda5 	bl	8002554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a12:	f107 031c 	add.w	r3, r7, #28
 8002a16:	4619      	mov	r1, r3
 8002a18:	4821      	ldr	r0, [pc, #132]	; (8002aa0 <MX_TIM4_Init+0xf0>)
 8002a1a:	f004 f8fd 	bl	8006c18 <HAL_TIMEx_MasterConfigSynchronization>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002a24:	f7ff fd96 	bl	8002554 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a28:	2360      	movs	r3, #96	; 0x60
 8002a2a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a34:	2300      	movs	r3, #0
 8002a36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a38:	463b      	mov	r3, r7
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4818      	ldr	r0, [pc, #96]	; (8002aa0 <MX_TIM4_Init+0xf0>)
 8002a40:	f003 fa58 	bl	8005ef4 <HAL_TIM_PWM_ConfigChannel>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002a4a:	f7ff fd83 	bl	8002554 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a4e:	463b      	mov	r3, r7
 8002a50:	2204      	movs	r2, #4
 8002a52:	4619      	mov	r1, r3
 8002a54:	4812      	ldr	r0, [pc, #72]	; (8002aa0 <MX_TIM4_Init+0xf0>)
 8002a56:	f003 fa4d 	bl	8005ef4 <HAL_TIM_PWM_ConfigChannel>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002a60:	f7ff fd78 	bl	8002554 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a64:	463b      	mov	r3, r7
 8002a66:	2208      	movs	r2, #8
 8002a68:	4619      	mov	r1, r3
 8002a6a:	480d      	ldr	r0, [pc, #52]	; (8002aa0 <MX_TIM4_Init+0xf0>)
 8002a6c:	f003 fa42 	bl	8005ef4 <HAL_TIM_PWM_ConfigChannel>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8002a76:	f7ff fd6d 	bl	8002554 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a7a:	463b      	mov	r3, r7
 8002a7c:	220c      	movs	r2, #12
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4807      	ldr	r0, [pc, #28]	; (8002aa0 <MX_TIM4_Init+0xf0>)
 8002a82:	f003 fa37 	bl	8005ef4 <HAL_TIM_PWM_ConfigChannel>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002a8c:	f7ff fd62 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002a90:	4803      	ldr	r0, [pc, #12]	; (8002aa0 <MX_TIM4_Init+0xf0>)
 8002a92:	f000 f86d 	bl	8002b70 <HAL_TIM_MspPostInit>

}
 8002a96:	bf00      	nop
 8002a98:	3728      	adds	r7, #40	; 0x28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	200001f0 	.word	0x200001f0
 8002aa4:	40000800 	.word	0x40000800

08002aa8 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	; 0x28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab0:	f107 0314 	add.w	r3, r7, #20
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	60da      	str	r2, [r3, #12]
 8002abe:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a17      	ldr	r2, [pc, #92]	; (8002b24 <HAL_TIM_IC_MspInit+0x7c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d128      	bne.n	8002b1c <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002aca:	4b17      	ldr	r3, [pc, #92]	; (8002b28 <HAL_TIM_IC_MspInit+0x80>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	4a16      	ldr	r2, [pc, #88]	; (8002b28 <HAL_TIM_IC_MspInit+0x80>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad6:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <HAL_TIM_IC_MspInit+0x80>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ae2:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <HAL_TIM_IC_MspInit+0x80>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	4a10      	ldr	r2, [pc, #64]	; (8002b28 <HAL_TIM_IC_MspInit+0x80>)
 8002ae8:	f043 0310 	orr.w	r3, r3, #16
 8002aec:	6313      	str	r3, [r2, #48]	; 0x30
 8002aee:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <HAL_TIM_IC_MspInit+0x80>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	f003 0310 	and.w	r3, r3, #16
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 8002afa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b00:	2302      	movs	r3, #2
 8002b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 8002b10:	f107 0314 	add.w	r3, r7, #20
 8002b14:	4619      	mov	r1, r3
 8002b16:	4805      	ldr	r0, [pc, #20]	; (8002b2c <HAL_TIM_IC_MspInit+0x84>)
 8002b18:	f000 fe58 	bl	80037cc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	3728      	adds	r7, #40	; 0x28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40010000 	.word	0x40010000
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40021000 	.word	0x40021000

08002b30 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a0a      	ldr	r2, [pc, #40]	; (8002b68 <HAL_TIM_PWM_MspInit+0x38>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d10b      	bne.n	8002b5a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b42:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <HAL_TIM_PWM_MspInit+0x3c>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	4a09      	ldr	r2, [pc, #36]	; (8002b6c <HAL_TIM_PWM_MspInit+0x3c>)
 8002b48:	f043 0304 	orr.w	r3, r3, #4
 8002b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b4e:	4b07      	ldr	r3, [pc, #28]	; (8002b6c <HAL_TIM_PWM_MspInit+0x3c>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002b5a:	bf00      	nop
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	40000800 	.word	0x40000800
 8002b6c:	40023800 	.word	0x40023800

08002b70 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b78:	f107 030c 	add.w	r3, r7, #12
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a11      	ldr	r2, [pc, #68]	; (8002bd4 <HAL_TIM_MspPostInit+0x64>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d11c      	bne.n	8002bcc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b92:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <HAL_TIM_MspPostInit+0x68>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	4a10      	ldr	r2, [pc, #64]	; (8002bd8 <HAL_TIM_MspPostInit+0x68>)
 8002b98:	f043 0308 	orr.w	r3, r3, #8
 8002b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9e:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <HAL_TIM_MspPostInit+0x68>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin|PWM_HV_Charger_Pin;
 8002baa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002bae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bc0:	f107 030c 	add.w	r3, r7, #12
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4805      	ldr	r0, [pc, #20]	; (8002bdc <HAL_TIM_MspPostInit+0x6c>)
 8002bc8:	f000 fe00 	bl	80037cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002bcc:	bf00      	nop
 8002bce:	3720      	adds	r7, #32
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40000800 	.word	0x40000800
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40020c00 	.word	0x40020c00

08002be0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002be4:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <MX_USART2_UART_Init+0x58>)
 8002be6:	4a15      	ldr	r2, [pc, #84]	; (8002c3c <MX_USART2_UART_Init+0x5c>)
 8002be8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002bea:	4b13      	ldr	r3, [pc, #76]	; (8002c38 <MX_USART2_UART_Init+0x58>)
 8002bec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002bf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bf2:	4b11      	ldr	r3, [pc, #68]	; (8002c38 <MX_USART2_UART_Init+0x58>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bf8:	4b0f      	ldr	r3, [pc, #60]	; (8002c38 <MX_USART2_UART_Init+0x58>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bfe:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <MX_USART2_UART_Init+0x58>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c04:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <MX_USART2_UART_Init+0x58>)
 8002c06:	220c      	movs	r2, #12
 8002c08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c0a:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <MX_USART2_UART_Init+0x58>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c10:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <MX_USART2_UART_Init+0x58>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c16:	4b08      	ldr	r3, [pc, #32]	; (8002c38 <MX_USART2_UART_Init+0x58>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <MX_USART2_UART_Init+0x58>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c22:	4805      	ldr	r0, [pc, #20]	; (8002c38 <MX_USART2_UART_Init+0x58>)
 8002c24:	f004 f886 	bl	8006d34 <HAL_UART_Init>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002c2e:	f7ff fc91 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	2000023c 	.word	0x2000023c
 8002c3c:	40004400 	.word	0x40004400

08002c40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b0ae      	sub	sp, #184	; 0xb8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c58:	f107 0314 	add.w	r3, r7, #20
 8002c5c:	2290      	movs	r2, #144	; 0x90
 8002c5e:	2100      	movs	r1, #0
 8002c60:	4618      	mov	r0, r3
 8002c62:	f004 fd81 	bl	8007768 <memset>
  if(uartHandle->Instance==USART2)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a21      	ldr	r2, [pc, #132]	; (8002cf0 <HAL_UART_MspInit+0xb0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d13a      	bne.n	8002ce6 <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002c70:	2380      	movs	r3, #128	; 0x80
 8002c72:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002c74:	2300      	movs	r3, #0
 8002c76:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c78:	f107 0314 	add.w	r3, r7, #20
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f001 fc67 	bl	8004550 <HAL_RCCEx_PeriphCLKConfig>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002c88:	f7ff fc64 	bl	8002554 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c8c:	4b19      	ldr	r3, [pc, #100]	; (8002cf4 <HAL_UART_MspInit+0xb4>)
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	4a18      	ldr	r2, [pc, #96]	; (8002cf4 <HAL_UART_MspInit+0xb4>)
 8002c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c96:	6413      	str	r3, [r2, #64]	; 0x40
 8002c98:	4b16      	ldr	r3, [pc, #88]	; (8002cf4 <HAL_UART_MspInit+0xb4>)
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ca4:	4b13      	ldr	r3, [pc, #76]	; (8002cf4 <HAL_UART_MspInit+0xb4>)
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	4a12      	ldr	r2, [pc, #72]	; (8002cf4 <HAL_UART_MspInit+0xb4>)
 8002caa:	f043 0308 	orr.w	r3, r3, #8
 8002cae:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb0:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <HAL_UART_MspInit+0xb4>)
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002cbc:	2360      	movs	r3, #96	; 0x60
 8002cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cd4:	2307      	movs	r3, #7
 8002cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cda:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4805      	ldr	r0, [pc, #20]	; (8002cf8 <HAL_UART_MspInit+0xb8>)
 8002ce2:	f000 fd73 	bl	80037cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002ce6:	bf00      	nop
 8002ce8:	37b8      	adds	r7, #184	; 0xb8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40004400 	.word	0x40004400
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	40020c00 	.word	0x40020c00

08002cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d34 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002d00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d02:	e003      	b.n	8002d0c <LoopCopyDataInit>

08002d04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002d04:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002d06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002d08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002d0a:	3104      	adds	r1, #4

08002d0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d0c:	480b      	ldr	r0, [pc, #44]	; (8002d3c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002d0e:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002d10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002d14:	d3f6      	bcc.n	8002d04 <CopyDataInit>
  ldr  r2, =_sbss
 8002d16:	4a0b      	ldr	r2, [pc, #44]	; (8002d44 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002d18:	e002      	b.n	8002d20 <LoopFillZerobss>

08002d1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002d1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002d1c:	f842 3b04 	str.w	r3, [r2], #4

08002d20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002d20:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002d22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002d24:	d3f9      	bcc.n	8002d1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d26:	f7ff fda7 	bl	8002878 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d2a:	f004 fcf9 	bl	8007720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d2e:	f7ff f9bd 	bl	80020ac <main>
  bx  lr    
 8002d32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d34:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002d38:	08007e78 	.word	0x08007e78
  ldr  r0, =_sdata
 8002d3c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002d40:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002d44:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002d48:	200002c4 	.word	0x200002c4

08002d4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d4c:	e7fe      	b.n	8002d4c <ADC_IRQHandler>

08002d4e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d52:	2003      	movs	r0, #3
 8002d54:	f000 fd06 	bl	8003764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d58:	2000      	movs	r0, #0
 8002d5a:	f000 f805 	bl	8002d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d5e:	f7ff fd39 	bl	80027d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d70:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <HAL_InitTick+0x54>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <HAL_InitTick+0x58>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	4619      	mov	r1, r3
 8002d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 fd13 	bl	80037b2 <HAL_SYSTICK_Config>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e00e      	b.n	8002db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b0f      	cmp	r3, #15
 8002d9a:	d80a      	bhi.n	8002db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	f04f 30ff 	mov.w	r0, #4294967295
 8002da4:	f000 fce9 	bl	800377a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002da8:	4a06      	ldr	r2, [pc, #24]	; (8002dc4 <HAL_InitTick+0x5c>)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	e000      	b.n	8002db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	20000000 	.word	0x20000000
 8002dc0:	20000008 	.word	0x20000008
 8002dc4:	20000004 	.word	0x20000004

08002dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <HAL_IncTick+0x20>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_IncTick+0x24>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	4a04      	ldr	r2, [pc, #16]	; (8002dec <HAL_IncTick+0x24>)
 8002dda:	6013      	str	r3, [r2, #0]
}
 8002ddc:	bf00      	nop
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	20000008 	.word	0x20000008
 8002dec:	200002c0 	.word	0x200002c0

08002df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return uwTick;
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <HAL_GetTick+0x14>)
 8002df6:	681b      	ldr	r3, [r3, #0]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	200002c0 	.word	0x200002c0

08002e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e10:	f7ff ffee 	bl	8002df0 <HAL_GetTick>
 8002e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e20:	d005      	beq.n	8002e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e22:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <HAL_Delay+0x44>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e2e:	bf00      	nop
 8002e30:	f7ff ffde 	bl	8002df0 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d8f7      	bhi.n	8002e30 <HAL_Delay+0x28>
  {
  }
}
 8002e40:	bf00      	nop
 8002e42:	bf00      	nop
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000008 	.word	0x20000008

08002e50 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 8002e54:	4b02      	ldr	r3, [pc, #8]	; (8002e60 <HAL_GetHalVersion+0x10>)
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	01020a00 	.word	0x01020a00

08002e64 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8002e68:	4b03      	ldr	r3, [pc, #12]	; (8002e78 <HAL_GetREVID+0x14>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	0c1b      	lsrs	r3, r3, #16
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	e0042000 	.word	0xe0042000

08002e7c <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8002e80:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <HAL_GetDEVID+0x18>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	e0042000 	.word	0xe0042000

08002e98 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8002e9c:	4b03      	ldr	r3, [pc, #12]	; (8002eac <HAL_GetUIDw0+0x14>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	1ff0f420 	.word	0x1ff0f420

08002eb0 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002eb4:	4b03      	ldr	r3, [pc, #12]	; (8002ec4 <HAL_GetUIDw1+0x14>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	1ff0f424 	.word	0x1ff0f424

08002ec8 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002ecc:	4b03      	ldr	r3, [pc, #12]	; (8002edc <HAL_GetUIDw2+0x14>)
 8002ece:	681b      	ldr	r3, [r3, #0]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	1ff0f428 	.word	0x1ff0f428

08002ee0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e031      	b.n	8002f5a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fe fdd0 	bl	8001aa4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d116      	bne.n	8002f4c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f22:	4b10      	ldr	r3, [pc, #64]	; (8002f64 <HAL_ADC_Init+0x84>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	f043 0202 	orr.w	r2, r3, #2
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f970 	bl	8003214 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	f023 0303 	bic.w	r3, r3, #3
 8002f42:	f043 0201 	orr.w	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	641a      	str	r2, [r3, #64]	; 0x40
 8002f4a:	e001      	b.n	8002f50 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	ffffeefd 	.word	0xffffeefd

08002f68 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x1c>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e136      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x28a>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b09      	cmp	r3, #9
 8002f92:	d93a      	bls.n	800300a <HAL_ADC_ConfigChannel+0xa2>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f9c:	d035      	beq.n	800300a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68d9      	ldr	r1, [r3, #12]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	461a      	mov	r2, r3
 8002fac:	4613      	mov	r3, r2
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3b1e      	subs	r3, #30
 8002fb4:	2207      	movs	r2, #7
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	400a      	ands	r2, r1
 8002fc2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a8d      	ldr	r2, [pc, #564]	; (8003200 <HAL_ADC_ConfigChannel+0x298>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d10a      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68d9      	ldr	r1, [r3, #12]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	061a      	lsls	r2, r3, #24
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fe2:	e035      	b.n	8003050 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68d9      	ldr	r1, [r3, #12]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	4403      	add	r3, r0
 8002ffc:	3b1e      	subs	r3, #30
 8002ffe:	409a      	lsls	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003008:	e022      	b.n	8003050 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6919      	ldr	r1, [r3, #16]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	b29b      	uxth	r3, r3
 8003016:	461a      	mov	r2, r3
 8003018:	4613      	mov	r3, r2
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	4413      	add	r3, r2
 800301e:	2207      	movs	r2, #7
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43da      	mvns	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	400a      	ands	r2, r1
 800302c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6919      	ldr	r1, [r3, #16]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	b29b      	uxth	r3, r3
 800303e:	4618      	mov	r0, r3
 8003040:	4603      	mov	r3, r0
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4403      	add	r3, r0
 8003046:	409a      	lsls	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b06      	cmp	r3, #6
 8003056:	d824      	bhi.n	80030a2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	3b05      	subs	r3, #5
 800306a:	221f      	movs	r2, #31
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43da      	mvns	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	400a      	ands	r2, r1
 8003078:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	b29b      	uxth	r3, r3
 8003086:	4618      	mov	r0, r3
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	3b05      	subs	r3, #5
 8003094:	fa00 f203 	lsl.w	r2, r0, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	635a      	str	r2, [r3, #52]	; 0x34
 80030a0:	e04c      	b.n	800313c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b0c      	cmp	r3, #12
 80030a8:	d824      	bhi.n	80030f4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	3b23      	subs	r3, #35	; 0x23
 80030bc:	221f      	movs	r2, #31
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43da      	mvns	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	400a      	ands	r2, r1
 80030ca:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	4618      	mov	r0, r3
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	3b23      	subs	r3, #35	; 0x23
 80030e6:	fa00 f203 	lsl.w	r2, r0, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	631a      	str	r2, [r3, #48]	; 0x30
 80030f2:	e023      	b.n	800313c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	3b41      	subs	r3, #65	; 0x41
 8003106:	221f      	movs	r2, #31
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43da      	mvns	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	400a      	ands	r2, r1
 8003114:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	b29b      	uxth	r3, r3
 8003122:	4618      	mov	r0, r3
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	3b41      	subs	r3, #65	; 0x41
 8003130:	fa00 f203 	lsl.w	r2, r0, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a30      	ldr	r2, [pc, #192]	; (8003204 <HAL_ADC_ConfigChannel+0x29c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d10a      	bne.n	800315c <HAL_ADC_ConfigChannel+0x1f4>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800314e:	d105      	bne.n	800315c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003150:	4b2d      	ldr	r3, [pc, #180]	; (8003208 <HAL_ADC_ConfigChannel+0x2a0>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	4a2c      	ldr	r2, [pc, #176]	; (8003208 <HAL_ADC_ConfigChannel+0x2a0>)
 8003156:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800315a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a28      	ldr	r2, [pc, #160]	; (8003204 <HAL_ADC_ConfigChannel+0x29c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d10f      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x21e>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b12      	cmp	r3, #18
 800316c:	d10b      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800316e:	4b26      	ldr	r3, [pc, #152]	; (8003208 <HAL_ADC_ConfigChannel+0x2a0>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	4a25      	ldr	r2, [pc, #148]	; (8003208 <HAL_ADC_ConfigChannel+0x2a0>)
 8003174:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003178:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800317a:	4b23      	ldr	r3, [pc, #140]	; (8003208 <HAL_ADC_ConfigChannel+0x2a0>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	4a22      	ldr	r2, [pc, #136]	; (8003208 <HAL_ADC_ConfigChannel+0x2a0>)
 8003180:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003184:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a1e      	ldr	r2, [pc, #120]	; (8003204 <HAL_ADC_ConfigChannel+0x29c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d12b      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x280>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a1a      	ldr	r2, [pc, #104]	; (8003200 <HAL_ADC_ConfigChannel+0x298>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d003      	beq.n	80031a2 <HAL_ADC_ConfigChannel+0x23a>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b11      	cmp	r3, #17
 80031a0:	d122      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80031a2:	4b19      	ldr	r3, [pc, #100]	; (8003208 <HAL_ADC_ConfigChannel+0x2a0>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4a18      	ldr	r2, [pc, #96]	; (8003208 <HAL_ADC_ConfigChannel+0x2a0>)
 80031a8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80031ac:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80031ae:	4b16      	ldr	r3, [pc, #88]	; (8003208 <HAL_ADC_ConfigChannel+0x2a0>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	4a15      	ldr	r2, [pc, #84]	; (8003208 <HAL_ADC_ConfigChannel+0x2a0>)
 80031b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031b8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a10      	ldr	r2, [pc, #64]	; (8003200 <HAL_ADC_ConfigChannel+0x298>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d111      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80031c4:	4b11      	ldr	r3, [pc, #68]	; (800320c <HAL_ADC_ConfigChannel+0x2a4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a11      	ldr	r2, [pc, #68]	; (8003210 <HAL_ADC_ConfigChannel+0x2a8>)
 80031ca:	fba2 2303 	umull	r2, r3, r2, r3
 80031ce:	0c9a      	lsrs	r2, r3, #18
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80031da:	e002      	b.n	80031e2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	3b01      	subs	r3, #1
 80031e0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1f9      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	10000012 	.word	0x10000012
 8003204:	40012000 	.word	0x40012000
 8003208:	40012300 	.word	0x40012300
 800320c:	20000000 	.word	0x20000000
 8003210:	431bde83 	.word	0x431bde83

08003214 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800321c:	4b78      	ldr	r3, [pc, #480]	; (8003400 <ADC_Init+0x1ec>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	4a77      	ldr	r2, [pc, #476]	; (8003400 <ADC_Init+0x1ec>)
 8003222:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003226:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003228:	4b75      	ldr	r3, [pc, #468]	; (8003400 <ADC_Init+0x1ec>)
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	4973      	ldr	r1, [pc, #460]	; (8003400 <ADC_Init+0x1ec>)
 8003232:	4313      	orrs	r3, r2
 8003234:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003244:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6859      	ldr	r1, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	021a      	lsls	r2, r3, #8
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003268:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6859      	ldr	r1, [r3, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800328a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6899      	ldr	r1, [r3, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a2:	4a58      	ldr	r2, [pc, #352]	; (8003404 <ADC_Init+0x1f0>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d022      	beq.n	80032ee <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6899      	ldr	r1, [r3, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6899      	ldr	r1, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	e00f      	b.n	800330e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800330c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0202 	bic.w	r2, r2, #2
 800331c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6899      	ldr	r1, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	005a      	lsls	r2, r3, #1
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01b      	beq.n	8003374 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800334a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800335a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6859      	ldr	r1, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	3b01      	subs	r3, #1
 8003368:	035a      	lsls	r2, r3, #13
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	605a      	str	r2, [r3, #4]
 8003372:	e007      	b.n	8003384 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003382:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003392:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	3b01      	subs	r3, #1
 80033a0:	051a      	lsls	r2, r3, #20
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6899      	ldr	r1, [r3, #8]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033c6:	025a      	lsls	r2, r3, #9
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6899      	ldr	r1, [r3, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	029a      	lsls	r2, r3, #10
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	609a      	str	r2, [r3, #8]
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	40012300 	.word	0x40012300
 8003404:	0f000001 	.word	0x0f000001

08003408 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e0ed      	b.n	80035f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d102      	bne.n	800342c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7fe fbe8 	bl	8001bfc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800343c:	f7ff fcd8 	bl	8002df0 <HAL_GetTick>
 8003440:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003442:	e012      	b.n	800346a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003444:	f7ff fcd4 	bl	8002df0 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b0a      	cmp	r3, #10
 8003450:	d90b      	bls.n	800346a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2205      	movs	r2, #5
 8003462:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e0c5      	b.n	80035f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0e5      	beq.n	8003444 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0202 	bic.w	r2, r2, #2
 8003486:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003488:	f7ff fcb2 	bl	8002df0 <HAL_GetTick>
 800348c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800348e:	e012      	b.n	80034b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003490:	f7ff fcae 	bl	8002df0 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b0a      	cmp	r3, #10
 800349c:	d90b      	bls.n	80034b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2205      	movs	r2, #5
 80034ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e09f      	b.n	80035f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1e5      	bne.n	8003490 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	7e1b      	ldrb	r3, [r3, #24]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d108      	bne.n	80034de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	e007      	b.n	80034ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	7e5b      	ldrb	r3, [r3, #25]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d108      	bne.n	8003508 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	e007      	b.n	8003518 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003516:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	7e9b      	ldrb	r3, [r3, #26]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d108      	bne.n	8003532 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0220 	orr.w	r2, r2, #32
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	e007      	b.n	8003542 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0220 	bic.w	r2, r2, #32
 8003540:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	7edb      	ldrb	r3, [r3, #27]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d108      	bne.n	800355c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0210 	bic.w	r2, r2, #16
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	e007      	b.n	800356c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0210 	orr.w	r2, r2, #16
 800356a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	7f1b      	ldrb	r3, [r3, #28]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d108      	bne.n	8003586 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0208 	orr.w	r2, r2, #8
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	e007      	b.n	8003596 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0208 	bic.w	r2, r2, #8
 8003594:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	7f5b      	ldrb	r3, [r3, #29]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d108      	bne.n	80035b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f042 0204 	orr.w	r2, r2, #4
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	e007      	b.n	80035c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0204 	bic.w	r2, r2, #4
 80035be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	431a      	orrs	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	ea42 0103 	orr.w	r1, r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	1e5a      	subs	r2, r3, #1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <__NVIC_SetPriorityGrouping+0x40>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800361c:	4013      	ands	r3, r2
 800361e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003628:	4b06      	ldr	r3, [pc, #24]	; (8003644 <__NVIC_SetPriorityGrouping+0x44>)
 800362a:	4313      	orrs	r3, r2
 800362c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800362e:	4a04      	ldr	r2, [pc, #16]	; (8003640 <__NVIC_SetPriorityGrouping+0x40>)
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	60d3      	str	r3, [r2, #12]
}
 8003634:	bf00      	nop
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	e000ed00 	.word	0xe000ed00
 8003644:	05fa0000 	.word	0x05fa0000

08003648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800364c:	4b04      	ldr	r3, [pc, #16]	; (8003660 <__NVIC_GetPriorityGrouping+0x18>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	0a1b      	lsrs	r3, r3, #8
 8003652:	f003 0307 	and.w	r3, r3, #7
}
 8003656:	4618      	mov	r0, r3
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	e000ed00 	.word	0xe000ed00

08003664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	6039      	str	r1, [r7, #0]
 800366e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003674:	2b00      	cmp	r3, #0
 8003676:	db0a      	blt.n	800368e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	b2da      	uxtb	r2, r3
 800367c:	490c      	ldr	r1, [pc, #48]	; (80036b0 <__NVIC_SetPriority+0x4c>)
 800367e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003682:	0112      	lsls	r2, r2, #4
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	440b      	add	r3, r1
 8003688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800368c:	e00a      	b.n	80036a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	b2da      	uxtb	r2, r3
 8003692:	4908      	ldr	r1, [pc, #32]	; (80036b4 <__NVIC_SetPriority+0x50>)
 8003694:	79fb      	ldrb	r3, [r7, #7]
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	3b04      	subs	r3, #4
 800369c:	0112      	lsls	r2, r2, #4
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	440b      	add	r3, r1
 80036a2:	761a      	strb	r2, [r3, #24]
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	e000e100 	.word	0xe000e100
 80036b4:	e000ed00 	.word	0xe000ed00

080036b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b089      	sub	sp, #36	; 0x24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f1c3 0307 	rsb	r3, r3, #7
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	bf28      	it	cs
 80036d6:	2304      	movcs	r3, #4
 80036d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3304      	adds	r3, #4
 80036de:	2b06      	cmp	r3, #6
 80036e0:	d902      	bls.n	80036e8 <NVIC_EncodePriority+0x30>
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	3b03      	subs	r3, #3
 80036e6:	e000      	b.n	80036ea <NVIC_EncodePriority+0x32>
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036ec:	f04f 32ff 	mov.w	r2, #4294967295
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43da      	mvns	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	401a      	ands	r2, r3
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003700:	f04f 31ff 	mov.w	r1, #4294967295
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	fa01 f303 	lsl.w	r3, r1, r3
 800370a:	43d9      	mvns	r1, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003710:	4313      	orrs	r3, r2
         );
}
 8003712:	4618      	mov	r0, r3
 8003714:	3724      	adds	r7, #36	; 0x24
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
	...

08003720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3b01      	subs	r3, #1
 800372c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003730:	d301      	bcc.n	8003736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003732:	2301      	movs	r3, #1
 8003734:	e00f      	b.n	8003756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003736:	4a0a      	ldr	r2, [pc, #40]	; (8003760 <SysTick_Config+0x40>)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3b01      	subs	r3, #1
 800373c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800373e:	210f      	movs	r1, #15
 8003740:	f04f 30ff 	mov.w	r0, #4294967295
 8003744:	f7ff ff8e 	bl	8003664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003748:	4b05      	ldr	r3, [pc, #20]	; (8003760 <SysTick_Config+0x40>)
 800374a:	2200      	movs	r2, #0
 800374c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800374e:	4b04      	ldr	r3, [pc, #16]	; (8003760 <SysTick_Config+0x40>)
 8003750:	2207      	movs	r2, #7
 8003752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	e000e010 	.word	0xe000e010

08003764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7ff ff47 	bl	8003600 <__NVIC_SetPriorityGrouping>
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800377a:	b580      	push	{r7, lr}
 800377c:	b086      	sub	sp, #24
 800377e:	af00      	add	r7, sp, #0
 8003780:	4603      	mov	r3, r0
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	607a      	str	r2, [r7, #4]
 8003786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800378c:	f7ff ff5c 	bl	8003648 <__NVIC_GetPriorityGrouping>
 8003790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	68b9      	ldr	r1, [r7, #8]
 8003796:	6978      	ldr	r0, [r7, #20]
 8003798:	f7ff ff8e 	bl	80036b8 <NVIC_EncodePriority>
 800379c:	4602      	mov	r2, r0
 800379e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037a2:	4611      	mov	r1, r2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff ff5d 	bl	8003664 <__NVIC_SetPriority>
}
 80037aa:	bf00      	nop
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b082      	sub	sp, #8
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7ff ffb0 	bl	8003720 <SysTick_Config>
 80037c0:	4603      	mov	r3, r0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b089      	sub	sp, #36	; 0x24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80037d6:	2300      	movs	r3, #0
 80037d8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80037de:	2300      	movs	r3, #0
 80037e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80037e2:	2300      	movs	r3, #0
 80037e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80037e6:	2300      	movs	r3, #0
 80037e8:	61fb      	str	r3, [r7, #28]
 80037ea:	e175      	b.n	8003ad8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80037ec:	2201      	movs	r2, #1
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4013      	ands	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	429a      	cmp	r2, r3
 8003806:	f040 8164 	bne.w	8003ad2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b01      	cmp	r3, #1
 8003814:	d005      	beq.n	8003822 <HAL_GPIO_Init+0x56>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d130      	bne.n	8003884 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	2203      	movs	r2, #3
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	43db      	mvns	r3, r3
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	4013      	ands	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	4313      	orrs	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003858:	2201      	movs	r2, #1
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4013      	ands	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	091b      	lsrs	r3, r3, #4
 800386e:	f003 0201 	and.w	r2, r3, #1
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4313      	orrs	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 0303 	and.w	r3, r3, #3
 800388c:	2b03      	cmp	r3, #3
 800388e:	d017      	beq.n	80038c0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	2203      	movs	r2, #3
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	43db      	mvns	r3, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4013      	ands	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d123      	bne.n	8003914 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	08da      	lsrs	r2, r3, #3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3208      	adds	r2, #8
 80038d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	220f      	movs	r2, #15
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	43db      	mvns	r3, r3
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	4013      	ands	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4313      	orrs	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	08da      	lsrs	r2, r3, #3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3208      	adds	r2, #8
 800390e:	69b9      	ldr	r1, [r7, #24]
 8003910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	2203      	movs	r2, #3
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	43db      	mvns	r3, r3
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4013      	ands	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 0203 	and.w	r2, r3, #3
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4313      	orrs	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 80be 	beq.w	8003ad2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003956:	4b66      	ldr	r3, [pc, #408]	; (8003af0 <HAL_GPIO_Init+0x324>)
 8003958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395a:	4a65      	ldr	r2, [pc, #404]	; (8003af0 <HAL_GPIO_Init+0x324>)
 800395c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003960:	6453      	str	r3, [r2, #68]	; 0x44
 8003962:	4b63      	ldr	r3, [pc, #396]	; (8003af0 <HAL_GPIO_Init+0x324>)
 8003964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800396e:	4a61      	ldr	r2, [pc, #388]	; (8003af4 <HAL_GPIO_Init+0x328>)
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	089b      	lsrs	r3, r3, #2
 8003974:	3302      	adds	r3, #2
 8003976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	220f      	movs	r2, #15
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	43db      	mvns	r3, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4013      	ands	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a58      	ldr	r2, [pc, #352]	; (8003af8 <HAL_GPIO_Init+0x32c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d037      	beq.n	8003a0a <HAL_GPIO_Init+0x23e>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a57      	ldr	r2, [pc, #348]	; (8003afc <HAL_GPIO_Init+0x330>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d031      	beq.n	8003a06 <HAL_GPIO_Init+0x23a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a56      	ldr	r2, [pc, #344]	; (8003b00 <HAL_GPIO_Init+0x334>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d02b      	beq.n	8003a02 <HAL_GPIO_Init+0x236>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a55      	ldr	r2, [pc, #340]	; (8003b04 <HAL_GPIO_Init+0x338>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d025      	beq.n	80039fe <HAL_GPIO_Init+0x232>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a54      	ldr	r2, [pc, #336]	; (8003b08 <HAL_GPIO_Init+0x33c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d01f      	beq.n	80039fa <HAL_GPIO_Init+0x22e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a53      	ldr	r2, [pc, #332]	; (8003b0c <HAL_GPIO_Init+0x340>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d019      	beq.n	80039f6 <HAL_GPIO_Init+0x22a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a52      	ldr	r2, [pc, #328]	; (8003b10 <HAL_GPIO_Init+0x344>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d013      	beq.n	80039f2 <HAL_GPIO_Init+0x226>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a51      	ldr	r2, [pc, #324]	; (8003b14 <HAL_GPIO_Init+0x348>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d00d      	beq.n	80039ee <HAL_GPIO_Init+0x222>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a50      	ldr	r2, [pc, #320]	; (8003b18 <HAL_GPIO_Init+0x34c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d007      	beq.n	80039ea <HAL_GPIO_Init+0x21e>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a4f      	ldr	r2, [pc, #316]	; (8003b1c <HAL_GPIO_Init+0x350>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d101      	bne.n	80039e6 <HAL_GPIO_Init+0x21a>
 80039e2:	2309      	movs	r3, #9
 80039e4:	e012      	b.n	8003a0c <HAL_GPIO_Init+0x240>
 80039e6:	230a      	movs	r3, #10
 80039e8:	e010      	b.n	8003a0c <HAL_GPIO_Init+0x240>
 80039ea:	2308      	movs	r3, #8
 80039ec:	e00e      	b.n	8003a0c <HAL_GPIO_Init+0x240>
 80039ee:	2307      	movs	r3, #7
 80039f0:	e00c      	b.n	8003a0c <HAL_GPIO_Init+0x240>
 80039f2:	2306      	movs	r3, #6
 80039f4:	e00a      	b.n	8003a0c <HAL_GPIO_Init+0x240>
 80039f6:	2305      	movs	r3, #5
 80039f8:	e008      	b.n	8003a0c <HAL_GPIO_Init+0x240>
 80039fa:	2304      	movs	r3, #4
 80039fc:	e006      	b.n	8003a0c <HAL_GPIO_Init+0x240>
 80039fe:	2303      	movs	r3, #3
 8003a00:	e004      	b.n	8003a0c <HAL_GPIO_Init+0x240>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e002      	b.n	8003a0c <HAL_GPIO_Init+0x240>
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <HAL_GPIO_Init+0x240>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	69fa      	ldr	r2, [r7, #28]
 8003a0e:	f002 0203 	and.w	r2, r2, #3
 8003a12:	0092      	lsls	r2, r2, #2
 8003a14:	4093      	lsls	r3, r2
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003a1c:	4935      	ldr	r1, [pc, #212]	; (8003af4 <HAL_GPIO_Init+0x328>)
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	089b      	lsrs	r3, r3, #2
 8003a22:	3302      	adds	r3, #2
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a2a:	4b3d      	ldr	r3, [pc, #244]	; (8003b20 <HAL_GPIO_Init+0x354>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	43db      	mvns	r3, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4013      	ands	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a4e:	4a34      	ldr	r2, [pc, #208]	; (8003b20 <HAL_GPIO_Init+0x354>)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a54:	4b32      	ldr	r3, [pc, #200]	; (8003b20 <HAL_GPIO_Init+0x354>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4013      	ands	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a78:	4a29      	ldr	r2, [pc, #164]	; (8003b20 <HAL_GPIO_Init+0x354>)
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a7e:	4b28      	ldr	r3, [pc, #160]	; (8003b20 <HAL_GPIO_Init+0x354>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	43db      	mvns	r3, r3
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003aa2:	4a1f      	ldr	r2, [pc, #124]	; (8003b20 <HAL_GPIO_Init+0x354>)
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003aa8:	4b1d      	ldr	r3, [pc, #116]	; (8003b20 <HAL_GPIO_Init+0x354>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003acc:	4a14      	ldr	r2, [pc, #80]	; (8003b20 <HAL_GPIO_Init+0x354>)
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	61fb      	str	r3, [r7, #28]
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	2b0f      	cmp	r3, #15
 8003adc:	f67f ae86 	bls.w	80037ec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003ae0:	bf00      	nop
 8003ae2:	bf00      	nop
 8003ae4:	3724      	adds	r7, #36	; 0x24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	40023800 	.word	0x40023800
 8003af4:	40013800 	.word	0x40013800
 8003af8:	40020000 	.word	0x40020000
 8003afc:	40020400 	.word	0x40020400
 8003b00:	40020800 	.word	0x40020800
 8003b04:	40020c00 	.word	0x40020c00
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	40021400 	.word	0x40021400
 8003b10:	40021800 	.word	0x40021800
 8003b14:	40021c00 	.word	0x40021c00
 8003b18:	40022000 	.word	0x40022000
 8003b1c:	40022400 	.word	0x40022400
 8003b20:	40013c00 	.word	0x40013c00

08003b24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	887b      	ldrh	r3, [r7, #2]
 8003b36:	4013      	ands	r3, r2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	73fb      	strb	r3, [r7, #15]
 8003b40:	e001      	b.n	8003b46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b42:	2300      	movs	r3, #0
 8003b44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3714      	adds	r7, #20
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	807b      	strh	r3, [r7, #2]
 8003b60:	4613      	mov	r3, r2
 8003b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b64:	787b      	ldrb	r3, [r7, #1]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b6a:	887a      	ldrh	r2, [r7, #2]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003b70:	e003      	b.n	8003b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003b72:	887b      	ldrh	r3, [r7, #2]
 8003b74:	041a      	lsls	r2, r3, #16
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	619a      	str	r2, [r3, #24]
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
	...

08003b88 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b92:	4b23      	ldr	r3, [pc, #140]	; (8003c20 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	4a22      	ldr	r2, [pc, #136]	; (8003c20 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b9e:	4b20      	ldr	r3, [pc, #128]	; (8003c20 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba6:	603b      	str	r3, [r7, #0]
 8003ba8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003baa:	4b1e      	ldr	r3, [pc, #120]	; (8003c24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a1d      	ldr	r2, [pc, #116]	; (8003c24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bb6:	f7ff f91b 	bl	8002df0 <HAL_GetTick>
 8003bba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bbc:	e009      	b.n	8003bd2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bbe:	f7ff f917 	bl	8002df0 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bcc:	d901      	bls.n	8003bd2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e022      	b.n	8003c18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bd2:	4b14      	ldr	r3, [pc, #80]	; (8003c24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bde:	d1ee      	bne.n	8003bbe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003be0:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a0f      	ldr	r2, [pc, #60]	; (8003c24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bec:	f7ff f900 	bl	8002df0 <HAL_GetTick>
 8003bf0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003bf2:	e009      	b.n	8003c08 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bf4:	f7ff f8fc 	bl	8002df0 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c02:	d901      	bls.n	8003c08 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e007      	b.n	8003c18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c08:	4b06      	ldr	r3, [pc, #24]	; (8003c24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c14:	d1ee      	bne.n	8003bf4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40023800 	.word	0x40023800
 8003c24:	40007000 	.word	0x40007000

08003c28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c30:	2300      	movs	r3, #0
 8003c32:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e29b      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 8087 	beq.w	8003d5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c4c:	4b96      	ldr	r3, [pc, #600]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 030c 	and.w	r3, r3, #12
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d00c      	beq.n	8003c72 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c58:	4b93      	ldr	r3, [pc, #588]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 030c 	and.w	r3, r3, #12
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	d112      	bne.n	8003c8a <HAL_RCC_OscConfig+0x62>
 8003c64:	4b90      	ldr	r3, [pc, #576]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c70:	d10b      	bne.n	8003c8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c72:	4b8d      	ldr	r3, [pc, #564]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d06c      	beq.n	8003d58 <HAL_RCC_OscConfig+0x130>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d168      	bne.n	8003d58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e275      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c92:	d106      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x7a>
 8003c94:	4b84      	ldr	r3, [pc, #528]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a83      	ldr	r2, [pc, #524]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c9e:	6013      	str	r3, [r2, #0]
 8003ca0:	e02e      	b.n	8003d00 <HAL_RCC_OscConfig+0xd8>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10c      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x9c>
 8003caa:	4b7f      	ldr	r3, [pc, #508]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a7e      	ldr	r2, [pc, #504]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	4b7c      	ldr	r3, [pc, #496]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a7b      	ldr	r2, [pc, #492]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003cbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	e01d      	b.n	8003d00 <HAL_RCC_OscConfig+0xd8>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ccc:	d10c      	bne.n	8003ce8 <HAL_RCC_OscConfig+0xc0>
 8003cce:	4b76      	ldr	r3, [pc, #472]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a75      	ldr	r2, [pc, #468]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	4b73      	ldr	r3, [pc, #460]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a72      	ldr	r2, [pc, #456]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	e00b      	b.n	8003d00 <HAL_RCC_OscConfig+0xd8>
 8003ce8:	4b6f      	ldr	r3, [pc, #444]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a6e      	ldr	r2, [pc, #440]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	4b6c      	ldr	r3, [pc, #432]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a6b      	ldr	r2, [pc, #428]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d013      	beq.n	8003d30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d08:	f7ff f872 	bl	8002df0 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d10:	f7ff f86e 	bl	8002df0 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b64      	cmp	r3, #100	; 0x64
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e229      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d22:	4b61      	ldr	r3, [pc, #388]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f0      	beq.n	8003d10 <HAL_RCC_OscConfig+0xe8>
 8003d2e:	e014      	b.n	8003d5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d30:	f7ff f85e 	bl	8002df0 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d38:	f7ff f85a 	bl	8002df0 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b64      	cmp	r3, #100	; 0x64
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e215      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d4a:	4b57      	ldr	r3, [pc, #348]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x110>
 8003d56:	e000      	b.n	8003d5a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d069      	beq.n	8003e3a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d66:	4b50      	ldr	r3, [pc, #320]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00b      	beq.n	8003d8a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d72:	4b4d      	ldr	r3, [pc, #308]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 030c 	and.w	r3, r3, #12
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d11c      	bne.n	8003db8 <HAL_RCC_OscConfig+0x190>
 8003d7e:	4b4a      	ldr	r3, [pc, #296]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d116      	bne.n	8003db8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d8a:	4b47      	ldr	r3, [pc, #284]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d005      	beq.n	8003da2 <HAL_RCC_OscConfig+0x17a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d001      	beq.n	8003da2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e1e9      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da2:	4b41      	ldr	r3, [pc, #260]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	493d      	ldr	r1, [pc, #244]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003db6:	e040      	b.n	8003e3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d023      	beq.n	8003e08 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dc0:	4b39      	ldr	r3, [pc, #228]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a38      	ldr	r2, [pc, #224]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dcc:	f7ff f810 	bl	8002df0 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dd4:	f7ff f80c 	bl	8002df0 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e1c7      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de6:	4b30      	ldr	r3, [pc, #192]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0f0      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df2:	4b2d      	ldr	r3, [pc, #180]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4929      	ldr	r1, [pc, #164]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	600b      	str	r3, [r1, #0]
 8003e06:	e018      	b.n	8003e3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e08:	4b27      	ldr	r3, [pc, #156]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a26      	ldr	r2, [pc, #152]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003e0e:	f023 0301 	bic.w	r3, r3, #1
 8003e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e14:	f7fe ffec 	bl	8002df0 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e1c:	f7fe ffe8 	bl	8002df0 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e1a3      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e2e:	4b1e      	ldr	r3, [pc, #120]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1f0      	bne.n	8003e1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d038      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d019      	beq.n	8003e82 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e4e:	4b16      	ldr	r3, [pc, #88]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e52:	4a15      	ldr	r2, [pc, #84]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5a:	f7fe ffc9 	bl	8002df0 <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e62:	f7fe ffc5 	bl	8002df0 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e180      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e74:	4b0c      	ldr	r3, [pc, #48]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0f0      	beq.n	8003e62 <HAL_RCC_OscConfig+0x23a>
 8003e80:	e01a      	b.n	8003eb8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e82:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e86:	4a08      	ldr	r2, [pc, #32]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003e88:	f023 0301 	bic.w	r3, r3, #1
 8003e8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8e:	f7fe ffaf 	bl	8002df0 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e94:	e00a      	b.n	8003eac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e96:	f7fe ffab 	bl	8002df0 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d903      	bls.n	8003eac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e166      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
 8003ea8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eac:	4b92      	ldr	r3, [pc, #584]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1ee      	bne.n	8003e96 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 80a4 	beq.w	800400e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ec6:	4b8c      	ldr	r3, [pc, #560]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10d      	bne.n	8003eee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ed2:	4b89      	ldr	r3, [pc, #548]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	4a88      	ldr	r2, [pc, #544]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003edc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ede:	4b86      	ldr	r3, [pc, #536]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	60bb      	str	r3, [r7, #8]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eea:	2301      	movs	r3, #1
 8003eec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eee:	4b83      	ldr	r3, [pc, #524]	; (80040fc <HAL_RCC_OscConfig+0x4d4>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d118      	bne.n	8003f2c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003efa:	4b80      	ldr	r3, [pc, #512]	; (80040fc <HAL_RCC_OscConfig+0x4d4>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a7f      	ldr	r2, [pc, #508]	; (80040fc <HAL_RCC_OscConfig+0x4d4>)
 8003f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f06:	f7fe ff73 	bl	8002df0 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f0e:	f7fe ff6f 	bl	8002df0 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b64      	cmp	r3, #100	; 0x64
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e12a      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f20:	4b76      	ldr	r3, [pc, #472]	; (80040fc <HAL_RCC_OscConfig+0x4d4>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0f0      	beq.n	8003f0e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d106      	bne.n	8003f42 <HAL_RCC_OscConfig+0x31a>
 8003f34:	4b70      	ldr	r3, [pc, #448]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f38:	4a6f      	ldr	r2, [pc, #444]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f40:	e02d      	b.n	8003f9e <HAL_RCC_OscConfig+0x376>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10c      	bne.n	8003f64 <HAL_RCC_OscConfig+0x33c>
 8003f4a:	4b6b      	ldr	r3, [pc, #428]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4e:	4a6a      	ldr	r2, [pc, #424]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003f50:	f023 0301 	bic.w	r3, r3, #1
 8003f54:	6713      	str	r3, [r2, #112]	; 0x70
 8003f56:	4b68      	ldr	r3, [pc, #416]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5a:	4a67      	ldr	r2, [pc, #412]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003f5c:	f023 0304 	bic.w	r3, r3, #4
 8003f60:	6713      	str	r3, [r2, #112]	; 0x70
 8003f62:	e01c      	b.n	8003f9e <HAL_RCC_OscConfig+0x376>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	2b05      	cmp	r3, #5
 8003f6a:	d10c      	bne.n	8003f86 <HAL_RCC_OscConfig+0x35e>
 8003f6c:	4b62      	ldr	r3, [pc, #392]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f70:	4a61      	ldr	r2, [pc, #388]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003f72:	f043 0304 	orr.w	r3, r3, #4
 8003f76:	6713      	str	r3, [r2, #112]	; 0x70
 8003f78:	4b5f      	ldr	r3, [pc, #380]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7c:	4a5e      	ldr	r2, [pc, #376]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	6713      	str	r3, [r2, #112]	; 0x70
 8003f84:	e00b      	b.n	8003f9e <HAL_RCC_OscConfig+0x376>
 8003f86:	4b5c      	ldr	r3, [pc, #368]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8a:	4a5b      	ldr	r2, [pc, #364]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003f8c:	f023 0301 	bic.w	r3, r3, #1
 8003f90:	6713      	str	r3, [r2, #112]	; 0x70
 8003f92:	4b59      	ldr	r3, [pc, #356]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f96:	4a58      	ldr	r2, [pc, #352]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003f98:	f023 0304 	bic.w	r3, r3, #4
 8003f9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d015      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa6:	f7fe ff23 	bl	8002df0 <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fac:	e00a      	b.n	8003fc4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fae:	f7fe ff1f 	bl	8002df0 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e0d8      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc4:	4b4c      	ldr	r3, [pc, #304]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0ee      	beq.n	8003fae <HAL_RCC_OscConfig+0x386>
 8003fd0:	e014      	b.n	8003ffc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd2:	f7fe ff0d 	bl	8002df0 <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd8:	e00a      	b.n	8003ff0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fda:	f7fe ff09 	bl	8002df0 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e0c2      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff0:	4b41      	ldr	r3, [pc, #260]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1ee      	bne.n	8003fda <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ffc:	7dfb      	ldrb	r3, [r7, #23]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d105      	bne.n	800400e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004002:	4b3d      	ldr	r3, [pc, #244]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	4a3c      	ldr	r2, [pc, #240]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8004008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800400c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 80ae 	beq.w	8004174 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004018:	4b37      	ldr	r3, [pc, #220]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f003 030c 	and.w	r3, r3, #12
 8004020:	2b08      	cmp	r3, #8
 8004022:	d06d      	beq.n	8004100 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	2b02      	cmp	r3, #2
 800402a:	d14b      	bne.n	80040c4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402c:	4b32      	ldr	r3, [pc, #200]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a31      	ldr	r2, [pc, #196]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8004032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004036:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004038:	f7fe feda 	bl	8002df0 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004040:	f7fe fed6 	bl	8002df0 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e091      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004052:	4b29      	ldr	r3, [pc, #164]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1f0      	bne.n	8004040 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69da      	ldr	r2, [r3, #28]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	019b      	lsls	r3, r3, #6
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004074:	085b      	lsrs	r3, r3, #1
 8004076:	3b01      	subs	r3, #1
 8004078:	041b      	lsls	r3, r3, #16
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	061b      	lsls	r3, r3, #24
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	071b      	lsls	r3, r3, #28
 800408a:	491b      	ldr	r1, [pc, #108]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 800408c:	4313      	orrs	r3, r2
 800408e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004090:	4b19      	ldr	r3, [pc, #100]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a18      	ldr	r2, [pc, #96]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8004096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800409a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409c:	f7fe fea8 	bl	8002df0 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a4:	f7fe fea4 	bl	8002df0 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e05f      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b6:	4b10      	ldr	r3, [pc, #64]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCC_OscConfig+0x47c>
 80040c2:	e057      	b.n	8004174 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c4:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a0b      	ldr	r2, [pc, #44]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 80040ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d0:	f7fe fe8e 	bl	8002df0 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d8:	f7fe fe8a 	bl	8002df0 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e045      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ea:	4b03      	ldr	r3, [pc, #12]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f0      	bne.n	80040d8 <HAL_RCC_OscConfig+0x4b0>
 80040f6:	e03d      	b.n	8004174 <HAL_RCC_OscConfig+0x54c>
 80040f8:	40023800 	.word	0x40023800
 80040fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004100:	4b1f      	ldr	r3, [pc, #124]	; (8004180 <HAL_RCC_OscConfig+0x558>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d030      	beq.n	8004170 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004118:	429a      	cmp	r2, r3
 800411a:	d129      	bne.n	8004170 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004126:	429a      	cmp	r2, r3
 8004128:	d122      	bne.n	8004170 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004130:	4013      	ands	r3, r2
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004136:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004138:	4293      	cmp	r3, r2
 800413a:	d119      	bne.n	8004170 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004146:	085b      	lsrs	r3, r3, #1
 8004148:	3b01      	subs	r3, #1
 800414a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800414c:	429a      	cmp	r2, r3
 800414e:	d10f      	bne.n	8004170 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800415c:	429a      	cmp	r2, r3
 800415e:	d107      	bne.n	8004170 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800416c:	429a      	cmp	r2, r3
 800416e:	d001      	beq.n	8004174 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e000      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40023800 	.word	0x40023800

08004184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e0d0      	b.n	800433e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800419c:	4b6a      	ldr	r3, [pc, #424]	; (8004348 <HAL_RCC_ClockConfig+0x1c4>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d910      	bls.n	80041cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041aa:	4b67      	ldr	r3, [pc, #412]	; (8004348 <HAL_RCC_ClockConfig+0x1c4>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f023 020f 	bic.w	r2, r3, #15
 80041b2:	4965      	ldr	r1, [pc, #404]	; (8004348 <HAL_RCC_ClockConfig+0x1c4>)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ba:	4b63      	ldr	r3, [pc, #396]	; (8004348 <HAL_RCC_ClockConfig+0x1c4>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d001      	beq.n	80041cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e0b8      	b.n	800433e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d020      	beq.n	800421a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d005      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041e4:	4b59      	ldr	r3, [pc, #356]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	4a58      	ldr	r2, [pc, #352]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 80041ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0308 	and.w	r3, r3, #8
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d005      	beq.n	8004208 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041fc:	4b53      	ldr	r3, [pc, #332]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	4a52      	ldr	r2, [pc, #328]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 8004202:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004206:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004208:	4b50      	ldr	r3, [pc, #320]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	494d      	ldr	r1, [pc, #308]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 8004216:	4313      	orrs	r3, r2
 8004218:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d040      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d107      	bne.n	800423e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422e:	4b47      	ldr	r3, [pc, #284]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d115      	bne.n	8004266 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e07f      	b.n	800433e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2b02      	cmp	r3, #2
 8004244:	d107      	bne.n	8004256 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004246:	4b41      	ldr	r3, [pc, #260]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d109      	bne.n	8004266 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e073      	b.n	800433e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004256:	4b3d      	ldr	r3, [pc, #244]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e06b      	b.n	800433e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004266:	4b39      	ldr	r3, [pc, #228]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f023 0203 	bic.w	r2, r3, #3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	4936      	ldr	r1, [pc, #216]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 8004274:	4313      	orrs	r3, r2
 8004276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004278:	f7fe fdba 	bl	8002df0 <HAL_GetTick>
 800427c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800427e:	e00a      	b.n	8004296 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004280:	f7fe fdb6 	bl	8002df0 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	f241 3288 	movw	r2, #5000	; 0x1388
 800428e:	4293      	cmp	r3, r2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e053      	b.n	800433e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004296:	4b2d      	ldr	r3, [pc, #180]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 020c 	and.w	r2, r3, #12
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d1eb      	bne.n	8004280 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042a8:	4b27      	ldr	r3, [pc, #156]	; (8004348 <HAL_RCC_ClockConfig+0x1c4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 030f 	and.w	r3, r3, #15
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d210      	bcs.n	80042d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b6:	4b24      	ldr	r3, [pc, #144]	; (8004348 <HAL_RCC_ClockConfig+0x1c4>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f023 020f 	bic.w	r2, r3, #15
 80042be:	4922      	ldr	r1, [pc, #136]	; (8004348 <HAL_RCC_ClockConfig+0x1c4>)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c6:	4b20      	ldr	r3, [pc, #128]	; (8004348 <HAL_RCC_ClockConfig+0x1c4>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d001      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e032      	b.n	800433e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d008      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042e4:	4b19      	ldr	r3, [pc, #100]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	4916      	ldr	r1, [pc, #88]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d009      	beq.n	8004316 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004302:	4b12      	ldr	r3, [pc, #72]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	490e      	ldr	r1, [pc, #56]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 8004312:	4313      	orrs	r3, r2
 8004314:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004316:	f000 f821 	bl	800435c <HAL_RCC_GetSysClockFreq>
 800431a:	4602      	mov	r2, r0
 800431c:	4b0b      	ldr	r3, [pc, #44]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	091b      	lsrs	r3, r3, #4
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	490a      	ldr	r1, [pc, #40]	; (8004350 <HAL_RCC_ClockConfig+0x1cc>)
 8004328:	5ccb      	ldrb	r3, [r1, r3]
 800432a:	fa22 f303 	lsr.w	r3, r2, r3
 800432e:	4a09      	ldr	r2, [pc, #36]	; (8004354 <HAL_RCC_ClockConfig+0x1d0>)
 8004330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004332:	4b09      	ldr	r3, [pc, #36]	; (8004358 <HAL_RCC_ClockConfig+0x1d4>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f7fe fd16 	bl	8002d68 <HAL_InitTick>

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	40023c00 	.word	0x40023c00
 800434c:	40023800 	.word	0x40023800
 8004350:	08007e28 	.word	0x08007e28
 8004354:	20000000 	.word	0x20000000
 8004358:	20000004 	.word	0x20000004

0800435c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800435c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004360:	b090      	sub	sp, #64	; 0x40
 8004362:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004364:	2300      	movs	r3, #0
 8004366:	637b      	str	r3, [r7, #52]	; 0x34
 8004368:	2300      	movs	r3, #0
 800436a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800436c:	2300      	movs	r3, #0
 800436e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004370:	2300      	movs	r3, #0
 8004372:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004374:	4b59      	ldr	r3, [pc, #356]	; (80044dc <HAL_RCC_GetSysClockFreq+0x180>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 030c 	and.w	r3, r3, #12
 800437c:	2b08      	cmp	r3, #8
 800437e:	d00d      	beq.n	800439c <HAL_RCC_GetSysClockFreq+0x40>
 8004380:	2b08      	cmp	r3, #8
 8004382:	f200 80a1 	bhi.w	80044c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <HAL_RCC_GetSysClockFreq+0x34>
 800438a:	2b04      	cmp	r3, #4
 800438c:	d003      	beq.n	8004396 <HAL_RCC_GetSysClockFreq+0x3a>
 800438e:	e09b      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004390:	4b53      	ldr	r3, [pc, #332]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004392:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004394:	e09b      	b.n	80044ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004396:	4b53      	ldr	r3, [pc, #332]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004398:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800439a:	e098      	b.n	80044ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800439c:	4b4f      	ldr	r3, [pc, #316]	; (80044dc <HAL_RCC_GetSysClockFreq+0x180>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043a4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80043a6:	4b4d      	ldr	r3, [pc, #308]	; (80044dc <HAL_RCC_GetSysClockFreq+0x180>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d028      	beq.n	8004404 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b2:	4b4a      	ldr	r3, [pc, #296]	; (80044dc <HAL_RCC_GetSysClockFreq+0x180>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	099b      	lsrs	r3, r3, #6
 80043b8:	2200      	movs	r2, #0
 80043ba:	623b      	str	r3, [r7, #32]
 80043bc:	627a      	str	r2, [r7, #36]	; 0x24
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80043c4:	2100      	movs	r1, #0
 80043c6:	4b47      	ldr	r3, [pc, #284]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80043c8:	fb03 f201 	mul.w	r2, r3, r1
 80043cc:	2300      	movs	r3, #0
 80043ce:	fb00 f303 	mul.w	r3, r0, r3
 80043d2:	4413      	add	r3, r2
 80043d4:	4a43      	ldr	r2, [pc, #268]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80043d6:	fba0 1202 	umull	r1, r2, r0, r2
 80043da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043dc:	460a      	mov	r2, r1
 80043de:	62ba      	str	r2, [r7, #40]	; 0x28
 80043e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043e2:	4413      	add	r3, r2
 80043e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e8:	2200      	movs	r2, #0
 80043ea:	61bb      	str	r3, [r7, #24]
 80043ec:	61fa      	str	r2, [r7, #28]
 80043ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80043f6:	f7fb ff27 	bl	8000248 <__aeabi_uldivmod>
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	4613      	mov	r3, r2
 8004400:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004402:	e053      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004404:	4b35      	ldr	r3, [pc, #212]	; (80044dc <HAL_RCC_GetSysClockFreq+0x180>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	099b      	lsrs	r3, r3, #6
 800440a:	2200      	movs	r2, #0
 800440c:	613b      	str	r3, [r7, #16]
 800440e:	617a      	str	r2, [r7, #20]
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004416:	f04f 0b00 	mov.w	fp, #0
 800441a:	4652      	mov	r2, sl
 800441c:	465b      	mov	r3, fp
 800441e:	f04f 0000 	mov.w	r0, #0
 8004422:	f04f 0100 	mov.w	r1, #0
 8004426:	0159      	lsls	r1, r3, #5
 8004428:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800442c:	0150      	lsls	r0, r2, #5
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	ebb2 080a 	subs.w	r8, r2, sl
 8004436:	eb63 090b 	sbc.w	r9, r3, fp
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	f04f 0300 	mov.w	r3, #0
 8004442:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004446:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800444a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800444e:	ebb2 0408 	subs.w	r4, r2, r8
 8004452:	eb63 0509 	sbc.w	r5, r3, r9
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	f04f 0300 	mov.w	r3, #0
 800445e:	00eb      	lsls	r3, r5, #3
 8004460:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004464:	00e2      	lsls	r2, r4, #3
 8004466:	4614      	mov	r4, r2
 8004468:	461d      	mov	r5, r3
 800446a:	eb14 030a 	adds.w	r3, r4, sl
 800446e:	603b      	str	r3, [r7, #0]
 8004470:	eb45 030b 	adc.w	r3, r5, fp
 8004474:	607b      	str	r3, [r7, #4]
 8004476:	f04f 0200 	mov.w	r2, #0
 800447a:	f04f 0300 	mov.w	r3, #0
 800447e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004482:	4629      	mov	r1, r5
 8004484:	028b      	lsls	r3, r1, #10
 8004486:	4621      	mov	r1, r4
 8004488:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800448c:	4621      	mov	r1, r4
 800448e:	028a      	lsls	r2, r1, #10
 8004490:	4610      	mov	r0, r2
 8004492:	4619      	mov	r1, r3
 8004494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004496:	2200      	movs	r2, #0
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	60fa      	str	r2, [r7, #12]
 800449c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044a0:	f7fb fed2 	bl	8000248 <__aeabi_uldivmod>
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	4613      	mov	r3, r2
 80044aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80044ac:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <HAL_RCC_GetSysClockFreq+0x180>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	0c1b      	lsrs	r3, r3, #16
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	3301      	adds	r3, #1
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80044bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80044c6:	e002      	b.n	80044ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044c8:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80044ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80044cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3740      	adds	r7, #64	; 0x40
 80044d4:	46bd      	mov	sp, r7
 80044d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044da:	bf00      	nop
 80044dc:	40023800 	.word	0x40023800
 80044e0:	00f42400 	.word	0x00f42400
 80044e4:	017d7840 	.word	0x017d7840

080044e8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044ec:	4b03      	ldr	r3, [pc, #12]	; (80044fc <HAL_RCC_GetHCLKFreq+0x14>)
 80044ee:	681b      	ldr	r3, [r3, #0]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	20000000 	.word	0x20000000

08004500 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004504:	f7ff fff0 	bl	80044e8 <HAL_RCC_GetHCLKFreq>
 8004508:	4602      	mov	r2, r0
 800450a:	4b05      	ldr	r3, [pc, #20]	; (8004520 <HAL_RCC_GetPCLK1Freq+0x20>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	0a9b      	lsrs	r3, r3, #10
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	4903      	ldr	r1, [pc, #12]	; (8004524 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004516:	5ccb      	ldrb	r3, [r1, r3]
 8004518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800451c:	4618      	mov	r0, r3
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40023800 	.word	0x40023800
 8004524:	08007e38 	.word	0x08007e38

08004528 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800452c:	f7ff ffdc 	bl	80044e8 <HAL_RCC_GetHCLKFreq>
 8004530:	4602      	mov	r2, r0
 8004532:	4b05      	ldr	r3, [pc, #20]	; (8004548 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	0b5b      	lsrs	r3, r3, #13
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	4903      	ldr	r1, [pc, #12]	; (800454c <HAL_RCC_GetPCLK2Freq+0x24>)
 800453e:	5ccb      	ldrb	r3, [r1, r3]
 8004540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004544:	4618      	mov	r0, r3
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40023800 	.word	0x40023800
 800454c:	08007e38 	.word	0x08007e38

08004550 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004558:	2300      	movs	r3, #0
 800455a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800455c:	2300      	movs	r3, #0
 800455e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004564:	2300      	movs	r3, #0
 8004566:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004568:	2300      	movs	r3, #0
 800456a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b00      	cmp	r3, #0
 8004576:	d012      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004578:	4b69      	ldr	r3, [pc, #420]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	4a68      	ldr	r2, [pc, #416]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004582:	6093      	str	r3, [r2, #8]
 8004584:	4b66      	ldr	r3, [pc, #408]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458c:	4964      	ldr	r1, [pc, #400]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458e:	4313      	orrs	r3, r2
 8004590:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800459a:	2301      	movs	r3, #1
 800459c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d017      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045aa:	4b5d      	ldr	r3, [pc, #372]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b8:	4959      	ldr	r1, [pc, #356]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045c8:	d101      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80045ca:	2301      	movs	r3, #1
 80045cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80045d6:	2301      	movs	r3, #1
 80045d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d017      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045e6:	4b4e      	ldr	r3, [pc, #312]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	494a      	ldr	r1, [pc, #296]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004600:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004604:	d101      	bne.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004606:	2301      	movs	r3, #1
 8004608:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004612:	2301      	movs	r3, #1
 8004614:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004622:	2301      	movs	r3, #1
 8004624:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 808b 	beq.w	800474a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004634:	4b3a      	ldr	r3, [pc, #232]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	4a39      	ldr	r2, [pc, #228]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463e:	6413      	str	r3, [r2, #64]	; 0x40
 8004640:	4b37      	ldr	r3, [pc, #220]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004648:	60bb      	str	r3, [r7, #8]
 800464a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800464c:	4b35      	ldr	r3, [pc, #212]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a34      	ldr	r2, [pc, #208]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004656:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004658:	f7fe fbca 	bl	8002df0 <HAL_GetTick>
 800465c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800465e:	e008      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004660:	f7fe fbc6 	bl	8002df0 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b64      	cmp	r3, #100	; 0x64
 800466c:	d901      	bls.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e38f      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004672:	4b2c      	ldr	r3, [pc, #176]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0f0      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800467e:	4b28      	ldr	r3, [pc, #160]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004686:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d035      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	429a      	cmp	r2, r3
 800469a:	d02e      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800469c:	4b20      	ldr	r3, [pc, #128]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800469e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046a6:	4b1e      	ldr	r3, [pc, #120]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046aa:	4a1d      	ldr	r2, [pc, #116]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046b2:	4b1b      	ldr	r3, [pc, #108]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b6:	4a1a      	ldr	r2, [pc, #104]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80046be:	4a18      	ldr	r2, [pc, #96]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046c4:	4b16      	ldr	r3, [pc, #88]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d114      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d0:	f7fe fb8e 	bl	8002df0 <HAL_GetTick>
 80046d4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d6:	e00a      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046d8:	f7fe fb8a 	bl	8002df0 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d901      	bls.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e351      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ee:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0ee      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004702:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004706:	d111      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004708:	4b05      	ldr	r3, [pc, #20]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004714:	4b04      	ldr	r3, [pc, #16]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004716:	400b      	ands	r3, r1
 8004718:	4901      	ldr	r1, [pc, #4]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800471a:	4313      	orrs	r3, r2
 800471c:	608b      	str	r3, [r1, #8]
 800471e:	e00b      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004720:	40023800 	.word	0x40023800
 8004724:	40007000 	.word	0x40007000
 8004728:	0ffffcff 	.word	0x0ffffcff
 800472c:	4bac      	ldr	r3, [pc, #688]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	4aab      	ldr	r2, [pc, #684]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004732:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004736:	6093      	str	r3, [r2, #8]
 8004738:	4ba9      	ldr	r3, [pc, #676]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800473a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004744:	49a6      	ldr	r1, [pc, #664]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004746:	4313      	orrs	r3, r2
 8004748:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0310 	and.w	r3, r3, #16
 8004752:	2b00      	cmp	r3, #0
 8004754:	d010      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004756:	4ba2      	ldr	r3, [pc, #648]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800475c:	4aa0      	ldr	r2, [pc, #640]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800475e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004762:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004766:	4b9e      	ldr	r3, [pc, #632]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004768:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004770:	499b      	ldr	r1, [pc, #620]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004772:	4313      	orrs	r3, r2
 8004774:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004784:	4b96      	ldr	r3, [pc, #600]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004792:	4993      	ldr	r1, [pc, #588]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004794:	4313      	orrs	r3, r2
 8004796:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047a6:	4b8e      	ldr	r3, [pc, #568]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047b4:	498a      	ldr	r1, [pc, #552]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047c8:	4b85      	ldr	r3, [pc, #532]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047d6:	4982      	ldr	r1, [pc, #520]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047ea:	4b7d      	ldr	r3, [pc, #500]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f8:	4979      	ldr	r1, [pc, #484]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00a      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800480c:	4b74      	ldr	r3, [pc, #464]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800480e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004812:	f023 0203 	bic.w	r2, r3, #3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481a:	4971      	ldr	r1, [pc, #452]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800482e:	4b6c      	ldr	r3, [pc, #432]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004834:	f023 020c 	bic.w	r2, r3, #12
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800483c:	4968      	ldr	r1, [pc, #416]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00a      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004850:	4b63      	ldr	r3, [pc, #396]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004856:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800485e:	4960      	ldr	r1, [pc, #384]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004872:	4b5b      	ldr	r3, [pc, #364]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004878:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004880:	4957      	ldr	r1, [pc, #348]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004882:	4313      	orrs	r3, r2
 8004884:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00a      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004894:	4b52      	ldr	r3, [pc, #328]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a2:	494f      	ldr	r1, [pc, #316]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80048b6:	4b4a      	ldr	r3, [pc, #296]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c4:	4946      	ldr	r1, [pc, #280]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00a      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80048d8:	4b41      	ldr	r3, [pc, #260]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e6:	493e      	ldr	r1, [pc, #248]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80048fa:	4b39      	ldr	r3, [pc, #228]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004900:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004908:	4935      	ldr	r1, [pc, #212]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800491c:	4b30      	ldr	r3, [pc, #192]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800491e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004922:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800492a:	492d      	ldr	r1, [pc, #180]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800492c:	4313      	orrs	r3, r2
 800492e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d011      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800493e:	4b28      	ldr	r3, [pc, #160]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004944:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800494c:	4924      	ldr	r1, [pc, #144]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800494e:	4313      	orrs	r3, r2
 8004950:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004958:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800495c:	d101      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800495e:	2301      	movs	r3, #1
 8004960:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0308 	and.w	r3, r3, #8
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800496e:	2301      	movs	r3, #1
 8004970:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800497e:	4b18      	ldr	r3, [pc, #96]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004984:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800498c:	4914      	ldr	r1, [pc, #80]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00b      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049a0:	4b0f      	ldr	r3, [pc, #60]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049b0:	490b      	ldr	r1, [pc, #44]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00f      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80049c4:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ca:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049d4:	4902      	ldr	r1, [pc, #8]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80049dc:	e002      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80049de:	bf00      	nop
 80049e0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00b      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049f0:	4b8a      	ldr	r3, [pc, #552]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a00:	4986      	ldr	r1, [pc, #536]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00b      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004a14:	4b81      	ldr	r3, [pc, #516]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a1a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a24:	497d      	ldr	r1, [pc, #500]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d006      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 80d6 	beq.w	8004bec <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a40:	4b76      	ldr	r3, [pc, #472]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a75      	ldr	r2, [pc, #468]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a4c:	f7fe f9d0 	bl	8002df0 <HAL_GetTick>
 8004a50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a52:	e008      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a54:	f7fe f9cc 	bl	8002df0 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b64      	cmp	r3, #100	; 0x64
 8004a60:	d901      	bls.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e195      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a66:	4b6d      	ldr	r3, [pc, #436]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f0      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d021      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d11d      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a86:	4b65      	ldr	r3, [pc, #404]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a8c:	0c1b      	lsrs	r3, r3, #16
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a94:	4b61      	ldr	r3, [pc, #388]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a9a:	0e1b      	lsrs	r3, r3, #24
 8004a9c:	f003 030f 	and.w	r3, r3, #15
 8004aa0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	019a      	lsls	r2, r3, #6
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	041b      	lsls	r3, r3, #16
 8004aac:	431a      	orrs	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	061b      	lsls	r3, r3, #24
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	071b      	lsls	r3, r3, #28
 8004aba:	4958      	ldr	r1, [pc, #352]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d004      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ad6:	d00a      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d02e      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aec:	d129      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004aee:	4b4b      	ldr	r3, [pc, #300]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004af4:	0c1b      	lsrs	r3, r3, #16
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004afc:	4b47      	ldr	r3, [pc, #284]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b02:	0f1b      	lsrs	r3, r3, #28
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	019a      	lsls	r2, r3, #6
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	041b      	lsls	r3, r3, #16
 8004b14:	431a      	orrs	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	061b      	lsls	r3, r3, #24
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	071b      	lsls	r3, r3, #28
 8004b22:	493e      	ldr	r1, [pc, #248]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b2a:	4b3c      	ldr	r3, [pc, #240]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b30:	f023 021f 	bic.w	r2, r3, #31
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	4938      	ldr	r1, [pc, #224]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d01d      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b4e:	4b33      	ldr	r3, [pc, #204]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b54:	0e1b      	lsrs	r3, r3, #24
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b5c:	4b2f      	ldr	r3, [pc, #188]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b62:	0f1b      	lsrs	r3, r3, #28
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	019a      	lsls	r2, r3, #6
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	041b      	lsls	r3, r3, #16
 8004b76:	431a      	orrs	r2, r3
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	061b      	lsls	r3, r3, #24
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	071b      	lsls	r3, r3, #28
 8004b82:	4926      	ldr	r1, [pc, #152]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d011      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	019a      	lsls	r2, r3, #6
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	041b      	lsls	r3, r3, #16
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	061b      	lsls	r3, r3, #24
 8004baa:	431a      	orrs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	071b      	lsls	r3, r3, #28
 8004bb2:	491a      	ldr	r1, [pc, #104]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bba:	4b18      	ldr	r3, [pc, #96]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a17      	ldr	r2, [pc, #92]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bc6:	f7fe f913 	bl	8002df0 <HAL_GetTick>
 8004bca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bce:	f7fe f90f 	bl	8002df0 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b64      	cmp	r3, #100	; 0x64
 8004bda:	d901      	bls.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e0d8      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004be0:	4b0e      	ldr	r3, [pc, #56]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	f040 80ce 	bne.w	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004bf4:	4b09      	ldr	r3, [pc, #36]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a08      	ldr	r2, [pc, #32]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c00:	f7fe f8f6 	bl	8002df0 <HAL_GetTick>
 8004c04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c06:	e00b      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c08:	f7fe f8f2 	bl	8002df0 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b64      	cmp	r3, #100	; 0x64
 8004c14:	d904      	bls.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e0bb      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004c1a:	bf00      	nop
 8004c1c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c20:	4b5e      	ldr	r3, [pc, #376]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c2c:	d0ec      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d009      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d02e      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d12a      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c56:	4b51      	ldr	r3, [pc, #324]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5c:	0c1b      	lsrs	r3, r3, #16
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c64:	4b4d      	ldr	r3, [pc, #308]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6a:	0f1b      	lsrs	r3, r3, #28
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	019a      	lsls	r2, r3, #6
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	041b      	lsls	r3, r3, #16
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	061b      	lsls	r3, r3, #24
 8004c84:	431a      	orrs	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	071b      	lsls	r3, r3, #28
 8004c8a:	4944      	ldr	r1, [pc, #272]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c92:	4b42      	ldr	r3, [pc, #264]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c98:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	021b      	lsls	r3, r3, #8
 8004ca4:	493d      	ldr	r1, [pc, #244]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d022      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cc0:	d11d      	bne.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cc2:	4b36      	ldr	r3, [pc, #216]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc8:	0e1b      	lsrs	r3, r3, #24
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004cd0:	4b32      	ldr	r3, [pc, #200]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd6:	0f1b      	lsrs	r3, r3, #28
 8004cd8:	f003 0307 	and.w	r3, r3, #7
 8004cdc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	019a      	lsls	r2, r3, #6
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	041b      	lsls	r3, r3, #16
 8004cea:	431a      	orrs	r2, r3
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	061b      	lsls	r3, r3, #24
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	071b      	lsls	r3, r3, #28
 8004cf6:	4929      	ldr	r1, [pc, #164]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d028      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d0a:	4b24      	ldr	r3, [pc, #144]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d10:	0e1b      	lsrs	r3, r3, #24
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d18:	4b20      	ldr	r3, [pc, #128]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1e:	0c1b      	lsrs	r3, r3, #16
 8004d20:	f003 0303 	and.w	r3, r3, #3
 8004d24:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	019a      	lsls	r2, r3, #6
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	041b      	lsls	r3, r3, #16
 8004d30:	431a      	orrs	r2, r3
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	061b      	lsls	r3, r3, #24
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	071b      	lsls	r3, r3, #28
 8004d3e:	4917      	ldr	r1, [pc, #92]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d46:	4b15      	ldr	r3, [pc, #84]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d54:	4911      	ldr	r1, [pc, #68]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d5c:	4b0f      	ldr	r3, [pc, #60]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a0e      	ldr	r2, [pc, #56]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d68:	f7fe f842 	bl	8002df0 <HAL_GetTick>
 8004d6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d70:	f7fe f83e 	bl	8002df0 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b64      	cmp	r3, #100	; 0x64
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e007      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d82:	4b06      	ldr	r3, [pc, #24]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d8e:	d1ef      	bne.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3720      	adds	r7, #32
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40023800 	.word	0x40023800

08004da0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e09d      	b.n	8004eee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d108      	bne.n	8004dcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dc2:	d009      	beq.n	8004dd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	61da      	str	r2, [r3, #28]
 8004dca:	e005      	b.n	8004dd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d106      	bne.n	8004df8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f7fd fc58 	bl	80026a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e18:	d902      	bls.n	8004e20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60fb      	str	r3, [r7, #12]
 8004e1e:	e002      	b.n	8004e26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004e2e:	d007      	beq.n	8004e40 <HAL_SPI_Init+0xa0>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e38:	d002      	beq.n	8004e40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	431a      	orrs	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e82:	ea42 0103 	orr.w	r1, r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	0c1b      	lsrs	r3, r3, #16
 8004e9c:	f003 0204 	and.w	r2, r3, #4
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	f003 0310 	and.w	r3, r3, #16
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eae:	f003 0308 	and.w	r3, r3, #8
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004ebc:	ea42 0103 	orr.w	r1, r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69da      	ldr	r2, [r3, #28]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004edc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b088      	sub	sp, #32
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	60f8      	str	r0, [r7, #12]
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	603b      	str	r3, [r7, #0]
 8004f02:	4613      	mov	r3, r2
 8004f04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f06:	2300      	movs	r3, #0
 8004f08:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d101      	bne.n	8004f18 <HAL_SPI_Transmit+0x22>
 8004f14:	2302      	movs	r3, #2
 8004f16:	e158      	b.n	80051ca <HAL_SPI_Transmit+0x2d4>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f20:	f7fd ff66 	bl	8002df0 <HAL_GetTick>
 8004f24:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004f26:	88fb      	ldrh	r3, [r7, #6]
 8004f28:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d002      	beq.n	8004f3c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004f36:	2302      	movs	r3, #2
 8004f38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f3a:	e13d      	b.n	80051b8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <HAL_SPI_Transmit+0x52>
 8004f42:	88fb      	ldrh	r3, [r7, #6]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d102      	bne.n	8004f4e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f4c:	e134      	b.n	80051b8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2203      	movs	r2, #3
 8004f52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	88fa      	ldrh	r2, [r7, #6]
 8004f66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	88fa      	ldrh	r2, [r7, #6]
 8004f6c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f98:	d10f      	bne.n	8004fba <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fa8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fb8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc4:	2b40      	cmp	r3, #64	; 0x40
 8004fc6:	d007      	beq.n	8004fd8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fe0:	d94b      	bls.n	800507a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <HAL_SPI_Transmit+0xfa>
 8004fea:	8afb      	ldrh	r3, [r7, #22]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d13e      	bne.n	800506e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff4:	881a      	ldrh	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005000:	1c9a      	adds	r2, r3, #2
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800500a:	b29b      	uxth	r3, r3
 800500c:	3b01      	subs	r3, #1
 800500e:	b29a      	uxth	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005014:	e02b      	b.n	800506e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b02      	cmp	r3, #2
 8005022:	d112      	bne.n	800504a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005028:	881a      	ldrh	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005034:	1c9a      	adds	r2, r3, #2
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800503e:	b29b      	uxth	r3, r3
 8005040:	3b01      	subs	r3, #1
 8005042:	b29a      	uxth	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005048:	e011      	b.n	800506e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800504a:	f7fd fed1 	bl	8002df0 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	429a      	cmp	r2, r3
 8005058:	d803      	bhi.n	8005062 <HAL_SPI_Transmit+0x16c>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005060:	d102      	bne.n	8005068 <HAL_SPI_Transmit+0x172>
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d102      	bne.n	800506e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800506c:	e0a4      	b.n	80051b8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005072:	b29b      	uxth	r3, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1ce      	bne.n	8005016 <HAL_SPI_Transmit+0x120>
 8005078:	e07c      	b.n	8005174 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <HAL_SPI_Transmit+0x192>
 8005082:	8afb      	ldrh	r3, [r7, #22]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d170      	bne.n	800516a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800508c:	b29b      	uxth	r3, r3
 800508e:	2b01      	cmp	r3, #1
 8005090:	d912      	bls.n	80050b8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005096:	881a      	ldrh	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a2:	1c9a      	adds	r2, r3, #2
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	3b02      	subs	r3, #2
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050b6:	e058      	b.n	800516a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	330c      	adds	r3, #12
 80050c2:	7812      	ldrb	r2, [r2, #0]
 80050c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80050de:	e044      	b.n	800516a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d12b      	bne.n	8005146 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d912      	bls.n	800511e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fc:	881a      	ldrh	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005108:	1c9a      	adds	r2, r3, #2
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005112:	b29b      	uxth	r3, r3
 8005114:	3b02      	subs	r3, #2
 8005116:	b29a      	uxth	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800511c:	e025      	b.n	800516a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	330c      	adds	r3, #12
 8005128:	7812      	ldrb	r2, [r2, #0]
 800512a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800513a:	b29b      	uxth	r3, r3
 800513c:	3b01      	subs	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005144:	e011      	b.n	800516a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005146:	f7fd fe53 	bl	8002df0 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d803      	bhi.n	800515e <HAL_SPI_Transmit+0x268>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515c:	d102      	bne.n	8005164 <HAL_SPI_Transmit+0x26e>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d102      	bne.n	800516a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005168:	e026      	b.n	80051b8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800516e:	b29b      	uxth	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1b5      	bne.n	80050e0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	6839      	ldr	r1, [r7, #0]
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 fd07 	bl	8005b8c <SPI_EndRxTxTransaction>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d002      	beq.n	800518a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2220      	movs	r2, #32
 8005188:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10a      	bne.n	80051a8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005192:	2300      	movs	r3, #0
 8005194:	613b      	str	r3, [r7, #16]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	613b      	str	r3, [r7, #16]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	613b      	str	r3, [r7, #16]
 80051a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d002      	beq.n	80051b6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	77fb      	strb	r3, [r7, #31]
 80051b4:	e000      	b.n	80051b8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80051b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80051c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3720      	adds	r7, #32
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b088      	sub	sp, #32
 80051d6:	af02      	add	r7, sp, #8
 80051d8:	60f8      	str	r0, [r7, #12]
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	603b      	str	r3, [r7, #0]
 80051de:	4613      	mov	r3, r2
 80051e0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051e2:	2300      	movs	r3, #0
 80051e4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051ee:	d112      	bne.n	8005216 <HAL_SPI_Receive+0x44>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10e      	bne.n	8005216 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2204      	movs	r2, #4
 80051fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005200:	88fa      	ldrh	r2, [r7, #6]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	4613      	mov	r3, r2
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	68b9      	ldr	r1, [r7, #8]
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 f910 	bl	8005432 <HAL_SPI_TransmitReceive>
 8005212:	4603      	mov	r3, r0
 8005214:	e109      	b.n	800542a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800521c:	2b01      	cmp	r3, #1
 800521e:	d101      	bne.n	8005224 <HAL_SPI_Receive+0x52>
 8005220:	2302      	movs	r3, #2
 8005222:	e102      	b.n	800542a <HAL_SPI_Receive+0x258>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800522c:	f7fd fde0 	bl	8002df0 <HAL_GetTick>
 8005230:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b01      	cmp	r3, #1
 800523c:	d002      	beq.n	8005244 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800523e:	2302      	movs	r3, #2
 8005240:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005242:	e0e9      	b.n	8005418 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <HAL_SPI_Receive+0x7e>
 800524a:	88fb      	ldrh	r3, [r7, #6]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d102      	bne.n	8005256 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005254:	e0e0      	b.n	8005418 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2204      	movs	r2, #4
 800525a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	88fa      	ldrh	r2, [r7, #6]
 800526e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	88fa      	ldrh	r2, [r7, #6]
 8005276:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052a0:	d908      	bls.n	80052b4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052b0:	605a      	str	r2, [r3, #4]
 80052b2:	e007      	b.n	80052c4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052c2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052cc:	d10f      	bne.n	80052ee <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80052ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f8:	2b40      	cmp	r3, #64	; 0x40
 80052fa:	d007      	beq.n	800530c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800530a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005314:	d867      	bhi.n	80053e6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005316:	e030      	b.n	800537a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b01      	cmp	r3, #1
 8005324:	d117      	bne.n	8005356 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f103 020c 	add.w	r2, r3, #12
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	7812      	ldrb	r2, [r2, #0]
 8005334:	b2d2      	uxtb	r2, r2
 8005336:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533c:	1c5a      	adds	r2, r3, #1
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005348:	b29b      	uxth	r3, r3
 800534a:	3b01      	subs	r3, #1
 800534c:	b29a      	uxth	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005354:	e011      	b.n	800537a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005356:	f7fd fd4b 	bl	8002df0 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d803      	bhi.n	800536e <HAL_SPI_Receive+0x19c>
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536c:	d102      	bne.n	8005374 <HAL_SPI_Receive+0x1a2>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d102      	bne.n	800537a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005378:	e04e      	b.n	8005418 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005380:	b29b      	uxth	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1c8      	bne.n	8005318 <HAL_SPI_Receive+0x146>
 8005386:	e034      	b.n	80053f2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b01      	cmp	r3, #1
 8005394:	d115      	bne.n	80053c2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a0:	b292      	uxth	r2, r2
 80053a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a8:	1c9a      	adds	r2, r3, #2
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	3b01      	subs	r3, #1
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80053c0:	e011      	b.n	80053e6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053c2:	f7fd fd15 	bl	8002df0 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d803      	bhi.n	80053da <HAL_SPI_Receive+0x208>
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d8:	d102      	bne.n	80053e0 <HAL_SPI_Receive+0x20e>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d102      	bne.n	80053e6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80053e4:	e018      	b.n	8005418 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1ca      	bne.n	8005388 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	6839      	ldr	r1, [r7, #0]
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f000 fb4c 	bl	8005a94 <SPI_EndRxTransaction>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d002      	beq.n	8005408 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2220      	movs	r2, #32
 8005406:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800540c:	2b00      	cmp	r3, #0
 800540e:	d002      	beq.n	8005416 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	75fb      	strb	r3, [r7, #23]
 8005414:	e000      	b.n	8005418 <HAL_SPI_Receive+0x246>
  }

error :
 8005416:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005428:	7dfb      	ldrb	r3, [r7, #23]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3718      	adds	r7, #24
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b08a      	sub	sp, #40	; 0x28
 8005436:	af00      	add	r7, sp, #0
 8005438:	60f8      	str	r0, [r7, #12]
 800543a:	60b9      	str	r1, [r7, #8]
 800543c:	607a      	str	r2, [r7, #4]
 800543e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005440:	2301      	movs	r3, #1
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005444:	2300      	movs	r3, #0
 8005446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005450:	2b01      	cmp	r3, #1
 8005452:	d101      	bne.n	8005458 <HAL_SPI_TransmitReceive+0x26>
 8005454:	2302      	movs	r3, #2
 8005456:	e1fb      	b.n	8005850 <HAL_SPI_TransmitReceive+0x41e>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005460:	f7fd fcc6 	bl	8002df0 <HAL_GetTick>
 8005464:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800546c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005474:	887b      	ldrh	r3, [r7, #2]
 8005476:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005478:	887b      	ldrh	r3, [r7, #2]
 800547a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800547c:	7efb      	ldrb	r3, [r7, #27]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d00e      	beq.n	80054a0 <HAL_SPI_TransmitReceive+0x6e>
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005488:	d106      	bne.n	8005498 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d102      	bne.n	8005498 <HAL_SPI_TransmitReceive+0x66>
 8005492:	7efb      	ldrb	r3, [r7, #27]
 8005494:	2b04      	cmp	r3, #4
 8005496:	d003      	beq.n	80054a0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005498:	2302      	movs	r3, #2
 800549a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800549e:	e1cd      	b.n	800583c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d005      	beq.n	80054b2 <HAL_SPI_TransmitReceive+0x80>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d002      	beq.n	80054b2 <HAL_SPI_TransmitReceive+0x80>
 80054ac:	887b      	ldrh	r3, [r7, #2]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d103      	bne.n	80054ba <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80054b8:	e1c0      	b.n	800583c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b04      	cmp	r3, #4
 80054c4:	d003      	beq.n	80054ce <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2205      	movs	r2, #5
 80054ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	887a      	ldrh	r2, [r7, #2]
 80054de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	887a      	ldrh	r2, [r7, #2]
 80054e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	887a      	ldrh	r2, [r7, #2]
 80054f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	887a      	ldrh	r2, [r7, #2]
 80054fa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005510:	d802      	bhi.n	8005518 <HAL_SPI_TransmitReceive+0xe6>
 8005512:	8a3b      	ldrh	r3, [r7, #16]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d908      	bls.n	800552a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005526:	605a      	str	r2, [r3, #4]
 8005528:	e007      	b.n	800553a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005538:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005544:	2b40      	cmp	r3, #64	; 0x40
 8005546:	d007      	beq.n	8005558 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005556:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005560:	d97c      	bls.n	800565c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d002      	beq.n	8005570 <HAL_SPI_TransmitReceive+0x13e>
 800556a:	8a7b      	ldrh	r3, [r7, #18]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d169      	bne.n	8005644 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005574:	881a      	ldrh	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005580:	1c9a      	adds	r2, r3, #2
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800558a:	b29b      	uxth	r3, r3
 800558c:	3b01      	subs	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005594:	e056      	b.n	8005644 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d11b      	bne.n	80055dc <HAL_SPI_TransmitReceive+0x1aa>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d016      	beq.n	80055dc <HAL_SPI_TransmitReceive+0x1aa>
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d113      	bne.n	80055dc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b8:	881a      	ldrh	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c4:	1c9a      	adds	r2, r3, #2
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055d8:	2300      	movs	r3, #0
 80055da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d11c      	bne.n	8005624 <HAL_SPI_TransmitReceive+0x1f2>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d016      	beq.n	8005624 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005600:	b292      	uxth	r2, r2
 8005602:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005608:	1c9a      	adds	r2, r3, #2
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005614:	b29b      	uxth	r3, r3
 8005616:	3b01      	subs	r3, #1
 8005618:	b29a      	uxth	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005620:	2301      	movs	r3, #1
 8005622:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005624:	f7fd fbe4 	bl	8002df0 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005630:	429a      	cmp	r2, r3
 8005632:	d807      	bhi.n	8005644 <HAL_SPI_TransmitReceive+0x212>
 8005634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563a:	d003      	beq.n	8005644 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005642:	e0fb      	b.n	800583c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005648:	b29b      	uxth	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1a3      	bne.n	8005596 <HAL_SPI_TransmitReceive+0x164>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d19d      	bne.n	8005596 <HAL_SPI_TransmitReceive+0x164>
 800565a:	e0df      	b.n	800581c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <HAL_SPI_TransmitReceive+0x23a>
 8005664:	8a7b      	ldrh	r3, [r7, #18]
 8005666:	2b01      	cmp	r3, #1
 8005668:	f040 80cb 	bne.w	8005802 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005670:	b29b      	uxth	r3, r3
 8005672:	2b01      	cmp	r3, #1
 8005674:	d912      	bls.n	800569c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567a:	881a      	ldrh	r2, [r3, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005686:	1c9a      	adds	r2, r3, #2
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005690:	b29b      	uxth	r3, r3
 8005692:	3b02      	subs	r3, #2
 8005694:	b29a      	uxth	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	87da      	strh	r2, [r3, #62]	; 0x3e
 800569a:	e0b2      	b.n	8005802 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	330c      	adds	r3, #12
 80056a6:	7812      	ldrb	r2, [r2, #0]
 80056a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29a      	uxth	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056c2:	e09e      	b.n	8005802 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d134      	bne.n	800573c <HAL_SPI_TransmitReceive+0x30a>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d02f      	beq.n	800573c <HAL_SPI_TransmitReceive+0x30a>
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d12c      	bne.n	800573c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d912      	bls.n	8005712 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f0:	881a      	ldrh	r2, [r3, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fc:	1c9a      	adds	r2, r3, #2
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005706:	b29b      	uxth	r3, r3
 8005708:	3b02      	subs	r3, #2
 800570a:	b29a      	uxth	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005710:	e012      	b.n	8005738 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	330c      	adds	r3, #12
 800571c:	7812      	ldrb	r2, [r2, #0]
 800571e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005724:	1c5a      	adds	r2, r3, #1
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800572e:	b29b      	uxth	r3, r3
 8005730:	3b01      	subs	r3, #1
 8005732:	b29a      	uxth	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b01      	cmp	r3, #1
 8005748:	d148      	bne.n	80057dc <HAL_SPI_TransmitReceive+0x3aa>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005750:	b29b      	uxth	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d042      	beq.n	80057dc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800575c:	b29b      	uxth	r3, r3
 800575e:	2b01      	cmp	r3, #1
 8005760:	d923      	bls.n	80057aa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68da      	ldr	r2, [r3, #12]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576c:	b292      	uxth	r2, r2
 800576e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005774:	1c9a      	adds	r2, r3, #2
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005780:	b29b      	uxth	r3, r3
 8005782:	3b02      	subs	r3, #2
 8005784:	b29a      	uxth	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005792:	b29b      	uxth	r3, r3
 8005794:	2b01      	cmp	r3, #1
 8005796:	d81f      	bhi.n	80057d8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057a6:	605a      	str	r2, [r3, #4]
 80057a8:	e016      	b.n	80057d8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f103 020c 	add.w	r2, r3, #12
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	7812      	ldrb	r2, [r2, #0]
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c0:	1c5a      	adds	r2, r3, #1
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	3b01      	subs	r3, #1
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057d8:	2301      	movs	r3, #1
 80057da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80057dc:	f7fd fb08 	bl	8002df0 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d803      	bhi.n	80057f4 <HAL_SPI_TransmitReceive+0x3c2>
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f2:	d102      	bne.n	80057fa <HAL_SPI_TransmitReceive+0x3c8>
 80057f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d103      	bne.n	8005802 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005800:	e01c      	b.n	800583c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005806:	b29b      	uxth	r3, r3
 8005808:	2b00      	cmp	r3, #0
 800580a:	f47f af5b 	bne.w	80056c4 <HAL_SPI_TransmitReceive+0x292>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005814:	b29b      	uxth	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	f47f af54 	bne.w	80056c4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800581c:	69fa      	ldr	r2, [r7, #28]
 800581e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 f9b3 	bl	8005b8c <SPI_EndRxTxTransaction>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d006      	beq.n	800583a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2220      	movs	r2, #32
 8005836:	661a      	str	r2, [r3, #96]	; 0x60
 8005838:	e000      	b.n	800583c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800583a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800584c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005850:	4618      	mov	r0, r3
 8005852:	3728      	adds	r7, #40	; 0x28
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b088      	sub	sp, #32
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	603b      	str	r3, [r7, #0]
 8005864:	4613      	mov	r3, r2
 8005866:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005868:	f7fd fac2 	bl	8002df0 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005870:	1a9b      	subs	r3, r3, r2
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	4413      	add	r3, r2
 8005876:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005878:	f7fd faba 	bl	8002df0 <HAL_GetTick>
 800587c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800587e:	4b39      	ldr	r3, [pc, #228]	; (8005964 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	015b      	lsls	r3, r3, #5
 8005884:	0d1b      	lsrs	r3, r3, #20
 8005886:	69fa      	ldr	r2, [r7, #28]
 8005888:	fb02 f303 	mul.w	r3, r2, r3
 800588c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800588e:	e054      	b.n	800593a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005896:	d050      	beq.n	800593a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005898:	f7fd faaa 	bl	8002df0 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	69fa      	ldr	r2, [r7, #28]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d902      	bls.n	80058ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d13d      	bne.n	800592a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058c6:	d111      	bne.n	80058ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058d0:	d004      	beq.n	80058dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058da:	d107      	bne.n	80058ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058f4:	d10f      	bne.n	8005916 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005914:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e017      	b.n	800595a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	3b01      	subs	r3, #1
 8005938:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	4013      	ands	r3, r2
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	429a      	cmp	r2, r3
 8005948:	bf0c      	ite	eq
 800594a:	2301      	moveq	r3, #1
 800594c:	2300      	movne	r3, #0
 800594e:	b2db      	uxtb	r3, r3
 8005950:	461a      	mov	r2, r3
 8005952:	79fb      	ldrb	r3, [r7, #7]
 8005954:	429a      	cmp	r2, r3
 8005956:	d19b      	bne.n	8005890 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3720      	adds	r7, #32
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	20000000 	.word	0x20000000

08005968 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08a      	sub	sp, #40	; 0x28
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
 8005974:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005976:	2300      	movs	r3, #0
 8005978:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800597a:	f7fd fa39 	bl	8002df0 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005982:	1a9b      	subs	r3, r3, r2
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	4413      	add	r3, r2
 8005988:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800598a:	f7fd fa31 	bl	8002df0 <HAL_GetTick>
 800598e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	330c      	adds	r3, #12
 8005996:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005998:	4b3d      	ldr	r3, [pc, #244]	; (8005a90 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	4613      	mov	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	00da      	lsls	r2, r3, #3
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	0d1b      	lsrs	r3, r3, #20
 80059a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80059b0:	e060      	b.n	8005a74 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80059b8:	d107      	bne.n	80059ca <SPI_WaitFifoStateUntilTimeout+0x62>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d104      	bne.n	80059ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80059c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d0:	d050      	beq.n	8005a74 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80059d2:	f7fd fa0d 	bl	8002df0 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059de:	429a      	cmp	r2, r3
 80059e0:	d902      	bls.n	80059e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d13d      	bne.n	8005a64 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a00:	d111      	bne.n	8005a26 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a0a:	d004      	beq.n	8005a16 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a14:	d107      	bne.n	8005a26 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a2e:	d10f      	bne.n	8005a50 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a3e:	601a      	str	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e010      	b.n	8005a86 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	3b01      	subs	r3, #1
 8005a72:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689a      	ldr	r2, [r3, #8]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d196      	bne.n	80059b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3728      	adds	r7, #40	; 0x28
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	20000000 	.word	0x20000000

08005a94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b088      	sub	sp, #32
 8005a98:	af02      	add	r7, sp, #8
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aa8:	d111      	bne.n	8005ace <SPI_EndRxTransaction+0x3a>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ab2:	d004      	beq.n	8005abe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005abc:	d107      	bne.n	8005ace <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005acc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ad6:	d112      	bne.n	8005afe <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	2180      	movs	r1, #128	; 0x80
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f7ff feb8 	bl	8005858 <SPI_WaitFlagStateUntilTimeout>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d021      	beq.n	8005b32 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005af2:	f043 0220 	orr.w	r2, r3, #32
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e03d      	b.n	8005b7a <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005afe:	4b21      	ldr	r3, [pc, #132]	; (8005b84 <SPI_EndRxTransaction+0xf0>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a21      	ldr	r2, [pc, #132]	; (8005b88 <SPI_EndRxTransaction+0xf4>)
 8005b04:	fba2 2303 	umull	r2, r3, r2, r3
 8005b08:	0d5b      	lsrs	r3, r3, #21
 8005b0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b0e:	fb02 f303 	mul.w	r3, r2, r3
 8005b12:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00a      	beq.n	8005b30 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b2a:	2b80      	cmp	r3, #128	; 0x80
 8005b2c:	d0f2      	beq.n	8005b14 <SPI_EndRxTransaction+0x80>
 8005b2e:	e000      	b.n	8005b32 <SPI_EndRxTransaction+0x9e>
        break;
 8005b30:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b3a:	d11d      	bne.n	8005b78 <SPI_EndRxTransaction+0xe4>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b44:	d004      	beq.n	8005b50 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b4e:	d113      	bne.n	8005b78 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f7ff ff03 	bl	8005968 <SPI_WaitFifoStateUntilTimeout>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d007      	beq.n	8005b78 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b6c:	f043 0220 	orr.w	r2, r3, #32
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e000      	b.n	8005b7a <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3718      	adds	r7, #24
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	20000000 	.word	0x20000000
 8005b88:	165e9f81 	.word	0x165e9f81

08005b8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b088      	sub	sp, #32
 8005b90:	af02      	add	r7, sp, #8
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f7ff fedf 	bl	8005968 <SPI_WaitFifoStateUntilTimeout>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d007      	beq.n	8005bc0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bb4:	f043 0220 	orr.w	r2, r3, #32
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e046      	b.n	8005c4e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005bc0:	4b25      	ldr	r3, [pc, #148]	; (8005c58 <SPI_EndRxTxTransaction+0xcc>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a25      	ldr	r2, [pc, #148]	; (8005c5c <SPI_EndRxTxTransaction+0xd0>)
 8005bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bca:	0d5b      	lsrs	r3, r3, #21
 8005bcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005bd0:	fb02 f303 	mul.w	r3, r2, r3
 8005bd4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bde:	d112      	bne.n	8005c06 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	2200      	movs	r2, #0
 8005be8:	2180      	movs	r1, #128	; 0x80
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f7ff fe34 	bl	8005858 <SPI_WaitFlagStateUntilTimeout>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d016      	beq.n	8005c24 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bfa:	f043 0220 	orr.w	r2, r3, #32
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e023      	b.n	8005c4e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00a      	beq.n	8005c22 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1c:	2b80      	cmp	r3, #128	; 0x80
 8005c1e:	d0f2      	beq.n	8005c06 <SPI_EndRxTxTransaction+0x7a>
 8005c20:	e000      	b.n	8005c24 <SPI_EndRxTxTransaction+0x98>
        break;
 8005c22:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f7ff fe99 	bl	8005968 <SPI_WaitFifoStateUntilTimeout>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d007      	beq.n	8005c4c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c40:	f043 0220 	orr.w	r2, r3, #32
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e000      	b.n	8005c4e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	20000000 	.word	0x20000000
 8005c5c:	165e9f81 	.word	0x165e9f81

08005c60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e049      	b.n	8005d06 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d106      	bne.n	8005c8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7fc ff52 	bl	8002b30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	f000 fa7e 	bl	80061a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b082      	sub	sp, #8
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e049      	b.n	8005db4 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d106      	bne.n	8005d3a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f7fc feb7 	bl	8002aa8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2202      	movs	r2, #2
 8005d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	3304      	adds	r3, #4
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	4610      	mov	r0, r2
 8005d4e:	f000 fa27 	bl	80061a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3708      	adds	r7, #8
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d101      	bne.n	8005dda <HAL_TIM_IC_ConfigChannel+0x1e>
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	e088      	b.n	8005eec <HAL_TIM_IC_ConfigChannel+0x130>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d11b      	bne.n	8005e20 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6818      	ldr	r0, [r3, #0]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	6819      	ldr	r1, [r3, #0]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f000 fd64 	bl	80068c4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	699a      	ldr	r2, [r3, #24]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 020c 	bic.w	r2, r2, #12
 8005e0a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6999      	ldr	r1, [r3, #24]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	689a      	ldr	r2, [r3, #8]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	619a      	str	r2, [r3, #24]
 8005e1e:	e060      	b.n	8005ee2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b04      	cmp	r3, #4
 8005e24:	d11c      	bne.n	8005e60 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6818      	ldr	r0, [r3, #0]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	6819      	ldr	r1, [r3, #0]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	f000 fde8 	bl	8006a0a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	699a      	ldr	r2, [r3, #24]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005e48:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6999      	ldr	r1, [r3, #24]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	021a      	lsls	r2, r3, #8
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	619a      	str	r2, [r3, #24]
 8005e5e:	e040      	b.n	8005ee2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b08      	cmp	r3, #8
 8005e64:	d11b      	bne.n	8005e9e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6818      	ldr	r0, [r3, #0]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	6819      	ldr	r1, [r3, #0]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f000 fe35 	bl	8006ae4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69da      	ldr	r2, [r3, #28]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f022 020c 	bic.w	r2, r2, #12
 8005e88:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69d9      	ldr	r1, [r3, #28]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	61da      	str	r2, [r3, #28]
 8005e9c:	e021      	b.n	8005ee2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b0c      	cmp	r3, #12
 8005ea2:	d11c      	bne.n	8005ede <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6818      	ldr	r0, [r3, #0]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	6819      	ldr	r1, [r3, #0]
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f000 fe52 	bl	8006b5c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	69da      	ldr	r2, [r3, #28]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ec6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	69d9      	ldr	r1, [r3, #28]
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	021a      	lsls	r2, r3, #8
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	61da      	str	r2, [r3, #28]
 8005edc:	e001      	b.n	8005ee2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f00:	2300      	movs	r3, #0
 8005f02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d101      	bne.n	8005f12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f0e:	2302      	movs	r3, #2
 8005f10:	e0ff      	b.n	8006112 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b14      	cmp	r3, #20
 8005f1e:	f200 80f0 	bhi.w	8006102 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f22:	a201      	add	r2, pc, #4	; (adr r2, 8005f28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f28:	08005f7d 	.word	0x08005f7d
 8005f2c:	08006103 	.word	0x08006103
 8005f30:	08006103 	.word	0x08006103
 8005f34:	08006103 	.word	0x08006103
 8005f38:	08005fbd 	.word	0x08005fbd
 8005f3c:	08006103 	.word	0x08006103
 8005f40:	08006103 	.word	0x08006103
 8005f44:	08006103 	.word	0x08006103
 8005f48:	08005fff 	.word	0x08005fff
 8005f4c:	08006103 	.word	0x08006103
 8005f50:	08006103 	.word	0x08006103
 8005f54:	08006103 	.word	0x08006103
 8005f58:	0800603f 	.word	0x0800603f
 8005f5c:	08006103 	.word	0x08006103
 8005f60:	08006103 	.word	0x08006103
 8005f64:	08006103 	.word	0x08006103
 8005f68:	08006081 	.word	0x08006081
 8005f6c:	08006103 	.word	0x08006103
 8005f70:	08006103 	.word	0x08006103
 8005f74:	08006103 	.word	0x08006103
 8005f78:	080060c1 	.word	0x080060c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68b9      	ldr	r1, [r7, #8]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 f9ac 	bl	80062e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	699a      	ldr	r2, [r3, #24]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f042 0208 	orr.w	r2, r2, #8
 8005f96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699a      	ldr	r2, [r3, #24]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0204 	bic.w	r2, r2, #4
 8005fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6999      	ldr	r1, [r3, #24]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	691a      	ldr	r2, [r3, #16]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	619a      	str	r2, [r3, #24]
      break;
 8005fba:	e0a5      	b.n	8006108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68b9      	ldr	r1, [r7, #8]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 f9fe 	bl	80063c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	699a      	ldr	r2, [r3, #24]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	699a      	ldr	r2, [r3, #24]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6999      	ldr	r1, [r3, #24]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	021a      	lsls	r2, r3, #8
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	619a      	str	r2, [r3, #24]
      break;
 8005ffc:	e084      	b.n	8006108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68b9      	ldr	r1, [r7, #8]
 8006004:	4618      	mov	r0, r3
 8006006:	f000 fa55 	bl	80064b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69da      	ldr	r2, [r3, #28]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f042 0208 	orr.w	r2, r2, #8
 8006018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69da      	ldr	r2, [r3, #28]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f022 0204 	bic.w	r2, r2, #4
 8006028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	69d9      	ldr	r1, [r3, #28]
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	691a      	ldr	r2, [r3, #16]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	430a      	orrs	r2, r1
 800603a:	61da      	str	r2, [r3, #28]
      break;
 800603c:	e064      	b.n	8006108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68b9      	ldr	r1, [r7, #8]
 8006044:	4618      	mov	r0, r3
 8006046:	f000 faab 	bl	80065a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	69da      	ldr	r2, [r3, #28]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006058:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	69da      	ldr	r2, [r3, #28]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	69d9      	ldr	r1, [r3, #28]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	021a      	lsls	r2, r3, #8
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	61da      	str	r2, [r3, #28]
      break;
 800607e:	e043      	b.n	8006108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68b9      	ldr	r1, [r7, #8]
 8006086:	4618      	mov	r0, r3
 8006088:	f000 fae2 	bl	8006650 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f042 0208 	orr.w	r2, r2, #8
 800609a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f022 0204 	bic.w	r2, r2, #4
 80060aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	691a      	ldr	r2, [r3, #16]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80060be:	e023      	b.n	8006108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68b9      	ldr	r1, [r7, #8]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 fb14 	bl	80066f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	021a      	lsls	r2, r3, #8
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006100:	e002      	b.n	8006108 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	75fb      	strb	r3, [r7, #23]
      break;
 8006106:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006110:	7dfb      	ldrb	r3, [r7, #23]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop

0800611c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800612c:	2b01      	cmp	r3, #1
 800612e:	d101      	bne.n	8006134 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006130:	2302      	movs	r3, #2
 8006132:	e031      	b.n	8006198 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2202      	movs	r2, #2
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006144:	6839      	ldr	r1, [r7, #0]
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 fb28 	bl	800679c <TIM_SlaveTimer_SetConfig>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d009      	beq.n	8006166 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e018      	b.n	8006198 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68da      	ldr	r2, [r3, #12]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006174:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68da      	ldr	r2, [r3, #12]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006184:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a40      	ldr	r2, [pc, #256]	; (80062b4 <TIM_Base_SetConfig+0x114>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d013      	beq.n	80061e0 <TIM_Base_SetConfig+0x40>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061be:	d00f      	beq.n	80061e0 <TIM_Base_SetConfig+0x40>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a3d      	ldr	r2, [pc, #244]	; (80062b8 <TIM_Base_SetConfig+0x118>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d00b      	beq.n	80061e0 <TIM_Base_SetConfig+0x40>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a3c      	ldr	r2, [pc, #240]	; (80062bc <TIM_Base_SetConfig+0x11c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d007      	beq.n	80061e0 <TIM_Base_SetConfig+0x40>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a3b      	ldr	r2, [pc, #236]	; (80062c0 <TIM_Base_SetConfig+0x120>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d003      	beq.n	80061e0 <TIM_Base_SetConfig+0x40>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a3a      	ldr	r2, [pc, #232]	; (80062c4 <TIM_Base_SetConfig+0x124>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d108      	bne.n	80061f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a2f      	ldr	r2, [pc, #188]	; (80062b4 <TIM_Base_SetConfig+0x114>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d02b      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006200:	d027      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a2c      	ldr	r2, [pc, #176]	; (80062b8 <TIM_Base_SetConfig+0x118>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d023      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a2b      	ldr	r2, [pc, #172]	; (80062bc <TIM_Base_SetConfig+0x11c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d01f      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a2a      	ldr	r2, [pc, #168]	; (80062c0 <TIM_Base_SetConfig+0x120>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d01b      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a29      	ldr	r2, [pc, #164]	; (80062c4 <TIM_Base_SetConfig+0x124>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d017      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a28      	ldr	r2, [pc, #160]	; (80062c8 <TIM_Base_SetConfig+0x128>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d013      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a27      	ldr	r2, [pc, #156]	; (80062cc <TIM_Base_SetConfig+0x12c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d00f      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a26      	ldr	r2, [pc, #152]	; (80062d0 <TIM_Base_SetConfig+0x130>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d00b      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a25      	ldr	r2, [pc, #148]	; (80062d4 <TIM_Base_SetConfig+0x134>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d007      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a24      	ldr	r2, [pc, #144]	; (80062d8 <TIM_Base_SetConfig+0x138>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d003      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a23      	ldr	r2, [pc, #140]	; (80062dc <TIM_Base_SetConfig+0x13c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d108      	bne.n	8006264 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	4313      	orrs	r3, r2
 8006262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	4313      	orrs	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a0a      	ldr	r2, [pc, #40]	; (80062b4 <TIM_Base_SetConfig+0x114>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d003      	beq.n	8006298 <TIM_Base_SetConfig+0xf8>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a0c      	ldr	r2, [pc, #48]	; (80062c4 <TIM_Base_SetConfig+0x124>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d103      	bne.n	80062a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	691a      	ldr	r2, [r3, #16]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	615a      	str	r2, [r3, #20]
}
 80062a6:	bf00      	nop
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	40010000 	.word	0x40010000
 80062b8:	40000400 	.word	0x40000400
 80062bc:	40000800 	.word	0x40000800
 80062c0:	40000c00 	.word	0x40000c00
 80062c4:	40010400 	.word	0x40010400
 80062c8:	40014000 	.word	0x40014000
 80062cc:	40014400 	.word	0x40014400
 80062d0:	40014800 	.word	0x40014800
 80062d4:	40001800 	.word	0x40001800
 80062d8:	40001c00 	.word	0x40001c00
 80062dc:	40002000 	.word	0x40002000

080062e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	f023 0201 	bic.w	r2, r3, #1
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	4b2b      	ldr	r3, [pc, #172]	; (80063b8 <TIM_OC1_SetConfig+0xd8>)
 800630c:	4013      	ands	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 0303 	bic.w	r3, r3, #3
 8006316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f023 0302 	bic.w	r3, r3, #2
 8006328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	4313      	orrs	r3, r2
 8006332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a21      	ldr	r2, [pc, #132]	; (80063bc <TIM_OC1_SetConfig+0xdc>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d003      	beq.n	8006344 <TIM_OC1_SetConfig+0x64>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a20      	ldr	r2, [pc, #128]	; (80063c0 <TIM_OC1_SetConfig+0xe0>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d10c      	bne.n	800635e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f023 0308 	bic.w	r3, r3, #8
 800634a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	4313      	orrs	r3, r2
 8006354:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f023 0304 	bic.w	r3, r3, #4
 800635c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a16      	ldr	r2, [pc, #88]	; (80063bc <TIM_OC1_SetConfig+0xdc>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d003      	beq.n	800636e <TIM_OC1_SetConfig+0x8e>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a15      	ldr	r2, [pc, #84]	; (80063c0 <TIM_OC1_SetConfig+0xe0>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d111      	bne.n	8006392 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800637c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	4313      	orrs	r3, r2
 8006386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	4313      	orrs	r3, r2
 8006390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	621a      	str	r2, [r3, #32]
}
 80063ac:	bf00      	nop
 80063ae:	371c      	adds	r7, #28
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	fffeff8f 	.word	0xfffeff8f
 80063bc:	40010000 	.word	0x40010000
 80063c0:	40010400 	.word	0x40010400

080063c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	f023 0210 	bic.w	r2, r3, #16
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	4b2e      	ldr	r3, [pc, #184]	; (80064a8 <TIM_OC2_SetConfig+0xe4>)
 80063f0:	4013      	ands	r3, r2
 80063f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	4313      	orrs	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f023 0320 	bic.w	r3, r3, #32
 800640e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	011b      	lsls	r3, r3, #4
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	4313      	orrs	r3, r2
 800641a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a23      	ldr	r2, [pc, #140]	; (80064ac <TIM_OC2_SetConfig+0xe8>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d003      	beq.n	800642c <TIM_OC2_SetConfig+0x68>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a22      	ldr	r2, [pc, #136]	; (80064b0 <TIM_OC2_SetConfig+0xec>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d10d      	bne.n	8006448 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	011b      	lsls	r3, r3, #4
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	4313      	orrs	r3, r2
 800643e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006446:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a18      	ldr	r2, [pc, #96]	; (80064ac <TIM_OC2_SetConfig+0xe8>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d003      	beq.n	8006458 <TIM_OC2_SetConfig+0x94>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a17      	ldr	r2, [pc, #92]	; (80064b0 <TIM_OC2_SetConfig+0xec>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d113      	bne.n	8006480 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800645e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006466:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	4313      	orrs	r3, r2
 8006472:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	4313      	orrs	r3, r2
 800647e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	621a      	str	r2, [r3, #32]
}
 800649a:	bf00      	nop
 800649c:	371c      	adds	r7, #28
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	feff8fff 	.word	0xfeff8fff
 80064ac:	40010000 	.word	0x40010000
 80064b0:	40010400 	.word	0x40010400

080064b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b087      	sub	sp, #28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	69db      	ldr	r3, [r3, #28]
 80064da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	4b2d      	ldr	r3, [pc, #180]	; (8006594 <TIM_OC3_SetConfig+0xe0>)
 80064e0:	4013      	ands	r3, r2
 80064e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f023 0303 	bic.w	r3, r3, #3
 80064ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	021b      	lsls	r3, r3, #8
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	4313      	orrs	r3, r2
 8006508:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a22      	ldr	r2, [pc, #136]	; (8006598 <TIM_OC3_SetConfig+0xe4>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d003      	beq.n	800651a <TIM_OC3_SetConfig+0x66>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a21      	ldr	r2, [pc, #132]	; (800659c <TIM_OC3_SetConfig+0xe8>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d10d      	bne.n	8006536 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006520:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	021b      	lsls	r3, r3, #8
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	4313      	orrs	r3, r2
 800652c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006534:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a17      	ldr	r2, [pc, #92]	; (8006598 <TIM_OC3_SetConfig+0xe4>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d003      	beq.n	8006546 <TIM_OC3_SetConfig+0x92>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a16      	ldr	r2, [pc, #88]	; (800659c <TIM_OC3_SetConfig+0xe8>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d113      	bne.n	800656e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800654c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	011b      	lsls	r3, r3, #4
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	4313      	orrs	r3, r2
 8006560:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	011b      	lsls	r3, r3, #4
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	4313      	orrs	r3, r2
 800656c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	621a      	str	r2, [r3, #32]
}
 8006588:	bf00      	nop
 800658a:	371c      	adds	r7, #28
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	fffeff8f 	.word	0xfffeff8f
 8006598:	40010000 	.word	0x40010000
 800659c:	40010400 	.word	0x40010400

080065a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b087      	sub	sp, #28
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	4b1e      	ldr	r3, [pc, #120]	; (8006644 <TIM_OC4_SetConfig+0xa4>)
 80065cc:	4013      	ands	r3, r2
 80065ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	021b      	lsls	r3, r3, #8
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	031b      	lsls	r3, r3, #12
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a13      	ldr	r2, [pc, #76]	; (8006648 <TIM_OC4_SetConfig+0xa8>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d003      	beq.n	8006608 <TIM_OC4_SetConfig+0x68>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a12      	ldr	r2, [pc, #72]	; (800664c <TIM_OC4_SetConfig+0xac>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d109      	bne.n	800661c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800660e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	019b      	lsls	r3, r3, #6
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	4313      	orrs	r3, r2
 800661a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	621a      	str	r2, [r3, #32]
}
 8006636:	bf00      	nop
 8006638:	371c      	adds	r7, #28
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	feff8fff 	.word	0xfeff8fff
 8006648:	40010000 	.word	0x40010000
 800664c:	40010400 	.word	0x40010400

08006650 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006650:	b480      	push	{r7}
 8006652:	b087      	sub	sp, #28
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	4b1b      	ldr	r3, [pc, #108]	; (80066e8 <TIM_OC5_SetConfig+0x98>)
 800667c:	4013      	ands	r3, r2
 800667e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	4313      	orrs	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006690:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	041b      	lsls	r3, r3, #16
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	4313      	orrs	r3, r2
 800669c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a12      	ldr	r2, [pc, #72]	; (80066ec <TIM_OC5_SetConfig+0x9c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d003      	beq.n	80066ae <TIM_OC5_SetConfig+0x5e>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a11      	ldr	r2, [pc, #68]	; (80066f0 <TIM_OC5_SetConfig+0xa0>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d109      	bne.n	80066c2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	021b      	lsls	r3, r3, #8
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	4313      	orrs	r3, r2
 80066c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	685a      	ldr	r2, [r3, #4]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	621a      	str	r2, [r3, #32]
}
 80066dc:	bf00      	nop
 80066de:	371c      	adds	r7, #28
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr
 80066e8:	fffeff8f 	.word	0xfffeff8f
 80066ec:	40010000 	.word	0x40010000
 80066f0:	40010400 	.word	0x40010400

080066f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	4b1c      	ldr	r3, [pc, #112]	; (8006790 <TIM_OC6_SetConfig+0x9c>)
 8006720:	4013      	ands	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	021b      	lsls	r3, r3, #8
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	4313      	orrs	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006736:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	051b      	lsls	r3, r3, #20
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	4313      	orrs	r3, r2
 8006742:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a13      	ldr	r2, [pc, #76]	; (8006794 <TIM_OC6_SetConfig+0xa0>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d003      	beq.n	8006754 <TIM_OC6_SetConfig+0x60>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a12      	ldr	r2, [pc, #72]	; (8006798 <TIM_OC6_SetConfig+0xa4>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d109      	bne.n	8006768 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800675a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	029b      	lsls	r3, r3, #10
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	4313      	orrs	r3, r2
 8006766:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	621a      	str	r2, [r3, #32]
}
 8006782:	bf00      	nop
 8006784:	371c      	adds	r7, #28
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	feff8fff 	.word	0xfeff8fff
 8006794:	40010000 	.word	0x40010000
 8006798:	40010400 	.word	0x40010400

0800679c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067a6:	2300      	movs	r3, #0
 80067a8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	4b3e      	ldr	r3, [pc, #248]	; (80068c0 <TIM_SlaveTimer_SetConfig+0x124>)
 80067c8:	4013      	ands	r3, r2
 80067ca:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	2b70      	cmp	r3, #112	; 0x70
 80067e4:	d01a      	beq.n	800681c <TIM_SlaveTimer_SetConfig+0x80>
 80067e6:	2b70      	cmp	r3, #112	; 0x70
 80067e8:	d860      	bhi.n	80068ac <TIM_SlaveTimer_SetConfig+0x110>
 80067ea:	2b60      	cmp	r3, #96	; 0x60
 80067ec:	d054      	beq.n	8006898 <TIM_SlaveTimer_SetConfig+0xfc>
 80067ee:	2b60      	cmp	r3, #96	; 0x60
 80067f0:	d85c      	bhi.n	80068ac <TIM_SlaveTimer_SetConfig+0x110>
 80067f2:	2b50      	cmp	r3, #80	; 0x50
 80067f4:	d046      	beq.n	8006884 <TIM_SlaveTimer_SetConfig+0xe8>
 80067f6:	2b50      	cmp	r3, #80	; 0x50
 80067f8:	d858      	bhi.n	80068ac <TIM_SlaveTimer_SetConfig+0x110>
 80067fa:	2b40      	cmp	r3, #64	; 0x40
 80067fc:	d019      	beq.n	8006832 <TIM_SlaveTimer_SetConfig+0x96>
 80067fe:	2b40      	cmp	r3, #64	; 0x40
 8006800:	d854      	bhi.n	80068ac <TIM_SlaveTimer_SetConfig+0x110>
 8006802:	2b30      	cmp	r3, #48	; 0x30
 8006804:	d055      	beq.n	80068b2 <TIM_SlaveTimer_SetConfig+0x116>
 8006806:	2b30      	cmp	r3, #48	; 0x30
 8006808:	d850      	bhi.n	80068ac <TIM_SlaveTimer_SetConfig+0x110>
 800680a:	2b20      	cmp	r3, #32
 800680c:	d051      	beq.n	80068b2 <TIM_SlaveTimer_SetConfig+0x116>
 800680e:	2b20      	cmp	r3, #32
 8006810:	d84c      	bhi.n	80068ac <TIM_SlaveTimer_SetConfig+0x110>
 8006812:	2b00      	cmp	r3, #0
 8006814:	d04d      	beq.n	80068b2 <TIM_SlaveTimer_SetConfig+0x116>
 8006816:	2b10      	cmp	r3, #16
 8006818:	d04b      	beq.n	80068b2 <TIM_SlaveTimer_SetConfig+0x116>
 800681a:	e047      	b.n	80068ac <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6818      	ldr	r0, [r3, #0]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	68d9      	ldr	r1, [r3, #12]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	689a      	ldr	r2, [r3, #8]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	f000 f9d3 	bl	8006bd6 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006830:	e040      	b.n	80068b4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b05      	cmp	r3, #5
 8006838:	d101      	bne.n	800683e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e03b      	b.n	80068b6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6a1a      	ldr	r2, [r3, #32]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f022 0201 	bic.w	r2, r2, #1
 8006854:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006864:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	011b      	lsls	r3, r3, #4
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	4313      	orrs	r3, r2
 8006870:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	621a      	str	r2, [r3, #32]
      break;
 8006882:	e017      	b.n	80068b4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6818      	ldr	r0, [r3, #0]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	6899      	ldr	r1, [r3, #8]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	461a      	mov	r2, r3
 8006892:	f000 f88b 	bl	80069ac <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006896:	e00d      	b.n	80068b4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6818      	ldr	r0, [r3, #0]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	6899      	ldr	r1, [r3, #8]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	461a      	mov	r2, r3
 80068a6:	f000 f8ed 	bl	8006a84 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80068aa:	e003      	b.n	80068b4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	75fb      	strb	r3, [r7, #23]
      break;
 80068b0:	e000      	b.n	80068b4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80068b2:	bf00      	nop
  }

  return status;
 80068b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3718      	adds	r7, #24
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	fffefff8 	.word	0xfffefff8

080068c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
 80068d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	f023 0201 	bic.w	r2, r3, #1
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6a1b      	ldr	r3, [r3, #32]
 80068e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	4a28      	ldr	r2, [pc, #160]	; (8006990 <TIM_TI1_SetConfig+0xcc>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d01b      	beq.n	800692a <TIM_TI1_SetConfig+0x66>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068f8:	d017      	beq.n	800692a <TIM_TI1_SetConfig+0x66>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	4a25      	ldr	r2, [pc, #148]	; (8006994 <TIM_TI1_SetConfig+0xd0>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d013      	beq.n	800692a <TIM_TI1_SetConfig+0x66>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	4a24      	ldr	r2, [pc, #144]	; (8006998 <TIM_TI1_SetConfig+0xd4>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d00f      	beq.n	800692a <TIM_TI1_SetConfig+0x66>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	4a23      	ldr	r2, [pc, #140]	; (800699c <TIM_TI1_SetConfig+0xd8>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d00b      	beq.n	800692a <TIM_TI1_SetConfig+0x66>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	4a22      	ldr	r2, [pc, #136]	; (80069a0 <TIM_TI1_SetConfig+0xdc>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d007      	beq.n	800692a <TIM_TI1_SetConfig+0x66>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4a21      	ldr	r2, [pc, #132]	; (80069a4 <TIM_TI1_SetConfig+0xe0>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d003      	beq.n	800692a <TIM_TI1_SetConfig+0x66>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4a20      	ldr	r2, [pc, #128]	; (80069a8 <TIM_TI1_SetConfig+0xe4>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d101      	bne.n	800692e <TIM_TI1_SetConfig+0x6a>
 800692a:	2301      	movs	r3, #1
 800692c:	e000      	b.n	8006930 <TIM_TI1_SetConfig+0x6c>
 800692e:	2300      	movs	r3, #0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d008      	beq.n	8006946 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	f023 0303 	bic.w	r3, r3, #3
 800693a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4313      	orrs	r3, r2
 8006942:	617b      	str	r3, [r7, #20]
 8006944:	e003      	b.n	800694e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f043 0301 	orr.w	r3, r3, #1
 800694c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006954:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	011b      	lsls	r3, r3, #4
 800695a:	b2db      	uxtb	r3, r3
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	4313      	orrs	r3, r2
 8006960:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	f023 030a 	bic.w	r3, r3, #10
 8006968:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	f003 030a 	and.w	r3, r3, #10
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	4313      	orrs	r3, r2
 8006974:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	621a      	str	r2, [r3, #32]
}
 8006982:	bf00      	nop
 8006984:	371c      	adds	r7, #28
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	40010000 	.word	0x40010000
 8006994:	40000400 	.word	0x40000400
 8006998:	40000800 	.word	0x40000800
 800699c:	40000c00 	.word	0x40000c00
 80069a0:	40010400 	.word	0x40010400
 80069a4:	40014000 	.word	0x40014000
 80069a8:	40001800 	.word	0x40001800

080069ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	f023 0201 	bic.w	r2, r3, #1
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	011b      	lsls	r3, r3, #4
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	4313      	orrs	r3, r2
 80069e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f023 030a 	bic.w	r3, r3, #10
 80069e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	621a      	str	r2, [r3, #32]
}
 80069fe:	bf00      	nop
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b087      	sub	sp, #28
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	60f8      	str	r0, [r7, #12]
 8006a12:	60b9      	str	r1, [r7, #8]
 8006a14:	607a      	str	r2, [r7, #4]
 8006a16:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6a1b      	ldr	r3, [r3, #32]
 8006a1c:	f023 0210 	bic.w	r2, r3, #16
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	021b      	lsls	r3, r3, #8
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	031b      	lsls	r3, r3, #12
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a5c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	011b      	lsls	r3, r3, #4
 8006a62:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	621a      	str	r2, [r3, #32]
}
 8006a78:	bf00      	nop
 8006a7a:	371c      	adds	r7, #28
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6a1b      	ldr	r3, [r3, #32]
 8006a94:	f023 0210 	bic.w	r2, r3, #16
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006aae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	031b      	lsls	r3, r3, #12
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ac0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	011b      	lsls	r3, r3, #4
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	621a      	str	r2, [r3, #32]
}
 8006ad8:	bf00      	nop
 8006ada:	371c      	adds	r7, #28
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f023 0303 	bic.w	r3, r3, #3
 8006b10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b20:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	011b      	lsls	r3, r3, #4
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006b34:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	021b      	lsls	r3, r3, #8
 8006b3a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	621a      	str	r2, [r3, #32]
}
 8006b50:	bf00      	nop
 8006b52:	371c      	adds	r7, #28
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
 8006b68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	69db      	ldr	r3, [r3, #28]
 8006b7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	021b      	lsls	r3, r3, #8
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b9a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	031b      	lsls	r3, r3, #12
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006bae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	031b      	lsls	r3, r3, #12
 8006bb4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	621a      	str	r2, [r3, #32]
}
 8006bca:	bf00      	nop
 8006bcc:	371c      	adds	r7, #28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b087      	sub	sp, #28
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	60f8      	str	r0, [r7, #12]
 8006bde:	60b9      	str	r1, [r7, #8]
 8006be0:	607a      	str	r2, [r7, #4]
 8006be2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bf0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	021a      	lsls	r2, r3, #8
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	431a      	orrs	r2, r3
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	609a      	str	r2, [r3, #8]
}
 8006c0a:	bf00      	nop
 8006c0c:	371c      	adds	r7, #28
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
	...

08006c18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d101      	bne.n	8006c30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	e06d      	b.n	8006d0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a30      	ldr	r2, [pc, #192]	; (8006d18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d004      	beq.n	8006c64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a2f      	ldr	r2, [pc, #188]	; (8006d1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d108      	bne.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a20      	ldr	r2, [pc, #128]	; (8006d18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d022      	beq.n	8006ce0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca2:	d01d      	beq.n	8006ce0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a1d      	ldr	r2, [pc, #116]	; (8006d20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d018      	beq.n	8006ce0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a1c      	ldr	r2, [pc, #112]	; (8006d24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d013      	beq.n	8006ce0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a1a      	ldr	r2, [pc, #104]	; (8006d28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d00e      	beq.n	8006ce0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a15      	ldr	r2, [pc, #84]	; (8006d1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d009      	beq.n	8006ce0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a16      	ldr	r2, [pc, #88]	; (8006d2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d004      	beq.n	8006ce0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a15      	ldr	r2, [pc, #84]	; (8006d30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d10c      	bne.n	8006cfa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ce6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr
 8006d18:	40010000 	.word	0x40010000
 8006d1c:	40010400 	.word	0x40010400
 8006d20:	40000400 	.word	0x40000400
 8006d24:	40000800 	.word	0x40000800
 8006d28:	40000c00 	.word	0x40000c00
 8006d2c:	40014000 	.word	0x40014000
 8006d30:	40001800 	.word	0x40001800

08006d34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e040      	b.n	8006dc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d106      	bne.n	8006d5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7fb ff72 	bl	8002c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2224      	movs	r2, #36	; 0x24
 8006d60:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f022 0201 	bic.w	r2, r2, #1
 8006d70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f8c0 	bl	8006ef8 <UART_SetConfig>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d101      	bne.n	8006d82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e022      	b.n	8006dc8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d002      	beq.n	8006d90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fb18 	bl	80073c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689a      	ldr	r2, [r3, #8]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f042 0201 	orr.w	r2, r2, #1
 8006dbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fb9f 	bl	8007504 <UART_CheckIdleState>
 8006dc6:	4603      	mov	r3, r0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08a      	sub	sp, #40	; 0x28
 8006dd4:	af02      	add	r7, sp, #8
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	603b      	str	r3, [r7, #0]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006de4:	2b20      	cmp	r3, #32
 8006de6:	f040 8081 	bne.w	8006eec <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d002      	beq.n	8006df6 <HAL_UART_Transmit+0x26>
 8006df0:	88fb      	ldrh	r3, [r7, #6]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e079      	b.n	8006eee <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d101      	bne.n	8006e08 <HAL_UART_Transmit+0x38>
 8006e04:	2302      	movs	r3, #2
 8006e06:	e072      	b.n	8006eee <HAL_UART_Transmit+0x11e>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2221      	movs	r2, #33	; 0x21
 8006e1c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e1e:	f7fb ffe7 	bl	8002df0 <HAL_GetTick>
 8006e22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	88fa      	ldrh	r2, [r7, #6]
 8006e28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	88fa      	ldrh	r2, [r7, #6]
 8006e30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e3c:	d108      	bne.n	8006e50 <HAL_UART_Transmit+0x80>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d104      	bne.n	8006e50 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006e46:	2300      	movs	r3, #0
 8006e48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	61bb      	str	r3, [r7, #24]
 8006e4e:	e003      	b.n	8006e58 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e54:	2300      	movs	r3, #0
 8006e56:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006e60:	e02c      	b.n	8006ebc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	2180      	movs	r1, #128	; 0x80
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f000 fb92 	bl	8007596 <UART_WaitOnFlagUntilTimeout>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e038      	b.n	8006eee <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10b      	bne.n	8006e9a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	881b      	ldrh	r3, [r3, #0]
 8006e86:	461a      	mov	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e90:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	3302      	adds	r3, #2
 8006e96:	61bb      	str	r3, [r7, #24]
 8006e98:	e007      	b.n	8006eaa <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	781a      	ldrb	r2, [r3, #0]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1cc      	bne.n	8006e62 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	2140      	movs	r1, #64	; 0x40
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f000 fb5f 	bl	8007596 <UART_WaitOnFlagUntilTimeout>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e005      	b.n	8006eee <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2220      	movs	r2, #32
 8006ee6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	e000      	b.n	8006eee <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006eec:	2302      	movs	r3, #2
  }
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3720      	adds	r7, #32
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
	...

08006ef8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b088      	sub	sp, #32
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f00:	2300      	movs	r3, #0
 8006f02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	689a      	ldr	r2, [r3, #8]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	431a      	orrs	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	69db      	ldr	r3, [r3, #28]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	4ba6      	ldr	r3, [pc, #664]	; (80071bc <UART_SetConfig+0x2c4>)
 8006f24:	4013      	ands	r3, r2
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	6812      	ldr	r2, [r2, #0]
 8006f2a:	6979      	ldr	r1, [r7, #20]
 8006f2c:	430b      	orrs	r3, r1
 8006f2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68da      	ldr	r2, [r3, #12]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	430a      	orrs	r2, r1
 8006f44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a1b      	ldr	r3, [r3, #32]
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	430a      	orrs	r2, r1
 8006f68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a94      	ldr	r2, [pc, #592]	; (80071c0 <UART_SetConfig+0x2c8>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d120      	bne.n	8006fb6 <UART_SetConfig+0xbe>
 8006f74:	4b93      	ldr	r3, [pc, #588]	; (80071c4 <UART_SetConfig+0x2cc>)
 8006f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f7a:	f003 0303 	and.w	r3, r3, #3
 8006f7e:	2b03      	cmp	r3, #3
 8006f80:	d816      	bhi.n	8006fb0 <UART_SetConfig+0xb8>
 8006f82:	a201      	add	r2, pc, #4	; (adr r2, 8006f88 <UART_SetConfig+0x90>)
 8006f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f88:	08006f99 	.word	0x08006f99
 8006f8c:	08006fa5 	.word	0x08006fa5
 8006f90:	08006f9f 	.word	0x08006f9f
 8006f94:	08006fab 	.word	0x08006fab
 8006f98:	2301      	movs	r3, #1
 8006f9a:	77fb      	strb	r3, [r7, #31]
 8006f9c:	e150      	b.n	8007240 <UART_SetConfig+0x348>
 8006f9e:	2302      	movs	r3, #2
 8006fa0:	77fb      	strb	r3, [r7, #31]
 8006fa2:	e14d      	b.n	8007240 <UART_SetConfig+0x348>
 8006fa4:	2304      	movs	r3, #4
 8006fa6:	77fb      	strb	r3, [r7, #31]
 8006fa8:	e14a      	b.n	8007240 <UART_SetConfig+0x348>
 8006faa:	2308      	movs	r3, #8
 8006fac:	77fb      	strb	r3, [r7, #31]
 8006fae:	e147      	b.n	8007240 <UART_SetConfig+0x348>
 8006fb0:	2310      	movs	r3, #16
 8006fb2:	77fb      	strb	r3, [r7, #31]
 8006fb4:	e144      	b.n	8007240 <UART_SetConfig+0x348>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a83      	ldr	r2, [pc, #524]	; (80071c8 <UART_SetConfig+0x2d0>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d132      	bne.n	8007026 <UART_SetConfig+0x12e>
 8006fc0:	4b80      	ldr	r3, [pc, #512]	; (80071c4 <UART_SetConfig+0x2cc>)
 8006fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fc6:	f003 030c 	and.w	r3, r3, #12
 8006fca:	2b0c      	cmp	r3, #12
 8006fcc:	d828      	bhi.n	8007020 <UART_SetConfig+0x128>
 8006fce:	a201      	add	r2, pc, #4	; (adr r2, 8006fd4 <UART_SetConfig+0xdc>)
 8006fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd4:	08007009 	.word	0x08007009
 8006fd8:	08007021 	.word	0x08007021
 8006fdc:	08007021 	.word	0x08007021
 8006fe0:	08007021 	.word	0x08007021
 8006fe4:	08007015 	.word	0x08007015
 8006fe8:	08007021 	.word	0x08007021
 8006fec:	08007021 	.word	0x08007021
 8006ff0:	08007021 	.word	0x08007021
 8006ff4:	0800700f 	.word	0x0800700f
 8006ff8:	08007021 	.word	0x08007021
 8006ffc:	08007021 	.word	0x08007021
 8007000:	08007021 	.word	0x08007021
 8007004:	0800701b 	.word	0x0800701b
 8007008:	2300      	movs	r3, #0
 800700a:	77fb      	strb	r3, [r7, #31]
 800700c:	e118      	b.n	8007240 <UART_SetConfig+0x348>
 800700e:	2302      	movs	r3, #2
 8007010:	77fb      	strb	r3, [r7, #31]
 8007012:	e115      	b.n	8007240 <UART_SetConfig+0x348>
 8007014:	2304      	movs	r3, #4
 8007016:	77fb      	strb	r3, [r7, #31]
 8007018:	e112      	b.n	8007240 <UART_SetConfig+0x348>
 800701a:	2308      	movs	r3, #8
 800701c:	77fb      	strb	r3, [r7, #31]
 800701e:	e10f      	b.n	8007240 <UART_SetConfig+0x348>
 8007020:	2310      	movs	r3, #16
 8007022:	77fb      	strb	r3, [r7, #31]
 8007024:	e10c      	b.n	8007240 <UART_SetConfig+0x348>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a68      	ldr	r2, [pc, #416]	; (80071cc <UART_SetConfig+0x2d4>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d120      	bne.n	8007072 <UART_SetConfig+0x17a>
 8007030:	4b64      	ldr	r3, [pc, #400]	; (80071c4 <UART_SetConfig+0x2cc>)
 8007032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007036:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800703a:	2b30      	cmp	r3, #48	; 0x30
 800703c:	d013      	beq.n	8007066 <UART_SetConfig+0x16e>
 800703e:	2b30      	cmp	r3, #48	; 0x30
 8007040:	d814      	bhi.n	800706c <UART_SetConfig+0x174>
 8007042:	2b20      	cmp	r3, #32
 8007044:	d009      	beq.n	800705a <UART_SetConfig+0x162>
 8007046:	2b20      	cmp	r3, #32
 8007048:	d810      	bhi.n	800706c <UART_SetConfig+0x174>
 800704a:	2b00      	cmp	r3, #0
 800704c:	d002      	beq.n	8007054 <UART_SetConfig+0x15c>
 800704e:	2b10      	cmp	r3, #16
 8007050:	d006      	beq.n	8007060 <UART_SetConfig+0x168>
 8007052:	e00b      	b.n	800706c <UART_SetConfig+0x174>
 8007054:	2300      	movs	r3, #0
 8007056:	77fb      	strb	r3, [r7, #31]
 8007058:	e0f2      	b.n	8007240 <UART_SetConfig+0x348>
 800705a:	2302      	movs	r3, #2
 800705c:	77fb      	strb	r3, [r7, #31]
 800705e:	e0ef      	b.n	8007240 <UART_SetConfig+0x348>
 8007060:	2304      	movs	r3, #4
 8007062:	77fb      	strb	r3, [r7, #31]
 8007064:	e0ec      	b.n	8007240 <UART_SetConfig+0x348>
 8007066:	2308      	movs	r3, #8
 8007068:	77fb      	strb	r3, [r7, #31]
 800706a:	e0e9      	b.n	8007240 <UART_SetConfig+0x348>
 800706c:	2310      	movs	r3, #16
 800706e:	77fb      	strb	r3, [r7, #31]
 8007070:	e0e6      	b.n	8007240 <UART_SetConfig+0x348>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a56      	ldr	r2, [pc, #344]	; (80071d0 <UART_SetConfig+0x2d8>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d120      	bne.n	80070be <UART_SetConfig+0x1c6>
 800707c:	4b51      	ldr	r3, [pc, #324]	; (80071c4 <UART_SetConfig+0x2cc>)
 800707e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007082:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007086:	2bc0      	cmp	r3, #192	; 0xc0
 8007088:	d013      	beq.n	80070b2 <UART_SetConfig+0x1ba>
 800708a:	2bc0      	cmp	r3, #192	; 0xc0
 800708c:	d814      	bhi.n	80070b8 <UART_SetConfig+0x1c0>
 800708e:	2b80      	cmp	r3, #128	; 0x80
 8007090:	d009      	beq.n	80070a6 <UART_SetConfig+0x1ae>
 8007092:	2b80      	cmp	r3, #128	; 0x80
 8007094:	d810      	bhi.n	80070b8 <UART_SetConfig+0x1c0>
 8007096:	2b00      	cmp	r3, #0
 8007098:	d002      	beq.n	80070a0 <UART_SetConfig+0x1a8>
 800709a:	2b40      	cmp	r3, #64	; 0x40
 800709c:	d006      	beq.n	80070ac <UART_SetConfig+0x1b4>
 800709e:	e00b      	b.n	80070b8 <UART_SetConfig+0x1c0>
 80070a0:	2300      	movs	r3, #0
 80070a2:	77fb      	strb	r3, [r7, #31]
 80070a4:	e0cc      	b.n	8007240 <UART_SetConfig+0x348>
 80070a6:	2302      	movs	r3, #2
 80070a8:	77fb      	strb	r3, [r7, #31]
 80070aa:	e0c9      	b.n	8007240 <UART_SetConfig+0x348>
 80070ac:	2304      	movs	r3, #4
 80070ae:	77fb      	strb	r3, [r7, #31]
 80070b0:	e0c6      	b.n	8007240 <UART_SetConfig+0x348>
 80070b2:	2308      	movs	r3, #8
 80070b4:	77fb      	strb	r3, [r7, #31]
 80070b6:	e0c3      	b.n	8007240 <UART_SetConfig+0x348>
 80070b8:	2310      	movs	r3, #16
 80070ba:	77fb      	strb	r3, [r7, #31]
 80070bc:	e0c0      	b.n	8007240 <UART_SetConfig+0x348>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a44      	ldr	r2, [pc, #272]	; (80071d4 <UART_SetConfig+0x2dc>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d125      	bne.n	8007114 <UART_SetConfig+0x21c>
 80070c8:	4b3e      	ldr	r3, [pc, #248]	; (80071c4 <UART_SetConfig+0x2cc>)
 80070ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070d6:	d017      	beq.n	8007108 <UART_SetConfig+0x210>
 80070d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070dc:	d817      	bhi.n	800710e <UART_SetConfig+0x216>
 80070de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070e2:	d00b      	beq.n	80070fc <UART_SetConfig+0x204>
 80070e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070e8:	d811      	bhi.n	800710e <UART_SetConfig+0x216>
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d003      	beq.n	80070f6 <UART_SetConfig+0x1fe>
 80070ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070f2:	d006      	beq.n	8007102 <UART_SetConfig+0x20a>
 80070f4:	e00b      	b.n	800710e <UART_SetConfig+0x216>
 80070f6:	2300      	movs	r3, #0
 80070f8:	77fb      	strb	r3, [r7, #31]
 80070fa:	e0a1      	b.n	8007240 <UART_SetConfig+0x348>
 80070fc:	2302      	movs	r3, #2
 80070fe:	77fb      	strb	r3, [r7, #31]
 8007100:	e09e      	b.n	8007240 <UART_SetConfig+0x348>
 8007102:	2304      	movs	r3, #4
 8007104:	77fb      	strb	r3, [r7, #31]
 8007106:	e09b      	b.n	8007240 <UART_SetConfig+0x348>
 8007108:	2308      	movs	r3, #8
 800710a:	77fb      	strb	r3, [r7, #31]
 800710c:	e098      	b.n	8007240 <UART_SetConfig+0x348>
 800710e:	2310      	movs	r3, #16
 8007110:	77fb      	strb	r3, [r7, #31]
 8007112:	e095      	b.n	8007240 <UART_SetConfig+0x348>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a2f      	ldr	r2, [pc, #188]	; (80071d8 <UART_SetConfig+0x2e0>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d125      	bne.n	800716a <UART_SetConfig+0x272>
 800711e:	4b29      	ldr	r3, [pc, #164]	; (80071c4 <UART_SetConfig+0x2cc>)
 8007120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007124:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007128:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800712c:	d017      	beq.n	800715e <UART_SetConfig+0x266>
 800712e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007132:	d817      	bhi.n	8007164 <UART_SetConfig+0x26c>
 8007134:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007138:	d00b      	beq.n	8007152 <UART_SetConfig+0x25a>
 800713a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800713e:	d811      	bhi.n	8007164 <UART_SetConfig+0x26c>
 8007140:	2b00      	cmp	r3, #0
 8007142:	d003      	beq.n	800714c <UART_SetConfig+0x254>
 8007144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007148:	d006      	beq.n	8007158 <UART_SetConfig+0x260>
 800714a:	e00b      	b.n	8007164 <UART_SetConfig+0x26c>
 800714c:	2301      	movs	r3, #1
 800714e:	77fb      	strb	r3, [r7, #31]
 8007150:	e076      	b.n	8007240 <UART_SetConfig+0x348>
 8007152:	2302      	movs	r3, #2
 8007154:	77fb      	strb	r3, [r7, #31]
 8007156:	e073      	b.n	8007240 <UART_SetConfig+0x348>
 8007158:	2304      	movs	r3, #4
 800715a:	77fb      	strb	r3, [r7, #31]
 800715c:	e070      	b.n	8007240 <UART_SetConfig+0x348>
 800715e:	2308      	movs	r3, #8
 8007160:	77fb      	strb	r3, [r7, #31]
 8007162:	e06d      	b.n	8007240 <UART_SetConfig+0x348>
 8007164:	2310      	movs	r3, #16
 8007166:	77fb      	strb	r3, [r7, #31]
 8007168:	e06a      	b.n	8007240 <UART_SetConfig+0x348>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a1b      	ldr	r2, [pc, #108]	; (80071dc <UART_SetConfig+0x2e4>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d138      	bne.n	80071e6 <UART_SetConfig+0x2ee>
 8007174:	4b13      	ldr	r3, [pc, #76]	; (80071c4 <UART_SetConfig+0x2cc>)
 8007176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800717a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800717e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007182:	d017      	beq.n	80071b4 <UART_SetConfig+0x2bc>
 8007184:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007188:	d82a      	bhi.n	80071e0 <UART_SetConfig+0x2e8>
 800718a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800718e:	d00b      	beq.n	80071a8 <UART_SetConfig+0x2b0>
 8007190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007194:	d824      	bhi.n	80071e0 <UART_SetConfig+0x2e8>
 8007196:	2b00      	cmp	r3, #0
 8007198:	d003      	beq.n	80071a2 <UART_SetConfig+0x2aa>
 800719a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800719e:	d006      	beq.n	80071ae <UART_SetConfig+0x2b6>
 80071a0:	e01e      	b.n	80071e0 <UART_SetConfig+0x2e8>
 80071a2:	2300      	movs	r3, #0
 80071a4:	77fb      	strb	r3, [r7, #31]
 80071a6:	e04b      	b.n	8007240 <UART_SetConfig+0x348>
 80071a8:	2302      	movs	r3, #2
 80071aa:	77fb      	strb	r3, [r7, #31]
 80071ac:	e048      	b.n	8007240 <UART_SetConfig+0x348>
 80071ae:	2304      	movs	r3, #4
 80071b0:	77fb      	strb	r3, [r7, #31]
 80071b2:	e045      	b.n	8007240 <UART_SetConfig+0x348>
 80071b4:	2308      	movs	r3, #8
 80071b6:	77fb      	strb	r3, [r7, #31]
 80071b8:	e042      	b.n	8007240 <UART_SetConfig+0x348>
 80071ba:	bf00      	nop
 80071bc:	efff69f3 	.word	0xefff69f3
 80071c0:	40011000 	.word	0x40011000
 80071c4:	40023800 	.word	0x40023800
 80071c8:	40004400 	.word	0x40004400
 80071cc:	40004800 	.word	0x40004800
 80071d0:	40004c00 	.word	0x40004c00
 80071d4:	40005000 	.word	0x40005000
 80071d8:	40011400 	.word	0x40011400
 80071dc:	40007800 	.word	0x40007800
 80071e0:	2310      	movs	r3, #16
 80071e2:	77fb      	strb	r3, [r7, #31]
 80071e4:	e02c      	b.n	8007240 <UART_SetConfig+0x348>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a72      	ldr	r2, [pc, #456]	; (80073b4 <UART_SetConfig+0x4bc>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d125      	bne.n	800723c <UART_SetConfig+0x344>
 80071f0:	4b71      	ldr	r3, [pc, #452]	; (80073b8 <UART_SetConfig+0x4c0>)
 80071f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80071fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80071fe:	d017      	beq.n	8007230 <UART_SetConfig+0x338>
 8007200:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007204:	d817      	bhi.n	8007236 <UART_SetConfig+0x33e>
 8007206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800720a:	d00b      	beq.n	8007224 <UART_SetConfig+0x32c>
 800720c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007210:	d811      	bhi.n	8007236 <UART_SetConfig+0x33e>
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <UART_SetConfig+0x326>
 8007216:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800721a:	d006      	beq.n	800722a <UART_SetConfig+0x332>
 800721c:	e00b      	b.n	8007236 <UART_SetConfig+0x33e>
 800721e:	2300      	movs	r3, #0
 8007220:	77fb      	strb	r3, [r7, #31]
 8007222:	e00d      	b.n	8007240 <UART_SetConfig+0x348>
 8007224:	2302      	movs	r3, #2
 8007226:	77fb      	strb	r3, [r7, #31]
 8007228:	e00a      	b.n	8007240 <UART_SetConfig+0x348>
 800722a:	2304      	movs	r3, #4
 800722c:	77fb      	strb	r3, [r7, #31]
 800722e:	e007      	b.n	8007240 <UART_SetConfig+0x348>
 8007230:	2308      	movs	r3, #8
 8007232:	77fb      	strb	r3, [r7, #31]
 8007234:	e004      	b.n	8007240 <UART_SetConfig+0x348>
 8007236:	2310      	movs	r3, #16
 8007238:	77fb      	strb	r3, [r7, #31]
 800723a:	e001      	b.n	8007240 <UART_SetConfig+0x348>
 800723c:	2310      	movs	r3, #16
 800723e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	69db      	ldr	r3, [r3, #28]
 8007244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007248:	d15b      	bne.n	8007302 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800724a:	7ffb      	ldrb	r3, [r7, #31]
 800724c:	2b08      	cmp	r3, #8
 800724e:	d828      	bhi.n	80072a2 <UART_SetConfig+0x3aa>
 8007250:	a201      	add	r2, pc, #4	; (adr r2, 8007258 <UART_SetConfig+0x360>)
 8007252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007256:	bf00      	nop
 8007258:	0800727d 	.word	0x0800727d
 800725c:	08007285 	.word	0x08007285
 8007260:	0800728d 	.word	0x0800728d
 8007264:	080072a3 	.word	0x080072a3
 8007268:	08007293 	.word	0x08007293
 800726c:	080072a3 	.word	0x080072a3
 8007270:	080072a3 	.word	0x080072a3
 8007274:	080072a3 	.word	0x080072a3
 8007278:	0800729b 	.word	0x0800729b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800727c:	f7fd f940 	bl	8004500 <HAL_RCC_GetPCLK1Freq>
 8007280:	61b8      	str	r0, [r7, #24]
        break;
 8007282:	e013      	b.n	80072ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007284:	f7fd f950 	bl	8004528 <HAL_RCC_GetPCLK2Freq>
 8007288:	61b8      	str	r0, [r7, #24]
        break;
 800728a:	e00f      	b.n	80072ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800728c:	4b4b      	ldr	r3, [pc, #300]	; (80073bc <UART_SetConfig+0x4c4>)
 800728e:	61bb      	str	r3, [r7, #24]
        break;
 8007290:	e00c      	b.n	80072ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007292:	f7fd f863 	bl	800435c <HAL_RCC_GetSysClockFreq>
 8007296:	61b8      	str	r0, [r7, #24]
        break;
 8007298:	e008      	b.n	80072ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800729a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800729e:	61bb      	str	r3, [r7, #24]
        break;
 80072a0:	e004      	b.n	80072ac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	77bb      	strb	r3, [r7, #30]
        break;
 80072aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d074      	beq.n	800739c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	005a      	lsls	r2, r3, #1
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	085b      	lsrs	r3, r3, #1
 80072bc:	441a      	add	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	2b0f      	cmp	r3, #15
 80072cc:	d916      	bls.n	80072fc <UART_SetConfig+0x404>
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072d4:	d212      	bcs.n	80072fc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	b29b      	uxth	r3, r3
 80072da:	f023 030f 	bic.w	r3, r3, #15
 80072de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	085b      	lsrs	r3, r3, #1
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	f003 0307 	and.w	r3, r3, #7
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	89fb      	ldrh	r3, [r7, #14]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	89fa      	ldrh	r2, [r7, #14]
 80072f8:	60da      	str	r2, [r3, #12]
 80072fa:	e04f      	b.n	800739c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	77bb      	strb	r3, [r7, #30]
 8007300:	e04c      	b.n	800739c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007302:	7ffb      	ldrb	r3, [r7, #31]
 8007304:	2b08      	cmp	r3, #8
 8007306:	d828      	bhi.n	800735a <UART_SetConfig+0x462>
 8007308:	a201      	add	r2, pc, #4	; (adr r2, 8007310 <UART_SetConfig+0x418>)
 800730a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730e:	bf00      	nop
 8007310:	08007335 	.word	0x08007335
 8007314:	0800733d 	.word	0x0800733d
 8007318:	08007345 	.word	0x08007345
 800731c:	0800735b 	.word	0x0800735b
 8007320:	0800734b 	.word	0x0800734b
 8007324:	0800735b 	.word	0x0800735b
 8007328:	0800735b 	.word	0x0800735b
 800732c:	0800735b 	.word	0x0800735b
 8007330:	08007353 	.word	0x08007353
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007334:	f7fd f8e4 	bl	8004500 <HAL_RCC_GetPCLK1Freq>
 8007338:	61b8      	str	r0, [r7, #24]
        break;
 800733a:	e013      	b.n	8007364 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800733c:	f7fd f8f4 	bl	8004528 <HAL_RCC_GetPCLK2Freq>
 8007340:	61b8      	str	r0, [r7, #24]
        break;
 8007342:	e00f      	b.n	8007364 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007344:	4b1d      	ldr	r3, [pc, #116]	; (80073bc <UART_SetConfig+0x4c4>)
 8007346:	61bb      	str	r3, [r7, #24]
        break;
 8007348:	e00c      	b.n	8007364 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800734a:	f7fd f807 	bl	800435c <HAL_RCC_GetSysClockFreq>
 800734e:	61b8      	str	r0, [r7, #24]
        break;
 8007350:	e008      	b.n	8007364 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007356:	61bb      	str	r3, [r7, #24]
        break;
 8007358:	e004      	b.n	8007364 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800735a:	2300      	movs	r3, #0
 800735c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	77bb      	strb	r3, [r7, #30]
        break;
 8007362:	bf00      	nop
    }

    if (pclk != 0U)
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d018      	beq.n	800739c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	085a      	lsrs	r2, r3, #1
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	441a      	add	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	fbb2 f3f3 	udiv	r3, r2, r3
 800737c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	2b0f      	cmp	r3, #15
 8007382:	d909      	bls.n	8007398 <UART_SetConfig+0x4a0>
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800738a:	d205      	bcs.n	8007398 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	b29a      	uxth	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	60da      	str	r2, [r3, #12]
 8007396:	e001      	b.n	800739c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80073a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3720      	adds	r7, #32
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	40007c00 	.word	0x40007c00
 80073b8:	40023800 	.word	0x40023800
 80073bc:	00f42400 	.word	0x00f42400

080073c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00a      	beq.n	80073ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ee:	f003 0302 	and.w	r3, r3, #2
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00a      	beq.n	800740c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	430a      	orrs	r2, r1
 800740a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	f003 0304 	and.w	r3, r3, #4
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00a      	beq.n	800742e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	430a      	orrs	r2, r1
 800742c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007432:	f003 0308 	and.w	r3, r3, #8
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00a      	beq.n	8007450 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	430a      	orrs	r2, r1
 800744e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007454:	f003 0310 	and.w	r3, r3, #16
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00a      	beq.n	8007472 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	430a      	orrs	r2, r1
 8007470:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007476:	f003 0320 	and.w	r3, r3, #32
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00a      	beq.n	8007494 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	430a      	orrs	r2, r1
 8007492:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800749c:	2b00      	cmp	r3, #0
 800749e:	d01a      	beq.n	80074d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	430a      	orrs	r2, r1
 80074b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074be:	d10a      	bne.n	80074d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	430a      	orrs	r2, r1
 80074d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00a      	beq.n	80074f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	430a      	orrs	r2, r1
 80074f6:	605a      	str	r2, [r3, #4]
  }
}
 80074f8:	bf00      	nop
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af02      	add	r7, sp, #8
 800750a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007514:	f7fb fc6c 	bl	8002df0 <HAL_GetTick>
 8007518:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 0308 	and.w	r3, r3, #8
 8007524:	2b08      	cmp	r3, #8
 8007526:	d10e      	bne.n	8007546 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007528:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f82d 	bl	8007596 <UART_WaitOnFlagUntilTimeout>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d001      	beq.n	8007546 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007542:	2303      	movs	r3, #3
 8007544:	e023      	b.n	800758e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0304 	and.w	r3, r3, #4
 8007550:	2b04      	cmp	r3, #4
 8007552:	d10e      	bne.n	8007572 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007554:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007558:	9300      	str	r3, [sp, #0]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f817 	bl	8007596 <UART_WaitOnFlagUntilTimeout>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d001      	beq.n	8007572 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e00d      	b.n	800758e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2220      	movs	r2, #32
 8007576:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2220      	movs	r2, #32
 800757c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b09c      	sub	sp, #112	; 0x70
 800759a:	af00      	add	r7, sp, #0
 800759c:	60f8      	str	r0, [r7, #12]
 800759e:	60b9      	str	r1, [r7, #8]
 80075a0:	603b      	str	r3, [r7, #0]
 80075a2:	4613      	mov	r3, r2
 80075a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075a6:	e0a5      	b.n	80076f4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ae:	f000 80a1 	beq.w	80076f4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075b2:	f7fb fc1d 	bl	8002df0 <HAL_GetTick>
 80075b6:	4602      	mov	r2, r0
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80075be:	429a      	cmp	r2, r3
 80075c0:	d302      	bcc.n	80075c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80075c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d13e      	bne.n	8007646 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075d0:	e853 3f00 	ldrex	r3, [r3]
 80075d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80075d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80075dc:	667b      	str	r3, [r7, #100]	; 0x64
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	461a      	mov	r2, r3
 80075e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075e8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80075ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80075ee:	e841 2300 	strex	r3, r2, [r1]
 80075f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80075f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1e6      	bne.n	80075c8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	3308      	adds	r3, #8
 8007600:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007604:	e853 3f00 	ldrex	r3, [r3]
 8007608:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800760a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760c:	f023 0301 	bic.w	r3, r3, #1
 8007610:	663b      	str	r3, [r7, #96]	; 0x60
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	3308      	adds	r3, #8
 8007618:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800761a:	64ba      	str	r2, [r7, #72]	; 0x48
 800761c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007620:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007622:	e841 2300 	strex	r3, r2, [r1]
 8007626:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1e5      	bne.n	80075fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2220      	movs	r2, #32
 8007632:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2220      	movs	r2, #32
 8007638:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	e067      	b.n	8007716 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0304 	and.w	r3, r3, #4
 8007650:	2b00      	cmp	r3, #0
 8007652:	d04f      	beq.n	80076f4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	69db      	ldr	r3, [r3, #28]
 800765a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800765e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007662:	d147      	bne.n	80076f4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800766c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007676:	e853 3f00 	ldrex	r3, [r3]
 800767a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800767c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007682:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	461a      	mov	r2, r3
 800768a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800768c:	637b      	str	r3, [r7, #52]	; 0x34
 800768e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007690:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007694:	e841 2300 	strex	r3, r2, [r1]
 8007698:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800769a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1e6      	bne.n	800766e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	3308      	adds	r3, #8
 80076a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	e853 3f00 	ldrex	r3, [r3]
 80076ae:	613b      	str	r3, [r7, #16]
   return(result);
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	f023 0301 	bic.w	r3, r3, #1
 80076b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	3308      	adds	r3, #8
 80076be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80076c0:	623a      	str	r2, [r7, #32]
 80076c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c4:	69f9      	ldr	r1, [r7, #28]
 80076c6:	6a3a      	ldr	r2, [r7, #32]
 80076c8:	e841 2300 	strex	r3, r2, [r1]
 80076cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1e5      	bne.n	80076a0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2220      	movs	r2, #32
 80076d8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2220      	movs	r2, #32
 80076de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2220      	movs	r2, #32
 80076e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e010      	b.n	8007716 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	69da      	ldr	r2, [r3, #28]
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	4013      	ands	r3, r2
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	429a      	cmp	r2, r3
 8007702:	bf0c      	ite	eq
 8007704:	2301      	moveq	r3, #1
 8007706:	2300      	movne	r3, #0
 8007708:	b2db      	uxtb	r3, r3
 800770a:	461a      	mov	r2, r3
 800770c:	79fb      	ldrb	r3, [r7, #7]
 800770e:	429a      	cmp	r2, r3
 8007710:	f43f af4a 	beq.w	80075a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3770      	adds	r7, #112	; 0x70
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
	...

08007720 <__libc_init_array>:
 8007720:	b570      	push	{r4, r5, r6, lr}
 8007722:	4d0d      	ldr	r5, [pc, #52]	; (8007758 <__libc_init_array+0x38>)
 8007724:	4c0d      	ldr	r4, [pc, #52]	; (800775c <__libc_init_array+0x3c>)
 8007726:	1b64      	subs	r4, r4, r5
 8007728:	10a4      	asrs	r4, r4, #2
 800772a:	2600      	movs	r6, #0
 800772c:	42a6      	cmp	r6, r4
 800772e:	d109      	bne.n	8007744 <__libc_init_array+0x24>
 8007730:	4d0b      	ldr	r5, [pc, #44]	; (8007760 <__libc_init_array+0x40>)
 8007732:	4c0c      	ldr	r4, [pc, #48]	; (8007764 <__libc_init_array+0x44>)
 8007734:	f000 f864 	bl	8007800 <_init>
 8007738:	1b64      	subs	r4, r4, r5
 800773a:	10a4      	asrs	r4, r4, #2
 800773c:	2600      	movs	r6, #0
 800773e:	42a6      	cmp	r6, r4
 8007740:	d105      	bne.n	800774e <__libc_init_array+0x2e>
 8007742:	bd70      	pop	{r4, r5, r6, pc}
 8007744:	f855 3b04 	ldr.w	r3, [r5], #4
 8007748:	4798      	blx	r3
 800774a:	3601      	adds	r6, #1
 800774c:	e7ee      	b.n	800772c <__libc_init_array+0xc>
 800774e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007752:	4798      	blx	r3
 8007754:	3601      	adds	r6, #1
 8007756:	e7f2      	b.n	800773e <__libc_init_array+0x1e>
 8007758:	08007e70 	.word	0x08007e70
 800775c:	08007e70 	.word	0x08007e70
 8007760:	08007e70 	.word	0x08007e70
 8007764:	08007e74 	.word	0x08007e74

08007768 <memset>:
 8007768:	4402      	add	r2, r0
 800776a:	4603      	mov	r3, r0
 800776c:	4293      	cmp	r3, r2
 800776e:	d100      	bne.n	8007772 <memset+0xa>
 8007770:	4770      	bx	lr
 8007772:	f803 1b01 	strb.w	r1, [r3], #1
 8007776:	e7f9      	b.n	800776c <memset+0x4>

08007778 <__utoa>:
 8007778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800777a:	4c1f      	ldr	r4, [pc, #124]	; (80077f8 <__utoa+0x80>)
 800777c:	b08b      	sub	sp, #44	; 0x2c
 800777e:	4605      	mov	r5, r0
 8007780:	460b      	mov	r3, r1
 8007782:	466e      	mov	r6, sp
 8007784:	f104 0c20 	add.w	ip, r4, #32
 8007788:	6820      	ldr	r0, [r4, #0]
 800778a:	6861      	ldr	r1, [r4, #4]
 800778c:	4637      	mov	r7, r6
 800778e:	c703      	stmia	r7!, {r0, r1}
 8007790:	3408      	adds	r4, #8
 8007792:	4564      	cmp	r4, ip
 8007794:	463e      	mov	r6, r7
 8007796:	d1f7      	bne.n	8007788 <__utoa+0x10>
 8007798:	7921      	ldrb	r1, [r4, #4]
 800779a:	7139      	strb	r1, [r7, #4]
 800779c:	1e91      	subs	r1, r2, #2
 800779e:	6820      	ldr	r0, [r4, #0]
 80077a0:	6038      	str	r0, [r7, #0]
 80077a2:	2922      	cmp	r1, #34	; 0x22
 80077a4:	f04f 0100 	mov.w	r1, #0
 80077a8:	d904      	bls.n	80077b4 <__utoa+0x3c>
 80077aa:	7019      	strb	r1, [r3, #0]
 80077ac:	460b      	mov	r3, r1
 80077ae:	4618      	mov	r0, r3
 80077b0:	b00b      	add	sp, #44	; 0x2c
 80077b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077b4:	1e58      	subs	r0, r3, #1
 80077b6:	4684      	mov	ip, r0
 80077b8:	fbb5 f7f2 	udiv	r7, r5, r2
 80077bc:	fb02 5617 	mls	r6, r2, r7, r5
 80077c0:	3628      	adds	r6, #40	; 0x28
 80077c2:	446e      	add	r6, sp
 80077c4:	460c      	mov	r4, r1
 80077c6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80077ca:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80077ce:	462e      	mov	r6, r5
 80077d0:	42b2      	cmp	r2, r6
 80077d2:	f101 0101 	add.w	r1, r1, #1
 80077d6:	463d      	mov	r5, r7
 80077d8:	d9ee      	bls.n	80077b8 <__utoa+0x40>
 80077da:	2200      	movs	r2, #0
 80077dc:	545a      	strb	r2, [r3, r1]
 80077de:	1919      	adds	r1, r3, r4
 80077e0:	1aa5      	subs	r5, r4, r2
 80077e2:	42aa      	cmp	r2, r5
 80077e4:	dae3      	bge.n	80077ae <__utoa+0x36>
 80077e6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80077ea:	780e      	ldrb	r6, [r1, #0]
 80077ec:	7006      	strb	r6, [r0, #0]
 80077ee:	3201      	adds	r2, #1
 80077f0:	f801 5901 	strb.w	r5, [r1], #-1
 80077f4:	e7f4      	b.n	80077e0 <__utoa+0x68>
 80077f6:	bf00      	nop
 80077f8:	08007e40 	.word	0x08007e40

080077fc <utoa>:
 80077fc:	f7ff bfbc 	b.w	8007778 <__utoa>

08007800 <_init>:
 8007800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007802:	bf00      	nop
 8007804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007806:	bc08      	pop	{r3}
 8007808:	469e      	mov	lr, r3
 800780a:	4770      	bx	lr

0800780c <_fini>:
 800780c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780e:	bf00      	nop
 8007810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007812:	bc08      	pop	{r3}
 8007814:	469e      	mov	lr, r3
 8007816:	4770      	bx	lr
