
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000727c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  08007474  08007474  00017474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007968  08007968  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007968  08007968  00017968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007970  08007970  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007970  08007970  00017970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007974  08007974  00017974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  2000000c  08007984  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08007984  00020340  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016f4f  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037be  00000000  00000000  00036fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001328  00000000  00000000  0003a790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ec9  00000000  00000000  0003bab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b88e  00000000  00000000  0003c981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aea0  00000000  00000000  0006820f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010821e  00000000  00000000  000830af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e28  00000000  00000000  0018b2d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  001900f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800745c 	.word	0x0800745c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800745c 	.word	0x0800745c

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b970 	b.w	8000540 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9e08      	ldr	r6, [sp, #32]
 800027e:	460d      	mov	r5, r1
 8000280:	4604      	mov	r4, r0
 8000282:	460f      	mov	r7, r1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d14a      	bne.n	800031e <__udivmoddi4+0xa6>
 8000288:	428a      	cmp	r2, r1
 800028a:	4694      	mov	ip, r2
 800028c:	d965      	bls.n	800035a <__udivmoddi4+0xe2>
 800028e:	fab2 f382 	clz	r3, r2
 8000292:	b143      	cbz	r3, 80002a6 <__udivmoddi4+0x2e>
 8000294:	fa02 fc03 	lsl.w	ip, r2, r3
 8000298:	f1c3 0220 	rsb	r2, r3, #32
 800029c:	409f      	lsls	r7, r3
 800029e:	fa20 f202 	lsr.w	r2, r0, r2
 80002a2:	4317      	orrs	r7, r2
 80002a4:	409c      	lsls	r4, r3
 80002a6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002aa:	fa1f f58c 	uxth.w	r5, ip
 80002ae:	fbb7 f1fe 	udiv	r1, r7, lr
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002bc:	fb01 f005 	mul.w	r0, r1, r5
 80002c0:	4290      	cmp	r0, r2
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x62>
 80002c4:	eb1c 0202 	adds.w	r2, ip, r2
 80002c8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002cc:	f080 811c 	bcs.w	8000508 <__udivmoddi4+0x290>
 80002d0:	4290      	cmp	r0, r2
 80002d2:	f240 8119 	bls.w	8000508 <__udivmoddi4+0x290>
 80002d6:	3902      	subs	r1, #2
 80002d8:	4462      	add	r2, ip
 80002da:	1a12      	subs	r2, r2, r0
 80002dc:	b2a4      	uxth	r4, r4
 80002de:	fbb2 f0fe 	udiv	r0, r2, lr
 80002e2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ea:	fb00 f505 	mul.w	r5, r0, r5
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x90>
 80002f2:	eb1c 0404 	adds.w	r4, ip, r4
 80002f6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002fa:	f080 8107 	bcs.w	800050c <__udivmoddi4+0x294>
 80002fe:	42a5      	cmp	r5, r4
 8000300:	f240 8104 	bls.w	800050c <__udivmoddi4+0x294>
 8000304:	4464      	add	r4, ip
 8000306:	3802      	subs	r0, #2
 8000308:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800030c:	1b64      	subs	r4, r4, r5
 800030e:	2100      	movs	r1, #0
 8000310:	b11e      	cbz	r6, 800031a <__udivmoddi4+0xa2>
 8000312:	40dc      	lsrs	r4, r3
 8000314:	2300      	movs	r3, #0
 8000316:	e9c6 4300 	strd	r4, r3, [r6]
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0xbc>
 8000322:	2e00      	cmp	r6, #0
 8000324:	f000 80ed 	beq.w	8000502 <__udivmoddi4+0x28a>
 8000328:	2100      	movs	r1, #0
 800032a:	e9c6 0500 	strd	r0, r5, [r6]
 800032e:	4608      	mov	r0, r1
 8000330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000334:	fab3 f183 	clz	r1, r3
 8000338:	2900      	cmp	r1, #0
 800033a:	d149      	bne.n	80003d0 <__udivmoddi4+0x158>
 800033c:	42ab      	cmp	r3, r5
 800033e:	d302      	bcc.n	8000346 <__udivmoddi4+0xce>
 8000340:	4282      	cmp	r2, r0
 8000342:	f200 80f8 	bhi.w	8000536 <__udivmoddi4+0x2be>
 8000346:	1a84      	subs	r4, r0, r2
 8000348:	eb65 0203 	sbc.w	r2, r5, r3
 800034c:	2001      	movs	r0, #1
 800034e:	4617      	mov	r7, r2
 8000350:	2e00      	cmp	r6, #0
 8000352:	d0e2      	beq.n	800031a <__udivmoddi4+0xa2>
 8000354:	e9c6 4700 	strd	r4, r7, [r6]
 8000358:	e7df      	b.n	800031a <__udivmoddi4+0xa2>
 800035a:	b902      	cbnz	r2, 800035e <__udivmoddi4+0xe6>
 800035c:	deff      	udf	#255	; 0xff
 800035e:	fab2 f382 	clz	r3, r2
 8000362:	2b00      	cmp	r3, #0
 8000364:	f040 8090 	bne.w	8000488 <__udivmoddi4+0x210>
 8000368:	1a8a      	subs	r2, r1, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2101      	movs	r1, #1
 8000374:	fbb2 f5f7 	udiv	r5, r2, r7
 8000378:	fb07 2015 	mls	r0, r7, r5, r2
 800037c:	0c22      	lsrs	r2, r4, #16
 800037e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000382:	fb0e f005 	mul.w	r0, lr, r5
 8000386:	4290      	cmp	r0, r2
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x124>
 800038a:	eb1c 0202 	adds.w	r2, ip, r2
 800038e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x122>
 8000394:	4290      	cmp	r0, r2
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2b8>
 800039a:	4645      	mov	r5, r8
 800039c:	1a12      	subs	r2, r2, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003a4:	fb07 2210 	mls	r2, r7, r0, r2
 80003a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x14e>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x14c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2c2>
 80003c4:	4610      	mov	r0, r2
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ce:	e79f      	b.n	8000310 <__udivmoddi4+0x98>
 80003d0:	f1c1 0720 	rsb	r7, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa05 f401 	lsl.w	r4, r5, r1
 80003e2:	fa20 f307 	lsr.w	r3, r0, r7
 80003e6:	40fd      	lsrs	r5, r7
 80003e8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ec:	4323      	orrs	r3, r4
 80003ee:	fbb5 f8f9 	udiv	r8, r5, r9
 80003f2:	fa1f fe8c 	uxth.w	lr, ip
 80003f6:	fb09 5518 	mls	r5, r9, r8, r5
 80003fa:	0c1c      	lsrs	r4, r3, #16
 80003fc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000400:	fb08 f50e 	mul.w	r5, r8, lr
 8000404:	42a5      	cmp	r5, r4
 8000406:	fa02 f201 	lsl.w	r2, r2, r1
 800040a:	fa00 f001 	lsl.w	r0, r0, r1
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b0>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2b4>
 800041c:	42a5      	cmp	r5, r4
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2b4>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4464      	add	r4, ip
 8000428:	1b64      	subs	r4, r4, r5
 800042a:	b29d      	uxth	r5, r3
 800042c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000430:	fb09 4413 	mls	r4, r9, r3, r4
 8000434:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000438:	fb03 fe0e 	mul.w	lr, r3, lr
 800043c:	45a6      	cmp	lr, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1da>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f103 35ff 	add.w	r5, r3, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2ac>
 800044a:	45a6      	cmp	lr, r4
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2ac>
 800044e:	3b02      	subs	r3, #2
 8000450:	4464      	add	r4, ip
 8000452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000456:	fba3 9502 	umull	r9, r5, r3, r2
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	42ac      	cmp	r4, r5
 8000460:	46c8      	mov	r8, r9
 8000462:	46ae      	mov	lr, r5
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x29c>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x298>
 8000468:	b156      	cbz	r6, 8000480 <__udivmoddi4+0x208>
 800046a:	ebb0 0208 	subs.w	r2, r0, r8
 800046e:	eb64 040e 	sbc.w	r4, r4, lr
 8000472:	fa04 f707 	lsl.w	r7, r4, r7
 8000476:	40ca      	lsrs	r2, r1
 8000478:	40cc      	lsrs	r4, r1
 800047a:	4317      	orrs	r7, r2
 800047c:	e9c6 7400 	strd	r7, r4, [r6]
 8000480:	4618      	mov	r0, r3
 8000482:	2100      	movs	r1, #0
 8000484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000488:	f1c3 0120 	rsb	r1, r3, #32
 800048c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000490:	fa20 f201 	lsr.w	r2, r0, r1
 8000494:	fa25 f101 	lsr.w	r1, r5, r1
 8000498:	409d      	lsls	r5, r3
 800049a:	432a      	orrs	r2, r5
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a8:	fb07 1510 	mls	r5, r7, r0, r1
 80004ac:	0c11      	lsrs	r1, r2, #16
 80004ae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004b2:	fb00 f50e 	mul.w	r5, r0, lr
 80004b6:	428d      	cmp	r5, r1
 80004b8:	fa04 f403 	lsl.w	r4, r4, r3
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x258>
 80004be:	eb1c 0101 	adds.w	r1, ip, r1
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1b49      	subs	r1, r1, r5
 80004d2:	b292      	uxth	r2, r2
 80004d4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d8:	fb07 1115 	mls	r1, r7, r5, r1
 80004dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e0:	fb05 f10e 	mul.w	r1, r5, lr
 80004e4:	4291      	cmp	r1, r2
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x282>
 80004e8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ec:	f105 38ff 	add.w	r8, r5, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 80004f2:	4291      	cmp	r1, r2
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2a8>
 80004f6:	3d02      	subs	r5, #2
 80004f8:	4462      	add	r2, ip
 80004fa:	1a52      	subs	r2, r2, r1
 80004fc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0xfc>
 8000502:	4631      	mov	r1, r6
 8000504:	4630      	mov	r0, r6
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xa2>
 8000508:	4639      	mov	r1, r7
 800050a:	e6e6      	b.n	80002da <__udivmoddi4+0x62>
 800050c:	4610      	mov	r0, r2
 800050e:	e6fb      	b.n	8000308 <__udivmoddi4+0x90>
 8000510:	4548      	cmp	r0, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f0>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb65 0e0c 	sbc.w	lr, r5, ip
 800051c:	3b01      	subs	r3, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f0>
 8000520:	4645      	mov	r5, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x282>
 8000524:	462b      	mov	r3, r5
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1da>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x258>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b0>
 8000530:	3d02      	subs	r5, #2
 8000532:	4462      	add	r2, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x124>
 8000536:	4608      	mov	r0, r1
 8000538:	e70a      	b.n	8000350 <__udivmoddi4+0xd8>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x14e>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	b29a      	uxth	r2, r3
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	6879      	ldr	r1, [r7, #4]
 8000558:	4803      	ldr	r0, [pc, #12]	; (8000568 <uartTransmit+0x24>)
 800055a:	f006 fa71 	bl	8006a40 <HAL_UART_Transmit>
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	200002b4 	.word	0x200002b4

0800056c <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 8000576:	683a      	ldr	r2, [r7, #0]
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	4619      	mov	r1, r3
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f006 ff3e 	bl	8007400 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff fe55 	bl	8000238 <strlen>
 800058e:	4603      	mov	r3, r0
 8000590:	b29a      	uxth	r2, r3
 8000592:	f107 010c 	add.w	r1, r7, #12
 8000596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059a:	4803      	ldr	r0, [pc, #12]	; (80005a8 <uartTransmitNumber+0x3c>)
 800059c:	f006 fa50 	bl	8006a40 <HAL_UART_Transmit>
}
 80005a0:	bf00      	nop
 80005a2:	3718      	adds	r7, #24
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	200002b4 	.word	0x200002b4

080005ac <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 80005b2:	2114      	movs	r1, #20
 80005b4:	483b      	ldr	r0, [pc, #236]	; (80006a4 <collectHardwareInfo+0xf8>)
 80005b6:	f7ff ffc5 	bl	8000544 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 80005ba:	f001 ffcb 	bl	8002554 <HAL_GetDEVID>
 80005be:	4603      	mov	r3, r0
 80005c0:	210a      	movs	r1, #10
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff ffd2 	bl	800056c <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 80005c8:	2116      	movs	r1, #22
 80005ca:	4837      	ldr	r0, [pc, #220]	; (80006a8 <collectHardwareInfo+0xfc>)
 80005cc:	f7ff ffba 	bl	8000544 <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 80005d0:	f001 ffb4 	bl	800253c <HAL_GetREVID>
 80005d4:	4603      	mov	r3, r0
 80005d6:	f242 0201 	movw	r2, #8193	; 0x2001
 80005da:	4293      	cmp	r3, r2
 80005dc:	d016      	beq.n	800060c <collectHardwareInfo+0x60>
 80005de:	f242 0201 	movw	r2, #8193	; 0x2001
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d817      	bhi.n	8000616 <collectHardwareInfo+0x6a>
 80005e6:	f241 0201 	movw	r2, #4097	; 0x1001
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d004      	beq.n	80005f8 <collectHardwareInfo+0x4c>
 80005ee:	f241 0203 	movw	r2, #4099	; 0x1003
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d005      	beq.n	8000602 <collectHardwareInfo+0x56>
 80005f6:	e00e      	b.n	8000616 <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 80005f8:	2101      	movs	r1, #1
 80005fa:	482c      	ldr	r0, [pc, #176]	; (80006ac <collectHardwareInfo+0x100>)
 80005fc:	f7ff ffa2 	bl	8000544 <uartTransmit>
			break;
 8000600:	e011      	b.n	8000626 <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 8000602:	2101      	movs	r1, #1
 8000604:	482a      	ldr	r0, [pc, #168]	; (80006b0 <collectHardwareInfo+0x104>)
 8000606:	f7ff ff9d 	bl	8000544 <uartTransmit>
			break;
 800060a:	e00c      	b.n	8000626 <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 800060c:	2101      	movs	r1, #1
 800060e:	4829      	ldr	r0, [pc, #164]	; (80006b4 <collectHardwareInfo+0x108>)
 8000610:	f7ff ff98 	bl	8000544 <uartTransmit>
			break;
 8000614:	e007      	b.n	8000626 <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 8000616:	f001 ff91 	bl	800253c <HAL_GetREVID>
 800061a:	4603      	mov	r3, r0
 800061c:	210a      	movs	r1, #10
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff ffa4 	bl	800056c <uartTransmitNumber>
			break;
 8000624:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 8000626:	2114      	movs	r1, #20
 8000628:	4823      	ldr	r0, [pc, #140]	; (80006b8 <collectHardwareInfo+0x10c>)
 800062a:	f7ff ff8b 	bl	8000544 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 800062e:	f003 ff95 	bl	800455c <HAL_RCC_GetSysClockFreq>
 8000632:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a21      	ldr	r2, [pc, #132]	; (80006bc <collectHardwareInfo+0x110>)
 8000638:	fba2 2303 	umull	r2, r3, r2, r3
 800063c:	0c9b      	lsrs	r3, r3, #18
 800063e:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 8000640:	210a      	movs	r1, #10
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f7ff ff92 	bl	800056c <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 8000648:	2104      	movs	r1, #4
 800064a:	481d      	ldr	r0, [pc, #116]	; (80006c0 <collectHardwareInfo+0x114>)
 800064c:	f7ff ff7a 	bl	8000544 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 8000650:	2110      	movs	r1, #16
 8000652:	481c      	ldr	r0, [pc, #112]	; (80006c4 <collectHardwareInfo+0x118>)
 8000654:	f7ff ff76 	bl	8000544 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 8000658:	f001 ff8a 	bl	8002570 <HAL_GetUIDw0>
 800065c:	4603      	mov	r3, r0
 800065e:	2110      	movs	r1, #16
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ff83 	bl	800056c <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000666:	2101      	movs	r1, #1
 8000668:	4817      	ldr	r0, [pc, #92]	; (80006c8 <collectHardwareInfo+0x11c>)
 800066a:	f7ff ff6b 	bl	8000544 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 800066e:	f001 ff8b 	bl	8002588 <HAL_GetUIDw1>
 8000672:	4603      	mov	r3, r0
 8000674:	2110      	movs	r1, #16
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ff78 	bl	800056c <uartTransmitNumber>

	uartTransmit(" ", 1);
 800067c:	2101      	movs	r1, #1
 800067e:	4812      	ldr	r0, [pc, #72]	; (80006c8 <collectHardwareInfo+0x11c>)
 8000680:	f7ff ff60 	bl	8000544 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8000684:	f001 ff8c 	bl	80025a0 <HAL_GetUIDw2>
 8000688:	4603      	mov	r3, r0
 800068a:	2110      	movs	r1, #16
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff6d 	bl	800056c <uartTransmitNumber>

	uartTransmit("\n", 1);
 8000692:	2101      	movs	r1, #1
 8000694:	480d      	ldr	r0, [pc, #52]	; (80006cc <collectHardwareInfo+0x120>)
 8000696:	f7ff ff55 	bl	8000544 <uartTransmit>
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	08007474 	.word	0x08007474
 80006a8:	08007488 	.word	0x08007488
 80006ac:	080074a0 	.word	0x080074a0
 80006b0:	080074a4 	.word	0x080074a4
 80006b4:	080074a8 	.word	0x080074a8
 80006b8:	080074ac 	.word	0x080074ac
 80006bc:	431bde83 	.word	0x431bde83
 80006c0:	080074c0 	.word	0x080074c0
 80006c4:	080074c8 	.word	0x080074c8
 80006c8:	080074d8 	.word	0x080074d8
 80006cc:	080074dc 	.word	0x080074dc

080006d0 <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 80006d4:	2113      	movs	r1, #19
 80006d6:	4824      	ldr	r0, [pc, #144]	; (8000768 <collectMiddlewareInfo+0x98>)
 80006d8:	f7ff ff34 	bl	8000544 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 80006dc:	210a      	movs	r1, #10
 80006de:	2005      	movs	r0, #5
 80006e0:	f7ff ff44 	bl	800056c <uartTransmitNumber>
	uartTransmit(".", 1);
 80006e4:	2101      	movs	r1, #1
 80006e6:	4821      	ldr	r0, [pc, #132]	; (800076c <collectMiddlewareInfo+0x9c>)
 80006e8:	f7ff ff2c 	bl	8000544 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 80006ec:	210a      	movs	r1, #10
 80006ee:	2001      	movs	r0, #1
 80006f0:	f7ff ff3c 	bl	800056c <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 80006f4:	2111      	movs	r1, #17
 80006f6:	481e      	ldr	r0, [pc, #120]	; (8000770 <collectMiddlewareInfo+0xa0>)
 80006f8:	f7ff ff24 	bl	8000544 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 80006fc:	f001 ff14 	bl	8002528 <HAL_GetHalVersion>
 8000700:	4603      	mov	r3, r0
 8000702:	0e1b      	lsrs	r3, r3, #24
 8000704:	b2db      	uxtb	r3, r3
 8000706:	210a      	movs	r1, #10
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ff2f 	bl	800056c <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 800070e:	2101      	movs	r1, #1
 8000710:	4816      	ldr	r0, [pc, #88]	; (800076c <collectMiddlewareInfo+0x9c>)
 8000712:	f7ff ff17 	bl	8000544 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 8000716:	f001 ff07 	bl	8002528 <HAL_GetHalVersion>
 800071a:	4603      	mov	r3, r0
 800071c:	0c1b      	lsrs	r3, r3, #16
 800071e:	b2db      	uxtb	r3, r3
 8000720:	210a      	movs	r1, #10
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff ff22 	bl	800056c <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000728:	2101      	movs	r1, #1
 800072a:	4810      	ldr	r0, [pc, #64]	; (800076c <collectMiddlewareInfo+0x9c>)
 800072c:	f7ff ff0a 	bl	8000544 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8000730:	f001 fefa 	bl	8002528 <HAL_GetHalVersion>
 8000734:	4603      	mov	r3, r0
 8000736:	0a1b      	lsrs	r3, r3, #8
 8000738:	b2db      	uxtb	r3, r3
 800073a:	210a      	movs	r1, #10
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff15 	bl	800056c <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000742:	2101      	movs	r1, #1
 8000744:	4809      	ldr	r0, [pc, #36]	; (800076c <collectMiddlewareInfo+0x9c>)
 8000746:	f7ff fefd 	bl	8000544 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 800074a:	f001 feed 	bl	8002528 <HAL_GetHalVersion>
 800074e:	4603      	mov	r3, r0
 8000750:	b2db      	uxtb	r3, r3
 8000752:	210a      	movs	r1, #10
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff ff09 	bl	800056c <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 800075a:	2101      	movs	r1, #1
 800075c:	4805      	ldr	r0, [pc, #20]	; (8000774 <collectMiddlewareInfo+0xa4>)
 800075e:	f7ff fef1 	bl	8000544 <uartTransmit>
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	080074e0 	.word	0x080074e0
 800076c:	080074f4 	.word	0x080074f4
 8000770:	080074f8 	.word	0x080074f8
 8000774:	080074dc 	.word	0x080074dc

08000778 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 800077c:	2110      	movs	r1, #16
 800077e:	4826      	ldr	r0, [pc, #152]	; (8000818 <collectSoftwareInfo+0xa0>)
 8000780:	f7ff fee0 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8000784:	2108      	movs	r1, #8
 8000786:	4825      	ldr	r0, [pc, #148]	; (800081c <collectSoftwareInfo+0xa4>)
 8000788:	f7ff fedc 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 800078c:	2110      	movs	r1, #16
 800078e:	4824      	ldr	r0, [pc, #144]	; (8000820 <collectSoftwareInfo+0xa8>)
 8000790:	f7ff fed8 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8000794:	2106      	movs	r1, #6
 8000796:	4823      	ldr	r0, [pc, #140]	; (8000824 <collectSoftwareInfo+0xac>)
 8000798:	f7ff fed4 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 800079c:	210e      	movs	r1, #14
 800079e:	4822      	ldr	r0, [pc, #136]	; (8000828 <collectSoftwareInfo+0xb0>)
 80007a0:	f7ff fed0 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 80007a4:	2129      	movs	r1, #41	; 0x29
 80007a6:	4821      	ldr	r0, [pc, #132]	; (800082c <collectSoftwareInfo+0xb4>)
 80007a8:	f7ff fecc 	bl	8000544 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80007ac:	2101      	movs	r1, #1
 80007ae:	4820      	ldr	r0, [pc, #128]	; (8000830 <collectSoftwareInfo+0xb8>)
 80007b0:	f7ff fec8 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 80007b4:	2115      	movs	r1, #21
 80007b6:	481f      	ldr	r0, [pc, #124]	; (8000834 <collectSoftwareInfo+0xbc>)
 80007b8:	f7ff fec4 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 80007bc:	2105      	movs	r1, #5
 80007be:	481e      	ldr	r0, [pc, #120]	; (8000838 <collectSoftwareInfo+0xc0>)
 80007c0:	f7ff fec0 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 80007c4:	2114      	movs	r1, #20
 80007c6:	481d      	ldr	r0, [pc, #116]	; (800083c <collectSoftwareInfo+0xc4>)
 80007c8:	f7ff febc 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 80007cc:	2108      	movs	r1, #8
 80007ce:	481c      	ldr	r0, [pc, #112]	; (8000840 <collectSoftwareInfo+0xc8>)
 80007d0:	f7ff feb8 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 80007d4:	2115      	movs	r1, #21
 80007d6:	481b      	ldr	r0, [pc, #108]	; (8000844 <collectSoftwareInfo+0xcc>)
 80007d8:	f7ff feb4 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 80007dc:	2111      	movs	r1, #17
 80007de:	481a      	ldr	r0, [pc, #104]	; (8000848 <collectSoftwareInfo+0xd0>)
 80007e0:	f7ff feb0 	bl	8000544 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80007e4:	2101      	movs	r1, #1
 80007e6:	4812      	ldr	r0, [pc, #72]	; (8000830 <collectSoftwareInfo+0xb8>)
 80007e8:	f7ff feac 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 80007ec:	2110      	movs	r1, #16
 80007ee:	4817      	ldr	r0, [pc, #92]	; (800084c <collectSoftwareInfo+0xd4>)
 80007f0:	f7ff fea8 	bl	8000544 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 80007f4:	210b      	movs	r1, #11
 80007f6:	4816      	ldr	r0, [pc, #88]	; (8000850 <collectSoftwareInfo+0xd8>)
 80007f8:	f7ff fea4 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 80007fc:	2110      	movs	r1, #16
 80007fe:	4815      	ldr	r0, [pc, #84]	; (8000854 <collectSoftwareInfo+0xdc>)
 8000800:	f7ff fea0 	bl	8000544 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 8000804:	2109      	movs	r1, #9
 8000806:	4814      	ldr	r0, [pc, #80]	; (8000858 <collectSoftwareInfo+0xe0>)
 8000808:	f7ff fe9c 	bl	8000544 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 800080c:	2101      	movs	r1, #1
 800080e:	4808      	ldr	r0, [pc, #32]	; (8000830 <collectSoftwareInfo+0xb8>)
 8000810:	f7ff fe98 	bl	8000544 <uartTransmit>
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	0800750c 	.word	0x0800750c
 800081c:	0800751c 	.word	0x0800751c
 8000820:	08007524 	.word	0x08007524
 8000824:	08007534 	.word	0x08007534
 8000828:	0800753c 	.word	0x0800753c
 800082c:	0800754c 	.word	0x0800754c
 8000830:	080074dc 	.word	0x080074dc
 8000834:	08007578 	.word	0x08007578
 8000838:	08007590 	.word	0x08007590
 800083c:	08007598 	.word	0x08007598
 8000840:	080075ac 	.word	0x080075ac
 8000844:	080075b4 	.word	0x080075b4
 8000848:	080075cc 	.word	0x080075cc
 800084c:	080075e0 	.word	0x080075e0
 8000850:	080075f0 	.word	0x080075f0
 8000854:	080075fc 	.word	0x080075fc
 8000858:	0800760c 	.word	0x0800760c

0800085c <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 8000860:	2114      	movs	r1, #20
 8000862:	4814      	ldr	r0, [pc, #80]	; (80008b4 <collectGitcounts+0x58>)
 8000864:	f7ff fe6e 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 8000868:	2103      	movs	r1, #3
 800086a:	4813      	ldr	r0, [pc, #76]	; (80008b8 <collectGitcounts+0x5c>)
 800086c:	f7ff fe6a 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 8000870:	2116      	movs	r1, #22
 8000872:	4812      	ldr	r0, [pc, #72]	; (80008bc <collectGitcounts+0x60>)
 8000874:	f7ff fe66 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 8000878:	2103      	movs	r1, #3
 800087a:	4811      	ldr	r0, [pc, #68]	; (80008c0 <collectGitcounts+0x64>)
 800087c:	f7ff fe62 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 8000880:	211b      	movs	r1, #27
 8000882:	4810      	ldr	r0, [pc, #64]	; (80008c4 <collectGitcounts+0x68>)
 8000884:	f7ff fe5e 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 8000888:	2103      	movs	r1, #3
 800088a:	480f      	ldr	r0, [pc, #60]	; (80008c8 <collectGitcounts+0x6c>)
 800088c:	f7ff fe5a 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000890:	2115      	movs	r1, #21
 8000892:	480e      	ldr	r0, [pc, #56]	; (80008cc <collectGitcounts+0x70>)
 8000894:	f7ff fe56 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8000898:	2102      	movs	r1, #2
 800089a:	480d      	ldr	r0, [pc, #52]	; (80008d0 <collectGitcounts+0x74>)
 800089c:	f7ff fe52 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 80008a0:	2114      	movs	r1, #20
 80008a2:	480c      	ldr	r0, [pc, #48]	; (80008d4 <collectGitcounts+0x78>)
 80008a4:	f7ff fe4e 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 80008a8:	2102      	movs	r1, #2
 80008aa:	480b      	ldr	r0, [pc, #44]	; (80008d8 <collectGitcounts+0x7c>)
 80008ac:	f7ff fe4a 	bl	8000544 <uartTransmit>
}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	08007618 	.word	0x08007618
 80008b8:	0800762c 	.word	0x0800762c
 80008bc:	08007630 	.word	0x08007630
 80008c0:	08007648 	.word	0x08007648
 80008c4:	0800764c 	.word	0x0800764c
 80008c8:	08007668 	.word	0x08007668
 80008cc:	08007578 	.word	0x08007578
 80008d0:	0800766c 	.word	0x0800766c
 80008d4:	08007598 	.word	0x08007598
 80008d8:	08007670 	.word	0x08007670

080008dc <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 80008e0:	2111      	movs	r1, #17
 80008e2:	480e      	ldr	r0, [pc, #56]	; (800091c <collectSystemInfo+0x40>)
 80008e4:	f7ff fe2e 	bl	8000544 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 80008e8:	f7ff fe60 	bl	80005ac <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 80008ec:	2111      	movs	r1, #17
 80008ee:	480c      	ldr	r0, [pc, #48]	; (8000920 <collectSystemInfo+0x44>)
 80008f0:	f7ff fe28 	bl	8000544 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 80008f4:	f7ff ff40 	bl	8000778 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 80008f8:	2113      	movs	r1, #19
 80008fa:	480a      	ldr	r0, [pc, #40]	; (8000924 <collectSystemInfo+0x48>)
 80008fc:	f7ff fe22 	bl	8000544 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8000900:	f7ff fee6 	bl	80006d0 <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 8000904:	2113      	movs	r1, #19
 8000906:	4808      	ldr	r0, [pc, #32]	; (8000928 <collectSystemInfo+0x4c>)
 8000908:	f7ff fe1c 	bl	8000544 <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 800090c:	f7ff ffa6 	bl	800085c <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 8000910:	2103      	movs	r1, #3
 8000912:	4806      	ldr	r0, [pc, #24]	; (800092c <collectSystemInfo+0x50>)
 8000914:	f7ff fe16 	bl	8000544 <uartTransmit>
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	08007674 	.word	0x08007674
 8000920:	08007688 	.word	0x08007688
 8000924:	0800769c 	.word	0x0800769c
 8000928:	080076b0 	.word	0x080076b0
 800092c:	080076c4 	.word	0x080076c4

08000930 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 8000936:	2300      	movs	r3, #0
 8000938:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 800093a:	4b25      	ldr	r3, [pc, #148]	; (80009d0 <readResetSource+0xa0>)
 800093c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800093e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000942:	2b00      	cmp	r3, #0
 8000944:	d002      	beq.n	800094c <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	3301      	adds	r3, #1
 800094a:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 800094c:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <readResetSource+0xa0>)
 800094e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000950:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	3302      	adds	r3, #2
 800095c:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 800095e:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <readResetSource+0xa0>)
 8000960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000962:	2b00      	cmp	r3, #0
 8000964:	da02      	bge.n	800096c <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	3304      	adds	r3, #4
 800096a:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 800096c:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <readResetSource+0xa0>)
 800096e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000974:	2b00      	cmp	r3, #0
 8000976:	d002      	beq.n	800097e <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	3308      	adds	r3, #8
 800097c:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <readResetSource+0xa0>)
 8000980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000982:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000986:	2b00      	cmp	r3, #0
 8000988:	d002      	beq.n	8000990 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	3310      	adds	r3, #16
 800098e:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <readResetSource+0xa0>)
 8000992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000998:	2b00      	cmp	r3, #0
 800099a:	d002      	beq.n	80009a2 <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	3320      	adds	r3, #32
 80009a0:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <readResetSource+0xa0>)
 80009a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d002      	beq.n	80009b4 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	3340      	adds	r3, #64	; 0x40
 80009b2:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <readResetSource+0xa0>)
 80009b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009b8:	4a05      	ldr	r2, [pc, #20]	; (80009d0 <readResetSource+0xa0>)
 80009ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009be:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 80009c0:	79fb      	ldrb	r3, [r7, #7]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800

080009d4 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 80009de:	2106      	movs	r1, #6
 80009e0:	482a      	ldr	r0, [pc, #168]	; (8000a8c <printResetSource+0xb8>)
 80009e2:	f7ff fdaf 	bl	8000544 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d104      	bne.n	80009f6 <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 80009ec:	210f      	movs	r1, #15
 80009ee:	4828      	ldr	r0, [pc, #160]	; (8000a90 <printResetSource+0xbc>)
 80009f0:	f7ff fda8 	bl	8000544 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 80009f4:	e046      	b.n	8000a84 <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d003      	beq.n	8000a08 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8000a00:	2118      	movs	r1, #24
 8000a02:	4824      	ldr	r0, [pc, #144]	; (8000a94 <printResetSource+0xc0>)
 8000a04:	f7ff fd9e 	bl	8000544 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d003      	beq.n	8000a1a <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8000a12:	2116      	movs	r1, #22
 8000a14:	4820      	ldr	r0, [pc, #128]	; (8000a98 <printResetSource+0xc4>)
 8000a16:	f7ff fd95 	bl	8000544 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	f003 0304 	and.w	r3, r3, #4
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d003      	beq.n	8000a2c <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8000a24:	210a      	movs	r1, #10
 8000a26:	481d      	ldr	r0, [pc, #116]	; (8000a9c <printResetSource+0xc8>)
 8000a28:	f7ff fd8c 	bl	8000544 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	f003 0308 	and.w	r3, r3, #8
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d003      	beq.n	8000a3e <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 8000a36:	2110      	movs	r1, #16
 8000a38:	4819      	ldr	r0, [pc, #100]	; (8000aa0 <printResetSource+0xcc>)
 8000a3a:	f7ff fd83 	bl	8000544 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	f003 0310 	and.w	r3, r3, #16
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d003      	beq.n	8000a50 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 8000a48:	210f      	movs	r1, #15
 8000a4a:	4816      	ldr	r0, [pc, #88]	; (8000aa4 <printResetSource+0xd0>)
 8000a4c:	f7ff fd7a 	bl	8000544 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	f003 0320 	and.w	r3, r3, #32
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d003      	beq.n	8000a62 <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 8000a5a:	210f      	movs	r1, #15
 8000a5c:	4812      	ldr	r0, [pc, #72]	; (8000aa8 <printResetSource+0xd4>)
 8000a5e:	f7ff fd71 	bl	8000544 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d003      	beq.n	8000a74 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8000a6c:	210a      	movs	r1, #10
 8000a6e:	480f      	ldr	r0, [pc, #60]	; (8000aac <printResetSource+0xd8>)
 8000a70:	f7ff fd68 	bl	8000544 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8000a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	da03      	bge.n	8000a84 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8000a7c:	2105      	movs	r1, #5
 8000a7e:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <printResetSource+0xdc>)
 8000a80:	f7ff fd60 	bl	8000544 <uartTransmit>
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	080076c8 	.word	0x080076c8
 8000a90:	080076d0 	.word	0x080076d0
 8000a94:	080076e0 	.word	0x080076e0
 8000a98:	080076fc 	.word	0x080076fc
 8000a9c:	08007714 	.word	0x08007714
 8000aa0:	08007720 	.word	0x08007720
 8000aa4:	08007734 	.word	0x08007734
 8000aa8:	08007744 	.word	0x08007744
 8000aac:	08007754 	.word	0x08007754
 8000ab0:	08007760 	.word	0x08007760

08000ab4 <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (status == HAL_OK) {													// HAL OK
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d104      	bne.n	8000ace <hal_error+0x1a>
		uartTransmit("HAL OK\n", 7);
 8000ac4:	2107      	movs	r1, #7
 8000ac6:	480f      	ldr	r0, [pc, #60]	; (8000b04 <hal_error+0x50>)
 8000ac8:	f7ff fd3c 	bl	8000544 <uartTransmit>
	}
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 8000acc:	e016      	b.n	8000afc <hal_error+0x48>
	else if (status == HAL_ERROR) {											// HAL Error
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d104      	bne.n	8000ade <hal_error+0x2a>
		uartTransmit("HAL ERROR\n", 10);
 8000ad4:	210a      	movs	r1, #10
 8000ad6:	480c      	ldr	r0, [pc, #48]	; (8000b08 <hal_error+0x54>)
 8000ad8:	f7ff fd34 	bl	8000544 <uartTransmit>
}
 8000adc:	e00e      	b.n	8000afc <hal_error+0x48>
	else if (status == HAL_BUSY) {											// HAL Beschaeftigt
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	2b02      	cmp	r3, #2
 8000ae2:	d104      	bne.n	8000aee <hal_error+0x3a>
		uartTransmit("HAL BUSY\n", 9);
 8000ae4:	2109      	movs	r1, #9
 8000ae6:	4809      	ldr	r0, [pc, #36]	; (8000b0c <hal_error+0x58>)
 8000ae8:	f7ff fd2c 	bl	8000544 <uartTransmit>
}
 8000aec:	e006      	b.n	8000afc <hal_error+0x48>
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	2b03      	cmp	r3, #3
 8000af2:	d103      	bne.n	8000afc <hal_error+0x48>
		uartTransmit("HAL TIMEOUT\n", 12);
 8000af4:	210c      	movs	r1, #12
 8000af6:	4806      	ldr	r0, [pc, #24]	; (8000b10 <hal_error+0x5c>)
 8000af8:	f7ff fd24 	bl	8000544 <uartTransmit>
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	08007768 	.word	0x08007768
 8000b08:	08007770 	.word	0x08007770
 8000b0c:	0800777c 	.word	0x0800777c
 8000b10:	08007788 	.word	0x08007788

08000b14 <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 8000b18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b1c:	4850      	ldr	r0, [pc, #320]	; (8000c60 <readall_inputs+0x14c>)
 8000b1e:	f003 f901 	bl	8003d24 <HAL_GPIO_ReadPin>
 8000b22:	4603      	mov	r3, r0
 8000b24:	f003 0301 	and.w	r3, r3, #1
 8000b28:	b2d9      	uxtb	r1, r3
 8000b2a:	4a4e      	ldr	r2, [pc, #312]	; (8000c64 <readall_inputs+0x150>)
 8000b2c:	7813      	ldrb	r3, [r2, #0]
 8000b2e:	f361 03c3 	bfi	r3, r1, #3, #1
 8000b32:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 8000b34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b38:	484b      	ldr	r0, [pc, #300]	; (8000c68 <readall_inputs+0x154>)
 8000b3a:	f003 f8f3 	bl	8003d24 <HAL_GPIO_ReadPin>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	b2d9      	uxtb	r1, r3
 8000b46:	4a47      	ldr	r2, [pc, #284]	; (8000c64 <readall_inputs+0x150>)
 8000b48:	7813      	ldrb	r3, [r2, #0]
 8000b4a:	f361 1304 	bfi	r3, r1, #4, #1
 8000b4e:	7013      	strb	r3, [r2, #0]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 8000b50:	2101      	movs	r1, #1
 8000b52:	4846      	ldr	r0, [pc, #280]	; (8000c6c <readall_inputs+0x158>)
 8000b54:	f003 f8e6 	bl	8003d24 <HAL_GPIO_ReadPin>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	b2d9      	uxtb	r1, r3
 8000b60:	4a40      	ldr	r2, [pc, #256]	; (8000c64 <readall_inputs+0x150>)
 8000b62:	7813      	ldrb	r3, [r2, #0]
 8000b64:	f361 1345 	bfi	r3, r1, #5, #1
 8000b68:	7013      	strb	r3, [r2, #0]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8000b6a:	2104      	movs	r1, #4
 8000b6c:	483f      	ldr	r0, [pc, #252]	; (8000c6c <readall_inputs+0x158>)
 8000b6e:	f003 f8d9 	bl	8003d24 <HAL_GPIO_ReadPin>
 8000b72:	4603      	mov	r3, r0
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	b2d9      	uxtb	r1, r3
 8000b7a:	4a3a      	ldr	r2, [pc, #232]	; (8000c64 <readall_inputs+0x150>)
 8000b7c:	7813      	ldrb	r3, [r2, #0]
 8000b7e:	f361 1386 	bfi	r3, r1, #6, #1
 8000b82:	7013      	strb	r3, [r2, #0]

	// SDC-Eingaenge einlesen
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);					// IMD OK, Akku
 8000b84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b88:	4835      	ldr	r0, [pc, #212]	; (8000c60 <readall_inputs+0x14c>)
 8000b8a:	f003 f8cb 	bl	8003d24 <HAL_GPIO_ReadPin>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	b2d9      	uxtb	r1, r3
 8000b96:	4a36      	ldr	r2, [pc, #216]	; (8000c70 <readall_inputs+0x15c>)
 8000b98:	7813      	ldrb	r3, [r2, #0]
 8000b9a:	f361 0300 	bfi	r3, r1, #0, #1
 8000b9e:	7013      	strb	r3, [r2, #0]
	sdc_in.HVIL = HAL_GPIO_ReadPin(SENSE_SDC_HVIL_GPIO_Port, SENSE_SDC_HVIL_Pin);				// Shutdown-Circuit HVIL, OK
 8000ba0:	2108      	movs	r1, #8
 8000ba2:	482f      	ldr	r0, [pc, #188]	; (8000c60 <readall_inputs+0x14c>)
 8000ba4:	f003 f8be 	bl	8003d24 <HAL_GPIO_ReadPin>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	b2d9      	uxtb	r1, r3
 8000bb0:	4a2f      	ldr	r2, [pc, #188]	; (8000c70 <readall_inputs+0x15c>)
 8000bb2:	7813      	ldrb	r3, [r2, #0]
 8000bb4:	f361 0382 	bfi	r3, r1, #2, #1
 8000bb8:	7013      	strb	r3, [r2, #0]
	sdc_in.MotorSDC = HAL_GPIO_ReadPin(SENSE_SDC_MOTOR_GPIO_Port, SENSE_SDC_MOTOR_Pin);			// Shutdown-Circuit Akku, OK
 8000bba:	2120      	movs	r1, #32
 8000bbc:	4828      	ldr	r0, [pc, #160]	; (8000c60 <readall_inputs+0x14c>)
 8000bbe:	f003 f8b1 	bl	8003d24 <HAL_GPIO_ReadPin>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	b2d9      	uxtb	r1, r3
 8000bca:	4a29      	ldr	r2, [pc, #164]	; (8000c70 <readall_inputs+0x15c>)
 8000bcc:	7813      	ldrb	r3, [r2, #0]
 8000bce:	f361 03c3 	bfi	r3, r1, #3, #1
 8000bd2:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8000bd4:	2110      	movs	r1, #16
 8000bd6:	4822      	ldr	r0, [pc, #136]	; (8000c60 <readall_inputs+0x14c>)
 8000bd8:	f003 f8a4 	bl	8003d24 <HAL_GPIO_ReadPin>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	b2d9      	uxtb	r1, r3
 8000be4:	4a22      	ldr	r2, [pc, #136]	; (8000c70 <readall_inputs+0x15c>)
 8000be6:	7813      	ldrb	r3, [r2, #0]
 8000be8:	f361 0341 	bfi	r3, r1, #1, #1
 8000bec:	7013      	strb	r3, [r2, #0]
	sdc_in.PrechargeIn = HAL_GPIO_ReadPin(PRECHARGE_IN_GPIO_Port, PRECHARGE_IN_Pin);			// Eingang Precharge abgeschlossen
 8000bee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bf2:	4820      	ldr	r0, [pc, #128]	; (8000c74 <readall_inputs+0x160>)
 8000bf4:	f003 f896 	bl	8003d24 <HAL_GPIO_ReadPin>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	b2d9      	uxtb	r1, r3
 8000c00:	4a1b      	ldr	r2, [pc, #108]	; (8000c70 <readall_inputs+0x15c>)
 8000c02:	7813      	ldrb	r3, [r2, #0]
 8000c04:	f361 1304 	bfi	r3, r1, #4, #1
 8000c08:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.OVC = HAL_GPIO_ReadPin(OVC_SENSE_GPIO_Port, OVC_SENSE_Pin);						// Eingang Overcurrent erkannt
 8000c0a:	2104      	movs	r1, #4
 8000c0c:	4819      	ldr	r0, [pc, #100]	; (8000c74 <readall_inputs+0x160>)
 8000c0e:	f003 f889 	bl	8003d24 <HAL_GPIO_ReadPin>
 8000c12:	4603      	mov	r3, r0
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	b2d9      	uxtb	r1, r3
 8000c1a:	4a17      	ldr	r2, [pc, #92]	; (8000c78 <readall_inputs+0x164>)
 8000c1c:	7813      	ldrb	r3, [r2, #0]
 8000c1e:	f361 0300 	bfi	r3, r1, #0, #1
 8000c22:	7013      	strb	r3, [r2, #0]
	komfort_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8000c24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c28:	4810      	ldr	r0, [pc, #64]	; (8000c6c <readall_inputs+0x158>)
 8000c2a:	f003 f87b 	bl	8003d24 <HAL_GPIO_ReadPin>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	b2d9      	uxtb	r1, r3
 8000c36:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <readall_inputs+0x164>)
 8000c38:	7813      	ldrb	r3, [r2, #0]
 8000c3a:	f361 0341 	bfi	r3, r1, #1, #1
 8000c3e:	7013      	strb	r3, [r2, #0]
	komfort_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8000c40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c44:	4809      	ldr	r0, [pc, #36]	; (8000c6c <readall_inputs+0x158>)
 8000c46:	f003 f86d 	bl	8003d24 <HAL_GPIO_ReadPin>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	b2d9      	uxtb	r1, r3
 8000c52:	4a09      	ldr	r2, [pc, #36]	; (8000c78 <readall_inputs+0x164>)
 8000c54:	7813      	ldrb	r3, [r2, #0]
 8000c56:	f361 0382 	bfi	r3, r1, #2, #1
 8000c5a:	7013      	strb	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40021000 	.word	0x40021000
 8000c64:	20000028 	.word	0x20000028
 8000c68:	40020c00 	.word	0x40020c00
 8000c6c:	40020000 	.word	0x40020000
 8000c70:	2000002c 	.word	0x2000002c
 8000c74:	40021400 	.word	0x40021400
 8000c78:	20000030 	.word	0x20000030

08000c7c <calculateMovingAverage>:
#include "my_math.h"

// Gleitenden Mittelwert berechnen, sehr Speicher arm
//----------------------------------------------------------------------
int calculateMovingAverage(int oldValue, int newValue, int n)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
	return (oldValue + ((newValue - oldValue) / n));						// MovingAverage Calculation x_n  = x_{n-1} + ((x_n+x_{n-1})/n)
 8000c88:	68ba      	ldr	r2, [r7, #8]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	1ad2      	subs	r2, r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	fb92 f2f3 	sdiv	r2, r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4413      	add	r3, r2
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);								// Blaue LED Platine setzen
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2180      	movs	r1, #128	; 0x80
 8000cac:	481b      	ldr	r0, [pc, #108]	; (8000d1c <testPCB_Leds+0x78>)
 8000cae:	f003 f851 	bl	8003d54 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000cb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cb6:	f001 fc13 	bl	80024e0 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);							// Blaue LED Platine zuruecksetzen
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2180      	movs	r1, #128	; 0x80
 8000cbe:	4817      	ldr	r0, [pc, #92]	; (8000d1c <testPCB_Leds+0x78>)
 8000cc0:	f003 f848 	bl	8003d54 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000cc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cc8:	f001 fc0a 	bl	80024e0 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);							// Gruene LED Platine setzen
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2104      	movs	r1, #4
 8000cd0:	4812      	ldr	r0, [pc, #72]	; (8000d1c <testPCB_Leds+0x78>)
 8000cd2:	f003 f83f 	bl	8003d54 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000cd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cda:	f001 fc01 	bl	80024e0 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);							// Gruene LED Platine zuruecksetzen
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2104      	movs	r1, #4
 8000ce2:	480e      	ldr	r0, [pc, #56]	; (8000d1c <testPCB_Leds+0x78>)
 8000ce4:	f003 f836 	bl	8003d54 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000ce8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cec:	f001 fbf8 	bl	80024e0 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);								// Rote LED Platine setzen
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cf6:	4809      	ldr	r0, [pc, #36]	; (8000d1c <testPCB_Leds+0x78>)
 8000cf8:	f003 f82c 	bl	8003d54 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000cfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d00:	f001 fbee 	bl	80024e0 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);								// Rote LED Platine zuruecksetzen
 8000d04:	2200      	movs	r2, #0
 8000d06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d0a:	4804      	ldr	r0, [pc, #16]	; (8000d1c <testPCB_Leds+0x78>)
 8000d0c:	f003 f822 	bl	8003d54 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000d10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d14:	f001 fbe4 	bl	80024e0 <HAL_Delay>
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40020400 	.word	0x40020400

08000d20 <setPowerOn>:
//----------------------------------------------------------------------

// Selbsterhaltung einschalten
//----------------------------------------------------------------------
void setPowerOn(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	// Status PowerOn setzen
	system_out.Power_On = 1;
 8000d24:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <setPowerOn+0x28>)
 8000d26:	7813      	ldrb	r3, [r2, #0]
 8000d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d2c:	7013      	strb	r3, [r2, #0]

	// Selbsterhaltung einschalten
	HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, system_out.Power_On);						// BMS bleibt aktiv bei auschalten von KL15
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <setPowerOn+0x28>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	461a      	mov	r2, r3
 8000d3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d3e:	4803      	ldr	r0, [pc, #12]	; (8000d4c <setPowerOn+0x2c>)
 8000d40:	f003 f808 	bl	8003d54 <HAL_GPIO_WritePin>
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000034 	.word	0x20000034
 8000d4c:	40020800 	.word	0x40020800

08000d50 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d56:	463b      	mov	r3, r7
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d62:	4b44      	ldr	r3, [pc, #272]	; (8000e74 <MX_ADC1_Init+0x124>)
 8000d64:	4a44      	ldr	r2, [pc, #272]	; (8000e78 <MX_ADC1_Init+0x128>)
 8000d66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d68:	4b42      	ldr	r3, [pc, #264]	; (8000e74 <MX_ADC1_Init+0x124>)
 8000d6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d6e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d70:	4b40      	ldr	r3, [pc, #256]	; (8000e74 <MX_ADC1_Init+0x124>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d76:	4b3f      	ldr	r3, [pc, #252]	; (8000e74 <MX_ADC1_Init+0x124>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d7c:	4b3d      	ldr	r3, [pc, #244]	; (8000e74 <MX_ADC1_Init+0x124>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d82:	4b3c      	ldr	r3, [pc, #240]	; (8000e74 <MX_ADC1_Init+0x124>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d8a:	4b3a      	ldr	r3, [pc, #232]	; (8000e74 <MX_ADC1_Init+0x124>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d90:	4b38      	ldr	r3, [pc, #224]	; (8000e74 <MX_ADC1_Init+0x124>)
 8000d92:	4a3a      	ldr	r2, [pc, #232]	; (8000e7c <MX_ADC1_Init+0x12c>)
 8000d94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d96:	4b37      	ldr	r3, [pc, #220]	; (8000e74 <MX_ADC1_Init+0x124>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8000d9c:	4b35      	ldr	r3, [pc, #212]	; (8000e74 <MX_ADC1_Init+0x124>)
 8000d9e:	2206      	movs	r2, #6
 8000da0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000da2:	4b34      	ldr	r3, [pc, #208]	; (8000e74 <MX_ADC1_Init+0x124>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000daa:	4b32      	ldr	r3, [pc, #200]	; (8000e74 <MX_ADC1_Init+0x124>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000db0:	4830      	ldr	r0, [pc, #192]	; (8000e74 <MX_ADC1_Init+0x124>)
 8000db2:	f001 fc01 	bl	80025b8 <HAL_ADC_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000dbc:	f000 fef8 	bl	8001bb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000dc0:	2307      	movs	r3, #7
 8000dc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dcc:	463b      	mov	r3, r7
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4828      	ldr	r0, [pc, #160]	; (8000e74 <MX_ADC1_Init+0x124>)
 8000dd2:	f001 fc35 	bl	8002640 <HAL_ADC_ConfigChannel>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ddc:	f000 fee8 	bl	8001bb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000de0:	2303      	movs	r3, #3
 8000de2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000de4:	2302      	movs	r3, #2
 8000de6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de8:	463b      	mov	r3, r7
 8000dea:	4619      	mov	r1, r3
 8000dec:	4821      	ldr	r0, [pc, #132]	; (8000e74 <MX_ADC1_Init+0x124>)
 8000dee:	f001 fc27 	bl	8002640 <HAL_ADC_ConfigChannel>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000df8:	f000 feda 	bl	8001bb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e00:	2303      	movs	r3, #3
 8000e02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e04:	463b      	mov	r3, r7
 8000e06:	4619      	mov	r1, r3
 8000e08:	481a      	ldr	r0, [pc, #104]	; (8000e74 <MX_ADC1_Init+0x124>)
 8000e0a:	f001 fc19 	bl	8002640 <HAL_ADC_ConfigChannel>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000e14:	f000 fecc 	bl	8001bb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e18:	2305      	movs	r3, #5
 8000e1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e20:	463b      	mov	r3, r7
 8000e22:	4619      	mov	r1, r3
 8000e24:	4813      	ldr	r0, [pc, #76]	; (8000e74 <MX_ADC1_Init+0x124>)
 8000e26:	f001 fc0b 	bl	8002640 <HAL_ADC_ConfigChannel>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000e30:	f000 febe 	bl	8001bb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e34:	2306      	movs	r3, #6
 8000e36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000e38:	2305      	movs	r3, #5
 8000e3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e3c:	463b      	mov	r3, r7
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480c      	ldr	r0, [pc, #48]	; (8000e74 <MX_ADC1_Init+0x124>)
 8000e42:	f001 fbfd 	bl	8002640 <HAL_ADC_ConfigChannel>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000e4c:	f000 feb0 	bl	8001bb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <MX_ADC1_Init+0x130>)
 8000e52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000e54:	2306      	movs	r3, #6
 8000e56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e58:	463b      	mov	r3, r7
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MX_ADC1_Init+0x124>)
 8000e5e:	f001 fbef 	bl	8002640 <HAL_ADC_ConfigChannel>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000e68:	f000 fea2 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e6c:	bf00      	nop
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000044 	.word	0x20000044
 8000e78:	40012000 	.word	0x40012000
 8000e7c:	0f000001 	.word	0x0f000001
 8000e80:	10000012 	.word	0x10000012

08000e84 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a15      	ldr	r2, [pc, #84]	; (8000ef8 <HAL_ADC_MspInit+0x74>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d123      	bne.n	8000eee <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <HAL_ADC_MspInit+0x78>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	4a14      	ldr	r2, [pc, #80]	; (8000efc <HAL_ADC_MspInit+0x78>)
 8000eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb2:	4b12      	ldr	r3, [pc, #72]	; (8000efc <HAL_ADC_MspInit+0x78>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <HAL_ADC_MspInit+0x78>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <HAL_ADC_MspInit+0x78>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <HAL_ADC_MspInit+0x78>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 8000ed6:	23f8      	movs	r3, #248	; 0xf8
 8000ed8:	617b      	str	r3, [r7, #20]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eda:	2303      	movs	r3, #3
 8000edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <HAL_ADC_MspInit+0x7c>)
 8000eea:	f002 fd6f 	bl	80039cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000eee:	bf00      	nop
 8000ef0:	3728      	adds	r7, #40	; 0x28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40012000 	.word	0x40012000
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020000 	.word	0x40020000

08000f04 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_CAN1_Init+0x64>)
 8000f0a:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <MX_CAN1_Init+0x68>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <MX_CAN1_Init+0x64>)
 8000f10:	2210      	movs	r2, #16
 8000f12:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f14:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_CAN1_Init+0x64>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f1a:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <MX_CAN1_Init+0x64>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_CAN1_Init+0x64>)
 8000f22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f26:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_CAN1_Init+0x64>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_CAN1_Init+0x64>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_CAN1_Init+0x64>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <MX_CAN1_Init+0x64>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_CAN1_Init+0x64>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <MX_CAN1_Init+0x64>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_CAN1_Init+0x64>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f52:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_CAN1_Init+0x64>)
 8000f54:	f001 fdc4 	bl	8002ae0 <HAL_CAN_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000f5e:	f000 fe27 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	2000008c 	.word	0x2000008c
 8000f6c:	40006400 	.word	0x40006400

08000f70 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8000f74:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <MX_CAN3_Init+0x64>)
 8000f76:	4a18      	ldr	r2, [pc, #96]	; (8000fd8 <MX_CAN3_Init+0x68>)
 8000f78:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <MX_CAN3_Init+0x64>)
 8000f7c:	2206      	movs	r2, #6
 8000f7e:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8000f80:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <MX_CAN3_Init+0x64>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <MX_CAN3_Init+0x64>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <MX_CAN3_Init+0x64>)
 8000f8e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000f92:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <MX_CAN3_Init+0x64>)
 8000f96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000f9a:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <MX_CAN3_Init+0x64>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <MX_CAN3_Init+0x64>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <MX_CAN3_Init+0x64>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_CAN3_Init+0x64>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8000fb4:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <MX_CAN3_Init+0x64>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_CAN3_Init+0x64>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8000fc0:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <MX_CAN3_Init+0x64>)
 8000fc2:	f001 fd8d 	bl	8002ae0 <HAL_CAN_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8000fcc:	f000 fdf0 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200000b4 	.word	0x200000b4
 8000fd8:	40003400 	.word	0x40003400

08000fdc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08c      	sub	sp, #48	; 0x30
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a32      	ldr	r2, [pc, #200]	; (80010c4 <HAL_CAN_MspInit+0xe8>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d128      	bne.n	8001050 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ffe:	4b32      	ldr	r3, [pc, #200]	; (80010c8 <HAL_CAN_MspInit+0xec>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	4a31      	ldr	r2, [pc, #196]	; (80010c8 <HAL_CAN_MspInit+0xec>)
 8001004:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001008:	6413      	str	r3, [r2, #64]	; 0x40
 800100a:	4b2f      	ldr	r3, [pc, #188]	; (80010c8 <HAL_CAN_MspInit+0xec>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001012:	61bb      	str	r3, [r7, #24]
 8001014:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001016:	4b2c      	ldr	r3, [pc, #176]	; (80010c8 <HAL_CAN_MspInit+0xec>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a2b      	ldr	r2, [pc, #172]	; (80010c8 <HAL_CAN_MspInit+0xec>)
 800101c:	f043 0308 	orr.w	r3, r3, #8
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b29      	ldr	r3, [pc, #164]	; (80010c8 <HAL_CAN_MspInit+0xec>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800102e:	2303      	movs	r3, #3
 8001030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103a:	2303      	movs	r3, #3
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800103e:	2309      	movs	r3, #9
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	4619      	mov	r1, r3
 8001048:	4820      	ldr	r0, [pc, #128]	; (80010cc <HAL_CAN_MspInit+0xf0>)
 800104a:	f002 fcbf 	bl	80039cc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 800104e:	e035      	b.n	80010bc <HAL_CAN_MspInit+0xe0>
  else if(canHandle->Instance==CAN3)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a1e      	ldr	r2, [pc, #120]	; (80010d0 <HAL_CAN_MspInit+0xf4>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d130      	bne.n	80010bc <HAL_CAN_MspInit+0xe0>
    __HAL_RCC_CAN3_CLK_ENABLE();
 800105a:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <HAL_CAN_MspInit+0xec>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	4a1a      	ldr	r2, [pc, #104]	; (80010c8 <HAL_CAN_MspInit+0xec>)
 8001060:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001064:	6413      	str	r3, [r2, #64]	; 0x40
 8001066:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <HAL_CAN_MspInit+0xec>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_CAN_MspInit+0xec>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a14      	ldr	r2, [pc, #80]	; (80010c8 <HAL_CAN_MspInit+0xec>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_CAN_MspInit+0xec>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 800108a:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800108e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001098:	2303      	movs	r3, #3
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 800109c:	230b      	movs	r3, #11
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4619      	mov	r1, r3
 80010a6:	480b      	ldr	r0, [pc, #44]	; (80010d4 <HAL_CAN_MspInit+0xf8>)
 80010a8:	f002 fc90 	bl	80039cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2100      	movs	r1, #0
 80010b0:	2069      	movs	r0, #105	; 0x69
 80010b2:	f002 fc54 	bl	800395e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 80010b6:	2069      	movs	r0, #105	; 0x69
 80010b8:	f002 fc6d 	bl	8003996 <HAL_NVIC_EnableIRQ>
}
 80010bc:	bf00      	nop
 80010be:	3730      	adds	r7, #48	; 0x30
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40006400 	.word	0x40006400
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40020c00 	.word	0x40020c00
 80010d0:	40003400 	.word	0x40003400
 80010d4:	40020000 	.word	0x40020000

080010d8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08e      	sub	sp, #56	; 0x38
 80010dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ee:	4bb6      	ldr	r3, [pc, #728]	; (80013c8 <MX_GPIO_Init+0x2f0>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4ab5      	ldr	r2, [pc, #724]	; (80013c8 <MX_GPIO_Init+0x2f0>)
 80010f4:	f043 0310 	orr.w	r3, r3, #16
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4bb3      	ldr	r3, [pc, #716]	; (80013c8 <MX_GPIO_Init+0x2f0>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0310 	and.w	r3, r3, #16
 8001102:	623b      	str	r3, [r7, #32]
 8001104:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001106:	4bb0      	ldr	r3, [pc, #704]	; (80013c8 <MX_GPIO_Init+0x2f0>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4aaf      	ldr	r2, [pc, #700]	; (80013c8 <MX_GPIO_Init+0x2f0>)
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4bad      	ldr	r3, [pc, #692]	; (80013c8 <MX_GPIO_Init+0x2f0>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	61fb      	str	r3, [r7, #28]
 800111c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800111e:	4baa      	ldr	r3, [pc, #680]	; (80013c8 <MX_GPIO_Init+0x2f0>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4aa9      	ldr	r2, [pc, #676]	; (80013c8 <MX_GPIO_Init+0x2f0>)
 8001124:	f043 0320 	orr.w	r3, r3, #32
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4ba7      	ldr	r3, [pc, #668]	; (80013c8 <MX_GPIO_Init+0x2f0>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0320 	and.w	r3, r3, #32
 8001132:	61bb      	str	r3, [r7, #24]
 8001134:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001136:	4ba4      	ldr	r3, [pc, #656]	; (80013c8 <MX_GPIO_Init+0x2f0>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4aa3      	ldr	r2, [pc, #652]	; (80013c8 <MX_GPIO_Init+0x2f0>)
 800113c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4ba1      	ldr	r3, [pc, #644]	; (80013c8 <MX_GPIO_Init+0x2f0>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	4b9e      	ldr	r3, [pc, #632]	; (80013c8 <MX_GPIO_Init+0x2f0>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a9d      	ldr	r2, [pc, #628]	; (80013c8 <MX_GPIO_Init+0x2f0>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b9b      	ldr	r3, [pc, #620]	; (80013c8 <MX_GPIO_Init+0x2f0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	4b98      	ldr	r3, [pc, #608]	; (80013c8 <MX_GPIO_Init+0x2f0>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a97      	ldr	r2, [pc, #604]	; (80013c8 <MX_GPIO_Init+0x2f0>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b95      	ldr	r3, [pc, #596]	; (80013c8 <MX_GPIO_Init+0x2f0>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800117e:	4b92      	ldr	r3, [pc, #584]	; (80013c8 <MX_GPIO_Init+0x2f0>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a91      	ldr	r2, [pc, #580]	; (80013c8 <MX_GPIO_Init+0x2f0>)
 8001184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b8f      	ldr	r3, [pc, #572]	; (80013c8 <MX_GPIO_Init+0x2f0>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001196:	4b8c      	ldr	r3, [pc, #560]	; (80013c8 <MX_GPIO_Init+0x2f0>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a8b      	ldr	r2, [pc, #556]	; (80013c8 <MX_GPIO_Init+0x2f0>)
 800119c:	f043 0308 	orr.w	r3, r3, #8
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b89      	ldr	r3, [pc, #548]	; (80013c8 <MX_GPIO_Init+0x2f0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 80011ae:	2200      	movs	r2, #0
 80011b0:	f248 0187 	movw	r1, #32903	; 0x8087
 80011b4:	4885      	ldr	r0, [pc, #532]	; (80013cc <MX_GPIO_Init+0x2f4>)
 80011b6:	f002 fdcd 	bl	8003d54 <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011c0:	4883      	ldr	r0, [pc, #524]	; (80013d0 <MX_GPIO_Init+0x2f8>)
 80011c2:	f002 fdc7 	bl	8003d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin, GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	f242 0102 	movw	r1, #8194	; 0x2002
 80011cc:	4881      	ldr	r0, [pc, #516]	; (80013d4 <MX_GPIO_Init+0x2fc>)
 80011ce:	f002 fdc1 	bl	8003d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f240 6102 	movw	r1, #1538	; 0x602
 80011d8:	487f      	ldr	r0, [pc, #508]	; (80013d8 <MX_GPIO_Init+0x300>)
 80011da:	f002 fdbb 	bl	8003d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	f244 0184 	movw	r1, #16516	; 0x4084
 80011e4:	487d      	ldr	r0, [pc, #500]	; (80013dc <MX_GPIO_Init+0x304>)
 80011e6:	f002 fdb5 	bl	8003d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PWM_HV_Charger_Pin|DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f248 0118 	movw	r1, #32792	; 0x8018
 80011f0:	487b      	ldr	r0, [pc, #492]	; (80013e0 <MX_GPIO_Init+0x308>)
 80011f2:	f002 fdaf 	bl	8003d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 80011f6:	2200      	movs	r2, #0
 80011f8:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 80011fc:	4879      	ldr	r0, [pc, #484]	; (80013e4 <MX_GPIO_Init+0x30c>)
 80011fe:	f002 fda9 	bl	8003d54 <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 8001202:	f248 0387 	movw	r3, #32903	; 0x8087
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
                          |INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001208:	2301      	movs	r3, #1
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001218:	4619      	mov	r1, r3
 800121a:	486c      	ldr	r0, [pc, #432]	; (80013cc <MX_GPIO_Init+0x2f4>)
 800121c:	f002 fbd6 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 8001220:	f44f 739c 	mov.w	r3, #312	; 0x138
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001226:	2300      	movs	r3, #0
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800122e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001232:	4619      	mov	r1, r3
 8001234:	4865      	ldr	r0, [pc, #404]	; (80013cc <MX_GPIO_Init+0x2f4>)
 8001236:	f002 fbc9 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 800123a:	f44f 6388 	mov.w	r3, #1088	; 0x440
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001240:	2303      	movs	r3, #3
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124c:	4619      	mov	r1, r3
 800124e:	485f      	ldr	r0, [pc, #380]	; (80013cc <MX_GPIO_Init+0x2f4>)
 8001250:	f002 fbbc 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 8001254:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125a:	2301      	movs	r3, #1
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8001266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126a:	4619      	mov	r1, r3
 800126c:	4858      	ldr	r0, [pc, #352]	; (80013d0 <MX_GPIO_Init+0x2f8>)
 800126e:	f002 fbad 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PCPin PC7 PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001272:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |SD_SW_Pin|GPIO_PIN_7|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001278:	2303      	movs	r3, #3
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001284:	4619      	mov	r1, r3
 8001286:	4852      	ldr	r0, [pc, #328]	; (80013d0 <MX_GPIO_Init+0x2f8>)
 8001288:	f002 fba0 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF3 PF4 PF5
                           PFPin PFPin PFPin PFPin
                           PF10 PF11 PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800128c:	f645 73f9 	movw	r3, #24569	; 0x5ff9
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001292:	2303      	movs	r3, #3
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800129a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129e:	4619      	mov	r1, r3
 80012a0:	484c      	ldr	r0, [pc, #304]	; (80013d4 <MX_GPIO_Init+0x2fc>)
 80012a2:	f002 fb93 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin;
 80012a6:	f242 0302 	movw	r3, #8194	; 0x2002
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ac:	2301      	movs	r3, #1
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012bc:	4619      	mov	r1, r3
 80012be:	4845      	ldr	r0, [pc, #276]	; (80013d4 <MX_GPIO_Init+0x2fc>)
 80012c0:	f002 fb84 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin|PRECHARGE_IN_Pin;
 80012c4:	f248 0304 	movw	r3, #32772	; 0x8004
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d6:	4619      	mov	r1, r3
 80012d8:	483e      	ldr	r0, [pc, #248]	; (80013d4 <MX_GPIO_Init+0x2fc>)
 80012da:	f002 fb77 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|HW_WAKE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 80012de:	f641 0305 	movw	r3, #6149	; 0x1805
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f0:	4619      	mov	r1, r3
 80012f2:	4839      	ldr	r0, [pc, #228]	; (80013d8 <MX_GPIO_Init+0x300>)
 80012f4:	f002 fb6a 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 80012f8:	f240 6302 	movw	r3, #1538	; 0x602
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fe:	2301      	movs	r3, #1
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130e:	4619      	mov	r1, r3
 8001310:	4831      	ldr	r0, [pc, #196]	; (80013d8 <MX_GPIO_Init+0x300>)
 8001312:	f002 fb5b 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8001316:	f64b 7373 	movw	r3, #49011	; 0xbf73
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|I2C_SCL_Pin|I2C_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131c:	2303      	movs	r3, #3
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001328:	4619      	mov	r1, r3
 800132a:	482c      	ldr	r0, [pc, #176]	; (80013dc <MX_GPIO_Init+0x304>)
 800132c:	f002 fb4e 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 8001330:	f244 0384 	movw	r3, #16516	; 0x4084
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001336:	2301      	movs	r3, #1
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001346:	4619      	mov	r1, r3
 8001348:	4824      	ldr	r0, [pc, #144]	; (80013dc <MX_GPIO_Init+0x304>)
 800134a:	f002 fb3f 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8;
 800134e:	f240 1343 	movw	r3, #323	; 0x143
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001354:	2303      	movs	r3, #3
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800135c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001360:	4619      	mov	r1, r3
 8001362:	4820      	ldr	r0, [pc, #128]	; (80013e4 <MX_GPIO_Init+0x30c>)
 8001364:	f002 fb32 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|SD_CMD_Pin;
 8001368:	f240 7304 	movw	r3, #1796	; 0x704
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800136e:	2303      	movs	r3, #3
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137a:	4619      	mov	r1, r3
 800137c:	4818      	ldr	r0, [pc, #96]	; (80013e0 <MX_GPIO_Init+0x308>)
 800137e:	f002 fb25 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 8001382:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001388:	2300      	movs	r3, #0
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 8001390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001394:	4619      	mov	r1, r3
 8001396:	4812      	ldr	r0, [pc, #72]	; (80013e0 <MX_GPIO_Init+0x308>)
 8001398:	f002 fb18 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PWM_HV_Charger_Pin|DIGITAL1_Pin|DIGITAL2_Pin;
 800139c:	f248 0318 	movw	r3, #32792	; 0x8018
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b2:	4619      	mov	r1, r3
 80013b4:	480a      	ldr	r0, [pc, #40]	; (80013e0 <MX_GPIO_Init+0x308>)
 80013b6:	f002 fb09 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 80013ba:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	e00f      	b.n	80013e8 <MX_GPIO_Init+0x310>
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40020800 	.word	0x40020800
 80013d4:	40021400 	.word	0x40021400
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40020400 	.word	0x40020400
 80013e0:	40020c00 	.word	0x40020c00
 80013e4:	40021800 	.word	0x40021800
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f2:	4619      	mov	r1, r3
 80013f4:	4803      	ldr	r0, [pc, #12]	; (8001404 <MX_GPIO_Init+0x32c>)
 80013f6:	f002 fae9 	bl	80039cc <HAL_GPIO_Init>

}
 80013fa:	bf00      	nop
 80013fc:	3738      	adds	r7, #56	; 0x38
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40021800 	.word	0x40021800

08001408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001408:	b5b0      	push	{r4, r5, r7, lr}
 800140a:	b0a2      	sub	sp, #136	; 0x88
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800140e:	f001 f80a 	bl	8002426 <HAL_Init>

  /* USER CODE BEGIN Init */
	// Definiere Variablen fuer Main-Funktion
	uint16_t count = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	uint8_t start_flag = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	// Definiere Variablen fuer Main-Funktion
	uint8_t TxData[8], OutData[4], InData[3], status;
  	CAN_FilterTypeDef sFilterConfig;

  	// Erstelle Can-Nachrichten
  	CAN_TxHeaderTypeDef TxMessage = {0x124, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 800141e:	4b97      	ldr	r3, [pc, #604]	; (800167c <main+0x274>)
 8001420:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001424:	461d      	mov	r5, r3
 8001426:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001428:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800142a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800142e:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxOutput = {BMS_CAN_DIGITAL_OUT, 0, CAN_RTR_DATA, CAN_ID_STD, 4, DISABLE};
 8001432:	4b93      	ldr	r3, [pc, #588]	; (8001680 <main+0x278>)
 8001434:	f107 0418 	add.w	r4, r7, #24
 8001438:	461d      	mov	r5, r3
 800143a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800143c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800143e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001442:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxInput = {BMS_CAN_DIGITAL_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 3, DISABLE};
 8001446:	4b8f      	ldr	r3, [pc, #572]	; (8001684 <main+0x27c>)
 8001448:	463c      	mov	r4, r7
 800144a:	461d      	mov	r5, r3
 800144c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800144e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001450:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001454:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001458:	f000 fad8 	bl	8001a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800145c:	f7ff fe3c 	bl	80010d8 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001460:	f7ff fd50 	bl	8000f04 <MX_CAN1_Init>
  MX_SPI4_Init();
 8001464:	f000 fbea 	bl	8001c3c <MX_SPI4_Init>
  MX_USART2_UART_Init();
 8001468:	f000 ff26 	bl	80022b8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800146c:	f7ff fc70 	bl	8000d50 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001470:	f000 fd34 	bl	8001edc <MX_TIM1_Init>
  MX_TIM4_Init();
 8001474:	f000 fdb8 	bl	8001fe8 <MX_TIM4_Init>
  MX_SPI1_Init();
 8001478:	f000 fba2 	bl	8001bc0 <MX_SPI1_Init>
  MX_CAN3_Init();
 800147c:	f7ff fd78 	bl	8000f70 <MX_CAN3_Init>
  MX_TIM6_Init();
 8001480:	f000 fe22 	bl	80020c8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 8001484:	f7ff fa54 	bl	8000930 <readResetSource>
 8001488:	4603      	mov	r3, r0
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff faa2 	bl	80009d4 <printResetSource>

	/* Teste serielle Schnittstelle*/
	#define TEST_STRING_UART		"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 8001490:	213a      	movs	r1, #58	; 0x3a
 8001492:	487d      	ldr	r0, [pc, #500]	; (8001688 <main+0x280>)
 8001494:	f7ff f856 	bl	8000544 <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 8001498:	f7ff fa20 	bl	80008dc <collectSystemInfo>
#endif

  	// Start timer
	if (HAL_TIM_Base_Start_IT(&htim1) != HAL_OK);
 800149c:	487b      	ldr	r0, [pc, #492]	; (800168c <main+0x284>)
 800149e:	f003 fe81 	bl	80051a4 <HAL_TIM_Base_Start_IT>
	if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1) != HAL_OK);
 80014a2:	2100      	movs	r1, #0
 80014a4:	4879      	ldr	r0, [pc, #484]	; (800168c <main+0x284>)
 80014a6:	f003 ffa3 	bl	80053f0 <HAL_TIM_IC_Start_IT>
	if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2) != HAL_OK);
 80014aa:	2104      	movs	r1, #4
 80014ac:	4877      	ldr	r0, [pc, #476]	; (800168c <main+0x284>)
 80014ae:	f003 ff9f 	bl	80053f0 <HAL_TIM_IC_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim6);
 80014b2:	4877      	ldr	r0, [pc, #476]	; (8001690 <main+0x288>)
 80014b4:	f003 fe76 	bl	80051a4 <HAL_TIM_Base_Start_IT>

	// Leds Testen
	testPCB_Leds();
 80014b8:	f7ff fbf4 	bl	8000ca4 <testPCB_Leds>
	//testInletLeds();
	//testCockpitLeds();

	// Lese alle Eingaenge
	readall_inputs();
 80014bc:	f7ff fb2a 	bl	8000b14 <readall_inputs>

  	// Starte CAN Bus
  	if((status = HAL_CAN_Start(&hcan3)) != HAL_OK)
 80014c0:	4874      	ldr	r0, [pc, #464]	; (8001694 <main+0x28c>)
 80014c2:	f001 fcf5 	bl	8002eb0 <HAL_CAN_Start>
 80014c6:	4603      	mov	r3, r0
 80014c8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80014cc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d006      	beq.n	80014e2 <main+0xda>
  	{
  		/* Start Error */
  		hal_error(status);
 80014d4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff faeb 	bl	8000ab4 <hal_error>
  		Error_Handler();
 80014de:	f000 fb67 	bl	8001bb0 <Error_Handler>
  	}
  	uartTransmit("CAN START\n", 10);
 80014e2:	210a      	movs	r1, #10
 80014e4:	486c      	ldr	r0, [pc, #432]	; (8001698 <main+0x290>)
 80014e6:	f7ff f82d 	bl	8000544 <uartTransmit>

  	// Aktiviere Interrupts fuer CAN Bus
  	if((status = HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING)) != HAL_OK)
 80014ea:	2102      	movs	r1, #2
 80014ec:	4869      	ldr	r0, [pc, #420]	; (8001694 <main+0x28c>)
 80014ee:	f001 ff05 	bl	80032fc <HAL_CAN_ActivateNotification>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80014f8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d006      	beq.n	800150e <main+0x106>
  	{
  		/* Notification Error */
  		hal_error(status);
 8001500:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fad5 	bl	8000ab4 <hal_error>
  		Error_Handler();
 800150a:	f000 fb51 	bl	8001bb0 <Error_Handler>
  	}
  	uartTransmit("Send Message\n", 13);
 800150e:	210d      	movs	r1, #13
 8001510:	4862      	ldr	r0, [pc, #392]	; (800169c <main+0x294>)
 8001512:	f7ff f817 	bl	8000544 <uartTransmit>

  	// Filter Bank initialisieren um Daten zu empfangen
    sFilterConfig.FilterBank = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	65fb      	str	r3, [r7, #92]	; 0x5c
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800151a:	2300      	movs	r3, #0
 800151c:	663b      	str	r3, [r7, #96]	; 0x60
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800151e:	2301      	movs	r3, #1
 8001520:	667b      	str	r3, [r7, #100]	; 0x64
    sFilterConfig.FilterIdHigh = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	64bb      	str	r3, [r7, #72]	; 0x48
    sFilterConfig.FilterIdLow = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFilterConfig.FilterMaskIdHigh = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	653b      	str	r3, [r7, #80]	; 0x50
    sFilterConfig.FilterMaskIdLow = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	657b      	str	r3, [r7, #84]	; 0x54
    sFilterConfig.FilterFIFOAssignment = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	65bb      	str	r3, [r7, #88]	; 0x58
    sFilterConfig.FilterActivation = ENABLE;
 8001536:	2301      	movs	r3, #1
 8001538:	66bb      	str	r3, [r7, #104]	; 0x68

    // Filter Bank schreiben
    if((status = HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 800153a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800153e:	4619      	mov	r1, r3
 8001540:	4854      	ldr	r0, [pc, #336]	; (8001694 <main+0x28c>)
 8001542:	f001 fbc9 	bl	8002cd8 <HAL_CAN_ConfigFilter>
 8001546:	4603      	mov	r3, r0
 8001548:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800154c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001550:	2b00      	cmp	r3, #0
 8001552:	d006      	beq.n	8001562 <main+0x15a>
    {
    	/* Filter configuration Error */
  		hal_error(status);
 8001554:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff faab 	bl	8000ab4 <hal_error>
  		Error_Handler();
 800155e:	f000 fb27 	bl	8001bb0 <Error_Handler>
    }

    // Test CAN Nachricht beschreiben
    for (uint8_t j = 0; j < 8; j++)
 8001562:	2300      	movs	r3, #0
 8001564:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 8001568:	e00e      	b.n	8001588 <main+0x180>
    {
    	TxData[j] = (j + 1);
 800156a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800156e:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 8001572:	3201      	adds	r2, #1
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	3388      	adds	r3, #136	; 0x88
 8001578:	443b      	add	r3, r7
 800157a:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (uint8_t j = 0; j < 8; j++)
 800157e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8001582:	3301      	adds	r3, #1
 8001584:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 8001588:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800158c:	2b07      	cmp	r3, #7
 800158e:	d9ec      	bls.n	800156a <main+0x162>
    }

    // Einschalten PowerOn
    setPowerOn();
 8001590:	f7ff fbc6 	bl	8000d20 <setPowerOn>

    uartTransmitNumber(sdc_in.sdcinput, 2);
 8001594:	4b42      	ldr	r3, [pc, #264]	; (80016a0 <main+0x298>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2102      	movs	r1, #2
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe ffe6 	bl	800056c <uartTransmitNumber>

	if ((sdc_in.sdcinput & 0x0E) && (sdc_in.IMD_OK_IN != 1))					// SDC OK; Motor, BTB, IMD und HVIL OK
 80015a0:	4b3f      	ldr	r3, [pc, #252]	; (80016a0 <main+0x298>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	f003 030e 	and.w	r3, r3, #14
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f000 808b 	beq.w	80016c4 <main+0x2bc>
 80015ae:	4b3c      	ldr	r3, [pc, #240]	; (80016a0 <main+0x298>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f040 8083 	bne.w	80016c4 <main+0x2bc>
	{
		#define SDC_STRING_ERROR			"\nSDC ist nicht geschlossen"
		uartTransmit(SDC_STRING_ERROR, sizeof(SDC_STRING_ERROR));
 80015be:	211b      	movs	r1, #27
 80015c0:	4838      	ldr	r0, [pc, #224]	; (80016a4 <main+0x29c>)
 80015c2:	f7fe ffbf 	bl	8000544 <uartTransmit>

		// LEDs setzen bei SDC Fehler
		leuchten_out.GreenLed = 0;
 80015c6:	4a38      	ldr	r2, [pc, #224]	; (80016a8 <main+0x2a0>)
 80015c8:	7813      	ldrb	r3, [r2, #0]
 80015ca:	f36f 1386 	bfc	r3, #6, #1
 80015ce:	7013      	strb	r3, [r2, #0]
		leuchten_out.RedLed = 1;
 80015d0:	4a35      	ldr	r2, [pc, #212]	; (80016a8 <main+0x2a0>)
 80015d2:	7813      	ldrb	r3, [r2, #0]
 80015d4:	f043 0320 	orr.w	r3, r3, #32
 80015d8:	7013      	strb	r3, [r2, #0]
		leuchten_out.AkkuErrorLed = 0;
 80015da:	4a33      	ldr	r2, [pc, #204]	; (80016a8 <main+0x2a0>)
 80015dc:	7813      	ldrb	r3, [r2, #0]
 80015de:	f36f 0382 	bfc	r3, #2, #1
 80015e2:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);
 80015e4:	4b30      	ldr	r3, [pc, #192]	; (80016a8 <main+0x2a0>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	461a      	mov	r2, r3
 80015f0:	2104      	movs	r1, #4
 80015f2:	482e      	ldr	r0, [pc, #184]	; (80016ac <main+0x2a4>)
 80015f4:	f002 fbae 	bl	8003d54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);
 80015f8:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <main+0x2a0>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001600:	b2db      	uxtb	r3, r3
 8001602:	461a      	mov	r2, r3
 8001604:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001608:	4828      	ldr	r0, [pc, #160]	; (80016ac <main+0x2a4>)
 800160a:	f002 fba3 	bl	8003d54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AKKU_LED_GPIO_Port, AKKU_LED_Pin, leuchten_out.AkkuErrorLed);
 800160e:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <main+0x2a0>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001616:	b2db      	uxtb	r3, r3
 8001618:	461a      	mov	r2, r3
 800161a:	2180      	movs	r1, #128	; 0x80
 800161c:	4824      	ldr	r0, [pc, #144]	; (80016b0 <main+0x2a8>)
 800161e:	f002 fb99 	bl	8003d54 <HAL_GPIO_WritePin>

		// Ausgabe welcher Fehler vorhanden
		// Motorsteuergeraet Fehler
		if((sdc_in.MotorSDC == 1))
 8001622:	4b1f      	ldr	r3, [pc, #124]	; (80016a0 <main+0x298>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d003      	beq.n	8001638 <main+0x230>
		{
			#define SDC_STRING_MOTOR		"\nSDC Motor hat einen Fehler und ist offen"
			uartTransmit(SDC_STRING_MOTOR, sizeof(SDC_STRING_MOTOR));
 8001630:	212a      	movs	r1, #42	; 0x2a
 8001632:	4820      	ldr	r0, [pc, #128]	; (80016b4 <main+0x2ac>)
 8001634:	f7fe ff86 	bl	8000544 <uartTransmit>
		}

		// BamoCar Fehler
		if ((sdc_in.BTB_SDC == 1))
 8001638:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <main+0x298>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <main+0x246>
		{
			#define SDC_STRING_BTB			"\nSDC BTB hat einen Fehler und ist offen"
			uartTransmit(SDC_STRING_BTB, sizeof(SDC_STRING_BTB));
 8001646:	2128      	movs	r1, #40	; 0x28
 8001648:	481b      	ldr	r0, [pc, #108]	; (80016b8 <main+0x2b0>)
 800164a:	f7fe ff7b 	bl	8000544 <uartTransmit>
		}

		// HVIL Fehler
		if ((sdc_in.HVIL == 1))
 800164e:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <main+0x298>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <main+0x25c>
		{
			#define SDC_STRING_HVIL			"\nSDC HVIL ist nicht geschlossen"
			uartTransmit(SDC_STRING_HVIL, sizeof(SDC_STRING_HVIL));
 800165c:	2120      	movs	r1, #32
 800165e:	4817      	ldr	r0, [pc, #92]	; (80016bc <main+0x2b4>)
 8001660:	f7fe ff70 	bl	8000544 <uartTransmit>
		}

		// IMD Fehler
		if (!(sdc_in.IMD_OK_IN == 1))
 8001664:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <main+0x298>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d14a      	bne.n	8001708 <main+0x300>
		{
			#define SDC_STRING_IMD			"\nSDC IMD hat einen Fehler"
			uartTransmit(SDC_STRING_IMD, sizeof(SDC_STRING_IMD));
 8001672:	211a      	movs	r1, #26
 8001674:	4812      	ldr	r0, [pc, #72]	; (80016c0 <main+0x2b8>)
 8001676:	f7fe ff65 	bl	8000544 <uartTransmit>
		if (!(sdc_in.IMD_OK_IN == 1))
 800167a:	e045      	b.n	8001708 <main+0x300>
 800167c:	080078e0 	.word	0x080078e0
 8001680:	080078f8 	.word	0x080078f8
 8001684:	08007910 	.word	0x08007910
 8001688:	080077c4 	.word	0x080077c4
 800168c:	200001d0 	.word	0x200001d0
 8001690:	20000268 	.word	0x20000268
 8001694:	200000b4 	.word	0x200000b4
 8001698:	08007800 	.word	0x08007800
 800169c:	0800780c 	.word	0x0800780c
 80016a0:	2000002c 	.word	0x2000002c
 80016a4:	0800781c 	.word	0x0800781c
 80016a8:	2000003c 	.word	0x2000003c
 80016ac:	40020400 	.word	0x40020400
 80016b0:	40021800 	.word	0x40021800
 80016b4:	08007838 	.word	0x08007838
 80016b8:	08007864 	.word	0x08007864
 80016bc:	0800788c 	.word	0x0800788c
 80016c0:	080078ac 	.word	0x080078ac
		}
	}
	else
	{
		// Keine Fehler, LEDs fuer OK setzen
		system_out.AmsOK = 1;
 80016c4:	4abe      	ldr	r2, [pc, #760]	; (80019c0 <main+0x5b8>)
 80016c6:	7813      	ldrb	r3, [r2, #0]
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, system_out.AmsOK);
 80016ce:	4bbc      	ldr	r3, [pc, #752]	; (80019c0 <main+0x5b8>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	461a      	mov	r2, r3
 80016da:	2180      	movs	r1, #128	; 0x80
 80016dc:	48b9      	ldr	r0, [pc, #740]	; (80019c4 <main+0x5bc>)
 80016de:	f002 fb39 	bl	8003d54 <HAL_GPIO_WritePin>
		leuchten_out.GreenLed = 1;
 80016e2:	4ab9      	ldr	r2, [pc, #740]	; (80019c8 <main+0x5c0>)
 80016e4:	7813      	ldrb	r3, [r2, #0]
 80016e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016ea:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);
 80016ec:	4bb6      	ldr	r3, [pc, #728]	; (80019c8 <main+0x5c0>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	461a      	mov	r2, r3
 80016f8:	2104      	movs	r1, #4
 80016fa:	48b4      	ldr	r0, [pc, #720]	; (80019cc <main+0x5c4>)
 80016fc:	f002 fb2a 	bl	8003d54 <HAL_GPIO_WritePin>

		// Ausgabe SDC geschlossen
		#define SDC_STRING_OK				"\nSDC ist geschlossen"
		uartTransmit(SDC_STRING_OK, sizeof(SDC_STRING_OK));
 8001700:	2115      	movs	r1, #21
 8001702:	48b3      	ldr	r0, [pc, #716]	; (80019d0 <main+0x5c8>)
 8001704:	f7fe ff1e 	bl	8000544 <uartTransmit>
	}

//	highcurrent_out.PrechargeOut = 1;
	highcurrent_out.HV_CHG = 1;
 8001708:	4ab2      	ldr	r2, [pc, #712]	; (80019d4 <main+0x5cc>)
 800170a:	7813      	ldrb	r3, [r2, #0]
 800170c:	f043 0310 	orr.w	r3, r3, #16
 8001710:	7013      	strb	r3, [r2, #0]
//	HAL_GPIO_WritePin(PRECHARGE_OUT_GPIO_Port, PRECHARGE_OUT_Pin, highcurrent_out.PrechargeOut);
	HAL_GPIO_WritePin(HV_Charger_GPIO_Port, HV_Charger_Pin, highcurrent_out.HV_CHG);
 8001712:	4bb0      	ldr	r3, [pc, #704]	; (80019d4 <main+0x5cc>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800171a:	b2db      	uxtb	r3, r3
 800171c:	461a      	mov	r2, r3
 800171e:	2120      	movs	r1, #32
 8001720:	48ad      	ldr	r0, [pc, #692]	; (80019d8 <main+0x5d0>)
 8001722:	f002 fb17 	bl	8003d54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PWM_HV_Charger_GPIO_Port, PWM_HV_Charger_Pin, highcurrent_out.HV_CHG);
 8001726:	4bab      	ldr	r3, [pc, #684]	; (80019d4 <main+0x5cc>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800172e:	b2db      	uxtb	r3, r3
 8001730:	461a      	mov	r2, r3
 8001732:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001736:	48a9      	ldr	r0, [pc, #676]	; (80019dc <main+0x5d4>)
 8001738:	f002 fb0c 	bl	8003d54 <HAL_GPIO_WritePin>

	HAL_Delay(5000);
 800173c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001740:	f000 fece 	bl	80024e0 <HAL_Delay>

	highcurrent_out.PrechargeOut = 0;
 8001744:	4aa3      	ldr	r2, [pc, #652]	; (80019d4 <main+0x5cc>)
 8001746:	7813      	ldrb	r3, [r2, #0]
 8001748:	f36f 0382 	bfc	r3, #2, #1
 800174c:	7013      	strb	r3, [r2, #0]
	highcurrent_out.HV_CHG = 0;
 800174e:	4aa1      	ldr	r2, [pc, #644]	; (80019d4 <main+0x5cc>)
 8001750:	7813      	ldrb	r3, [r2, #0]
 8001752:	f36f 1304 	bfc	r3, #4, #1
 8001756:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(PRECHARGE_OUT_GPIO_Port, PRECHARGE_OUT_Pin, highcurrent_out.PrechargeOut);
 8001758:	4b9e      	ldr	r3, [pc, #632]	; (80019d4 <main+0x5cc>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001760:	b2db      	uxtb	r3, r3
 8001762:	461a      	mov	r2, r3
 8001764:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001768:	489d      	ldr	r0, [pc, #628]	; (80019e0 <main+0x5d8>)
 800176a:	f002 faf3 	bl	8003d54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HV_Charger_GPIO_Port, HV_Charger_Pin, highcurrent_out.HV_CHG);
 800176e:	4b99      	ldr	r3, [pc, #612]	; (80019d4 <main+0x5cc>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001776:	b2db      	uxtb	r3, r3
 8001778:	461a      	mov	r2, r3
 800177a:	2120      	movs	r1, #32
 800177c:	4896      	ldr	r0, [pc, #600]	; (80019d8 <main+0x5d0>)
 800177e:	f002 fae9 	bl	8003d54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PWM_HV_Charger_GPIO_Port, PWM_HV_Charger_Pin, highcurrent_out.HV_CHG);
 8001782:	4b94      	ldr	r3, [pc, #592]	; (80019d4 <main+0x5cc>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800178a:	b2db      	uxtb	r3, r3
 800178c:	461a      	mov	r2, r3
 800178e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001792:	4892      	ldr	r0, [pc, #584]	; (80019dc <main+0x5d4>)
 8001794:	f002 fade 	bl	8003d54 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// Task wird jede Millisekunde ausgefuehrt
		if (millisekunden_flag_1 == 1)
 8001798:	4b92      	ldr	r3, [pc, #584]	; (80019e4 <main+0x5dc>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d10a      	bne.n	80017b8 <main+0x3b0>
		{
			count++;													// Zaehler count hochzaehlen
 80017a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80017a6:	3301      	adds	r3, #1
 80017a8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			millisekunden_flag_1 = 0;									// Setze Millisekunden-Flag zurueck
 80017ac:	4b8d      	ldr	r3, [pc, #564]	; (80019e4 <main+0x5dc>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]

			// Setzen des Start Flags,  damit Tasks nur einmal pro ms aufgerufen werden kann
			start_flag = 1;												// Setze Start Flag
 80017b2:	2301      	movs	r3, #1
 80017b4:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		}

		// Task wird alle 200 Millisekunden ausgefuehrt
		if (((count % 200) == 0) && (start_flag == 1))
 80017b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80017bc:	4a8a      	ldr	r2, [pc, #552]	; (80019e8 <main+0x5e0>)
 80017be:	fba2 1203 	umull	r1, r2, r2, r3
 80017c2:	0992      	lsrs	r2, r2, #6
 80017c4:	21c8      	movs	r1, #200	; 0xc8
 80017c6:	fb01 f202 	mul.w	r2, r1, r2
 80017ca:	1a9b      	subs	r3, r3, r2
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d17f      	bne.n	80018d2 <main+0x4ca>
 80017d2:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d17b      	bne.n	80018d2 <main+0x4ca>
		{
			// Lese Eingaenge
			readall_inputs();
 80017da:	f7ff f99b 	bl	8000b14 <readall_inputs>

			// Daten fuer Ausgaenge zusammenfuehren
			OutData[0] = system_out.systemoutput;
 80017de:	4b78      	ldr	r3, [pc, #480]	; (80019c0 <main+0x5b8>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			OutData[1] = highcurrent_out.high_out;
 80017e6:	4b7b      	ldr	r3, [pc, #492]	; (80019d4 <main+0x5cc>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			OutData[2] = leuchten_out.ledoutput;
 80017ee:	4b76      	ldr	r3, [pc, #472]	; (80019c8 <main+0x5c0>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
			OutData[3] = komfort_out.komfortoutput;
 80017f6:	4b7d      	ldr	r3, [pc, #500]	; (80019ec <main+0x5e4>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

			// Sende Nachricht digitale Ausgaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxOutput, OutData, (uint32_t *)CAN_TX_MAILBOX0);
 80017fe:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001802:	f107 0118 	add.w	r1, r7, #24
 8001806:	2301      	movs	r3, #1
 8001808:	4879      	ldr	r0, [pc, #484]	; (80019f0 <main+0x5e8>)
 800180a:	f001 fb95 	bl	8002f38 <HAL_CAN_AddTxMessage>
 800180e:	4603      	mov	r3, r0
 8001810:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

			// Daten fuer Eingaenge zusammenfuehren
			InData[0] = system_in.systeminput;
 8001814:	4b77      	ldr	r3, [pc, #476]	; (80019f4 <main+0x5ec>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
			InData[1] = sdc_in.sdcinput;
 800181c:	4b76      	ldr	r3, [pc, #472]	; (80019f8 <main+0x5f0>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
			InData[2] = komfort_in.komfortinput;
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <main+0x5f4>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72

			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxInput, InData, (uint32_t *)CAN_TX_MAILBOX0);
 800182c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001830:	4639      	mov	r1, r7
 8001832:	2301      	movs	r3, #1
 8001834:	486e      	ldr	r0, [pc, #440]	; (80019f0 <main+0x5e8>)
 8001836:	f001 fb7f 	bl	8002f38 <HAL_CAN_AddTxMessage>
 800183a:	4603      	mov	r3, r0
 800183c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX0);
 8001840:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001844:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001848:	2301      	movs	r3, #1
 800184a:	4869      	ldr	r0, [pc, #420]	; (80019f0 <main+0x5e8>)
 800184c:	f001 fb74 	bl	8002f38 <HAL_CAN_AddTxMessage>
 8001850:	4603      	mov	r3, r0
 8001852:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

			// AMS OK einlesen, und auswerten
			if((sdc_in.sdcinput & 0x0F) == 0x09)						// Bitmaske 0x0F, Wert 0x08 anpassen
 8001856:	4b68      	ldr	r3, [pc, #416]	; (80019f8 <main+0x5f0>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	2b09      	cmp	r3, #9
 8001860:	d105      	bne.n	800186e <main+0x466>
			{
				system_out.AmsOK = 1;									// AMS setzen
 8001862:	4a57      	ldr	r2, [pc, #348]	; (80019c0 <main+0x5b8>)
 8001864:	7813      	ldrb	r3, [r2, #0]
 8001866:	f043 0304 	orr.w	r3, r3, #4
 800186a:	7013      	strb	r3, [r2, #0]
 800186c:	e004      	b.n	8001878 <main+0x470>
			}
			// Falls Fehler im Shutdown-Circuit
			else
			{
				system_out.AmsOK = 0;									// AMS zuruecksetzen
 800186e:	4a54      	ldr	r2, [pc, #336]	; (80019c0 <main+0x5b8>)
 8001870:	7813      	ldrb	r3, [r2, #0]
 8001872:	f36f 0382 	bfc	r3, #2, #1
 8001876:	7013      	strb	r3, [r2, #0]
			}

			// Ausgabe AMS OK
			HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, system_out.AmsOK);
 8001878:	4b51      	ldr	r3, [pc, #324]	; (80019c0 <main+0x5b8>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001880:	b2db      	uxtb	r3, r3
 8001882:	461a      	mov	r2, r3
 8001884:	2180      	movs	r1, #128	; 0x80
 8001886:	484f      	ldr	r0, [pc, #316]	; (80019c4 <main+0x5bc>)
 8001888:	f002 fa64 	bl	8003d54 <HAL_GPIO_WritePin>

			// Freigabe erteilen
			if((system_out.AmsOK == 1) && !(sdc_in.PrechargeIn == 1))	// Wenn AMS OK und Vorgeladen
 800188c:	4b4c      	ldr	r3, [pc, #304]	; (80019c0 <main+0x5b8>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00c      	beq.n	80018b4 <main+0x4ac>
 800189a:	4b57      	ldr	r3, [pc, #348]	; (80019f8 <main+0x5f0>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	f003 0310 	and.w	r3, r3, #16
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d105      	bne.n	80018b4 <main+0x4ac>
			{
				system_out.Freigabe = 1;								// Freigabe erteilen
 80018a8:	4a45      	ldr	r2, [pc, #276]	; (80019c0 <main+0x5b8>)
 80018aa:	7813      	ldrb	r3, [r2, #0]
 80018ac:	f043 0308 	orr.w	r3, r3, #8
 80018b0:	7013      	strb	r3, [r2, #0]
 80018b2:	e004      	b.n	80018be <main+0x4b6>
			}
			else
			{
				system_out.Freigabe = 0;								// Freigabe zuruecknehmen
 80018b4:	4a42      	ldr	r2, [pc, #264]	; (80019c0 <main+0x5b8>)
 80018b6:	7813      	ldrb	r3, [r2, #0]
 80018b8:	f36f 03c3 	bfc	r3, #3, #1
 80018bc:	7013      	strb	r3, [r2, #0]
			}

			// Ausgabe Freigabe / Run
			HAL_GPIO_WritePin(FREIGABE_GPIO_Port, FREIGABE_Pin, system_out.Freigabe);
 80018be:	4b40      	ldr	r3, [pc, #256]	; (80019c0 <main+0x5b8>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	461a      	mov	r2, r3
 80018ca:	2101      	movs	r1, #1
 80018cc:	483d      	ldr	r0, [pc, #244]	; (80019c4 <main+0x5bc>)
 80018ce:	f002 fa41 	bl	8003d54 <HAL_GPIO_WritePin>
		}

		// Task wird alle 400 Millisekunden ausgefuehrt
		if (((count % 400) == 0) && (start_flag == 1))
 80018d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80018d6:	4a44      	ldr	r2, [pc, #272]	; (80019e8 <main+0x5e0>)
 80018d8:	fba2 1203 	umull	r1, r2, r2, r3
 80018dc:	09d2      	lsrs	r2, r2, #7
 80018de:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80018e2:	fb01 f202 	mul.w	r2, r1, r2
 80018e6:	1a9b      	subs	r3, r3, r2
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d164      	bne.n	80019b8 <main+0x5b0>
 80018ee:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d160      	bne.n	80019b8 <main+0x5b0>
		{
			if(can_change == 1)
 80018f6:	4b42      	ldr	r3, [pc, #264]	; (8001a00 <main+0x5f8>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d158      	bne.n	80019b2 <main+0x5aa>
			{

				if((RxMessage.StdId == 0x111) && ((RxData[0] & 0x01) == 1))
 8001900:	4b40      	ldr	r3, [pc, #256]	; (8001a04 <main+0x5fc>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f240 1211 	movw	r2, #273	; 0x111
 8001908:	4293      	cmp	r3, r2
 800190a:	d124      	bne.n	8001956 <main+0x54e>
 800190c:	4b3e      	ldr	r3, [pc, #248]	; (8001a08 <main+0x600>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	d01e      	beq.n	8001956 <main+0x54e>
				{
					highcurrent_out.IsoEN = 1;
 8001918:	4a2e      	ldr	r2, [pc, #184]	; (80019d4 <main+0x5cc>)
 800191a:	7813      	ldrb	r3, [r2, #0]
 800191c:	f043 0320 	orr.w	r3, r3, #32
 8001920:	7013      	strb	r3, [r2, #0]
					HAL_GPIO_WritePin(ISOSPI_EN_GPIO_Port, ISOSPI_EN_Pin, highcurrent_out.IsoEN);
 8001922:	4b2c      	ldr	r3, [pc, #176]	; (80019d4 <main+0x5cc>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800192a:	b2db      	uxtb	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001932:	4824      	ldr	r0, [pc, #144]	; (80019c4 <main+0x5bc>)
 8001934:	f002 fa0e 	bl	8003d54 <HAL_GPIO_WritePin>
					leuchten_out.BlueLed = 1;
 8001938:	4a23      	ldr	r2, [pc, #140]	; (80019c8 <main+0x5c0>)
 800193a:	7813      	ldrb	r3, [r2, #0]
 800193c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001940:	7013      	strb	r3, [r2, #0]
					HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, leuchten_out.BlueLed);
 8001942:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <main+0x5c0>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800194a:	b2db      	uxtb	r3, r3
 800194c:	461a      	mov	r2, r3
 800194e:	2180      	movs	r1, #128	; 0x80
 8001950:	481e      	ldr	r0, [pc, #120]	; (80019cc <main+0x5c4>)
 8001952:	f002 f9ff 	bl	8003d54 <HAL_GPIO_WritePin>
				}

				if((RxMessage.StdId == 0x111) && ((RxData[0] & 0x01) != 1))
 8001956:	4b2b      	ldr	r3, [pc, #172]	; (8001a04 <main+0x5fc>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f240 1211 	movw	r2, #273	; 0x111
 800195e:	4293      	cmp	r3, r2
 8001960:	d124      	bne.n	80019ac <main+0x5a4>
 8001962:	4b29      	ldr	r3, [pc, #164]	; (8001a08 <main+0x600>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d11e      	bne.n	80019ac <main+0x5a4>
				{
					highcurrent_out.IsoEN = 0;
 800196e:	4a19      	ldr	r2, [pc, #100]	; (80019d4 <main+0x5cc>)
 8001970:	7813      	ldrb	r3, [r2, #0]
 8001972:	f36f 1345 	bfc	r3, #5, #1
 8001976:	7013      	strb	r3, [r2, #0]
					HAL_GPIO_WritePin(ISOSPI_EN_GPIO_Port, ISOSPI_EN_Pin, highcurrent_out.IsoEN);
 8001978:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <main+0x5cc>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001980:	b2db      	uxtb	r3, r3
 8001982:	461a      	mov	r2, r3
 8001984:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001988:	480e      	ldr	r0, [pc, #56]	; (80019c4 <main+0x5bc>)
 800198a:	f002 f9e3 	bl	8003d54 <HAL_GPIO_WritePin>
					leuchten_out.BlueLed = 0;
 800198e:	4a0e      	ldr	r2, [pc, #56]	; (80019c8 <main+0x5c0>)
 8001990:	7813      	ldrb	r3, [r2, #0]
 8001992:	f36f 13c7 	bfc	r3, #7, #1
 8001996:	7013      	strb	r3, [r2, #0]
					HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, leuchten_out.BlueLed);
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <main+0x5c0>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	461a      	mov	r2, r3
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	4809      	ldr	r0, [pc, #36]	; (80019cc <main+0x5c4>)
 80019a8:	f002 f9d4 	bl	8003d54 <HAL_GPIO_WritePin>
				}
				can_change = 0;
 80019ac:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <main+0x5f8>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
			}
	
			count = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
		}

		// Zuruecksetzen des Start Flags, damit Tasks erst nach einer ms wieder aufgerufen werden kann
		start_flag = 0;																		// Zuruechsetze Start Flag
 80019b8:	2300      	movs	r3, #0
 80019ba:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		if (millisekunden_flag_1 == 1)
 80019be:	e6eb      	b.n	8001798 <main+0x390>
 80019c0:	20000034 	.word	0x20000034
 80019c4:	40021000 	.word	0x40021000
 80019c8:	2000003c 	.word	0x2000003c
 80019cc:	40020400 	.word	0x40020400
 80019d0:	080078c8 	.word	0x080078c8
 80019d4:	20000038 	.word	0x20000038
 80019d8:	40021800 	.word	0x40021800
 80019dc:	40020c00 	.word	0x40020c00
 80019e0:	40021400 	.word	0x40021400
 80019e4:	20000104 	.word	0x20000104
 80019e8:	51eb851f 	.word	0x51eb851f
 80019ec:	20000040 	.word	0x20000040
 80019f0:	200000b4 	.word	0x200000b4
 80019f4:	20000028 	.word	0x20000028
 80019f8:	2000002c 	.word	0x2000002c
 80019fc:	20000030 	.word	0x20000030
 8001a00:	20000105 	.word	0x20000105
 8001a04:	200000dc 	.word	0x200000dc
 8001a08:	200000f8 	.word	0x200000f8

08001a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b094      	sub	sp, #80	; 0x50
 8001a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a12:	f107 031c 	add.w	r3, r7, #28
 8001a16:	2234      	movs	r2, #52	; 0x34
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f005 fcf2 	bl	8007404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a20:	f107 0308 	add.w	r3, r7, #8
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a30:	4b2c      	ldr	r3, [pc, #176]	; (8001ae4 <SystemClock_Config+0xd8>)
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	4a2b      	ldr	r2, [pc, #172]	; (8001ae4 <SystemClock_Config+0xd8>)
 8001a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3c:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <SystemClock_Config+0xd8>)
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a48:	4b27      	ldr	r3, [pc, #156]	; (8001ae8 <SystemClock_Config+0xdc>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a26      	ldr	r2, [pc, #152]	; (8001ae8 <SystemClock_Config+0xdc>)
 8001a4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	4b24      	ldr	r3, [pc, #144]	; (8001ae8 <SystemClock_Config+0xdc>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a5c:	603b      	str	r3, [r7, #0]
 8001a5e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a60:	2301      	movs	r3, #1
 8001a62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a68:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a74:	2319      	movs	r3, #25
 8001a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001a78:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001a7c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001a82:	2308      	movs	r3, #8
 8001a84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a86:	2302      	movs	r3, #2
 8001a88:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a8a:	f107 031c 	add.w	r3, r7, #28
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f002 f9ca 	bl	8003e28 <HAL_RCC_OscConfig>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001a9a:	f000 f889 	bl	8001bb0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a9e:	f002 f973 	bl	8003d88 <HAL_PWREx_EnableOverDrive>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001aa8:	f000 f882 	bl	8001bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aac:	230f      	movs	r3, #15
 8001aae:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ab8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001abc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001ac4:	f107 0308 	add.w	r3, r7, #8
 8001ac8:	2107      	movs	r1, #7
 8001aca:	4618      	mov	r0, r3
 8001acc:	f002 fc5a 	bl	8004384 <HAL_RCC_ClockConfig>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001ad6:	f000 f86b 	bl	8001bb0 <Error_Handler>
  }
}
 8001ada:	bf00      	nop
 8001adc:	3750      	adds	r7, #80	; 0x50
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40007000 	.word	0x40007000

08001aec <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
// Interrupts
// Can-Interrupt: Nachricht wartet
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxMessage, RxData);
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8001af6:	4a07      	ldr	r2, [pc, #28]	; (8001b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001af8:	2100      	movs	r1, #0
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f001 faec 	bl	80030d8 <HAL_CAN_GetRxMessage>
	can_change = 1;
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	701a      	strb	r2, [r3, #0]
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200000f8 	.word	0x200000f8
 8001b14:	200000dc 	.word	0x200000dc
 8001b18:	20000105 	.word	0x20000105

08001b1c <HAL_TIM_PeriodElapsedCallback>:

// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b1c:	b590      	push	{r4, r7, lr}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
	// Kontrolliere welcher Timer den Ueberlauf ausgeloest hat
	if (htim == &htim6)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a1d      	ldr	r2, [pc, #116]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d102      	bne.n	8001b32 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		millisekunden_flag_1 = 1;
 8001b2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	701a      	strb	r2, [r3, #0]
	}

	// Timer IMD
	if (htim == &htim1)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a1b      	ldr	r2, [pc, #108]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d12c      	bne.n	8001b94 <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	7f1b      	ldrb	r3, [r3, #28]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d112      	bne.n	8001b68 <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			rising = calculateMovingAverage(rising, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1), 64);
 8001b42:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	461c      	mov	r4, r3
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4815      	ldr	r0, [pc, #84]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001b4e:	f004 f8b1 	bl	8005cb4 <HAL_TIM_ReadCapturedValue>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2240      	movs	r2, #64	; 0x40
 8001b56:	4619      	mov	r1, r3
 8001b58:	4620      	mov	r0, r4
 8001b5a:	f7ff f88f 	bl	8000c7c <calculateMovingAverage>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001b64:	801a      	strh	r2, [r3, #0]
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
		{
			falling = calculateMovingAverage(falling, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2), 64);
		}
	}
}
 8001b66:	e015      	b.n	8001b94 <HAL_TIM_PeriodElapsedCallback+0x78>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	7f1b      	ldrb	r3, [r3, #28]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d111      	bne.n	8001b94 <HAL_TIM_PeriodElapsedCallback+0x78>
			falling = calculateMovingAverage(falling, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2), 64);
 8001b70:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	461c      	mov	r4, r3
 8001b78:	2104      	movs	r1, #4
 8001b7a:	480a      	ldr	r0, [pc, #40]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001b7c:	f004 f89a 	bl	8005cb4 <HAL_TIM_ReadCapturedValue>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2240      	movs	r2, #64	; 0x40
 8001b84:	4619      	mov	r1, r3
 8001b86:	4620      	mov	r0, r4
 8001b88:	f7ff f878 	bl	8000c7c <calculateMovingAverage>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001b92:	801a      	strh	r2, [r3, #0]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd90      	pop	{r4, r7, pc}
 8001b9c:	20000268 	.word	0x20000268
 8001ba0:	20000104 	.word	0x20000104
 8001ba4:	200001d0 	.word	0x200001d0
 8001ba8:	20000100 	.word	0x20000100
 8001bac:	20000102 	.word	0x20000102

08001bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <MX_SPI1_Init+0x74>)
 8001bc6:	4a1c      	ldr	r2, [pc, #112]	; (8001c38 <MX_SPI1_Init+0x78>)
 8001bc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bca:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <MX_SPI1_Init+0x74>)
 8001bcc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bd2:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <MX_SPI1_Init+0x74>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001bd8:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <MX_SPI1_Init+0x74>)
 8001bda:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001bde:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001be0:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <MX_SPI1_Init+0x74>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001be6:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <MX_SPI1_Init+0x74>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001bec:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <MX_SPI1_Init+0x74>)
 8001bee:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001bf2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <MX_SPI1_Init+0x74>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <MX_SPI1_Init+0x74>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <MX_SPI1_Init+0x74>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <MX_SPI1_Init+0x74>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <MX_SPI1_Init+0x74>)
 8001c0e:	2207      	movs	r2, #7
 8001c10:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c12:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <MX_SPI1_Init+0x74>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <MX_SPI1_Init+0x74>)
 8001c1a:	2208      	movs	r2, #8
 8001c1c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c1e:	4805      	ldr	r0, [pc, #20]	; (8001c34 <MX_SPI1_Init+0x74>)
 8001c20:	f003 f9be 	bl	8004fa0 <HAL_SPI_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c2a:	f7ff ffc1 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000108 	.word	0x20000108
 8001c38:	40013000 	.word	0x40013000

08001c3c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001c40:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <MX_SPI4_Init+0x74>)
 8001c42:	4a1c      	ldr	r2, [pc, #112]	; (8001cb4 <MX_SPI4_Init+0x78>)
 8001c44:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001c46:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <MX_SPI4_Init+0x74>)
 8001c48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c4c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001c4e:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <MX_SPI4_Init+0x74>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001c54:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <MX_SPI4_Init+0x74>)
 8001c56:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001c5a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c5c:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <MX_SPI4_Init+0x74>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c62:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <MX_SPI4_Init+0x74>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <MX_SPI4_Init+0x74>)
 8001c6a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001c6e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c70:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <MX_SPI4_Init+0x74>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <MX_SPI4_Init+0x74>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <MX_SPI4_Init+0x74>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <MX_SPI4_Init+0x74>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <MX_SPI4_Init+0x74>)
 8001c8a:	2207      	movs	r2, #7
 8001c8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c8e:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <MX_SPI4_Init+0x74>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <MX_SPI4_Init+0x74>)
 8001c96:	2208      	movs	r2, #8
 8001c98:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001c9a:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <MX_SPI4_Init+0x74>)
 8001c9c:	f003 f980 	bl	8004fa0 <HAL_SPI_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001ca6:	f7ff ff83 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	2000016c 	.word	0x2000016c
 8001cb4:	40013400 	.word	0x40013400

08001cb8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08c      	sub	sp, #48	; 0x30
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 031c 	add.w	r3, r7, #28
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a3d      	ldr	r2, [pc, #244]	; (8001dcc <HAL_SPI_MspInit+0x114>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d145      	bne.n	8001d66 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cda:	4b3d      	ldr	r3, [pc, #244]	; (8001dd0 <HAL_SPI_MspInit+0x118>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	4a3c      	ldr	r2, [pc, #240]	; (8001dd0 <HAL_SPI_MspInit+0x118>)
 8001ce0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce6:	4b3a      	ldr	r3, [pc, #232]	; (8001dd0 <HAL_SPI_MspInit+0x118>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cee:	61bb      	str	r3, [r7, #24]
 8001cf0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cf2:	4b37      	ldr	r3, [pc, #220]	; (8001dd0 <HAL_SPI_MspInit+0x118>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a36      	ldr	r2, [pc, #216]	; (8001dd0 <HAL_SPI_MspInit+0x118>)
 8001cf8:	f043 0308 	orr.w	r3, r3, #8
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfe:	4b34      	ldr	r3, [pc, #208]	; (8001dd0 <HAL_SPI_MspInit+0x118>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d0a:	4b31      	ldr	r3, [pc, #196]	; (8001dd0 <HAL_SPI_MspInit+0x118>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a30      	ldr	r2, [pc, #192]	; (8001dd0 <HAL_SPI_MspInit+0x118>)
 8001d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b2e      	ldr	r3, [pc, #184]	; (8001dd0 <HAL_SPI_MspInit+0x118>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 8001d22:	2380      	movs	r3, #128	; 0x80
 8001d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d26:	2302      	movs	r3, #2
 8001d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d32:	2305      	movs	r3, #5
 8001d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001d36:	f107 031c 	add.w	r3, r7, #28
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4825      	ldr	r0, [pc, #148]	; (8001dd4 <HAL_SPI_MspInit+0x11c>)
 8001d3e:	f001 fe45 	bl	80039cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTI_MISO_Pin|POTI_CS_Pin|POTI_SCK_Pin;
 8001d42:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d50:	2303      	movs	r3, #3
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d54:	2305      	movs	r3, #5
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d58:	f107 031c 	add.w	r3, r7, #28
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	481e      	ldr	r0, [pc, #120]	; (8001dd8 <HAL_SPI_MspInit+0x120>)
 8001d60:	f001 fe34 	bl	80039cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001d64:	e02d      	b.n	8001dc2 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI4)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1c      	ldr	r2, [pc, #112]	; (8001ddc <HAL_SPI_MspInit+0x124>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d128      	bne.n	8001dc2 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001d70:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <HAL_SPI_MspInit+0x118>)
 8001d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d74:	4a16      	ldr	r2, [pc, #88]	; (8001dd0 <HAL_SPI_MspInit+0x118>)
 8001d76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d7a:	6453      	str	r3, [r2, #68]	; 0x44
 8001d7c:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <HAL_SPI_MspInit+0x118>)
 8001d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_SPI_MspInit+0x118>)
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8c:	4a10      	ldr	r2, [pc, #64]	; (8001dd0 <HAL_SPI_MspInit+0x118>)
 8001d8e:	f043 0310 	orr.w	r3, r3, #16
 8001d92:	6313      	str	r3, [r2, #48]	; 0x30
 8001d94:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <HAL_SPI_MspInit+0x118>)
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	f003 0310 	and.w	r3, r3, #16
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ISOSPI_CS_Pin|ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 8001da0:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8001da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da6:	2302      	movs	r3, #2
 8001da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dae:	2303      	movs	r3, #3
 8001db0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001db2:	2305      	movs	r3, #5
 8001db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001db6:	f107 031c 	add.w	r3, r7, #28
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4808      	ldr	r0, [pc, #32]	; (8001de0 <HAL_SPI_MspInit+0x128>)
 8001dbe:	f001 fe05 	bl	80039cc <HAL_GPIO_Init>
}
 8001dc2:	bf00      	nop
 8001dc4:	3730      	adds	r7, #48	; 0x30
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40013000 	.word	0x40013000
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40020c00 	.word	0x40020c00
 8001dd8:	40021800 	.word	0x40021800
 8001ddc:	40013400 	.word	0x40013400
 8001de0:	40021000 	.word	0x40021000

08001de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dea:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <HAL_MspInit+0x44>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	4a0e      	ldr	r2, [pc, #56]	; (8001e28 <HAL_MspInit+0x44>)
 8001df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df4:	6413      	str	r3, [r2, #64]	; 0x40
 8001df6:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <HAL_MspInit+0x44>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e02:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_MspInit+0x44>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	4a08      	ldr	r2, [pc, #32]	; (8001e28 <HAL_MspInit+0x44>)
 8001e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_MspInit+0x44>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40023800 	.word	0x40023800

08001e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e3e:	e7fe      	b.n	8001e3e <HardFault_Handler+0x4>

08001e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <MemManage_Handler+0x4>

08001e46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e4a:	e7fe      	b.n	8001e4a <BusFault_Handler+0x4>

08001e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e50:	e7fe      	b.n	8001e50 <UsageFault_Handler+0x4>

08001e52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e80:	f000 fb0e 	bl	80024a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <TIM6_DAC_IRQHandler+0x10>)
 8001e8e:	f003 fbff 	bl	8005690 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000268 	.word	0x20000268

08001e9c <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <CAN3_RX0_IRQHandler+0x10>)
 8001ea2:	f001 fa51 	bl	8003348 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	200000b4 	.word	0x200000b4

08001eb0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb4:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <SystemInit+0x28>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eba:	4a07      	ldr	r2, [pc, #28]	; (8001ed8 <SystemInit+0x28>)
 8001ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ec4:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <SystemInit+0x28>)
 8001ec6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001eca:	609a      	str	r2, [r3, #8]
#endif
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08c      	sub	sp, #48	; 0x30
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001ee2:	f107 031c 	add.w	r3, r7, #28
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	609a      	str	r2, [r3, #8]
 8001eee:	60da      	str	r2, [r3, #12]
 8001ef0:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ef2:	f107 030c 	add.w	r3, r7, #12
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f00:	463b      	mov	r3, r7
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f0a:	4b35      	ldr	r3, [pc, #212]	; (8001fe0 <MX_TIM1_Init+0x104>)
 8001f0c:	4a35      	ldr	r2, [pc, #212]	; (8001fe4 <MX_TIM1_Init+0x108>)
 8001f0e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f10:	4b33      	ldr	r3, [pc, #204]	; (8001fe0 <MX_TIM1_Init+0x104>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f16:	4b32      	ldr	r3, [pc, #200]	; (8001fe0 <MX_TIM1_Init+0x104>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f1c:	4b30      	ldr	r3, [pc, #192]	; (8001fe0 <MX_TIM1_Init+0x104>)
 8001f1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f22:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f24:	4b2e      	ldr	r3, [pc, #184]	; (8001fe0 <MX_TIM1_Init+0x104>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f2a:	4b2d      	ldr	r3, [pc, #180]	; (8001fe0 <MX_TIM1_Init+0x104>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f30:	4b2b      	ldr	r3, [pc, #172]	; (8001fe0 <MX_TIM1_Init+0x104>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001f36:	482a      	ldr	r0, [pc, #168]	; (8001fe0 <MX_TIM1_Init+0x104>)
 8001f38:	f003 fa03 	bl	8005342 <HAL_TIM_IC_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001f42:	f7ff fe35 	bl	8001bb0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001f46:	2304      	movs	r3, #4
 8001f48:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001f4a:	2350      	movs	r3, #80	; 0x50
 8001f4c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001f52:	2300      	movs	r3, #0
 8001f54:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001f5a:	f107 031c 	add.w	r3, r7, #28
 8001f5e:	4619      	mov	r1, r3
 8001f60:	481f      	ldr	r0, [pc, #124]	; (8001fe0 <MX_TIM1_Init+0x104>)
 8001f62:	f003 fe65 	bl	8005c30 <HAL_TIM_SlaveConfigSynchro>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001f6c:	f7ff fe20 	bl	8001bb0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f74:	2301      	movs	r3, #1
 8001f76:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001f80:	f107 030c 	add.w	r3, r7, #12
 8001f84:	2200      	movs	r2, #0
 8001f86:	4619      	mov	r1, r3
 8001f88:	4815      	ldr	r0, [pc, #84]	; (8001fe0 <MX_TIM1_Init+0x104>)
 8001f8a:	f003 fca0 	bl	80058ce <HAL_TIM_IC_ConfigChannel>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001f94:	f7ff fe0c 	bl	8001bb0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001fa0:	f107 030c 	add.w	r3, r7, #12
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	480d      	ldr	r0, [pc, #52]	; (8001fe0 <MX_TIM1_Init+0x104>)
 8001faa:	f003 fc90 	bl	80058ce <HAL_TIM_IC_ConfigChannel>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001fb4:	f7ff fdfc 	bl	8001bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fc4:	463b      	mov	r3, r7
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4805      	ldr	r0, [pc, #20]	; (8001fe0 <MX_TIM1_Init+0x104>)
 8001fca:	f004 fc3f 	bl	800684c <HAL_TIMEx_MasterConfigSynchronization>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001fd4:	f7ff fdec 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001fd8:	bf00      	nop
 8001fda:	3730      	adds	r7, #48	; 0x30
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	200001d0 	.word	0x200001d0
 8001fe4:	40010000 	.word	0x40010000

08001fe8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	; 0x28
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fee:	f107 031c 	add.w	r3, r7, #28
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ffa:	463b      	mov	r3, r7
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
 8002008:	615a      	str	r2, [r3, #20]
 800200a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800200c:	4b2c      	ldr	r3, [pc, #176]	; (80020c0 <MX_TIM4_Init+0xd8>)
 800200e:	4a2d      	ldr	r2, [pc, #180]	; (80020c4 <MX_TIM4_Init+0xdc>)
 8002010:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002012:	4b2b      	ldr	r3, [pc, #172]	; (80020c0 <MX_TIM4_Init+0xd8>)
 8002014:	2200      	movs	r2, #0
 8002016:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002018:	4b29      	ldr	r3, [pc, #164]	; (80020c0 <MX_TIM4_Init+0xd8>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800201e:	4b28      	ldr	r3, [pc, #160]	; (80020c0 <MX_TIM4_Init+0xd8>)
 8002020:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002024:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002026:	4b26      	ldr	r3, [pc, #152]	; (80020c0 <MX_TIM4_Init+0xd8>)
 8002028:	2200      	movs	r2, #0
 800202a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800202c:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <MX_TIM4_Init+0xd8>)
 800202e:	2200      	movs	r2, #0
 8002030:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002032:	4823      	ldr	r0, [pc, #140]	; (80020c0 <MX_TIM4_Init+0xd8>)
 8002034:	f003 f92e 	bl	8005294 <HAL_TIM_PWM_Init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800203e:	f7ff fdb7 	bl	8001bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002046:	2300      	movs	r3, #0
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800204a:	f107 031c 	add.w	r3, r7, #28
 800204e:	4619      	mov	r1, r3
 8002050:	481b      	ldr	r0, [pc, #108]	; (80020c0 <MX_TIM4_Init+0xd8>)
 8002052:	f004 fbfb 	bl	800684c <HAL_TIMEx_MasterConfigSynchronization>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800205c:	f7ff fda8 	bl	8001bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002060:	2360      	movs	r3, #96	; 0x60
 8002062:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002068:	2300      	movs	r3, #0
 800206a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800206c:	2300      	movs	r3, #0
 800206e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002070:	463b      	mov	r3, r7
 8002072:	2200      	movs	r2, #0
 8002074:	4619      	mov	r1, r3
 8002076:	4812      	ldr	r0, [pc, #72]	; (80020c0 <MX_TIM4_Init+0xd8>)
 8002078:	f003 fcc6 	bl	8005a08 <HAL_TIM_PWM_ConfigChannel>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002082:	f7ff fd95 	bl	8001bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002086:	463b      	mov	r3, r7
 8002088:	2204      	movs	r2, #4
 800208a:	4619      	mov	r1, r3
 800208c:	480c      	ldr	r0, [pc, #48]	; (80020c0 <MX_TIM4_Init+0xd8>)
 800208e:	f003 fcbb 	bl	8005a08 <HAL_TIM_PWM_ConfigChannel>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002098:	f7ff fd8a 	bl	8001bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800209c:	463b      	mov	r3, r7
 800209e:	2208      	movs	r2, #8
 80020a0:	4619      	mov	r1, r3
 80020a2:	4807      	ldr	r0, [pc, #28]	; (80020c0 <MX_TIM4_Init+0xd8>)
 80020a4:	f003 fcb0 	bl	8005a08 <HAL_TIM_PWM_ConfigChannel>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80020ae:	f7ff fd7f 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80020b2:	4803      	ldr	r0, [pc, #12]	; (80020c0 <MX_TIM4_Init+0xd8>)
 80020b4:	f000 f8c8 	bl	8002248 <HAL_TIM_MspPostInit>

}
 80020b8:	bf00      	nop
 80020ba:	3728      	adds	r7, #40	; 0x28
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	2000021c 	.word	0x2000021c
 80020c4:	40000800 	.word	0x40000800

080020c8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ce:	1d3b      	adds	r3, r7, #4
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80020d8:	4b14      	ldr	r3, [pc, #80]	; (800212c <MX_TIM6_Init+0x64>)
 80020da:	4a15      	ldr	r2, [pc, #84]	; (8002130 <MX_TIM6_Init+0x68>)
 80020dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 27;
 80020de:	4b13      	ldr	r3, [pc, #76]	; (800212c <MX_TIM6_Init+0x64>)
 80020e0:	221b      	movs	r2, #27
 80020e2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e4:	4b11      	ldr	r3, [pc, #68]	; (800212c <MX_TIM6_Init+0x64>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000;
 80020ea:	4b10      	ldr	r3, [pc, #64]	; (800212c <MX_TIM6_Init+0x64>)
 80020ec:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80020f0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f2:	4b0e      	ldr	r3, [pc, #56]	; (800212c <MX_TIM6_Init+0x64>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80020f8:	480c      	ldr	r0, [pc, #48]	; (800212c <MX_TIM6_Init+0x64>)
 80020fa:	f002 fffc 	bl	80050f6 <HAL_TIM_Base_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002104:	f7ff fd54 	bl	8001bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002108:	2300      	movs	r3, #0
 800210a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002110:	1d3b      	adds	r3, r7, #4
 8002112:	4619      	mov	r1, r3
 8002114:	4805      	ldr	r0, [pc, #20]	; (800212c <MX_TIM6_Init+0x64>)
 8002116:	f004 fb99 	bl	800684c <HAL_TIMEx_MasterConfigSynchronization>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002120:	f7ff fd46 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002124:	bf00      	nop
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000268 	.word	0x20000268
 8002130:	40001000 	.word	0x40001000

08002134 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08a      	sub	sp, #40	; 0x28
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213c:	f107 0314 	add.w	r3, r7, #20
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a17      	ldr	r2, [pc, #92]	; (80021b0 <HAL_TIM_IC_MspInit+0x7c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d128      	bne.n	80021a8 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002156:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <HAL_TIM_IC_MspInit+0x80>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	4a16      	ldr	r2, [pc, #88]	; (80021b4 <HAL_TIM_IC_MspInit+0x80>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	6453      	str	r3, [r2, #68]	; 0x44
 8002162:	4b14      	ldr	r3, [pc, #80]	; (80021b4 <HAL_TIM_IC_MspInit+0x80>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800216e:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <HAL_TIM_IC_MspInit+0x80>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	4a10      	ldr	r2, [pc, #64]	; (80021b4 <HAL_TIM_IC_MspInit+0x80>)
 8002174:	f043 0310 	orr.w	r3, r3, #16
 8002178:	6313      	str	r3, [r2, #48]	; 0x30
 800217a:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <HAL_TIM_IC_MspInit+0x80>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f003 0310 	and.w	r3, r3, #16
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 8002186:	f44f 7300 	mov.w	r3, #512	; 0x200
 800218a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218c:	2302      	movs	r3, #2
 800218e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002194:	2300      	movs	r3, #0
 8002196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002198:	2301      	movs	r3, #1
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	4619      	mov	r1, r3
 80021a2:	4805      	ldr	r0, [pc, #20]	; (80021b8 <HAL_TIM_IC_MspInit+0x84>)
 80021a4:	f001 fc12 	bl	80039cc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80021a8:	bf00      	nop
 80021aa:	3728      	adds	r7, #40	; 0x28
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40010000 	.word	0x40010000
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40021000 	.word	0x40021000

080021bc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a0a      	ldr	r2, [pc, #40]	; (80021f4 <HAL_TIM_PWM_MspInit+0x38>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d10b      	bne.n	80021e6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021ce:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	4a09      	ldr	r2, [pc, #36]	; (80021f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80021d4:	f043 0304 	orr.w	r3, r3, #4
 80021d8:	6413      	str	r3, [r2, #64]	; 0x40
 80021da:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80021e6:	bf00      	nop
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40000800 	.word	0x40000800
 80021f8:	40023800 	.word	0x40023800

080021fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a0d      	ldr	r2, [pc, #52]	; (8002240 <HAL_TIM_Base_MspInit+0x44>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d113      	bne.n	8002236 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800220e:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <HAL_TIM_Base_MspInit+0x48>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	4a0c      	ldr	r2, [pc, #48]	; (8002244 <HAL_TIM_Base_MspInit+0x48>)
 8002214:	f043 0310 	orr.w	r3, r3, #16
 8002218:	6413      	str	r3, [r2, #64]	; 0x40
 800221a:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <HAL_TIM_Base_MspInit+0x48>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f003 0310 	and.w	r3, r3, #16
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002226:	2200      	movs	r2, #0
 8002228:	2100      	movs	r1, #0
 800222a:	2036      	movs	r0, #54	; 0x36
 800222c:	f001 fb97 	bl	800395e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002230:	2036      	movs	r0, #54	; 0x36
 8002232:	f001 fbb0 	bl	8003996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40001000 	.word	0x40001000
 8002244:	40023800 	.word	0x40023800

08002248 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 030c 	add.w	r3, r7, #12
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a11      	ldr	r2, [pc, #68]	; (80022ac <HAL_TIM_MspPostInit+0x64>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d11c      	bne.n	80022a4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800226a:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <HAL_TIM_MspPostInit+0x68>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	4a10      	ldr	r2, [pc, #64]	; (80022b0 <HAL_TIM_MspPostInit+0x68>)
 8002270:	f043 0308 	orr.w	r3, r3, #8
 8002274:	6313      	str	r3, [r2, #48]	; 0x30
 8002276:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <HAL_TIM_MspPostInit+0x68>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin;
 8002282:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002286:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002288:	2302      	movs	r3, #2
 800228a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002290:	2300      	movs	r3, #0
 8002292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002294:	2302      	movs	r3, #2
 8002296:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002298:	f107 030c 	add.w	r3, r7, #12
 800229c:	4619      	mov	r1, r3
 800229e:	4805      	ldr	r0, [pc, #20]	; (80022b4 <HAL_TIM_MspPostInit+0x6c>)
 80022a0:	f001 fb94 	bl	80039cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80022a4:	bf00      	nop
 80022a6:	3720      	adds	r7, #32
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40000800 	.word	0x40000800
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40020c00 	.word	0x40020c00

080022b8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022bc:	4b14      	ldr	r3, [pc, #80]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022be:	4a15      	ldr	r2, [pc, #84]	; (8002314 <MX_USART2_UART_Init+0x5c>)
 80022c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80022c2:	4b13      	ldr	r3, [pc, #76]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80022c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022ca:	4b11      	ldr	r3, [pc, #68]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022d6:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022d8:	2200      	movs	r2, #0
 80022da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022de:	220c      	movs	r2, #12
 80022e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022e2:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022e8:	4b09      	ldr	r3, [pc, #36]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ee:	4b08      	ldr	r3, [pc, #32]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022fa:	4805      	ldr	r0, [pc, #20]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022fc:	f004 fb52 	bl	80069a4 <HAL_UART_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002306:	f7ff fc53 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	200002b4 	.word	0x200002b4
 8002314:	40004400 	.word	0x40004400

08002318 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b0ae      	sub	sp, #184	; 0xb8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	2290      	movs	r2, #144	; 0x90
 8002336:	2100      	movs	r1, #0
 8002338:	4618      	mov	r0, r3
 800233a:	f005 f863 	bl	8007404 <memset>
  if(uartHandle->Instance==USART2)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a21      	ldr	r2, [pc, #132]	; (80023c8 <HAL_UART_MspInit+0xb0>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d13a      	bne.n	80023be <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800234c:	2300      	movs	r3, #0
 800234e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	4618      	mov	r0, r3
 8002356:	f002 f9fb 	bl	8004750 <HAL_RCCEx_PeriphCLKConfig>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002360:	f7ff fc26 	bl	8001bb0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002364:	4b19      	ldr	r3, [pc, #100]	; (80023cc <HAL_UART_MspInit+0xb4>)
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	4a18      	ldr	r2, [pc, #96]	; (80023cc <HAL_UART_MspInit+0xb4>)
 800236a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800236e:	6413      	str	r3, [r2, #64]	; 0x40
 8002370:	4b16      	ldr	r3, [pc, #88]	; (80023cc <HAL_UART_MspInit+0xb4>)
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800237c:	4b13      	ldr	r3, [pc, #76]	; (80023cc <HAL_UART_MspInit+0xb4>)
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	4a12      	ldr	r2, [pc, #72]	; (80023cc <HAL_UART_MspInit+0xb4>)
 8002382:	f043 0308 	orr.w	r3, r3, #8
 8002386:	6313      	str	r3, [r2, #48]	; 0x30
 8002388:	4b10      	ldr	r3, [pc, #64]	; (80023cc <HAL_UART_MspInit+0xb4>)
 800238a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002394:	2360      	movs	r3, #96	; 0x60
 8002396:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239a:	2302      	movs	r3, #2
 800239c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a6:	2303      	movs	r3, #3
 80023a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023ac:	2307      	movs	r3, #7
 80023ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023b2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80023b6:	4619      	mov	r1, r3
 80023b8:	4805      	ldr	r0, [pc, #20]	; (80023d0 <HAL_UART_MspInit+0xb8>)
 80023ba:	f001 fb07 	bl	80039cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023be:	bf00      	nop
 80023c0:	37b8      	adds	r7, #184	; 0xb8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40004400 	.word	0x40004400
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40020c00 	.word	0x40020c00

080023d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800240c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80023d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80023da:	e003      	b.n	80023e4 <LoopCopyDataInit>

080023dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80023de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023e2:	3104      	adds	r1, #4

080023e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80023e4:	480b      	ldr	r0, [pc, #44]	; (8002414 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80023e6:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80023e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80023ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80023ec:	d3f6      	bcc.n	80023dc <CopyDataInit>
  ldr  r2, =_sbss
 80023ee:	4a0b      	ldr	r2, [pc, #44]	; (800241c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80023f0:	e002      	b.n	80023f8 <LoopFillZerobss>

080023f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80023f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023f4:	f842 3b04 	str.w	r3, [r2], #4

080023f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80023f8:	4b09      	ldr	r3, [pc, #36]	; (8002420 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80023fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023fc:	d3f9      	bcc.n	80023f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023fe:	f7ff fd57 	bl	8001eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002402:	f005 f807 	bl	8007414 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002406:	f7fe ffff 	bl	8001408 <main>
  bx  lr    
 800240a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800240c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002410:	08007978 	.word	0x08007978
  ldr  r0, =_sdata
 8002414:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002418:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800241c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002420:	20000340 	.word	0x20000340

08002424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002424:	e7fe      	b.n	8002424 <ADC_IRQHandler>

08002426 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800242a:	2003      	movs	r0, #3
 800242c:	f001 fa8c 	bl	8003948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002430:	2000      	movs	r0, #0
 8002432:	f000 f805 	bl	8002440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002436:	f7ff fcd5 	bl	8001de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002448:	4b12      	ldr	r3, [pc, #72]	; (8002494 <HAL_InitTick+0x54>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b12      	ldr	r3, [pc, #72]	; (8002498 <HAL_InitTick+0x58>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	4619      	mov	r1, r3
 8002452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002456:	fbb3 f3f1 	udiv	r3, r3, r1
 800245a:	fbb2 f3f3 	udiv	r3, r2, r3
 800245e:	4618      	mov	r0, r3
 8002460:	f001 faa7 	bl	80039b2 <HAL_SYSTICK_Config>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e00e      	b.n	800248c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b0f      	cmp	r3, #15
 8002472:	d80a      	bhi.n	800248a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002474:	2200      	movs	r2, #0
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	f04f 30ff 	mov.w	r0, #4294967295
 800247c:	f001 fa6f 	bl	800395e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002480:	4a06      	ldr	r2, [pc, #24]	; (800249c <HAL_InitTick+0x5c>)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	e000      	b.n	800248c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	20000000 	.word	0x20000000
 8002498:	20000008 	.word	0x20000008
 800249c:	20000004 	.word	0x20000004

080024a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_IncTick+0x20>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_IncTick+0x24>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4413      	add	r3, r2
 80024b0:	4a04      	ldr	r2, [pc, #16]	; (80024c4 <HAL_IncTick+0x24>)
 80024b2:	6013      	str	r3, [r2, #0]
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	20000008 	.word	0x20000008
 80024c4:	2000033c 	.word	0x2000033c

080024c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return uwTick;
 80024cc:	4b03      	ldr	r3, [pc, #12]	; (80024dc <HAL_GetTick+0x14>)
 80024ce:	681b      	ldr	r3, [r3, #0]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	2000033c 	.word	0x2000033c

080024e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024e8:	f7ff ffee 	bl	80024c8 <HAL_GetTick>
 80024ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	d005      	beq.n	8002506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024fa:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <HAL_Delay+0x44>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4413      	add	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002506:	bf00      	nop
 8002508:	f7ff ffde 	bl	80024c8 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	429a      	cmp	r2, r3
 8002516:	d8f7      	bhi.n	8002508 <HAL_Delay+0x28>
  {
  }
}
 8002518:	bf00      	nop
 800251a:	bf00      	nop
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000008 	.word	0x20000008

08002528 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 800252c:	4b02      	ldr	r3, [pc, #8]	; (8002538 <HAL_GetHalVersion+0x10>)
}
 800252e:	4618      	mov	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	01030000 	.word	0x01030000

0800253c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8002540:	4b03      	ldr	r3, [pc, #12]	; (8002550 <HAL_GetREVID+0x14>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	0c1b      	lsrs	r3, r3, #16
}
 8002546:	4618      	mov	r0, r3
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	e0042000 	.word	0xe0042000

08002554 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8002558:	4b04      	ldr	r3, [pc, #16]	; (800256c <HAL_GetDEVID+0x18>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002560:	4618      	mov	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	e0042000 	.word	0xe0042000

08002570 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8002574:	4b03      	ldr	r3, [pc, #12]	; (8002584 <HAL_GetUIDw0+0x14>)
 8002576:	681b      	ldr	r3, [r3, #0]
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	1ff0f420 	.word	0x1ff0f420

08002588 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 800258c:	4b03      	ldr	r3, [pc, #12]	; (800259c <HAL_GetUIDw1+0x14>)
 800258e:	681b      	ldr	r3, [r3, #0]
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	1ff0f424 	.word	0x1ff0f424

080025a0 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <HAL_GetUIDw2+0x14>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	1ff0f428 	.word	0x1ff0f428

080025b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025c0:	2300      	movs	r3, #0
 80025c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e031      	b.n	8002632 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7fe fc54 	bl	8000e84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f003 0310 	and.w	r3, r3, #16
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d116      	bne.n	8002624 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025fa:	4b10      	ldr	r3, [pc, #64]	; (800263c <HAL_ADC_Init+0x84>)
 80025fc:	4013      	ands	r3, r2
 80025fe:	f043 0202 	orr.w	r2, r3, #2
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f970 	bl	80028ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f023 0303 	bic.w	r3, r3, #3
 800261a:	f043 0201 	orr.w	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	641a      	str	r2, [r3, #64]	; 0x40
 8002622:	e001      	b.n	8002628 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002630:	7bfb      	ldrb	r3, [r7, #15]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	ffffeefd 	.word	0xffffeefd

08002640 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002654:	2b01      	cmp	r3, #1
 8002656:	d101      	bne.n	800265c <HAL_ADC_ConfigChannel+0x1c>
 8002658:	2302      	movs	r3, #2
 800265a:	e136      	b.n	80028ca <HAL_ADC_ConfigChannel+0x28a>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b09      	cmp	r3, #9
 800266a:	d93a      	bls.n	80026e2 <HAL_ADC_ConfigChannel+0xa2>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002674:	d035      	beq.n	80026e2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68d9      	ldr	r1, [r3, #12]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	b29b      	uxth	r3, r3
 8002682:	461a      	mov	r2, r3
 8002684:	4613      	mov	r3, r2
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4413      	add	r3, r2
 800268a:	3b1e      	subs	r3, #30
 800268c:	2207      	movs	r2, #7
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43da      	mvns	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	400a      	ands	r2, r1
 800269a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a8d      	ldr	r2, [pc, #564]	; (80028d8 <HAL_ADC_ConfigChannel+0x298>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d10a      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68d9      	ldr	r1, [r3, #12]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	061a      	lsls	r2, r3, #24
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026ba:	e035      	b.n	8002728 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68d9      	ldr	r1, [r3, #12]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	4618      	mov	r0, r3
 80026ce:	4603      	mov	r3, r0
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4403      	add	r3, r0
 80026d4:	3b1e      	subs	r3, #30
 80026d6:	409a      	lsls	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026e0:	e022      	b.n	8002728 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6919      	ldr	r1, [r3, #16]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	461a      	mov	r2, r3
 80026f0:	4613      	mov	r3, r2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4413      	add	r3, r2
 80026f6:	2207      	movs	r2, #7
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43da      	mvns	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	400a      	ands	r2, r1
 8002704:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6919      	ldr	r1, [r3, #16]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	b29b      	uxth	r3, r3
 8002716:	4618      	mov	r0, r3
 8002718:	4603      	mov	r3, r0
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	4403      	add	r3, r0
 800271e:	409a      	lsls	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b06      	cmp	r3, #6
 800272e:	d824      	bhi.n	800277a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	3b05      	subs	r3, #5
 8002742:	221f      	movs	r2, #31
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43da      	mvns	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	400a      	ands	r2, r1
 8002750:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	b29b      	uxth	r3, r3
 800275e:	4618      	mov	r0, r3
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	3b05      	subs	r3, #5
 800276c:	fa00 f203 	lsl.w	r2, r0, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	635a      	str	r2, [r3, #52]	; 0x34
 8002778:	e04c      	b.n	8002814 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b0c      	cmp	r3, #12
 8002780:	d824      	bhi.n	80027cc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	3b23      	subs	r3, #35	; 0x23
 8002794:	221f      	movs	r2, #31
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43da      	mvns	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	400a      	ands	r2, r1
 80027a2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	4618      	mov	r0, r3
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	3b23      	subs	r3, #35	; 0x23
 80027be:	fa00 f203 	lsl.w	r2, r0, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	631a      	str	r2, [r3, #48]	; 0x30
 80027ca:	e023      	b.n	8002814 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	3b41      	subs	r3, #65	; 0x41
 80027de:	221f      	movs	r2, #31
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43da      	mvns	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	400a      	ands	r2, r1
 80027ec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	4618      	mov	r0, r3
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	3b41      	subs	r3, #65	; 0x41
 8002808:	fa00 f203 	lsl.w	r2, r0, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a30      	ldr	r2, [pc, #192]	; (80028dc <HAL_ADC_ConfigChannel+0x29c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d10a      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x1f4>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002826:	d105      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002828:	4b2d      	ldr	r3, [pc, #180]	; (80028e0 <HAL_ADC_ConfigChannel+0x2a0>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	4a2c      	ldr	r2, [pc, #176]	; (80028e0 <HAL_ADC_ConfigChannel+0x2a0>)
 800282e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002832:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a28      	ldr	r2, [pc, #160]	; (80028dc <HAL_ADC_ConfigChannel+0x29c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d10f      	bne.n	800285e <HAL_ADC_ConfigChannel+0x21e>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b12      	cmp	r3, #18
 8002844:	d10b      	bne.n	800285e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002846:	4b26      	ldr	r3, [pc, #152]	; (80028e0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	4a25      	ldr	r2, [pc, #148]	; (80028e0 <HAL_ADC_ConfigChannel+0x2a0>)
 800284c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002850:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002852:	4b23      	ldr	r3, [pc, #140]	; (80028e0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4a22      	ldr	r2, [pc, #136]	; (80028e0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002858:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800285c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a1e      	ldr	r2, [pc, #120]	; (80028dc <HAL_ADC_ConfigChannel+0x29c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d12b      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x280>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a1a      	ldr	r2, [pc, #104]	; (80028d8 <HAL_ADC_ConfigChannel+0x298>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d003      	beq.n	800287a <HAL_ADC_ConfigChannel+0x23a>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2b11      	cmp	r3, #17
 8002878:	d122      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800287a:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <HAL_ADC_ConfigChannel+0x2a0>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	4a18      	ldr	r2, [pc, #96]	; (80028e0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002880:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002884:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002886:	4b16      	ldr	r3, [pc, #88]	; (80028e0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	4a15      	ldr	r2, [pc, #84]	; (80028e0 <HAL_ADC_ConfigChannel+0x2a0>)
 800288c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002890:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a10      	ldr	r2, [pc, #64]	; (80028d8 <HAL_ADC_ConfigChannel+0x298>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d111      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800289c:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <HAL_ADC_ConfigChannel+0x2a4>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a11      	ldr	r2, [pc, #68]	; (80028e8 <HAL_ADC_ConfigChannel+0x2a8>)
 80028a2:	fba2 2303 	umull	r2, r3, r2, r3
 80028a6:	0c9a      	lsrs	r2, r3, #18
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80028b2:	e002      	b.n	80028ba <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f9      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	10000012 	.word	0x10000012
 80028dc:	40012000 	.word	0x40012000
 80028e0:	40012300 	.word	0x40012300
 80028e4:	20000000 	.word	0x20000000
 80028e8:	431bde83 	.word	0x431bde83

080028ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80028f4:	4b78      	ldr	r3, [pc, #480]	; (8002ad8 <ADC_Init+0x1ec>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	4a77      	ldr	r2, [pc, #476]	; (8002ad8 <ADC_Init+0x1ec>)
 80028fa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80028fe:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002900:	4b75      	ldr	r3, [pc, #468]	; (8002ad8 <ADC_Init+0x1ec>)
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4973      	ldr	r1, [pc, #460]	; (8002ad8 <ADC_Init+0x1ec>)
 800290a:	4313      	orrs	r3, r2
 800290c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800291c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6859      	ldr	r1, [r3, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	021a      	lsls	r2, r3, #8
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002940:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6859      	ldr	r1, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002962:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6899      	ldr	r1, [r3, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297a:	4a58      	ldr	r2, [pc, #352]	; (8002adc <ADC_Init+0x1f0>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d022      	beq.n	80029c6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800298e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6899      	ldr	r1, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6899      	ldr	r1, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	e00f      	b.n	80029e6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0202 	bic.w	r2, r2, #2
 80029f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6899      	ldr	r1, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	005a      	lsls	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d01b      	beq.n	8002a4c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6859      	ldr	r1, [r3, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	035a      	lsls	r2, r3, #13
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	e007      	b.n	8002a5c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	051a      	lsls	r2, r3, #20
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6899      	ldr	r1, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a9e:	025a      	lsls	r2, r3, #9
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6899      	ldr	r1, [r3, #8]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	029a      	lsls	r2, r3, #10
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	609a      	str	r2, [r3, #8]
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	40012300 	.word	0x40012300
 8002adc:	0f000001 	.word	0x0f000001

08002ae0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e0ed      	b.n	8002cce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d102      	bne.n	8002b04 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7fe fa6c 	bl	8000fdc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b14:	f7ff fcd8 	bl	80024c8 <HAL_GetTick>
 8002b18:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b1a:	e012      	b.n	8002b42 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b1c:	f7ff fcd4 	bl	80024c8 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b0a      	cmp	r3, #10
 8002b28:	d90b      	bls.n	8002b42 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2205      	movs	r2, #5
 8002b3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e0c5      	b.n	8002cce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0e5      	beq.n	8002b1c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0202 	bic.w	r2, r2, #2
 8002b5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b60:	f7ff fcb2 	bl	80024c8 <HAL_GetTick>
 8002b64:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b66:	e012      	b.n	8002b8e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b68:	f7ff fcae 	bl	80024c8 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b0a      	cmp	r3, #10
 8002b74:	d90b      	bls.n	8002b8e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2205      	movs	r2, #5
 8002b86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e09f      	b.n	8002cce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1e5      	bne.n	8002b68 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	7e1b      	ldrb	r3, [r3, #24]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d108      	bne.n	8002bb6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	e007      	b.n	8002bc6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	7e5b      	ldrb	r3, [r3, #25]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d108      	bne.n	8002be0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	e007      	b.n	8002bf0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	7e9b      	ldrb	r3, [r3, #26]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d108      	bne.n	8002c0a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0220 	orr.w	r2, r2, #32
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	e007      	b.n	8002c1a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0220 	bic.w	r2, r2, #32
 8002c18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	7edb      	ldrb	r3, [r3, #27]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d108      	bne.n	8002c34 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0210 	bic.w	r2, r2, #16
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	e007      	b.n	8002c44 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0210 	orr.w	r2, r2, #16
 8002c42:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	7f1b      	ldrb	r3, [r3, #28]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d108      	bne.n	8002c5e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0208 	orr.w	r2, r2, #8
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	e007      	b.n	8002c6e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0208 	bic.w	r2, r2, #8
 8002c6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	7f5b      	ldrb	r3, [r3, #29]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d108      	bne.n	8002c88 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f042 0204 	orr.w	r2, r2, #4
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	e007      	b.n	8002c98 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0204 	bic.w	r2, r2, #4
 8002c96:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	ea42 0103 	orr.w	r1, r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	1e5a      	subs	r2, r3, #1
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b087      	sub	sp, #28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cee:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002cf0:	7cfb      	ldrb	r3, [r7, #19]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d003      	beq.n	8002cfe <HAL_CAN_ConfigFilter+0x26>
 8002cf6:	7cfb      	ldrb	r3, [r7, #19]
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	f040 80c7 	bne.w	8002e8c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a69      	ldr	r2, [pc, #420]	; (8002ea8 <HAL_CAN_ConfigFilter+0x1d0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d001      	beq.n	8002d0c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002d08:	4b68      	ldr	r3, [pc, #416]	; (8002eac <HAL_CAN_ConfigFilter+0x1d4>)
 8002d0a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d12:	f043 0201 	orr.w	r2, r3, #1
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	4a63      	ldr	r2, [pc, #396]	; (8002eac <HAL_CAN_ConfigFilter+0x1d4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d111      	bne.n	8002d48 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d2a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	021b      	lsls	r3, r3, #8
 8002d40:	431a      	orrs	r2, r3
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	f003 031f 	and.w	r3, r3, #31
 8002d50:	2201      	movs	r2, #1
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	43db      	mvns	r3, r3
 8002d62:	401a      	ands	r2, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d123      	bne.n	8002dba <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	401a      	ands	r2, r3
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002d94:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	3248      	adds	r2, #72	; 0x48
 8002d9a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002dae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002db0:	6979      	ldr	r1, [r7, #20]
 8002db2:	3348      	adds	r3, #72	; 0x48
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	440b      	add	r3, r1
 8002db8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d122      	bne.n	8002e08 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002de2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	3248      	adds	r2, #72	; 0x48
 8002de8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002dfc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002dfe:	6979      	ldr	r1, [r7, #20]
 8002e00:	3348      	adds	r3, #72	; 0x48
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	440b      	add	r3, r1
 8002e06:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d109      	bne.n	8002e24 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002e22:	e007      	b.n	8002e34 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d109      	bne.n	8002e50 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	43db      	mvns	r3, r3
 8002e46:	401a      	ands	r2, r3
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002e4e:	e007      	b.n	8002e60 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d107      	bne.n	8002e78 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	431a      	orrs	r2, r3
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e7e:	f023 0201 	bic.w	r2, r3, #1
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	e006      	b.n	8002e9a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
  }
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	371c      	adds	r7, #28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40003400 	.word	0x40003400
 8002eac:	40006400 	.word	0x40006400

08002eb0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d12e      	bne.n	8002f22 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0201 	bic.w	r2, r2, #1
 8002eda:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002edc:	f7ff faf4 	bl	80024c8 <HAL_GetTick>
 8002ee0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ee2:	e012      	b.n	8002f0a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ee4:	f7ff faf0 	bl	80024c8 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b0a      	cmp	r3, #10
 8002ef0:	d90b      	bls.n	8002f0a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2205      	movs	r2, #5
 8002f02:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e012      	b.n	8002f30 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1e5      	bne.n	8002ee4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	e006      	b.n	8002f30 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
  }
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b089      	sub	sp, #36	; 0x24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f4c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f56:	7ffb      	ldrb	r3, [r7, #31]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d003      	beq.n	8002f64 <HAL_CAN_AddTxMessage+0x2c>
 8002f5c:	7ffb      	ldrb	r3, [r7, #31]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	f040 80ad 	bne.w	80030be <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10a      	bne.n	8002f84 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d105      	bne.n	8002f84 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 8095 	beq.w	80030ae <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	0e1b      	lsrs	r3, r3, #24
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002f8e:	2201      	movs	r2, #1
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	409a      	lsls	r2, r3
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10d      	bne.n	8002fbc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002faa:	68f9      	ldr	r1, [r7, #12]
 8002fac:	6809      	ldr	r1, [r1, #0]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	3318      	adds	r3, #24
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	440b      	add	r3, r1
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	e00f      	b.n	8002fdc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fc6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fcc:	68f9      	ldr	r1, [r7, #12]
 8002fce:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002fd0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	3318      	adds	r3, #24
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	440b      	add	r3, r1
 8002fda:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6819      	ldr	r1, [r3, #0]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	3318      	adds	r3, #24
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	440b      	add	r3, r1
 8002fec:	3304      	adds	r3, #4
 8002fee:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	7d1b      	ldrb	r3, [r3, #20]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d111      	bne.n	800301c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	3318      	adds	r3, #24
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	4413      	add	r3, r2
 8003004:	3304      	adds	r3, #4
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	6811      	ldr	r1, [r2, #0]
 800300c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	3318      	adds	r3, #24
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	440b      	add	r3, r1
 8003018:	3304      	adds	r3, #4
 800301a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3307      	adds	r3, #7
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	061a      	lsls	r2, r3, #24
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3306      	adds	r3, #6
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	041b      	lsls	r3, r3, #16
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3305      	adds	r3, #5
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	021b      	lsls	r3, r3, #8
 8003036:	4313      	orrs	r3, r2
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	3204      	adds	r2, #4
 800303c:	7812      	ldrb	r2, [r2, #0]
 800303e:	4610      	mov	r0, r2
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	6811      	ldr	r1, [r2, #0]
 8003044:	ea43 0200 	orr.w	r2, r3, r0
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	440b      	add	r3, r1
 800304e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003052:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3303      	adds	r3, #3
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	061a      	lsls	r2, r3, #24
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3302      	adds	r3, #2
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	041b      	lsls	r3, r3, #16
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3301      	adds	r3, #1
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	021b      	lsls	r3, r3, #8
 800306e:	4313      	orrs	r3, r2
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	7812      	ldrb	r2, [r2, #0]
 8003074:	4610      	mov	r0, r2
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	6811      	ldr	r1, [r2, #0]
 800307a:	ea43 0200 	orr.w	r2, r3, r0
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	440b      	add	r3, r1
 8003084:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003088:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	3318      	adds	r3, #24
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	4413      	add	r3, r2
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	6811      	ldr	r1, [r2, #0]
 800309c:	f043 0201 	orr.w	r2, r3, #1
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	3318      	adds	r3, #24
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	440b      	add	r3, r1
 80030a8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	e00e      	b.n	80030cc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e006      	b.n	80030cc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
  }
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3724      	adds	r7, #36	; 0x24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
 80030e4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030ec:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80030ee:	7dfb      	ldrb	r3, [r7, #23]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d003      	beq.n	80030fc <HAL_CAN_GetRxMessage+0x24>
 80030f4:	7dfb      	ldrb	r3, [r7, #23]
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	f040 80f3 	bne.w	80032e2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10e      	bne.n	8003120 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d116      	bne.n	800313e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e0e7      	b.n	80032f0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d107      	bne.n	800313e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e0d8      	b.n	80032f0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	331b      	adds	r3, #27
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	4413      	add	r3, r2
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0204 	and.w	r2, r3, #4
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10c      	bne.n	8003176 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	331b      	adds	r3, #27
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	4413      	add	r3, r2
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	0d5b      	lsrs	r3, r3, #21
 800316c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	e00b      	b.n	800318e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	331b      	adds	r3, #27
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	4413      	add	r3, r2
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	08db      	lsrs	r3, r3, #3
 8003186:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	331b      	adds	r3, #27
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	4413      	add	r3, r2
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0202 	and.w	r2, r3, #2
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	331b      	adds	r3, #27
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	4413      	add	r3, r2
 80031b0:	3304      	adds	r3, #4
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 020f 	and.w	r2, r3, #15
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	331b      	adds	r3, #27
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	4413      	add	r3, r2
 80031c8:	3304      	adds	r3, #4
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	0a1b      	lsrs	r3, r3, #8
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	331b      	adds	r3, #27
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	4413      	add	r3, r2
 80031e0:	3304      	adds	r3, #4
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	0c1b      	lsrs	r3, r3, #16
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	4413      	add	r3, r2
 800320c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	0a1a      	lsrs	r2, r3, #8
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	3301      	adds	r3, #1
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	4413      	add	r3, r2
 8003226:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	0c1a      	lsrs	r2, r3, #16
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	3302      	adds	r3, #2
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	4413      	add	r3, r2
 8003240:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	0e1a      	lsrs	r2, r3, #24
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	3303      	adds	r3, #3
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	4413      	add	r3, r2
 800325a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	3304      	adds	r3, #4
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	4413      	add	r3, r2
 8003272:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	0a1a      	lsrs	r2, r3, #8
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	3305      	adds	r3, #5
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	4413      	add	r3, r2
 800328c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	0c1a      	lsrs	r2, r3, #16
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	3306      	adds	r3, #6
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	0e1a      	lsrs	r2, r3, #24
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	3307      	adds	r3, #7
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d108      	bne.n	80032ce <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0220 	orr.w	r2, r2, #32
 80032ca:	60da      	str	r2, [r3, #12]
 80032cc:	e007      	b.n	80032de <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f042 0220 	orr.w	r2, r2, #32
 80032dc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80032de:	2300      	movs	r3, #0
 80032e0:	e006      	b.n	80032f0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
  }
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	371c      	adds	r7, #28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3020 	ldrb.w	r3, [r3, #32]
 800330c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800330e:	7bfb      	ldrb	r3, [r7, #15]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d002      	beq.n	800331a <HAL_CAN_ActivateNotification+0x1e>
 8003314:	7bfb      	ldrb	r3, [r7, #15]
 8003316:	2b02      	cmp	r3, #2
 8003318:	d109      	bne.n	800332e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6959      	ldr	r1, [r3, #20]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	e006      	b.n	800333c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
  }
}
 800333c:	4618      	mov	r0, r3
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08a      	sub	sp, #40	; 0x28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003350:	2300      	movs	r3, #0
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d07c      	beq.n	8003488 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d023      	beq.n	80033e0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2201      	movs	r2, #1
 800339e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f983 	bl	80036b6 <HAL_CAN_TxMailbox0CompleteCallback>
 80033b0:	e016      	b.n	80033e0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d004      	beq.n	80033c6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
 80033c4:	e00c      	b.n	80033e0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	f003 0308 	and.w	r3, r3, #8
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d004      	beq.n	80033da <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24
 80033d8:	e002      	b.n	80033e0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f989 	bl	80036f2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d024      	beq.n	8003434 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f963 	bl	80036ca <HAL_CAN_TxMailbox1CompleteCallback>
 8003404:	e016      	b.n	8003434 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800340c:	2b00      	cmp	r3, #0
 800340e:	d004      	beq.n	800341a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
 8003418:	e00c      	b.n	8003434 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003420:	2b00      	cmp	r3, #0
 8003422:	d004      	beq.n	800342e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
 800342c:	e002      	b.n	8003434 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f969 	bl	8003706 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d024      	beq.n	8003488 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003446:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f943 	bl	80036de <HAL_CAN_TxMailbox2CompleteCallback>
 8003458:	e016      	b.n	8003488 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d004      	beq.n	800346e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
 800346c:	e00c      	b.n	8003488 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d004      	beq.n	8003482 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
 8003480:	e002      	b.n	8003488 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f949 	bl	800371a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00c      	beq.n	80034ac <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b00      	cmp	r3, #0
 800349a:	d007      	beq.n	80034ac <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2210      	movs	r2, #16
 80034aa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00b      	beq.n	80034ce <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d006      	beq.n	80034ce <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2208      	movs	r2, #8
 80034c6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f930 	bl	800372e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d009      	beq.n	80034ec <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7fe fb00 	bl	8001aec <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00c      	beq.n	8003510 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f003 0310 	and.w	r3, r3, #16
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d007      	beq.n	8003510 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003506:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2210      	movs	r2, #16
 800350e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	f003 0320 	and.w	r3, r3, #32
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00b      	beq.n	8003532 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	d006      	beq.n	8003532 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2208      	movs	r2, #8
 800352a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 f912 	bl	8003756 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	f003 0310 	and.w	r3, r3, #16
 8003538:	2b00      	cmp	r3, #0
 800353a:	d009      	beq.n	8003550 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f8f9 	bl	8003742 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00b      	beq.n	8003572 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	f003 0310 	and.w	r3, r3, #16
 8003560:	2b00      	cmp	r3, #0
 8003562:	d006      	beq.n	8003572 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2210      	movs	r2, #16
 800356a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f8fc 	bl	800376a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00b      	beq.n	8003594 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d006      	beq.n	8003594 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2208      	movs	r2, #8
 800358c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f8f5 	bl	800377e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d07b      	beq.n	8003696 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d072      	beq.n	800368e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d008      	beq.n	80035c4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d008      	beq.n	80035e0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	f043 0302 	orr.w	r3, r3, #2
 80035de:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d008      	beq.n	80035fc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	f043 0304 	orr.w	r3, r3, #4
 80035fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003602:	2b00      	cmp	r3, #0
 8003604:	d043      	beq.n	800368e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800360c:	2b00      	cmp	r3, #0
 800360e:	d03e      	beq.n	800368e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003616:	2b60      	cmp	r3, #96	; 0x60
 8003618:	d02b      	beq.n	8003672 <HAL_CAN_IRQHandler+0x32a>
 800361a:	2b60      	cmp	r3, #96	; 0x60
 800361c:	d82e      	bhi.n	800367c <HAL_CAN_IRQHandler+0x334>
 800361e:	2b50      	cmp	r3, #80	; 0x50
 8003620:	d022      	beq.n	8003668 <HAL_CAN_IRQHandler+0x320>
 8003622:	2b50      	cmp	r3, #80	; 0x50
 8003624:	d82a      	bhi.n	800367c <HAL_CAN_IRQHandler+0x334>
 8003626:	2b40      	cmp	r3, #64	; 0x40
 8003628:	d019      	beq.n	800365e <HAL_CAN_IRQHandler+0x316>
 800362a:	2b40      	cmp	r3, #64	; 0x40
 800362c:	d826      	bhi.n	800367c <HAL_CAN_IRQHandler+0x334>
 800362e:	2b30      	cmp	r3, #48	; 0x30
 8003630:	d010      	beq.n	8003654 <HAL_CAN_IRQHandler+0x30c>
 8003632:	2b30      	cmp	r3, #48	; 0x30
 8003634:	d822      	bhi.n	800367c <HAL_CAN_IRQHandler+0x334>
 8003636:	2b10      	cmp	r3, #16
 8003638:	d002      	beq.n	8003640 <HAL_CAN_IRQHandler+0x2f8>
 800363a:	2b20      	cmp	r3, #32
 800363c:	d005      	beq.n	800364a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800363e:	e01d      	b.n	800367c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	f043 0308 	orr.w	r3, r3, #8
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003648:	e019      	b.n	800367e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	f043 0310 	orr.w	r3, r3, #16
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003652:	e014      	b.n	800367e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	f043 0320 	orr.w	r3, r3, #32
 800365a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800365c:	e00f      	b.n	800367e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003666:	e00a      	b.n	800367e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003670:	e005      	b.n	800367e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800367a:	e000      	b.n	800367e <HAL_CAN_IRQHandler+0x336>
            break;
 800367c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699a      	ldr	r2, [r3, #24]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800368c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2204      	movs	r2, #4
 8003694:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f872 	bl	8003792 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80036ae:	bf00      	nop
 80036b0:	3728      	adds	r7, #40	; 0x28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
	...

080037a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037b8:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <__NVIC_SetPriorityGrouping+0x40>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037c4:	4013      	ands	r3, r2
 80037c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80037d0:	4b06      	ldr	r3, [pc, #24]	; (80037ec <__NVIC_SetPriorityGrouping+0x44>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037d6:	4a04      	ldr	r2, [pc, #16]	; (80037e8 <__NVIC_SetPriorityGrouping+0x40>)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	60d3      	str	r3, [r2, #12]
}
 80037dc:	bf00      	nop
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	e000ed00 	.word	0xe000ed00
 80037ec:	05fa0000 	.word	0x05fa0000

080037f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f4:	4b04      	ldr	r3, [pc, #16]	; (8003808 <__NVIC_GetPriorityGrouping+0x18>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	0a1b      	lsrs	r3, r3, #8
 80037fa:	f003 0307 	and.w	r3, r3, #7
}
 80037fe:	4618      	mov	r0, r3
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381a:	2b00      	cmp	r3, #0
 800381c:	db0b      	blt.n	8003836 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800381e:	79fb      	ldrb	r3, [r7, #7]
 8003820:	f003 021f 	and.w	r2, r3, #31
 8003824:	4907      	ldr	r1, [pc, #28]	; (8003844 <__NVIC_EnableIRQ+0x38>)
 8003826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	2001      	movs	r0, #1
 800382e:	fa00 f202 	lsl.w	r2, r0, r2
 8003832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	e000e100 	.word	0xe000e100

08003848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	6039      	str	r1, [r7, #0]
 8003852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003858:	2b00      	cmp	r3, #0
 800385a:	db0a      	blt.n	8003872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	b2da      	uxtb	r2, r3
 8003860:	490c      	ldr	r1, [pc, #48]	; (8003894 <__NVIC_SetPriority+0x4c>)
 8003862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003866:	0112      	lsls	r2, r2, #4
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	440b      	add	r3, r1
 800386c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003870:	e00a      	b.n	8003888 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	b2da      	uxtb	r2, r3
 8003876:	4908      	ldr	r1, [pc, #32]	; (8003898 <__NVIC_SetPriority+0x50>)
 8003878:	79fb      	ldrb	r3, [r7, #7]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	3b04      	subs	r3, #4
 8003880:	0112      	lsls	r2, r2, #4
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	440b      	add	r3, r1
 8003886:	761a      	strb	r2, [r3, #24]
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	e000e100 	.word	0xe000e100
 8003898:	e000ed00 	.word	0xe000ed00

0800389c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800389c:	b480      	push	{r7}
 800389e:	b089      	sub	sp, #36	; 0x24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	f1c3 0307 	rsb	r3, r3, #7
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	bf28      	it	cs
 80038ba:	2304      	movcs	r3, #4
 80038bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	3304      	adds	r3, #4
 80038c2:	2b06      	cmp	r3, #6
 80038c4:	d902      	bls.n	80038cc <NVIC_EncodePriority+0x30>
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	3b03      	subs	r3, #3
 80038ca:	e000      	b.n	80038ce <NVIC_EncodePriority+0x32>
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d0:	f04f 32ff 	mov.w	r2, #4294967295
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43da      	mvns	r2, r3
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	401a      	ands	r2, r3
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e4:	f04f 31ff 	mov.w	r1, #4294967295
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	fa01 f303 	lsl.w	r3, r1, r3
 80038ee:	43d9      	mvns	r1, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f4:	4313      	orrs	r3, r2
         );
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3724      	adds	r7, #36	; 0x24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
	...

08003904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3b01      	subs	r3, #1
 8003910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003914:	d301      	bcc.n	800391a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003916:	2301      	movs	r3, #1
 8003918:	e00f      	b.n	800393a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800391a:	4a0a      	ldr	r2, [pc, #40]	; (8003944 <SysTick_Config+0x40>)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3b01      	subs	r3, #1
 8003920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003922:	210f      	movs	r1, #15
 8003924:	f04f 30ff 	mov.w	r0, #4294967295
 8003928:	f7ff ff8e 	bl	8003848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800392c:	4b05      	ldr	r3, [pc, #20]	; (8003944 <SysTick_Config+0x40>)
 800392e:	2200      	movs	r2, #0
 8003930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003932:	4b04      	ldr	r3, [pc, #16]	; (8003944 <SysTick_Config+0x40>)
 8003934:	2207      	movs	r2, #7
 8003936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	e000e010 	.word	0xe000e010

08003948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff ff29 	bl	80037a8 <__NVIC_SetPriorityGrouping>
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800395e:	b580      	push	{r7, lr}
 8003960:	b086      	sub	sp, #24
 8003962:	af00      	add	r7, sp, #0
 8003964:	4603      	mov	r3, r0
 8003966:	60b9      	str	r1, [r7, #8]
 8003968:	607a      	str	r2, [r7, #4]
 800396a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003970:	f7ff ff3e 	bl	80037f0 <__NVIC_GetPriorityGrouping>
 8003974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	6978      	ldr	r0, [r7, #20]
 800397c:	f7ff ff8e 	bl	800389c <NVIC_EncodePriority>
 8003980:	4602      	mov	r2, r0
 8003982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003986:	4611      	mov	r1, r2
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff ff5d 	bl	8003848 <__NVIC_SetPriority>
}
 800398e:	bf00      	nop
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b082      	sub	sp, #8
 800399a:	af00      	add	r7, sp, #0
 800399c:	4603      	mov	r3, r0
 800399e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff ff31 	bl	800380c <__NVIC_EnableIRQ>
}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff ffa2 	bl	8003904 <SysTick_Config>
 80039c0:	4603      	mov	r3, r0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b089      	sub	sp, #36	; 0x24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80039d6:	2300      	movs	r3, #0
 80039d8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80039de:	2300      	movs	r3, #0
 80039e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80039e6:	2300      	movs	r3, #0
 80039e8:	61fb      	str	r3, [r7, #28]
 80039ea:	e175      	b.n	8003cd8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80039ec:	2201      	movs	r2, #1
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4013      	ands	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	f040 8164 	bne.w	8003cd2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d005      	beq.n	8003a22 <HAL_GPIO_Init+0x56>
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d130      	bne.n	8003a84 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	2203      	movs	r2, #3
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	43db      	mvns	r3, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4013      	ands	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a58:	2201      	movs	r2, #1
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43db      	mvns	r3, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4013      	ands	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	091b      	lsrs	r3, r3, #4
 8003a6e:	f003 0201 	and.w	r2, r3, #1
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 0303 	and.w	r3, r3, #3
 8003a8c:	2b03      	cmp	r3, #3
 8003a8e:	d017      	beq.n	8003ac0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f003 0303 	and.w	r3, r3, #3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d123      	bne.n	8003b14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	08da      	lsrs	r2, r3, #3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3208      	adds	r2, #8
 8003ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	220f      	movs	r2, #15
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4013      	ands	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	691a      	ldr	r2, [r3, #16]
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	08da      	lsrs	r2, r3, #3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3208      	adds	r2, #8
 8003b0e:	69b9      	ldr	r1, [r7, #24]
 8003b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	2203      	movs	r2, #3
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	43db      	mvns	r3, r3
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 0203 	and.w	r2, r3, #3
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 80be 	beq.w	8003cd2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b56:	4b66      	ldr	r3, [pc, #408]	; (8003cf0 <HAL_GPIO_Init+0x324>)
 8003b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5a:	4a65      	ldr	r2, [pc, #404]	; (8003cf0 <HAL_GPIO_Init+0x324>)
 8003b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b60:	6453      	str	r3, [r2, #68]	; 0x44
 8003b62:	4b63      	ldr	r3, [pc, #396]	; (8003cf0 <HAL_GPIO_Init+0x324>)
 8003b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003b6e:	4a61      	ldr	r2, [pc, #388]	; (8003cf4 <HAL_GPIO_Init+0x328>)
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	089b      	lsrs	r3, r3, #2
 8003b74:	3302      	adds	r3, #2
 8003b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	220f      	movs	r2, #15
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a58      	ldr	r2, [pc, #352]	; (8003cf8 <HAL_GPIO_Init+0x32c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d037      	beq.n	8003c0a <HAL_GPIO_Init+0x23e>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a57      	ldr	r2, [pc, #348]	; (8003cfc <HAL_GPIO_Init+0x330>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d031      	beq.n	8003c06 <HAL_GPIO_Init+0x23a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a56      	ldr	r2, [pc, #344]	; (8003d00 <HAL_GPIO_Init+0x334>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d02b      	beq.n	8003c02 <HAL_GPIO_Init+0x236>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a55      	ldr	r2, [pc, #340]	; (8003d04 <HAL_GPIO_Init+0x338>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d025      	beq.n	8003bfe <HAL_GPIO_Init+0x232>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a54      	ldr	r2, [pc, #336]	; (8003d08 <HAL_GPIO_Init+0x33c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d01f      	beq.n	8003bfa <HAL_GPIO_Init+0x22e>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a53      	ldr	r2, [pc, #332]	; (8003d0c <HAL_GPIO_Init+0x340>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d019      	beq.n	8003bf6 <HAL_GPIO_Init+0x22a>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a52      	ldr	r2, [pc, #328]	; (8003d10 <HAL_GPIO_Init+0x344>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d013      	beq.n	8003bf2 <HAL_GPIO_Init+0x226>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a51      	ldr	r2, [pc, #324]	; (8003d14 <HAL_GPIO_Init+0x348>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00d      	beq.n	8003bee <HAL_GPIO_Init+0x222>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a50      	ldr	r2, [pc, #320]	; (8003d18 <HAL_GPIO_Init+0x34c>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d007      	beq.n	8003bea <HAL_GPIO_Init+0x21e>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a4f      	ldr	r2, [pc, #316]	; (8003d1c <HAL_GPIO_Init+0x350>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d101      	bne.n	8003be6 <HAL_GPIO_Init+0x21a>
 8003be2:	2309      	movs	r3, #9
 8003be4:	e012      	b.n	8003c0c <HAL_GPIO_Init+0x240>
 8003be6:	230a      	movs	r3, #10
 8003be8:	e010      	b.n	8003c0c <HAL_GPIO_Init+0x240>
 8003bea:	2308      	movs	r3, #8
 8003bec:	e00e      	b.n	8003c0c <HAL_GPIO_Init+0x240>
 8003bee:	2307      	movs	r3, #7
 8003bf0:	e00c      	b.n	8003c0c <HAL_GPIO_Init+0x240>
 8003bf2:	2306      	movs	r3, #6
 8003bf4:	e00a      	b.n	8003c0c <HAL_GPIO_Init+0x240>
 8003bf6:	2305      	movs	r3, #5
 8003bf8:	e008      	b.n	8003c0c <HAL_GPIO_Init+0x240>
 8003bfa:	2304      	movs	r3, #4
 8003bfc:	e006      	b.n	8003c0c <HAL_GPIO_Init+0x240>
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e004      	b.n	8003c0c <HAL_GPIO_Init+0x240>
 8003c02:	2302      	movs	r3, #2
 8003c04:	e002      	b.n	8003c0c <HAL_GPIO_Init+0x240>
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <HAL_GPIO_Init+0x240>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	69fa      	ldr	r2, [r7, #28]
 8003c0e:	f002 0203 	and.w	r2, r2, #3
 8003c12:	0092      	lsls	r2, r2, #2
 8003c14:	4093      	lsls	r3, r2
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003c1c:	4935      	ldr	r1, [pc, #212]	; (8003cf4 <HAL_GPIO_Init+0x328>)
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	089b      	lsrs	r3, r3, #2
 8003c22:	3302      	adds	r3, #2
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c2a:	4b3d      	ldr	r3, [pc, #244]	; (8003d20 <HAL_GPIO_Init+0x354>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	43db      	mvns	r3, r3
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4013      	ands	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c4e:	4a34      	ldr	r2, [pc, #208]	; (8003d20 <HAL_GPIO_Init+0x354>)
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c54:	4b32      	ldr	r3, [pc, #200]	; (8003d20 <HAL_GPIO_Init+0x354>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	4013      	ands	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c78:	4a29      	ldr	r2, [pc, #164]	; (8003d20 <HAL_GPIO_Init+0x354>)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c7e:	4b28      	ldr	r3, [pc, #160]	; (8003d20 <HAL_GPIO_Init+0x354>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	43db      	mvns	r3, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ca2:	4a1f      	ldr	r2, [pc, #124]	; (8003d20 <HAL_GPIO_Init+0x354>)
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ca8:	4b1d      	ldr	r3, [pc, #116]	; (8003d20 <HAL_GPIO_Init+0x354>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ccc:	4a14      	ldr	r2, [pc, #80]	; (8003d20 <HAL_GPIO_Init+0x354>)
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	61fb      	str	r3, [r7, #28]
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	2b0f      	cmp	r3, #15
 8003cdc:	f67f ae86 	bls.w	80039ec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003ce0:	bf00      	nop
 8003ce2:	bf00      	nop
 8003ce4:	3724      	adds	r7, #36	; 0x24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	40013800 	.word	0x40013800
 8003cf8:	40020000 	.word	0x40020000
 8003cfc:	40020400 	.word	0x40020400
 8003d00:	40020800 	.word	0x40020800
 8003d04:	40020c00 	.word	0x40020c00
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	40021400 	.word	0x40021400
 8003d10:	40021800 	.word	0x40021800
 8003d14:	40021c00 	.word	0x40021c00
 8003d18:	40022000 	.word	0x40022000
 8003d1c:	40022400 	.word	0x40022400
 8003d20:	40013c00 	.word	0x40013c00

08003d24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691a      	ldr	r2, [r3, #16]
 8003d34:	887b      	ldrh	r3, [r7, #2]
 8003d36:	4013      	ands	r3, r2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d002      	beq.n	8003d42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	73fb      	strb	r3, [r7, #15]
 8003d40:	e001      	b.n	8003d46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d42:	2300      	movs	r3, #0
 8003d44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	807b      	strh	r3, [r7, #2]
 8003d60:	4613      	mov	r3, r2
 8003d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d64:	787b      	ldrb	r3, [r7, #1]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d6a:	887a      	ldrh	r2, [r7, #2]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003d70:	e003      	b.n	8003d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003d72:	887b      	ldrh	r3, [r7, #2]
 8003d74:	041a      	lsls	r2, r3, #16
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	619a      	str	r2, [r3, #24]
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
	...

08003d88 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d92:	4b23      	ldr	r3, [pc, #140]	; (8003e20 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	4a22      	ldr	r2, [pc, #136]	; (8003e20 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d9e:	4b20      	ldr	r3, [pc, #128]	; (8003e20 <HAL_PWREx_EnableOverDrive+0x98>)
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da6:	603b      	str	r3, [r7, #0]
 8003da8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003daa:	4b1e      	ldr	r3, [pc, #120]	; (8003e24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a1d      	ldr	r2, [pc, #116]	; (8003e24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003db6:	f7fe fb87 	bl	80024c8 <HAL_GetTick>
 8003dba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003dbc:	e009      	b.n	8003dd2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003dbe:	f7fe fb83 	bl	80024c8 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dcc:	d901      	bls.n	8003dd2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e022      	b.n	8003e18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003dd2:	4b14      	ldr	r3, [pc, #80]	; (8003e24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dde:	d1ee      	bne.n	8003dbe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003de0:	4b10      	ldr	r3, [pc, #64]	; (8003e24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a0f      	ldr	r2, [pc, #60]	; (8003e24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dec:	f7fe fb6c 	bl	80024c8 <HAL_GetTick>
 8003df0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003df2:	e009      	b.n	8003e08 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003df4:	f7fe fb68 	bl	80024c8 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e02:	d901      	bls.n	8003e08 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e007      	b.n	8003e18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e08:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e14:	d1ee      	bne.n	8003df4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40023800 	.word	0x40023800
 8003e24:	40007000 	.word	0x40007000

08003e28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003e30:	2300      	movs	r3, #0
 8003e32:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e29b      	b.n	8004376 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 8087 	beq.w	8003f5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e4c:	4b96      	ldr	r3, [pc, #600]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 030c 	and.w	r3, r3, #12
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d00c      	beq.n	8003e72 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e58:	4b93      	ldr	r3, [pc, #588]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 030c 	and.w	r3, r3, #12
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d112      	bne.n	8003e8a <HAL_RCC_OscConfig+0x62>
 8003e64:	4b90      	ldr	r3, [pc, #576]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e70:	d10b      	bne.n	8003e8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e72:	4b8d      	ldr	r3, [pc, #564]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d06c      	beq.n	8003f58 <HAL_RCC_OscConfig+0x130>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d168      	bne.n	8003f58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e275      	b.n	8004376 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e92:	d106      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x7a>
 8003e94:	4b84      	ldr	r3, [pc, #528]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a83      	ldr	r2, [pc, #524]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	e02e      	b.n	8003f00 <HAL_RCC_OscConfig+0xd8>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10c      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x9c>
 8003eaa:	4b7f      	ldr	r3, [pc, #508]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a7e      	ldr	r2, [pc, #504]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	4b7c      	ldr	r3, [pc, #496]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a7b      	ldr	r2, [pc, #492]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003ebc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	e01d      	b.n	8003f00 <HAL_RCC_OscConfig+0xd8>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_RCC_OscConfig+0xc0>
 8003ece:	4b76      	ldr	r3, [pc, #472]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a75      	ldr	r2, [pc, #468]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	4b73      	ldr	r3, [pc, #460]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a72      	ldr	r2, [pc, #456]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	e00b      	b.n	8003f00 <HAL_RCC_OscConfig+0xd8>
 8003ee8:	4b6f      	ldr	r3, [pc, #444]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a6e      	ldr	r2, [pc, #440]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ef2:	6013      	str	r3, [r2, #0]
 8003ef4:	4b6c      	ldr	r3, [pc, #432]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a6b      	ldr	r2, [pc, #428]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d013      	beq.n	8003f30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f08:	f7fe fade 	bl	80024c8 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f10:	f7fe fada 	bl	80024c8 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b64      	cmp	r3, #100	; 0x64
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e229      	b.n	8004376 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f22:	4b61      	ldr	r3, [pc, #388]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0xe8>
 8003f2e:	e014      	b.n	8003f5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f30:	f7fe faca 	bl	80024c8 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f38:	f7fe fac6 	bl	80024c8 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b64      	cmp	r3, #100	; 0x64
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e215      	b.n	8004376 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f4a:	4b57      	ldr	r3, [pc, #348]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f0      	bne.n	8003f38 <HAL_RCC_OscConfig+0x110>
 8003f56:	e000      	b.n	8003f5a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d069      	beq.n	800403a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f66:	4b50      	ldr	r3, [pc, #320]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00b      	beq.n	8003f8a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f72:	4b4d      	ldr	r3, [pc, #308]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d11c      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x190>
 8003f7e:	4b4a      	ldr	r3, [pc, #296]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d116      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f8a:	4b47      	ldr	r3, [pc, #284]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d005      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x17a>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d001      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e1e9      	b.n	8004376 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa2:	4b41      	ldr	r3, [pc, #260]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	493d      	ldr	r1, [pc, #244]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fb6:	e040      	b.n	800403a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d023      	beq.n	8004008 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fc0:	4b39      	ldr	r3, [pc, #228]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a38      	ldr	r2, [pc, #224]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003fc6:	f043 0301 	orr.w	r3, r3, #1
 8003fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fcc:	f7fe fa7c 	bl	80024c8 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fd4:	f7fe fa78 	bl	80024c8 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e1c7      	b.n	8004376 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe6:	4b30      	ldr	r3, [pc, #192]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f0      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff2:	4b2d      	ldr	r3, [pc, #180]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	4929      	ldr	r1, [pc, #164]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8004002:	4313      	orrs	r3, r2
 8004004:	600b      	str	r3, [r1, #0]
 8004006:	e018      	b.n	800403a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004008:	4b27      	ldr	r3, [pc, #156]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a26      	ldr	r2, [pc, #152]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 800400e:	f023 0301 	bic.w	r3, r3, #1
 8004012:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004014:	f7fe fa58 	bl	80024c8 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800401c:	f7fe fa54 	bl	80024c8 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e1a3      	b.n	8004376 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800402e:	4b1e      	ldr	r3, [pc, #120]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f0      	bne.n	800401c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d038      	beq.n	80040b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d019      	beq.n	8004082 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800404e:	4b16      	ldr	r3, [pc, #88]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8004050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004052:	4a15      	ldr	r2, [pc, #84]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8004054:	f043 0301 	orr.w	r3, r3, #1
 8004058:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405a:	f7fe fa35 	bl	80024c8 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004060:	e008      	b.n	8004074 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004062:	f7fe fa31 	bl	80024c8 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e180      	b.n	8004376 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004074:	4b0c      	ldr	r3, [pc, #48]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8004076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0f0      	beq.n	8004062 <HAL_RCC_OscConfig+0x23a>
 8004080:	e01a      	b.n	80040b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004082:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8004084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004086:	4a08      	ldr	r2, [pc, #32]	; (80040a8 <HAL_RCC_OscConfig+0x280>)
 8004088:	f023 0301 	bic.w	r3, r3, #1
 800408c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408e:	f7fe fa1b 	bl	80024c8 <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004094:	e00a      	b.n	80040ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004096:	f7fe fa17 	bl	80024c8 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d903      	bls.n	80040ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e166      	b.n	8004376 <HAL_RCC_OscConfig+0x54e>
 80040a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040ac:	4b92      	ldr	r3, [pc, #584]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 80040ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1ee      	bne.n	8004096 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 80a4 	beq.w	800420e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040c6:	4b8c      	ldr	r3, [pc, #560]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10d      	bne.n	80040ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80040d2:	4b89      	ldr	r3, [pc, #548]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	4a88      	ldr	r2, [pc, #544]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 80040d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040dc:	6413      	str	r3, [r2, #64]	; 0x40
 80040de:	4b86      	ldr	r3, [pc, #536]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e6:	60bb      	str	r3, [r7, #8]
 80040e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ea:	2301      	movs	r3, #1
 80040ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040ee:	4b83      	ldr	r3, [pc, #524]	; (80042fc <HAL_RCC_OscConfig+0x4d4>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d118      	bne.n	800412c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80040fa:	4b80      	ldr	r3, [pc, #512]	; (80042fc <HAL_RCC_OscConfig+0x4d4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a7f      	ldr	r2, [pc, #508]	; (80042fc <HAL_RCC_OscConfig+0x4d4>)
 8004100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004106:	f7fe f9df 	bl	80024c8 <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800410c:	e008      	b.n	8004120 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800410e:	f7fe f9db 	bl	80024c8 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b64      	cmp	r3, #100	; 0x64
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e12a      	b.n	8004376 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004120:	4b76      	ldr	r3, [pc, #472]	; (80042fc <HAL_RCC_OscConfig+0x4d4>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0f0      	beq.n	800410e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d106      	bne.n	8004142 <HAL_RCC_OscConfig+0x31a>
 8004134:	4b70      	ldr	r3, [pc, #448]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 8004136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004138:	4a6f      	ldr	r2, [pc, #444]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 800413a:	f043 0301 	orr.w	r3, r3, #1
 800413e:	6713      	str	r3, [r2, #112]	; 0x70
 8004140:	e02d      	b.n	800419e <HAL_RCC_OscConfig+0x376>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10c      	bne.n	8004164 <HAL_RCC_OscConfig+0x33c>
 800414a:	4b6b      	ldr	r3, [pc, #428]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 800414c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414e:	4a6a      	ldr	r2, [pc, #424]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 8004150:	f023 0301 	bic.w	r3, r3, #1
 8004154:	6713      	str	r3, [r2, #112]	; 0x70
 8004156:	4b68      	ldr	r3, [pc, #416]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 8004158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415a:	4a67      	ldr	r2, [pc, #412]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 800415c:	f023 0304 	bic.w	r3, r3, #4
 8004160:	6713      	str	r3, [r2, #112]	; 0x70
 8004162:	e01c      	b.n	800419e <HAL_RCC_OscConfig+0x376>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b05      	cmp	r3, #5
 800416a:	d10c      	bne.n	8004186 <HAL_RCC_OscConfig+0x35e>
 800416c:	4b62      	ldr	r3, [pc, #392]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 800416e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004170:	4a61      	ldr	r2, [pc, #388]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 8004172:	f043 0304 	orr.w	r3, r3, #4
 8004176:	6713      	str	r3, [r2, #112]	; 0x70
 8004178:	4b5f      	ldr	r3, [pc, #380]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 800417a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417c:	4a5e      	ldr	r2, [pc, #376]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	6713      	str	r3, [r2, #112]	; 0x70
 8004184:	e00b      	b.n	800419e <HAL_RCC_OscConfig+0x376>
 8004186:	4b5c      	ldr	r3, [pc, #368]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 8004188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418a:	4a5b      	ldr	r2, [pc, #364]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 800418c:	f023 0301 	bic.w	r3, r3, #1
 8004190:	6713      	str	r3, [r2, #112]	; 0x70
 8004192:	4b59      	ldr	r3, [pc, #356]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 8004194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004196:	4a58      	ldr	r2, [pc, #352]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 8004198:	f023 0304 	bic.w	r3, r3, #4
 800419c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d015      	beq.n	80041d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a6:	f7fe f98f 	bl	80024c8 <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ac:	e00a      	b.n	80041c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ae:	f7fe f98b 	bl	80024c8 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041bc:	4293      	cmp	r3, r2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e0d8      	b.n	8004376 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c4:	4b4c      	ldr	r3, [pc, #304]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 80041c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0ee      	beq.n	80041ae <HAL_RCC_OscConfig+0x386>
 80041d0:	e014      	b.n	80041fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d2:	f7fe f979 	bl	80024c8 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041d8:	e00a      	b.n	80041f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041da:	f7fe f975 	bl	80024c8 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e0c2      	b.n	8004376 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041f0:	4b41      	ldr	r3, [pc, #260]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 80041f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1ee      	bne.n	80041da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041fc:	7dfb      	ldrb	r3, [r7, #23]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d105      	bne.n	800420e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004202:	4b3d      	ldr	r3, [pc, #244]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	4a3c      	ldr	r2, [pc, #240]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 8004208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800420c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 80ae 	beq.w	8004374 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004218:	4b37      	ldr	r3, [pc, #220]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 030c 	and.w	r3, r3, #12
 8004220:	2b08      	cmp	r3, #8
 8004222:	d06d      	beq.n	8004300 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	2b02      	cmp	r3, #2
 800422a:	d14b      	bne.n	80042c4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800422c:	4b32      	ldr	r3, [pc, #200]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a31      	ldr	r2, [pc, #196]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 8004232:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004238:	f7fe f946 	bl	80024c8 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004240:	f7fe f942 	bl	80024c8 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e091      	b.n	8004376 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004252:	4b29      	ldr	r3, [pc, #164]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1f0      	bne.n	8004240 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69da      	ldr	r2, [r3, #28]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	019b      	lsls	r3, r3, #6
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004274:	085b      	lsrs	r3, r3, #1
 8004276:	3b01      	subs	r3, #1
 8004278:	041b      	lsls	r3, r3, #16
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	061b      	lsls	r3, r3, #24
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004288:	071b      	lsls	r3, r3, #28
 800428a:	491b      	ldr	r1, [pc, #108]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 800428c:	4313      	orrs	r3, r2
 800428e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004290:	4b19      	ldr	r3, [pc, #100]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a18      	ldr	r2, [pc, #96]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 8004296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800429a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429c:	f7fe f914 	bl	80024c8 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a4:	f7fe f910 	bl	80024c8 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e05f      	b.n	8004376 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b6:	4b10      	ldr	r3, [pc, #64]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0f0      	beq.n	80042a4 <HAL_RCC_OscConfig+0x47c>
 80042c2:	e057      	b.n	8004374 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c4:	4b0c      	ldr	r3, [pc, #48]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a0b      	ldr	r2, [pc, #44]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 80042ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d0:	f7fe f8fa 	bl	80024c8 <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d8:	f7fe f8f6 	bl	80024c8 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e045      	b.n	8004376 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ea:	4b03      	ldr	r3, [pc, #12]	; (80042f8 <HAL_RCC_OscConfig+0x4d0>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1f0      	bne.n	80042d8 <HAL_RCC_OscConfig+0x4b0>
 80042f6:	e03d      	b.n	8004374 <HAL_RCC_OscConfig+0x54c>
 80042f8:	40023800 	.word	0x40023800
 80042fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004300:	4b1f      	ldr	r3, [pc, #124]	; (8004380 <HAL_RCC_OscConfig+0x558>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d030      	beq.n	8004370 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004318:	429a      	cmp	r2, r3
 800431a:	d129      	bne.n	8004370 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004326:	429a      	cmp	r2, r3
 8004328:	d122      	bne.n	8004370 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004330:	4013      	ands	r3, r2
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004336:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004338:	4293      	cmp	r3, r2
 800433a:	d119      	bne.n	8004370 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004346:	085b      	lsrs	r3, r3, #1
 8004348:	3b01      	subs	r3, #1
 800434a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800434c:	429a      	cmp	r2, r3
 800434e:	d10f      	bne.n	8004370 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800435c:	429a      	cmp	r2, r3
 800435e:	d107      	bne.n	8004370 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800436c:	429a      	cmp	r2, r3
 800436e:	d001      	beq.n	8004374 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e000      	b.n	8004376 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40023800 	.word	0x40023800

08004384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800438e:	2300      	movs	r3, #0
 8004390:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e0d0      	b.n	800453e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800439c:	4b6a      	ldr	r3, [pc, #424]	; (8004548 <HAL_RCC_ClockConfig+0x1c4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 030f 	and.w	r3, r3, #15
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d910      	bls.n	80043cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043aa:	4b67      	ldr	r3, [pc, #412]	; (8004548 <HAL_RCC_ClockConfig+0x1c4>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f023 020f 	bic.w	r2, r3, #15
 80043b2:	4965      	ldr	r1, [pc, #404]	; (8004548 <HAL_RCC_ClockConfig+0x1c4>)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ba:	4b63      	ldr	r3, [pc, #396]	; (8004548 <HAL_RCC_ClockConfig+0x1c4>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d001      	beq.n	80043cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0b8      	b.n	800453e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d020      	beq.n	800441a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043e4:	4b59      	ldr	r3, [pc, #356]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	4a58      	ldr	r2, [pc, #352]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 80043ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0308 	and.w	r3, r3, #8
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043fc:	4b53      	ldr	r3, [pc, #332]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	4a52      	ldr	r2, [pc, #328]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 8004402:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004406:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004408:	4b50      	ldr	r3, [pc, #320]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	494d      	ldr	r1, [pc, #308]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 8004416:	4313      	orrs	r3, r2
 8004418:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d040      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d107      	bne.n	800443e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442e:	4b47      	ldr	r3, [pc, #284]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d115      	bne.n	8004466 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e07f      	b.n	800453e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2b02      	cmp	r3, #2
 8004444:	d107      	bne.n	8004456 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004446:	4b41      	ldr	r3, [pc, #260]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d109      	bne.n	8004466 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e073      	b.n	800453e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004456:	4b3d      	ldr	r3, [pc, #244]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e06b      	b.n	800453e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004466:	4b39      	ldr	r3, [pc, #228]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f023 0203 	bic.w	r2, r3, #3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	4936      	ldr	r1, [pc, #216]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 8004474:	4313      	orrs	r3, r2
 8004476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004478:	f7fe f826 	bl	80024c8 <HAL_GetTick>
 800447c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800447e:	e00a      	b.n	8004496 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004480:	f7fe f822 	bl	80024c8 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	f241 3288 	movw	r2, #5000	; 0x1388
 800448e:	4293      	cmp	r3, r2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e053      	b.n	800453e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004496:	4b2d      	ldr	r3, [pc, #180]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 020c 	and.w	r2, r3, #12
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d1eb      	bne.n	8004480 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044a8:	4b27      	ldr	r3, [pc, #156]	; (8004548 <HAL_RCC_ClockConfig+0x1c4>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d210      	bcs.n	80044d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b6:	4b24      	ldr	r3, [pc, #144]	; (8004548 <HAL_RCC_ClockConfig+0x1c4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f023 020f 	bic.w	r2, r3, #15
 80044be:	4922      	ldr	r1, [pc, #136]	; (8004548 <HAL_RCC_ClockConfig+0x1c4>)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c6:	4b20      	ldr	r3, [pc, #128]	; (8004548 <HAL_RCC_ClockConfig+0x1c4>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 030f 	and.w	r3, r3, #15
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d001      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e032      	b.n	800453e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d008      	beq.n	80044f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044e4:	4b19      	ldr	r3, [pc, #100]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	4916      	ldr	r1, [pc, #88]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0308 	and.w	r3, r3, #8
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d009      	beq.n	8004516 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004502:	4b12      	ldr	r3, [pc, #72]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	490e      	ldr	r1, [pc, #56]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 8004512:	4313      	orrs	r3, r2
 8004514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004516:	f000 f821 	bl	800455c <HAL_RCC_GetSysClockFreq>
 800451a:	4602      	mov	r2, r0
 800451c:	4b0b      	ldr	r3, [pc, #44]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	091b      	lsrs	r3, r3, #4
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	490a      	ldr	r1, [pc, #40]	; (8004550 <HAL_RCC_ClockConfig+0x1cc>)
 8004528:	5ccb      	ldrb	r3, [r1, r3]
 800452a:	fa22 f303 	lsr.w	r3, r2, r3
 800452e:	4a09      	ldr	r2, [pc, #36]	; (8004554 <HAL_RCC_ClockConfig+0x1d0>)
 8004530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004532:	4b09      	ldr	r3, [pc, #36]	; (8004558 <HAL_RCC_ClockConfig+0x1d4>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7fd ff82 	bl	8002440 <HAL_InitTick>

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40023c00 	.word	0x40023c00
 800454c:	40023800 	.word	0x40023800
 8004550:	08007928 	.word	0x08007928
 8004554:	20000000 	.word	0x20000000
 8004558:	20000004 	.word	0x20000004

0800455c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800455c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004560:	b090      	sub	sp, #64	; 0x40
 8004562:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004564:	2300      	movs	r3, #0
 8004566:	637b      	str	r3, [r7, #52]	; 0x34
 8004568:	2300      	movs	r3, #0
 800456a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800456c:	2300      	movs	r3, #0
 800456e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004574:	4b59      	ldr	r3, [pc, #356]	; (80046dc <HAL_RCC_GetSysClockFreq+0x180>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 030c 	and.w	r3, r3, #12
 800457c:	2b08      	cmp	r3, #8
 800457e:	d00d      	beq.n	800459c <HAL_RCC_GetSysClockFreq+0x40>
 8004580:	2b08      	cmp	r3, #8
 8004582:	f200 80a1 	bhi.w	80046c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <HAL_RCC_GetSysClockFreq+0x34>
 800458a:	2b04      	cmp	r3, #4
 800458c:	d003      	beq.n	8004596 <HAL_RCC_GetSysClockFreq+0x3a>
 800458e:	e09b      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004590:	4b53      	ldr	r3, [pc, #332]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004592:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004594:	e09b      	b.n	80046ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004596:	4b53      	ldr	r3, [pc, #332]	; (80046e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004598:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800459a:	e098      	b.n	80046ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800459c:	4b4f      	ldr	r3, [pc, #316]	; (80046dc <HAL_RCC_GetSysClockFreq+0x180>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045a4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80045a6:	4b4d      	ldr	r3, [pc, #308]	; (80046dc <HAL_RCC_GetSysClockFreq+0x180>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d028      	beq.n	8004604 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045b2:	4b4a      	ldr	r3, [pc, #296]	; (80046dc <HAL_RCC_GetSysClockFreq+0x180>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	099b      	lsrs	r3, r3, #6
 80045b8:	2200      	movs	r2, #0
 80045ba:	623b      	str	r3, [r7, #32]
 80045bc:	627a      	str	r2, [r7, #36]	; 0x24
 80045be:	6a3b      	ldr	r3, [r7, #32]
 80045c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80045c4:	2100      	movs	r1, #0
 80045c6:	4b47      	ldr	r3, [pc, #284]	; (80046e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80045c8:	fb03 f201 	mul.w	r2, r3, r1
 80045cc:	2300      	movs	r3, #0
 80045ce:	fb00 f303 	mul.w	r3, r0, r3
 80045d2:	4413      	add	r3, r2
 80045d4:	4a43      	ldr	r2, [pc, #268]	; (80046e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80045d6:	fba0 1202 	umull	r1, r2, r0, r2
 80045da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045dc:	460a      	mov	r2, r1
 80045de:	62ba      	str	r2, [r7, #40]	; 0x28
 80045e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045e2:	4413      	add	r3, r2
 80045e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e8:	2200      	movs	r2, #0
 80045ea:	61bb      	str	r3, [r7, #24]
 80045ec:	61fa      	str	r2, [r7, #28]
 80045ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80045f6:	f7fb fe27 	bl	8000248 <__aeabi_uldivmod>
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	4613      	mov	r3, r2
 8004600:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004602:	e053      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004604:	4b35      	ldr	r3, [pc, #212]	; (80046dc <HAL_RCC_GetSysClockFreq+0x180>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	099b      	lsrs	r3, r3, #6
 800460a:	2200      	movs	r2, #0
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	617a      	str	r2, [r7, #20]
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004616:	f04f 0b00 	mov.w	fp, #0
 800461a:	4652      	mov	r2, sl
 800461c:	465b      	mov	r3, fp
 800461e:	f04f 0000 	mov.w	r0, #0
 8004622:	f04f 0100 	mov.w	r1, #0
 8004626:	0159      	lsls	r1, r3, #5
 8004628:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800462c:	0150      	lsls	r0, r2, #5
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	ebb2 080a 	subs.w	r8, r2, sl
 8004636:	eb63 090b 	sbc.w	r9, r3, fp
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004646:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800464a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800464e:	ebb2 0408 	subs.w	r4, r2, r8
 8004652:	eb63 0509 	sbc.w	r5, r3, r9
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	f04f 0300 	mov.w	r3, #0
 800465e:	00eb      	lsls	r3, r5, #3
 8004660:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004664:	00e2      	lsls	r2, r4, #3
 8004666:	4614      	mov	r4, r2
 8004668:	461d      	mov	r5, r3
 800466a:	eb14 030a 	adds.w	r3, r4, sl
 800466e:	603b      	str	r3, [r7, #0]
 8004670:	eb45 030b 	adc.w	r3, r5, fp
 8004674:	607b      	str	r3, [r7, #4]
 8004676:	f04f 0200 	mov.w	r2, #0
 800467a:	f04f 0300 	mov.w	r3, #0
 800467e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004682:	4629      	mov	r1, r5
 8004684:	028b      	lsls	r3, r1, #10
 8004686:	4621      	mov	r1, r4
 8004688:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800468c:	4621      	mov	r1, r4
 800468e:	028a      	lsls	r2, r1, #10
 8004690:	4610      	mov	r0, r2
 8004692:	4619      	mov	r1, r3
 8004694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004696:	2200      	movs	r2, #0
 8004698:	60bb      	str	r3, [r7, #8]
 800469a:	60fa      	str	r2, [r7, #12]
 800469c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046a0:	f7fb fdd2 	bl	8000248 <__aeabi_uldivmod>
 80046a4:	4602      	mov	r2, r0
 80046a6:	460b      	mov	r3, r1
 80046a8:	4613      	mov	r3, r2
 80046aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80046ac:	4b0b      	ldr	r3, [pc, #44]	; (80046dc <HAL_RCC_GetSysClockFreq+0x180>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	0c1b      	lsrs	r3, r3, #16
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	3301      	adds	r3, #1
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80046bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046c6:	e002      	b.n	80046ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046c8:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80046ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3740      	adds	r7, #64	; 0x40
 80046d4:	46bd      	mov	sp, r7
 80046d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046da:	bf00      	nop
 80046dc:	40023800 	.word	0x40023800
 80046e0:	00f42400 	.word	0x00f42400
 80046e4:	017d7840 	.word	0x017d7840

080046e8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046ec:	4b03      	ldr	r3, [pc, #12]	; (80046fc <HAL_RCC_GetHCLKFreq+0x14>)
 80046ee:	681b      	ldr	r3, [r3, #0]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	20000000 	.word	0x20000000

08004700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004704:	f7ff fff0 	bl	80046e8 <HAL_RCC_GetHCLKFreq>
 8004708:	4602      	mov	r2, r0
 800470a:	4b05      	ldr	r3, [pc, #20]	; (8004720 <HAL_RCC_GetPCLK1Freq+0x20>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	0a9b      	lsrs	r3, r3, #10
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	4903      	ldr	r1, [pc, #12]	; (8004724 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004716:	5ccb      	ldrb	r3, [r1, r3]
 8004718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800471c:	4618      	mov	r0, r3
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40023800 	.word	0x40023800
 8004724:	08007938 	.word	0x08007938

08004728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800472c:	f7ff ffdc 	bl	80046e8 <HAL_RCC_GetHCLKFreq>
 8004730:	4602      	mov	r2, r0
 8004732:	4b05      	ldr	r3, [pc, #20]	; (8004748 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	0b5b      	lsrs	r3, r3, #13
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	4903      	ldr	r1, [pc, #12]	; (800474c <HAL_RCC_GetPCLK2Freq+0x24>)
 800473e:	5ccb      	ldrb	r3, [r1, r3]
 8004740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004744:	4618      	mov	r0, r3
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40023800 	.word	0x40023800
 800474c:	08007938 	.word	0x08007938

08004750 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b088      	sub	sp, #32
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004758:	2300      	movs	r3, #0
 800475a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800475c:	2300      	movs	r3, #0
 800475e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004760:	2300      	movs	r3, #0
 8004762:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004764:	2300      	movs	r3, #0
 8004766:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004768:	2300      	movs	r3, #0
 800476a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b00      	cmp	r3, #0
 8004776:	d012      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004778:	4b69      	ldr	r3, [pc, #420]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	4a68      	ldr	r2, [pc, #416]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800477e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004782:	6093      	str	r3, [r2, #8]
 8004784:	4b66      	ldr	r3, [pc, #408]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478c:	4964      	ldr	r1, [pc, #400]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478e:	4313      	orrs	r3, r2
 8004790:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800479a:	2301      	movs	r3, #1
 800479c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d017      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047aa:	4b5d      	ldr	r3, [pc, #372]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b8:	4959      	ldr	r1, [pc, #356]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047c8:	d101      	bne.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80047ca:	2301      	movs	r3, #1
 80047cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80047d6:	2301      	movs	r3, #1
 80047d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d017      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80047e6:	4b4e      	ldr	r3, [pc, #312]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	494a      	ldr	r1, [pc, #296]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004804:	d101      	bne.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004806:	2301      	movs	r3, #1
 8004808:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004812:	2301      	movs	r3, #1
 8004814:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004822:	2301      	movs	r3, #1
 8004824:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0320 	and.w	r3, r3, #32
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 808b 	beq.w	800494a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004834:	4b3a      	ldr	r3, [pc, #232]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004838:	4a39      	ldr	r2, [pc, #228]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800483a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800483e:	6413      	str	r3, [r2, #64]	; 0x40
 8004840:	4b37      	ldr	r3, [pc, #220]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004848:	60bb      	str	r3, [r7, #8]
 800484a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800484c:	4b35      	ldr	r3, [pc, #212]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a34      	ldr	r2, [pc, #208]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004856:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004858:	f7fd fe36 	bl	80024c8 <HAL_GetTick>
 800485c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004860:	f7fd fe32 	bl	80024c8 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b64      	cmp	r3, #100	; 0x64
 800486c:	d901      	bls.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e38f      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004872:	4b2c      	ldr	r3, [pc, #176]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0f0      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800487e:	4b28      	ldr	r3, [pc, #160]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004886:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d035      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	429a      	cmp	r2, r3
 800489a:	d02e      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800489c:	4b20      	ldr	r3, [pc, #128]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800489e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048a6:	4b1e      	ldr	r3, [pc, #120]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048aa:	4a1d      	ldr	r2, [pc, #116]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048b2:	4b1b      	ldr	r3, [pc, #108]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b6:	4a1a      	ldr	r2, [pc, #104]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80048be:	4a18      	ldr	r2, [pc, #96]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80048c4:	4b16      	ldr	r3, [pc, #88]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d114      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d0:	f7fd fdfa 	bl	80024c8 <HAL_GetTick>
 80048d4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048d6:	e00a      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048d8:	f7fd fdf6 	bl	80024c8 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d901      	bls.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e351      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ee:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0ee      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004902:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004906:	d111      	bne.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004908:	4b05      	ldr	r3, [pc, #20]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004914:	4b04      	ldr	r3, [pc, #16]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004916:	400b      	ands	r3, r1
 8004918:	4901      	ldr	r1, [pc, #4]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800491a:	4313      	orrs	r3, r2
 800491c:	608b      	str	r3, [r1, #8]
 800491e:	e00b      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004920:	40023800 	.word	0x40023800
 8004924:	40007000 	.word	0x40007000
 8004928:	0ffffcff 	.word	0x0ffffcff
 800492c:	4bac      	ldr	r3, [pc, #688]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	4aab      	ldr	r2, [pc, #684]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004932:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004936:	6093      	str	r3, [r2, #8]
 8004938:	4ba9      	ldr	r3, [pc, #676]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800493a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004944:	49a6      	ldr	r1, [pc, #664]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004946:	4313      	orrs	r3, r2
 8004948:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0310 	and.w	r3, r3, #16
 8004952:	2b00      	cmp	r3, #0
 8004954:	d010      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004956:	4ba2      	ldr	r3, [pc, #648]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004958:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800495c:	4aa0      	ldr	r2, [pc, #640]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800495e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004962:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004966:	4b9e      	ldr	r3, [pc, #632]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004968:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004970:	499b      	ldr	r1, [pc, #620]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004972:	4313      	orrs	r3, r2
 8004974:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00a      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004984:	4b96      	ldr	r3, [pc, #600]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800498a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004992:	4993      	ldr	r1, [pc, #588]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049a6:	4b8e      	ldr	r3, [pc, #568]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049b4:	498a      	ldr	r1, [pc, #552]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00a      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049c8:	4b85      	ldr	r3, [pc, #532]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049d6:	4982      	ldr	r1, [pc, #520]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049ea:	4b7d      	ldr	r3, [pc, #500]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f8:	4979      	ldr	r1, [pc, #484]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a0c:	4b74      	ldr	r3, [pc, #464]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a12:	f023 0203 	bic.w	r2, r3, #3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1a:	4971      	ldr	r1, [pc, #452]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00a      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a2e:	4b6c      	ldr	r3, [pc, #432]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a34:	f023 020c 	bic.w	r2, r3, #12
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a3c:	4968      	ldr	r1, [pc, #416]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00a      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a50:	4b63      	ldr	r3, [pc, #396]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a56:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5e:	4960      	ldr	r1, [pc, #384]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00a      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a72:	4b5b      	ldr	r3, [pc, #364]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a78:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a80:	4957      	ldr	r1, [pc, #348]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00a      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a94:	4b52      	ldr	r3, [pc, #328]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa2:	494f      	ldr	r1, [pc, #316]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004ab6:	4b4a      	ldr	r3, [pc, #296]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004abc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac4:	4946      	ldr	r1, [pc, #280]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00a      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004ad8:	4b41      	ldr	r3, [pc, #260]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ade:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae6:	493e      	ldr	r1, [pc, #248]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00a      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004afa:	4b39      	ldr	r3, [pc, #228]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b08:	4935      	ldr	r1, [pc, #212]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00a      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b1c:	4b30      	ldr	r3, [pc, #192]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b22:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b2a:	492d      	ldr	r1, [pc, #180]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d011      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004b3e:	4b28      	ldr	r3, [pc, #160]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b44:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b4c:	4924      	ldr	r1, [pc, #144]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b5c:	d101      	bne.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b7e:	4b18      	ldr	r3, [pc, #96]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b84:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b8c:	4914      	ldr	r1, [pc, #80]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00b      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ba0:	4b0f      	ldr	r3, [pc, #60]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bb0:	490b      	ldr	r1, [pc, #44]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00f      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004bc4:	4b06      	ldr	r3, [pc, #24]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bca:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bd4:	4902      	ldr	r1, [pc, #8]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004bdc:	e002      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004bde:	bf00      	nop
 8004be0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00b      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bf0:	4b8a      	ldr	r3, [pc, #552]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bf6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c00:	4986      	ldr	r1, [pc, #536]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00b      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004c14:	4b81      	ldr	r3, [pc, #516]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c1a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c24:	497d      	ldr	r1, [pc, #500]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d006      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 80d6 	beq.w	8004dec <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c40:	4b76      	ldr	r3, [pc, #472]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a75      	ldr	r2, [pc, #468]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c4c:	f7fd fc3c 	bl	80024c8 <HAL_GetTick>
 8004c50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c52:	e008      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c54:	f7fd fc38 	bl	80024c8 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b64      	cmp	r3, #100	; 0x64
 8004c60:	d901      	bls.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e195      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c66:	4b6d      	ldr	r3, [pc, #436]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1f0      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d021      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d11d      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c86:	4b65      	ldr	r3, [pc, #404]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c8c:	0c1b      	lsrs	r3, r3, #16
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c94:	4b61      	ldr	r3, [pc, #388]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c9a:	0e1b      	lsrs	r3, r3, #24
 8004c9c:	f003 030f 	and.w	r3, r3, #15
 8004ca0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	019a      	lsls	r2, r3, #6
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	041b      	lsls	r3, r3, #16
 8004cac:	431a      	orrs	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	061b      	lsls	r3, r3, #24
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	071b      	lsls	r3, r3, #28
 8004cba:	4958      	ldr	r1, [pc, #352]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d004      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cd6:	d00a      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d02e      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cec:	d129      	bne.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004cee:	4b4b      	ldr	r3, [pc, #300]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cf4:	0c1b      	lsrs	r3, r3, #16
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004cfc:	4b47      	ldr	r3, [pc, #284]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d02:	0f1b      	lsrs	r3, r3, #28
 8004d04:	f003 0307 	and.w	r3, r3, #7
 8004d08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	019a      	lsls	r2, r3, #6
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	041b      	lsls	r3, r3, #16
 8004d14:	431a      	orrs	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	061b      	lsls	r3, r3, #24
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	071b      	lsls	r3, r3, #28
 8004d22:	493e      	ldr	r1, [pc, #248]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d2a:	4b3c      	ldr	r3, [pc, #240]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d30:	f023 021f 	bic.w	r2, r3, #31
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	4938      	ldr	r1, [pc, #224]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d01d      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d4e:	4b33      	ldr	r3, [pc, #204]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d54:	0e1b      	lsrs	r3, r3, #24
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d5c:	4b2f      	ldr	r3, [pc, #188]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d62:	0f1b      	lsrs	r3, r3, #28
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	019a      	lsls	r2, r3, #6
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	041b      	lsls	r3, r3, #16
 8004d76:	431a      	orrs	r2, r3
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	061b      	lsls	r3, r3, #24
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	071b      	lsls	r3, r3, #28
 8004d82:	4926      	ldr	r1, [pc, #152]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d011      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	019a      	lsls	r2, r3, #6
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	041b      	lsls	r3, r3, #16
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	061b      	lsls	r3, r3, #24
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	071b      	lsls	r3, r3, #28
 8004db2:	491a      	ldr	r1, [pc, #104]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004dba:	4b18      	ldr	r3, [pc, #96]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a17      	ldr	r2, [pc, #92]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004dc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc6:	f7fd fb7f 	bl	80024c8 <HAL_GetTick>
 8004dca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dcc:	e008      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004dce:	f7fd fb7b 	bl	80024c8 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b64      	cmp	r3, #100	; 0x64
 8004dda:	d901      	bls.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e0d8      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004de0:	4b0e      	ldr	r3, [pc, #56]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0f0      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	f040 80ce 	bne.w	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004df4:	4b09      	ldr	r3, [pc, #36]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a08      	ldr	r2, [pc, #32]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e00:	f7fd fb62 	bl	80024c8 <HAL_GetTick>
 8004e04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e06:	e00b      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e08:	f7fd fb5e 	bl	80024c8 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b64      	cmp	r3, #100	; 0x64
 8004e14:	d904      	bls.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e0bb      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004e1a:	bf00      	nop
 8004e1c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e20:	4b5e      	ldr	r3, [pc, #376]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e2c:	d0ec      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d009      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d02e      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d12a      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e56:	4b51      	ldr	r3, [pc, #324]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5c:	0c1b      	lsrs	r3, r3, #16
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e64:	4b4d      	ldr	r3, [pc, #308]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6a:	0f1b      	lsrs	r3, r3, #28
 8004e6c:	f003 0307 	and.w	r3, r3, #7
 8004e70:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	019a      	lsls	r2, r3, #6
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	041b      	lsls	r3, r3, #16
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	061b      	lsls	r3, r3, #24
 8004e84:	431a      	orrs	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	071b      	lsls	r3, r3, #28
 8004e8a:	4944      	ldr	r1, [pc, #272]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004e92:	4b42      	ldr	r3, [pc, #264]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e98:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	021b      	lsls	r3, r3, #8
 8004ea4:	493d      	ldr	r1, [pc, #244]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d022      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ebc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ec0:	d11d      	bne.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ec2:	4b36      	ldr	r3, [pc, #216]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec8:	0e1b      	lsrs	r3, r3, #24
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ed0:	4b32      	ldr	r3, [pc, #200]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed6:	0f1b      	lsrs	r3, r3, #28
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	019a      	lsls	r2, r3, #6
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	041b      	lsls	r3, r3, #16
 8004eea:	431a      	orrs	r2, r3
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	061b      	lsls	r3, r3, #24
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	071b      	lsls	r3, r3, #28
 8004ef6:	4929      	ldr	r1, [pc, #164]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0308 	and.w	r3, r3, #8
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d028      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f0a:	4b24      	ldr	r3, [pc, #144]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f10:	0e1b      	lsrs	r3, r3, #24
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f18:	4b20      	ldr	r3, [pc, #128]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1e:	0c1b      	lsrs	r3, r3, #16
 8004f20:	f003 0303 	and.w	r3, r3, #3
 8004f24:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	019a      	lsls	r2, r3, #6
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	041b      	lsls	r3, r3, #16
 8004f30:	431a      	orrs	r2, r3
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	061b      	lsls	r3, r3, #24
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	071b      	lsls	r3, r3, #28
 8004f3e:	4917      	ldr	r1, [pc, #92]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f46:	4b15      	ldr	r3, [pc, #84]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	4911      	ldr	r1, [pc, #68]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f5c:	4b0f      	ldr	r3, [pc, #60]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a0e      	ldr	r2, [pc, #56]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f68:	f7fd faae 	bl	80024c8 <HAL_GetTick>
 8004f6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f70:	f7fd faaa 	bl	80024c8 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b64      	cmp	r3, #100	; 0x64
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e007      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f82:	4b06      	ldr	r3, [pc, #24]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f8e:	d1ef      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3720      	adds	r7, #32
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40023800 	.word	0x40023800

08004fa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e09d      	b.n	80050ee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d108      	bne.n	8004fcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fc2:	d009      	beq.n	8004fd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	61da      	str	r2, [r3, #28]
 8004fca:	e005      	b.n	8004fd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d106      	bne.n	8004ff8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7fc fe60 	bl	8001cb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800500e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005018:	d902      	bls.n	8005020 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800501a:	2300      	movs	r3, #0
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	e002      	b.n	8005026 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005024:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800502e:	d007      	beq.n	8005040 <HAL_SPI_Init+0xa0>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005038:	d002      	beq.n	8005040 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005050:	431a      	orrs	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	431a      	orrs	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	431a      	orrs	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800506e:	431a      	orrs	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005078:	431a      	orrs	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005082:	ea42 0103 	orr.w	r1, r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	0c1b      	lsrs	r3, r3, #16
 800509c:	f003 0204 	and.w	r2, r3, #4
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	f003 0310 	and.w	r3, r3, #16
 80050a8:	431a      	orrs	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ae:	f003 0308 	and.w	r3, r3, #8
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80050bc:	ea42 0103 	orr.w	r1, r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	69da      	ldr	r2, [r3, #28]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b082      	sub	sp, #8
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e049      	b.n	800519c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	d106      	bne.n	8005122 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7fd f86d 	bl	80021fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2202      	movs	r2, #2
 8005126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	3304      	adds	r3, #4
 8005132:	4619      	mov	r1, r3
 8005134:	4610      	mov	r0, r2
 8005136:	f000 fe29 	bl	8005d8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d001      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e054      	b.n	8005266 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0201 	orr.w	r2, r2, #1
 80051d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a26      	ldr	r2, [pc, #152]	; (8005274 <HAL_TIM_Base_Start_IT+0xd0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d022      	beq.n	8005224 <HAL_TIM_Base_Start_IT+0x80>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e6:	d01d      	beq.n	8005224 <HAL_TIM_Base_Start_IT+0x80>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a22      	ldr	r2, [pc, #136]	; (8005278 <HAL_TIM_Base_Start_IT+0xd4>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d018      	beq.n	8005224 <HAL_TIM_Base_Start_IT+0x80>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a21      	ldr	r2, [pc, #132]	; (800527c <HAL_TIM_Base_Start_IT+0xd8>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d013      	beq.n	8005224 <HAL_TIM_Base_Start_IT+0x80>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a1f      	ldr	r2, [pc, #124]	; (8005280 <HAL_TIM_Base_Start_IT+0xdc>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d00e      	beq.n	8005224 <HAL_TIM_Base_Start_IT+0x80>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a1e      	ldr	r2, [pc, #120]	; (8005284 <HAL_TIM_Base_Start_IT+0xe0>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d009      	beq.n	8005224 <HAL_TIM_Base_Start_IT+0x80>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a1c      	ldr	r2, [pc, #112]	; (8005288 <HAL_TIM_Base_Start_IT+0xe4>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d004      	beq.n	8005224 <HAL_TIM_Base_Start_IT+0x80>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a1b      	ldr	r2, [pc, #108]	; (800528c <HAL_TIM_Base_Start_IT+0xe8>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d115      	bne.n	8005250 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689a      	ldr	r2, [r3, #8]
 800522a:	4b19      	ldr	r3, [pc, #100]	; (8005290 <HAL_TIM_Base_Start_IT+0xec>)
 800522c:	4013      	ands	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b06      	cmp	r3, #6
 8005234:	d015      	beq.n	8005262 <HAL_TIM_Base_Start_IT+0xbe>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800523c:	d011      	beq.n	8005262 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f042 0201 	orr.w	r2, r2, #1
 800524c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800524e:	e008      	b.n	8005262 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0201 	orr.w	r2, r2, #1
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	e000      	b.n	8005264 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005262:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	40010000 	.word	0x40010000
 8005278:	40000400 	.word	0x40000400
 800527c:	40000800 	.word	0x40000800
 8005280:	40000c00 	.word	0x40000c00
 8005284:	40010400 	.word	0x40010400
 8005288:	40014000 	.word	0x40014000
 800528c:	40001800 	.word	0x40001800
 8005290:	00010007 	.word	0x00010007

08005294 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e049      	b.n	800533a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d106      	bne.n	80052c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7fc ff7e 	bl	80021bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	3304      	adds	r3, #4
 80052d0:	4619      	mov	r1, r3
 80052d2:	4610      	mov	r0, r2
 80052d4:	f000 fd5a 	bl	8005d8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b082      	sub	sp, #8
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e049      	b.n	80053e8 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d106      	bne.n	800536e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7fc fee3 	bl	8002134 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2202      	movs	r2, #2
 8005372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	3304      	adds	r3, #4
 800537e:	4619      	mov	r1, r3
 8005380:	4610      	mov	r0, r2
 8005382:	f000 fd03 	bl	8005d8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d104      	bne.n	800540e <HAL_TIM_IC_Start_IT+0x1e>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800540a:	b2db      	uxtb	r3, r3
 800540c:	e023      	b.n	8005456 <HAL_TIM_IC_Start_IT+0x66>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b04      	cmp	r3, #4
 8005412:	d104      	bne.n	800541e <HAL_TIM_IC_Start_IT+0x2e>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800541a:	b2db      	uxtb	r3, r3
 800541c:	e01b      	b.n	8005456 <HAL_TIM_IC_Start_IT+0x66>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b08      	cmp	r3, #8
 8005422:	d104      	bne.n	800542e <HAL_TIM_IC_Start_IT+0x3e>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800542a:	b2db      	uxtb	r3, r3
 800542c:	e013      	b.n	8005456 <HAL_TIM_IC_Start_IT+0x66>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b0c      	cmp	r3, #12
 8005432:	d104      	bne.n	800543e <HAL_TIM_IC_Start_IT+0x4e>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800543a:	b2db      	uxtb	r3, r3
 800543c:	e00b      	b.n	8005456 <HAL_TIM_IC_Start_IT+0x66>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b10      	cmp	r3, #16
 8005442:	d104      	bne.n	800544e <HAL_TIM_IC_Start_IT+0x5e>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800544a:	b2db      	uxtb	r3, r3
 800544c:	e003      	b.n	8005456 <HAL_TIM_IC_Start_IT+0x66>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005454:	b2db      	uxtb	r3, r3
 8005456:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d104      	bne.n	8005468 <HAL_TIM_IC_Start_IT+0x78>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005464:	b2db      	uxtb	r3, r3
 8005466:	e013      	b.n	8005490 <HAL_TIM_IC_Start_IT+0xa0>
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	2b04      	cmp	r3, #4
 800546c:	d104      	bne.n	8005478 <HAL_TIM_IC_Start_IT+0x88>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005474:	b2db      	uxtb	r3, r3
 8005476:	e00b      	b.n	8005490 <HAL_TIM_IC_Start_IT+0xa0>
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	2b08      	cmp	r3, #8
 800547c:	d104      	bne.n	8005488 <HAL_TIM_IC_Start_IT+0x98>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005484:	b2db      	uxtb	r3, r3
 8005486:	e003      	b.n	8005490 <HAL_TIM_IC_Start_IT+0xa0>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800548e:	b2db      	uxtb	r3, r3
 8005490:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005492:	7bbb      	ldrb	r3, [r7, #14]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d102      	bne.n	800549e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005498:	7b7b      	ldrb	r3, [r7, #13]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d001      	beq.n	80054a2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e0e2      	b.n	8005668 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d104      	bne.n	80054b2 <HAL_TIM_IC_Start_IT+0xc2>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2202      	movs	r2, #2
 80054ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054b0:	e023      	b.n	80054fa <HAL_TIM_IC_Start_IT+0x10a>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d104      	bne.n	80054c2 <HAL_TIM_IC_Start_IT+0xd2>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054c0:	e01b      	b.n	80054fa <HAL_TIM_IC_Start_IT+0x10a>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d104      	bne.n	80054d2 <HAL_TIM_IC_Start_IT+0xe2>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2202      	movs	r2, #2
 80054cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054d0:	e013      	b.n	80054fa <HAL_TIM_IC_Start_IT+0x10a>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b0c      	cmp	r3, #12
 80054d6:	d104      	bne.n	80054e2 <HAL_TIM_IC_Start_IT+0xf2>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054e0:	e00b      	b.n	80054fa <HAL_TIM_IC_Start_IT+0x10a>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b10      	cmp	r3, #16
 80054e6:	d104      	bne.n	80054f2 <HAL_TIM_IC_Start_IT+0x102>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054f0:	e003      	b.n	80054fa <HAL_TIM_IC_Start_IT+0x10a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2202      	movs	r2, #2
 80054f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d104      	bne.n	800550a <HAL_TIM_IC_Start_IT+0x11a>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005508:	e013      	b.n	8005532 <HAL_TIM_IC_Start_IT+0x142>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2b04      	cmp	r3, #4
 800550e:	d104      	bne.n	800551a <HAL_TIM_IC_Start_IT+0x12a>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005518:	e00b      	b.n	8005532 <HAL_TIM_IC_Start_IT+0x142>
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b08      	cmp	r3, #8
 800551e:	d104      	bne.n	800552a <HAL_TIM_IC_Start_IT+0x13a>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005528:	e003      	b.n	8005532 <HAL_TIM_IC_Start_IT+0x142>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2202      	movs	r2, #2
 800552e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b0c      	cmp	r3, #12
 8005536:	d841      	bhi.n	80055bc <HAL_TIM_IC_Start_IT+0x1cc>
 8005538:	a201      	add	r2, pc, #4	; (adr r2, 8005540 <HAL_TIM_IC_Start_IT+0x150>)
 800553a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553e:	bf00      	nop
 8005540:	08005575 	.word	0x08005575
 8005544:	080055bd 	.word	0x080055bd
 8005548:	080055bd 	.word	0x080055bd
 800554c:	080055bd 	.word	0x080055bd
 8005550:	08005587 	.word	0x08005587
 8005554:	080055bd 	.word	0x080055bd
 8005558:	080055bd 	.word	0x080055bd
 800555c:	080055bd 	.word	0x080055bd
 8005560:	08005599 	.word	0x08005599
 8005564:	080055bd 	.word	0x080055bd
 8005568:	080055bd 	.word	0x080055bd
 800556c:	080055bd 	.word	0x080055bd
 8005570:	080055ab 	.word	0x080055ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0202 	orr.w	r2, r2, #2
 8005582:	60da      	str	r2, [r3, #12]
      break;
 8005584:	e01d      	b.n	80055c2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f042 0204 	orr.w	r2, r2, #4
 8005594:	60da      	str	r2, [r3, #12]
      break;
 8005596:	e014      	b.n	80055c2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68da      	ldr	r2, [r3, #12]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f042 0208 	orr.w	r2, r2, #8
 80055a6:	60da      	str	r2, [r3, #12]
      break;
 80055a8:	e00b      	b.n	80055c2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68da      	ldr	r2, [r3, #12]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f042 0210 	orr.w	r2, r2, #16
 80055b8:	60da      	str	r2, [r3, #12]
      break;
 80055ba:	e002      	b.n	80055c2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	73fb      	strb	r3, [r7, #15]
      break;
 80055c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d14e      	bne.n	8005666 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2201      	movs	r2, #1
 80055ce:	6839      	ldr	r1, [r7, #0]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f001 f916 	bl	8006802 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a25      	ldr	r2, [pc, #148]	; (8005670 <HAL_TIM_IC_Start_IT+0x280>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d022      	beq.n	8005626 <HAL_TIM_IC_Start_IT+0x236>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e8:	d01d      	beq.n	8005626 <HAL_TIM_IC_Start_IT+0x236>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a21      	ldr	r2, [pc, #132]	; (8005674 <HAL_TIM_IC_Start_IT+0x284>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d018      	beq.n	8005626 <HAL_TIM_IC_Start_IT+0x236>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a1f      	ldr	r2, [pc, #124]	; (8005678 <HAL_TIM_IC_Start_IT+0x288>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d013      	beq.n	8005626 <HAL_TIM_IC_Start_IT+0x236>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a1e      	ldr	r2, [pc, #120]	; (800567c <HAL_TIM_IC_Start_IT+0x28c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d00e      	beq.n	8005626 <HAL_TIM_IC_Start_IT+0x236>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a1c      	ldr	r2, [pc, #112]	; (8005680 <HAL_TIM_IC_Start_IT+0x290>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d009      	beq.n	8005626 <HAL_TIM_IC_Start_IT+0x236>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a1b      	ldr	r2, [pc, #108]	; (8005684 <HAL_TIM_IC_Start_IT+0x294>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d004      	beq.n	8005626 <HAL_TIM_IC_Start_IT+0x236>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a19      	ldr	r2, [pc, #100]	; (8005688 <HAL_TIM_IC_Start_IT+0x298>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d115      	bne.n	8005652 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	689a      	ldr	r2, [r3, #8]
 800562c:	4b17      	ldr	r3, [pc, #92]	; (800568c <HAL_TIM_IC_Start_IT+0x29c>)
 800562e:	4013      	ands	r3, r2
 8005630:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2b06      	cmp	r3, #6
 8005636:	d015      	beq.n	8005664 <HAL_TIM_IC_Start_IT+0x274>
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800563e:	d011      	beq.n	8005664 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0201 	orr.w	r2, r2, #1
 800564e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005650:	e008      	b.n	8005664 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f042 0201 	orr.w	r2, r2, #1
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	e000      	b.n	8005666 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005664:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005666:	7bfb      	ldrb	r3, [r7, #15]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	40010000 	.word	0x40010000
 8005674:	40000400 	.word	0x40000400
 8005678:	40000800 	.word	0x40000800
 800567c:	40000c00 	.word	0x40000c00
 8005680:	40010400 	.word	0x40010400
 8005684:	40014000 	.word	0x40014000
 8005688:	40001800 	.word	0x40001800
 800568c:	00010007 	.word	0x00010007

08005690 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d122      	bne.n	80056ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d11b      	bne.n	80056ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f06f 0202 	mvn.w	r2, #2
 80056bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 fb3c 	bl	8005d50 <HAL_TIM_IC_CaptureCallback>
 80056d8:	e005      	b.n	80056e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 fb2e 	bl	8005d3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fb3f 	bl	8005d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	f003 0304 	and.w	r3, r3, #4
 80056f6:	2b04      	cmp	r3, #4
 80056f8:	d122      	bne.n	8005740 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f003 0304 	and.w	r3, r3, #4
 8005704:	2b04      	cmp	r3, #4
 8005706:	d11b      	bne.n	8005740 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f06f 0204 	mvn.w	r2, #4
 8005710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2202      	movs	r2, #2
 8005716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fb12 	bl	8005d50 <HAL_TIM_IC_CaptureCallback>
 800572c:	e005      	b.n	800573a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fb04 	bl	8005d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 fb15 	bl	8005d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	f003 0308 	and.w	r3, r3, #8
 800574a:	2b08      	cmp	r3, #8
 800574c:	d122      	bne.n	8005794 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f003 0308 	and.w	r3, r3, #8
 8005758:	2b08      	cmp	r3, #8
 800575a:	d11b      	bne.n	8005794 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f06f 0208 	mvn.w	r2, #8
 8005764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2204      	movs	r2, #4
 800576a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	f003 0303 	and.w	r3, r3, #3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fae8 	bl	8005d50 <HAL_TIM_IC_CaptureCallback>
 8005780:	e005      	b.n	800578e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fada 	bl	8005d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 faeb 	bl	8005d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f003 0310 	and.w	r3, r3, #16
 800579e:	2b10      	cmp	r3, #16
 80057a0:	d122      	bne.n	80057e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f003 0310 	and.w	r3, r3, #16
 80057ac:	2b10      	cmp	r3, #16
 80057ae:	d11b      	bne.n	80057e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f06f 0210 	mvn.w	r2, #16
 80057b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2208      	movs	r2, #8
 80057be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fabe 	bl	8005d50 <HAL_TIM_IC_CaptureCallback>
 80057d4:	e005      	b.n	80057e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fab0 	bl	8005d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fac1 	bl	8005d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d10e      	bne.n	8005814 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b01      	cmp	r3, #1
 8005802:	d107      	bne.n	8005814 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 0201 	mvn.w	r2, #1
 800580c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7fc f984 	bl	8001b1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800581e:	2b80      	cmp	r3, #128	; 0x80
 8005820:	d10e      	bne.n	8005840 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582c:	2b80      	cmp	r3, #128	; 0x80
 800582e:	d107      	bne.n	8005840 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f001 f89e 	bl	800697c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800584e:	d10e      	bne.n	800586e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585a:	2b80      	cmp	r3, #128	; 0x80
 800585c:	d107      	bne.n	800586e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f001 f891 	bl	8006990 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005878:	2b40      	cmp	r3, #64	; 0x40
 800587a:	d10e      	bne.n	800589a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005886:	2b40      	cmp	r3, #64	; 0x40
 8005888:	d107      	bne.n	800589a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fa6f 	bl	8005d78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	f003 0320 	and.w	r3, r3, #32
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	d10e      	bne.n	80058c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f003 0320 	and.w	r3, r3, #32
 80058b2:	2b20      	cmp	r3, #32
 80058b4:	d107      	bne.n	80058c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f06f 0220 	mvn.w	r2, #32
 80058be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f001 f851 	bl	8006968 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058c6:	bf00      	nop
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b086      	sub	sp, #24
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	60f8      	str	r0, [r7, #12]
 80058d6:	60b9      	str	r1, [r7, #8]
 80058d8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058da:	2300      	movs	r3, #0
 80058dc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <HAL_TIM_IC_ConfigChannel+0x1e>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e088      	b.n	80059fe <HAL_TIM_IC_ConfigChannel+0x130>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d11b      	bne.n	8005932 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800590a:	f000 fdd1 	bl	80064b0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	699a      	ldr	r2, [r3, #24]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 020c 	bic.w	r2, r2, #12
 800591c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6999      	ldr	r1, [r3, #24]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	430a      	orrs	r2, r1
 800592e:	619a      	str	r2, [r3, #24]
 8005930:	e060      	b.n	80059f4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b04      	cmp	r3, #4
 8005936:	d11c      	bne.n	8005972 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005948:	f000 fe55 	bl	80065f6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699a      	ldr	r2, [r3, #24]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800595a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6999      	ldr	r1, [r3, #24]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	021a      	lsls	r2, r3, #8
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	619a      	str	r2, [r3, #24]
 8005970:	e040      	b.n	80059f4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b08      	cmp	r3, #8
 8005976:	d11b      	bne.n	80059b0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005988:	f000 fea2 	bl	80066d0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69da      	ldr	r2, [r3, #28]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 020c 	bic.w	r2, r2, #12
 800599a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	69d9      	ldr	r1, [r3, #28]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	689a      	ldr	r2, [r3, #8]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	61da      	str	r2, [r3, #28]
 80059ae:	e021      	b.n	80059f4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b0c      	cmp	r3, #12
 80059b4:	d11c      	bne.n	80059f0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80059c6:	f000 febf 	bl	8006748 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	69da      	ldr	r2, [r3, #28]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80059d8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	69d9      	ldr	r1, [r3, #28]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	021a      	lsls	r2, r3, #8
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	61da      	str	r2, [r3, #28]
 80059ee:	e001      	b.n	80059f4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
	...

08005a08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a14:	2300      	movs	r3, #0
 8005a16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d101      	bne.n	8005a26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a22:	2302      	movs	r3, #2
 8005a24:	e0ff      	b.n	8005c26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b14      	cmp	r3, #20
 8005a32:	f200 80f0 	bhi.w	8005c16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a36:	a201      	add	r2, pc, #4	; (adr r2, 8005a3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3c:	08005a91 	.word	0x08005a91
 8005a40:	08005c17 	.word	0x08005c17
 8005a44:	08005c17 	.word	0x08005c17
 8005a48:	08005c17 	.word	0x08005c17
 8005a4c:	08005ad1 	.word	0x08005ad1
 8005a50:	08005c17 	.word	0x08005c17
 8005a54:	08005c17 	.word	0x08005c17
 8005a58:	08005c17 	.word	0x08005c17
 8005a5c:	08005b13 	.word	0x08005b13
 8005a60:	08005c17 	.word	0x08005c17
 8005a64:	08005c17 	.word	0x08005c17
 8005a68:	08005c17 	.word	0x08005c17
 8005a6c:	08005b53 	.word	0x08005b53
 8005a70:	08005c17 	.word	0x08005c17
 8005a74:	08005c17 	.word	0x08005c17
 8005a78:	08005c17 	.word	0x08005c17
 8005a7c:	08005b95 	.word	0x08005b95
 8005a80:	08005c17 	.word	0x08005c17
 8005a84:	08005c17 	.word	0x08005c17
 8005a88:	08005c17 	.word	0x08005c17
 8005a8c:	08005bd5 	.word	0x08005bd5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68b9      	ldr	r1, [r7, #8]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 fa18 	bl	8005ecc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699a      	ldr	r2, [r3, #24]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f042 0208 	orr.w	r2, r2, #8
 8005aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699a      	ldr	r2, [r3, #24]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 0204 	bic.w	r2, r2, #4
 8005aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6999      	ldr	r1, [r3, #24]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	691a      	ldr	r2, [r3, #16]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	619a      	str	r2, [r3, #24]
      break;
 8005ace:	e0a5      	b.n	8005c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68b9      	ldr	r1, [r7, #8]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fa6a 	bl	8005fb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	699a      	ldr	r2, [r3, #24]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	699a      	ldr	r2, [r3, #24]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005afa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6999      	ldr	r1, [r3, #24]
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	021a      	lsls	r2, r3, #8
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	619a      	str	r2, [r3, #24]
      break;
 8005b10:	e084      	b.n	8005c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68b9      	ldr	r1, [r7, #8]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 fac1 	bl	80060a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69da      	ldr	r2, [r3, #28]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f042 0208 	orr.w	r2, r2, #8
 8005b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69da      	ldr	r2, [r3, #28]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0204 	bic.w	r2, r2, #4
 8005b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69d9      	ldr	r1, [r3, #28]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	691a      	ldr	r2, [r3, #16]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	61da      	str	r2, [r3, #28]
      break;
 8005b50:	e064      	b.n	8005c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68b9      	ldr	r1, [r7, #8]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 fb17 	bl	800618c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69da      	ldr	r2, [r3, #28]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69da      	ldr	r2, [r3, #28]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69d9      	ldr	r1, [r3, #28]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	021a      	lsls	r2, r3, #8
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	61da      	str	r2, [r3, #28]
      break;
 8005b92:	e043      	b.n	8005c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68b9      	ldr	r1, [r7, #8]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 fb4e 	bl	800623c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f042 0208 	orr.w	r2, r2, #8
 8005bae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 0204 	bic.w	r2, r2, #4
 8005bbe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	691a      	ldr	r2, [r3, #16]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005bd2:	e023      	b.n	8005c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68b9      	ldr	r1, [r7, #8]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 fb80 	bl	80062e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bfe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	021a      	lsls	r2, r3, #8
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	430a      	orrs	r2, r1
 8005c12:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c14:	e002      	b.n	8005c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	75fb      	strb	r3, [r7, #23]
      break;
 8005c1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3718      	adds	r7, #24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop

08005c30 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005c44:	2302      	movs	r3, #2
 8005c46:	e031      	b.n	8005cac <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005c58:	6839      	ldr	r1, [r7, #0]
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 fb94 	bl	8006388 <TIM_SlaveTimer_SetConfig>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d009      	beq.n	8005c7a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e018      	b.n	8005cac <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68da      	ldr	r2, [r3, #12]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c88:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c98:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b0c      	cmp	r3, #12
 8005cc6:	d831      	bhi.n	8005d2c <HAL_TIM_ReadCapturedValue+0x78>
 8005cc8:	a201      	add	r2, pc, #4	; (adr r2, 8005cd0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cce:	bf00      	nop
 8005cd0:	08005d05 	.word	0x08005d05
 8005cd4:	08005d2d 	.word	0x08005d2d
 8005cd8:	08005d2d 	.word	0x08005d2d
 8005cdc:	08005d2d 	.word	0x08005d2d
 8005ce0:	08005d0f 	.word	0x08005d0f
 8005ce4:	08005d2d 	.word	0x08005d2d
 8005ce8:	08005d2d 	.word	0x08005d2d
 8005cec:	08005d2d 	.word	0x08005d2d
 8005cf0:	08005d19 	.word	0x08005d19
 8005cf4:	08005d2d 	.word	0x08005d2d
 8005cf8:	08005d2d 	.word	0x08005d2d
 8005cfc:	08005d2d 	.word	0x08005d2d
 8005d00:	08005d23 	.word	0x08005d23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d0a:	60fb      	str	r3, [r7, #12]

      break;
 8005d0c:	e00f      	b.n	8005d2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d14:	60fb      	str	r3, [r7, #12]

      break;
 8005d16:	e00a      	b.n	8005d2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1e:	60fb      	str	r3, [r7, #12]

      break;
 8005d20:	e005      	b.n	8005d2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d28:	60fb      	str	r3, [r7, #12]

      break;
 8005d2a:	e000      	b.n	8005d2e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005d2c:	bf00      	nop
  }

  return tmpreg;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a40      	ldr	r2, [pc, #256]	; (8005ea0 <TIM_Base_SetConfig+0x114>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d013      	beq.n	8005dcc <TIM_Base_SetConfig+0x40>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005daa:	d00f      	beq.n	8005dcc <TIM_Base_SetConfig+0x40>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a3d      	ldr	r2, [pc, #244]	; (8005ea4 <TIM_Base_SetConfig+0x118>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d00b      	beq.n	8005dcc <TIM_Base_SetConfig+0x40>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a3c      	ldr	r2, [pc, #240]	; (8005ea8 <TIM_Base_SetConfig+0x11c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d007      	beq.n	8005dcc <TIM_Base_SetConfig+0x40>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a3b      	ldr	r2, [pc, #236]	; (8005eac <TIM_Base_SetConfig+0x120>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d003      	beq.n	8005dcc <TIM_Base_SetConfig+0x40>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a3a      	ldr	r2, [pc, #232]	; (8005eb0 <TIM_Base_SetConfig+0x124>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d108      	bne.n	8005dde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a2f      	ldr	r2, [pc, #188]	; (8005ea0 <TIM_Base_SetConfig+0x114>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d02b      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dec:	d027      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a2c      	ldr	r2, [pc, #176]	; (8005ea4 <TIM_Base_SetConfig+0x118>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d023      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a2b      	ldr	r2, [pc, #172]	; (8005ea8 <TIM_Base_SetConfig+0x11c>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d01f      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a2a      	ldr	r2, [pc, #168]	; (8005eac <TIM_Base_SetConfig+0x120>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d01b      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a29      	ldr	r2, [pc, #164]	; (8005eb0 <TIM_Base_SetConfig+0x124>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d017      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a28      	ldr	r2, [pc, #160]	; (8005eb4 <TIM_Base_SetConfig+0x128>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d013      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a27      	ldr	r2, [pc, #156]	; (8005eb8 <TIM_Base_SetConfig+0x12c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d00f      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a26      	ldr	r2, [pc, #152]	; (8005ebc <TIM_Base_SetConfig+0x130>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d00b      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a25      	ldr	r2, [pc, #148]	; (8005ec0 <TIM_Base_SetConfig+0x134>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d007      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a24      	ldr	r2, [pc, #144]	; (8005ec4 <TIM_Base_SetConfig+0x138>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d003      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a23      	ldr	r2, [pc, #140]	; (8005ec8 <TIM_Base_SetConfig+0x13c>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d108      	bne.n	8005e50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a0a      	ldr	r2, [pc, #40]	; (8005ea0 <TIM_Base_SetConfig+0x114>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d003      	beq.n	8005e84 <TIM_Base_SetConfig+0xf8>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a0c      	ldr	r2, [pc, #48]	; (8005eb0 <TIM_Base_SetConfig+0x124>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d103      	bne.n	8005e8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	691a      	ldr	r2, [r3, #16]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	615a      	str	r2, [r3, #20]
}
 8005e92:	bf00      	nop
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	40010000 	.word	0x40010000
 8005ea4:	40000400 	.word	0x40000400
 8005ea8:	40000800 	.word	0x40000800
 8005eac:	40000c00 	.word	0x40000c00
 8005eb0:	40010400 	.word	0x40010400
 8005eb4:	40014000 	.word	0x40014000
 8005eb8:	40014400 	.word	0x40014400
 8005ebc:	40014800 	.word	0x40014800
 8005ec0:	40001800 	.word	0x40001800
 8005ec4:	40001c00 	.word	0x40001c00
 8005ec8:	40002000 	.word	0x40002000

08005ecc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	f023 0201 	bic.w	r2, r3, #1
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	4b2b      	ldr	r3, [pc, #172]	; (8005fa4 <TIM_OC1_SetConfig+0xd8>)
 8005ef8:	4013      	ands	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f023 0303 	bic.w	r3, r3, #3
 8005f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f023 0302 	bic.w	r3, r3, #2
 8005f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a21      	ldr	r2, [pc, #132]	; (8005fa8 <TIM_OC1_SetConfig+0xdc>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d003      	beq.n	8005f30 <TIM_OC1_SetConfig+0x64>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a20      	ldr	r2, [pc, #128]	; (8005fac <TIM_OC1_SetConfig+0xe0>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d10c      	bne.n	8005f4a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f023 0308 	bic.w	r3, r3, #8
 8005f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f023 0304 	bic.w	r3, r3, #4
 8005f48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a16      	ldr	r2, [pc, #88]	; (8005fa8 <TIM_OC1_SetConfig+0xdc>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d003      	beq.n	8005f5a <TIM_OC1_SetConfig+0x8e>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a15      	ldr	r2, [pc, #84]	; (8005fac <TIM_OC1_SetConfig+0xe0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d111      	bne.n	8005f7e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	621a      	str	r2, [r3, #32]
}
 8005f98:	bf00      	nop
 8005f9a:	371c      	adds	r7, #28
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr
 8005fa4:	fffeff8f 	.word	0xfffeff8f
 8005fa8:	40010000 	.word	0x40010000
 8005fac:	40010400 	.word	0x40010400

08005fb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b087      	sub	sp, #28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	f023 0210 	bic.w	r2, r3, #16
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	4b2e      	ldr	r3, [pc, #184]	; (8006094 <TIM_OC2_SetConfig+0xe4>)
 8005fdc:	4013      	ands	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	021b      	lsls	r3, r3, #8
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f023 0320 	bic.w	r3, r3, #32
 8005ffa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	4313      	orrs	r3, r2
 8006006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a23      	ldr	r2, [pc, #140]	; (8006098 <TIM_OC2_SetConfig+0xe8>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d003      	beq.n	8006018 <TIM_OC2_SetConfig+0x68>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a22      	ldr	r2, [pc, #136]	; (800609c <TIM_OC2_SetConfig+0xec>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d10d      	bne.n	8006034 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800601e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	011b      	lsls	r3, r3, #4
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	4313      	orrs	r3, r2
 800602a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006032:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a18      	ldr	r2, [pc, #96]	; (8006098 <TIM_OC2_SetConfig+0xe8>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d003      	beq.n	8006044 <TIM_OC2_SetConfig+0x94>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a17      	ldr	r2, [pc, #92]	; (800609c <TIM_OC2_SetConfig+0xec>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d113      	bne.n	800606c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800604a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006052:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	4313      	orrs	r3, r2
 800605e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	4313      	orrs	r3, r2
 800606a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	621a      	str	r2, [r3, #32]
}
 8006086:	bf00      	nop
 8006088:	371c      	adds	r7, #28
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	feff8fff 	.word	0xfeff8fff
 8006098:	40010000 	.word	0x40010000
 800609c:	40010400 	.word	0x40010400

080060a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b087      	sub	sp, #28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	4b2d      	ldr	r3, [pc, #180]	; (8006180 <TIM_OC3_SetConfig+0xe0>)
 80060cc:	4013      	ands	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f023 0303 	bic.w	r3, r3, #3
 80060d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	4313      	orrs	r3, r2
 80060e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	021b      	lsls	r3, r3, #8
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a22      	ldr	r2, [pc, #136]	; (8006184 <TIM_OC3_SetConfig+0xe4>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d003      	beq.n	8006106 <TIM_OC3_SetConfig+0x66>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a21      	ldr	r2, [pc, #132]	; (8006188 <TIM_OC3_SetConfig+0xe8>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d10d      	bne.n	8006122 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800610c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	021b      	lsls	r3, r3, #8
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	4313      	orrs	r3, r2
 8006118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006120:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a17      	ldr	r2, [pc, #92]	; (8006184 <TIM_OC3_SetConfig+0xe4>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d003      	beq.n	8006132 <TIM_OC3_SetConfig+0x92>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a16      	ldr	r2, [pc, #88]	; (8006188 <TIM_OC3_SetConfig+0xe8>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d113      	bne.n	800615a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	011b      	lsls	r3, r3, #4
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	4313      	orrs	r3, r2
 800614c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	011b      	lsls	r3, r3, #4
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	4313      	orrs	r3, r2
 8006158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	621a      	str	r2, [r3, #32]
}
 8006174:	bf00      	nop
 8006176:	371c      	adds	r7, #28
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	fffeff8f 	.word	0xfffeff8f
 8006184:	40010000 	.word	0x40010000
 8006188:	40010400 	.word	0x40010400

0800618c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	4b1e      	ldr	r3, [pc, #120]	; (8006230 <TIM_OC4_SetConfig+0xa4>)
 80061b8:	4013      	ands	r3, r2
 80061ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	021b      	lsls	r3, r3, #8
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	031b      	lsls	r3, r3, #12
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a13      	ldr	r2, [pc, #76]	; (8006234 <TIM_OC4_SetConfig+0xa8>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d003      	beq.n	80061f4 <TIM_OC4_SetConfig+0x68>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a12      	ldr	r2, [pc, #72]	; (8006238 <TIM_OC4_SetConfig+0xac>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d109      	bne.n	8006208 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	019b      	lsls	r3, r3, #6
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	4313      	orrs	r3, r2
 8006206:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	621a      	str	r2, [r3, #32]
}
 8006222:	bf00      	nop
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	feff8fff 	.word	0xfeff8fff
 8006234:	40010000 	.word	0x40010000
 8006238:	40010400 	.word	0x40010400

0800623c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4b1b      	ldr	r3, [pc, #108]	; (80062d4 <TIM_OC5_SetConfig+0x98>)
 8006268:	4013      	ands	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	4313      	orrs	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800627c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	041b      	lsls	r3, r3, #16
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	4313      	orrs	r3, r2
 8006288:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a12      	ldr	r2, [pc, #72]	; (80062d8 <TIM_OC5_SetConfig+0x9c>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d003      	beq.n	800629a <TIM_OC5_SetConfig+0x5e>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a11      	ldr	r2, [pc, #68]	; (80062dc <TIM_OC5_SetConfig+0xa0>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d109      	bne.n	80062ae <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	021b      	lsls	r3, r3, #8
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	621a      	str	r2, [r3, #32]
}
 80062c8:	bf00      	nop
 80062ca:	371c      	adds	r7, #28
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr
 80062d4:	fffeff8f 	.word	0xfffeff8f
 80062d8:	40010000 	.word	0x40010000
 80062dc:	40010400 	.word	0x40010400

080062e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	4b1c      	ldr	r3, [pc, #112]	; (800637c <TIM_OC6_SetConfig+0x9c>)
 800630c:	4013      	ands	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	021b      	lsls	r3, r3, #8
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	4313      	orrs	r3, r2
 800631a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006322:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	051b      	lsls	r3, r3, #20
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	4313      	orrs	r3, r2
 800632e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a13      	ldr	r2, [pc, #76]	; (8006380 <TIM_OC6_SetConfig+0xa0>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d003      	beq.n	8006340 <TIM_OC6_SetConfig+0x60>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a12      	ldr	r2, [pc, #72]	; (8006384 <TIM_OC6_SetConfig+0xa4>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d109      	bne.n	8006354 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006346:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	029b      	lsls	r3, r3, #10
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	4313      	orrs	r3, r2
 8006352:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	621a      	str	r2, [r3, #32]
}
 800636e:	bf00      	nop
 8006370:	371c      	adds	r7, #28
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	feff8fff 	.word	0xfeff8fff
 8006380:	40010000 	.word	0x40010000
 8006384:	40010400 	.word	0x40010400

08006388 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006392:	2300      	movs	r3, #0
 8006394:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	4b3e      	ldr	r3, [pc, #248]	; (80064ac <TIM_SlaveTimer_SetConfig+0x124>)
 80063b4:	4013      	ands	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	4313      	orrs	r3, r2
 80063c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	2b70      	cmp	r3, #112	; 0x70
 80063d0:	d01a      	beq.n	8006408 <TIM_SlaveTimer_SetConfig+0x80>
 80063d2:	2b70      	cmp	r3, #112	; 0x70
 80063d4:	d860      	bhi.n	8006498 <TIM_SlaveTimer_SetConfig+0x110>
 80063d6:	2b60      	cmp	r3, #96	; 0x60
 80063d8:	d054      	beq.n	8006484 <TIM_SlaveTimer_SetConfig+0xfc>
 80063da:	2b60      	cmp	r3, #96	; 0x60
 80063dc:	d85c      	bhi.n	8006498 <TIM_SlaveTimer_SetConfig+0x110>
 80063de:	2b50      	cmp	r3, #80	; 0x50
 80063e0:	d046      	beq.n	8006470 <TIM_SlaveTimer_SetConfig+0xe8>
 80063e2:	2b50      	cmp	r3, #80	; 0x50
 80063e4:	d858      	bhi.n	8006498 <TIM_SlaveTimer_SetConfig+0x110>
 80063e6:	2b40      	cmp	r3, #64	; 0x40
 80063e8:	d019      	beq.n	800641e <TIM_SlaveTimer_SetConfig+0x96>
 80063ea:	2b40      	cmp	r3, #64	; 0x40
 80063ec:	d854      	bhi.n	8006498 <TIM_SlaveTimer_SetConfig+0x110>
 80063ee:	2b30      	cmp	r3, #48	; 0x30
 80063f0:	d055      	beq.n	800649e <TIM_SlaveTimer_SetConfig+0x116>
 80063f2:	2b30      	cmp	r3, #48	; 0x30
 80063f4:	d850      	bhi.n	8006498 <TIM_SlaveTimer_SetConfig+0x110>
 80063f6:	2b20      	cmp	r3, #32
 80063f8:	d051      	beq.n	800649e <TIM_SlaveTimer_SetConfig+0x116>
 80063fa:	2b20      	cmp	r3, #32
 80063fc:	d84c      	bhi.n	8006498 <TIM_SlaveTimer_SetConfig+0x110>
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d04d      	beq.n	800649e <TIM_SlaveTimer_SetConfig+0x116>
 8006402:	2b10      	cmp	r3, #16
 8006404:	d04b      	beq.n	800649e <TIM_SlaveTimer_SetConfig+0x116>
 8006406:	e047      	b.n	8006498 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006418:	f000 f9d3 	bl	80067c2 <TIM_ETR_SetConfig>
      break;
 800641c:	e040      	b.n	80064a0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b05      	cmp	r3, #5
 8006424:	d101      	bne.n	800642a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e03b      	b.n	80064a2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6a1a      	ldr	r2, [r3, #32]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 0201 	bic.w	r2, r2, #1
 8006440:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006450:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	011b      	lsls	r3, r3, #4
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	4313      	orrs	r3, r2
 800645c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	621a      	str	r2, [r3, #32]
      break;
 800646e:	e017      	b.n	80064a0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800647c:	461a      	mov	r2, r3
 800647e:	f000 f88b 	bl	8006598 <TIM_TI1_ConfigInputStage>
      break;
 8006482:	e00d      	b.n	80064a0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006490:	461a      	mov	r2, r3
 8006492:	f000 f8ed 	bl	8006670 <TIM_TI2_ConfigInputStage>
      break;
 8006496:	e003      	b.n	80064a0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	75fb      	strb	r3, [r7, #23]
      break;
 800649c:	e000      	b.n	80064a0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800649e:	bf00      	nop
  }

  return status;
 80064a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	fffefff8 	.word	0xfffefff8

080064b0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
 80064bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	f023 0201 	bic.w	r2, r3, #1
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	4a28      	ldr	r2, [pc, #160]	; (800657c <TIM_TI1_SetConfig+0xcc>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d01b      	beq.n	8006516 <TIM_TI1_SetConfig+0x66>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064e4:	d017      	beq.n	8006516 <TIM_TI1_SetConfig+0x66>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4a25      	ldr	r2, [pc, #148]	; (8006580 <TIM_TI1_SetConfig+0xd0>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d013      	beq.n	8006516 <TIM_TI1_SetConfig+0x66>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4a24      	ldr	r2, [pc, #144]	; (8006584 <TIM_TI1_SetConfig+0xd4>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d00f      	beq.n	8006516 <TIM_TI1_SetConfig+0x66>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4a23      	ldr	r2, [pc, #140]	; (8006588 <TIM_TI1_SetConfig+0xd8>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d00b      	beq.n	8006516 <TIM_TI1_SetConfig+0x66>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4a22      	ldr	r2, [pc, #136]	; (800658c <TIM_TI1_SetConfig+0xdc>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d007      	beq.n	8006516 <TIM_TI1_SetConfig+0x66>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4a21      	ldr	r2, [pc, #132]	; (8006590 <TIM_TI1_SetConfig+0xe0>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d003      	beq.n	8006516 <TIM_TI1_SetConfig+0x66>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	4a20      	ldr	r2, [pc, #128]	; (8006594 <TIM_TI1_SetConfig+0xe4>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d101      	bne.n	800651a <TIM_TI1_SetConfig+0x6a>
 8006516:	2301      	movs	r3, #1
 8006518:	e000      	b.n	800651c <TIM_TI1_SetConfig+0x6c>
 800651a:	2300      	movs	r3, #0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d008      	beq.n	8006532 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f023 0303 	bic.w	r3, r3, #3
 8006526:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4313      	orrs	r3, r2
 800652e:	617b      	str	r3, [r7, #20]
 8006530:	e003      	b.n	800653a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f043 0301 	orr.w	r3, r3, #1
 8006538:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006540:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	011b      	lsls	r3, r3, #4
 8006546:	b2db      	uxtb	r3, r3
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	4313      	orrs	r3, r2
 800654c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f023 030a 	bic.w	r3, r3, #10
 8006554:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	f003 030a 	and.w	r3, r3, #10
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	4313      	orrs	r3, r2
 8006560:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	621a      	str	r2, [r3, #32]
}
 800656e:	bf00      	nop
 8006570:	371c      	adds	r7, #28
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	40010000 	.word	0x40010000
 8006580:	40000400 	.word	0x40000400
 8006584:	40000800 	.word	0x40000800
 8006588:	40000c00 	.word	0x40000c00
 800658c:	40010400 	.word	0x40010400
 8006590:	40014000 	.word	0x40014000
 8006594:	40001800 	.word	0x40001800

08006598 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6a1b      	ldr	r3, [r3, #32]
 80065a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	f023 0201 	bic.w	r2, r3, #1
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	011b      	lsls	r3, r3, #4
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f023 030a 	bic.w	r3, r3, #10
 80065d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	4313      	orrs	r3, r2
 80065dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	621a      	str	r2, [r3, #32]
}
 80065ea:	bf00      	nop
 80065ec:	371c      	adds	r7, #28
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b087      	sub	sp, #28
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	60f8      	str	r0, [r7, #12]
 80065fe:	60b9      	str	r1, [r7, #8]
 8006600:	607a      	str	r2, [r7, #4]
 8006602:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	f023 0210 	bic.w	r2, r3, #16
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006622:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	021b      	lsls	r3, r3, #8
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	4313      	orrs	r3, r2
 800662c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006634:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	031b      	lsls	r3, r3, #12
 800663a:	b29b      	uxth	r3, r3
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	4313      	orrs	r3, r2
 8006640:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006648:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	011b      	lsls	r3, r3, #4
 800664e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	4313      	orrs	r3, r2
 8006656:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	621a      	str	r2, [r3, #32]
}
 8006664:	bf00      	nop
 8006666:	371c      	adds	r7, #28
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	f023 0210 	bic.w	r2, r3, #16
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800669a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	031b      	lsls	r3, r3, #12
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	011b      	lsls	r3, r3, #4
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	621a      	str	r2, [r3, #32]
}
 80066c4:	bf00      	nop
 80066c6:	371c      	adds	r7, #28
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
 80066dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f023 0303 	bic.w	r3, r3, #3
 80066fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4313      	orrs	r3, r2
 8006704:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800670c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	011b      	lsls	r3, r3, #4
 8006712:	b2db      	uxtb	r3, r3
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	4313      	orrs	r3, r2
 8006718:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006720:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	021b      	lsls	r3, r3, #8
 8006726:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	4313      	orrs	r3, r2
 800672e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	621a      	str	r2, [r3, #32]
}
 800673c:	bf00      	nop
 800673e:	371c      	adds	r7, #28
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006748:	b480      	push	{r7}
 800674a:	b087      	sub	sp, #28
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006774:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	021b      	lsls	r3, r3, #8
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	4313      	orrs	r3, r2
 800677e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006786:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	031b      	lsls	r3, r3, #12
 800678c:	b29b      	uxth	r3, r3
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	4313      	orrs	r3, r2
 8006792:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800679a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	031b      	lsls	r3, r3, #12
 80067a0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	621a      	str	r2, [r3, #32]
}
 80067b6:	bf00      	nop
 80067b8:	371c      	adds	r7, #28
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b087      	sub	sp, #28
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	60f8      	str	r0, [r7, #12]
 80067ca:	60b9      	str	r1, [r7, #8]
 80067cc:	607a      	str	r2, [r7, #4]
 80067ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	021a      	lsls	r2, r3, #8
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	431a      	orrs	r2, r3
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	609a      	str	r2, [r3, #8]
}
 80067f6:	bf00      	nop
 80067f8:	371c      	adds	r7, #28
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006802:	b480      	push	{r7}
 8006804:	b087      	sub	sp, #28
 8006806:	af00      	add	r7, sp, #0
 8006808:	60f8      	str	r0, [r7, #12]
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	f003 031f 	and.w	r3, r3, #31
 8006814:	2201      	movs	r2, #1
 8006816:	fa02 f303 	lsl.w	r3, r2, r3
 800681a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a1a      	ldr	r2, [r3, #32]
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	43db      	mvns	r3, r3
 8006824:	401a      	ands	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6a1a      	ldr	r2, [r3, #32]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	f003 031f 	and.w	r3, r3, #31
 8006834:	6879      	ldr	r1, [r7, #4]
 8006836:	fa01 f303 	lsl.w	r3, r1, r3
 800683a:	431a      	orrs	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	621a      	str	r2, [r3, #32]
}
 8006840:	bf00      	nop
 8006842:	371c      	adds	r7, #28
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800685c:	2b01      	cmp	r3, #1
 800685e:	d101      	bne.n	8006864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006860:	2302      	movs	r3, #2
 8006862:	e06d      	b.n	8006940 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a30      	ldr	r2, [pc, #192]	; (800694c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d004      	beq.n	8006898 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a2f      	ldr	r2, [pc, #188]	; (8006950 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d108      	bne.n	80068aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800689e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a20      	ldr	r2, [pc, #128]	; (800694c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d022      	beq.n	8006914 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d6:	d01d      	beq.n	8006914 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a1d      	ldr	r2, [pc, #116]	; (8006954 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d018      	beq.n	8006914 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a1c      	ldr	r2, [pc, #112]	; (8006958 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d013      	beq.n	8006914 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a1a      	ldr	r2, [pc, #104]	; (800695c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d00e      	beq.n	8006914 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a15      	ldr	r2, [pc, #84]	; (8006950 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d009      	beq.n	8006914 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a16      	ldr	r2, [pc, #88]	; (8006960 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d004      	beq.n	8006914 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a15      	ldr	r2, [pc, #84]	; (8006964 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d10c      	bne.n	800692e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800691a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	4313      	orrs	r3, r2
 8006924:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3714      	adds	r7, #20
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	40010000 	.word	0x40010000
 8006950:	40010400 	.word	0x40010400
 8006954:	40000400 	.word	0x40000400
 8006958:	40000800 	.word	0x40000800
 800695c:	40000c00 	.word	0x40000c00
 8006960:	40014000 	.word	0x40014000
 8006964:	40001800 	.word	0x40001800

08006968 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d101      	bne.n	80069b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e040      	b.n	8006a38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d106      	bne.n	80069cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7fb fca6 	bl	8002318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2224      	movs	r2, #36	; 0x24
 80069d0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f022 0201 	bic.w	r2, r2, #1
 80069e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f8b0 	bl	8006b48 <UART_SetConfig>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d101      	bne.n	80069f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e022      	b.n	8006a38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d002      	beq.n	8006a00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fb08 	bl	8007010 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685a      	ldr	r2, [r3, #4]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689a      	ldr	r2, [r3, #8]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f042 0201 	orr.w	r2, r2, #1
 8006a2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fb8f 	bl	8007154 <UART_CheckIdleState>
 8006a36:	4603      	mov	r3, r0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b08a      	sub	sp, #40	; 0x28
 8006a44:	af02      	add	r7, sp, #8
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	603b      	str	r3, [r7, #0]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a54:	2b20      	cmp	r3, #32
 8006a56:	d171      	bne.n	8006b3c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d002      	beq.n	8006a64 <HAL_UART_Transmit+0x24>
 8006a5e:	88fb      	ldrh	r3, [r7, #6]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e06a      	b.n	8006b3e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2221      	movs	r2, #33	; 0x21
 8006a74:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a76:	f7fb fd27 	bl	80024c8 <HAL_GetTick>
 8006a7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	88fa      	ldrh	r2, [r7, #6]
 8006a80:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	88fa      	ldrh	r2, [r7, #6]
 8006a88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a94:	d108      	bne.n	8006aa8 <HAL_UART_Transmit+0x68>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d104      	bne.n	8006aa8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	61bb      	str	r3, [r7, #24]
 8006aa6:	e003      	b.n	8006ab0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006aac:	2300      	movs	r3, #0
 8006aae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ab0:	e02c      	b.n	8006b0c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	2180      	movs	r1, #128	; 0x80
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f000 fb96 	bl	80071ee <UART_WaitOnFlagUntilTimeout>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d001      	beq.n	8006acc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e038      	b.n	8006b3e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10b      	bne.n	8006aea <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ae0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	3302      	adds	r3, #2
 8006ae6:	61bb      	str	r3, [r7, #24]
 8006ae8:	e007      	b.n	8006afa <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	781a      	ldrb	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	3301      	adds	r3, #1
 8006af8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	3b01      	subs	r3, #1
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1cc      	bne.n	8006ab2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	9300      	str	r3, [sp, #0]
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	2140      	movs	r1, #64	; 0x40
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f000 fb63 	bl	80071ee <UART_WaitOnFlagUntilTimeout>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d001      	beq.n	8006b32 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e005      	b.n	8006b3e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2220      	movs	r2, #32
 8006b36:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	e000      	b.n	8006b3e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006b3c:	2302      	movs	r3, #2
  }
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3720      	adds	r7, #32
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
	...

08006b48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b088      	sub	sp, #32
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b50:	2300      	movs	r3, #0
 8006b52:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	431a      	orrs	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	431a      	orrs	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	69db      	ldr	r3, [r3, #28]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	4ba6      	ldr	r3, [pc, #664]	; (8006e0c <UART_SetConfig+0x2c4>)
 8006b74:	4013      	ands	r3, r2
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	6812      	ldr	r2, [r2, #0]
 8006b7a:	6979      	ldr	r1, [r7, #20]
 8006b7c:	430b      	orrs	r3, r1
 8006b7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68da      	ldr	r2, [r3, #12]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	430a      	orrs	r2, r1
 8006b94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a94      	ldr	r2, [pc, #592]	; (8006e10 <UART_SetConfig+0x2c8>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d120      	bne.n	8006c06 <UART_SetConfig+0xbe>
 8006bc4:	4b93      	ldr	r3, [pc, #588]	; (8006e14 <UART_SetConfig+0x2cc>)
 8006bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bca:	f003 0303 	and.w	r3, r3, #3
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	d816      	bhi.n	8006c00 <UART_SetConfig+0xb8>
 8006bd2:	a201      	add	r2, pc, #4	; (adr r2, 8006bd8 <UART_SetConfig+0x90>)
 8006bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd8:	08006be9 	.word	0x08006be9
 8006bdc:	08006bf5 	.word	0x08006bf5
 8006be0:	08006bef 	.word	0x08006bef
 8006be4:	08006bfb 	.word	0x08006bfb
 8006be8:	2301      	movs	r3, #1
 8006bea:	77fb      	strb	r3, [r7, #31]
 8006bec:	e150      	b.n	8006e90 <UART_SetConfig+0x348>
 8006bee:	2302      	movs	r3, #2
 8006bf0:	77fb      	strb	r3, [r7, #31]
 8006bf2:	e14d      	b.n	8006e90 <UART_SetConfig+0x348>
 8006bf4:	2304      	movs	r3, #4
 8006bf6:	77fb      	strb	r3, [r7, #31]
 8006bf8:	e14a      	b.n	8006e90 <UART_SetConfig+0x348>
 8006bfa:	2308      	movs	r3, #8
 8006bfc:	77fb      	strb	r3, [r7, #31]
 8006bfe:	e147      	b.n	8006e90 <UART_SetConfig+0x348>
 8006c00:	2310      	movs	r3, #16
 8006c02:	77fb      	strb	r3, [r7, #31]
 8006c04:	e144      	b.n	8006e90 <UART_SetConfig+0x348>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a83      	ldr	r2, [pc, #524]	; (8006e18 <UART_SetConfig+0x2d0>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d132      	bne.n	8006c76 <UART_SetConfig+0x12e>
 8006c10:	4b80      	ldr	r3, [pc, #512]	; (8006e14 <UART_SetConfig+0x2cc>)
 8006c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c16:	f003 030c 	and.w	r3, r3, #12
 8006c1a:	2b0c      	cmp	r3, #12
 8006c1c:	d828      	bhi.n	8006c70 <UART_SetConfig+0x128>
 8006c1e:	a201      	add	r2, pc, #4	; (adr r2, 8006c24 <UART_SetConfig+0xdc>)
 8006c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c24:	08006c59 	.word	0x08006c59
 8006c28:	08006c71 	.word	0x08006c71
 8006c2c:	08006c71 	.word	0x08006c71
 8006c30:	08006c71 	.word	0x08006c71
 8006c34:	08006c65 	.word	0x08006c65
 8006c38:	08006c71 	.word	0x08006c71
 8006c3c:	08006c71 	.word	0x08006c71
 8006c40:	08006c71 	.word	0x08006c71
 8006c44:	08006c5f 	.word	0x08006c5f
 8006c48:	08006c71 	.word	0x08006c71
 8006c4c:	08006c71 	.word	0x08006c71
 8006c50:	08006c71 	.word	0x08006c71
 8006c54:	08006c6b 	.word	0x08006c6b
 8006c58:	2300      	movs	r3, #0
 8006c5a:	77fb      	strb	r3, [r7, #31]
 8006c5c:	e118      	b.n	8006e90 <UART_SetConfig+0x348>
 8006c5e:	2302      	movs	r3, #2
 8006c60:	77fb      	strb	r3, [r7, #31]
 8006c62:	e115      	b.n	8006e90 <UART_SetConfig+0x348>
 8006c64:	2304      	movs	r3, #4
 8006c66:	77fb      	strb	r3, [r7, #31]
 8006c68:	e112      	b.n	8006e90 <UART_SetConfig+0x348>
 8006c6a:	2308      	movs	r3, #8
 8006c6c:	77fb      	strb	r3, [r7, #31]
 8006c6e:	e10f      	b.n	8006e90 <UART_SetConfig+0x348>
 8006c70:	2310      	movs	r3, #16
 8006c72:	77fb      	strb	r3, [r7, #31]
 8006c74:	e10c      	b.n	8006e90 <UART_SetConfig+0x348>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a68      	ldr	r2, [pc, #416]	; (8006e1c <UART_SetConfig+0x2d4>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d120      	bne.n	8006cc2 <UART_SetConfig+0x17a>
 8006c80:	4b64      	ldr	r3, [pc, #400]	; (8006e14 <UART_SetConfig+0x2cc>)
 8006c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c86:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c8a:	2b30      	cmp	r3, #48	; 0x30
 8006c8c:	d013      	beq.n	8006cb6 <UART_SetConfig+0x16e>
 8006c8e:	2b30      	cmp	r3, #48	; 0x30
 8006c90:	d814      	bhi.n	8006cbc <UART_SetConfig+0x174>
 8006c92:	2b20      	cmp	r3, #32
 8006c94:	d009      	beq.n	8006caa <UART_SetConfig+0x162>
 8006c96:	2b20      	cmp	r3, #32
 8006c98:	d810      	bhi.n	8006cbc <UART_SetConfig+0x174>
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d002      	beq.n	8006ca4 <UART_SetConfig+0x15c>
 8006c9e:	2b10      	cmp	r3, #16
 8006ca0:	d006      	beq.n	8006cb0 <UART_SetConfig+0x168>
 8006ca2:	e00b      	b.n	8006cbc <UART_SetConfig+0x174>
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	77fb      	strb	r3, [r7, #31]
 8006ca8:	e0f2      	b.n	8006e90 <UART_SetConfig+0x348>
 8006caa:	2302      	movs	r3, #2
 8006cac:	77fb      	strb	r3, [r7, #31]
 8006cae:	e0ef      	b.n	8006e90 <UART_SetConfig+0x348>
 8006cb0:	2304      	movs	r3, #4
 8006cb2:	77fb      	strb	r3, [r7, #31]
 8006cb4:	e0ec      	b.n	8006e90 <UART_SetConfig+0x348>
 8006cb6:	2308      	movs	r3, #8
 8006cb8:	77fb      	strb	r3, [r7, #31]
 8006cba:	e0e9      	b.n	8006e90 <UART_SetConfig+0x348>
 8006cbc:	2310      	movs	r3, #16
 8006cbe:	77fb      	strb	r3, [r7, #31]
 8006cc0:	e0e6      	b.n	8006e90 <UART_SetConfig+0x348>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a56      	ldr	r2, [pc, #344]	; (8006e20 <UART_SetConfig+0x2d8>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d120      	bne.n	8006d0e <UART_SetConfig+0x1c6>
 8006ccc:	4b51      	ldr	r3, [pc, #324]	; (8006e14 <UART_SetConfig+0x2cc>)
 8006cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cd2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006cd6:	2bc0      	cmp	r3, #192	; 0xc0
 8006cd8:	d013      	beq.n	8006d02 <UART_SetConfig+0x1ba>
 8006cda:	2bc0      	cmp	r3, #192	; 0xc0
 8006cdc:	d814      	bhi.n	8006d08 <UART_SetConfig+0x1c0>
 8006cde:	2b80      	cmp	r3, #128	; 0x80
 8006ce0:	d009      	beq.n	8006cf6 <UART_SetConfig+0x1ae>
 8006ce2:	2b80      	cmp	r3, #128	; 0x80
 8006ce4:	d810      	bhi.n	8006d08 <UART_SetConfig+0x1c0>
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <UART_SetConfig+0x1a8>
 8006cea:	2b40      	cmp	r3, #64	; 0x40
 8006cec:	d006      	beq.n	8006cfc <UART_SetConfig+0x1b4>
 8006cee:	e00b      	b.n	8006d08 <UART_SetConfig+0x1c0>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	77fb      	strb	r3, [r7, #31]
 8006cf4:	e0cc      	b.n	8006e90 <UART_SetConfig+0x348>
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	77fb      	strb	r3, [r7, #31]
 8006cfa:	e0c9      	b.n	8006e90 <UART_SetConfig+0x348>
 8006cfc:	2304      	movs	r3, #4
 8006cfe:	77fb      	strb	r3, [r7, #31]
 8006d00:	e0c6      	b.n	8006e90 <UART_SetConfig+0x348>
 8006d02:	2308      	movs	r3, #8
 8006d04:	77fb      	strb	r3, [r7, #31]
 8006d06:	e0c3      	b.n	8006e90 <UART_SetConfig+0x348>
 8006d08:	2310      	movs	r3, #16
 8006d0a:	77fb      	strb	r3, [r7, #31]
 8006d0c:	e0c0      	b.n	8006e90 <UART_SetConfig+0x348>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a44      	ldr	r2, [pc, #272]	; (8006e24 <UART_SetConfig+0x2dc>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d125      	bne.n	8006d64 <UART_SetConfig+0x21c>
 8006d18:	4b3e      	ldr	r3, [pc, #248]	; (8006e14 <UART_SetConfig+0x2cc>)
 8006d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d26:	d017      	beq.n	8006d58 <UART_SetConfig+0x210>
 8006d28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d2c:	d817      	bhi.n	8006d5e <UART_SetConfig+0x216>
 8006d2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d32:	d00b      	beq.n	8006d4c <UART_SetConfig+0x204>
 8006d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d38:	d811      	bhi.n	8006d5e <UART_SetConfig+0x216>
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <UART_SetConfig+0x1fe>
 8006d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d42:	d006      	beq.n	8006d52 <UART_SetConfig+0x20a>
 8006d44:	e00b      	b.n	8006d5e <UART_SetConfig+0x216>
 8006d46:	2300      	movs	r3, #0
 8006d48:	77fb      	strb	r3, [r7, #31]
 8006d4a:	e0a1      	b.n	8006e90 <UART_SetConfig+0x348>
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	77fb      	strb	r3, [r7, #31]
 8006d50:	e09e      	b.n	8006e90 <UART_SetConfig+0x348>
 8006d52:	2304      	movs	r3, #4
 8006d54:	77fb      	strb	r3, [r7, #31]
 8006d56:	e09b      	b.n	8006e90 <UART_SetConfig+0x348>
 8006d58:	2308      	movs	r3, #8
 8006d5a:	77fb      	strb	r3, [r7, #31]
 8006d5c:	e098      	b.n	8006e90 <UART_SetConfig+0x348>
 8006d5e:	2310      	movs	r3, #16
 8006d60:	77fb      	strb	r3, [r7, #31]
 8006d62:	e095      	b.n	8006e90 <UART_SetConfig+0x348>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a2f      	ldr	r2, [pc, #188]	; (8006e28 <UART_SetConfig+0x2e0>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d125      	bne.n	8006dba <UART_SetConfig+0x272>
 8006d6e:	4b29      	ldr	r3, [pc, #164]	; (8006e14 <UART_SetConfig+0x2cc>)
 8006d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d7c:	d017      	beq.n	8006dae <UART_SetConfig+0x266>
 8006d7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d82:	d817      	bhi.n	8006db4 <UART_SetConfig+0x26c>
 8006d84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d88:	d00b      	beq.n	8006da2 <UART_SetConfig+0x25a>
 8006d8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d8e:	d811      	bhi.n	8006db4 <UART_SetConfig+0x26c>
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d003      	beq.n	8006d9c <UART_SetConfig+0x254>
 8006d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d98:	d006      	beq.n	8006da8 <UART_SetConfig+0x260>
 8006d9a:	e00b      	b.n	8006db4 <UART_SetConfig+0x26c>
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	77fb      	strb	r3, [r7, #31]
 8006da0:	e076      	b.n	8006e90 <UART_SetConfig+0x348>
 8006da2:	2302      	movs	r3, #2
 8006da4:	77fb      	strb	r3, [r7, #31]
 8006da6:	e073      	b.n	8006e90 <UART_SetConfig+0x348>
 8006da8:	2304      	movs	r3, #4
 8006daa:	77fb      	strb	r3, [r7, #31]
 8006dac:	e070      	b.n	8006e90 <UART_SetConfig+0x348>
 8006dae:	2308      	movs	r3, #8
 8006db0:	77fb      	strb	r3, [r7, #31]
 8006db2:	e06d      	b.n	8006e90 <UART_SetConfig+0x348>
 8006db4:	2310      	movs	r3, #16
 8006db6:	77fb      	strb	r3, [r7, #31]
 8006db8:	e06a      	b.n	8006e90 <UART_SetConfig+0x348>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a1b      	ldr	r2, [pc, #108]	; (8006e2c <UART_SetConfig+0x2e4>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d138      	bne.n	8006e36 <UART_SetConfig+0x2ee>
 8006dc4:	4b13      	ldr	r3, [pc, #76]	; (8006e14 <UART_SetConfig+0x2cc>)
 8006dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006dce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006dd2:	d017      	beq.n	8006e04 <UART_SetConfig+0x2bc>
 8006dd4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006dd8:	d82a      	bhi.n	8006e30 <UART_SetConfig+0x2e8>
 8006dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dde:	d00b      	beq.n	8006df8 <UART_SetConfig+0x2b0>
 8006de0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006de4:	d824      	bhi.n	8006e30 <UART_SetConfig+0x2e8>
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <UART_SetConfig+0x2aa>
 8006dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dee:	d006      	beq.n	8006dfe <UART_SetConfig+0x2b6>
 8006df0:	e01e      	b.n	8006e30 <UART_SetConfig+0x2e8>
 8006df2:	2300      	movs	r3, #0
 8006df4:	77fb      	strb	r3, [r7, #31]
 8006df6:	e04b      	b.n	8006e90 <UART_SetConfig+0x348>
 8006df8:	2302      	movs	r3, #2
 8006dfa:	77fb      	strb	r3, [r7, #31]
 8006dfc:	e048      	b.n	8006e90 <UART_SetConfig+0x348>
 8006dfe:	2304      	movs	r3, #4
 8006e00:	77fb      	strb	r3, [r7, #31]
 8006e02:	e045      	b.n	8006e90 <UART_SetConfig+0x348>
 8006e04:	2308      	movs	r3, #8
 8006e06:	77fb      	strb	r3, [r7, #31]
 8006e08:	e042      	b.n	8006e90 <UART_SetConfig+0x348>
 8006e0a:	bf00      	nop
 8006e0c:	efff69f3 	.word	0xefff69f3
 8006e10:	40011000 	.word	0x40011000
 8006e14:	40023800 	.word	0x40023800
 8006e18:	40004400 	.word	0x40004400
 8006e1c:	40004800 	.word	0x40004800
 8006e20:	40004c00 	.word	0x40004c00
 8006e24:	40005000 	.word	0x40005000
 8006e28:	40011400 	.word	0x40011400
 8006e2c:	40007800 	.word	0x40007800
 8006e30:	2310      	movs	r3, #16
 8006e32:	77fb      	strb	r3, [r7, #31]
 8006e34:	e02c      	b.n	8006e90 <UART_SetConfig+0x348>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a72      	ldr	r2, [pc, #456]	; (8007004 <UART_SetConfig+0x4bc>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d125      	bne.n	8006e8c <UART_SetConfig+0x344>
 8006e40:	4b71      	ldr	r3, [pc, #452]	; (8007008 <UART_SetConfig+0x4c0>)
 8006e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006e4a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e4e:	d017      	beq.n	8006e80 <UART_SetConfig+0x338>
 8006e50:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e54:	d817      	bhi.n	8006e86 <UART_SetConfig+0x33e>
 8006e56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e5a:	d00b      	beq.n	8006e74 <UART_SetConfig+0x32c>
 8006e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e60:	d811      	bhi.n	8006e86 <UART_SetConfig+0x33e>
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d003      	beq.n	8006e6e <UART_SetConfig+0x326>
 8006e66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e6a:	d006      	beq.n	8006e7a <UART_SetConfig+0x332>
 8006e6c:	e00b      	b.n	8006e86 <UART_SetConfig+0x33e>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	77fb      	strb	r3, [r7, #31]
 8006e72:	e00d      	b.n	8006e90 <UART_SetConfig+0x348>
 8006e74:	2302      	movs	r3, #2
 8006e76:	77fb      	strb	r3, [r7, #31]
 8006e78:	e00a      	b.n	8006e90 <UART_SetConfig+0x348>
 8006e7a:	2304      	movs	r3, #4
 8006e7c:	77fb      	strb	r3, [r7, #31]
 8006e7e:	e007      	b.n	8006e90 <UART_SetConfig+0x348>
 8006e80:	2308      	movs	r3, #8
 8006e82:	77fb      	strb	r3, [r7, #31]
 8006e84:	e004      	b.n	8006e90 <UART_SetConfig+0x348>
 8006e86:	2310      	movs	r3, #16
 8006e88:	77fb      	strb	r3, [r7, #31]
 8006e8a:	e001      	b.n	8006e90 <UART_SetConfig+0x348>
 8006e8c:	2310      	movs	r3, #16
 8006e8e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	69db      	ldr	r3, [r3, #28]
 8006e94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e98:	d15b      	bne.n	8006f52 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006e9a:	7ffb      	ldrb	r3, [r7, #31]
 8006e9c:	2b08      	cmp	r3, #8
 8006e9e:	d828      	bhi.n	8006ef2 <UART_SetConfig+0x3aa>
 8006ea0:	a201      	add	r2, pc, #4	; (adr r2, 8006ea8 <UART_SetConfig+0x360>)
 8006ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea6:	bf00      	nop
 8006ea8:	08006ecd 	.word	0x08006ecd
 8006eac:	08006ed5 	.word	0x08006ed5
 8006eb0:	08006edd 	.word	0x08006edd
 8006eb4:	08006ef3 	.word	0x08006ef3
 8006eb8:	08006ee3 	.word	0x08006ee3
 8006ebc:	08006ef3 	.word	0x08006ef3
 8006ec0:	08006ef3 	.word	0x08006ef3
 8006ec4:	08006ef3 	.word	0x08006ef3
 8006ec8:	08006eeb 	.word	0x08006eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ecc:	f7fd fc18 	bl	8004700 <HAL_RCC_GetPCLK1Freq>
 8006ed0:	61b8      	str	r0, [r7, #24]
        break;
 8006ed2:	e013      	b.n	8006efc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ed4:	f7fd fc28 	bl	8004728 <HAL_RCC_GetPCLK2Freq>
 8006ed8:	61b8      	str	r0, [r7, #24]
        break;
 8006eda:	e00f      	b.n	8006efc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006edc:	4b4b      	ldr	r3, [pc, #300]	; (800700c <UART_SetConfig+0x4c4>)
 8006ede:	61bb      	str	r3, [r7, #24]
        break;
 8006ee0:	e00c      	b.n	8006efc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ee2:	f7fd fb3b 	bl	800455c <HAL_RCC_GetSysClockFreq>
 8006ee6:	61b8      	str	r0, [r7, #24]
        break;
 8006ee8:	e008      	b.n	8006efc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eee:	61bb      	str	r3, [r7, #24]
        break;
 8006ef0:	e004      	b.n	8006efc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	77bb      	strb	r3, [r7, #30]
        break;
 8006efa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d074      	beq.n	8006fec <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	005a      	lsls	r2, r3, #1
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	085b      	lsrs	r3, r3, #1
 8006f0c:	441a      	add	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f16:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	2b0f      	cmp	r3, #15
 8006f1c:	d916      	bls.n	8006f4c <UART_SetConfig+0x404>
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f24:	d212      	bcs.n	8006f4c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	f023 030f 	bic.w	r3, r3, #15
 8006f2e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	085b      	lsrs	r3, r3, #1
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	f003 0307 	and.w	r3, r3, #7
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	89fb      	ldrh	r3, [r7, #14]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	89fa      	ldrh	r2, [r7, #14]
 8006f48:	60da      	str	r2, [r3, #12]
 8006f4a:	e04f      	b.n	8006fec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	77bb      	strb	r3, [r7, #30]
 8006f50:	e04c      	b.n	8006fec <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f52:	7ffb      	ldrb	r3, [r7, #31]
 8006f54:	2b08      	cmp	r3, #8
 8006f56:	d828      	bhi.n	8006faa <UART_SetConfig+0x462>
 8006f58:	a201      	add	r2, pc, #4	; (adr r2, 8006f60 <UART_SetConfig+0x418>)
 8006f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5e:	bf00      	nop
 8006f60:	08006f85 	.word	0x08006f85
 8006f64:	08006f8d 	.word	0x08006f8d
 8006f68:	08006f95 	.word	0x08006f95
 8006f6c:	08006fab 	.word	0x08006fab
 8006f70:	08006f9b 	.word	0x08006f9b
 8006f74:	08006fab 	.word	0x08006fab
 8006f78:	08006fab 	.word	0x08006fab
 8006f7c:	08006fab 	.word	0x08006fab
 8006f80:	08006fa3 	.word	0x08006fa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f84:	f7fd fbbc 	bl	8004700 <HAL_RCC_GetPCLK1Freq>
 8006f88:	61b8      	str	r0, [r7, #24]
        break;
 8006f8a:	e013      	b.n	8006fb4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f8c:	f7fd fbcc 	bl	8004728 <HAL_RCC_GetPCLK2Freq>
 8006f90:	61b8      	str	r0, [r7, #24]
        break;
 8006f92:	e00f      	b.n	8006fb4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f94:	4b1d      	ldr	r3, [pc, #116]	; (800700c <UART_SetConfig+0x4c4>)
 8006f96:	61bb      	str	r3, [r7, #24]
        break;
 8006f98:	e00c      	b.n	8006fb4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f9a:	f7fd fadf 	bl	800455c <HAL_RCC_GetSysClockFreq>
 8006f9e:	61b8      	str	r0, [r7, #24]
        break;
 8006fa0:	e008      	b.n	8006fb4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fa6:	61bb      	str	r3, [r7, #24]
        break;
 8006fa8:	e004      	b.n	8006fb4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006faa:	2300      	movs	r3, #0
 8006fac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	77bb      	strb	r3, [r7, #30]
        break;
 8006fb2:	bf00      	nop
    }

    if (pclk != 0U)
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d018      	beq.n	8006fec <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	085a      	lsrs	r2, r3, #1
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	441a      	add	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fcc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	2b0f      	cmp	r3, #15
 8006fd2:	d909      	bls.n	8006fe8 <UART_SetConfig+0x4a0>
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fda:	d205      	bcs.n	8006fe8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	60da      	str	r2, [r3, #12]
 8006fe6:	e001      	b.n	8006fec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006ff8:	7fbb      	ldrb	r3, [r7, #30]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3720      	adds	r7, #32
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	40007c00 	.word	0x40007c00
 8007008:	40023800 	.word	0x40023800
 800700c:	00f42400 	.word	0x00f42400

08007010 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00a      	beq.n	800703a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	430a      	orrs	r2, r1
 8007038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703e:	f003 0302 	and.w	r3, r3, #2
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00a      	beq.n	800705c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	430a      	orrs	r2, r1
 800705a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	f003 0304 	and.w	r3, r3, #4
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00a      	beq.n	800707e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	430a      	orrs	r2, r1
 800707c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007082:	f003 0308 	and.w	r3, r3, #8
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00a      	beq.n	80070a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	430a      	orrs	r2, r1
 800709e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a4:	f003 0310 	and.w	r3, r3, #16
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00a      	beq.n	80070c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c6:	f003 0320 	and.w	r3, r3, #32
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00a      	beq.n	80070e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d01a      	beq.n	8007126 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	430a      	orrs	r2, r1
 8007104:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800710e:	d10a      	bne.n	8007126 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	430a      	orrs	r2, r1
 8007124:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00a      	beq.n	8007148 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	430a      	orrs	r2, r1
 8007146:	605a      	str	r2, [r3, #4]
  }
}
 8007148:	bf00      	nop
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af02      	add	r7, sp, #8
 800715a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007164:	f7fb f9b0 	bl	80024c8 <HAL_GetTick>
 8007168:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0308 	and.w	r3, r3, #8
 8007174:	2b08      	cmp	r3, #8
 8007176:	d10e      	bne.n	8007196 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007178:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800717c:	9300      	str	r3, [sp, #0]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f831 	bl	80071ee <UART_WaitOnFlagUntilTimeout>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e027      	b.n	80071e6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0304 	and.w	r3, r3, #4
 80071a0:	2b04      	cmp	r3, #4
 80071a2:	d10e      	bne.n	80071c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071a8:	9300      	str	r3, [sp, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f81b 	bl	80071ee <UART_WaitOnFlagUntilTimeout>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e011      	b.n	80071e6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2220      	movs	r2, #32
 80071c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2220      	movs	r2, #32
 80071cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b09c      	sub	sp, #112	; 0x70
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	60f8      	str	r0, [r7, #12]
 80071f6:	60b9      	str	r1, [r7, #8]
 80071f8:	603b      	str	r3, [r7, #0]
 80071fa:	4613      	mov	r3, r2
 80071fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071fe:	e0a7      	b.n	8007350 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007206:	f000 80a3 	beq.w	8007350 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800720a:	f7fb f95d 	bl	80024c8 <HAL_GetTick>
 800720e:	4602      	mov	r2, r0
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007216:	429a      	cmp	r2, r3
 8007218:	d302      	bcc.n	8007220 <UART_WaitOnFlagUntilTimeout+0x32>
 800721a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800721c:	2b00      	cmp	r3, #0
 800721e:	d13f      	bne.n	80072a0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007228:	e853 3f00 	ldrex	r3, [r3]
 800722c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800722e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007230:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007234:	667b      	str	r3, [r7, #100]	; 0x64
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	461a      	mov	r2, r3
 800723c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800723e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007240:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007242:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007244:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007246:	e841 2300 	strex	r3, r2, [r1]
 800724a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800724c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1e6      	bne.n	8007220 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	3308      	adds	r3, #8
 8007258:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800725c:	e853 3f00 	ldrex	r3, [r3]
 8007260:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007264:	f023 0301 	bic.w	r3, r3, #1
 8007268:	663b      	str	r3, [r7, #96]	; 0x60
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3308      	adds	r3, #8
 8007270:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007272:	64ba      	str	r2, [r7, #72]	; 0x48
 8007274:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007276:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007278:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800727a:	e841 2300 	strex	r3, r2, [r1]
 800727e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1e5      	bne.n	8007252 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2220      	movs	r2, #32
 800728a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2220      	movs	r2, #32
 8007290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e068      	b.n	8007372 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 0304 	and.w	r3, r3, #4
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d050      	beq.n	8007350 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072bc:	d148      	bne.n	8007350 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072c6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d0:	e853 3f00 	ldrex	r3, [r3]
 80072d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	461a      	mov	r2, r3
 80072e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e6:	637b      	str	r3, [r7, #52]	; 0x34
 80072e8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072ee:	e841 2300 	strex	r3, r2, [r1]
 80072f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1e6      	bne.n	80072c8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3308      	adds	r3, #8
 8007300:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	e853 3f00 	ldrex	r3, [r3]
 8007308:	613b      	str	r3, [r7, #16]
   return(result);
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	f023 0301 	bic.w	r3, r3, #1
 8007310:	66bb      	str	r3, [r7, #104]	; 0x68
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3308      	adds	r3, #8
 8007318:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800731a:	623a      	str	r2, [r7, #32]
 800731c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731e:	69f9      	ldr	r1, [r7, #28]
 8007320:	6a3a      	ldr	r2, [r7, #32]
 8007322:	e841 2300 	strex	r3, r2, [r1]
 8007326:	61bb      	str	r3, [r7, #24]
   return(result);
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1e5      	bne.n	80072fa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2220      	movs	r2, #32
 8007332:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2220      	movs	r2, #32
 8007338:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2220      	movs	r2, #32
 8007340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2200      	movs	r2, #0
 8007348:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	e010      	b.n	8007372 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	69da      	ldr	r2, [r3, #28]
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	4013      	ands	r3, r2
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	429a      	cmp	r2, r3
 800735e:	bf0c      	ite	eq
 8007360:	2301      	moveq	r3, #1
 8007362:	2300      	movne	r3, #0
 8007364:	b2db      	uxtb	r3, r3
 8007366:	461a      	mov	r2, r3
 8007368:	79fb      	ldrb	r3, [r7, #7]
 800736a:	429a      	cmp	r2, r3
 800736c:	f43f af48 	beq.w	8007200 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3770      	adds	r7, #112	; 0x70
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
	...

0800737c <__utoa>:
 800737c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800737e:	4c1f      	ldr	r4, [pc, #124]	; (80073fc <__utoa+0x80>)
 8007380:	b08b      	sub	sp, #44	; 0x2c
 8007382:	4605      	mov	r5, r0
 8007384:	460b      	mov	r3, r1
 8007386:	466e      	mov	r6, sp
 8007388:	f104 0c20 	add.w	ip, r4, #32
 800738c:	6820      	ldr	r0, [r4, #0]
 800738e:	6861      	ldr	r1, [r4, #4]
 8007390:	4637      	mov	r7, r6
 8007392:	c703      	stmia	r7!, {r0, r1}
 8007394:	3408      	adds	r4, #8
 8007396:	4564      	cmp	r4, ip
 8007398:	463e      	mov	r6, r7
 800739a:	d1f7      	bne.n	800738c <__utoa+0x10>
 800739c:	7921      	ldrb	r1, [r4, #4]
 800739e:	7139      	strb	r1, [r7, #4]
 80073a0:	1e91      	subs	r1, r2, #2
 80073a2:	6820      	ldr	r0, [r4, #0]
 80073a4:	6038      	str	r0, [r7, #0]
 80073a6:	2922      	cmp	r1, #34	; 0x22
 80073a8:	f04f 0100 	mov.w	r1, #0
 80073ac:	d904      	bls.n	80073b8 <__utoa+0x3c>
 80073ae:	7019      	strb	r1, [r3, #0]
 80073b0:	460b      	mov	r3, r1
 80073b2:	4618      	mov	r0, r3
 80073b4:	b00b      	add	sp, #44	; 0x2c
 80073b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073b8:	1e58      	subs	r0, r3, #1
 80073ba:	4684      	mov	ip, r0
 80073bc:	fbb5 f7f2 	udiv	r7, r5, r2
 80073c0:	fb02 5617 	mls	r6, r2, r7, r5
 80073c4:	3628      	adds	r6, #40	; 0x28
 80073c6:	446e      	add	r6, sp
 80073c8:	460c      	mov	r4, r1
 80073ca:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80073ce:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80073d2:	462e      	mov	r6, r5
 80073d4:	42b2      	cmp	r2, r6
 80073d6:	f101 0101 	add.w	r1, r1, #1
 80073da:	463d      	mov	r5, r7
 80073dc:	d9ee      	bls.n	80073bc <__utoa+0x40>
 80073de:	2200      	movs	r2, #0
 80073e0:	545a      	strb	r2, [r3, r1]
 80073e2:	1919      	adds	r1, r3, r4
 80073e4:	1aa5      	subs	r5, r4, r2
 80073e6:	42aa      	cmp	r2, r5
 80073e8:	dae3      	bge.n	80073b2 <__utoa+0x36>
 80073ea:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80073ee:	780e      	ldrb	r6, [r1, #0]
 80073f0:	7006      	strb	r6, [r0, #0]
 80073f2:	3201      	adds	r2, #1
 80073f4:	f801 5901 	strb.w	r5, [r1], #-1
 80073f8:	e7f4      	b.n	80073e4 <__utoa+0x68>
 80073fa:	bf00      	nop
 80073fc:	08007940 	.word	0x08007940

08007400 <utoa>:
 8007400:	f7ff bfbc 	b.w	800737c <__utoa>

08007404 <memset>:
 8007404:	4402      	add	r2, r0
 8007406:	4603      	mov	r3, r0
 8007408:	4293      	cmp	r3, r2
 800740a:	d100      	bne.n	800740e <memset+0xa>
 800740c:	4770      	bx	lr
 800740e:	f803 1b01 	strb.w	r1, [r3], #1
 8007412:	e7f9      	b.n	8007408 <memset+0x4>

08007414 <__libc_init_array>:
 8007414:	b570      	push	{r4, r5, r6, lr}
 8007416:	4d0d      	ldr	r5, [pc, #52]	; (800744c <__libc_init_array+0x38>)
 8007418:	4c0d      	ldr	r4, [pc, #52]	; (8007450 <__libc_init_array+0x3c>)
 800741a:	1b64      	subs	r4, r4, r5
 800741c:	10a4      	asrs	r4, r4, #2
 800741e:	2600      	movs	r6, #0
 8007420:	42a6      	cmp	r6, r4
 8007422:	d109      	bne.n	8007438 <__libc_init_array+0x24>
 8007424:	4d0b      	ldr	r5, [pc, #44]	; (8007454 <__libc_init_array+0x40>)
 8007426:	4c0c      	ldr	r4, [pc, #48]	; (8007458 <__libc_init_array+0x44>)
 8007428:	f000 f818 	bl	800745c <_init>
 800742c:	1b64      	subs	r4, r4, r5
 800742e:	10a4      	asrs	r4, r4, #2
 8007430:	2600      	movs	r6, #0
 8007432:	42a6      	cmp	r6, r4
 8007434:	d105      	bne.n	8007442 <__libc_init_array+0x2e>
 8007436:	bd70      	pop	{r4, r5, r6, pc}
 8007438:	f855 3b04 	ldr.w	r3, [r5], #4
 800743c:	4798      	blx	r3
 800743e:	3601      	adds	r6, #1
 8007440:	e7ee      	b.n	8007420 <__libc_init_array+0xc>
 8007442:	f855 3b04 	ldr.w	r3, [r5], #4
 8007446:	4798      	blx	r3
 8007448:	3601      	adds	r6, #1
 800744a:	e7f2      	b.n	8007432 <__libc_init_array+0x1e>
 800744c:	08007970 	.word	0x08007970
 8007450:	08007970 	.word	0x08007970
 8007454:	08007970 	.word	0x08007970
 8007458:	08007974 	.word	0x08007974

0800745c <_init>:
 800745c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745e:	bf00      	nop
 8007460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007462:	bc08      	pop	{r3}
 8007464:	469e      	mov	lr, r3
 8007466:	4770      	bx	lr

08007468 <_fini>:
 8007468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746a:	bf00      	nop
 800746c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800746e:	bc08      	pop	{r3}
 8007470:	469e      	mov	lr, r3
 8007472:	4770      	bx	lr
