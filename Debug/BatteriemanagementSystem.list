
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000897c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007dc  08008b74  08008b74  00018b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009350  08009350  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08009350  08009350  00019350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009358  08009358  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009358  08009358  00019358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800935c  0800935c  0001935c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  2000000c  0800936c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  0800936c  00020324  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b95  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ca8  00000000  00000000  00039bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  0003d878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001298  00000000  00000000  0003ecd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cf6f  00000000  00000000  0003ff70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ce3e  00000000  00000000  0006cedf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109b6c  00000000  00000000  00089d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00193889  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005298  00000000  00000000  001938dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08008b5c 	.word	0x08008b5c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08008b5c 	.word	0x08008b5c

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <initAD8403>:
//----------------------------------------------------------------------

// Initialisiere AD8403
//----------------------------------------------------------------------
void initAD8403(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	// Setze AD8403 Shutdown Pin
	AD8403_SHDN_ENABLE();
 8000550:	2201      	movs	r2, #1
 8000552:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000556:	480a      	ldr	r0, [pc, #40]	; (8000580 <initAD8403+0x34>)
 8000558:	f004 f8bc 	bl	80046d4 <HAL_GPIO_WritePin>

	// Verzoegerung fuer einen Reset des AD8403
	HAL_Delay(20);
 800055c:	2014      	movs	r0, #20
 800055e:	f002 ffb5 	bl	80034cc <HAL_Delay>

	// Deaktiviere Chip Select
	AD8403_CS_DISABLE();
 8000562:	2201      	movs	r2, #1
 8000564:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000568:	4805      	ldr	r0, [pc, #20]	; (8000580 <initAD8403+0x34>)
 800056a:	f004 f8b3 	bl	80046d4 <HAL_GPIO_WritePin>

	// Setze AD8403 RS Pin
	AD8403_RS_ENABLE();
 800056e:	2201      	movs	r2, #1
 8000570:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000574:	4802      	ldr	r0, [pc, #8]	; (8000580 <initAD8403+0x34>)
 8000576:	f004 f8ad 	bl	80046d4 <HAL_GPIO_WritePin>
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40021800 	.word	0x40021800

08000584 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
	// Sende String mit Laenge "Size", "Size" muss bekannt sein
	HAL_UART_Transmit(&huart2, (uint8_t*) str, size, 1000);
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	b29a      	uxth	r2, r3
 8000592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000596:	6879      	ldr	r1, [r7, #4]
 8000598:	4803      	ldr	r0, [pc, #12]	; (80005a8 <uartTransmit+0x24>)
 800059a:	f007 fdc7 	bl	800812c <HAL_UART_Transmit>
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	2000029c 	.word	0x2000029c

080005ac <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	char str[11];

	// Zahl umrechnen
	utoa(number, str, base);												// Zahl umrechnen anhand der Basis "base"
 80005b6:	683a      	ldr	r2, [r7, #0]
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	4619      	mov	r1, r3
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	f008 faca 	bl	8008b58 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 1000);			// Sende Zahlen
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff fe35 	bl	8000238 <strlen>
 80005ce:	4603      	mov	r3, r0
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	f107 010c 	add.w	r1, r7, #12
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	4803      	ldr	r0, [pc, #12]	; (80005e8 <uartTransmitNumber+0x3c>)
 80005dc:	f007 fda6 	bl	800812c <HAL_UART_Transmit>
}
 80005e0:	bf00      	nop
 80005e2:	3718      	adds	r7, #24
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	2000029c 	.word	0x2000029c

080005ec <ltc1380_write>:
//----------------------------------------------------------------------

// Kanal auswaehlen
//----------------------------------------------------------------------
void ltc1380_write(uint8_t Address, uint8_t Channel)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	460a      	mov	r2, r1
 80005f6:	71fb      	strb	r3, [r7, #7]
 80005f8:	4613      	mov	r3, r2
 80005fa:	71bb      	strb	r3, [r7, #6]
	ITM_SendNumber(Channel);
	ITM_SendChar('\n');
#endif

	// Definiere Array fuer Channel auswaehlen
	uint8_t off[6] = {0x69, 0x08, 0x00, 0x89, 0x7F, 0xF9};					// Daten-Bytes fuer LTC6811 mit Daten fuer LTC1380
 80005fc:	4a14      	ldr	r2, [pc, #80]	; (8000650 <ltc1380_write+0x64>)
 80005fe:	f107 0308 	add.w	r3, r7, #8
 8000602:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000606:	6018      	str	r0, [r3, #0]
 8000608:	3304      	adds	r3, #4
 800060a:	8019      	strh	r1, [r3, #0]
	
	// Addresse und Channel waehlen
	off[1] |= ((Address & 0x0F) << 4);										// Address in Array uebertragen
 800060c:	7a7b      	ldrb	r3, [r7, #9]
 800060e:	b25a      	sxtb	r2, r3
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	011b      	lsls	r3, r3, #4
 8000614:	b25b      	sxtb	r3, r3
 8000616:	4313      	orrs	r3, r2
 8000618:	b25b      	sxtb	r3, r3
 800061a:	b2db      	uxtb	r3, r3
 800061c:	727b      	strb	r3, [r7, #9]
	off[3] |= ((Channel & 0x0F) << 4);										// Channel in Array uebertragen
 800061e:	7afb      	ldrb	r3, [r7, #11]
 8000620:	b25a      	sxtb	r2, r3
 8000622:	79bb      	ldrb	r3, [r7, #6]
 8000624:	011b      	lsls	r3, r3, #4
 8000626:	b25b      	sxtb	r3, r3
 8000628:	4313      	orrs	r3, r2
 800062a:	b25b      	sxtb	r3, r3
 800062c:	b2db      	uxtb	r3, r3
 800062e:	72fb      	strb	r3, [r7, #11]
	
	// LTC6811 beschreiben und ueber I2C uebertragen
	ltc6811_write(WRCOMM, &off[0]);												// Daten in LTC6811 schreiben
 8000630:	f107 0308 	add.w	r3, r7, #8
 8000634:	4619      	mov	r1, r3
 8000636:	f240 7021 	movw	r0, #1825	; 0x721
 800063a:	f000 f8a9 	bl	8000790 <ltc6811_write>
	ltc6811(STCOMM);														// Daten von LTC6811 an LTC1380 senden
 800063e:	f240 7023 	movw	r0, #1827	; 0x723
 8000642:	f000 f851 	bl	80006e8 <ltc6811>
		ITM_SendChar(' ');
		ITM_SendNumber(off[i]);
	}
	ITM_SendChar('\n');
#endif
}
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	08008b74 	.word	0x08008b74

08000654 <getDifference>:
//----------------------------------------------------------------------

// Differenz Berechnen, Betrag
//----------------------------------------------------------------------
static uint16_t getDifference(uint16_t a, uint16_t b)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	460a      	mov	r2, r1
 800065e:	80fb      	strh	r3, [r7, #6]
 8000660:	4613      	mov	r3, r2
 8000662:	80bb      	strh	r3, [r7, #4]
	// A ist groesser B
	if (a > b)
 8000664:	88fa      	ldrh	r2, [r7, #6]
 8000666:	88bb      	ldrh	r3, [r7, #4]
 8000668:	429a      	cmp	r2, r3
 800066a:	d904      	bls.n	8000676 <getDifference+0x22>
	{
		// B von A abziehen
		return (a - b);
 800066c:	88fa      	ldrh	r2, [r7, #6]
 800066e:	88bb      	ldrh	r3, [r7, #4]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	b29b      	uxth	r3, r3
 8000674:	e009      	b.n	800068a <getDifference+0x36>
	}
	// B ist groesser A
	else if (a < b)
 8000676:	88fa      	ldrh	r2, [r7, #6]
 8000678:	88bb      	ldrh	r3, [r7, #4]
 800067a:	429a      	cmp	r2, r3
 800067c:	d204      	bcs.n	8000688 <getDifference+0x34>
	{
		// A von B abziehen
		return (b - a);
 800067e:	88ba      	ldrh	r2, [r7, #4]
 8000680:	88fb      	ldrh	r3, [r7, #6]
 8000682:	1ad3      	subs	r3, r2, r3
 8000684:	b29b      	uxth	r3, r3
 8000686:	e000      	b.n	800068a <getDifference+0x36>
	}
	// A ist gleich B
	else
	{
		// Differenz ist 0
		return 0;
 8000688:	2300      	movs	r3, #0
	}
}
 800068a:	4618      	mov	r0, r3
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
	...

08000698 <wakeup_ltc6811>:
//----------------------------------------------------------------------

// Wakeup LTC6811 idle
//----------------------------------------------------------------------
void wakeup_ltc6811(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
	// Debug Nachricht
#ifdef DEBUG_ISOSPI
	ITM_SendString("Chip wird geweckt.\n");
#endif

	for(uint8_t i = 0; i < LTC6811_DEVICES; i++)							// Wiederholen fuer Anzahl Slaves
 800069e:	2300      	movs	r3, #0
 80006a0:	71fb      	strb	r3, [r7, #7]
 80006a2:	e014      	b.n	80006ce <wakeup_ltc6811+0x36>
	{
		// ISOCS einschalten
		ISOCS_ENABLE();														// Chip-Select einschalten
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006aa:	480d      	ldr	r0, [pc, #52]	; (80006e0 <wakeup_ltc6811+0x48>)
 80006ac:	f004 f812 	bl	80046d4 <HAL_GPIO_WritePin>

		// Dummy Paket senden
		HAL_SPI_Transmit(&hspi4, (uint8_t*) 0xAA, 1, 100);					// Chip wecken, isoSPI braucht Zeit bis ready
 80006b0:	2364      	movs	r3, #100	; 0x64
 80006b2:	2201      	movs	r2, #1
 80006b4:	21aa      	movs	r1, #170	; 0xaa
 80006b6:	480b      	ldr	r0, [pc, #44]	; (80006e4 <wakeup_ltc6811+0x4c>)
 80006b8:	f005 f9dd 	bl	8005a76 <HAL_SPI_Transmit>

		//HAL_Delay(2);														// isoSPI braucht Zeit bis ready

		// ISOCS ausschalten
		ISOCS_DISABLE();													// Chip-Select ausschalten
 80006bc:	2201      	movs	r2, #1
 80006be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c2:	4807      	ldr	r0, [pc, #28]	; (80006e0 <wakeup_ltc6811+0x48>)
 80006c4:	f004 f806 	bl	80046d4 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < LTC6811_DEVICES; i++)							// Wiederholen fuer Anzahl Slaves
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	3301      	adds	r3, #1
 80006cc:	71fb      	strb	r3, [r7, #7]
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d0e7      	beq.n	80006a4 <wakeup_ltc6811+0xc>
	}
}
 80006d4:	bf00      	nop
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40021000 	.word	0x40021000
 80006e4:	20000154 	.word	0x20000154

080006e8 <ltc6811>:
//----------------------------------------------------------------------

// Broadcast Command
//----------------------------------------------------------------------
void ltc6811(uint16_t command)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	80fb      	strh	r3, [r7, #6]
#endif

	// PEC berechnen, Anhand Command
	uint16_t pec;															// pec = Zwischenspeicher 16-Bit Command
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	pec = peccommand(command);
 80006f2:	88fb      	ldrh	r3, [r7, #6]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 f953 	bl	80009a0 <peccommand>
 80006fa:	4603      	mov	r3, r0
 80006fc:	81bb      	strh	r3, [r7, #12]
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 80006fe:	f7ff ffcb 	bl	8000698 <wakeup_ltc6811>

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 8000702:	88fb      	ldrh	r3, [r7, #6]
 8000704:	0a1b      	lsrs	r3, r3, #8
 8000706:	b29b      	uxth	r3, r3
 8000708:	b2db      	uxtb	r3, r3
 800070a:	f003 0307 	and.w	r3, r3, #7
 800070e:	b2db      	uxtb	r3, r3
 8000710:	723b      	strb	r3, [r7, #8]
	cmd[1] = (command & 0xFF);
 8000712:	88fb      	ldrh	r3, [r7, #6]
 8000714:	b2db      	uxtb	r3, r3
 8000716:	727b      	strb	r3, [r7, #9]
	cmd[2] = ((pec >> 8) & 0xFF);
 8000718:	89bb      	ldrh	r3, [r7, #12]
 800071a:	0a1b      	lsrs	r3, r3, #8
 800071c:	b29b      	uxth	r3, r3
 800071e:	b2db      	uxtb	r3, r3
 8000720:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec & 0xFE);
 8000722:	89bb      	ldrh	r3, [r7, #12]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	f023 0301 	bic.w	r3, r3, #1
 800072a:	b2db      	uxtb	r3, r3
 800072c:	72fb      	strb	r3, [r7, #11]

	// ISOCS einschalten
	ISOCS_ENABLE();
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000734:	4814      	ldr	r0, [pc, #80]	; (8000788 <ltc6811+0xa0>)
 8000736:	f003 ffcd 	bl	80046d4 <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 800073a:	f107 0108 	add.w	r1, r7, #8
 800073e:	2364      	movs	r3, #100	; 0x64
 8000740:	2204      	movs	r2, #4
 8000742:	4812      	ldr	r0, [pc, #72]	; (800078c <ltc6811+0xa4>)
 8000744:	f005 f997 	bl	8005a76 <HAL_SPI_Transmit>

	// Wenn Command = STCOMM ist dann muessen noch 72 Takte uebertragen werden
	if (command == STCOMM)
 8000748:	88fb      	ldrh	r3, [r7, #6]
 800074a:	f240 7223 	movw	r2, #1827	; 0x723
 800074e:	4293      	cmp	r3, r2
 8000750:	d10f      	bne.n	8000772 <ltc6811+0x8a>
	{
		// 72 = 9 * 8 Bit Daten
		for (uint8_t i = 0; i < 9; i++)
 8000752:	2300      	movs	r3, #0
 8000754:	73fb      	strb	r3, [r7, #15]
 8000756:	e009      	b.n	800076c <ltc6811+0x84>
		{
			// Dummy-Byte uebertragen
			HAL_SPI_Transmit(&hspi4, (uint8_t*) 0xAA, 1, HAL_MAX_DELAY);
 8000758:	f04f 33ff 	mov.w	r3, #4294967295
 800075c:	2201      	movs	r2, #1
 800075e:	21aa      	movs	r1, #170	; 0xaa
 8000760:	480a      	ldr	r0, [pc, #40]	; (800078c <ltc6811+0xa4>)
 8000762:	f005 f988 	bl	8005a76 <HAL_SPI_Transmit>
		for (uint8_t i = 0; i < 9; i++)
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	3301      	adds	r3, #1
 800076a:	73fb      	strb	r3, [r7, #15]
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	2b08      	cmp	r3, #8
 8000770:	d9f2      	bls.n	8000758 <ltc6811+0x70>
		}
	}
	
	// ISOCS ausschalten
	ISOCS_DISABLE();
 8000772:	2201      	movs	r2, #1
 8000774:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000778:	4803      	ldr	r0, [pc, #12]	; (8000788 <ltc6811+0xa0>)
 800077a:	f003 ffab 	bl	80046d4 <HAL_GPIO_WritePin>
		ITM_SendChar(' ');
		ITM_SendNumber(cmd[i]);
	}
	ITM_SendChar('\n');
#endif
}
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40021000 	.word	0x40021000
 800078c:	20000154 	.word	0x20000154

08000790 <ltc6811_write>:


// Broadcast Write Command
//----------------------------------------------------------------------
void ltc6811_write(uint16_t command, uint8_t* data)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	6039      	str	r1, [r7, #0]
 800079a:	80fb      	strh	r3, [r7, #6]

	// PEC berechnen, fuer Data Funktion nur bei einem Device gegeben
	uint16_t pec_c, pec_d;													// pec_c = Zwischenspeicher 16-Bit Command, pec_d = Zwischenspeicher 16-Bit Data
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	uint8_t tmp_data[8*LTC6811_DEVICES];									// Zwischenspeicher Daten + Pec CRC
	pec_c = peccommand(command);											// Pec Command berechnen
 800079c:	88fb      	ldrh	r3, [r7, #6]
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f8fe 	bl	80009a0 <peccommand>
 80007a4:	4603      	mov	r3, r0
 80007a6:	83bb      	strh	r3, [r7, #28]

	// Command in cmd abspeichern
	cmd[0] = ((command  >> 8) & 0x07);
 80007a8:	88fb      	ldrh	r3, [r7, #6]
 80007aa:	0a1b      	lsrs	r3, r3, #8
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	f003 0307 	and.w	r3, r3, #7
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	753b      	strb	r3, [r7, #20]
	cmd[1] = (command & 0xFF);
 80007b8:	88fb      	ldrh	r3, [r7, #6]
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	757b      	strb	r3, [r7, #21]
	cmd[2] = ((pec_c >> 8) & 0xFF);
 80007be:	8bbb      	ldrh	r3, [r7, #28]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	75bb      	strb	r3, [r7, #22]
	cmd[3] = (pec_c & 0xFE);
 80007c8:	8bbb      	ldrh	r3, [r7, #28]
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	f023 0301 	bic.w	r3, r3, #1
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	75fb      	strb	r3, [r7, #23]

	// Daten in tmp_data abspeichern zum Senden
	for (uint8_t j = 0; j < LTC6811_DEVICES; j++)
 80007d4:	2300      	movs	r3, #0
 80007d6:	77fb      	strb	r3, [r7, #31]
 80007d8:	e035      	b.n	8000846 <ltc6811_write+0xb6>
	{
		// Schleife um Daten fuer einen IC abzuspeichern
		for (uint8_t i = 0; i < 6; i++)
 80007da:	2300      	movs	r3, #0
 80007dc:	77bb      	strb	r3, [r7, #30]
 80007de:	e016      	b.n	800080e <ltc6811_write+0x7e>
		{
			tmp_data[j*8+i] = data[j*6+i];
 80007e0:	7ffa      	ldrb	r2, [r7, #31]
 80007e2:	4613      	mov	r3, r2
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	4413      	add	r3, r2
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	461a      	mov	r2, r3
 80007ec:	7fbb      	ldrb	r3, [r7, #30]
 80007ee:	4413      	add	r3, r2
 80007f0:	461a      	mov	r2, r3
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	441a      	add	r2, r3
 80007f6:	7ffb      	ldrb	r3, [r7, #31]
 80007f8:	00d9      	lsls	r1, r3, #3
 80007fa:	7fbb      	ldrb	r3, [r7, #30]
 80007fc:	440b      	add	r3, r1
 80007fe:	7812      	ldrb	r2, [r2, #0]
 8000800:	3320      	adds	r3, #32
 8000802:	443b      	add	r3, r7
 8000804:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (uint8_t i = 0; i < 6; i++)
 8000808:	7fbb      	ldrb	r3, [r7, #30]
 800080a:	3301      	adds	r3, #1
 800080c:	77bb      	strb	r3, [r7, #30]
 800080e:	7fbb      	ldrb	r3, [r7, #30]
 8000810:	2b05      	cmp	r3, #5
 8000812:	d9e5      	bls.n	80007e0 <ltc6811_write+0x50>
		}

		// Pec berechnen pro IC einmal
		pec_d = peclookup(6, &tmp_data[j*8]);								// Pec Daten berechnen
 8000814:	7ffb      	ldrb	r3, [r7, #31]
 8000816:	00db      	lsls	r3, r3, #3
 8000818:	f107 020c 	add.w	r2, r7, #12
 800081c:	4413      	add	r3, r2
 800081e:	4619      	mov	r1, r3
 8000820:	2006      	movs	r0, #6
 8000822:	f000 f8d9 	bl	80009d8 <peclookup>
 8000826:	4603      	mov	r3, r0
 8000828:	837b      	strh	r3, [r7, #26]

		// Pec abspeichern fuer einen IC
		tmp_data[6] = ((pec_d >> 8) & 0xFF);
 800082a:	8b7b      	ldrh	r3, [r7, #26]
 800082c:	0a1b      	lsrs	r3, r3, #8
 800082e:	b29b      	uxth	r3, r3
 8000830:	b2db      	uxtb	r3, r3
 8000832:	74bb      	strb	r3, [r7, #18]
		tmp_data[7] = (pec_d & 0xFE);
 8000834:	8b7b      	ldrh	r3, [r7, #26]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	f023 0301 	bic.w	r3, r3, #1
 800083c:	b2db      	uxtb	r3, r3
 800083e:	74fb      	strb	r3, [r7, #19]
	for (uint8_t j = 0; j < LTC6811_DEVICES; j++)
 8000840:	7ffb      	ldrb	r3, [r7, #31]
 8000842:	3301      	adds	r3, #1
 8000844:	77fb      	strb	r3, [r7, #31]
 8000846:	7ffb      	ldrb	r3, [r7, #31]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d0c6      	beq.n	80007da <ltc6811_write+0x4a>
	}
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 800084c:	f7ff ff24 	bl	8000698 <wakeup_ltc6811>

	// ISOCS einschalten
	ISOCS_ENABLE();
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000856:	480d      	ldr	r0, [pc, #52]	; (800088c <ltc6811_write+0xfc>)
 8000858:	f003 ff3c 	bl	80046d4 <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 800085c:	f107 0114 	add.w	r1, r7, #20
 8000860:	2364      	movs	r3, #100	; 0x64
 8000862:	2204      	movs	r2, #4
 8000864:	480a      	ldr	r0, [pc, #40]	; (8000890 <ltc6811_write+0x100>)
 8000866:	f005 f906 	bl	8005a76 <HAL_SPI_Transmit>
	
	// Data senden
//	for (uint8_t i = 0; i < 6; i++)
//	{
		// Sende Daten fuer einen IC
		HAL_SPI_Transmit(&hspi4, tmp_data, 8, 100);
 800086a:	f107 010c 	add.w	r1, r7, #12
 800086e:	2364      	movs	r3, #100	; 0x64
 8000870:	2208      	movs	r2, #8
 8000872:	4807      	ldr	r0, [pc, #28]	; (8000890 <ltc6811_write+0x100>)
 8000874:	f005 f8ff 	bl	8005a76 <HAL_SPI_Transmit>
//	}
	
	// ISOCS ausschalten
	ISOCS_DISABLE();
 8000878:	2201      	movs	r2, #1
 800087a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800087e:	4803      	ldr	r0, [pc, #12]	; (800088c <ltc6811_write+0xfc>)
 8000880:	f003 ff28 	bl	80046d4 <HAL_GPIO_WritePin>
		ITM_SendChar(' ');
		ITM_SendNumber(data[i]);
	}
	ITM_SendChar('\n');
#endif
}
 8000884:	bf00      	nop
 8000886:	3720      	adds	r7, #32
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40021000 	.word	0x40021000
 8000890:	20000154 	.word	0x20000154

08000894 <ltc6811_read>:
//----------------------------------------------------------------------

// Broadcast Read Command
//----------------------------------------------------------------------
uint8_t ltc6811_read(uint16_t command, uint8_t* data)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	6039      	str	r1, [r7, #0]
 800089e:	80fb      	strh	r3, [r7, #6]

	// PEC berechnen, Anhand Command
	uint16_t pec;															// pec = Zwischenspeicher 16-Bit Command
	uint16_t tmp;															// Zwischenspeicher fuer Pruefung CRC
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	pec = peccommand(command);
 80008a0:	88fb      	ldrh	r3, [r7, #6]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f87c 	bl	80009a0 <peccommand>
 80008a8:	4603      	mov	r3, r0
 80008aa:	82bb      	strh	r3, [r7, #20]
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 80008ac:	f7ff fef4 	bl	8000698 <wakeup_ltc6811>

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 80008b0:	88fb      	ldrh	r3, [r7, #6]
 80008b2:	0a1b      	lsrs	r3, r3, #8
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	f003 0307 	and.w	r3, r3, #7
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	733b      	strb	r3, [r7, #12]
	cmd[1] = (command & 0xFF);
 80008c0:	88fb      	ldrh	r3, [r7, #6]
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	737b      	strb	r3, [r7, #13]
	cmd[2] = ((pec >> 8) & 0xFF);
 80008c6:	8abb      	ldrh	r3, [r7, #20]
 80008c8:	0a1b      	lsrs	r3, r3, #8
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	73bb      	strb	r3, [r7, #14]
	cmd[3] = (pec & 0xFE);
 80008d0:	8abb      	ldrh	r3, [r7, #20]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	f023 0301 	bic.w	r3, r3, #1
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	73fb      	strb	r3, [r7, #15]

	// ISOCS einschalten
	ISOCS_ENABLE();
 80008dc:	2200      	movs	r2, #0
 80008de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008e2:	482d      	ldr	r0, [pc, #180]	; (8000998 <ltc6811_read+0x104>)
 80008e4:	f003 fef6 	bl	80046d4 <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 80008e8:	f107 010c 	add.w	r1, r7, #12
 80008ec:	2364      	movs	r3, #100	; 0x64
 80008ee:	2204      	movs	r2, #4
 80008f0:	482a      	ldr	r0, [pc, #168]	; (800099c <ltc6811_read+0x108>)
 80008f2:	f005 f8c0 	bl	8005a76 <HAL_SPI_Transmit>
	
	// Data empfangen
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 80008f6:	2300      	movs	r3, #0
 80008f8:	75fb      	strb	r3, [r7, #23]
 80008fa:	e00c      	b.n	8000916 <ltc6811_read+0x82>
	{
		// Dummy Byte senden
		HAL_SPI_Receive(&hspi4, &data[i*8], 8, 100);
 80008fc:	7dfb      	ldrb	r3, [r7, #23]
 80008fe:	00db      	lsls	r3, r3, #3
 8000900:	461a      	mov	r2, r3
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	1899      	adds	r1, r3, r2
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	2208      	movs	r2, #8
 800090a:	4824      	ldr	r0, [pc, #144]	; (800099c <ltc6811_read+0x108>)
 800090c:	f005 fa21 	bl	8005d52 <HAL_SPI_Receive>
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 8000910:	7dfb      	ldrb	r3, [r7, #23]
 8000912:	3301      	adds	r3, #1
 8000914:	75fb      	strb	r3, [r7, #23]
 8000916:	7dfb      	ldrb	r3, [r7, #23]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d0ef      	beq.n	80008fc <ltc6811_read+0x68>
	}

	// Pec zuruecksetzen
	pec = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	82bb      	strh	r3, [r7, #20]

	// Pec pruefen
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 8000920:	2300      	movs	r3, #0
 8000922:	75bb      	strb	r3, [r7, #22]
 8000924:	e02a      	b.n	800097c <ltc6811_read+0xe8>
	{
		// Variante 1, Pec berechnen und pruefen, ob richtiger Pec mitgesendet wurde
		tmp = ((data[i + 6] << 8) + data[i + 7]);
 8000926:	7dbb      	ldrb	r3, [r7, #22]
 8000928:	3306      	adds	r3, #6
 800092a:	683a      	ldr	r2, [r7, #0]
 800092c:	4413      	add	r3, r2
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b29b      	uxth	r3, r3
 8000932:	021b      	lsls	r3, r3, #8
 8000934:	b29a      	uxth	r2, r3
 8000936:	7dbb      	ldrb	r3, [r7, #22]
 8000938:	3307      	adds	r3, #7
 800093a:	6839      	ldr	r1, [r7, #0]
 800093c:	440b      	add	r3, r1
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	b29b      	uxth	r3, r3
 8000942:	4413      	add	r3, r2
 8000944:	827b      	strh	r3, [r7, #18]
		pec = peclookup(6, &data[i*8]);
 8000946:	7dbb      	ldrb	r3, [r7, #22]
 8000948:	00db      	lsls	r3, r3, #3
 800094a:	461a      	mov	r2, r3
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	4413      	add	r3, r2
 8000950:	4619      	mov	r1, r3
 8000952:	2006      	movs	r0, #6
 8000954:	f000 f840 	bl	80009d8 <peclookup>
 8000958:	4603      	mov	r3, r0
 800095a:	82bb      	strh	r3, [r7, #20]
			uartTransmit("\n", 1);
		}
#endif

		// Pec zuruecksetzen
		pec = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	82bb      	strh	r3, [r7, #20]

		// Variante 2, Daten inklusive Pec mit durch Peccheck pruefen, ob Ergebnis gleich 0 ist
		pec = peccheck(8, &data[i*8]);
 8000960:	7dbb      	ldrb	r3, [r7, #22]
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	461a      	mov	r2, r3
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	4413      	add	r3, r2
 800096a:	4619      	mov	r1, r3
 800096c:	2008      	movs	r0, #8
 800096e:	f000 f867 	bl	8000a40 <peccheck>
 8000972:	4603      	mov	r3, r0
 8000974:	82bb      	strh	r3, [r7, #20]
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 8000976:	7dbb      	ldrb	r3, [r7, #22]
 8000978:	3301      	adds	r3, #1
 800097a:	75bb      	strb	r3, [r7, #22]
 800097c:	7dbb      	ldrb	r3, [r7, #22]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d0d1      	beq.n	8000926 <ltc6811_read+0x92>
#endif
	}


	// ISOCS ausschalten
	ISOCS_DISABLE();
 8000982:	2201      	movs	r2, #1
 8000984:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000988:	4803      	ldr	r0, [pc, #12]	; (8000998 <ltc6811_read+0x104>)
 800098a:	f003 fea3 	bl	80046d4 <HAL_GPIO_WritePin>
		ITM_SendNumber(data[i]);
	}
	ITM_SendChar('\n');
#endif

	return 0;
 800098e:	2300      	movs	r3, #0
}
 8000990:	4618      	mov	r0, r3
 8000992:	3718      	adds	r7, #24
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40021000 	.word	0x40021000
 800099c:	20000154 	.word	0x20000154

080009a0 <peccommand>:
//----------------------------------------------------------------------

// Pec Command bauen
//----------------------------------------------------------------------
uint16_t peccommand(uint16_t command)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	80fb      	strh	r3, [r7, #6]
	// Variable definieren
	uint8_t pec[2];															// pec = Zwischenspeicher 16-Bit Command in 2x 8-Bit Bytes
	
	// 16 Bit Command in 8 Bit Array uebertragen
	pec[1] = (command & 0xFF);												// pec[1] = lower Command Byte
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	737b      	strb	r3, [r7, #13]
	pec[0] = ((command >> 8) & 0x07);										// pec[0] = upper Command Byte
 80009b0:	88fb      	ldrh	r3, [r7, #6]
 80009b2:	0a1b      	lsrs	r3, r3, #8
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	f003 0307 	and.w	r3, r3, #7
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	733b      	strb	r3, [r7, #12]
	
	// Pec zurueckgeben
	return peclookup(2, pec);
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	4619      	mov	r1, r3
 80009c6:	2002      	movs	r0, #2
 80009c8:	f000 f806 	bl	80009d8 <peclookup>
 80009cc:	4603      	mov	r3, r0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <peclookup>:
//----------------------------------------------------------------------

// Pec kalculieren (Datasheet ltc6811 Page 76, Datasheet ltc6811 Page 72)
//----------------------------------------------------------------------
uint16_t peclookup(uint8_t len,	uint8_t *data)								// len = Anzahl Byte, data = Daten fuer die Pec ausgewaehlt wird
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	6039      	str	r1, [r7, #0]
 80009e2:	71fb      	strb	r3, [r7, #7]
	// Variable definieren
	uint16_t remainder, addr;												// remainder = Zwischenspeicher Pec, addr = Zwischenspeicher Addresse
	remainder = 16;															// Initialisiere reminder mit 16 (0b0000000000010000)
 80009e4:	2310      	movs	r3, #16
 80009e6:	81fb      	strh	r3, [r7, #14]
	
	// Schleife fuer die Pec-Calculation
	for(uint8_t i = 0; i < len; i++)
 80009e8:	2300      	movs	r3, #0
 80009ea:	737b      	strb	r3, [r7, #13]
 80009ec:	e019      	b.n	8000a22 <peclookup+0x4a>
	{
		// Kalkuliere Pec Anhand der Lookuptabelle
		addr = ((remainder >> 7) ^ data[i]) & 0xFF;							// Tabellenaddresse berechnen
 80009ee:	89fb      	ldrh	r3, [r7, #14]
 80009f0:	09db      	lsrs	r3, r3, #7
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	7b7b      	ldrb	r3, [r7, #13]
 80009f6:	6839      	ldr	r1, [r7, #0]
 80009f8:	440b      	add	r3, r1
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	4053      	eors	r3, r2
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ pec15Table[addr];					// Pec berechnen
 8000a06:	89fb      	ldrh	r3, [r7, #14]
 8000a08:	021b      	lsls	r3, r3, #8
 8000a0a:	b21a      	sxth	r2, r3
 8000a0c:	897b      	ldrh	r3, [r7, #10]
 8000a0e:	490b      	ldr	r1, [pc, #44]	; (8000a3c <peclookup+0x64>)
 8000a10:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000a14:	b21b      	sxth	r3, r3
 8000a16:	4053      	eors	r3, r2
 8000a18:	b21b      	sxth	r3, r3
 8000a1a:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i < len; i++)
 8000a1c:	7b7b      	ldrb	r3, [r7, #13]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	737b      	strb	r3, [r7, #13]
 8000a22:	7b7a      	ldrb	r2, [r7, #13]
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d3e1      	bcc.n	80009ee <peclookup+0x16>
//		uartTransmitNumber(data[i], 16);
//		uartTransmit("\n", 1);
	}
	
	// Pec zurueckgeben
	return (remainder << 1);												// Der Pec hat eine 0 als LSB, remainder muss um 1 nach links geshiftet werden
 8000a2a:	89fb      	ldrh	r3, [r7, #14]
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	b29b      	uxth	r3, r3
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	08009110 	.word	0x08009110

08000a40 <peccheck>:
//----------------------------------------------------------------------*/

// Validiere Pec von Daten
//----------------------------------------------------------------------
uint8_t peccheck(uint8_t len, uint8_t *data)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	6039      	str	r1, [r7, #0]
 8000a4a:	71fb      	strb	r3, [r7, #7]
	// Variable definieren
	uint16_t pec = peclookup(len, data);
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	6839      	ldr	r1, [r7, #0]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ffc1 	bl	80009d8 <peclookup>
 8000a56:	4603      	mov	r3, r0
 8000a58:	81fb      	strh	r3, [r7, #14]

	// Wenn Ergebnis 0, ist Pec OK
	if (pec == 0)
 8000a5a:	89fb      	ldrh	r3, [r7, #14]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d101      	bne.n	8000a64 <peccheck+0x24>
	{
		return 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	e000      	b.n	8000a66 <peccheck+0x26>
	}
	// Wenn Ergebnis 1, ist Pec nicht OK
	else
	{
		return 1;
 8000a64:	2301      	movs	r3, #1
	}
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <ltc6811_check>:
//----------------------------------------------------------------------

// LTC6811 Status auslesen und auswerten
//----------------------------------------------------------------------
uint8_t ltc6811_check(void)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b092      	sub	sp, #72	; 0x48
 8000a72:	af00      	add	r7, sp, #0
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Check LTC6811.\n");
#endif

	// Variablen definieren
	uint8_t tmp_data[64] = {0}, error = 0;									// Speicher Registerwerte, Fehlerspeicher
 8000a74:	2300      	movs	r3, #0
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	223c      	movs	r2, #60	; 0x3c
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f008 f81f 	bl	8008ac4 <memset>
 8000a86:	2300      	movs	r3, #0
 8000a88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000a8c:	f7ff fe04 	bl	8000698 <wakeup_ltc6811>

	// Alle Register zuruecksetzen
	ltc6811(CLRCELL);														// Register Zellspannung auf default setzen
 8000a90:	f240 7011 	movw	r0, #1809	; 0x711
 8000a94:	f7ff fe28 	bl	80006e8 <ltc6811>
	ltc6811(CLRAUX);														// Register GPIO-Spannung auf default setzen
 8000a98:	f240 7012 	movw	r0, #1810	; 0x712
 8000a9c:	f7ff fe24 	bl	80006e8 <ltc6811>
	ltc6811(CLRSTAT);														// Register Interne Messungen auf default setzen
 8000aa0:	f240 7013 	movw	r0, #1811	; 0x713
 8000aa4:	f7ff fe20 	bl	80006e8 <ltc6811>

	// Lese Register Status B aus
	ltc6811_read(RDSTATB, &tmp_data[0]);
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	4619      	mov	r1, r3
 8000aac:	2012      	movs	r0, #18
 8000aae:	f7ff fef1 	bl	8000894 <ltc6811_read>
		ITM_SendChar('\n');
#endif
	}

	// Selbsttest 1 Digitale Filter
	if (ltc6811_test(ST1 | MD73) == 1)
 8000ab2:	f44f 7090 	mov.w	r0, #288	; 0x120
 8000ab6:	f000 f83f 	bl	8000b38 <ltc6811_test>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d105      	bne.n	8000acc <ltc6811_check+0x5e>
	{
		error |= (1 << 1);													// Selbsttest 1 nicht bestanden
 8000ac0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#ifdef DEBUG_LTC6811
		ITM_SendString("Selbsttest 1 Fehler");
		ITM_SendChar('\n');
#endif
	}
	HAL_Delay(300);
 8000acc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ad0:	f002 fcfc 	bl	80034cc <HAL_Delay>

	// Selbsttest 2 Digitale Filter
	if (ltc6811_test(ST2 | MD73) == 1)
 8000ad4:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8000ad8:	f000 f82e 	bl	8000b38 <ltc6811_test>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d105      	bne.n	8000aee <ltc6811_check+0x80>
	{
		error |= (1 << 2);													// Selbsttest 2 nicht bestanden
 8000ae2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#ifdef DEBUG_LTC6811
		ITM_SendString("Selbsttest 2 Fehler");
		ITM_SendChar('\n');
#endif
	}
	HAL_Delay(300);
 8000aee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000af2:	f002 fceb 	bl	80034cc <HAL_Delay>

	// Selbsttest Multiplexer
	if (ltc6811_diagn() == 1)
 8000af6:	f000 fa09 	bl	8000f0c <ltc6811_diagn>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d105      	bne.n	8000b0c <ltc6811_check+0x9e>
	{
		error |= (1 << 3);													// Multiplexertest nicht bestanden
 8000b00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b04:	f043 0308 	orr.w	r3, r3, #8
 8000b08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#ifdef DEBUG_LTC6811
		ITM_SendString("Multiplexer Fehler");
		ITM_SendChar('\n');
#endif
	}
	HAL_Delay(300);
 8000b0c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b10:	f002 fcdc 	bl	80034cc <HAL_Delay>

	// Open Wire Check durchfuehren
	if (ltc6811_openwire() == 1)
 8000b14:	f000 fa1c 	bl	8000f50 <ltc6811_openwire>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d105      	bne.n	8000b2a <ltc6811_check+0xbc>
	{
		error |= (1 << 4);													// Open-Wire Test nicht bestanden
 8000b1e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b22:	f043 0310 	orr.w	r3, r3, #16
 8000b26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	ITM_SendNumber(error);
	ITM_SendChar('\n');
#endif

	// Fehlercode zurueckgeben
	return error;															// Fehler 0 = alles Ok, Fehler > 0 = Selbsttest fehlerhaft
 8000b2a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3748      	adds	r7, #72	; 0x48
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <ltc6811_test>:
//----------------------------------------------------------------------

// Selbsttest Digitale Filter (Datasheet ltc6811 Page 28)
//----------------------------------------------------------------------
uint8_t ltc6811_test(uint16_t command)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b094      	sub	sp, #80	; 0x50
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	80fb      	strh	r3, [r7, #6]
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Test LTC6811.\n");
#endif

	// Variablen definieren
	uint8_t tmp_data[64] = {0};												// Speicher Registerwerte
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	f107 030c 	add.w	r3, r7, #12
 8000b4a:	223c      	movs	r2, #60	; 0x3c
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f007 ffb8 	bl	8008ac4 <memset>
	uint16_t tmp = 0, test_pattern = 0;										// Zwischenspeicher, Kontrollvariable Selbsttest
 8000b54:	2300      	movs	r3, #0
 8000b56:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	// Commands fuer Status senden  Test 1
	ltc6811(CVST | command);												// Digitalfilter Check Zellspannungen
 8000b60:	88fb      	ldrh	r3, [r7, #6]
 8000b62:	f443 7301 	orr.w	r3, r3, #516	; 0x204
 8000b66:	f043 0303 	orr.w	r3, r3, #3
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fdbb 	bl	80006e8 <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 8000b72:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b76:	f002 fca9 	bl	80034cc <HAL_Delay>
	ltc6811(AUXST | command);												// Digitalfilter Check GPIO-Spannungen
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b80:	f043 0307 	orr.w	r3, r3, #7
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fdae 	bl	80006e8 <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 8000b8c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b90:	f002 fc9c 	bl	80034cc <HAL_Delay>
	ltc6811(STATST | command);												// Digitalfilter Check Interne Messungen
 8000b94:	88fb      	ldrh	r3, [r7, #6]
 8000b96:	f443 6381 	orr.w	r3, r3, #1032	; 0x408
 8000b9a:	f043 0307 	orr.w	r3, r3, #7
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fda1 	bl	80006e8 <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 8000ba6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000baa:	f002 fc8f 	bl	80034cc <HAL_Delay>

	// Register auslesen Test 1
	// Spannungsregister
	ltc6811_read(RDCVA, &tmp_data[0]);										// Lese Register CVA zurueck
 8000bae:	f107 0308 	add.w	r3, r7, #8
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	2004      	movs	r0, #4
 8000bb6:	f7ff fe6d 	bl	8000894 <ltc6811_read>
	ltc6811_read(RDCVB, &tmp_data[8]);										// Lese Register CVB zurueck
 8000bba:	f107 0308 	add.w	r3, r7, #8
 8000bbe:	3308      	adds	r3, #8
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	2006      	movs	r0, #6
 8000bc4:	f7ff fe66 	bl	8000894 <ltc6811_read>
	ltc6811_read(RDCVC, &tmp_data[16]);										// Lese Register CVC zurueck
 8000bc8:	f107 0308 	add.w	r3, r7, #8
 8000bcc:	3310      	adds	r3, #16
 8000bce:	4619      	mov	r1, r3
 8000bd0:	2008      	movs	r0, #8
 8000bd2:	f7ff fe5f 	bl	8000894 <ltc6811_read>
	ltc6811_read(RDCVD, &tmp_data[24]);										// Lese Register CVD zurueck
 8000bd6:	f107 0308 	add.w	r3, r7, #8
 8000bda:	3318      	adds	r3, #24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	200a      	movs	r0, #10
 8000be0:	f7ff fe58 	bl	8000894 <ltc6811_read>

	// GPIO-Register
	ltc6811_read(RDAUXA, &tmp_data[32]);									// Lese Register AUXA zurueck
 8000be4:	f107 0308 	add.w	r3, r7, #8
 8000be8:	3320      	adds	r3, #32
 8000bea:	4619      	mov	r1, r3
 8000bec:	200c      	movs	r0, #12
 8000bee:	f7ff fe51 	bl	8000894 <ltc6811_read>
	ltc6811_read(RDAUXB, &tmp_data[40]);									// Lese Register AUXB zurueck
 8000bf2:	f107 0308 	add.w	r3, r7, #8
 8000bf6:	3328      	adds	r3, #40	; 0x28
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	200e      	movs	r0, #14
 8000bfc:	f7ff fe4a 	bl	8000894 <ltc6811_read>

	// Statusregister
	ltc6811_read(RDSTATA, &tmp_data[48]);									// Lese Register STATA zurueck
 8000c00:	f107 0308 	add.w	r3, r7, #8
 8000c04:	3330      	adds	r3, #48	; 0x30
 8000c06:	4619      	mov	r1, r3
 8000c08:	2010      	movs	r0, #16
 8000c0a:	f7ff fe43 	bl	8000894 <ltc6811_read>
	ltc6811_read(RDSTATB, &tmp_data[56]);									// Lese Register STATB zurueck
 8000c0e:	f107 0308 	add.w	r3, r7, #8
 8000c12:	3338      	adds	r3, #56	; 0x38
 8000c14:	4619      	mov	r1, r3
 8000c16:	2012      	movs	r0, #18
 8000c18:	f7ff fe3c 	bl	8000894 <ltc6811_read>

	// Lookup fuer Selbstest digitaler Filter
	// Kontrollvariable heraussuchen
	if (command & MD2714)													// Wenn Sampling Frequenz = MD2714
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d032      	beq.n	8000c8c <ltc6811_test+0x154>
	{
		// Wenn ADCOPT gesetzt
		if (Ltc6811_Conf.ADCOPT == 1)
 8000c26:	4bb8      	ldr	r3, [pc, #736]	; (8000f08 <ltc6811_test+0x3d0>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d013      	beq.n	8000c5c <ltc6811_test+0x124>
		{
			// Wenn Selbsttest 1 gewaehlt
			if (command == ST1)
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	2b20      	cmp	r3, #32
 8000c38:	d104      	bne.n	8000c44 <ltc6811_test+0x10c>
			{
				test_pattern = 0x9553;										// Registerwert bei 14kHz
 8000c3a:	f249 5353 	movw	r3, #38227	; 0x9553
 8000c3e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c42:	e03a      	b.n	8000cba <ltc6811_test+0x182>
			}
			// Wenn Selbsttest 2 gewaehlt
			else if (command == ST2)
 8000c44:	88fb      	ldrh	r3, [r7, #6]
 8000c46:	2b40      	cmp	r3, #64	; 0x40
 8000c48:	d104      	bne.n	8000c54 <ltc6811_test+0x11c>
			{
				test_pattern = 0x6AAC;										// Registerwert bei 14kHz
 8000c4a:	f646 23ac 	movw	r3, #27308	; 0x6aac
 8000c4e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c52:	e032      	b.n	8000cba <ltc6811_test+0x182>
			}
			// Bei fehlerhaften Einstellungen
			else
			{
				test_pattern = 0;											// Registerwert = 0 damit Fehler ausloest
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c5a:	e02e      	b.n	8000cba <ltc6811_test+0x182>
			}
		}
		else																// Wenn ADCOPT nicht gesetzt
		{
			// Wenn Selbsttest 1 gewaehlt
			if (command & ST1)
 8000c5c:	88fb      	ldrh	r3, [r7, #6]
 8000c5e:	f003 0320 	and.w	r3, r3, #32
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d004      	beq.n	8000c70 <ltc6811_test+0x138>
			{
				test_pattern = 0x9565;										// Registerwert bei 27kHz
 8000c66:	f249 5365 	movw	r3, #38245	; 0x9565
 8000c6a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c6e:	e024      	b.n	8000cba <ltc6811_test+0x182>
			}
			// Wenn Selbsttest 2 gewaehlt
			else if (command & ST2)
 8000c70:	88fb      	ldrh	r3, [r7, #6]
 8000c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d004      	beq.n	8000c84 <ltc6811_test+0x14c>
			{
				test_pattern = 0x6A9A;										// Registerwert bei 27kHz
 8000c7a:	f646 239a 	movw	r3, #27290	; 0x6a9a
 8000c7e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c82:	e01a      	b.n	8000cba <ltc6811_test+0x182>
			}
			// Bei fehlerhaften Einstellungen
			else
			{
				test_pattern = 0;											// Registerwert = 0 damit Fehler ausloest
 8000c84:	2300      	movs	r3, #0
 8000c86:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c8a:	e016      	b.n	8000cba <ltc6811_test+0x182>
		}
	}
	else
	{
		// Wenn Selbsttest 1 gewaehlt
		if (command & ST1)
 8000c8c:	88fb      	ldrh	r3, [r7, #6]
 8000c8e:	f003 0320 	and.w	r3, r3, #32
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d004      	beq.n	8000ca0 <ltc6811_test+0x168>
		{
			test_pattern = 0x9555;											// Registerwert bei allen anderen Sampling Frequenzen
 8000c96:	f249 5355 	movw	r3, #38229	; 0x9555
 8000c9a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c9e:	e00c      	b.n	8000cba <ltc6811_test+0x182>
		}
		// Wenn Selbsttest 2 gewaehlt
		else if (command & ST2)
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
 8000ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d004      	beq.n	8000cb4 <ltc6811_test+0x17c>
		{
			test_pattern = 0x6AAA;											// Registerwert bei allen anderen Sampling Frequenzen
 8000caa:	f646 23aa 	movw	r3, #27306	; 0x6aaa
 8000cae:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000cb2:	e002      	b.n	8000cba <ltc6811_test+0x182>
		}
		// Bei fehlerhaften Einstellungen
		else
		{
			test_pattern = 0;												// Registerwert = 0 damit Fehler ausloest
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		}
	}

	// Daten pruefen Test 1
	for (uint8_t i=0; i<22; i++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8000cc0:	e117      	b.n	8000ef2 <ltc6811_test+0x3ba>
	{
		// Auswaehlen welches Register im Array steht
		switch (i)
 8000cc2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000cc6:	2b1d      	cmp	r3, #29
 8000cc8:	f200 8105 	bhi.w	8000ed6 <ltc6811_test+0x39e>
 8000ccc:	a201      	add	r2, pc, #4	; (adr r2, 8000cd4 <ltc6811_test+0x19c>)
 8000cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd2:	bf00      	nop
 8000cd4:	08000d4d 	.word	0x08000d4d
 8000cd8:	08000d4d 	.word	0x08000d4d
 8000cdc:	08000d4d 	.word	0x08000d4d
 8000ce0:	08000d7b 	.word	0x08000d7b
 8000ce4:	08000d7b 	.word	0x08000d7b
 8000ce8:	08000d7b 	.word	0x08000d7b
 8000cec:	08000dab 	.word	0x08000dab
 8000cf0:	08000dab 	.word	0x08000dab
 8000cf4:	08000dab 	.word	0x08000dab
 8000cf8:	08000ddd 	.word	0x08000ddd
 8000cfc:	08000ddd 	.word	0x08000ddd
 8000d00:	08000ddd 	.word	0x08000ddd
 8000d04:	08000e0f 	.word	0x08000e0f
 8000d08:	08000e0f 	.word	0x08000e0f
 8000d0c:	08000e0f 	.word	0x08000e0f
 8000d10:	08000e41 	.word	0x08000e41
 8000d14:	08000e41 	.word	0x08000e41
 8000d18:	08000e41 	.word	0x08000e41
 8000d1c:	08000e73 	.word	0x08000e73
 8000d20:	08000ed7 	.word	0x08000ed7
 8000d24:	08000e73 	.word	0x08000e73
 8000d28:	08000ea5 	.word	0x08000ea5
 8000d2c:	08000ed7 	.word	0x08000ed7
 8000d30:	08000ed7 	.word	0x08000ed7
 8000d34:	08000ed7 	.word	0x08000ed7
 8000d38:	08000ed7 	.word	0x08000ed7
 8000d3c:	08000ed7 	.word	0x08000ed7
 8000d40:	08000ed7 	.word	0x08000ed7
 8000d44:	08000ed7 	.word	0x08000ed7
 8000d48:	08000e73 	.word	0x08000e73
		{
			// Register CVA
			case 0:
			case 1:
			case 2:
				tmp = ((tmp_data[i*2+1]<<8)|tmp_data[i*2]);					// Register CVA umwandeln
 8000d4c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	3301      	adds	r3, #1
 8000d54:	3350      	adds	r3, #80	; 0x50
 8000d56:	443b      	add	r3, r7
 8000d58:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d5c:	021b      	lsls	r3, r3, #8
 8000d5e:	b21a      	sxth	r2, r3
 8000d60:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	3350      	adds	r3, #80	; 0x50
 8000d68:	443b      	add	r3, r7
 8000d6a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d6e:	b21b      	sxth	r3, r3
 8000d70:	4313      	orrs	r3, r2
 8000d72:	b21b      	sxth	r3, r3
 8000d74:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000d78:	e0ae      	b.n	8000ed8 <ltc6811_test+0x3a0>
			// Register CVB
			case 3:
			case 4:
			case 5:
				tmp = ((tmp_data[i*2+3] << 8)|tmp_data[i*2+2]);				// Register CVB umwandeln
 8000d7a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	3303      	adds	r3, #3
 8000d82:	3350      	adds	r3, #80	; 0x50
 8000d84:	443b      	add	r3, r7
 8000d86:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	b21a      	sxth	r2, r3
 8000d8e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d92:	3301      	adds	r3, #1
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	3350      	adds	r3, #80	; 0x50
 8000d98:	443b      	add	r3, r7
 8000d9a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d9e:	b21b      	sxth	r3, r3
 8000da0:	4313      	orrs	r3, r2
 8000da2:	b21b      	sxth	r3, r3
 8000da4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000da8:	e096      	b.n	8000ed8 <ltc6811_test+0x3a0>
			// Register CVC
			case 6:
			case 7:
			case 8:
				tmp = ((tmp_data[(i+2)*2+1] << 8)|tmp_data[(i+2)*2]);		// Register CVC umwandeln
 8000daa:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000dae:	3302      	adds	r3, #2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	3301      	adds	r3, #1
 8000db4:	3350      	adds	r3, #80	; 0x50
 8000db6:	443b      	add	r3, r7
 8000db8:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000dbc:	021b      	lsls	r3, r3, #8
 8000dbe:	b21a      	sxth	r2, r3
 8000dc0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000dc4:	3302      	adds	r3, #2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	3350      	adds	r3, #80	; 0x50
 8000dca:	443b      	add	r3, r7
 8000dcc:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000dd0:	b21b      	sxth	r3, r3
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	b21b      	sxth	r3, r3
 8000dd6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000dda:	e07d      	b.n	8000ed8 <ltc6811_test+0x3a0>
			// Register CVD
			case 9:
			case 10:
			case 11:
				tmp = ((tmp_data[(i+2)*2+3] << 8)|tmp_data[(i+2)*2+2]);		// Register CVD umwandeln
 8000ddc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000de0:	3302      	adds	r3, #2
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	3303      	adds	r3, #3
 8000de6:	3350      	adds	r3, #80	; 0x50
 8000de8:	443b      	add	r3, r7
 8000dea:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000dee:	021b      	lsls	r3, r3, #8
 8000df0:	b21a      	sxth	r2, r3
 8000df2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000df6:	3303      	adds	r3, #3
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	3350      	adds	r3, #80	; 0x50
 8000dfc:	443b      	add	r3, r7
 8000dfe:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e02:	b21b      	sxth	r3, r3
 8000e04:	4313      	orrs	r3, r2
 8000e06:	b21b      	sxth	r3, r3
 8000e08:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000e0c:	e064      	b.n	8000ed8 <ltc6811_test+0x3a0>
			// Register AUXA
			case 12:
			case 13:
			case 14:
				tmp = ((tmp_data[(i+4)*2+1] << 8)|tmp_data[(i+4)*2]);		// Register AUXA umwandeln
 8000e0e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e12:	3304      	adds	r3, #4
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	3301      	adds	r3, #1
 8000e18:	3350      	adds	r3, #80	; 0x50
 8000e1a:	443b      	add	r3, r7
 8000e1c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	b21a      	sxth	r2, r3
 8000e24:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e28:	3304      	adds	r3, #4
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	3350      	adds	r3, #80	; 0x50
 8000e2e:	443b      	add	r3, r7
 8000e30:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e34:	b21b      	sxth	r3, r3
 8000e36:	4313      	orrs	r3, r2
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000e3e:	e04b      	b.n	8000ed8 <ltc6811_test+0x3a0>
			// Register AUXB
			case 15:
			case 16:
			case 17:
				tmp = ((tmp_data[(i+4)*2+3] << 8)|tmp_data[(i+4)*2+2]);		// Register AUXB umwandeln
 8000e40:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e44:	3304      	adds	r3, #4
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	3303      	adds	r3, #3
 8000e4a:	3350      	adds	r3, #80	; 0x50
 8000e4c:	443b      	add	r3, r7
 8000e4e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	b21a      	sxth	r2, r3
 8000e56:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e5a:	3305      	adds	r3, #5
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	3350      	adds	r3, #80	; 0x50
 8000e60:	443b      	add	r3, r7
 8000e62:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e66:	b21b      	sxth	r3, r3
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	b21b      	sxth	r3, r3
 8000e6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000e70:	e032      	b.n	8000ed8 <ltc6811_test+0x3a0>
			// Register STATA
			case 18:
			case 29:
			case 20:
				tmp = ((tmp_data[(i+6)*2+1] << 8)|tmp_data[(i+6)*2]);		// Register STATA umwandeln
 8000e72:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e76:	3306      	adds	r3, #6
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	3350      	adds	r3, #80	; 0x50
 8000e7e:	443b      	add	r3, r7
 8000e80:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e84:	021b      	lsls	r3, r3, #8
 8000e86:	b21a      	sxth	r2, r3
 8000e88:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e8c:	3306      	adds	r3, #6
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	3350      	adds	r3, #80	; 0x50
 8000e92:	443b      	add	r3, r7
 8000e94:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e98:	b21b      	sxth	r3, r3
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	b21b      	sxth	r3, r3
 8000e9e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000ea2:	e019      	b.n	8000ed8 <ltc6811_test+0x3a0>
			// Register STATB
			case 21:
				tmp = ((tmp_data[(i+6)*2+3] << 8)|tmp_data[(i+6)*2+2]);		// Register STATB umwandeln
 8000ea4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ea8:	3306      	adds	r3, #6
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	3303      	adds	r3, #3
 8000eae:	3350      	adds	r3, #80	; 0x50
 8000eb0:	443b      	add	r3, r7
 8000eb2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000eb6:	021b      	lsls	r3, r3, #8
 8000eb8:	b21a      	sxth	r2, r3
 8000eba:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ebe:	3307      	adds	r3, #7
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	3350      	adds	r3, #80	; 0x50
 8000ec4:	443b      	add	r3, r7
 8000ec6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000eca:	b21b      	sxth	r3, r3
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	b21b      	sxth	r3, r3
 8000ed0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000ed4:	e000      	b.n	8000ed8 <ltc6811_test+0x3a0>
			// Kein Register
			default:
				break;
 8000ed6:	bf00      	nop
		}

		// Vergleiche Registerwert mit Vorgabewert aus Datenblatt
		if (tmp != test_pattern)
 8000ed8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8000edc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d001      	beq.n	8000ee8 <ltc6811_test+0x3b0>
#ifdef DEBUG_LTC6811
			ITM_SendString("Test failed: ");
			ITM_SendNumber(i);
			ITM_SendChar('\n');
#endif
			return 1;														// Selbsttest 1 nicht OK
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e00a      	b.n	8000efe <ltc6811_test+0x3c6>
	for (uint8_t i=0; i<22; i++)
 8000ee8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000eec:	3301      	adds	r3, #1
 8000eee:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8000ef2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ef6:	2b15      	cmp	r3, #21
 8000ef8:	f67f aee3 	bls.w	8000cc2 <ltc6811_test+0x18a>
		}
	}
#ifdef DEBUG_LTC6811
	ITM_SendString("Test passed\n");
#endif
	return 0;																// Selbsttest 1 OK
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3750      	adds	r7, #80	; 0x50
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000028 	.word	0x20000028

08000f0c <ltc6811_diagn>:
//----------------------------------------------------------------------

// Selbstdiagnose Multiplexer (Datasheet ltc6811 Page 27)
//----------------------------------------------------------------------
uint8_t ltc6811_diagn(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Diagnostic LTC6811.\n");
#endif

	// Variablen definieren
	uint8_t tmp_data[8] = {0};												// Speicher Registerwerte
 8000f12:	2300      	movs	r3, #0
 8000f14:	603b      	str	r3, [r7, #0]
 8000f16:	2300      	movs	r3, #0
 8000f18:	607b      	str	r3, [r7, #4]

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000f1a:	f7ff fbbd 	bl	8000698 <wakeup_ltc6811>

	// Command senden
	ltc6811(DIAGN);															// Multiplexer Check
 8000f1e:	f240 7015 	movw	r0, #1813	; 0x715
 8000f22:	f7ff fbe1 	bl	80006e8 <ltc6811>

	// Verzoegerungszeit 10ms, DIAG Befehl braucht ca. 400µs bis 4ms
	HAL_Delay(10);
 8000f26:	200a      	movs	r0, #10
 8000f28:	f002 fad0 	bl	80034cc <HAL_Delay>

	// Lese Register
	ltc6811_read(RDSTATB, &tmp_data[0]);									// Lese Status B Register fuer Multiplexer Check
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	4619      	mov	r1, r3
 8000f30:	2012      	movs	r0, #18
 8000f32:	f7ff fcaf 	bl	8000894 <ltc6811_read>

	// Multiplexer pruefen
	if (tmp_data[5] & (1 << 1))
 8000f36:	797b      	ldrb	r3, [r7, #5]
 8000f38:	f003 0302 	and.w	r3, r3, #2
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <ltc6811_diagn+0x38>
	{
		return 1;															// Multiplexertest nicht OK
 8000f40:	2301      	movs	r3, #1
 8000f42:	e000      	b.n	8000f46 <ltc6811_diagn+0x3a>
	}

	return 0;																// Multiplexertest OK
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <ltc6811_openwire>:
//----------------------------------------------------------------------

// LTC6811 Openwire check
//----------------------------------------------------------------------
uint8_t ltc6811_openwire(void)
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b09b      	sub	sp, #108	; 0x6c
 8000f54:	af00      	add	r7, sp, #0
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Openwire LTC6811.\n");
#endif

	// Arrays definieren
	uint8_t pulldown[32] = {0}, pullup[32] = {0};							// Speicher Registerwerte
 8000f56:	2300      	movs	r3, #0
 8000f58:	647b      	str	r3, [r7, #68]	; 0x44
 8000f5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]
 8000f6a:	615a      	str	r2, [r3, #20]
 8000f6c:	619a      	str	r2, [r3, #24]
 8000f6e:	2300      	movs	r3, #0
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
 8000f72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]
 8000f82:	615a      	str	r2, [r3, #20]
 8000f84:	619a      	str	r2, [r3, #24]
	uint16_t cell[1] = {0}, openwire[13] = {0};								// Speicher Zelle, Openwire vergleic Threshold
 8000f86:	2300      	movs	r3, #0
 8000f88:	843b      	strh	r3, [r7, #32]
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
 8000f98:	615a      	str	r2, [r3, #20]
 8000f9a:	831a      	strh	r2, [r3, #24]

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000f9c:	f7ff fb7c 	bl	8000698 <wakeup_ltc6811>

	// Pullup Current, drei Durchgaenge
	for (uint8_t i = 0; i < 2; i++)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000fa6:	e00c      	b.n	8000fc2 <ltc6811_openwire+0x72>
	{

		// Commands fuer Openwire Test
		ltc6811(ADOW | MD262 | PUP);										// Pullup Current
 8000fa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fac:	f7ff fb9c 	bl	80006e8 <ltc6811>
		HAL_Delay(300);
 8000fb0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000fb4:	f002 fa8a 	bl	80034cc <HAL_Delay>
	for (uint8_t i = 0; i < 2; i++)
 8000fb8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000fc2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d9ee      	bls.n	8000fa8 <ltc6811_openwire+0x58>
	}

	// Register auslesen OpenWire
	ltc6811_read(RDCVA, &pullup[0]);
 8000fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fce:	4619      	mov	r1, r3
 8000fd0:	2004      	movs	r0, #4
 8000fd2:	f7ff fc5f 	bl	8000894 <ltc6811_read>
	ltc6811_read(RDCVB, &pullup[8]);
 8000fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fda:	3308      	adds	r3, #8
 8000fdc:	4619      	mov	r1, r3
 8000fde:	2006      	movs	r0, #6
 8000fe0:	f7ff fc58 	bl	8000894 <ltc6811_read>
	ltc6811_read(RDCVC, &pullup[16]);
 8000fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe8:	3310      	adds	r3, #16
 8000fea:	4619      	mov	r1, r3
 8000fec:	2008      	movs	r0, #8
 8000fee:	f7ff fc51 	bl	8000894 <ltc6811_read>
	ltc6811_read(RDCVD, &pullup[24]);
 8000ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff6:	3318      	adds	r3, #24
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	200a      	movs	r0, #10
 8000ffc:	f7ff fc4a 	bl	8000894 <ltc6811_read>


	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8001000:	f7ff fb4a 	bl	8000698 <wakeup_ltc6811>

	// Pulldown Current, drei Durchgaenge
	for (uint8_t i = 0; i < 2; i++)
 8001004:	2300      	movs	r3, #0
 8001006:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800100a:	e00c      	b.n	8001026 <ltc6811_openwire+0xd6>
	{

		// Commands fuer Openwire Test
		ltc6811(ADOW | MD262 | PUP);											// Pulldown Current
 800100c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001010:	f7ff fb6a 	bl	80006e8 <ltc6811>
		HAL_Delay(300);
 8001014:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001018:	f002 fa58 	bl	80034cc <HAL_Delay>
	for (uint8_t i = 0; i < 2; i++)
 800101c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001020:	3301      	adds	r3, #1
 8001022:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001026:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800102a:	2b01      	cmp	r3, #1
 800102c:	d9ee      	bls.n	800100c <ltc6811_openwire+0xbc>
	}

	// Register auslesen OpenWire
	ltc6811_read(RDCVA, &pulldown[0]);
 800102e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001032:	4619      	mov	r1, r3
 8001034:	2004      	movs	r0, #4
 8001036:	f7ff fc2d 	bl	8000894 <ltc6811_read>
	ltc6811_read(RDCVB, &pulldown[8]);
 800103a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800103e:	3308      	adds	r3, #8
 8001040:	4619      	mov	r1, r3
 8001042:	2006      	movs	r0, #6
 8001044:	f7ff fc26 	bl	8000894 <ltc6811_read>
	ltc6811_read(RDCVC, &pulldown[16]);
 8001048:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800104c:	3310      	adds	r3, #16
 800104e:	4619      	mov	r1, r3
 8001050:	2008      	movs	r0, #8
 8001052:	f7ff fc1f 	bl	8000894 <ltc6811_read>
	ltc6811_read(RDCVD, &pulldown[24]);
 8001056:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800105a:	3318      	adds	r3, #24
 800105c:	4619      	mov	r1, r3
 800105e:	200a      	movs	r0, #10
 8001060:	f7ff fc18 	bl	8000894 <ltc6811_read>

	// Schleife zum umformatieren der Daten
	for (uint8_t i = 0; i < 13; i++)
 8001064:	2300      	movs	r3, #0
 8001066:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 800106a:	e12d      	b.n	80012c8 <ltc6811_openwire+0x378>
	{
		// Auswahl welche Leitung
		switch (i)
 800106c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001070:	2b0c      	cmp	r3, #12
 8001072:	f200 8123 	bhi.w	80012bc <ltc6811_openwire+0x36c>
 8001076:	a201      	add	r2, pc, #4	; (adr r2, 800107c <ltc6811_openwire+0x12c>)
 8001078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107c:	080010b1 	.word	0x080010b1
 8001080:	080010d5 	.word	0x080010d5
 8001084:	080010d5 	.word	0x080010d5
 8001088:	08001143 	.word	0x08001143
 800108c:	08001143 	.word	0x08001143
 8001090:	08001143 	.word	0x08001143
 8001094:	080011b5 	.word	0x080011b5
 8001098:	080011b5 	.word	0x080011b5
 800109c:	080011b5 	.word	0x080011b5
 80010a0:	08001227 	.word	0x08001227
 80010a4:	08001227 	.word	0x08001227
 80010a8:	08001227 	.word	0x08001227
 80010ac:	08001299 	.word	0x08001299
		{
			// Leitungen Zelle 1/2 bis 3/4
			case 0:
				openwire[i] = ((pulldown[1] << 8) + pulldown[0]);
 80010b0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b299      	uxth	r1, r3
 80010ba:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80010be:	b29a      	uxth	r2, r3
 80010c0:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80010c4:	440a      	add	r2, r1
 80010c6:	b292      	uxth	r2, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	3368      	adds	r3, #104	; 0x68
 80010cc:	443b      	add	r3, r7
 80010ce:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 80010d2:	e0f4      	b.n	80012be <ltc6811_openwire+0x36e>
			case 1:
			case 2:
				openwire[i] = getDifference(((pullup[i*2+1] << 8) + pullup[i*2]), ((pulldown[i*2+1] << 8) + pulldown[i*2]));
 80010d4:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	3301      	adds	r3, #1
 80010dc:	3368      	adds	r3, #104	; 0x68
 80010de:	443b      	add	r3, r7
 80010e0:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	3368      	adds	r3, #104	; 0x68
 80010f2:	443b      	add	r3, r7
 80010f4:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	4413      	add	r3, r2
 80010fc:	b298      	uxth	r0, r3
 80010fe:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	3301      	adds	r3, #1
 8001106:	3368      	adds	r3, #104	; 0x68
 8001108:	443b      	add	r3, r7
 800110a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800110e:	b29b      	uxth	r3, r3
 8001110:	021b      	lsls	r3, r3, #8
 8001112:	b29a      	uxth	r2, r3
 8001114:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	3368      	adds	r3, #104	; 0x68
 800111c:	443b      	add	r3, r7
 800111e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001122:	b29b      	uxth	r3, r3
 8001124:	4413      	add	r3, r2
 8001126:	b29b      	uxth	r3, r3
 8001128:	f897 4065 	ldrb.w	r4, [r7, #101]	; 0x65
 800112c:	4619      	mov	r1, r3
 800112e:	f7ff fa91 	bl	8000654 <getDifference>
 8001132:	4603      	mov	r3, r0
 8001134:	461a      	mov	r2, r3
 8001136:	0063      	lsls	r3, r4, #1
 8001138:	3368      	adds	r3, #104	; 0x68
 800113a:	443b      	add	r3, r7
 800113c:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 8001140:	e0bd      	b.n	80012be <ltc6811_openwire+0x36e>
			// Leitungen Zelle 4/5 bis 6/7
			case 3:
			case 4:
			case 5:
				openwire[i] = getDifference(((pullup[i*2+3] << 8) + pullup[i*2+2]), ((pulldown[i*2+3] << 8) + pulldown[i*2+2]));
 8001142:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	3303      	adds	r3, #3
 800114a:	3368      	adds	r3, #104	; 0x68
 800114c:	443b      	add	r3, r7
 800114e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001152:	b29b      	uxth	r3, r3
 8001154:	021b      	lsls	r3, r3, #8
 8001156:	b29a      	uxth	r2, r3
 8001158:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800115c:	3301      	adds	r3, #1
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	3368      	adds	r3, #104	; 0x68
 8001162:	443b      	add	r3, r7
 8001164:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001168:	b29b      	uxth	r3, r3
 800116a:	4413      	add	r3, r2
 800116c:	b298      	uxth	r0, r3
 800116e:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	3303      	adds	r3, #3
 8001176:	3368      	adds	r3, #104	; 0x68
 8001178:	443b      	add	r3, r7
 800117a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800117e:	b29b      	uxth	r3, r3
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	b29a      	uxth	r2, r3
 8001184:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001188:	3301      	adds	r3, #1
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	3368      	adds	r3, #104	; 0x68
 800118e:	443b      	add	r3, r7
 8001190:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001194:	b29b      	uxth	r3, r3
 8001196:	4413      	add	r3, r2
 8001198:	b29b      	uxth	r3, r3
 800119a:	f897 4065 	ldrb.w	r4, [r7, #101]	; 0x65
 800119e:	4619      	mov	r1, r3
 80011a0:	f7ff fa58 	bl	8000654 <getDifference>
 80011a4:	4603      	mov	r3, r0
 80011a6:	461a      	mov	r2, r3
 80011a8:	0063      	lsls	r3, r4, #1
 80011aa:	3368      	adds	r3, #104	; 0x68
 80011ac:	443b      	add	r3, r7
 80011ae:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 80011b2:	e084      	b.n	80012be <ltc6811_openwire+0x36e>
			// Leitungen Zelle 7/8 bis 9/10
			case 6:
			case 7:
			case 8:
				openwire[i] = getDifference(((pullup[i*2+5] << 8) + pullup[i*2+4]), ((pulldown[i*2+5] << 8) + pulldown[i*2+4]));
 80011b4:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	3305      	adds	r3, #5
 80011bc:	3368      	adds	r3, #104	; 0x68
 80011be:	443b      	add	r3, r7
 80011c0:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80011ce:	3302      	adds	r3, #2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	3368      	adds	r3, #104	; 0x68
 80011d4:	443b      	add	r3, r7
 80011d6:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	4413      	add	r3, r2
 80011de:	b298      	uxth	r0, r3
 80011e0:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	3305      	adds	r3, #5
 80011e8:	3368      	adds	r3, #104	; 0x68
 80011ea:	443b      	add	r3, r7
 80011ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80011fa:	3302      	adds	r3, #2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	3368      	adds	r3, #104	; 0x68
 8001200:	443b      	add	r3, r7
 8001202:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001206:	b29b      	uxth	r3, r3
 8001208:	4413      	add	r3, r2
 800120a:	b29b      	uxth	r3, r3
 800120c:	f897 4065 	ldrb.w	r4, [r7, #101]	; 0x65
 8001210:	4619      	mov	r1, r3
 8001212:	f7ff fa1f 	bl	8000654 <getDifference>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	0063      	lsls	r3, r4, #1
 800121c:	3368      	adds	r3, #104	; 0x68
 800121e:	443b      	add	r3, r7
 8001220:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 8001224:	e04b      	b.n	80012be <ltc6811_openwire+0x36e>
			// Leitungen Zelle 10/11 und 11/12
			case 9:
			case 10:
			case 11:
				openwire[i] = getDifference(((pullup[i*2+7] << 8) + pullup[i*2+6]), ((pulldown[i*2+7] << 8) + pulldown[i*2+6]));
 8001226:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	3307      	adds	r3, #7
 800122e:	3368      	adds	r3, #104	; 0x68
 8001230:	443b      	add	r3, r7
 8001232:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001236:	b29b      	uxth	r3, r3
 8001238:	021b      	lsls	r3, r3, #8
 800123a:	b29a      	uxth	r2, r3
 800123c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001240:	3303      	adds	r3, #3
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	3368      	adds	r3, #104	; 0x68
 8001246:	443b      	add	r3, r7
 8001248:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800124c:	b29b      	uxth	r3, r3
 800124e:	4413      	add	r3, r2
 8001250:	b298      	uxth	r0, r3
 8001252:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	3307      	adds	r3, #7
 800125a:	3368      	adds	r3, #104	; 0x68
 800125c:	443b      	add	r3, r7
 800125e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001262:	b29b      	uxth	r3, r3
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b29a      	uxth	r2, r3
 8001268:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800126c:	3303      	adds	r3, #3
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	3368      	adds	r3, #104	; 0x68
 8001272:	443b      	add	r3, r7
 8001274:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001278:	b29b      	uxth	r3, r3
 800127a:	4413      	add	r3, r2
 800127c:	b29b      	uxth	r3, r3
 800127e:	f897 4065 	ldrb.w	r4, [r7, #101]	; 0x65
 8001282:	4619      	mov	r1, r3
 8001284:	f7ff f9e6 	bl	8000654 <getDifference>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	0063      	lsls	r3, r4, #1
 800128e:	3368      	adds	r3, #104	; 0x68
 8001290:	443b      	add	r3, r7
 8001292:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 8001296:	e012      	b.n	80012be <ltc6811_openwire+0x36e>
			case 12:
				openwire[i] = ((pullup[29] << 8) + pullup[28]);
 8001298:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800129c:	b29b      	uxth	r3, r3
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b299      	uxth	r1, r3
 80012a2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80012ac:	440a      	add	r2, r1
 80012ae:	b292      	uxth	r2, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	3368      	adds	r3, #104	; 0x68
 80012b4:	443b      	add	r3, r7
 80012b6:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 80012ba:	e000      	b.n	80012be <ltc6811_openwire+0x36e>
			default:
				break;
 80012bc:	bf00      	nop
	for (uint8_t i = 0; i < 13; i++)
 80012be:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80012c2:	3301      	adds	r3, #1
 80012c4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 80012c8:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80012cc:	2b0c      	cmp	r3, #12
 80012ce:	f67f aecd 	bls.w	800106c <ltc6811_openwire+0x11c>
		}
	}

	// Schleife zum Pruefen der Daten
	for (uint8_t i = 1; i < 12; i++)
 80012d2:	2301      	movs	r3, #1
 80012d4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 80012d8:	e01a      	b.n	8001310 <ltc6811_openwire+0x3c0>
	{
		// Vergleiche Messdaten mit Threshold
		if (openwire[i] > OPENWIRE_THRESHOLD)
 80012da:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	3368      	adds	r3, #104	; 0x68
 80012e2:	443b      	add	r3, r7
 80012e4:	f833 3c64 	ldrh.w	r3, [r3, #-100]
 80012e8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80012ec:	d90b      	bls.n	8001306 <ltc6811_openwire+0x3b6>
		{
			cell[0] |= (1 << i);											// Wenn Threshold ueberschritten, Offene Leitung
 80012ee:	8c3b      	ldrh	r3, [r7, #32]
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80012f6:	2101      	movs	r1, #1
 80012f8:	fa01 f303 	lsl.w	r3, r1, r3
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	4313      	orrs	r3, r2
 8001300:	b21b      	sxth	r3, r3
 8001302:	b29b      	uxth	r3, r3
 8001304:	843b      	strh	r3, [r7, #32]
	for (uint8_t i = 1; i < 12; i++)
 8001306:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800130a:	3301      	adds	r3, #1
 800130c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 8001310:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001314:	2b0b      	cmp	r3, #11
 8001316:	d9e0      	bls.n	80012da <ltc6811_openwire+0x38a>
		}
	}

	// Offene Leitung erste Zelle messen
	if (openwire[0] == 0)
 8001318:	88bb      	ldrh	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d104      	bne.n	8001328 <ltc6811_openwire+0x3d8>
	{
		cell[0] |= (1 << 0);												// Unterste Leitung Offen
 800131e:	8c3b      	ldrh	r3, [r7, #32]
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	b29b      	uxth	r3, r3
 8001326:	843b      	strh	r3, [r7, #32]
	}

	// Offene Leitung letzte Zelle messen
	if (openwire[12] == 0)
 8001328:	8bbb      	ldrh	r3, [r7, #28]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d104      	bne.n	8001338 <ltc6811_openwire+0x3e8>
	{
		cell[0] |= (1 << 12);												// Oberste Leitung offen
 800132e:	8c3b      	ldrh	r3, [r7, #32]
 8001330:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001334:	b29b      	uxth	r3, r3
 8001336:	843b      	strh	r3, [r7, #32]
	}

	// Wenn offene Leitung vorhanden
	if (cell[0] != 0)
 8001338:	8c3b      	ldrh	r3, [r7, #32]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <ltc6811_openwire+0x3f2>
	{
		return 1;															// Open Wire nicht OK
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <ltc6811_openwire+0x3f4>
	}

	return 0;																// Open Wire OK
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	376c      	adds	r7, #108	; 0x6c
 8001348:	46bd      	mov	sp, r7
 800134a:	bd90      	pop	{r4, r7, pc}

0800134c <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t\t\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t\t\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 8001352:	2115      	movs	r1, #21
 8001354:	483b      	ldr	r0, [pc, #236]	; (8001444 <collectHardwareInfo+0xf8>)
 8001356:	f7ff f915 	bl	8000584 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 800135a:	f002 f8f1 	bl	8003540 <HAL_GetDEVID>
 800135e:	4603      	mov	r3, r0
 8001360:	210a      	movs	r1, #10
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f922 	bl	80005ac <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 8001368:	2117      	movs	r1, #23
 800136a:	4837      	ldr	r0, [pc, #220]	; (8001448 <collectHardwareInfo+0xfc>)
 800136c:	f7ff f90a 	bl	8000584 <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 8001370:	f002 f8da 	bl	8003528 <HAL_GetREVID>
 8001374:	4603      	mov	r3, r0
 8001376:	f242 0201 	movw	r2, #8193	; 0x2001
 800137a:	4293      	cmp	r3, r2
 800137c:	d016      	beq.n	80013ac <collectHardwareInfo+0x60>
 800137e:	f242 0201 	movw	r2, #8193	; 0x2001
 8001382:	4293      	cmp	r3, r2
 8001384:	d817      	bhi.n	80013b6 <collectHardwareInfo+0x6a>
 8001386:	f241 0201 	movw	r2, #4097	; 0x1001
 800138a:	4293      	cmp	r3, r2
 800138c:	d004      	beq.n	8001398 <collectHardwareInfo+0x4c>
 800138e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001392:	4293      	cmp	r3, r2
 8001394:	d005      	beq.n	80013a2 <collectHardwareInfo+0x56>
 8001396:	e00e      	b.n	80013b6 <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 8001398:	2101      	movs	r1, #1
 800139a:	482c      	ldr	r0, [pc, #176]	; (800144c <collectHardwareInfo+0x100>)
 800139c:	f7ff f8f2 	bl	8000584 <uartTransmit>
			break;
 80013a0:	e011      	b.n	80013c6 <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 80013a2:	2101      	movs	r1, #1
 80013a4:	482a      	ldr	r0, [pc, #168]	; (8001450 <collectHardwareInfo+0x104>)
 80013a6:	f7ff f8ed 	bl	8000584 <uartTransmit>
			break;
 80013aa:	e00c      	b.n	80013c6 <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 80013ac:	2101      	movs	r1, #1
 80013ae:	4829      	ldr	r0, [pc, #164]	; (8001454 <collectHardwareInfo+0x108>)
 80013b0:	f7ff f8e8 	bl	8000584 <uartTransmit>
			break;
 80013b4:	e007      	b.n	80013c6 <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 80013b6:	f002 f8b7 	bl	8003528 <HAL_GetREVID>
 80013ba:	4603      	mov	r3, r0
 80013bc:	210a      	movs	r1, #10
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f8f4 	bl	80005ac <uartTransmitNumber>
			break;
 80013c4:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 80013c6:	2115      	movs	r1, #21
 80013c8:	4823      	ldr	r0, [pc, #140]	; (8001458 <collectHardwareInfo+0x10c>)
 80013ca:	f7ff f8db 	bl	8000584 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 80013ce:	f003 fd85 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 80013d2:	6078      	str	r0, [r7, #4]
		frequency = frequency / 1000000;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a21      	ldr	r2, [pc, #132]	; (800145c <collectHardwareInfo+0x110>)
 80013d8:	fba2 2303 	umull	r2, r3, r2, r3
 80013dc:	0c9b      	lsrs	r3, r3, #18
 80013de:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 80013e0:	210a      	movs	r1, #10
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff f8e2 	bl	80005ac <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 80013e8:	2104      	movs	r1, #4
 80013ea:	481d      	ldr	r0, [pc, #116]	; (8001460 <collectHardwareInfo+0x114>)
 80013ec:	f7ff f8ca 	bl	8000584 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 80013f0:	2111      	movs	r1, #17
 80013f2:	481c      	ldr	r0, [pc, #112]	; (8001464 <collectHardwareInfo+0x118>)
 80013f4:	f7ff f8c6 	bl	8000584 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 80013f8:	f002 f8b0 	bl	800355c <HAL_GetUIDw0>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2110      	movs	r1, #16
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f8d3 	bl	80005ac <uartTransmitNumber>

	uartTransmit(" ", 1);
 8001406:	2101      	movs	r1, #1
 8001408:	4817      	ldr	r0, [pc, #92]	; (8001468 <collectHardwareInfo+0x11c>)
 800140a:	f7ff f8bb 	bl	8000584 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 800140e:	f002 f8b1 	bl	8003574 <HAL_GetUIDw1>
 8001412:	4603      	mov	r3, r0
 8001414:	2110      	movs	r1, #16
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f8c8 	bl	80005ac <uartTransmitNumber>

	uartTransmit(" ", 1);
 800141c:	2101      	movs	r1, #1
 800141e:	4812      	ldr	r0, [pc, #72]	; (8001468 <collectHardwareInfo+0x11c>)
 8001420:	f7ff f8b0 	bl	8000584 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8001424:	f002 f8b2 	bl	800358c <HAL_GetUIDw2>
 8001428:	4603      	mov	r3, r0
 800142a:	2110      	movs	r1, #16
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f8bd 	bl	80005ac <uartTransmitNumber>

	uartTransmit("\n", 1);
 8001432:	2101      	movs	r1, #1
 8001434:	480d      	ldr	r0, [pc, #52]	; (800146c <collectHardwareInfo+0x120>)
 8001436:	f7ff f8a5 	bl	8000584 <uartTransmit>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	08008b84 	.word	0x08008b84
 8001448:	08008b9c 	.word	0x08008b9c
 800144c:	08008bb4 	.word	0x08008bb4
 8001450:	08008bb8 	.word	0x08008bb8
 8001454:	08008bbc 	.word	0x08008bbc
 8001458:	08008bc0 	.word	0x08008bc0
 800145c:	431bde83 	.word	0x431bde83
 8001460:	08008bd8 	.word	0x08008bd8
 8001464:	08008be0 	.word	0x08008be0
 8001468:	08008bf4 	.word	0x08008bf4
 800146c:	08008bf8 	.word	0x08008bf8

08001470 <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t\t\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 8001474:	2114      	movs	r1, #20
 8001476:	4824      	ldr	r0, [pc, #144]	; (8001508 <collectMiddlewareInfo+0x98>)
 8001478:	f7ff f884 	bl	8000584 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 800147c:	210a      	movs	r1, #10
 800147e:	2005      	movs	r0, #5
 8001480:	f7ff f894 	bl	80005ac <uartTransmitNumber>
	uartTransmit(".", 1);
 8001484:	2101      	movs	r1, #1
 8001486:	4821      	ldr	r0, [pc, #132]	; (800150c <collectMiddlewareInfo+0x9c>)
 8001488:	f7ff f87c 	bl	8000584 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 800148c:	210a      	movs	r1, #10
 800148e:	2001      	movs	r0, #1
 8001490:	f7ff f88c 	bl	80005ac <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 8001494:	2112      	movs	r1, #18
 8001496:	481e      	ldr	r0, [pc, #120]	; (8001510 <collectMiddlewareInfo+0xa0>)
 8001498:	f7ff f874 	bl	8000584 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 800149c:	f002 f83a 	bl	8003514 <HAL_GetHalVersion>
 80014a0:	4603      	mov	r3, r0
 80014a2:	0e1b      	lsrs	r3, r3, #24
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	210a      	movs	r1, #10
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff f87f 	bl	80005ac <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 80014ae:	2101      	movs	r1, #1
 80014b0:	4816      	ldr	r0, [pc, #88]	; (800150c <collectMiddlewareInfo+0x9c>)
 80014b2:	f7ff f867 	bl	8000584 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 80014b6:	f002 f82d 	bl	8003514 <HAL_GetHalVersion>
 80014ba:	4603      	mov	r3, r0
 80014bc:	0c1b      	lsrs	r3, r3, #16
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	210a      	movs	r1, #10
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff f872 	bl	80005ac <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 80014c8:	2101      	movs	r1, #1
 80014ca:	4810      	ldr	r0, [pc, #64]	; (800150c <collectMiddlewareInfo+0x9c>)
 80014cc:	f7ff f85a 	bl	8000584 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 80014d0:	f002 f820 	bl	8003514 <HAL_GetHalVersion>
 80014d4:	4603      	mov	r3, r0
 80014d6:	0a1b      	lsrs	r3, r3, #8
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	210a      	movs	r1, #10
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff f865 	bl	80005ac <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 80014e2:	2101      	movs	r1, #1
 80014e4:	4809      	ldr	r0, [pc, #36]	; (800150c <collectMiddlewareInfo+0x9c>)
 80014e6:	f7ff f84d 	bl	8000584 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 80014ea:	f002 f813 	bl	8003514 <HAL_GetHalVersion>
 80014ee:	4603      	mov	r3, r0
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	210a      	movs	r1, #10
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f859 	bl	80005ac <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 80014fa:	2101      	movs	r1, #1
 80014fc:	4805      	ldr	r0, [pc, #20]	; (8001514 <collectMiddlewareInfo+0xa4>)
 80014fe:	f7ff f841 	bl	8000584 <uartTransmit>
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	08008bfc 	.word	0x08008bfc
 800150c:	08008c10 	.word	0x08008c10
 8001510:	08008c14 	.word	0x08008c14
 8001514:	08008bf8 	.word	0x08008bf8

08001518 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 800151c:	2111      	movs	r1, #17
 800151e:	4826      	ldr	r0, [pc, #152]	; (80015b8 <collectSoftwareInfo+0xa0>)
 8001520:	f7ff f830 	bl	8000584 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8001524:	2108      	movs	r1, #8
 8001526:	4825      	ldr	r0, [pc, #148]	; (80015bc <collectSoftwareInfo+0xa4>)
 8001528:	f7ff f82c 	bl	8000584 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 800152c:	2111      	movs	r1, #17
 800152e:	4824      	ldr	r0, [pc, #144]	; (80015c0 <collectSoftwareInfo+0xa8>)
 8001530:	f7ff f828 	bl	8000584 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8001534:	2108      	movs	r1, #8
 8001536:	4823      	ldr	r0, [pc, #140]	; (80015c4 <collectSoftwareInfo+0xac>)
 8001538:	f7ff f824 	bl	8000584 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 800153c:	210f      	movs	r1, #15
 800153e:	4822      	ldr	r0, [pc, #136]	; (80015c8 <collectSoftwareInfo+0xb0>)
 8001540:	f7ff f820 	bl	8000584 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 8001544:	2129      	movs	r1, #41	; 0x29
 8001546:	4821      	ldr	r0, [pc, #132]	; (80015cc <collectSoftwareInfo+0xb4>)
 8001548:	f7ff f81c 	bl	8000584 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 800154c:	2101      	movs	r1, #1
 800154e:	4820      	ldr	r0, [pc, #128]	; (80015d0 <collectSoftwareInfo+0xb8>)
 8001550:	f7ff f818 	bl	8000584 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8001554:	2116      	movs	r1, #22
 8001556:	481f      	ldr	r0, [pc, #124]	; (80015d4 <collectSoftwareInfo+0xbc>)
 8001558:	f7ff f814 	bl	8000584 <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 800155c:	2105      	movs	r1, #5
 800155e:	481e      	ldr	r0, [pc, #120]	; (80015d8 <collectSoftwareInfo+0xc0>)
 8001560:	f7ff f810 	bl	8000584 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8001564:	2115      	movs	r1, #21
 8001566:	481d      	ldr	r0, [pc, #116]	; (80015dc <collectSoftwareInfo+0xc4>)
 8001568:	f7ff f80c 	bl	8000584 <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 800156c:	2108      	movs	r1, #8
 800156e:	481c      	ldr	r0, [pc, #112]	; (80015e0 <collectSoftwareInfo+0xc8>)
 8001570:	f7ff f808 	bl	8000584 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 8001574:	2116      	movs	r1, #22
 8001576:	481b      	ldr	r0, [pc, #108]	; (80015e4 <collectSoftwareInfo+0xcc>)
 8001578:	f7ff f804 	bl	8000584 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 800157c:	2111      	movs	r1, #17
 800157e:	481a      	ldr	r0, [pc, #104]	; (80015e8 <collectSoftwareInfo+0xd0>)
 8001580:	f7ff f800 	bl	8000584 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8001584:	2101      	movs	r1, #1
 8001586:	4812      	ldr	r0, [pc, #72]	; (80015d0 <collectSoftwareInfo+0xb8>)
 8001588:	f7fe fffc 	bl	8000584 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 800158c:	2111      	movs	r1, #17
 800158e:	4817      	ldr	r0, [pc, #92]	; (80015ec <collectSoftwareInfo+0xd4>)
 8001590:	f7fe fff8 	bl	8000584 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 8001594:	210b      	movs	r1, #11
 8001596:	4816      	ldr	r0, [pc, #88]	; (80015f0 <collectSoftwareInfo+0xd8>)
 8001598:	f7fe fff4 	bl	8000584 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 800159c:	2111      	movs	r1, #17
 800159e:	4815      	ldr	r0, [pc, #84]	; (80015f4 <collectSoftwareInfo+0xdc>)
 80015a0:	f7fe fff0 	bl	8000584 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 80015a4:	2109      	movs	r1, #9
 80015a6:	4814      	ldr	r0, [pc, #80]	; (80015f8 <collectSoftwareInfo+0xe0>)
 80015a8:	f7fe ffec 	bl	8000584 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80015ac:	2101      	movs	r1, #1
 80015ae:	4808      	ldr	r0, [pc, #32]	; (80015d0 <collectSoftwareInfo+0xb8>)
 80015b0:	f7fe ffe8 	bl	8000584 <uartTransmit>
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	08008c28 	.word	0x08008c28
 80015bc:	08008c3c 	.word	0x08008c3c
 80015c0:	08008c44 	.word	0x08008c44
 80015c4:	08008c58 	.word	0x08008c58
 80015c8:	08008c60 	.word	0x08008c60
 80015cc:	08008c70 	.word	0x08008c70
 80015d0:	08008bf8 	.word	0x08008bf8
 80015d4:	08008c9c 	.word	0x08008c9c
 80015d8:	08008cb4 	.word	0x08008cb4
 80015dc:	08008cbc 	.word	0x08008cbc
 80015e0:	08008cd4 	.word	0x08008cd4
 80015e4:	08008cdc 	.word	0x08008cdc
 80015e8:	08008cf4 	.word	0x08008cf4
 80015ec:	08008d08 	.word	0x08008d08
 80015f0:	08008d1c 	.word	0x08008d1c
 80015f4:	08008d28 	.word	0x08008d28
 80015f8:	08008d3c 	.word	0x08008d3c

080015fc <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 8001600:	2115      	movs	r1, #21
 8001602:	4814      	ldr	r0, [pc, #80]	; (8001654 <collectGitcounts+0x58>)
 8001604:	f7fe ffbe 	bl	8000584 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 8001608:	2103      	movs	r1, #3
 800160a:	4813      	ldr	r0, [pc, #76]	; (8001658 <collectGitcounts+0x5c>)
 800160c:	f7fe ffba 	bl	8000584 <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 8001610:	2117      	movs	r1, #23
 8001612:	4812      	ldr	r0, [pc, #72]	; (800165c <collectGitcounts+0x60>)
 8001614:	f7fe ffb6 	bl	8000584 <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 8001618:	2103      	movs	r1, #3
 800161a:	4811      	ldr	r0, [pc, #68]	; (8001660 <collectGitcounts+0x64>)
 800161c:	f7fe ffb2 	bl	8000584 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 8001620:	211c      	movs	r1, #28
 8001622:	4810      	ldr	r0, [pc, #64]	; (8001664 <collectGitcounts+0x68>)
 8001624:	f7fe ffae 	bl	8000584 <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 8001628:	2103      	movs	r1, #3
 800162a:	480f      	ldr	r0, [pc, #60]	; (8001668 <collectGitcounts+0x6c>)
 800162c:	f7fe ffaa 	bl	8000584 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8001630:	2116      	movs	r1, #22
 8001632:	480e      	ldr	r0, [pc, #56]	; (800166c <collectGitcounts+0x70>)
 8001634:	f7fe ffa6 	bl	8000584 <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8001638:	2102      	movs	r1, #2
 800163a:	480d      	ldr	r0, [pc, #52]	; (8001670 <collectGitcounts+0x74>)
 800163c:	f7fe ffa2 	bl	8000584 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8001640:	2115      	movs	r1, #21
 8001642:	480c      	ldr	r0, [pc, #48]	; (8001674 <collectGitcounts+0x78>)
 8001644:	f7fe ff9e 	bl	8000584 <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 8001648:	2102      	movs	r1, #2
 800164a:	480b      	ldr	r0, [pc, #44]	; (8001678 <collectGitcounts+0x7c>)
 800164c:	f7fe ff9a 	bl	8000584 <uartTransmit>
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	08008d48 	.word	0x08008d48
 8001658:	08008d60 	.word	0x08008d60
 800165c:	08008d64 	.word	0x08008d64
 8001660:	08008d7c 	.word	0x08008d7c
 8001664:	08008d80 	.word	0x08008d80
 8001668:	08008d9c 	.word	0x08008d9c
 800166c:	08008c9c 	.word	0x08008c9c
 8001670:	08008da0 	.word	0x08008da0
 8001674:	08008cbc 	.word	0x08008cbc
 8001678:	08008da4 	.word	0x08008da4

0800167c <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8001680:	2111      	movs	r1, #17
 8001682:	480e      	ldr	r0, [pc, #56]	; (80016bc <collectSystemInfo+0x40>)
 8001684:	f7fe ff7e 	bl	8000584 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8001688:	f7ff fe60 	bl	800134c <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 800168c:	2111      	movs	r1, #17
 800168e:	480c      	ldr	r0, [pc, #48]	; (80016c0 <collectSystemInfo+0x44>)
 8001690:	f7fe ff78 	bl	8000584 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 8001694:	f7ff ff40 	bl	8001518 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8001698:	2113      	movs	r1, #19
 800169a:	480a      	ldr	r0, [pc, #40]	; (80016c4 <collectSystemInfo+0x48>)
 800169c:	f7fe ff72 	bl	8000584 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 80016a0:	f7ff fee6 	bl	8001470 <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 80016a4:	2113      	movs	r1, #19
 80016a6:	4808      	ldr	r0, [pc, #32]	; (80016c8 <collectSystemInfo+0x4c>)
 80016a8:	f7fe ff6c 	bl	8000584 <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 80016ac:	f7ff ffa6 	bl	80015fc <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 80016b0:	2103      	movs	r1, #3
 80016b2:	4806      	ldr	r0, [pc, #24]	; (80016cc <collectSystemInfo+0x50>)
 80016b4:	f7fe ff66 	bl	8000584 <uartTransmit>
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	08008da8 	.word	0x08008da8
 80016c0:	08008dbc 	.word	0x08008dbc
 80016c4:	08008dd0 	.word	0x08008dd0
 80016c8:	08008de4 	.word	0x08008de4
 80016cc:	08008df8 	.word	0x08008df8

080016d0 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 80016d6:	2300      	movs	r3, #0
 80016d8:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 80016da:	4b25      	ldr	r3, [pc, #148]	; (8001770 <readResetSource+0xa0>)
 80016dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d002      	beq.n	80016ec <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	3301      	adds	r3, #1
 80016ea:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 80016ec:	4b20      	ldr	r3, [pc, #128]	; (8001770 <readResetSource+0xa0>)
 80016ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d002      	beq.n	80016fe <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	3302      	adds	r3, #2
 80016fc:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 80016fe:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <readResetSource+0xa0>)
 8001700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001702:	2b00      	cmp	r3, #0
 8001704:	da02      	bge.n	800170c <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	3304      	adds	r3, #4
 800170a:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 800170c:	4b18      	ldr	r3, [pc, #96]	; (8001770 <readResetSource+0xa0>)
 800170e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d002      	beq.n	800171e <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	3308      	adds	r3, #8
 800171c:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <readResetSource+0xa0>)
 8001720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001722:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d002      	beq.n	8001730 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	3310      	adds	r3, #16
 800172e:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8001730:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <readResetSource+0xa0>)
 8001732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d002      	beq.n	8001742 <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	3320      	adds	r3, #32
 8001740:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <readResetSource+0xa0>)
 8001744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001746:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d002      	beq.n	8001754 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	3340      	adds	r3, #64	; 0x40
 8001752:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <readResetSource+0xa0>)
 8001756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001758:	4a05      	ldr	r2, [pc, #20]	; (8001770 <readResetSource+0xa0>)
 800175a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800175e:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8001760:	79fb      	ldrb	r3, [r7, #7]
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800

08001774 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 800177e:	2106      	movs	r1, #6
 8001780:	482a      	ldr	r0, [pc, #168]	; (800182c <printResetSource+0xb8>)
 8001782:	f7fe feff 	bl	8000584 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d104      	bne.n	8001796 <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 800178c:	210f      	movs	r1, #15
 800178e:	4828      	ldr	r0, [pc, #160]	; (8001830 <printResetSource+0xbc>)
 8001790:	f7fe fef8 	bl	8000584 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 8001794:	e046      	b.n	8001824 <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 80017a0:	2118      	movs	r1, #24
 80017a2:	4824      	ldr	r0, [pc, #144]	; (8001834 <printResetSource+0xc0>)
 80017a4:	f7fe feee 	bl	8000584 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 80017b2:	2116      	movs	r1, #22
 80017b4:	4820      	ldr	r0, [pc, #128]	; (8001838 <printResetSource+0xc4>)
 80017b6:	f7fe fee5 	bl	8000584 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 80017c4:	210a      	movs	r1, #10
 80017c6:	481d      	ldr	r0, [pc, #116]	; (800183c <printResetSource+0xc8>)
 80017c8:	f7fe fedc 	bl	8000584 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 80017d6:	2110      	movs	r1, #16
 80017d8:	4819      	ldr	r0, [pc, #100]	; (8001840 <printResetSource+0xcc>)
 80017da:	f7fe fed3 	bl	8000584 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	f003 0310 	and.w	r3, r3, #16
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 80017e8:	210f      	movs	r1, #15
 80017ea:	4816      	ldr	r0, [pc, #88]	; (8001844 <printResetSource+0xd0>)
 80017ec:	f7fe feca 	bl	8000584 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	f003 0320 	and.w	r3, r3, #32
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 80017fa:	210f      	movs	r1, #15
 80017fc:	4812      	ldr	r0, [pc, #72]	; (8001848 <printResetSource+0xd4>)
 80017fe:	f7fe fec1 	bl	8000584 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 800180c:	210a      	movs	r1, #10
 800180e:	480f      	ldr	r0, [pc, #60]	; (800184c <printResetSource+0xd8>)
 8001810:	f7fe feb8 	bl	8000584 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	2b00      	cmp	r3, #0
 800181a:	da03      	bge.n	8001824 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 800181c:	2105      	movs	r1, #5
 800181e:	480c      	ldr	r0, [pc, #48]	; (8001850 <printResetSource+0xdc>)
 8001820:	f7fe feb0 	bl	8000584 <uartTransmit>
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	08008dfc 	.word	0x08008dfc
 8001830:	08008e04 	.word	0x08008e04
 8001834:	08008e14 	.word	0x08008e14
 8001838:	08008e30 	.word	0x08008e30
 800183c:	08008e48 	.word	0x08008e48
 8001840:	08008e54 	.word	0x08008e54
 8001844:	08008e68 	.word	0x08008e68
 8001848:	08008e78 	.word	0x08008e78
 800184c:	08008e88 	.word	0x08008e88
 8001850:	08008e94 	.word	0x08008e94

08001854 <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (status == HAL_OK) {													// HAL OK
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d104      	bne.n	800186e <hal_error+0x1a>
		uartTransmit("HAL OK\n", 7);
 8001864:	2107      	movs	r1, #7
 8001866:	480f      	ldr	r0, [pc, #60]	; (80018a4 <hal_error+0x50>)
 8001868:	f7fe fe8c 	bl	8000584 <uartTransmit>
	}
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 800186c:	e016      	b.n	800189c <hal_error+0x48>
	else if (status == HAL_ERROR) {											// HAL Error
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d104      	bne.n	800187e <hal_error+0x2a>
		uartTransmit("HAL ERROR\n", 10);
 8001874:	210a      	movs	r1, #10
 8001876:	480c      	ldr	r0, [pc, #48]	; (80018a8 <hal_error+0x54>)
 8001878:	f7fe fe84 	bl	8000584 <uartTransmit>
}
 800187c:	e00e      	b.n	800189c <hal_error+0x48>
	else if (status == HAL_BUSY) {											// HAL Beschaeftigt
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d104      	bne.n	800188e <hal_error+0x3a>
		uartTransmit("HAL BUSY\n", 9);
 8001884:	2109      	movs	r1, #9
 8001886:	4809      	ldr	r0, [pc, #36]	; (80018ac <hal_error+0x58>)
 8001888:	f7fe fe7c 	bl	8000584 <uartTransmit>
}
 800188c:	e006      	b.n	800189c <hal_error+0x48>
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	2b03      	cmp	r3, #3
 8001892:	d103      	bne.n	800189c <hal_error+0x48>
		uartTransmit("HAL TIMEOUT\n", 12);
 8001894:	210c      	movs	r1, #12
 8001896:	4806      	ldr	r0, [pc, #24]	; (80018b0 <hal_error+0x5c>)
 8001898:	f7fe fe74 	bl	8000584 <uartTransmit>
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	08008e9c 	.word	0x08008e9c
 80018a8:	08008ea4 	.word	0x08008ea4
 80018ac:	08008eb0 	.word	0x08008eb0
 80018b0:	08008ebc 	.word	0x08008ebc

080018b4 <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 80018b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018bc:	4850      	ldr	r0, [pc, #320]	; (8001a00 <readall_inputs+0x14c>)
 80018be:	f002 fef1 	bl	80046a4 <HAL_GPIO_ReadPin>
 80018c2:	4603      	mov	r3, r0
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	b2d9      	uxtb	r1, r3
 80018ca:	4a4e      	ldr	r2, [pc, #312]	; (8001a04 <readall_inputs+0x150>)
 80018cc:	7813      	ldrb	r3, [r2, #0]
 80018ce:	f361 03c3 	bfi	r3, r1, #3, #1
 80018d2:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 80018d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018d8:	484b      	ldr	r0, [pc, #300]	; (8001a08 <readall_inputs+0x154>)
 80018da:	f002 fee3 	bl	80046a4 <HAL_GPIO_ReadPin>
 80018de:	4603      	mov	r3, r0
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	b2d9      	uxtb	r1, r3
 80018e6:	4a47      	ldr	r2, [pc, #284]	; (8001a04 <readall_inputs+0x150>)
 80018e8:	7813      	ldrb	r3, [r2, #0]
 80018ea:	f361 1345 	bfi	r3, r1, #5, #1
 80018ee:	7013      	strb	r3, [r2, #0]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 80018f0:	2101      	movs	r1, #1
 80018f2:	4846      	ldr	r0, [pc, #280]	; (8001a0c <readall_inputs+0x158>)
 80018f4:	f002 fed6 	bl	80046a4 <HAL_GPIO_ReadPin>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	b2d9      	uxtb	r1, r3
 8001900:	4a40      	ldr	r2, [pc, #256]	; (8001a04 <readall_inputs+0x150>)
 8001902:	7813      	ldrb	r3, [r2, #0]
 8001904:	f361 1386 	bfi	r3, r1, #6, #1
 8001908:	7013      	strb	r3, [r2, #0]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 800190a:	2104      	movs	r1, #4
 800190c:	483f      	ldr	r0, [pc, #252]	; (8001a0c <readall_inputs+0x158>)
 800190e:	f002 fec9 	bl	80046a4 <HAL_GPIO_ReadPin>
 8001912:	4603      	mov	r3, r0
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	b2d9      	uxtb	r1, r3
 800191a:	4a3a      	ldr	r2, [pc, #232]	; (8001a04 <readall_inputs+0x150>)
 800191c:	7813      	ldrb	r3, [r2, #0]
 800191e:	f361 13c7 	bfi	r3, r1, #7, #1
 8001922:	7013      	strb	r3, [r2, #0]

	// SDC-Eingaenge einlesen
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);					// IMD OK, Akku
 8001924:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001928:	4835      	ldr	r0, [pc, #212]	; (8001a00 <readall_inputs+0x14c>)
 800192a:	f002 febb 	bl	80046a4 <HAL_GPIO_ReadPin>
 800192e:	4603      	mov	r3, r0
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	b2d9      	uxtb	r1, r3
 8001936:	4a36      	ldr	r2, [pc, #216]	; (8001a10 <readall_inputs+0x15c>)
 8001938:	7813      	ldrb	r3, [r2, #0]
 800193a:	f361 0300 	bfi	r3, r1, #0, #1
 800193e:	7013      	strb	r3, [r2, #0]
	sdc_in.HVIL = HAL_GPIO_ReadPin(SENSE_SDC_HVIL_GPIO_Port, SENSE_SDC_HVIL_Pin);				// Shutdown-Circuit HVIL, OK
 8001940:	2108      	movs	r1, #8
 8001942:	482f      	ldr	r0, [pc, #188]	; (8001a00 <readall_inputs+0x14c>)
 8001944:	f002 feae 	bl	80046a4 <HAL_GPIO_ReadPin>
 8001948:	4603      	mov	r3, r0
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	b2d9      	uxtb	r1, r3
 8001950:	4a2f      	ldr	r2, [pc, #188]	; (8001a10 <readall_inputs+0x15c>)
 8001952:	7813      	ldrb	r3, [r2, #0]
 8001954:	f361 0341 	bfi	r3, r1, #1, #1
 8001958:	7013      	strb	r3, [r2, #0]
	sdc_in.MotorSDC = HAL_GPIO_ReadPin(SENSE_SDC_MOTOR_GPIO_Port, SENSE_SDC_MOTOR_Pin);			// Shutdown-Circuit Akku, OK
 800195a:	2120      	movs	r1, #32
 800195c:	4828      	ldr	r0, [pc, #160]	; (8001a00 <readall_inputs+0x14c>)
 800195e:	f002 fea1 	bl	80046a4 <HAL_GPIO_ReadPin>
 8001962:	4603      	mov	r3, r0
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	b2d9      	uxtb	r1, r3
 800196a:	4a29      	ldr	r2, [pc, #164]	; (8001a10 <readall_inputs+0x15c>)
 800196c:	7813      	ldrb	r3, [r2, #0]
 800196e:	f361 0382 	bfi	r3, r1, #2, #1
 8001972:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8001974:	2110      	movs	r1, #16
 8001976:	4822      	ldr	r0, [pc, #136]	; (8001a00 <readall_inputs+0x14c>)
 8001978:	f002 fe94 	bl	80046a4 <HAL_GPIO_ReadPin>
 800197c:	4603      	mov	r3, r0
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	b2d9      	uxtb	r1, r3
 8001984:	4a22      	ldr	r2, [pc, #136]	; (8001a10 <readall_inputs+0x15c>)
 8001986:	7813      	ldrb	r3, [r2, #0]
 8001988:	f361 03c3 	bfi	r3, r1, #3, #1
 800198c:	7013      	strb	r3, [r2, #0]
	sdc_in.PrechargeIn = HAL_GPIO_ReadPin(PRECHARGE_IN_GPIO_Port, PRECHARGE_IN_Pin);			// Eingang Precharge abgeschlossen
 800198e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001992:	4820      	ldr	r0, [pc, #128]	; (8001a14 <readall_inputs+0x160>)
 8001994:	f002 fe86 	bl	80046a4 <HAL_GPIO_ReadPin>
 8001998:	4603      	mov	r3, r0
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	b2d9      	uxtb	r1, r3
 80019a0:	4a1b      	ldr	r2, [pc, #108]	; (8001a10 <readall_inputs+0x15c>)
 80019a2:	7813      	ldrb	r3, [r2, #0]
 80019a4:	f361 1304 	bfi	r3, r1, #4, #1
 80019a8:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.OVC = HAL_GPIO_ReadPin(OVC_SENSE_GPIO_Port, OVC_SENSE_Pin);						// Eingang Overcurrent erkannt
 80019aa:	2104      	movs	r1, #4
 80019ac:	4819      	ldr	r0, [pc, #100]	; (8001a14 <readall_inputs+0x160>)
 80019ae:	f002 fe79 	bl	80046a4 <HAL_GPIO_ReadPin>
 80019b2:	4603      	mov	r3, r0
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	b2d9      	uxtb	r1, r3
 80019ba:	4a17      	ldr	r2, [pc, #92]	; (8001a18 <readall_inputs+0x164>)
 80019bc:	7813      	ldrb	r3, [r2, #0]
 80019be:	f361 0300 	bfi	r3, r1, #0, #1
 80019c2:	7013      	strb	r3, [r2, #0]
	komfort_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 80019c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019c8:	4810      	ldr	r0, [pc, #64]	; (8001a0c <readall_inputs+0x158>)
 80019ca:	f002 fe6b 	bl	80046a4 <HAL_GPIO_ReadPin>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	b2d9      	uxtb	r1, r3
 80019d6:	4a10      	ldr	r2, [pc, #64]	; (8001a18 <readall_inputs+0x164>)
 80019d8:	7813      	ldrb	r3, [r2, #0]
 80019da:	f361 0341 	bfi	r3, r1, #1, #1
 80019de:	7013      	strb	r3, [r2, #0]
	komfort_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 80019e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019e4:	4809      	ldr	r0, [pc, #36]	; (8001a0c <readall_inputs+0x158>)
 80019e6:	f002 fe5d 	bl	80046a4 <HAL_GPIO_ReadPin>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	b2d9      	uxtb	r1, r3
 80019f2:	4a09      	ldr	r2, [pc, #36]	; (8001a18 <readall_inputs+0x164>)
 80019f4:	7813      	ldrb	r3, [r2, #0]
 80019f6:	f361 0382 	bfi	r3, r1, #2, #1
 80019fa:	7013      	strb	r3, [r2, #0]
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40021000 	.word	0x40021000
 8001a04:	20000030 	.word	0x20000030
 8001a08:	40020c00 	.word	0x40020c00
 8001a0c:	40020000 	.word	0x40020000
 8001a10:	20000034 	.word	0x20000034
 8001a14:	40021400 	.word	0x40021400
 8001a18:	20000038 	.word	0x20000038

08001a1c <millis>:
//----------------------------------------------------------------------

// Funktion millis (ms)
//----------------------------------------------------------------------
uint32_t millis(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001a20:	f001 fd48 	bl	80034b4 <HAL_GetTick>
 8001a24:	4603      	mov	r3, r0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);								// Blaue LED Platine setzen
 8001a30:	2201      	movs	r2, #1
 8001a32:	2180      	movs	r1, #128	; 0x80
 8001a34:	481b      	ldr	r0, [pc, #108]	; (8001aa4 <testPCB_Leds+0x78>)
 8001a36:	f002 fe4d 	bl	80046d4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001a3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a3e:	f001 fd45 	bl	80034cc <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);							// Blaue LED Platine zuruecksetzen
 8001a42:	2200      	movs	r2, #0
 8001a44:	2180      	movs	r1, #128	; 0x80
 8001a46:	4817      	ldr	r0, [pc, #92]	; (8001aa4 <testPCB_Leds+0x78>)
 8001a48:	f002 fe44 	bl	80046d4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001a4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a50:	f001 fd3c 	bl	80034cc <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);							// Gruene LED Platine setzen
 8001a54:	2201      	movs	r2, #1
 8001a56:	2104      	movs	r1, #4
 8001a58:	4812      	ldr	r0, [pc, #72]	; (8001aa4 <testPCB_Leds+0x78>)
 8001a5a:	f002 fe3b 	bl	80046d4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001a5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a62:	f001 fd33 	bl	80034cc <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);							// Gruene LED Platine zuruecksetzen
 8001a66:	2200      	movs	r2, #0
 8001a68:	2104      	movs	r1, #4
 8001a6a:	480e      	ldr	r0, [pc, #56]	; (8001aa4 <testPCB_Leds+0x78>)
 8001a6c:	f002 fe32 	bl	80046d4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001a70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a74:	f001 fd2a 	bl	80034cc <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);								// Rote LED Platine setzen
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a7e:	4809      	ldr	r0, [pc, #36]	; (8001aa4 <testPCB_Leds+0x78>)
 8001a80:	f002 fe28 	bl	80046d4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001a84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a88:	f001 fd20 	bl	80034cc <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);								// Rote LED Platine zuruecksetzen
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a92:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <testPCB_Leds+0x78>)
 8001a94:	f002 fe1e 	bl	80046d4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001a98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a9c:	f001 fd16 	bl	80034cc <HAL_Delay>
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40020400 	.word	0x40020400

08001aa8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001aae:	463b      	mov	r3, r7
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001aba:	4b44      	ldr	r3, [pc, #272]	; (8001bcc <MX_ADC1_Init+0x124>)
 8001abc:	4a44      	ldr	r2, [pc, #272]	; (8001bd0 <MX_ADC1_Init+0x128>)
 8001abe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ac0:	4b42      	ldr	r3, [pc, #264]	; (8001bcc <MX_ADC1_Init+0x124>)
 8001ac2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ac6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ac8:	4b40      	ldr	r3, [pc, #256]	; (8001bcc <MX_ADC1_Init+0x124>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001ace:	4b3f      	ldr	r3, [pc, #252]	; (8001bcc <MX_ADC1_Init+0x124>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ad4:	4b3d      	ldr	r3, [pc, #244]	; (8001bcc <MX_ADC1_Init+0x124>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ada:	4b3c      	ldr	r3, [pc, #240]	; (8001bcc <MX_ADC1_Init+0x124>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ae2:	4b3a      	ldr	r3, [pc, #232]	; (8001bcc <MX_ADC1_Init+0x124>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ae8:	4b38      	ldr	r3, [pc, #224]	; (8001bcc <MX_ADC1_Init+0x124>)
 8001aea:	4a3a      	ldr	r2, [pc, #232]	; (8001bd4 <MX_ADC1_Init+0x12c>)
 8001aec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001aee:	4b37      	ldr	r3, [pc, #220]	; (8001bcc <MX_ADC1_Init+0x124>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001af4:	4b35      	ldr	r3, [pc, #212]	; (8001bcc <MX_ADC1_Init+0x124>)
 8001af6:	2206      	movs	r2, #6
 8001af8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001afa:	4b34      	ldr	r3, [pc, #208]	; (8001bcc <MX_ADC1_Init+0x124>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b02:	4b32      	ldr	r3, [pc, #200]	; (8001bcc <MX_ADC1_Init+0x124>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b08:	4830      	ldr	r0, [pc, #192]	; (8001bcc <MX_ADC1_Init+0x124>)
 8001b0a:	f001 fd4b 	bl	80035a4 <HAL_ADC_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b14:	f001 f806 	bl	8002b24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001b18:	2307      	movs	r3, #7
 8001b1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001b20:	2301      	movs	r3, #1
 8001b22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b24:	463b      	mov	r3, r7
 8001b26:	4619      	mov	r1, r3
 8001b28:	4828      	ldr	r0, [pc, #160]	; (8001bcc <MX_ADC1_Init+0x124>)
 8001b2a:	f001 fd7f 	bl	800362c <HAL_ADC_ConfigChannel>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b34:	f000 fff6 	bl	8002b24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b40:	463b      	mov	r3, r7
 8001b42:	4619      	mov	r1, r3
 8001b44:	4821      	ldr	r0, [pc, #132]	; (8001bcc <MX_ADC1_Init+0x124>)
 8001b46:	f001 fd71 	bl	800362c <HAL_ADC_ConfigChannel>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001b50:	f000 ffe8 	bl	8002b24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001b54:	2304      	movs	r3, #4
 8001b56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b5c:	463b      	mov	r3, r7
 8001b5e:	4619      	mov	r1, r3
 8001b60:	481a      	ldr	r0, [pc, #104]	; (8001bcc <MX_ADC1_Init+0x124>)
 8001b62:	f001 fd63 	bl	800362c <HAL_ADC_ConfigChannel>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001b6c:	f000 ffda 	bl	8002b24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001b70:	2305      	movs	r3, #5
 8001b72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001b74:	2304      	movs	r3, #4
 8001b76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b78:	463b      	mov	r3, r7
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4813      	ldr	r0, [pc, #76]	; (8001bcc <MX_ADC1_Init+0x124>)
 8001b7e:	f001 fd55 	bl	800362c <HAL_ADC_ConfigChannel>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001b88:	f000 ffcc 	bl	8002b24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001b8c:	2306      	movs	r3, #6
 8001b8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001b90:	2305      	movs	r3, #5
 8001b92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b94:	463b      	mov	r3, r7
 8001b96:	4619      	mov	r1, r3
 8001b98:	480c      	ldr	r0, [pc, #48]	; (8001bcc <MX_ADC1_Init+0x124>)
 8001b9a:	f001 fd47 	bl	800362c <HAL_ADC_ConfigChannel>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001ba4:	f000 ffbe 	bl	8002b24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <MX_ADC1_Init+0x130>)
 8001baa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001bac:	2306      	movs	r3, #6
 8001bae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bb0:	463b      	mov	r3, r7
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4805      	ldr	r0, [pc, #20]	; (8001bcc <MX_ADC1_Init+0x124>)
 8001bb6:	f001 fd39 	bl	800362c <HAL_ADC_ConfigChannel>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001bc0:	f000 ffb0 	bl	8002b24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bc4:	bf00      	nop
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	2000004c 	.word	0x2000004c
 8001bd0:	40012000 	.word	0x40012000
 8001bd4:	0f000001 	.word	0x0f000001
 8001bd8:	10000012 	.word	0x10000012

08001bdc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08a      	sub	sp, #40	; 0x28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a15      	ldr	r2, [pc, #84]	; (8001c50 <HAL_ADC_MspInit+0x74>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d123      	bne.n	8001c46 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <HAL_ADC_MspInit+0x78>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	4a14      	ldr	r2, [pc, #80]	; (8001c54 <HAL_ADC_MspInit+0x78>)
 8001c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c08:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_ADC_MspInit+0x78>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_ADC_MspInit+0x78>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a0e      	ldr	r2, [pc, #56]	; (8001c54 <HAL_ADC_MspInit+0x78>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <HAL_ADC_MspInit+0x78>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 8001c2e:	23f8      	movs	r3, #248	; 0xf8
 8001c30:	617b      	str	r3, [r7, #20]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c32:	2303      	movs	r3, #3
 8001c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4805      	ldr	r0, [pc, #20]	; (8001c58 <HAL_ADC_MspInit+0x7c>)
 8001c42:	f002 fb83 	bl	800434c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001c46:	bf00      	nop
 8001c48:	3728      	adds	r7, #40	; 0x28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40012000 	.word	0x40012000
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020000 	.word	0x40020000

08001c5c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001c60:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <MX_CAN1_Init+0x64>)
 8001c62:	4a18      	ldr	r2, [pc, #96]	; (8001cc4 <MX_CAN1_Init+0x68>)
 8001c64:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001c66:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <MX_CAN1_Init+0x64>)
 8001c68:	2210      	movs	r2, #16
 8001c6a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001c6c:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <MX_CAN1_Init+0x64>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c72:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <MX_CAN1_Init+0x64>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <MX_CAN1_Init+0x64>)
 8001c7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c7e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001c80:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <MX_CAN1_Init+0x64>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001c86:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <MX_CAN1_Init+0x64>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <MX_CAN1_Init+0x64>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001c92:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <MX_CAN1_Init+0x64>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001c98:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <MX_CAN1_Init+0x64>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001c9e:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <MX_CAN1_Init+0x64>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <MX_CAN1_Init+0x64>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001caa:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <MX_CAN1_Init+0x64>)
 8001cac:	f001 ff0e 	bl	8003acc <HAL_CAN_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001cb6:	f000 ff35 	bl	8002b24 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000094 	.word	0x20000094
 8001cc4:	40006400 	.word	0x40006400

08001cc8 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8001ccc:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <MX_CAN3_Init+0x64>)
 8001cce:	4a18      	ldr	r2, [pc, #96]	; (8001d30 <MX_CAN3_Init+0x68>)
 8001cd0:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8001cd2:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <MX_CAN3_Init+0x64>)
 8001cd4:	2206      	movs	r2, #6
 8001cd6:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001cd8:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <MX_CAN3_Init+0x64>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001cde:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <MX_CAN3_Init+0x64>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <MX_CAN3_Init+0x64>)
 8001ce6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001cea:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001cec:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <MX_CAN3_Init+0x64>)
 8001cee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001cf2:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001cf4:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <MX_CAN3_Init+0x64>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <MX_CAN3_Init+0x64>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001d00:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <MX_CAN3_Init+0x64>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <MX_CAN3_Init+0x64>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001d0c:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <MX_CAN3_Init+0x64>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <MX_CAN3_Init+0x64>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001d18:	4804      	ldr	r0, [pc, #16]	; (8001d2c <MX_CAN3_Init+0x64>)
 8001d1a:	f001 fed7 	bl	8003acc <HAL_CAN_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001d24:	f000 fefe 	bl	8002b24 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	200000bc 	.word	0x200000bc
 8001d30:	40003400 	.word	0x40003400

08001d34 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08c      	sub	sp, #48	; 0x30
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 031c 	add.w	r3, r7, #28
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a2e      	ldr	r2, [pc, #184]	; (8001e0c <HAL_CAN_MspInit+0xd8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d128      	bne.n	8001da8 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d56:	4b2e      	ldr	r3, [pc, #184]	; (8001e10 <HAL_CAN_MspInit+0xdc>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	4a2d      	ldr	r2, [pc, #180]	; (8001e10 <HAL_CAN_MspInit+0xdc>)
 8001d5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d60:	6413      	str	r3, [r2, #64]	; 0x40
 8001d62:	4b2b      	ldr	r3, [pc, #172]	; (8001e10 <HAL_CAN_MspInit+0xdc>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6a:	61bb      	str	r3, [r7, #24]
 8001d6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d6e:	4b28      	ldr	r3, [pc, #160]	; (8001e10 <HAL_CAN_MspInit+0xdc>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a27      	ldr	r2, [pc, #156]	; (8001e10 <HAL_CAN_MspInit+0xdc>)
 8001d74:	f043 0308 	orr.w	r3, r3, #8
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b25      	ldr	r3, [pc, #148]	; (8001e10 <HAL_CAN_MspInit+0xdc>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d86:	2303      	movs	r3, #3
 8001d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d92:	2303      	movs	r3, #3
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d96:	2309      	movs	r3, #9
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d9a:	f107 031c 	add.w	r3, r7, #28
 8001d9e:	4619      	mov	r1, r3
 8001da0:	481c      	ldr	r0, [pc, #112]	; (8001e14 <HAL_CAN_MspInit+0xe0>)
 8001da2:	f002 fad3 	bl	800434c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8001da6:	e02d      	b.n	8001e04 <HAL_CAN_MspInit+0xd0>
  else if(canHandle->Instance==CAN3)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a1a      	ldr	r2, [pc, #104]	; (8001e18 <HAL_CAN_MspInit+0xe4>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d128      	bne.n	8001e04 <HAL_CAN_MspInit+0xd0>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001db2:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <HAL_CAN_MspInit+0xdc>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	4a16      	ldr	r2, [pc, #88]	; (8001e10 <HAL_CAN_MspInit+0xdc>)
 8001db8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dbe:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <HAL_CAN_MspInit+0xdc>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <HAL_CAN_MspInit+0xdc>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a10      	ldr	r2, [pc, #64]	; (8001e10 <HAL_CAN_MspInit+0xdc>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <HAL_CAN_MspInit+0xdc>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8001de2:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001df4:	230b      	movs	r3, #11
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4807      	ldr	r0, [pc, #28]	; (8001e1c <HAL_CAN_MspInit+0xe8>)
 8001e00:	f002 faa4 	bl	800434c <HAL_GPIO_Init>
}
 8001e04:	bf00      	nop
 8001e06:	3730      	adds	r7, #48	; 0x30
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40006400 	.word	0x40006400
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020c00 	.word	0x40020c00
 8001e18:	40003400 	.word	0x40003400
 8001e1c:	40020000 	.word	0x40020000

08001e20 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08e      	sub	sp, #56	; 0x38
 8001e24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
 8001e34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e36:	4bb7      	ldr	r3, [pc, #732]	; (8002114 <MX_GPIO_Init+0x2f4>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4ab6      	ldr	r2, [pc, #728]	; (8002114 <MX_GPIO_Init+0x2f4>)
 8001e3c:	f043 0310 	orr.w	r3, r3, #16
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4bb4      	ldr	r3, [pc, #720]	; (8002114 <MX_GPIO_Init+0x2f4>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0310 	and.w	r3, r3, #16
 8001e4a:	623b      	str	r3, [r7, #32]
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4e:	4bb1      	ldr	r3, [pc, #708]	; (8002114 <MX_GPIO_Init+0x2f4>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4ab0      	ldr	r2, [pc, #704]	; (8002114 <MX_GPIO_Init+0x2f4>)
 8001e54:	f043 0304 	orr.w	r3, r3, #4
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4bae      	ldr	r3, [pc, #696]	; (8002114 <MX_GPIO_Init+0x2f4>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	61fb      	str	r3, [r7, #28]
 8001e64:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e66:	4bab      	ldr	r3, [pc, #684]	; (8002114 <MX_GPIO_Init+0x2f4>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4aaa      	ldr	r2, [pc, #680]	; (8002114 <MX_GPIO_Init+0x2f4>)
 8001e6c:	f043 0320 	orr.w	r3, r3, #32
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4ba8      	ldr	r3, [pc, #672]	; (8002114 <MX_GPIO_Init+0x2f4>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0320 	and.w	r3, r3, #32
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e7e:	4ba5      	ldr	r3, [pc, #660]	; (8002114 <MX_GPIO_Init+0x2f4>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4aa4      	ldr	r2, [pc, #656]	; (8002114 <MX_GPIO_Init+0x2f4>)
 8001e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4ba2      	ldr	r3, [pc, #648]	; (8002114 <MX_GPIO_Init+0x2f4>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e96:	4b9f      	ldr	r3, [pc, #636]	; (8002114 <MX_GPIO_Init+0x2f4>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a9e      	ldr	r2, [pc, #632]	; (8002114 <MX_GPIO_Init+0x2f4>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b9c      	ldr	r3, [pc, #624]	; (8002114 <MX_GPIO_Init+0x2f4>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eae:	4b99      	ldr	r3, [pc, #612]	; (8002114 <MX_GPIO_Init+0x2f4>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	4a98      	ldr	r2, [pc, #608]	; (8002114 <MX_GPIO_Init+0x2f4>)
 8001eb4:	f043 0302 	orr.w	r3, r3, #2
 8001eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eba:	4b96      	ldr	r3, [pc, #600]	; (8002114 <MX_GPIO_Init+0x2f4>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ec6:	4b93      	ldr	r3, [pc, #588]	; (8002114 <MX_GPIO_Init+0x2f4>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a92      	ldr	r2, [pc, #584]	; (8002114 <MX_GPIO_Init+0x2f4>)
 8001ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b90      	ldr	r3, [pc, #576]	; (8002114 <MX_GPIO_Init+0x2f4>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ede:	4b8d      	ldr	r3, [pc, #564]	; (8002114 <MX_GPIO_Init+0x2f4>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a8c      	ldr	r2, [pc, #560]	; (8002114 <MX_GPIO_Init+0x2f4>)
 8001ee4:	f043 0308 	orr.w	r3, r3, #8
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b8a      	ldr	r3, [pc, #552]	; (8002114 <MX_GPIO_Init+0x2f4>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f248 0187 	movw	r1, #32903	; 0x8087
 8001efc:	4886      	ldr	r0, [pc, #536]	; (8002118 <MX_GPIO_Init+0x2f8>)
 8001efe:	f002 fbe9 	bl	80046d4 <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_RESET);
 8001f02:	2200      	movs	r2, #0
 8001f04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f08:	4884      	ldr	r0, [pc, #528]	; (800211c <MX_GPIO_Init+0x2fc>)
 8001f0a:	f002 fbe3 	bl	80046d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin, GPIO_PIN_RESET);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f242 0102 	movw	r1, #8194	; 0x2002
 8001f14:	4882      	ldr	r0, [pc, #520]	; (8002120 <MX_GPIO_Init+0x300>)
 8001f16:	f002 fbdd 	bl	80046d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f240 6102 	movw	r1, #1538	; 0x602
 8001f20:	4880      	ldr	r0, [pc, #512]	; (8002124 <MX_GPIO_Init+0x304>)
 8001f22:	f002 fbd7 	bl	80046d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8001f26:	2200      	movs	r2, #0
 8001f28:	f244 0184 	movw	r1, #16516	; 0x4084
 8001f2c:	487e      	ldr	r0, [pc, #504]	; (8002128 <MX_GPIO_Init+0x308>)
 8001f2e:	f002 fbd1 	bl	80046d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISOSPI_CS_GPIO_Port, ISOSPI_CS_Pin, GPIO_PIN_SET);
 8001f32:	2201      	movs	r2, #1
 8001f34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f38:	4877      	ldr	r0, [pc, #476]	; (8002118 <MX_GPIO_Init+0x2f8>)
 8001f3a:	f002 fbcb 	bl	80046d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 8001f44:	4879      	ldr	r0, [pc, #484]	; (800212c <MX_GPIO_Init+0x30c>)
 8001f46:	f002 fbc5 	bl	80046d4 <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2118      	movs	r1, #24
 8001f4e:	4878      	ldr	r0, [pc, #480]	; (8002130 <MX_GPIO_Init+0x310>)
 8001f50:	f002 fbc0 	bl	80046d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_CS_Pin|ISOSPI_EN_Pin
 8001f54:	f648 0387 	movw	r3, #34951	; 0x8887
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
                          |FREIGABE_Pin|INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f62:	2300      	movs	r3, #0
 8001f64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	486a      	ldr	r0, [pc, #424]	; (8002118 <MX_GPIO_Init+0x2f8>)
 8001f6e:	f002 f9ed 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 8001f72:	f44f 739c 	mov.w	r3, #312	; 0x138
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f84:	4619      	mov	r1, r3
 8001f86:	4864      	ldr	r0, [pc, #400]	; (8002118 <MX_GPIO_Init+0x2f8>)
 8001f88:	f002 f9e0 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8001f8c:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f92:	2303      	movs	r3, #3
 8001f94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	485d      	ldr	r0, [pc, #372]	; (8002118 <MX_GPIO_Init+0x2f8>)
 8001fa2:	f002 f9d3 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 8001fa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fac:	2301      	movs	r3, #1
 8001fae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8001fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4857      	ldr	r0, [pc, #348]	; (800211c <MX_GPIO_Init+0x2fc>)
 8001fc0:	f002 f9c4 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PCPin PC7 PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001fc4:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |SD_SW_Pin|GPIO_PIN_7|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4850      	ldr	r0, [pc, #320]	; (800211c <MX_GPIO_Init+0x2fc>)
 8001fda:	f002 f9b7 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF3 PF4 PF5
                           PFPin PFPin PFPin PFPin
                           PF10 PF11 PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001fde:	f645 73f9 	movw	r3, #24569	; 0x5ff9
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	484b      	ldr	r0, [pc, #300]	; (8002120 <MX_GPIO_Init+0x300>)
 8001ff4:	f002 f9aa 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin;
 8001ff8:	f242 0302 	movw	r3, #8194	; 0x2002
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffe:	2301      	movs	r3, #1
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002006:	2300      	movs	r3, #0
 8002008:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800200a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800200e:	4619      	mov	r1, r3
 8002010:	4843      	ldr	r0, [pc, #268]	; (8002120 <MX_GPIO_Init+0x300>)
 8002012:	f002 f99b 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin|PRECHARGE_IN_Pin;
 8002016:	f248 0304 	movw	r3, #32772	; 0x8004
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800201c:	2300      	movs	r3, #0
 800201e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002028:	4619      	mov	r1, r3
 800202a:	483d      	ldr	r0, [pc, #244]	; (8002120 <MX_GPIO_Init+0x300>)
 800202c:	f002 f98e 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|HW_WAKE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 8002030:	f641 0305 	movw	r3, #6149	; 0x1805
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002036:	2300      	movs	r3, #0
 8002038:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002042:	4619      	mov	r1, r3
 8002044:	4837      	ldr	r0, [pc, #220]	; (8002124 <MX_GPIO_Init+0x304>)
 8002046:	f002 f981 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 800204a:	f240 6302 	movw	r3, #1538	; 0x602
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002050:	2301      	movs	r3, #1
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002060:	4619      	mov	r1, r3
 8002062:	4830      	ldr	r0, [pc, #192]	; (8002124 <MX_GPIO_Init+0x304>)
 8002064:	f002 f972 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8002068:	f64b 7373 	movw	r3, #49011	; 0xbf73
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|I2C_SCL_Pin|I2C_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800206e:	2303      	movs	r3, #3
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207a:	4619      	mov	r1, r3
 800207c:	482a      	ldr	r0, [pc, #168]	; (8002128 <MX_GPIO_Init+0x308>)
 800207e:	f002 f965 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 8002082:	f244 0384 	movw	r3, #16516	; 0x4084
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002088:	2301      	movs	r3, #1
 800208a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002090:	2300      	movs	r3, #0
 8002092:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002098:	4619      	mov	r1, r3
 800209a:	4823      	ldr	r0, [pc, #140]	; (8002128 <MX_GPIO_Init+0x308>)
 800209c:	f002 f956 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8;
 80020a0:	f240 1343 	movw	r3, #323	; 0x143
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020a6:	2303      	movs	r3, #3
 80020a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b2:	4619      	mov	r1, r3
 80020b4:	481d      	ldr	r0, [pc, #116]	; (800212c <MX_GPIO_Init+0x30c>)
 80020b6:	f002 f949 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|SD_CMD_Pin;
 80020ba:	f240 7304 	movw	r3, #1796	; 0x704
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020c0:	2303      	movs	r3, #3
 80020c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020cc:	4619      	mov	r1, r3
 80020ce:	4818      	ldr	r0, [pc, #96]	; (8002130 <MX_GPIO_Init+0x310>)
 80020d0:	f002 f93c 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 80020d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020da:	2300      	movs	r3, #0
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 80020e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e6:	4619      	mov	r1, r3
 80020e8:	4811      	ldr	r0, [pc, #68]	; (8002130 <MX_GPIO_Init+0x310>)
 80020ea:	f002 f92f 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 80020ee:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f4:	2301      	movs	r3, #1
 80020f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fc:	2300      	movs	r3, #0
 80020fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002104:	4619      	mov	r1, r3
 8002106:	4809      	ldr	r0, [pc, #36]	; (800212c <MX_GPIO_Init+0x30c>)
 8002108:	f002 f920 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|DIGITAL2_Pin;
 800210c:	2318      	movs	r3, #24
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
 8002110:	e010      	b.n	8002134 <MX_GPIO_Init+0x314>
 8002112:	bf00      	nop
 8002114:	40023800 	.word	0x40023800
 8002118:	40021000 	.word	0x40021000
 800211c:	40020800 	.word	0x40020800
 8002120:	40021400 	.word	0x40021400
 8002124:	40020000 	.word	0x40020000
 8002128:	40020400 	.word	0x40020400
 800212c:	40021800 	.word	0x40021800
 8002130:	40020c00 	.word	0x40020c00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002134:	2301      	movs	r3, #1
 8002136:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213c:	2300      	movs	r3, #0
 800213e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002144:	4619      	mov	r1, r3
 8002146:	4803      	ldr	r0, [pc, #12]	; (8002154 <MX_GPIO_Init+0x334>)
 8002148:	f002 f900 	bl	800434c <HAL_GPIO_Init>

}
 800214c:	bf00      	nop
 800214e:	3738      	adds	r7, #56	; 0x38
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40020c00 	.word	0x40020c00

08002158 <calculateMovingAverage>:
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	80fb      	strh	r3, [r7, #6]
 8002162:	460b      	mov	r3, r1
 8002164:	80bb      	strh	r3, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	807b      	strh	r3, [r7, #2]
	return (oldValue + ((newValue - oldValue) / n));						// MovingAverage Calculation x_n  = x_{n-1} + ((x_n+x_{n-1})/n)
 800216a:	88ba      	ldrh	r2, [r7, #4]
 800216c:	88fb      	ldrh	r3, [r7, #6]
 800216e:	1ad2      	subs	r2, r2, r3
 8002170:	887b      	ldrh	r3, [r7, #2]
 8002172:	fb92 f3f3 	sdiv	r3, r2, r3
 8002176:	b29a      	uxth	r2, r3
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	4413      	add	r3, r2
 800217c:	b29b      	uxth	r3, r3
}
 800217e:	4618      	mov	r0, r3
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800218c:	b5b0      	push	{r4, r5, r7, lr}
 800218e:	b0b8      	sub	sp, #224	; 0xe0
 8002190:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002192:	f001 f93e 	bl	8003412 <HAL_Init>

  /* USER CODE BEGIN Init */
	// Definiere Variablen fuer Main-Funktion
	uint16_t timerPeriod, count = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
	uint8_t start_flag = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd

	// Definiere Variablen fuer BMS Zellen
	uint8_t data[36] = {0}, temp, CFG[6] = {0};
 80021a2:	2300      	movs	r3, #0
 80021a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80021a8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80021ac:	2220      	movs	r2, #32
 80021ae:	2100      	movs	r1, #0
 80021b0:	4618      	mov	r0, r3
 80021b2:	f006 fc87 	bl	8008ac4 <memset>
 80021b6:	2300      	movs	r3, #0
 80021b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80021bc:	2300      	movs	r3, #0
 80021be:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
	uint32_t tmp;
	uint16_t spannungen[12] = {0}, temperatur[2] = {0}, tmp_mean;
 80021c2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	609a      	str	r2, [r3, #8]
 80021ce:	60da      	str	r2, [r3, #12]
 80021d0:	611a      	str	r2, [r3, #16]
 80021d2:	615a      	str	r2, [r3, #20]
 80021d4:	2300      	movs	r3, #0
 80021d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	// Definiere Variablen fuer Main-Funktion
	uint8_t TxData[8], OutData[4], InData[3], status;
  	CAN_FilterTypeDef sFilterConfig;

  	// Erstelle Can-Nachrichten
  	CAN_TxHeaderTypeDef TxMessage = {0x123, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 80021da:	4bcd      	ldr	r3, [pc, #820]	; (8002510 <main+0x384>)
 80021dc:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80021e0:	461d      	mov	r5, r3
 80021e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80021ea:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxOutput = {BMS_CAN_DIGITAL_OUT, 0, CAN_RTR_DATA, CAN_ID_STD, 4, DISABLE};
 80021ee:	4bc9      	ldr	r3, [pc, #804]	; (8002514 <main+0x388>)
 80021f0:	f107 0418 	add.w	r4, r7, #24
 80021f4:	461d      	mov	r5, r3
 80021f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80021fe:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxInput = {BMS_CAN_DIGITAL_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 3, DISABLE};
 8002202:	4bc5      	ldr	r3, [pc, #788]	; (8002518 <main+0x38c>)
 8002204:	463c      	mov	r4, r7
 8002206:	461d      	mov	r5, r3
 8002208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800220a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800220c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002210:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002214:	f000 fbcc 	bl	80029b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002218:	f7ff fe02 	bl	8001e20 <MX_GPIO_Init>
  MX_CAN1_Init();
 800221c:	f7ff fd1e 	bl	8001c5c <MX_CAN1_Init>
  MX_SPI4_Init();
 8002220:	f000 fcec 	bl	8002bfc <MX_SPI4_Init>
  MX_USART2_UART_Init();
 8002224:	f001 f83e 	bl	80032a4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002228:	f7ff fc3e 	bl	8001aa8 <MX_ADC1_Init>
  MX_TIM1_Init();
 800222c:	f000 fe36 	bl	8002e9c <MX_TIM1_Init>
  MX_TIM4_Init();
 8002230:	f000 febc 	bl	8002fac <MX_TIM4_Init>
  MX_SPI1_Init();
 8002234:	f000 fca4 	bl	8002b80 <MX_SPI1_Init>
  MX_CAN3_Init();
 8002238:	f7ff fd46 	bl	8001cc8 <MX_CAN3_Init>
  MX_TIM6_Init();
 800223c:	f000 ff32 	bl	80030a4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 8002240:	f7ff fa46 	bl	80016d0 <readResetSource>
 8002244:	4603      	mov	r3, r0
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fa94 	bl	8001774 <printResetSource>

	/* Teste serielle Schnittstelle*/
	#define TEST_STRING_UART		"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 800224c:	213a      	movs	r1, #58	; 0x3a
 800224e:	48b3      	ldr	r0, [pc, #716]	; (800251c <main+0x390>)
 8002250:	f7fe f998 	bl	8000584 <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 8002254:	f7ff fa12 	bl	800167c <collectSystemInfo>
#endif

	// Leds Testen
	testPCB_Leds();
 8002258:	f7ff fbe8 	bl	8001a2c <testPCB_Leds>

  	// Lese alle Eingaenge
  	readall_inputs();
 800225c:	f7ff fb2a 	bl	80018b4 <readall_inputs>

  	// IsoSPI einschalten, Isolierte Spannungsversorgung IsoSPI und HV-Precharge Messung einschalten
  	ISOSPI_ENABLE();
 8002260:	2201      	movs	r2, #1
 8002262:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002266:	48ae      	ldr	r0, [pc, #696]	; (8002520 <main+0x394>)
 8002268:	f002 fa34 	bl	80046d4 <HAL_GPIO_WritePin>

  	// Warten fuer eine kurze Zeit
  	HAL_Delay(20);
 800226c:	2014      	movs	r0, #20
 800226e:	f001 f92d 	bl	80034cc <HAL_Delay>

    uartTransmit("\n", 1);
 8002272:	2101      	movs	r1, #1
 8002274:	48ab      	ldr	r0, [pc, #684]	; (8002524 <main+0x398>)
 8002276:	f7fe f985 	bl	8000584 <uartTransmit>
#define TEST_LTC6811	"Starte Batteriemanagement-System\n"
    uartTransmit(TEST_LTC6811, sizeof(TEST_LTC6811));
 800227a:	2122      	movs	r1, #34	; 0x22
 800227c:	48aa      	ldr	r0, [pc, #680]	; (8002528 <main+0x39c>)
 800227e:	f7fe f981 	bl	8000584 <uartTransmit>

	if ((temp = ltc6811_check()) != 0)									// LTC6804 Selftest durchfuehren
 8002282:	f7fe fbf4 	bl	8000a6e <ltc6811_check>
 8002286:	4603      	mov	r3, r0
 8002288:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 800228c:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01f      	beq.n	80022d4 <main+0x148>
	{
#define LTC6811_FAILED	"Selbsttest LTC6811 fehlerhaft\n"
		uartTransmit(LTC6811_FAILED, sizeof(LTC6811_FAILED));			// Ausgabe bei Fehlerhaftem Selbsttest
 8002294:	211f      	movs	r1, #31
 8002296:	48a5      	ldr	r0, [pc, #660]	; (800252c <main+0x3a0>)
 8002298:	f7fe f974 	bl	8000584 <uartTransmit>
		leuchten_out.RedLed = 1;										// Variable setzen
 800229c:	4aa4      	ldr	r2, [pc, #656]	; (8002530 <main+0x3a4>)
 800229e:	7813      	ldrb	r3, [r2, #0]
 80022a0:	f043 0320 	orr.w	r3, r3, #32
 80022a4:	7013      	strb	r3, [r2, #0]
	    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);// Ausgabe auf LEDs
 80022a6:	4ba2      	ldr	r3, [pc, #648]	; (8002530 <main+0x3a4>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	461a      	mov	r2, r3
 80022b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022b6:	489f      	ldr	r0, [pc, #636]	; (8002534 <main+0x3a8>)
 80022b8:	f002 fa0c 	bl	80046d4 <HAL_GPIO_WritePin>

	    uartTransmitNumber(temp, 10);
 80022bc:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80022c0:	210a      	movs	r1, #10
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe f972 	bl	80005ac <uartTransmitNumber>
		uartTransmit("\n", 1);
 80022c8:	2101      	movs	r1, #1
 80022ca:	4896      	ldr	r0, [pc, #600]	; (8002524 <main+0x398>)
 80022cc:	f7fe f95a 	bl	8000584 <uartTransmit>

		return 0;														// Programm abbrechen
 80022d0:	2300      	movs	r3, #0
 80022d2:	e352      	b.n	800297a <main+0x7ee>
	}
	else
	{
#define LTC6811_PASSED	"Selbsttest LTC6811 erfolgreich\n"
		uartTransmit(LTC6811_PASSED, sizeof(LTC6811_PASSED));			// Ausgabe bei Erfolgreichem Selbsttest
 80022d4:	2120      	movs	r1, #32
 80022d6:	4898      	ldr	r0, [pc, #608]	; (8002538 <main+0x3ac>)
 80022d8:	f7fe f954 	bl	8000584 <uartTransmit>
	}

    // LTC6811 initialisieren
	CFG[0] = 0xF8;
 80022dc:	23f8      	movs	r3, #248	; 0xf8
 80022de:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
	CFG[1] = 0xCF;
 80022e2:	23cf      	movs	r3, #207	; 0xcf
 80022e4:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
	CFG[2] = 0x17;
 80022e8:	2317      	movs	r3, #23
 80022ea:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
	CFG[3] = 0xA4;
 80022ee:	23a4      	movs	r3, #164	; 0xa4
 80022f0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	CFG[4] = 0x00;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
	CFG[5] = 0x00;
 80022fa:	2300      	movs	r3, #0
 80022fc:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
	ltc6811_write(WRCFG, &CFG[0]);
 8002300:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002304:	4619      	mov	r1, r3
 8002306:	2001      	movs	r0, #1
 8002308:	f7fe fa42 	bl	8000790 <ltc6811_write>

	// Alle Register zuruecksetzen
	ltc6811(CLRCELL);
 800230c:	f240 7011 	movw	r0, #1809	; 0x711
 8002310:	f7fe f9ea 	bl	80006e8 <ltc6811>
	ltc6811(CLRSTAT);
 8002314:	f240 7013 	movw	r0, #1811	; 0x713
 8002318:	f7fe f9e6 	bl	80006e8 <ltc6811>
	ltc6811(CLRAUX);
 800231c:	f240 7012 	movw	r0, #1810	; 0x712
 8002320:	f7fe f9e2 	bl	80006e8 <ltc6811>

	// Erster ADC Vorgang ist ungueltig
	ltc6811(ADCVAX | MD73 | CELLALL);									// Initial Command Zellen auslesen
 8002324:	f240 506f 	movw	r0, #1391	; 0x56f
 8002328:	f7fe f9de 	bl	80006e8 <ltc6811>

	tmp_mean = 65535;
 800232c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002330:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	timerPeriod = (HAL_RCC_GetPCLK2Freq() / htim1.Init.Prescaler);
 8002334:	f002 feb8 	bl	80050a8 <HAL_RCC_GetPCLK2Freq>
 8002338:	4602      	mov	r2, r0
 800233a:	4b80      	ldr	r3, [pc, #512]	; (800253c <main+0x3b0>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002342:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
  	// Start timer
	if (HAL_TIM_Base_Start_IT(&htim1) != HAL_OK);
 8002346:	487d      	ldr	r0, [pc, #500]	; (800253c <main+0x3b0>)
 8002348:	f004 faa2 	bl	8006890 <HAL_TIM_Base_Start_IT>
	if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1) != HAL_OK);
 800234c:	2100      	movs	r1, #0
 800234e:	487b      	ldr	r0, [pc, #492]	; (800253c <main+0x3b0>)
 8002350:	f004 fbc4 	bl	8006adc <HAL_TIM_IC_Start_IT>
	if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2) != HAL_OK);
 8002354:	2104      	movs	r1, #4
 8002356:	4879      	ldr	r0, [pc, #484]	; (800253c <main+0x3b0>)
 8002358:	f004 fbc0 	bl	8006adc <HAL_TIM_IC_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim6);
 800235c:	4878      	ldr	r0, [pc, #480]	; (8002540 <main+0x3b4>)
 800235e:	f004 fa97 	bl	8006890 <HAL_TIM_Base_Start_IT>

  	// Starte CAN Bus
  	if((status = HAL_CAN_Start(&hcan3)) != HAL_OK)
 8002362:	4878      	ldr	r0, [pc, #480]	; (8002544 <main+0x3b8>)
 8002364:	f001 fd9a 	bl	8003e9c <HAL_CAN_Start>
 8002368:	4603      	mov	r3, r0
 800236a:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 800236e:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8002372:	2b00      	cmp	r3, #0
 8002374:	d006      	beq.n	8002384 <main+0x1f8>
  	{
  		// Start Error
  		hal_error(status);
 8002376:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fa6a 	bl	8001854 <hal_error>
  		Error_Handler();
 8002380:	f000 fbd0 	bl	8002b24 <Error_Handler>
  	}
  	uartTransmit("CAN START\n", 10);
 8002384:	210a      	movs	r1, #10
 8002386:	4870      	ldr	r0, [pc, #448]	; (8002548 <main+0x3bc>)
 8002388:	f7fe f8fc 	bl	8000584 <uartTransmit>

  	// Aktiviere Interrupts fuer CAN Bus
  	if((status = HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING)) != HAL_OK)
 800238c:	2102      	movs	r1, #2
 800238e:	486d      	ldr	r0, [pc, #436]	; (8002544 <main+0x3b8>)
 8002390:	f001 fea3 	bl	80040da <HAL_CAN_ActivateNotification>
 8002394:	4603      	mov	r3, r0
 8002396:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 800239a:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d006      	beq.n	80023b0 <main+0x224>
  	{
  		/* Notification Error */
  		hal_error(status);
 80023a2:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fa54 	bl	8001854 <hal_error>
  		Error_Handler();
 80023ac:	f000 fbba 	bl	8002b24 <Error_Handler>
  	}
  	uartTransmit("Send Message\n", 13);
 80023b0:	210d      	movs	r1, #13
 80023b2:	4866      	ldr	r0, [pc, #408]	; (800254c <main+0x3c0>)
 80023b4:	f7fe f8e6 	bl	8000584 <uartTransmit>

  	// Filter Bank initialisieren um Daten zu empfangen
    sFilterConfig.FilterBank = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80023bc:	2300      	movs	r3, #0
 80023be:	663b      	str	r3, [r7, #96]	; 0x60
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80023c0:	2301      	movs	r3, #1
 80023c2:	667b      	str	r3, [r7, #100]	; 0x64
    sFilterConfig.FilterIdHigh = 0x0000;
 80023c4:	2300      	movs	r3, #0
 80023c6:	64bb      	str	r3, [r7, #72]	; 0x48
    sFilterConfig.FilterIdLow = 0x0000;
 80023c8:	2300      	movs	r3, #0
 80023ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 80023cc:	2300      	movs	r3, #0
 80023ce:	653b      	str	r3, [r7, #80]	; 0x50
    sFilterConfig.FilterMaskIdLow = 0x0000;
 80023d0:	2300      	movs	r3, #0
 80023d2:	657b      	str	r3, [r7, #84]	; 0x54
    sFilterConfig.FilterFIFOAssignment = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	65bb      	str	r3, [r7, #88]	; 0x58
    sFilterConfig.FilterActivation = ENABLE;
 80023d8:	2301      	movs	r3, #1
 80023da:	66bb      	str	r3, [r7, #104]	; 0x68

    // Filter Bank schreiben
    if((status = HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 80023dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023e0:	4619      	mov	r1, r3
 80023e2:	4858      	ldr	r0, [pc, #352]	; (8002544 <main+0x3b8>)
 80023e4:	f001 fc6e 	bl	8003cc4 <HAL_CAN_ConfigFilter>
 80023e8:	4603      	mov	r3, r0
 80023ea:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 80023ee:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d006      	beq.n	8002404 <main+0x278>
    {
    	/* Filter configuration Error */
  		hal_error(status);
 80023f6:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff fa2a 	bl	8001854 <hal_error>
  		Error_Handler();
 8002400:	f000 fb90 	bl	8002b24 <Error_Handler>
    }

    // Test CAN Nachricht beschreiben
    for (uint8_t j = 0; j < 8; j++)
 8002404:	2300      	movs	r3, #0
 8002406:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 800240a:	e00e      	b.n	800242a <main+0x29e>
    {
    	TxData[j] = (j + 1);
 800240c:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8002410:	f897 20d5 	ldrb.w	r2, [r7, #213]	; 0xd5
 8002414:	3201      	adds	r2, #1
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	33e0      	adds	r3, #224	; 0xe0
 800241a:	443b      	add	r3, r7
 800241c:	f803 2c68 	strb.w	r2, [r3, #-104]
    for (uint8_t j = 0; j < 8; j++)
 8002420:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8002424:	3301      	adds	r3, #1
 8002426:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 800242a:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 800242e:	2b07      	cmp	r3, #7
 8002430:	d9ec      	bls.n	800240c <main+0x280>
    }

	if ((sdc_in.sdcinput & 0x0E) && (sdc_in.IMD_OK_IN != 1))					// SDC OK; Motor, BTB, IMD und HVIL OK
 8002432:	4b47      	ldr	r3, [pc, #284]	; (8002550 <main+0x3c4>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	f003 030e 	and.w	r3, r3, #14
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 8096 	beq.w	800256c <main+0x3e0>
 8002440:	4b43      	ldr	r3, [pc, #268]	; (8002550 <main+0x3c4>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	f040 808e 	bne.w	800256c <main+0x3e0>
	{
		#define SDC_STRING_ERROR			"\nSDC ist nicht geschlossen"
		uartTransmit(SDC_STRING_ERROR, sizeof(SDC_STRING_ERROR));
 8002450:	211b      	movs	r1, #27
 8002452:	4840      	ldr	r0, [pc, #256]	; (8002554 <main+0x3c8>)
 8002454:	f7fe f896 	bl	8000584 <uartTransmit>

		// LEDs setzen bei SDC Fehler
		leuchten_out.GreenLed = 0;
 8002458:	4a35      	ldr	r2, [pc, #212]	; (8002530 <main+0x3a4>)
 800245a:	7813      	ldrb	r3, [r2, #0]
 800245c:	f36f 1386 	bfc	r3, #6, #1
 8002460:	7013      	strb	r3, [r2, #0]
		leuchten_out.RedLed = 1;
 8002462:	4a33      	ldr	r2, [pc, #204]	; (8002530 <main+0x3a4>)
 8002464:	7813      	ldrb	r3, [r2, #0]
 8002466:	f043 0320 	orr.w	r3, r3, #32
 800246a:	7013      	strb	r3, [r2, #0]
		leuchten_out.AkkuErrorLed = 0;
 800246c:	4a30      	ldr	r2, [pc, #192]	; (8002530 <main+0x3a4>)
 800246e:	7813      	ldrb	r3, [r2, #0]
 8002470:	f36f 0382 	bfc	r3, #2, #1
 8002474:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);
 8002476:	4b2e      	ldr	r3, [pc, #184]	; (8002530 <main+0x3a4>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800247e:	b2db      	uxtb	r3, r3
 8002480:	461a      	mov	r2, r3
 8002482:	2104      	movs	r1, #4
 8002484:	482b      	ldr	r0, [pc, #172]	; (8002534 <main+0x3a8>)
 8002486:	f002 f925 	bl	80046d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);
 800248a:	4b29      	ldr	r3, [pc, #164]	; (8002530 <main+0x3a4>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002492:	b2db      	uxtb	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800249a:	4826      	ldr	r0, [pc, #152]	; (8002534 <main+0x3a8>)
 800249c:	f002 f91a 	bl	80046d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AKKU_LED_GPIO_Port, AKKU_LED_Pin, leuchten_out.AkkuErrorLed);
 80024a0:	4b23      	ldr	r3, [pc, #140]	; (8002530 <main+0x3a4>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	461a      	mov	r2, r3
 80024ac:	2180      	movs	r1, #128	; 0x80
 80024ae:	482a      	ldr	r0, [pc, #168]	; (8002558 <main+0x3cc>)
 80024b0:	f002 f910 	bl	80046d4 <HAL_GPIO_WritePin>

		// Ausgabe welcher Fehler vorhanden
		// Motorsteuergeraet Fehler
		if(sdc_in.MotorSDC == 1)
 80024b4:	4b26      	ldr	r3, [pc, #152]	; (8002550 <main+0x3c4>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <main+0x33e>
		{
			#define SDC_STRING_MOTOR		"\nSDC Motor hat einen Fehler und ist offen"
			uartTransmit(SDC_STRING_MOTOR, sizeof(SDC_STRING_MOTOR));
 80024c2:	212a      	movs	r1, #42	; 0x2a
 80024c4:	4825      	ldr	r0, [pc, #148]	; (800255c <main+0x3d0>)
 80024c6:	f7fe f85d 	bl	8000584 <uartTransmit>
		}

		// BamoCar Fehler
		if (sdc_in.BTB_SDC == 1)
 80024ca:	4b21      	ldr	r3, [pc, #132]	; (8002550 <main+0x3c4>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <main+0x354>
		{
			#define SDC_STRING_BTB			"\nSDC BTB hat einen Fehler und ist offen"
			uartTransmit(SDC_STRING_BTB, sizeof(SDC_STRING_BTB));
 80024d8:	2128      	movs	r1, #40	; 0x28
 80024da:	4821      	ldr	r0, [pc, #132]	; (8002560 <main+0x3d4>)
 80024dc:	f7fe f852 	bl	8000584 <uartTransmit>
		}

		// HVIL Fehler
		if (sdc_in.HVIL == 1)
 80024e0:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <main+0x3c4>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <main+0x36a>
		{
			#define SDC_STRING_HVIL			"\nSDC HVIL ist nicht geschlossen"
			uartTransmit(SDC_STRING_HVIL, sizeof(SDC_STRING_HVIL));
 80024ee:	2120      	movs	r1, #32
 80024f0:	481c      	ldr	r0, [pc, #112]	; (8002564 <main+0x3d8>)
 80024f2:	f7fe f847 	bl	8000584 <uartTransmit>
		}

		// IMD Fehler
		if (sdc_in.IMD_OK_IN != 1)
 80024f6:	4b16      	ldr	r3, [pc, #88]	; (8002550 <main+0x3c4>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d155      	bne.n	80025b0 <main+0x424>
		{
			#define SDC_STRING_IMD			"\nSDC IMD hat einen Fehler"
			uartTransmit(SDC_STRING_IMD, sizeof(SDC_STRING_IMD));
 8002504:	211a      	movs	r1, #26
 8002506:	4818      	ldr	r0, [pc, #96]	; (8002568 <main+0x3dc>)
 8002508:	f7fe f83c 	bl	8000584 <uartTransmit>
		if (sdc_in.IMD_OK_IN != 1)
 800250c:	e050      	b.n	80025b0 <main+0x424>
 800250e:	bf00      	nop
 8002510:	080090a4 	.word	0x080090a4
 8002514:	080090bc 	.word	0x080090bc
 8002518:	080090d4 	.word	0x080090d4
 800251c:	08008f00 	.word	0x08008f00
 8002520:	40021000 	.word	0x40021000
 8002524:	08008f3c 	.word	0x08008f3c
 8002528:	08008f40 	.word	0x08008f40
 800252c:	08008f64 	.word	0x08008f64
 8002530:	20000044 	.word	0x20000044
 8002534:	40020400 	.word	0x40020400
 8002538:	08008f84 	.word	0x08008f84
 800253c:	200001b8 	.word	0x200001b8
 8002540:	20000250 	.word	0x20000250
 8002544:	200000bc 	.word	0x200000bc
 8002548:	08008fa4 	.word	0x08008fa4
 800254c:	08008fb0 	.word	0x08008fb0
 8002550:	20000034 	.word	0x20000034
 8002554:	08008fc0 	.word	0x08008fc0
 8002558:	40021800 	.word	0x40021800
 800255c:	08008fdc 	.word	0x08008fdc
 8002560:	08009008 	.word	0x08009008
 8002564:	08009030 	.word	0x08009030
 8002568:	08009050 	.word	0x08009050
		}
	}
	else
	{
		// Keine Fehler, LEDs fuer OK setzen
		system_out.AmsOK = 1;
 800256c:	4a94      	ldr	r2, [pc, #592]	; (80027c0 <main+0x634>)
 800256e:	7813      	ldrb	r3, [r2, #0]
 8002570:	f043 0304 	orr.w	r3, r3, #4
 8002574:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, system_out.AmsOK);
 8002576:	4b92      	ldr	r3, [pc, #584]	; (80027c0 <main+0x634>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800257e:	b2db      	uxtb	r3, r3
 8002580:	461a      	mov	r2, r3
 8002582:	2180      	movs	r1, #128	; 0x80
 8002584:	488f      	ldr	r0, [pc, #572]	; (80027c4 <main+0x638>)
 8002586:	f002 f8a5 	bl	80046d4 <HAL_GPIO_WritePin>
		leuchten_out.GreenLed = 1;
 800258a:	4a8f      	ldr	r2, [pc, #572]	; (80027c8 <main+0x63c>)
 800258c:	7813      	ldrb	r3, [r2, #0]
 800258e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002592:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);
 8002594:	4b8c      	ldr	r3, [pc, #560]	; (80027c8 <main+0x63c>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800259c:	b2db      	uxtb	r3, r3
 800259e:	461a      	mov	r2, r3
 80025a0:	2104      	movs	r1, #4
 80025a2:	488a      	ldr	r0, [pc, #552]	; (80027cc <main+0x640>)
 80025a4:	f002 f896 	bl	80046d4 <HAL_GPIO_WritePin>

		// Ausgabe SDC geschlossen
		#define SDC_STRING_OK				"\nSDC ist geschlossen"
		uartTransmit(SDC_STRING_OK, sizeof(SDC_STRING_OK));
 80025a8:	2115      	movs	r1, #21
 80025aa:	4889      	ldr	r0, [pc, #548]	; (80027d0 <main+0x644>)
 80025ac:	f7fd ffea 	bl	8000584 <uartTransmit>
	}

	// Digitales Poti initialisieren
	initAD8403();
 80025b0:	f7fd ffcc 	bl	800054c <initAD8403>

	timemillisekunden = millis();
 80025b4:	f7ff fa32 	bl	8001a1c <millis>
 80025b8:	4603      	mov	r3, r0
 80025ba:	4a86      	ldr	r2, [pc, #536]	; (80027d4 <main+0x648>)
 80025bc:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// Task wird jede Millisekunde ausgefuehrt
		if (millisekunden_flag_1 == 1)
 80025be:	4b86      	ldr	r3, [pc, #536]	; (80027d8 <main+0x64c>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d10a      	bne.n	80025de <main+0x452>
		{
			count++;													// Zaehler count hochzaehlen
 80025c8:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 80025cc:	3301      	adds	r3, #1
 80025ce:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
			millisekunden_flag_1 = 0;									// Setze Millisekunden-Flag zurueck
 80025d2:	4b81      	ldr	r3, [pc, #516]	; (80027d8 <main+0x64c>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	701a      	strb	r2, [r3, #0]

			// Setzen des Start Flags,  damit Tasks nur einmal pro ms aufgerufen werden kann
			start_flag = 1;												// Setze Start Flag
 80025d8:	2301      	movs	r3, #1
 80025da:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
		}

		// Task wird alle 100 Millisekunden ausgefuehrt
		if (((millis() - timemillisekunden) > 100) && (start_flag == 1))
 80025de:	f7ff fa1d 	bl	8001a1c <millis>
 80025e2:	4602      	mov	r2, r0
 80025e4:	4b7b      	ldr	r3, [pc, #492]	; (80027d4 <main+0x648>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b64      	cmp	r3, #100	; 0x64
 80025ec:	d905      	bls.n	80025fa <main+0x46e>
 80025ee:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d101      	bne.n	80025fa <main+0x46e>
		{
			// Lese alle Eingaenge
			readall_inputs();
 80025f6:	f7ff f95d 	bl	80018b4 <readall_inputs>
		}

		// Task wird alle 200 Millisekunden ausgefuehrt
		if (((millis() - timemillisekunden) > 200) && (start_flag == 1))
 80025fa:	f7ff fa0f 	bl	8001a1c <millis>
 80025fe:	4602      	mov	r2, r0
 8002600:	4b74      	ldr	r3, [pc, #464]	; (80027d4 <main+0x648>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2bc8      	cmp	r3, #200	; 0xc8
 8002608:	f240 8147 	bls.w	800289a <main+0x70e>
 800260c:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8002610:	2b01      	cmp	r3, #1
 8002612:	f040 8142 	bne.w	800289a <main+0x70e>
		{
			ltc6811(ADCVC | MD73 | CELLALL);
 8002616:	f44f 7058 	mov.w	r0, #864	; 0x360
 800261a:	f7fe f865 	bl	80006e8 <ltc6811>
			HAL_Delay(5);
 800261e:	2005      	movs	r0, #5
 8002620:	f000 ff54 	bl	80034cc <HAL_Delay>

			ltc6811_read(RDCVA, &data[0]);
 8002624:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002628:	4619      	mov	r1, r3
 800262a:	2004      	movs	r0, #4
 800262c:	f7fe f932 	bl	8000894 <ltc6811_read>
			ltc6811_read(RDCVB, &data[6]);
 8002630:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002634:	3306      	adds	r3, #6
 8002636:	4619      	mov	r1, r3
 8002638:	2006      	movs	r0, #6
 800263a:	f7fe f92b 	bl	8000894 <ltc6811_read>
			ltc6811_read(RDCVC, &data[12]);
 800263e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002642:	330c      	adds	r3, #12
 8002644:	4619      	mov	r1, r3
 8002646:	2008      	movs	r0, #8
 8002648:	f7fe f924 	bl	8000894 <ltc6811_read>
			ltc6811_read(RDCVD, &data[18]);
 800264c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002650:	3312      	adds	r3, #18
 8002652:	4619      	mov	r1, r3
 8002654:	200a      	movs	r0, #10
 8002656:	f7fe f91d 	bl	8000894 <ltc6811_read>

			uartTransmit("Spannungen\n", 11);
 800265a:	210b      	movs	r1, #11
 800265c:	485f      	ldr	r0, [pc, #380]	; (80027dc <main+0x650>)
 800265e:	f7fd ff91 	bl	8000584 <uartTransmit>

			for (uint8_t i = 0; i < 12; i++)
 8002662:	2300      	movs	r3, #0
 8002664:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 8002668:	e020      	b.n	80026ac <main+0x520>
			{
				spannungen[i] = ((data[i*2+1]<<8) | data[i*2]);
 800266a:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	3301      	adds	r3, #1
 8002672:	33e0      	adds	r3, #224	; 0xe0
 8002674:	443b      	add	r3, r7
 8002676:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800267a:	021b      	lsls	r3, r3, #8
 800267c:	b21a      	sxth	r2, r3
 800267e:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	33e0      	adds	r3, #224	; 0xe0
 8002686:	443b      	add	r3, r7
 8002688:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800268c:	b21b      	sxth	r3, r3
 800268e:	4313      	orrs	r3, r2
 8002690:	b21a      	sxth	r2, r3
 8002692:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8002696:	b292      	uxth	r2, r2
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	33e0      	adds	r3, #224	; 0xe0
 800269c:	443b      	add	r3, r7
 800269e:	f823 2c5c 	strh.w	r2, [r3, #-92]
			for (uint8_t i = 0; i < 12; i++)
 80026a2:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 80026a6:	3301      	adds	r3, #1
 80026a8:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 80026ac:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 80026b0:	2b0b      	cmp	r3, #11
 80026b2:	d9da      	bls.n	800266a <main+0x4de>
			}

			for (uint8_t i = 0; i < 12; i++)
 80026b4:	2300      	movs	r3, #0
 80026b6:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 80026ba:	e013      	b.n	80026e4 <main+0x558>
			{
				uartTransmitNumber(spannungen[i], 10);
 80026bc:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	33e0      	adds	r3, #224	; 0xe0
 80026c4:	443b      	add	r3, r7
 80026c6:	f833 3c5c 	ldrh.w	r3, [r3, #-92]
 80026ca:	210a      	movs	r1, #10
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fd ff6d 	bl	80005ac <uartTransmitNumber>
				uartTransmit(";", 1);
 80026d2:	2101      	movs	r1, #1
 80026d4:	4842      	ldr	r0, [pc, #264]	; (80027e0 <main+0x654>)
 80026d6:	f7fd ff55 	bl	8000584 <uartTransmit>
			for (uint8_t i = 0; i < 12; i++)
 80026da:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80026de:	3301      	adds	r3, #1
 80026e0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 80026e4:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80026e8:	2b0b      	cmp	r3, #11
 80026ea:	d9e7      	bls.n	80026bc <main+0x530>
			}

			tmp = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			for (uint8_t i = 0; i < 12; i++)
 80026f2:	2300      	movs	r3, #0
 80026f4:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
 80026f8:	e011      	b.n	800271e <main+0x592>
			{
				tmp += spannungen[i];
 80026fa:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	33e0      	adds	r3, #224	; 0xe0
 8002702:	443b      	add	r3, r7
 8002704:	f833 3c5c 	ldrh.w	r3, [r3, #-92]
 8002708:	461a      	mov	r2, r3
 800270a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800270e:	4413      	add	r3, r2
 8002710:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			for (uint8_t i = 0; i < 12; i++)
 8002714:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8002718:	3301      	adds	r3, #1
 800271a:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
 800271e:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8002722:	2b0b      	cmp	r3, #11
 8002724:	d9e9      	bls.n	80026fa <main+0x56e>
			}
			tmp /= 12;
 8002726:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800272a:	4a2e      	ldr	r2, [pc, #184]	; (80027e4 <main+0x658>)
 800272c:	fba2 2303 	umull	r2, r3, r2, r3
 8002730:	08db      	lsrs	r3, r3, #3
 8002732:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			uartTransmitNumber(tmp, 10);
 8002736:	210a      	movs	r1, #10
 8002738:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800273c:	f7fd ff36 	bl	80005ac <uartTransmitNumber>
			uartTransmit(";", 1);
 8002740:	2101      	movs	r1, #1
 8002742:	4827      	ldr	r0, [pc, #156]	; (80027e0 <main+0x654>)
 8002744:	f7fd ff1e 	bl	8000584 <uartTransmit>

			tmp_mean = calculateMovingAverage(tmp_mean, tmp, 10);
 8002748:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800274c:	b299      	uxth	r1, r3
 800274e:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8002752:	220a      	movs	r2, #10
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fcff 	bl	8002158 <calculateMovingAverage>
 800275a:	4603      	mov	r3, r0
 800275c:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
			uartTransmitNumber(tmp_mean, 10);
 8002760:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8002764:	210a      	movs	r1, #10
 8002766:	4618      	mov	r0, r3
 8002768:	f7fd ff20 	bl	80005ac <uartTransmitNumber>

			uartTransmit("\n", 1);
 800276c:	2101      	movs	r1, #1
 800276e:	481e      	ldr	r0, [pc, #120]	; (80027e8 <main+0x65c>)
 8002770:	f7fd ff08 	bl	8000584 <uartTransmit>

			uartTransmit("Temperaturen\n", 13);
 8002774:	210d      	movs	r1, #13
 8002776:	481d      	ldr	r0, [pc, #116]	; (80027ec <main+0x660>)
 8002778:	f7fd ff04 	bl	8000584 <uartTransmit>

			for (uint8_t j = 0; j < 8; j++)
 800277c:	2300      	movs	r3, #0
 800277e:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
 8002782:	e081      	b.n	8002888 <main+0x6fc>
			{
				ltc1380_write(LTC1380_MUX0, j);									// Multiplexer 0 einstellen
 8002784:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8002788:	4619      	mov	r1, r3
 800278a:	2090      	movs	r0, #144	; 0x90
 800278c:	f7fd ff2e 	bl	80005ec <ltc1380_write>
				ltc1380_write(LTC1380_MUX2, j);									// Multiplexer 1 einstellen
 8002790:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8002794:	4619      	mov	r1, r3
 8002796:	2094      	movs	r0, #148	; 0x94
 8002798:	f7fd ff28 	bl	80005ec <ltc1380_write>
				ltc6811(ADAX | MD73 | GPIOALL);									// Initial Command Zellen auslesen
 800279c:	f44f 60ac 	mov.w	r0, #1376	; 0x560
 80027a0:	f7fd ffa2 	bl	80006e8 <ltc6811>
				HAL_Delay(5);
 80027a4:	2005      	movs	r0, #5
 80027a6:	f000 fe91 	bl	80034cc <HAL_Delay>
				ltc6811_read(RDAUXA, &data[0]);
 80027aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80027ae:	4619      	mov	r1, r3
 80027b0:	200c      	movs	r0, #12
 80027b2:	f7fe f86f 	bl	8000894 <ltc6811_read>

				for (uint8_t i = 0; i < 3; i++)
 80027b6:	2300      	movs	r3, #0
 80027b8:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0
 80027bc:	e039      	b.n	8002832 <main+0x6a6>
 80027be:	bf00      	nop
 80027c0:	2000003c 	.word	0x2000003c
 80027c4:	40021000 	.word	0x40021000
 80027c8:	20000044 	.word	0x20000044
 80027cc:	40020400 	.word	0x40020400
 80027d0:	0800906c 	.word	0x0800906c
 80027d4:	200000ec 	.word	0x200000ec
 80027d8:	200000e8 	.word	0x200000e8
 80027dc:	08009084 	.word	0x08009084
 80027e0:	08009090 	.word	0x08009090
 80027e4:	aaaaaaab 	.word	0xaaaaaaab
 80027e8:	08008f3c 	.word	0x08008f3c
 80027ec:	08009094 	.word	0x08009094
				{
					temperatur[i] = ((data[i*2+1]<<8) | data[i*2]);
 80027f0:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	3301      	adds	r3, #1
 80027f8:	33e0      	adds	r3, #224	; 0xe0
 80027fa:	443b      	add	r3, r7
 80027fc:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8002800:	021b      	lsls	r3, r3, #8
 8002802:	b21a      	sxth	r2, r3
 8002804:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	33e0      	adds	r3, #224	; 0xe0
 800280c:	443b      	add	r3, r7
 800280e:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8002812:	b21b      	sxth	r3, r3
 8002814:	4313      	orrs	r3, r2
 8002816:	b21a      	sxth	r2, r3
 8002818:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 800281c:	b292      	uxth	r2, r2
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	33e0      	adds	r3, #224	; 0xe0
 8002822:	443b      	add	r3, r7
 8002824:	f823 2c60 	strh.w	r2, [r3, #-96]
				for (uint8_t i = 0; i < 3; i++)
 8002828:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 800282c:	3301      	adds	r3, #1
 800282e:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0
 8002832:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 8002836:	2b02      	cmp	r3, #2
 8002838:	d9da      	bls.n	80027f0 <main+0x664>
				}
				uartTransmitNumber(temperatur[0], 10);
 800283a:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800283e:	210a      	movs	r1, #10
 8002840:	4618      	mov	r0, r3
 8002842:	f7fd feb3 	bl	80005ac <uartTransmitNumber>
				uartTransmit(";", 1);
 8002846:	2101      	movs	r1, #1
 8002848:	484e      	ldr	r0, [pc, #312]	; (8002984 <main+0x7f8>)
 800284a:	f7fd fe9b 	bl	8000584 <uartTransmit>
				uartTransmitNumber(temperatur[1], 10);
 800284e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002852:	210a      	movs	r1, #10
 8002854:	4618      	mov	r0, r3
 8002856:	f7fd fea9 	bl	80005ac <uartTransmitNumber>
				uartTransmit(";", 1);
 800285a:	2101      	movs	r1, #1
 800285c:	4849      	ldr	r0, [pc, #292]	; (8002984 <main+0x7f8>)
 800285e:	f7fd fe91 	bl	8000584 <uartTransmit>

				if (j == 7)
 8002862:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8002866:	2b07      	cmp	r3, #7
 8002868:	d109      	bne.n	800287e <main+0x6f2>
				{
					uartTransmitNumber(temperatur[2], 10);
 800286a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800286e:	210a      	movs	r1, #10
 8002870:	4618      	mov	r0, r3
 8002872:	f7fd fe9b 	bl	80005ac <uartTransmitNumber>
					uartTransmit(";", 1);
 8002876:	2101      	movs	r1, #1
 8002878:	4842      	ldr	r0, [pc, #264]	; (8002984 <main+0x7f8>)
 800287a:	f7fd fe83 	bl	8000584 <uartTransmit>
			for (uint8_t j = 0; j < 8; j++)
 800287e:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8002882:	3301      	adds	r3, #1
 8002884:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
 8002888:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 800288c:	2b07      	cmp	r3, #7
 800288e:	f67f af79 	bls.w	8002784 <main+0x5f8>
				}
			}

			uartTransmit("\n", 1);
 8002892:	2101      	movs	r1, #1
 8002894:	483c      	ldr	r0, [pc, #240]	; (8002988 <main+0x7fc>)
 8002896:	f7fd fe75 	bl	8000584 <uartTransmit>
		}

		// Task wird alle 250 Millisekunden ausgefuehrt
		if (((millis() - timemillisekunden) > 250) && (start_flag == 1))
 800289a:	f7ff f8bf 	bl	8001a1c <millis>
 800289e:	4602      	mov	r2, r0
 80028a0:	4b3a      	ldr	r3, [pc, #232]	; (800298c <main+0x800>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2bfa      	cmp	r3, #250	; 0xfa
 80028a8:	d94e      	bls.n	8002948 <main+0x7bc>
 80028aa:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d14a      	bne.n	8002948 <main+0x7bc>
		{
			// Daten fuer Ausgaenge zusammenfuehren
			OutData[0] = system_out.systemoutput;
 80028b2:	4b37      	ldr	r3, [pc, #220]	; (8002990 <main+0x804>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			OutData[1] = highcurrent_out.high_out;
 80028ba:	4b36      	ldr	r3, [pc, #216]	; (8002994 <main+0x808>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			OutData[2] = leuchten_out.ledoutput;
 80028c2:	4b35      	ldr	r3, [pc, #212]	; (8002998 <main+0x80c>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
			OutData[3] = komfort_out.komfortoutput;
 80028ca:	4b34      	ldr	r3, [pc, #208]	; (800299c <main+0x810>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	
			// Sende Nachricht digitale Ausgaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxOutput, OutData, (uint32_t *)CAN_TX_MAILBOX0);
 80028d2:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80028d6:	f107 0118 	add.w	r1, r7, #24
 80028da:	2301      	movs	r3, #1
 80028dc:	4830      	ldr	r0, [pc, #192]	; (80029a0 <main+0x814>)
 80028de:	f001 fb21 	bl	8003f24 <HAL_CAN_AddTxMessage>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
			hal_error(status);
 80028e8:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe ffb1 	bl	8001854 <hal_error>

			// Daten fuer Eingaenge zusammenfuehren
			InData[0] = system_in.systeminput;
 80028f2:	4b2c      	ldr	r3, [pc, #176]	; (80029a4 <main+0x818>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
			InData[1] = sdc_in.sdcinput;
 80028fa:	4b2b      	ldr	r3, [pc, #172]	; (80029a8 <main+0x81c>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
			InData[2] = komfort_in.komfortinput;
 8002902:	4b2a      	ldr	r3, [pc, #168]	; (80029ac <main+0x820>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	
			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxInput, InData, (uint32_t *)CAN_TX_MAILBOX0);
 800290a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800290e:	4639      	mov	r1, r7
 8002910:	2301      	movs	r3, #1
 8002912:	4823      	ldr	r0, [pc, #140]	; (80029a0 <main+0x814>)
 8002914:	f001 fb06 	bl	8003f24 <HAL_CAN_AddTxMessage>
 8002918:	4603      	mov	r3, r0
 800291a:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
			hal_error(status);
 800291e:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8002922:	4618      	mov	r0, r3
 8002924:	f7fe ff96 	bl	8001854 <hal_error>
	
			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX0);
 8002928:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800292c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002930:	2301      	movs	r3, #1
 8002932:	481b      	ldr	r0, [pc, #108]	; (80029a0 <main+0x814>)
 8002934:	f001 faf6 	bl	8003f24 <HAL_CAN_AddTxMessage>
 8002938:	4603      	mov	r3, r0
 800293a:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
			hal_error(status);
 800293e:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe ff86 	bl	8001854 <hal_error>
		}

		// Task wird alle 500 Millisekunden ausgefuehrt
		if (((millis() - timemillisekunden) > 500) && (start_flag == 1))
 8002948:	f7ff f868 	bl	8001a1c <millis>
 800294c:	4602      	mov	r2, r0
 800294e:	4b0f      	ldr	r3, [pc, #60]	; (800298c <main+0x800>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002958:	d90b      	bls.n	8002972 <main+0x7e6>
 800295a:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 800295e:	2b01      	cmp	r3, #1
 8002960:	d107      	bne.n	8002972 <main+0x7e6>
		{
			timemillisekunden = millis();
 8002962:	f7ff f85b 	bl	8001a1c <millis>
 8002966:	4603      	mov	r3, r0
 8002968:	4a08      	ldr	r2, [pc, #32]	; (800298c <main+0x800>)
 800296a:	6013      	str	r3, [r2, #0]

			count = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
		}

		// Zuruecksetzen des Start Flags, damit Tasks erst nach einer ms wieder aufgerufen werden kann
		start_flag = 0;																		// Zuruecksetzen Start Flag
 8002972:	2300      	movs	r3, #0
 8002974:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
		if (millisekunden_flag_1 == 1)
 8002978:	e621      	b.n	80025be <main+0x432>
  }
  /* USER CODE END 3 */
}
 800297a:	4618      	mov	r0, r3
 800297c:	37e0      	adds	r7, #224	; 0xe0
 800297e:	46bd      	mov	sp, r7
 8002980:	bdb0      	pop	{r4, r5, r7, pc}
 8002982:	bf00      	nop
 8002984:	08009090 	.word	0x08009090
 8002988:	08008f3c 	.word	0x08008f3c
 800298c:	200000ec 	.word	0x200000ec
 8002990:	2000003c 	.word	0x2000003c
 8002994:	20000040 	.word	0x20000040
 8002998:	20000044 	.word	0x20000044
 800299c:	20000048 	.word	0x20000048
 80029a0:	200000bc 	.word	0x200000bc
 80029a4:	20000030 	.word	0x20000030
 80029a8:	20000034 	.word	0x20000034
 80029ac:	20000038 	.word	0x20000038

080029b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b094      	sub	sp, #80	; 0x50
 80029b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029b6:	f107 031c 	add.w	r3, r7, #28
 80029ba:	2234      	movs	r2, #52	; 0x34
 80029bc:	2100      	movs	r1, #0
 80029be:	4618      	mov	r0, r3
 80029c0:	f006 f880 	bl	8008ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029c4:	f107 0308 	add.w	r3, r7, #8
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029d4:	4b2c      	ldr	r3, [pc, #176]	; (8002a88 <SystemClock_Config+0xd8>)
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	4a2b      	ldr	r2, [pc, #172]	; (8002a88 <SystemClock_Config+0xd8>)
 80029da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029de:	6413      	str	r3, [r2, #64]	; 0x40
 80029e0:	4b29      	ldr	r3, [pc, #164]	; (8002a88 <SystemClock_Config+0xd8>)
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e8:	607b      	str	r3, [r7, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029ec:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <SystemClock_Config+0xdc>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a26      	ldr	r2, [pc, #152]	; (8002a8c <SystemClock_Config+0xdc>)
 80029f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029f6:	6013      	str	r3, [r2, #0]
 80029f8:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <SystemClock_Config+0xdc>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a00:	603b      	str	r3, [r7, #0]
 8002a02:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a04:	2301      	movs	r3, #1
 8002a06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a0c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a16:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002a18:	2319      	movs	r3, #25
 8002a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002a1c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002a20:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a22:	2302      	movs	r3, #2
 8002a24:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002a26:	2308      	movs	r3, #8
 8002a28:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a2e:	f107 031c 	add.w	r3, r7, #28
 8002a32:	4618      	mov	r0, r3
 8002a34:	f001 feb8 	bl	80047a8 <HAL_RCC_OscConfig>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002a3e:	f000 f871 	bl	8002b24 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002a42:	f001 fe61 	bl	8004708 <HAL_PWREx_EnableOverDrive>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002a4c:	f000 f86a 	bl	8002b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a50:	230f      	movs	r3, #15
 8002a52:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a54:	2302      	movs	r3, #2
 8002a56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a5c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002a60:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a66:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002a68:	f107 0308 	add.w	r3, r7, #8
 8002a6c:	2107      	movs	r1, #7
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f002 f948 	bl	8004d04 <HAL_RCC_ClockConfig>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002a7a:	f000 f853 	bl	8002b24 <Error_Handler>
  }
}
 8002a7e:	bf00      	nop
 8002a80:	3750      	adds	r7, #80	; 0x50
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40007000 	.word	0x40007000

08002a90 <HAL_TIM_PeriodElapsedCallback>:
	can_change = 1;
}

// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a90:	b590      	push	{r4, r7, lr}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
	// Kontrolliere welcher Timer den Ueberlauf ausgeloest hat
	if (htim == &htim6)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a1d      	ldr	r2, [pc, #116]	; (8002b10 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d102      	bne.n	8002aa6 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		millisekunden_flag_1 = 1;
 8002aa0:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	701a      	strb	r2, [r3, #0]
	}

	// Timer IMD
	if (htim == &htim1)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a1b      	ldr	r2, [pc, #108]	; (8002b18 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d12c      	bne.n	8002b08 <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	7f1b      	ldrb	r3, [r3, #28]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d112      	bne.n	8002adc <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			rising = calculateMovingAverage(rising, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1), 64);
 8002ab6:	4b19      	ldr	r3, [pc, #100]	; (8002b1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	b29c      	uxth	r4, r3
 8002abc:	2100      	movs	r1, #0
 8002abe:	4816      	ldr	r0, [pc, #88]	; (8002b18 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002ac0:	f004 fc6e 	bl	80073a0 <HAL_TIM_ReadCapturedValue>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2240      	movs	r2, #64	; 0x40
 8002aca:	4619      	mov	r1, r3
 8002acc:	4620      	mov	r0, r4
 8002ace:	f7ff fb43 	bl	8002158 <calculateMovingAverage>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002ad8:	801a      	strh	r2, [r3, #0]
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
		{
			falling = calculateMovingAverage(falling, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2), 64);
		}
	}
}
 8002ada:	e015      	b.n	8002b08 <HAL_TIM_PeriodElapsedCallback+0x78>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	7f1b      	ldrb	r3, [r3, #28]
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d111      	bne.n	8002b08 <HAL_TIM_PeriodElapsedCallback+0x78>
			falling = calculateMovingAverage(falling, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2), 64);
 8002ae4:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	b29c      	uxth	r4, r3
 8002aea:	2104      	movs	r1, #4
 8002aec:	480a      	ldr	r0, [pc, #40]	; (8002b18 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002aee:	f004 fc57 	bl	80073a0 <HAL_TIM_ReadCapturedValue>
 8002af2:	4603      	mov	r3, r0
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	2240      	movs	r2, #64	; 0x40
 8002af8:	4619      	mov	r1, r3
 8002afa:	4620      	mov	r0, r4
 8002afc:	f7ff fb2c 	bl	8002158 <calculateMovingAverage>
 8002b00:	4603      	mov	r3, r0
 8002b02:	461a      	mov	r2, r3
 8002b04:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002b06:	801a      	strh	r2, [r3, #0]
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd90      	pop	{r4, r7, pc}
 8002b10:	20000250 	.word	0x20000250
 8002b14:	200000e8 	.word	0x200000e8
 8002b18:	200001b8 	.word	0x200001b8
 8002b1c:	200000e4 	.word	0x200000e4
 8002b20:	200000e6 	.word	0x200000e6

08002b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b28:	b672      	cpsid	i
}
 8002b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 8002b2c:	4a11      	ldr	r2, [pc, #68]	; (8002b74 <Error_Handler+0x50>)
 8002b2e:	7813      	ldrb	r3, [r2, #0]
 8002b30:	f043 0320 	orr.w	r3, r3, #32
 8002b34:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8002b36:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <Error_Handler+0x50>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	461a      	mov	r2, r3
 8002b42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b46:	480c      	ldr	r0, [pc, #48]	; (8002b78 <Error_Handler+0x54>)
 8002b48:	f001 fdc4 	bl	80046d4 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8002b4c:	4a09      	ldr	r2, [pc, #36]	; (8002b74 <Error_Handler+0x50>)
 8002b4e:	7813      	ldrb	r3, [r2, #0]
 8002b50:	f36f 1386 	bfc	r3, #6, #1
 8002b54:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 8002b56:	4b07      	ldr	r3, [pc, #28]	; (8002b74 <Error_Handler+0x50>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	2104      	movs	r1, #4
 8002b64:	4804      	ldr	r0, [pc, #16]	; (8002b78 <Error_Handler+0x54>)
 8002b66:	f001 fdb5 	bl	80046d4 <HAL_GPIO_WritePin>

	// Sende Nachricht auf Uart-Interface
#ifdef DEBUG
#define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
	uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 8002b6a:	2122      	movs	r1, #34	; 0x22
 8002b6c:	4803      	ldr	r0, [pc, #12]	; (8002b7c <Error_Handler+0x58>)
 8002b6e:	f7fd fd09 	bl	8000584 <uartTransmit>
#endif
	// Beginne Endlosschleife nachdem Fehler aufgetreten ist
	while (1)
 8002b72:	e7fe      	b.n	8002b72 <Error_Handler+0x4e>
 8002b74:	20000044 	.word	0x20000044
 8002b78:	40020400 	.word	0x40020400
 8002b7c:	080090ec 	.word	0x080090ec

08002b80 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002b84:	4b1b      	ldr	r3, [pc, #108]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002b86:	4a1c      	ldr	r2, [pc, #112]	; (8002bf8 <MX_SPI1_Init+0x78>)
 8002b88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b8a:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002b8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b92:	4b18      	ldr	r3, [pc, #96]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b98:	4b16      	ldr	r3, [pc, #88]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002b9a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b9e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ba0:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ba6:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002bac:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002bae:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002bb2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002bb4:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002bb6:	2230      	movs	r2, #48	; 0x30
 8002bb8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bba:	4b0e      	ldr	r3, [pc, #56]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bc6:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002bcc:	4b09      	ldr	r3, [pc, #36]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002bce:	2207      	movs	r2, #7
 8002bd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002bd2:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002bd8:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002bda:	2208      	movs	r2, #8
 8002bdc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bde:	4805      	ldr	r0, [pc, #20]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002be0:	f002 fe9e 	bl	8005920 <HAL_SPI_Init>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002bea:	f7ff ff9b 	bl	8002b24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002bee:	bf00      	nop
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	200000f0 	.word	0x200000f0
 8002bf8:	40013000 	.word	0x40013000

08002bfc <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002c00:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <MX_SPI4_Init+0x74>)
 8002c02:	4a1c      	ldr	r2, [pc, #112]	; (8002c74 <MX_SPI4_Init+0x78>)
 8002c04:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002c06:	4b1a      	ldr	r3, [pc, #104]	; (8002c70 <MX_SPI4_Init+0x74>)
 8002c08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c0c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002c0e:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <MX_SPI4_Init+0x74>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c14:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <MX_SPI4_Init+0x74>)
 8002c16:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c1a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002c1c:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <MX_SPI4_Init+0x74>)
 8002c1e:	2202      	movs	r2, #2
 8002c20:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002c22:	4b13      	ldr	r3, [pc, #76]	; (8002c70 <MX_SPI4_Init+0x74>)
 8002c24:	2201      	movs	r2, #1
 8002c26:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002c28:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <MX_SPI4_Init+0x74>)
 8002c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c2e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002c30:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <MX_SPI4_Init+0x74>)
 8002c32:	2230      	movs	r2, #48	; 0x30
 8002c34:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c36:	4b0e      	ldr	r3, [pc, #56]	; (8002c70 <MX_SPI4_Init+0x74>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <MX_SPI4_Init+0x74>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c42:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <MX_SPI4_Init+0x74>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002c48:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <MX_SPI4_Init+0x74>)
 8002c4a:	2207      	movs	r2, #7
 8002c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c4e:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <MX_SPI4_Init+0x74>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <MX_SPI4_Init+0x74>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002c5a:	4805      	ldr	r0, [pc, #20]	; (8002c70 <MX_SPI4_Init+0x74>)
 8002c5c:	f002 fe60 	bl	8005920 <HAL_SPI_Init>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002c66:	f7ff ff5d 	bl	8002b24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20000154 	.word	0x20000154
 8002c74:	40013400 	.word	0x40013400

08002c78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08c      	sub	sp, #48	; 0x30
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	f107 031c 	add.w	r3, r7, #28
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a3d      	ldr	r2, [pc, #244]	; (8002d8c <HAL_SPI_MspInit+0x114>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d145      	bne.n	8002d26 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c9a:	4b3d      	ldr	r3, [pc, #244]	; (8002d90 <HAL_SPI_MspInit+0x118>)
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9e:	4a3c      	ldr	r2, [pc, #240]	; (8002d90 <HAL_SPI_MspInit+0x118>)
 8002ca0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ca6:	4b3a      	ldr	r3, [pc, #232]	; (8002d90 <HAL_SPI_MspInit+0x118>)
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002caa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cae:	61bb      	str	r3, [r7, #24]
 8002cb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cb2:	4b37      	ldr	r3, [pc, #220]	; (8002d90 <HAL_SPI_MspInit+0x118>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	4a36      	ldr	r2, [pc, #216]	; (8002d90 <HAL_SPI_MspInit+0x118>)
 8002cb8:	f043 0308 	orr.w	r3, r3, #8
 8002cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cbe:	4b34      	ldr	r3, [pc, #208]	; (8002d90 <HAL_SPI_MspInit+0x118>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002cca:	4b31      	ldr	r3, [pc, #196]	; (8002d90 <HAL_SPI_MspInit+0x118>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	4a30      	ldr	r2, [pc, #192]	; (8002d90 <HAL_SPI_MspInit+0x118>)
 8002cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd6:	4b2e      	ldr	r3, [pc, #184]	; (8002d90 <HAL_SPI_MspInit+0x118>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 8002ce2:	2380      	movs	r3, #128	; 0x80
 8002ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cf2:	2305      	movs	r3, #5
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002cf6:	f107 031c 	add.w	r3, r7, #28
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4825      	ldr	r0, [pc, #148]	; (8002d94 <HAL_SPI_MspInit+0x11c>)
 8002cfe:	f001 fb25 	bl	800434c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTI_CS_Pin|POTI_SCK_Pin;
 8002d02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d10:	2303      	movs	r3, #3
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d14:	2305      	movs	r3, #5
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d18:	f107 031c 	add.w	r3, r7, #28
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	481e      	ldr	r0, [pc, #120]	; (8002d98 <HAL_SPI_MspInit+0x120>)
 8002d20:	f001 fb14 	bl	800434c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002d24:	e02d      	b.n	8002d82 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI4)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a1c      	ldr	r2, [pc, #112]	; (8002d9c <HAL_SPI_MspInit+0x124>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d128      	bne.n	8002d82 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002d30:	4b17      	ldr	r3, [pc, #92]	; (8002d90 <HAL_SPI_MspInit+0x118>)
 8002d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d34:	4a16      	ldr	r2, [pc, #88]	; (8002d90 <HAL_SPI_MspInit+0x118>)
 8002d36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d3a:	6453      	str	r3, [r2, #68]	; 0x44
 8002d3c:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <HAL_SPI_MspInit+0x118>)
 8002d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d48:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <HAL_SPI_MspInit+0x118>)
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	4a10      	ldr	r2, [pc, #64]	; (8002d90 <HAL_SPI_MspInit+0x118>)
 8002d4e:	f043 0310 	orr.w	r3, r3, #16
 8002d52:	6313      	str	r3, [r2, #48]	; 0x30
 8002d54:	4b0e      	ldr	r3, [pc, #56]	; (8002d90 <HAL_SPI_MspInit+0x118>)
 8002d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d58:	f003 0310 	and.w	r3, r3, #16
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 8002d60:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d66:	2302      	movs	r3, #2
 8002d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002d72:	2305      	movs	r3, #5
 8002d74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d76:	f107 031c 	add.w	r3, r7, #28
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4808      	ldr	r0, [pc, #32]	; (8002da0 <HAL_SPI_MspInit+0x128>)
 8002d7e:	f001 fae5 	bl	800434c <HAL_GPIO_Init>
}
 8002d82:	bf00      	nop
 8002d84:	3730      	adds	r7, #48	; 0x30
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40013000 	.word	0x40013000
 8002d90:	40023800 	.word	0x40023800
 8002d94:	40020c00 	.word	0x40020c00
 8002d98:	40021800 	.word	0x40021800
 8002d9c:	40013400 	.word	0x40013400
 8002da0:	40021000 	.word	0x40021000

08002da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002daa:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <HAL_MspInit+0x44>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	4a0e      	ldr	r2, [pc, #56]	; (8002de8 <HAL_MspInit+0x44>)
 8002db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db4:	6413      	str	r3, [r2, #64]	; 0x40
 8002db6:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <HAL_MspInit+0x44>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	607b      	str	r3, [r7, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc2:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <HAL_MspInit+0x44>)
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	4a08      	ldr	r2, [pc, #32]	; (8002de8 <HAL_MspInit+0x44>)
 8002dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8002dce:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <HAL_MspInit+0x44>)
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800

08002dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dfe:	e7fe      	b.n	8002dfe <HardFault_Handler+0x4>

08002e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e04:	e7fe      	b.n	8002e04 <MemManage_Handler+0x4>

08002e06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e06:	b480      	push	{r7}
 8002e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e0a:	e7fe      	b.n	8002e0a <BusFault_Handler+0x4>

08002e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e10:	e7fe      	b.n	8002e10 <UsageFault_Handler+0x4>

08002e12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e12:	b480      	push	{r7}
 8002e14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e40:	f000 fb24 	bl	800348c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e4c:	4802      	ldr	r0, [pc, #8]	; (8002e58 <TIM1_CC_IRQHandler+0x10>)
 8002e4e:	f003 ff95 	bl	8006d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	200001b8 	.word	0x200001b8

08002e5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e60:	4802      	ldr	r0, [pc, #8]	; (8002e6c <TIM6_DAC_IRQHandler+0x10>)
 8002e62:	f003 ff8b 	bl	8006d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000250 	.word	0x20000250

08002e70 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e74:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <SystemInit+0x28>)
 8002e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7a:	4a07      	ldr	r2, [pc, #28]	; (8002e98 <SystemInit+0x28>)
 8002e7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e84:	4b04      	ldr	r3, [pc, #16]	; (8002e98 <SystemInit+0x28>)
 8002e86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e8a:	609a      	str	r2, [r3, #8]
#endif
}
 8002e8c:	bf00      	nop
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	e000ed00 	.word	0xe000ed00

08002e9c <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08c      	sub	sp, #48	; 0x30
 8002ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002ea2:	f107 031c 	add.w	r3, r7, #28
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	605a      	str	r2, [r3, #4]
 8002eac:	609a      	str	r2, [r3, #8]
 8002eae:	60da      	str	r2, [r3, #12]
 8002eb0:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002eb2:	f107 030c 	add.w	r3, r7, #12
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	605a      	str	r2, [r3, #4]
 8002ebc:	609a      	str	r2, [r3, #8]
 8002ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec0:	463b      	mov	r3, r7
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	605a      	str	r2, [r3, #4]
 8002ec8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002eca:	4b36      	ldr	r3, [pc, #216]	; (8002fa4 <MX_TIM1_Init+0x108>)
 8002ecc:	4a36      	ldr	r2, [pc, #216]	; (8002fa8 <MX_TIM1_Init+0x10c>)
 8002ece:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 675 - 1;
 8002ed0:	4b34      	ldr	r3, [pc, #208]	; (8002fa4 <MX_TIM1_Init+0x108>)
 8002ed2:	f240 22a2 	movw	r2, #674	; 0x2a2
 8002ed6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed8:	4b32      	ldr	r3, [pc, #200]	; (8002fa4 <MX_TIM1_Init+0x108>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002ede:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <MX_TIM1_Init+0x108>)
 8002ee0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ee4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ee6:	4b2f      	ldr	r3, [pc, #188]	; (8002fa4 <MX_TIM1_Init+0x108>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002eec:	4b2d      	ldr	r3, [pc, #180]	; (8002fa4 <MX_TIM1_Init+0x108>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ef2:	4b2c      	ldr	r3, [pc, #176]	; (8002fa4 <MX_TIM1_Init+0x108>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002ef8:	482a      	ldr	r0, [pc, #168]	; (8002fa4 <MX_TIM1_Init+0x108>)
 8002efa:	f003 fd98 	bl	8006a2e <HAL_TIM_IC_Init>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002f04:	f7ff fe0e 	bl	8002b24 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002f08:	2304      	movs	r3, #4
 8002f0a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002f0c:	2350      	movs	r3, #80	; 0x50
 8002f0e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002f10:	2300      	movs	r3, #0
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002f14:	2300      	movs	r3, #0
 8002f16:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002f1c:	f107 031c 	add.w	r3, r7, #28
 8002f20:	4619      	mov	r1, r3
 8002f22:	4820      	ldr	r0, [pc, #128]	; (8002fa4 <MX_TIM1_Init+0x108>)
 8002f24:	f004 f9fa 	bl	800731c <HAL_TIM_SlaveConfigSynchro>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002f2e:	f7ff fdf9 	bl	8002b24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002f36:	2301      	movs	r3, #1
 8002f38:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002f42:	f107 030c 	add.w	r3, r7, #12
 8002f46:	2200      	movs	r2, #0
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4816      	ldr	r0, [pc, #88]	; (8002fa4 <MX_TIM1_Init+0x108>)
 8002f4c:	f004 f835 	bl	8006fba <HAL_TIM_IC_ConfigChannel>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002f56:	f7ff fde5 	bl	8002b24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002f62:	f107 030c 	add.w	r3, r7, #12
 8002f66:	2204      	movs	r2, #4
 8002f68:	4619      	mov	r1, r3
 8002f6a:	480e      	ldr	r0, [pc, #56]	; (8002fa4 <MX_TIM1_Init+0x108>)
 8002f6c:	f004 f825 	bl	8006fba <HAL_TIM_IC_ConfigChannel>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8002f76:	f7ff fdd5 	bl	8002b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f82:	2300      	movs	r3, #0
 8002f84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f86:	463b      	mov	r3, r7
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4806      	ldr	r0, [pc, #24]	; (8002fa4 <MX_TIM1_Init+0x108>)
 8002f8c:	f004 ffd4 	bl	8007f38 <HAL_TIMEx_MasterConfigSynchronization>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002f96:	f7ff fdc5 	bl	8002b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002f9a:	bf00      	nop
 8002f9c:	3730      	adds	r7, #48	; 0x30
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	200001b8 	.word	0x200001b8
 8002fa8:	40010000 	.word	0x40010000

08002fac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b08a      	sub	sp, #40	; 0x28
 8002fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fb2:	f107 031c 	add.w	r3, r7, #28
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	605a      	str	r2, [r3, #4]
 8002fbc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fbe:	463b      	mov	r3, r7
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	60da      	str	r2, [r3, #12]
 8002fca:	611a      	str	r2, [r3, #16]
 8002fcc:	615a      	str	r2, [r3, #20]
 8002fce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002fd0:	4b32      	ldr	r3, [pc, #200]	; (800309c <MX_TIM4_Init+0xf0>)
 8002fd2:	4a33      	ldr	r2, [pc, #204]	; (80030a0 <MX_TIM4_Init+0xf4>)
 8002fd4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002fd6:	4b31      	ldr	r3, [pc, #196]	; (800309c <MX_TIM4_Init+0xf0>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fdc:	4b2f      	ldr	r3, [pc, #188]	; (800309c <MX_TIM4_Init+0xf0>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002fe2:	4b2e      	ldr	r3, [pc, #184]	; (800309c <MX_TIM4_Init+0xf0>)
 8002fe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fe8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fea:	4b2c      	ldr	r3, [pc, #176]	; (800309c <MX_TIM4_Init+0xf0>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ff0:	4b2a      	ldr	r3, [pc, #168]	; (800309c <MX_TIM4_Init+0xf0>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002ff6:	4829      	ldr	r0, [pc, #164]	; (800309c <MX_TIM4_Init+0xf0>)
 8002ff8:	f003 fcc2 	bl	8006980 <HAL_TIM_PWM_Init>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8003002:	f7ff fd8f 	bl	8002b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003006:	2300      	movs	r3, #0
 8003008:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800300a:	2300      	movs	r3, #0
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800300e:	f107 031c 	add.w	r3, r7, #28
 8003012:	4619      	mov	r1, r3
 8003014:	4821      	ldr	r0, [pc, #132]	; (800309c <MX_TIM4_Init+0xf0>)
 8003016:	f004 ff8f 	bl	8007f38 <HAL_TIMEx_MasterConfigSynchronization>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8003020:	f7ff fd80 	bl	8002b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003024:	2360      	movs	r3, #96	; 0x60
 8003026:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003028:	2300      	movs	r3, #0
 800302a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800302c:	2300      	movs	r3, #0
 800302e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003030:	2300      	movs	r3, #0
 8003032:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003034:	463b      	mov	r3, r7
 8003036:	2200      	movs	r2, #0
 8003038:	4619      	mov	r1, r3
 800303a:	4818      	ldr	r0, [pc, #96]	; (800309c <MX_TIM4_Init+0xf0>)
 800303c:	f004 f85a 	bl	80070f4 <HAL_TIM_PWM_ConfigChannel>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8003046:	f7ff fd6d 	bl	8002b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800304a:	463b      	mov	r3, r7
 800304c:	2204      	movs	r2, #4
 800304e:	4619      	mov	r1, r3
 8003050:	4812      	ldr	r0, [pc, #72]	; (800309c <MX_TIM4_Init+0xf0>)
 8003052:	f004 f84f 	bl	80070f4 <HAL_TIM_PWM_ConfigChannel>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800305c:	f7ff fd62 	bl	8002b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003060:	463b      	mov	r3, r7
 8003062:	2208      	movs	r2, #8
 8003064:	4619      	mov	r1, r3
 8003066:	480d      	ldr	r0, [pc, #52]	; (800309c <MX_TIM4_Init+0xf0>)
 8003068:	f004 f844 	bl	80070f4 <HAL_TIM_PWM_ConfigChannel>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8003072:	f7ff fd57 	bl	8002b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003076:	463b      	mov	r3, r7
 8003078:	220c      	movs	r2, #12
 800307a:	4619      	mov	r1, r3
 800307c:	4807      	ldr	r0, [pc, #28]	; (800309c <MX_TIM4_Init+0xf0>)
 800307e:	f004 f839 	bl	80070f4 <HAL_TIM_PWM_ConfigChannel>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8003088:	f7ff fd4c 	bl	8002b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800308c:	4803      	ldr	r0, [pc, #12]	; (800309c <MX_TIM4_Init+0xf0>)
 800308e:	f000 f8d1 	bl	8003234 <HAL_TIM_MspPostInit>

}
 8003092:	bf00      	nop
 8003094:	3728      	adds	r7, #40	; 0x28
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	20000204 	.word	0x20000204
 80030a0:	40000800 	.word	0x40000800

080030a4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030aa:	1d3b      	adds	r3, r7, #4
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80030b4:	4b14      	ldr	r3, [pc, #80]	; (8003108 <MX_TIM6_Init+0x64>)
 80030b6:	4a15      	ldr	r2, [pc, #84]	; (800310c <MX_TIM6_Init+0x68>)
 80030b8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 27;
 80030ba:	4b13      	ldr	r3, [pc, #76]	; (8003108 <MX_TIM6_Init+0x64>)
 80030bc:	221b      	movs	r2, #27
 80030be:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030c0:	4b11      	ldr	r3, [pc, #68]	; (8003108 <MX_TIM6_Init+0x64>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000;
 80030c6:	4b10      	ldr	r3, [pc, #64]	; (8003108 <MX_TIM6_Init+0x64>)
 80030c8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80030cc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030ce:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <MX_TIM6_Init+0x64>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80030d4:	480c      	ldr	r0, [pc, #48]	; (8003108 <MX_TIM6_Init+0x64>)
 80030d6:	f003 fb83 	bl	80067e0 <HAL_TIM_Base_Init>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80030e0:	f7ff fd20 	bl	8002b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030e4:	2300      	movs	r3, #0
 80030e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030e8:	2300      	movs	r3, #0
 80030ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80030ec:	1d3b      	adds	r3, r7, #4
 80030ee:	4619      	mov	r1, r3
 80030f0:	4805      	ldr	r0, [pc, #20]	; (8003108 <MX_TIM6_Init+0x64>)
 80030f2:	f004 ff21 	bl	8007f38 <HAL_TIMEx_MasterConfigSynchronization>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80030fc:	f7ff fd12 	bl	8002b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003100:	bf00      	nop
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	20000250 	.word	0x20000250
 800310c:	40001000 	.word	0x40001000

08003110 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b08a      	sub	sp, #40	; 0x28
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003118:	f107 0314 	add.w	r3, r7, #20
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	60da      	str	r2, [r3, #12]
 8003126:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a1b      	ldr	r2, [pc, #108]	; (800319c <HAL_TIM_IC_MspInit+0x8c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d130      	bne.n	8003194 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003132:	4b1b      	ldr	r3, [pc, #108]	; (80031a0 <HAL_TIM_IC_MspInit+0x90>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	4a1a      	ldr	r2, [pc, #104]	; (80031a0 <HAL_TIM_IC_MspInit+0x90>)
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	6453      	str	r3, [r2, #68]	; 0x44
 800313e:	4b18      	ldr	r3, [pc, #96]	; (80031a0 <HAL_TIM_IC_MspInit+0x90>)
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800314a:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <HAL_TIM_IC_MspInit+0x90>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	4a14      	ldr	r2, [pc, #80]	; (80031a0 <HAL_TIM_IC_MspInit+0x90>)
 8003150:	f043 0310 	orr.w	r3, r3, #16
 8003154:	6313      	str	r3, [r2, #48]	; 0x30
 8003156:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <HAL_TIM_IC_MspInit+0x90>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	f003 0310 	and.w	r3, r3, #16
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 8003162:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003168:	2302      	movs	r3, #2
 800316a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316c:	2300      	movs	r3, #0
 800316e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003170:	2300      	movs	r3, #0
 8003172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003174:	2301      	movs	r3, #1
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 8003178:	f107 0314 	add.w	r3, r7, #20
 800317c:	4619      	mov	r1, r3
 800317e:	4809      	ldr	r0, [pc, #36]	; (80031a4 <HAL_TIM_IC_MspInit+0x94>)
 8003180:	f001 f8e4 	bl	800434c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003184:	2200      	movs	r2, #0
 8003186:	2100      	movs	r1, #0
 8003188:	201b      	movs	r0, #27
 800318a:	f001 f8a8 	bl	80042de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800318e:	201b      	movs	r0, #27
 8003190:	f001 f8c1 	bl	8004316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003194:	bf00      	nop
 8003196:	3728      	adds	r7, #40	; 0x28
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40010000 	.word	0x40010000
 80031a0:	40023800 	.word	0x40023800
 80031a4:	40021000 	.word	0x40021000

080031a8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a0a      	ldr	r2, [pc, #40]	; (80031e0 <HAL_TIM_PWM_MspInit+0x38>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d10b      	bne.n	80031d2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031ba:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	4a09      	ldr	r2, [pc, #36]	; (80031e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80031c0:	f043 0304 	orr.w	r3, r3, #4
 80031c4:	6413      	str	r3, [r2, #64]	; 0x40
 80031c6:	4b07      	ldr	r3, [pc, #28]	; (80031e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80031d2:	bf00      	nop
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40000800 	.word	0x40000800
 80031e4:	40023800 	.word	0x40023800

080031e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a0d      	ldr	r2, [pc, #52]	; (800322c <HAL_TIM_Base_MspInit+0x44>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d113      	bne.n	8003222 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80031fa:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <HAL_TIM_Base_MspInit+0x48>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	4a0c      	ldr	r2, [pc, #48]	; (8003230 <HAL_TIM_Base_MspInit+0x48>)
 8003200:	f043 0310 	orr.w	r3, r3, #16
 8003204:	6413      	str	r3, [r2, #64]	; 0x40
 8003206:	4b0a      	ldr	r3, [pc, #40]	; (8003230 <HAL_TIM_Base_MspInit+0x48>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003212:	2200      	movs	r2, #0
 8003214:	2100      	movs	r1, #0
 8003216:	2036      	movs	r0, #54	; 0x36
 8003218:	f001 f861 	bl	80042de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800321c:	2036      	movs	r0, #54	; 0x36
 800321e:	f001 f87a 	bl	8004316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8003222:	bf00      	nop
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40001000 	.word	0x40001000
 8003230:	40023800 	.word	0x40023800

08003234 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b088      	sub	sp, #32
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800323c:	f107 030c 	add.w	r3, r7, #12
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	605a      	str	r2, [r3, #4]
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	60da      	str	r2, [r3, #12]
 800324a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a11      	ldr	r2, [pc, #68]	; (8003298 <HAL_TIM_MspPostInit+0x64>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d11c      	bne.n	8003290 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003256:	4b11      	ldr	r3, [pc, #68]	; (800329c <HAL_TIM_MspPostInit+0x68>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	4a10      	ldr	r2, [pc, #64]	; (800329c <HAL_TIM_MspPostInit+0x68>)
 800325c:	f043 0308 	orr.w	r3, r3, #8
 8003260:	6313      	str	r3, [r2, #48]	; 0x30
 8003262:	4b0e      	ldr	r3, [pc, #56]	; (800329c <HAL_TIM_MspPostInit+0x68>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin|PWM_HV_Charger_Pin;
 800326e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003272:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003274:	2302      	movs	r3, #2
 8003276:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003278:	2300      	movs	r3, #0
 800327a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800327c:	2300      	movs	r3, #0
 800327e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003280:	2302      	movs	r3, #2
 8003282:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003284:	f107 030c 	add.w	r3, r7, #12
 8003288:	4619      	mov	r1, r3
 800328a:	4805      	ldr	r0, [pc, #20]	; (80032a0 <HAL_TIM_MspPostInit+0x6c>)
 800328c:	f001 f85e 	bl	800434c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003290:	bf00      	nop
 8003292:	3720      	adds	r7, #32
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40000800 	.word	0x40000800
 800329c:	40023800 	.word	0x40023800
 80032a0:	40020c00 	.word	0x40020c00

080032a4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80032a8:	4b14      	ldr	r3, [pc, #80]	; (80032fc <MX_USART2_UART_Init+0x58>)
 80032aa:	4a15      	ldr	r2, [pc, #84]	; (8003300 <MX_USART2_UART_Init+0x5c>)
 80032ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80032ae:	4b13      	ldr	r3, [pc, #76]	; (80032fc <MX_USART2_UART_Init+0x58>)
 80032b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80032b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032b6:	4b11      	ldr	r3, [pc, #68]	; (80032fc <MX_USART2_UART_Init+0x58>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80032bc:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <MX_USART2_UART_Init+0x58>)
 80032be:	2200      	movs	r2, #0
 80032c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80032c2:	4b0e      	ldr	r3, [pc, #56]	; (80032fc <MX_USART2_UART_Init+0x58>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032c8:	4b0c      	ldr	r3, [pc, #48]	; (80032fc <MX_USART2_UART_Init+0x58>)
 80032ca:	220c      	movs	r2, #12
 80032cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032ce:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <MX_USART2_UART_Init+0x58>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80032d4:	4b09      	ldr	r3, [pc, #36]	; (80032fc <MX_USART2_UART_Init+0x58>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032da:	4b08      	ldr	r3, [pc, #32]	; (80032fc <MX_USART2_UART_Init+0x58>)
 80032dc:	2200      	movs	r2, #0
 80032de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032e0:	4b06      	ldr	r3, [pc, #24]	; (80032fc <MX_USART2_UART_Init+0x58>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80032e6:	4805      	ldr	r0, [pc, #20]	; (80032fc <MX_USART2_UART_Init+0x58>)
 80032e8:	f004 fed2 	bl	8008090 <HAL_UART_Init>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80032f2:	f7ff fc17 	bl	8002b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80032f6:	bf00      	nop
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	2000029c 	.word	0x2000029c
 8003300:	40004400 	.word	0x40004400

08003304 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b0ae      	sub	sp, #184	; 0xb8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800330c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	605a      	str	r2, [r3, #4]
 8003316:	609a      	str	r2, [r3, #8]
 8003318:	60da      	str	r2, [r3, #12]
 800331a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800331c:	f107 0314 	add.w	r3, r7, #20
 8003320:	2290      	movs	r2, #144	; 0x90
 8003322:	2100      	movs	r1, #0
 8003324:	4618      	mov	r0, r3
 8003326:	f005 fbcd 	bl	8008ac4 <memset>
  if(uartHandle->Instance==USART2)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a21      	ldr	r2, [pc, #132]	; (80033b4 <HAL_UART_MspInit+0xb0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d13a      	bne.n	80033aa <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003338:	2300      	movs	r3, #0
 800333a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800333c:	f107 0314 	add.w	r3, r7, #20
 8003340:	4618      	mov	r0, r3
 8003342:	f001 fec5 	bl	80050d0 <HAL_RCCEx_PeriphCLKConfig>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800334c:	f7ff fbea 	bl	8002b24 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003350:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <HAL_UART_MspInit+0xb4>)
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	4a18      	ldr	r2, [pc, #96]	; (80033b8 <HAL_UART_MspInit+0xb4>)
 8003356:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800335a:	6413      	str	r3, [r2, #64]	; 0x40
 800335c:	4b16      	ldr	r3, [pc, #88]	; (80033b8 <HAL_UART_MspInit+0xb4>)
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003368:	4b13      	ldr	r3, [pc, #76]	; (80033b8 <HAL_UART_MspInit+0xb4>)
 800336a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336c:	4a12      	ldr	r2, [pc, #72]	; (80033b8 <HAL_UART_MspInit+0xb4>)
 800336e:	f043 0308 	orr.w	r3, r3, #8
 8003372:	6313      	str	r3, [r2, #48]	; 0x30
 8003374:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <HAL_UART_MspInit+0xb4>)
 8003376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003380:	2360      	movs	r3, #96	; 0x60
 8003382:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003386:	2302      	movs	r3, #2
 8003388:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338c:	2300      	movs	r3, #0
 800338e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003392:	2303      	movs	r3, #3
 8003394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003398:	2307      	movs	r3, #7
 800339a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800339e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80033a2:	4619      	mov	r1, r3
 80033a4:	4805      	ldr	r0, [pc, #20]	; (80033bc <HAL_UART_MspInit+0xb8>)
 80033a6:	f000 ffd1 	bl	800434c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80033aa:	bf00      	nop
 80033ac:	37b8      	adds	r7, #184	; 0xb8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40004400 	.word	0x40004400
 80033b8:	40023800 	.word	0x40023800
 80033bc:	40020c00 	.word	0x40020c00

080033c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80033c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80033c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80033c6:	e003      	b.n	80033d0 <LoopCopyDataInit>

080033c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80033c8:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80033ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80033cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80033ce:	3104      	adds	r1, #4

080033d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80033d0:	480b      	ldr	r0, [pc, #44]	; (8003400 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80033d2:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80033d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80033d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80033d8:	d3f6      	bcc.n	80033c8 <CopyDataInit>
  ldr  r2, =_sbss
 80033da:	4a0b      	ldr	r2, [pc, #44]	; (8003408 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80033dc:	e002      	b.n	80033e4 <LoopFillZerobss>

080033de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80033de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80033e0:	f842 3b04 	str.w	r3, [r2], #4

080033e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80033e4:	4b09      	ldr	r3, [pc, #36]	; (800340c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80033e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80033e8:	d3f9      	bcc.n	80033de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80033ea:	f7ff fd41 	bl	8002e70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033ee:	f005 fb45 	bl	8008a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033f2:	f7fe fecb 	bl	800218c <main>
  bx  lr    
 80033f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80033f8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80033fc:	08009360 	.word	0x08009360
  ldr  r0, =_sdata
 8003400:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003404:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003408:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800340c:	20000324 	.word	0x20000324

08003410 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003410:	e7fe      	b.n	8003410 <ADC_IRQHandler>

08003412 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003416:	2003      	movs	r0, #3
 8003418:	f000 ff56 	bl	80042c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800341c:	2000      	movs	r0, #0
 800341e:	f000 f805 	bl	800342c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003422:	f7ff fcbf 	bl	8002da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003434:	4b12      	ldr	r3, [pc, #72]	; (8003480 <HAL_InitTick+0x54>)
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	4b12      	ldr	r3, [pc, #72]	; (8003484 <HAL_InitTick+0x58>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	4619      	mov	r1, r3
 800343e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003442:	fbb3 f3f1 	udiv	r3, r3, r1
 8003446:	fbb2 f3f3 	udiv	r3, r2, r3
 800344a:	4618      	mov	r0, r3
 800344c:	f000 ff71 	bl	8004332 <HAL_SYSTICK_Config>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e00e      	b.n	8003478 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b0f      	cmp	r3, #15
 800345e:	d80a      	bhi.n	8003476 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003460:	2200      	movs	r2, #0
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	f04f 30ff 	mov.w	r0, #4294967295
 8003468:	f000 ff39 	bl	80042de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800346c:	4a06      	ldr	r2, [pc, #24]	; (8003488 <HAL_InitTick+0x5c>)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	e000      	b.n	8003478 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
}
 8003478:	4618      	mov	r0, r3
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	20000000 	.word	0x20000000
 8003484:	20000008 	.word	0x20000008
 8003488:	20000004 	.word	0x20000004

0800348c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003490:	4b06      	ldr	r3, [pc, #24]	; (80034ac <HAL_IncTick+0x20>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	461a      	mov	r2, r3
 8003496:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <HAL_IncTick+0x24>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4413      	add	r3, r2
 800349c:	4a04      	ldr	r2, [pc, #16]	; (80034b0 <HAL_IncTick+0x24>)
 800349e:	6013      	str	r3, [r2, #0]
}
 80034a0:	bf00      	nop
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	20000008 	.word	0x20000008
 80034b0:	20000320 	.word	0x20000320

080034b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  return uwTick;
 80034b8:	4b03      	ldr	r3, [pc, #12]	; (80034c8 <HAL_GetTick+0x14>)
 80034ba:	681b      	ldr	r3, [r3, #0]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	20000320 	.word	0x20000320

080034cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034d4:	f7ff ffee 	bl	80034b4 <HAL_GetTick>
 80034d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e4:	d005      	beq.n	80034f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034e6:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <HAL_Delay+0x44>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	461a      	mov	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4413      	add	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034f2:	bf00      	nop
 80034f4:	f7ff ffde 	bl	80034b4 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	429a      	cmp	r2, r3
 8003502:	d8f7      	bhi.n	80034f4 <HAL_Delay+0x28>
  {
  }
}
 8003504:	bf00      	nop
 8003506:	bf00      	nop
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000008 	.word	0x20000008

08003514 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 8003518:	4b02      	ldr	r3, [pc, #8]	; (8003524 <HAL_GetHalVersion+0x10>)
}
 800351a:	4618      	mov	r0, r3
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	01020a00 	.word	0x01020a00

08003528 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 800352c:	4b03      	ldr	r3, [pc, #12]	; (800353c <HAL_GetREVID+0x14>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	0c1b      	lsrs	r3, r3, #16
}
 8003532:	4618      	mov	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	e0042000 	.word	0xe0042000

08003540 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8003544:	4b04      	ldr	r3, [pc, #16]	; (8003558 <HAL_GetDEVID+0x18>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800354c:	4618      	mov	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	e0042000 	.word	0xe0042000

0800355c <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8003560:	4b03      	ldr	r3, [pc, #12]	; (8003570 <HAL_GetUIDw0+0x14>)
 8003562:	681b      	ldr	r3, [r3, #0]
}
 8003564:	4618      	mov	r0, r3
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	1ff0f420 	.word	0x1ff0f420

08003574 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003578:	4b03      	ldr	r3, [pc, #12]	; (8003588 <HAL_GetUIDw1+0x14>)
 800357a:	681b      	ldr	r3, [r3, #0]
}
 800357c:	4618      	mov	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	1ff0f424 	.word	0x1ff0f424

0800358c <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003590:	4b03      	ldr	r3, [pc, #12]	; (80035a0 <HAL_GetUIDw2+0x14>)
 8003592:	681b      	ldr	r3, [r3, #0]
}
 8003594:	4618      	mov	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	1ff0f428 	.word	0x1ff0f428

080035a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e031      	b.n	800361e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d109      	bne.n	80035d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7fe fb0a 	bl	8001bdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f003 0310 	and.w	r3, r3, #16
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d116      	bne.n	8003610 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035e6:	4b10      	ldr	r3, [pc, #64]	; (8003628 <HAL_ADC_Init+0x84>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	f043 0202 	orr.w	r2, r3, #2
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f970 	bl	80038d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f023 0303 	bic.w	r3, r3, #3
 8003606:	f043 0201 	orr.w	r2, r3, #1
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	641a      	str	r2, [r3, #64]	; 0x40
 800360e:	e001      	b.n	8003614 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800361c:	7bfb      	ldrb	r3, [r7, #15]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	ffffeefd 	.word	0xffffeefd

0800362c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x1c>
 8003644:	2302      	movs	r3, #2
 8003646:	e136      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x28a>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b09      	cmp	r3, #9
 8003656:	d93a      	bls.n	80036ce <HAL_ADC_ConfigChannel+0xa2>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003660:	d035      	beq.n	80036ce <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68d9      	ldr	r1, [r3, #12]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	b29b      	uxth	r3, r3
 800366e:	461a      	mov	r2, r3
 8003670:	4613      	mov	r3, r2
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	4413      	add	r3, r2
 8003676:	3b1e      	subs	r3, #30
 8003678:	2207      	movs	r2, #7
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	43da      	mvns	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	400a      	ands	r2, r1
 8003686:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a8d      	ldr	r2, [pc, #564]	; (80038c4 <HAL_ADC_ConfigChannel+0x298>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d10a      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68d9      	ldr	r1, [r3, #12]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	061a      	lsls	r2, r3, #24
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036a6:	e035      	b.n	8003714 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68d9      	ldr	r1, [r3, #12]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	4618      	mov	r0, r3
 80036ba:	4603      	mov	r3, r0
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	4403      	add	r3, r0
 80036c0:	3b1e      	subs	r3, #30
 80036c2:	409a      	lsls	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036cc:	e022      	b.n	8003714 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6919      	ldr	r1, [r3, #16]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	b29b      	uxth	r3, r3
 80036da:	461a      	mov	r2, r3
 80036dc:	4613      	mov	r3, r2
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	4413      	add	r3, r2
 80036e2:	2207      	movs	r2, #7
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	43da      	mvns	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	400a      	ands	r2, r1
 80036f0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6919      	ldr	r1, [r3, #16]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	b29b      	uxth	r3, r3
 8003702:	4618      	mov	r0, r3
 8003704:	4603      	mov	r3, r0
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	4403      	add	r3, r0
 800370a:	409a      	lsls	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b06      	cmp	r3, #6
 800371a:	d824      	bhi.n	8003766 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	4613      	mov	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	3b05      	subs	r3, #5
 800372e:	221f      	movs	r2, #31
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	43da      	mvns	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	400a      	ands	r2, r1
 800373c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	b29b      	uxth	r3, r3
 800374a:	4618      	mov	r0, r3
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	3b05      	subs	r3, #5
 8003758:	fa00 f203 	lsl.w	r2, r0, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	635a      	str	r2, [r3, #52]	; 0x34
 8003764:	e04c      	b.n	8003800 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b0c      	cmp	r3, #12
 800376c:	d824      	bhi.n	80037b8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	3b23      	subs	r3, #35	; 0x23
 8003780:	221f      	movs	r2, #31
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	43da      	mvns	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	400a      	ands	r2, r1
 800378e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	b29b      	uxth	r3, r3
 800379c:	4618      	mov	r0, r3
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	3b23      	subs	r3, #35	; 0x23
 80037aa:	fa00 f203 	lsl.w	r2, r0, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	631a      	str	r2, [r3, #48]	; 0x30
 80037b6:	e023      	b.n	8003800 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	3b41      	subs	r3, #65	; 0x41
 80037ca:	221f      	movs	r2, #31
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	43da      	mvns	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	400a      	ands	r2, r1
 80037d8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	4618      	mov	r0, r3
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	3b41      	subs	r3, #65	; 0x41
 80037f4:	fa00 f203 	lsl.w	r2, r0, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a30      	ldr	r2, [pc, #192]	; (80038c8 <HAL_ADC_ConfigChannel+0x29c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d10a      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x1f4>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003812:	d105      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003814:	4b2d      	ldr	r3, [pc, #180]	; (80038cc <HAL_ADC_ConfigChannel+0x2a0>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	4a2c      	ldr	r2, [pc, #176]	; (80038cc <HAL_ADC_ConfigChannel+0x2a0>)
 800381a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800381e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a28      	ldr	r2, [pc, #160]	; (80038c8 <HAL_ADC_ConfigChannel+0x29c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d10f      	bne.n	800384a <HAL_ADC_ConfigChannel+0x21e>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b12      	cmp	r3, #18
 8003830:	d10b      	bne.n	800384a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003832:	4b26      	ldr	r3, [pc, #152]	; (80038cc <HAL_ADC_ConfigChannel+0x2a0>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	4a25      	ldr	r2, [pc, #148]	; (80038cc <HAL_ADC_ConfigChannel+0x2a0>)
 8003838:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800383c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800383e:	4b23      	ldr	r3, [pc, #140]	; (80038cc <HAL_ADC_ConfigChannel+0x2a0>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	4a22      	ldr	r2, [pc, #136]	; (80038cc <HAL_ADC_ConfigChannel+0x2a0>)
 8003844:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003848:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a1e      	ldr	r2, [pc, #120]	; (80038c8 <HAL_ADC_ConfigChannel+0x29c>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d12b      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x280>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a1a      	ldr	r2, [pc, #104]	; (80038c4 <HAL_ADC_ConfigChannel+0x298>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d003      	beq.n	8003866 <HAL_ADC_ConfigChannel+0x23a>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b11      	cmp	r3, #17
 8003864:	d122      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003866:	4b19      	ldr	r3, [pc, #100]	; (80038cc <HAL_ADC_ConfigChannel+0x2a0>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	4a18      	ldr	r2, [pc, #96]	; (80038cc <HAL_ADC_ConfigChannel+0x2a0>)
 800386c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003870:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003872:	4b16      	ldr	r3, [pc, #88]	; (80038cc <HAL_ADC_ConfigChannel+0x2a0>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	4a15      	ldr	r2, [pc, #84]	; (80038cc <HAL_ADC_ConfigChannel+0x2a0>)
 8003878:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800387c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a10      	ldr	r2, [pc, #64]	; (80038c4 <HAL_ADC_ConfigChannel+0x298>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d111      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003888:	4b11      	ldr	r3, [pc, #68]	; (80038d0 <HAL_ADC_ConfigChannel+0x2a4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a11      	ldr	r2, [pc, #68]	; (80038d4 <HAL_ADC_ConfigChannel+0x2a8>)
 800388e:	fba2 2303 	umull	r2, r3, r2, r3
 8003892:	0c9a      	lsrs	r2, r3, #18
 8003894:	4613      	mov	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800389e:	e002      	b.n	80038a6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1f9      	bne.n	80038a0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	10000012 	.word	0x10000012
 80038c8:	40012000 	.word	0x40012000
 80038cc:	40012300 	.word	0x40012300
 80038d0:	20000000 	.word	0x20000000
 80038d4:	431bde83 	.word	0x431bde83

080038d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80038e0:	4b78      	ldr	r3, [pc, #480]	; (8003ac4 <ADC_Init+0x1ec>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	4a77      	ldr	r2, [pc, #476]	; (8003ac4 <ADC_Init+0x1ec>)
 80038e6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80038ea:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80038ec:	4b75      	ldr	r3, [pc, #468]	; (8003ac4 <ADC_Init+0x1ec>)
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	4973      	ldr	r1, [pc, #460]	; (8003ac4 <ADC_Init+0x1ec>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003908:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6859      	ldr	r1, [r3, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	021a      	lsls	r2, r3, #8
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800392c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6859      	ldr	r1, [r3, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800394e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6899      	ldr	r1, [r3, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003966:	4a58      	ldr	r2, [pc, #352]	; (8003ac8 <ADC_Init+0x1f0>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d022      	beq.n	80039b2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800397a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6899      	ldr	r1, [r3, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800399c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6899      	ldr	r1, [r3, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	609a      	str	r2, [r3, #8]
 80039b0:	e00f      	b.n	80039d2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0202 	bic.w	r2, r2, #2
 80039e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6899      	ldr	r1, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	005a      	lsls	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d01b      	beq.n	8003a38 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a0e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6859      	ldr	r1, [r3, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	035a      	lsls	r2, r3, #13
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	605a      	str	r2, [r3, #4]
 8003a36:	e007      	b.n	8003a48 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a46:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003a56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	051a      	lsls	r2, r3, #20
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6899      	ldr	r1, [r3, #8]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a8a:	025a      	lsls	r2, r3, #9
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6899      	ldr	r1, [r3, #8]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	029a      	lsls	r2, r3, #10
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	609a      	str	r2, [r3, #8]
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	40012300 	.word	0x40012300
 8003ac8:	0f000001 	.word	0x0f000001

08003acc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e0ed      	b.n	8003cba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d102      	bne.n	8003af0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7fe f922 	bl	8001d34 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b00:	f7ff fcd8 	bl	80034b4 <HAL_GetTick>
 8003b04:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003b06:	e012      	b.n	8003b2e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b08:	f7ff fcd4 	bl	80034b4 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b0a      	cmp	r3, #10
 8003b14:	d90b      	bls.n	8003b2e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2205      	movs	r2, #5
 8003b26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e0c5      	b.n	8003cba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0e5      	beq.n	8003b08 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0202 	bic.w	r2, r2, #2
 8003b4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b4c:	f7ff fcb2 	bl	80034b4 <HAL_GetTick>
 8003b50:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003b52:	e012      	b.n	8003b7a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b54:	f7ff fcae 	bl	80034b4 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b0a      	cmp	r3, #10
 8003b60:	d90b      	bls.n	8003b7a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2205      	movs	r2, #5
 8003b72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e09f      	b.n	8003cba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1e5      	bne.n	8003b54 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	7e1b      	ldrb	r3, [r3, #24]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d108      	bne.n	8003ba2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	e007      	b.n	8003bb2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	7e5b      	ldrb	r3, [r3, #25]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d108      	bne.n	8003bcc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	e007      	b.n	8003bdc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bda:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	7e9b      	ldrb	r3, [r3, #26]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d108      	bne.n	8003bf6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0220 	orr.w	r2, r2, #32
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	e007      	b.n	8003c06 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0220 	bic.w	r2, r2, #32
 8003c04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	7edb      	ldrb	r3, [r3, #27]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d108      	bne.n	8003c20 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0210 	bic.w	r2, r2, #16
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	e007      	b.n	8003c30 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0210 	orr.w	r2, r2, #16
 8003c2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	7f1b      	ldrb	r3, [r3, #28]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d108      	bne.n	8003c4a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0208 	orr.w	r2, r2, #8
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	e007      	b.n	8003c5a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0208 	bic.w	r2, r2, #8
 8003c58:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	7f5b      	ldrb	r3, [r3, #29]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d108      	bne.n	8003c74 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 0204 	orr.w	r2, r2, #4
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	e007      	b.n	8003c84 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0204 	bic.w	r2, r2, #4
 8003c82:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	ea42 0103 	orr.w	r1, r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	1e5a      	subs	r2, r3, #1
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cda:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003cdc:	7cfb      	ldrb	r3, [r7, #19]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d003      	beq.n	8003cea <HAL_CAN_ConfigFilter+0x26>
 8003ce2:	7cfb      	ldrb	r3, [r7, #19]
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	f040 80c7 	bne.w	8003e78 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a69      	ldr	r2, [pc, #420]	; (8003e94 <HAL_CAN_ConfigFilter+0x1d0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d001      	beq.n	8003cf8 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8003cf4:	4b68      	ldr	r3, [pc, #416]	; (8003e98 <HAL_CAN_ConfigFilter+0x1d4>)
 8003cf6:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003cfe:	f043 0201 	orr.w	r2, r3, #1
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	4a63      	ldr	r2, [pc, #396]	; (8003e98 <HAL_CAN_ConfigFilter+0x1d4>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d111      	bne.n	8003d34 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003d16:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	021b      	lsls	r3, r3, #8
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	f003 031f 	and.w	r3, r3, #31
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	401a      	ands	r2, r3
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d123      	bne.n	8003da6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	43db      	mvns	r3, r3
 8003d68:	401a      	ands	r2, r3
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003d80:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	3248      	adds	r2, #72	; 0x48
 8003d86:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d9a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d9c:	6979      	ldr	r1, [r7, #20]
 8003d9e:	3348      	adds	r3, #72	; 0x48
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	440b      	add	r3, r1
 8003da4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d122      	bne.n	8003df4 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	431a      	orrs	r2, r3
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003dce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	3248      	adds	r2, #72	; 0x48
 8003dd4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003de8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003dea:	6979      	ldr	r1, [r7, #20]
 8003dec:	3348      	adds	r3, #72	; 0x48
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	440b      	add	r3, r1
 8003df2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d109      	bne.n	8003e10 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	43db      	mvns	r3, r3
 8003e06:	401a      	ands	r2, r3
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003e0e:	e007      	b.n	8003e20 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d109      	bne.n	8003e3c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	43db      	mvns	r3, r3
 8003e32:	401a      	ands	r2, r3
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003e3a:	e007      	b.n	8003e4c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	431a      	orrs	r2, r3
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d107      	bne.n	8003e64 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003e6a:	f023 0201 	bic.w	r2, r3, #1
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	e006      	b.n	8003e86 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
  }
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	371c      	adds	r7, #28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40003400 	.word	0x40003400
 8003e98:	40006400 	.word	0x40006400

08003e9c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d12e      	bne.n	8003f0e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0201 	bic.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ec8:	f7ff faf4 	bl	80034b4 <HAL_GetTick>
 8003ecc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003ece:	e012      	b.n	8003ef6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ed0:	f7ff faf0 	bl	80034b4 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b0a      	cmp	r3, #10
 8003edc:	d90b      	bls.n	8003ef6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2205      	movs	r2, #5
 8003eee:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e012      	b.n	8003f1c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e5      	bne.n	8003ed0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	e006      	b.n	8003f1c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
  }
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b089      	sub	sp, #36	; 0x24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f38:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003f42:	7ffb      	ldrb	r3, [r7, #31]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d003      	beq.n	8003f50 <HAL_CAN_AddTxMessage+0x2c>
 8003f48:	7ffb      	ldrb	r3, [r7, #31]
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	f040 80b8 	bne.w	80040c0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10a      	bne.n	8003f70 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d105      	bne.n	8003f70 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 80a0 	beq.w	80040b0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	0e1b      	lsrs	r3, r3, #24
 8003f74:	f003 0303 	and.w	r3, r3, #3
 8003f78:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d907      	bls.n	8003f90 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e09e      	b.n	80040ce <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003f90:	2201      	movs	r2, #1
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	409a      	lsls	r2, r3
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10d      	bne.n	8003fbe <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003fac:	68f9      	ldr	r1, [r7, #12]
 8003fae:	6809      	ldr	r1, [r1, #0]
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	3318      	adds	r3, #24
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	440b      	add	r3, r1
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	e00f      	b.n	8003fde <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003fc8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003fce:	68f9      	ldr	r1, [r7, #12]
 8003fd0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003fd2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	3318      	adds	r3, #24
 8003fd8:	011b      	lsls	r3, r3, #4
 8003fda:	440b      	add	r3, r1
 8003fdc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6819      	ldr	r1, [r3, #0]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	691a      	ldr	r2, [r3, #16]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	3318      	adds	r3, #24
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	440b      	add	r3, r1
 8003fee:	3304      	adds	r3, #4
 8003ff0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	7d1b      	ldrb	r3, [r3, #20]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d111      	bne.n	800401e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	3318      	adds	r3, #24
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	4413      	add	r3, r2
 8004006:	3304      	adds	r3, #4
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	6811      	ldr	r1, [r2, #0]
 800400e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	3318      	adds	r3, #24
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	440b      	add	r3, r1
 800401a:	3304      	adds	r3, #4
 800401c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3307      	adds	r3, #7
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	061a      	lsls	r2, r3, #24
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	3306      	adds	r3, #6
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	041b      	lsls	r3, r3, #16
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3305      	adds	r3, #5
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	021b      	lsls	r3, r3, #8
 8004038:	4313      	orrs	r3, r2
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	3204      	adds	r2, #4
 800403e:	7812      	ldrb	r2, [r2, #0]
 8004040:	4610      	mov	r0, r2
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	6811      	ldr	r1, [r2, #0]
 8004046:	ea43 0200 	orr.w	r2, r3, r0
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	011b      	lsls	r3, r3, #4
 800404e:	440b      	add	r3, r1
 8004050:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004054:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3303      	adds	r3, #3
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	061a      	lsls	r2, r3, #24
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3302      	adds	r3, #2
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	041b      	lsls	r3, r3, #16
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3301      	adds	r3, #1
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	021b      	lsls	r3, r3, #8
 8004070:	4313      	orrs	r3, r2
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	7812      	ldrb	r2, [r2, #0]
 8004076:	4610      	mov	r0, r2
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	6811      	ldr	r1, [r2, #0]
 800407c:	ea43 0200 	orr.w	r2, r3, r0
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	440b      	add	r3, r1
 8004086:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800408a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	3318      	adds	r3, #24
 8004094:	011b      	lsls	r3, r3, #4
 8004096:	4413      	add	r3, r2
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	6811      	ldr	r1, [r2, #0]
 800409e:	f043 0201 	orr.w	r2, r3, #1
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	3318      	adds	r3, #24
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	440b      	add	r3, r1
 80040aa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	e00e      	b.n	80040ce <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e006      	b.n	80040ce <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
  }
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3724      	adds	r7, #36	; 0x24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80040da:	b480      	push	{r7}
 80040dc:	b085      	sub	sp, #20
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040ea:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d002      	beq.n	80040f8 <HAL_CAN_ActivateNotification+0x1e>
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d109      	bne.n	800410c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6959      	ldr	r1, [r3, #20]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	e006      	b.n	800411a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
  }
}
 800411a:	4618      	mov	r0, r3
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
	...

08004128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f003 0307 	and.w	r3, r3, #7
 8004136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004138:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <__NVIC_SetPriorityGrouping+0x40>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004144:	4013      	ands	r3, r2
 8004146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004150:	4b06      	ldr	r3, [pc, #24]	; (800416c <__NVIC_SetPriorityGrouping+0x44>)
 8004152:	4313      	orrs	r3, r2
 8004154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004156:	4a04      	ldr	r2, [pc, #16]	; (8004168 <__NVIC_SetPriorityGrouping+0x40>)
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	60d3      	str	r3, [r2, #12]
}
 800415c:	bf00      	nop
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	e000ed00 	.word	0xe000ed00
 800416c:	05fa0000 	.word	0x05fa0000

08004170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004174:	4b04      	ldr	r3, [pc, #16]	; (8004188 <__NVIC_GetPriorityGrouping+0x18>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	0a1b      	lsrs	r3, r3, #8
 800417a:	f003 0307 	and.w	r3, r3, #7
}
 800417e:	4618      	mov	r0, r3
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	e000ed00 	.word	0xe000ed00

0800418c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419a:	2b00      	cmp	r3, #0
 800419c:	db0b      	blt.n	80041b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800419e:	79fb      	ldrb	r3, [r7, #7]
 80041a0:	f003 021f 	and.w	r2, r3, #31
 80041a4:	4907      	ldr	r1, [pc, #28]	; (80041c4 <__NVIC_EnableIRQ+0x38>)
 80041a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041aa:	095b      	lsrs	r3, r3, #5
 80041ac:	2001      	movs	r0, #1
 80041ae:	fa00 f202 	lsl.w	r2, r0, r2
 80041b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	e000e100 	.word	0xe000e100

080041c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	6039      	str	r1, [r7, #0]
 80041d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	db0a      	blt.n	80041f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	490c      	ldr	r1, [pc, #48]	; (8004214 <__NVIC_SetPriority+0x4c>)
 80041e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e6:	0112      	lsls	r2, r2, #4
 80041e8:	b2d2      	uxtb	r2, r2
 80041ea:	440b      	add	r3, r1
 80041ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041f0:	e00a      	b.n	8004208 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	4908      	ldr	r1, [pc, #32]	; (8004218 <__NVIC_SetPriority+0x50>)
 80041f8:	79fb      	ldrb	r3, [r7, #7]
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	3b04      	subs	r3, #4
 8004200:	0112      	lsls	r2, r2, #4
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	440b      	add	r3, r1
 8004206:	761a      	strb	r2, [r3, #24]
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	e000e100 	.word	0xe000e100
 8004218:	e000ed00 	.word	0xe000ed00

0800421c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800421c:	b480      	push	{r7}
 800421e:	b089      	sub	sp, #36	; 0x24
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f1c3 0307 	rsb	r3, r3, #7
 8004236:	2b04      	cmp	r3, #4
 8004238:	bf28      	it	cs
 800423a:	2304      	movcs	r3, #4
 800423c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	3304      	adds	r3, #4
 8004242:	2b06      	cmp	r3, #6
 8004244:	d902      	bls.n	800424c <NVIC_EncodePriority+0x30>
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	3b03      	subs	r3, #3
 800424a:	e000      	b.n	800424e <NVIC_EncodePriority+0x32>
 800424c:	2300      	movs	r3, #0
 800424e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004250:	f04f 32ff 	mov.w	r2, #4294967295
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	43da      	mvns	r2, r3
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	401a      	ands	r2, r3
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004264:	f04f 31ff 	mov.w	r1, #4294967295
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	fa01 f303 	lsl.w	r3, r1, r3
 800426e:	43d9      	mvns	r1, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004274:	4313      	orrs	r3, r2
         );
}
 8004276:	4618      	mov	r0, r3
 8004278:	3724      	adds	r7, #36	; 0x24
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
	...

08004284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3b01      	subs	r3, #1
 8004290:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004294:	d301      	bcc.n	800429a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004296:	2301      	movs	r3, #1
 8004298:	e00f      	b.n	80042ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800429a:	4a0a      	ldr	r2, [pc, #40]	; (80042c4 <SysTick_Config+0x40>)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3b01      	subs	r3, #1
 80042a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042a2:	210f      	movs	r1, #15
 80042a4:	f04f 30ff 	mov.w	r0, #4294967295
 80042a8:	f7ff ff8e 	bl	80041c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042ac:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <SysTick_Config+0x40>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042b2:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <SysTick_Config+0x40>)
 80042b4:	2207      	movs	r2, #7
 80042b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	e000e010 	.word	0xe000e010

080042c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7ff ff29 	bl	8004128 <__NVIC_SetPriorityGrouping>
}
 80042d6:	bf00      	nop
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042de:	b580      	push	{r7, lr}
 80042e0:	b086      	sub	sp, #24
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	4603      	mov	r3, r0
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	607a      	str	r2, [r7, #4]
 80042ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042f0:	f7ff ff3e 	bl	8004170 <__NVIC_GetPriorityGrouping>
 80042f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	68b9      	ldr	r1, [r7, #8]
 80042fa:	6978      	ldr	r0, [r7, #20]
 80042fc:	f7ff ff8e 	bl	800421c <NVIC_EncodePriority>
 8004300:	4602      	mov	r2, r0
 8004302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004306:	4611      	mov	r1, r2
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff ff5d 	bl	80041c8 <__NVIC_SetPriority>
}
 800430e:	bf00      	nop
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b082      	sub	sp, #8
 800431a:	af00      	add	r7, sp, #0
 800431c:	4603      	mov	r3, r0
 800431e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff ff31 	bl	800418c <__NVIC_EnableIRQ>
}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b082      	sub	sp, #8
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7ff ffa2 	bl	8004284 <SysTick_Config>
 8004340:	4603      	mov	r3, r0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
	...

0800434c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800434c:	b480      	push	{r7}
 800434e:	b089      	sub	sp, #36	; 0x24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004356:	2300      	movs	r3, #0
 8004358:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800435a:	2300      	movs	r3, #0
 800435c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800435e:	2300      	movs	r3, #0
 8004360:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004362:	2300      	movs	r3, #0
 8004364:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004366:	2300      	movs	r3, #0
 8004368:	61fb      	str	r3, [r7, #28]
 800436a:	e175      	b.n	8004658 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800436c:	2201      	movs	r2, #1
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	4013      	ands	r3, r2
 800437e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	429a      	cmp	r2, r3
 8004386:	f040 8164 	bne.w	8004652 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	2b01      	cmp	r3, #1
 8004394:	d005      	beq.n	80043a2 <HAL_GPIO_Init+0x56>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d130      	bne.n	8004404 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	2203      	movs	r2, #3
 80043ae:	fa02 f303 	lsl.w	r3, r2, r3
 80043b2:	43db      	mvns	r3, r3
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	4013      	ands	r3, r2
 80043b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043d8:	2201      	movs	r2, #1
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	43db      	mvns	r3, r3
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	4013      	ands	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	091b      	lsrs	r3, r3, #4
 80043ee:	f003 0201 	and.w	r2, r3, #1
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 0303 	and.w	r3, r3, #3
 800440c:	2b03      	cmp	r3, #3
 800440e:	d017      	beq.n	8004440 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	2203      	movs	r2, #3
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	43db      	mvns	r3, r3
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	4013      	ands	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	4313      	orrs	r3, r2
 8004438:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f003 0303 	and.w	r3, r3, #3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d123      	bne.n	8004494 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	08da      	lsrs	r2, r3, #3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3208      	adds	r2, #8
 8004454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	220f      	movs	r2, #15
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	43db      	mvns	r3, r3
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	4013      	ands	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	691a      	ldr	r2, [r3, #16]
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	4313      	orrs	r3, r2
 8004484:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	08da      	lsrs	r2, r3, #3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	3208      	adds	r2, #8
 800448e:	69b9      	ldr	r1, [r7, #24]
 8004490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	2203      	movs	r2, #3
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	43db      	mvns	r3, r3
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	4013      	ands	r3, r2
 80044aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f003 0203 	and.w	r2, r3, #3
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	4313      	orrs	r3, r2
 80044c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 80be 	beq.w	8004652 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044d6:	4b66      	ldr	r3, [pc, #408]	; (8004670 <HAL_GPIO_Init+0x324>)
 80044d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044da:	4a65      	ldr	r2, [pc, #404]	; (8004670 <HAL_GPIO_Init+0x324>)
 80044dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044e0:	6453      	str	r3, [r2, #68]	; 0x44
 80044e2:	4b63      	ldr	r3, [pc, #396]	; (8004670 <HAL_GPIO_Init+0x324>)
 80044e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80044ee:	4a61      	ldr	r2, [pc, #388]	; (8004674 <HAL_GPIO_Init+0x328>)
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	089b      	lsrs	r3, r3, #2
 80044f4:	3302      	adds	r3, #2
 80044f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	220f      	movs	r2, #15
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	43db      	mvns	r3, r3
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	4013      	ands	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a58      	ldr	r2, [pc, #352]	; (8004678 <HAL_GPIO_Init+0x32c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d037      	beq.n	800458a <HAL_GPIO_Init+0x23e>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a57      	ldr	r2, [pc, #348]	; (800467c <HAL_GPIO_Init+0x330>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d031      	beq.n	8004586 <HAL_GPIO_Init+0x23a>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a56      	ldr	r2, [pc, #344]	; (8004680 <HAL_GPIO_Init+0x334>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d02b      	beq.n	8004582 <HAL_GPIO_Init+0x236>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a55      	ldr	r2, [pc, #340]	; (8004684 <HAL_GPIO_Init+0x338>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d025      	beq.n	800457e <HAL_GPIO_Init+0x232>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a54      	ldr	r2, [pc, #336]	; (8004688 <HAL_GPIO_Init+0x33c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d01f      	beq.n	800457a <HAL_GPIO_Init+0x22e>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a53      	ldr	r2, [pc, #332]	; (800468c <HAL_GPIO_Init+0x340>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d019      	beq.n	8004576 <HAL_GPIO_Init+0x22a>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a52      	ldr	r2, [pc, #328]	; (8004690 <HAL_GPIO_Init+0x344>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d013      	beq.n	8004572 <HAL_GPIO_Init+0x226>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a51      	ldr	r2, [pc, #324]	; (8004694 <HAL_GPIO_Init+0x348>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d00d      	beq.n	800456e <HAL_GPIO_Init+0x222>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a50      	ldr	r2, [pc, #320]	; (8004698 <HAL_GPIO_Init+0x34c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d007      	beq.n	800456a <HAL_GPIO_Init+0x21e>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a4f      	ldr	r2, [pc, #316]	; (800469c <HAL_GPIO_Init+0x350>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d101      	bne.n	8004566 <HAL_GPIO_Init+0x21a>
 8004562:	2309      	movs	r3, #9
 8004564:	e012      	b.n	800458c <HAL_GPIO_Init+0x240>
 8004566:	230a      	movs	r3, #10
 8004568:	e010      	b.n	800458c <HAL_GPIO_Init+0x240>
 800456a:	2308      	movs	r3, #8
 800456c:	e00e      	b.n	800458c <HAL_GPIO_Init+0x240>
 800456e:	2307      	movs	r3, #7
 8004570:	e00c      	b.n	800458c <HAL_GPIO_Init+0x240>
 8004572:	2306      	movs	r3, #6
 8004574:	e00a      	b.n	800458c <HAL_GPIO_Init+0x240>
 8004576:	2305      	movs	r3, #5
 8004578:	e008      	b.n	800458c <HAL_GPIO_Init+0x240>
 800457a:	2304      	movs	r3, #4
 800457c:	e006      	b.n	800458c <HAL_GPIO_Init+0x240>
 800457e:	2303      	movs	r3, #3
 8004580:	e004      	b.n	800458c <HAL_GPIO_Init+0x240>
 8004582:	2302      	movs	r3, #2
 8004584:	e002      	b.n	800458c <HAL_GPIO_Init+0x240>
 8004586:	2301      	movs	r3, #1
 8004588:	e000      	b.n	800458c <HAL_GPIO_Init+0x240>
 800458a:	2300      	movs	r3, #0
 800458c:	69fa      	ldr	r2, [r7, #28]
 800458e:	f002 0203 	and.w	r2, r2, #3
 8004592:	0092      	lsls	r2, r2, #2
 8004594:	4093      	lsls	r3, r2
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	4313      	orrs	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800459c:	4935      	ldr	r1, [pc, #212]	; (8004674 <HAL_GPIO_Init+0x328>)
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	089b      	lsrs	r3, r3, #2
 80045a2:	3302      	adds	r3, #2
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045aa:	4b3d      	ldr	r3, [pc, #244]	; (80046a0 <HAL_GPIO_Init+0x354>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	43db      	mvns	r3, r3
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4013      	ands	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045ce:	4a34      	ldr	r2, [pc, #208]	; (80046a0 <HAL_GPIO_Init+0x354>)
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045d4:	4b32      	ldr	r3, [pc, #200]	; (80046a0 <HAL_GPIO_Init+0x354>)
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	43db      	mvns	r3, r3
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	4013      	ands	r3, r2
 80045e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045f8:	4a29      	ldr	r2, [pc, #164]	; (80046a0 <HAL_GPIO_Init+0x354>)
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045fe:	4b28      	ldr	r3, [pc, #160]	; (80046a0 <HAL_GPIO_Init+0x354>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	43db      	mvns	r3, r3
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	4013      	ands	r3, r2
 800460c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	4313      	orrs	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004622:	4a1f      	ldr	r2, [pc, #124]	; (80046a0 <HAL_GPIO_Init+0x354>)
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004628:	4b1d      	ldr	r3, [pc, #116]	; (80046a0 <HAL_GPIO_Init+0x354>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	43db      	mvns	r3, r3
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	4013      	ands	r3, r2
 8004636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	4313      	orrs	r3, r2
 800464a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800464c:	4a14      	ldr	r2, [pc, #80]	; (80046a0 <HAL_GPIO_Init+0x354>)
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	3301      	adds	r3, #1
 8004656:	61fb      	str	r3, [r7, #28]
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	2b0f      	cmp	r3, #15
 800465c:	f67f ae86 	bls.w	800436c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004660:	bf00      	nop
 8004662:	bf00      	nop
 8004664:	3724      	adds	r7, #36	; 0x24
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	40023800 	.word	0x40023800
 8004674:	40013800 	.word	0x40013800
 8004678:	40020000 	.word	0x40020000
 800467c:	40020400 	.word	0x40020400
 8004680:	40020800 	.word	0x40020800
 8004684:	40020c00 	.word	0x40020c00
 8004688:	40021000 	.word	0x40021000
 800468c:	40021400 	.word	0x40021400
 8004690:	40021800 	.word	0x40021800
 8004694:	40021c00 	.word	0x40021c00
 8004698:	40022000 	.word	0x40022000
 800469c:	40022400 	.word	0x40022400
 80046a0:	40013c00 	.word	0x40013c00

080046a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691a      	ldr	r2, [r3, #16]
 80046b4:	887b      	ldrh	r3, [r7, #2]
 80046b6:	4013      	ands	r3, r2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046bc:	2301      	movs	r3, #1
 80046be:	73fb      	strb	r3, [r7, #15]
 80046c0:	e001      	b.n	80046c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046c2:	2300      	movs	r3, #0
 80046c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	807b      	strh	r3, [r7, #2]
 80046e0:	4613      	mov	r3, r2
 80046e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046e4:	787b      	ldrb	r3, [r7, #1]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046ea:	887a      	ldrh	r2, [r7, #2]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80046f0:	e003      	b.n	80046fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80046f2:	887b      	ldrh	r3, [r7, #2]
 80046f4:	041a      	lsls	r2, r3, #16
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	619a      	str	r2, [r3, #24]
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
	...

08004708 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800470e:	2300      	movs	r3, #0
 8004710:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004712:	4b23      	ldr	r3, [pc, #140]	; (80047a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	4a22      	ldr	r2, [pc, #136]	; (80047a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800471c:	6413      	str	r3, [r2, #64]	; 0x40
 800471e:	4b20      	ldr	r3, [pc, #128]	; (80047a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004726:	603b      	str	r3, [r7, #0]
 8004728:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800472a:	4b1e      	ldr	r3, [pc, #120]	; (80047a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a1d      	ldr	r2, [pc, #116]	; (80047a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004734:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004736:	f7fe febd 	bl	80034b4 <HAL_GetTick>
 800473a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800473c:	e009      	b.n	8004752 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800473e:	f7fe feb9 	bl	80034b4 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800474c:	d901      	bls.n	8004752 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e022      	b.n	8004798 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004752:	4b14      	ldr	r3, [pc, #80]	; (80047a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800475a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800475e:	d1ee      	bne.n	800473e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004760:	4b10      	ldr	r3, [pc, #64]	; (80047a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a0f      	ldr	r2, [pc, #60]	; (80047a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004766:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800476a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800476c:	f7fe fea2 	bl	80034b4 <HAL_GetTick>
 8004770:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004772:	e009      	b.n	8004788 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004774:	f7fe fe9e 	bl	80034b4 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004782:	d901      	bls.n	8004788 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e007      	b.n	8004798 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004788:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004790:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004794:	d1ee      	bne.n	8004774 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3708      	adds	r7, #8
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40023800 	.word	0x40023800
 80047a4:	40007000 	.word	0x40007000

080047a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80047b0:	2300      	movs	r3, #0
 80047b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e29b      	b.n	8004cf6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 8087 	beq.w	80048da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047cc:	4b96      	ldr	r3, [pc, #600]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f003 030c 	and.w	r3, r3, #12
 80047d4:	2b04      	cmp	r3, #4
 80047d6:	d00c      	beq.n	80047f2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047d8:	4b93      	ldr	r3, [pc, #588]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 030c 	and.w	r3, r3, #12
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d112      	bne.n	800480a <HAL_RCC_OscConfig+0x62>
 80047e4:	4b90      	ldr	r3, [pc, #576]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047f0:	d10b      	bne.n	800480a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f2:	4b8d      	ldr	r3, [pc, #564]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d06c      	beq.n	80048d8 <HAL_RCC_OscConfig+0x130>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d168      	bne.n	80048d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e275      	b.n	8004cf6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004812:	d106      	bne.n	8004822 <HAL_RCC_OscConfig+0x7a>
 8004814:	4b84      	ldr	r3, [pc, #528]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a83      	ldr	r2, [pc, #524]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 800481a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800481e:	6013      	str	r3, [r2, #0]
 8004820:	e02e      	b.n	8004880 <HAL_RCC_OscConfig+0xd8>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10c      	bne.n	8004844 <HAL_RCC_OscConfig+0x9c>
 800482a:	4b7f      	ldr	r3, [pc, #508]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a7e      	ldr	r2, [pc, #504]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 8004830:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004834:	6013      	str	r3, [r2, #0]
 8004836:	4b7c      	ldr	r3, [pc, #496]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a7b      	ldr	r2, [pc, #492]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 800483c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004840:	6013      	str	r3, [r2, #0]
 8004842:	e01d      	b.n	8004880 <HAL_RCC_OscConfig+0xd8>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800484c:	d10c      	bne.n	8004868 <HAL_RCC_OscConfig+0xc0>
 800484e:	4b76      	ldr	r3, [pc, #472]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a75      	ldr	r2, [pc, #468]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 8004854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004858:	6013      	str	r3, [r2, #0]
 800485a:	4b73      	ldr	r3, [pc, #460]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a72      	ldr	r2, [pc, #456]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 8004860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004864:	6013      	str	r3, [r2, #0]
 8004866:	e00b      	b.n	8004880 <HAL_RCC_OscConfig+0xd8>
 8004868:	4b6f      	ldr	r3, [pc, #444]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a6e      	ldr	r2, [pc, #440]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 800486e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004872:	6013      	str	r3, [r2, #0]
 8004874:	4b6c      	ldr	r3, [pc, #432]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a6b      	ldr	r2, [pc, #428]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 800487a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800487e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d013      	beq.n	80048b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004888:	f7fe fe14 	bl	80034b4 <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004890:	f7fe fe10 	bl	80034b4 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b64      	cmp	r3, #100	; 0x64
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e229      	b.n	8004cf6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a2:	4b61      	ldr	r3, [pc, #388]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0f0      	beq.n	8004890 <HAL_RCC_OscConfig+0xe8>
 80048ae:	e014      	b.n	80048da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b0:	f7fe fe00 	bl	80034b4 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048b8:	f7fe fdfc 	bl	80034b4 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b64      	cmp	r3, #100	; 0x64
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e215      	b.n	8004cf6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ca:	4b57      	ldr	r3, [pc, #348]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1f0      	bne.n	80048b8 <HAL_RCC_OscConfig+0x110>
 80048d6:	e000      	b.n	80048da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d069      	beq.n	80049ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048e6:	4b50      	ldr	r3, [pc, #320]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 030c 	and.w	r3, r3, #12
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00b      	beq.n	800490a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048f2:	4b4d      	ldr	r3, [pc, #308]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 030c 	and.w	r3, r3, #12
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d11c      	bne.n	8004938 <HAL_RCC_OscConfig+0x190>
 80048fe:	4b4a      	ldr	r3, [pc, #296]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d116      	bne.n	8004938 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800490a:	4b47      	ldr	r3, [pc, #284]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d005      	beq.n	8004922 <HAL_RCC_OscConfig+0x17a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d001      	beq.n	8004922 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e1e9      	b.n	8004cf6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004922:	4b41      	ldr	r3, [pc, #260]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	493d      	ldr	r1, [pc, #244]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 8004932:	4313      	orrs	r3, r2
 8004934:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004936:	e040      	b.n	80049ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d023      	beq.n	8004988 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004940:	4b39      	ldr	r3, [pc, #228]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a38      	ldr	r2, [pc, #224]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 8004946:	f043 0301 	orr.w	r3, r3, #1
 800494a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494c:	f7fe fdb2 	bl	80034b4 <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004954:	f7fe fdae 	bl	80034b4 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e1c7      	b.n	8004cf6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004966:	4b30      	ldr	r3, [pc, #192]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0f0      	beq.n	8004954 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004972:	4b2d      	ldr	r3, [pc, #180]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	4929      	ldr	r1, [pc, #164]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 8004982:	4313      	orrs	r3, r2
 8004984:	600b      	str	r3, [r1, #0]
 8004986:	e018      	b.n	80049ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004988:	4b27      	ldr	r3, [pc, #156]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a26      	ldr	r2, [pc, #152]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 800498e:	f023 0301 	bic.w	r3, r3, #1
 8004992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004994:	f7fe fd8e 	bl	80034b4 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800499c:	f7fe fd8a 	bl	80034b4 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e1a3      	b.n	8004cf6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ae:	4b1e      	ldr	r3, [pc, #120]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1f0      	bne.n	800499c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0308 	and.w	r3, r3, #8
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d038      	beq.n	8004a38 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d019      	beq.n	8004a02 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ce:	4b16      	ldr	r3, [pc, #88]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 80049d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d2:	4a15      	ldr	r2, [pc, #84]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 80049d4:	f043 0301 	orr.w	r3, r3, #1
 80049d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049da:	f7fe fd6b 	bl	80034b4 <HAL_GetTick>
 80049de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049e0:	e008      	b.n	80049f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049e2:	f7fe fd67 	bl	80034b4 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e180      	b.n	8004cf6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049f4:	4b0c      	ldr	r3, [pc, #48]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 80049f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0f0      	beq.n	80049e2 <HAL_RCC_OscConfig+0x23a>
 8004a00:	e01a      	b.n	8004a38 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a02:	4b09      	ldr	r3, [pc, #36]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 8004a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a06:	4a08      	ldr	r2, [pc, #32]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 8004a08:	f023 0301 	bic.w	r3, r3, #1
 8004a0c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a0e:	f7fe fd51 	bl	80034b4 <HAL_GetTick>
 8004a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a14:	e00a      	b.n	8004a2c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a16:	f7fe fd4d 	bl	80034b4 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d903      	bls.n	8004a2c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e166      	b.n	8004cf6 <HAL_RCC_OscConfig+0x54e>
 8004a28:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a2c:	4b92      	ldr	r3, [pc, #584]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1ee      	bne.n	8004a16 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 80a4 	beq.w	8004b8e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a46:	4b8c      	ldr	r3, [pc, #560]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10d      	bne.n	8004a6e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a52:	4b89      	ldr	r3, [pc, #548]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	4a88      	ldr	r2, [pc, #544]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a5e:	4b86      	ldr	r3, [pc, #536]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a66:	60bb      	str	r3, [r7, #8]
 8004a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a6e:	4b83      	ldr	r3, [pc, #524]	; (8004c7c <HAL_RCC_OscConfig+0x4d4>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d118      	bne.n	8004aac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004a7a:	4b80      	ldr	r3, [pc, #512]	; (8004c7c <HAL_RCC_OscConfig+0x4d4>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a7f      	ldr	r2, [pc, #508]	; (8004c7c <HAL_RCC_OscConfig+0x4d4>)
 8004a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a86:	f7fe fd15 	bl	80034b4 <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a8e:	f7fe fd11 	bl	80034b4 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b64      	cmp	r3, #100	; 0x64
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e12a      	b.n	8004cf6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aa0:	4b76      	ldr	r3, [pc, #472]	; (8004c7c <HAL_RCC_OscConfig+0x4d4>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0f0      	beq.n	8004a8e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d106      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x31a>
 8004ab4:	4b70      	ldr	r3, [pc, #448]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab8:	4a6f      	ldr	r2, [pc, #444]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004aba:	f043 0301 	orr.w	r3, r3, #1
 8004abe:	6713      	str	r3, [r2, #112]	; 0x70
 8004ac0:	e02d      	b.n	8004b1e <HAL_RCC_OscConfig+0x376>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10c      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x33c>
 8004aca:	4b6b      	ldr	r3, [pc, #428]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ace:	4a6a      	ldr	r2, [pc, #424]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004ad0:	f023 0301 	bic.w	r3, r3, #1
 8004ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ad6:	4b68      	ldr	r3, [pc, #416]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ada:	4a67      	ldr	r2, [pc, #412]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004adc:	f023 0304 	bic.w	r3, r3, #4
 8004ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ae2:	e01c      	b.n	8004b1e <HAL_RCC_OscConfig+0x376>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	2b05      	cmp	r3, #5
 8004aea:	d10c      	bne.n	8004b06 <HAL_RCC_OscConfig+0x35e>
 8004aec:	4b62      	ldr	r3, [pc, #392]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af0:	4a61      	ldr	r2, [pc, #388]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004af2:	f043 0304 	orr.w	r3, r3, #4
 8004af6:	6713      	str	r3, [r2, #112]	; 0x70
 8004af8:	4b5f      	ldr	r3, [pc, #380]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afc:	4a5e      	ldr	r2, [pc, #376]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004afe:	f043 0301 	orr.w	r3, r3, #1
 8004b02:	6713      	str	r3, [r2, #112]	; 0x70
 8004b04:	e00b      	b.n	8004b1e <HAL_RCC_OscConfig+0x376>
 8004b06:	4b5c      	ldr	r3, [pc, #368]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0a:	4a5b      	ldr	r2, [pc, #364]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004b0c:	f023 0301 	bic.w	r3, r3, #1
 8004b10:	6713      	str	r3, [r2, #112]	; 0x70
 8004b12:	4b59      	ldr	r3, [pc, #356]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b16:	4a58      	ldr	r2, [pc, #352]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004b18:	f023 0304 	bic.w	r3, r3, #4
 8004b1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d015      	beq.n	8004b52 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b26:	f7fe fcc5 	bl	80034b4 <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b2c:	e00a      	b.n	8004b44 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b2e:	f7fe fcc1 	bl	80034b4 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e0d8      	b.n	8004cf6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b44:	4b4c      	ldr	r3, [pc, #304]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0ee      	beq.n	8004b2e <HAL_RCC_OscConfig+0x386>
 8004b50:	e014      	b.n	8004b7c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b52:	f7fe fcaf 	bl	80034b4 <HAL_GetTick>
 8004b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b58:	e00a      	b.n	8004b70 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b5a:	f7fe fcab 	bl	80034b4 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e0c2      	b.n	8004cf6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b70:	4b41      	ldr	r3, [pc, #260]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1ee      	bne.n	8004b5a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b7c:	7dfb      	ldrb	r3, [r7, #23]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d105      	bne.n	8004b8e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b82:	4b3d      	ldr	r3, [pc, #244]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	4a3c      	ldr	r2, [pc, #240]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 80ae 	beq.w	8004cf4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b98:	4b37      	ldr	r3, [pc, #220]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 030c 	and.w	r3, r3, #12
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d06d      	beq.n	8004c80 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d14b      	bne.n	8004c44 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bac:	4b32      	ldr	r3, [pc, #200]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a31      	ldr	r2, [pc, #196]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004bb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb8:	f7fe fc7c 	bl	80034b4 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc0:	f7fe fc78 	bl	80034b4 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e091      	b.n	8004cf6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd2:	4b29      	ldr	r3, [pc, #164]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1f0      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69da      	ldr	r2, [r3, #28]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	019b      	lsls	r3, r3, #6
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf4:	085b      	lsrs	r3, r3, #1
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	041b      	lsls	r3, r3, #16
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c00:	061b      	lsls	r3, r3, #24
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c08:	071b      	lsls	r3, r3, #28
 8004c0a:	491b      	ldr	r1, [pc, #108]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c10:	4b19      	ldr	r3, [pc, #100]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a18      	ldr	r2, [pc, #96]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004c16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c1c:	f7fe fc4a 	bl	80034b4 <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c24:	f7fe fc46 	bl	80034b4 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e05f      	b.n	8004cf6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c36:	4b10      	ldr	r3, [pc, #64]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0f0      	beq.n	8004c24 <HAL_RCC_OscConfig+0x47c>
 8004c42:	e057      	b.n	8004cf4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c44:	4b0c      	ldr	r3, [pc, #48]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a0b      	ldr	r2, [pc, #44]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004c4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c50:	f7fe fc30 	bl	80034b4 <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c58:	f7fe fc2c 	bl	80034b4 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e045      	b.n	8004cf6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c6a:	4b03      	ldr	r3, [pc, #12]	; (8004c78 <HAL_RCC_OscConfig+0x4d0>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f0      	bne.n	8004c58 <HAL_RCC_OscConfig+0x4b0>
 8004c76:	e03d      	b.n	8004cf4 <HAL_RCC_OscConfig+0x54c>
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004c80:	4b1f      	ldr	r3, [pc, #124]	; (8004d00 <HAL_RCC_OscConfig+0x558>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d030      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d129      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d122      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cb6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d119      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc6:	085b      	lsrs	r3, r3, #1
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d10f      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cda:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d107      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cea:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d001      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e000      	b.n	8004cf6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	40023800 	.word	0x40023800

08004d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e0d0      	b.n	8004ebe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d1c:	4b6a      	ldr	r3, [pc, #424]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 030f 	and.w	r3, r3, #15
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d910      	bls.n	8004d4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d2a:	4b67      	ldr	r3, [pc, #412]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f023 020f 	bic.w	r2, r3, #15
 8004d32:	4965      	ldr	r1, [pc, #404]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d3a:	4b63      	ldr	r3, [pc, #396]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 030f 	and.w	r3, r3, #15
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d001      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e0b8      	b.n	8004ebe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d020      	beq.n	8004d9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d005      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d64:	4b59      	ldr	r3, [pc, #356]	; (8004ecc <HAL_RCC_ClockConfig+0x1c8>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	4a58      	ldr	r2, [pc, #352]	; (8004ecc <HAL_RCC_ClockConfig+0x1c8>)
 8004d6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0308 	and.w	r3, r3, #8
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d005      	beq.n	8004d88 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d7c:	4b53      	ldr	r3, [pc, #332]	; (8004ecc <HAL_RCC_ClockConfig+0x1c8>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	4a52      	ldr	r2, [pc, #328]	; (8004ecc <HAL_RCC_ClockConfig+0x1c8>)
 8004d82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d88:	4b50      	ldr	r3, [pc, #320]	; (8004ecc <HAL_RCC_ClockConfig+0x1c8>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	494d      	ldr	r1, [pc, #308]	; (8004ecc <HAL_RCC_ClockConfig+0x1c8>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d040      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d107      	bne.n	8004dbe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dae:	4b47      	ldr	r3, [pc, #284]	; (8004ecc <HAL_RCC_ClockConfig+0x1c8>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d115      	bne.n	8004de6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e07f      	b.n	8004ebe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d107      	bne.n	8004dd6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dc6:	4b41      	ldr	r3, [pc, #260]	; (8004ecc <HAL_RCC_ClockConfig+0x1c8>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d109      	bne.n	8004de6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e073      	b.n	8004ebe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dd6:	4b3d      	ldr	r3, [pc, #244]	; (8004ecc <HAL_RCC_ClockConfig+0x1c8>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e06b      	b.n	8004ebe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004de6:	4b39      	ldr	r3, [pc, #228]	; (8004ecc <HAL_RCC_ClockConfig+0x1c8>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f023 0203 	bic.w	r2, r3, #3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	4936      	ldr	r1, [pc, #216]	; (8004ecc <HAL_RCC_ClockConfig+0x1c8>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004df8:	f7fe fb5c 	bl	80034b4 <HAL_GetTick>
 8004dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dfe:	e00a      	b.n	8004e16 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e00:	f7fe fb58 	bl	80034b4 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e053      	b.n	8004ebe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e16:	4b2d      	ldr	r3, [pc, #180]	; (8004ecc <HAL_RCC_ClockConfig+0x1c8>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 020c 	and.w	r2, r3, #12
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d1eb      	bne.n	8004e00 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e28:	4b27      	ldr	r3, [pc, #156]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 030f 	and.w	r3, r3, #15
 8004e30:	683a      	ldr	r2, [r7, #0]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d210      	bcs.n	8004e58 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e36:	4b24      	ldr	r3, [pc, #144]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f023 020f 	bic.w	r2, r3, #15
 8004e3e:	4922      	ldr	r1, [pc, #136]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e46:	4b20      	ldr	r3, [pc, #128]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d001      	beq.n	8004e58 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e032      	b.n	8004ebe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d008      	beq.n	8004e76 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e64:	4b19      	ldr	r3, [pc, #100]	; (8004ecc <HAL_RCC_ClockConfig+0x1c8>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	4916      	ldr	r1, [pc, #88]	; (8004ecc <HAL_RCC_ClockConfig+0x1c8>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d009      	beq.n	8004e96 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e82:	4b12      	ldr	r3, [pc, #72]	; (8004ecc <HAL_RCC_ClockConfig+0x1c8>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	490e      	ldr	r1, [pc, #56]	; (8004ecc <HAL_RCC_ClockConfig+0x1c8>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e96:	f000 f821 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <HAL_RCC_ClockConfig+0x1c8>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	091b      	lsrs	r3, r3, #4
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	490a      	ldr	r1, [pc, #40]	; (8004ed0 <HAL_RCC_ClockConfig+0x1cc>)
 8004ea8:	5ccb      	ldrb	r3, [r1, r3]
 8004eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8004eae:	4a09      	ldr	r2, [pc, #36]	; (8004ed4 <HAL_RCC_ClockConfig+0x1d0>)
 8004eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004eb2:	4b09      	ldr	r3, [pc, #36]	; (8004ed8 <HAL_RCC_ClockConfig+0x1d4>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fe fab8 	bl	800342c <HAL_InitTick>

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40023c00 	.word	0x40023c00
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	08009310 	.word	0x08009310
 8004ed4:	20000000 	.word	0x20000000
 8004ed8:	20000004 	.word	0x20000004

08004edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ee0:	b090      	sub	sp, #64	; 0x40
 8004ee2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ee8:	2300      	movs	r3, #0
 8004eea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eec:	2300      	movs	r3, #0
 8004eee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ef4:	4b59      	ldr	r3, [pc, #356]	; (800505c <HAL_RCC_GetSysClockFreq+0x180>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f003 030c 	and.w	r3, r3, #12
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	d00d      	beq.n	8004f1c <HAL_RCC_GetSysClockFreq+0x40>
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	f200 80a1 	bhi.w	8005048 <HAL_RCC_GetSysClockFreq+0x16c>
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d002      	beq.n	8004f10 <HAL_RCC_GetSysClockFreq+0x34>
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d003      	beq.n	8004f16 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f0e:	e09b      	b.n	8005048 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f10:	4b53      	ldr	r3, [pc, #332]	; (8005060 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f12:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f14:	e09b      	b.n	800504e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f16:	4b53      	ldr	r3, [pc, #332]	; (8005064 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f1a:	e098      	b.n	800504e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f1c:	4b4f      	ldr	r3, [pc, #316]	; (800505c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f24:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004f26:	4b4d      	ldr	r3, [pc, #308]	; (800505c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d028      	beq.n	8004f84 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f32:	4b4a      	ldr	r3, [pc, #296]	; (800505c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	099b      	lsrs	r3, r3, #6
 8004f38:	2200      	movs	r2, #0
 8004f3a:	623b      	str	r3, [r7, #32]
 8004f3c:	627a      	str	r2, [r7, #36]	; 0x24
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f44:	2100      	movs	r1, #0
 8004f46:	4b47      	ldr	r3, [pc, #284]	; (8005064 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f48:	fb03 f201 	mul.w	r2, r3, r1
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	fb00 f303 	mul.w	r3, r0, r3
 8004f52:	4413      	add	r3, r2
 8004f54:	4a43      	ldr	r2, [pc, #268]	; (8005064 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f56:	fba0 1202 	umull	r1, r2, r0, r2
 8004f5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f5c:	460a      	mov	r2, r1
 8004f5e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f62:	4413      	add	r3, r2
 8004f64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f68:	2200      	movs	r2, #0
 8004f6a:	61bb      	str	r3, [r7, #24]
 8004f6c:	61fa      	str	r2, [r7, #28]
 8004f6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004f76:	f7fb f967 	bl	8000248 <__aeabi_uldivmod>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4613      	mov	r3, r2
 8004f80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f82:	e053      	b.n	800502c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f84:	4b35      	ldr	r3, [pc, #212]	; (800505c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	099b      	lsrs	r3, r3, #6
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	617a      	str	r2, [r7, #20]
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004f96:	f04f 0b00 	mov.w	fp, #0
 8004f9a:	4652      	mov	r2, sl
 8004f9c:	465b      	mov	r3, fp
 8004f9e:	f04f 0000 	mov.w	r0, #0
 8004fa2:	f04f 0100 	mov.w	r1, #0
 8004fa6:	0159      	lsls	r1, r3, #5
 8004fa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fac:	0150      	lsls	r0, r2, #5
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	ebb2 080a 	subs.w	r8, r2, sl
 8004fb6:	eb63 090b 	sbc.w	r9, r3, fp
 8004fba:	f04f 0200 	mov.w	r2, #0
 8004fbe:	f04f 0300 	mov.w	r3, #0
 8004fc2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004fc6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004fca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004fce:	ebb2 0408 	subs.w	r4, r2, r8
 8004fd2:	eb63 0509 	sbc.w	r5, r3, r9
 8004fd6:	f04f 0200 	mov.w	r2, #0
 8004fda:	f04f 0300 	mov.w	r3, #0
 8004fde:	00eb      	lsls	r3, r5, #3
 8004fe0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fe4:	00e2      	lsls	r2, r4, #3
 8004fe6:	4614      	mov	r4, r2
 8004fe8:	461d      	mov	r5, r3
 8004fea:	eb14 030a 	adds.w	r3, r4, sl
 8004fee:	603b      	str	r3, [r7, #0]
 8004ff0:	eb45 030b 	adc.w	r3, r5, fp
 8004ff4:	607b      	str	r3, [r7, #4]
 8004ff6:	f04f 0200 	mov.w	r2, #0
 8004ffa:	f04f 0300 	mov.w	r3, #0
 8004ffe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005002:	4629      	mov	r1, r5
 8005004:	028b      	lsls	r3, r1, #10
 8005006:	4621      	mov	r1, r4
 8005008:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800500c:	4621      	mov	r1, r4
 800500e:	028a      	lsls	r2, r1, #10
 8005010:	4610      	mov	r0, r2
 8005012:	4619      	mov	r1, r3
 8005014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005016:	2200      	movs	r2, #0
 8005018:	60bb      	str	r3, [r7, #8]
 800501a:	60fa      	str	r2, [r7, #12]
 800501c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005020:	f7fb f912 	bl	8000248 <__aeabi_uldivmod>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	4613      	mov	r3, r2
 800502a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800502c:	4b0b      	ldr	r3, [pc, #44]	; (800505c <HAL_RCC_GetSysClockFreq+0x180>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	0c1b      	lsrs	r3, r3, #16
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	3301      	adds	r3, #1
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800503c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800503e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005040:	fbb2 f3f3 	udiv	r3, r2, r3
 8005044:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005046:	e002      	b.n	800504e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005048:	4b05      	ldr	r3, [pc, #20]	; (8005060 <HAL_RCC_GetSysClockFreq+0x184>)
 800504a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800504c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800504e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005050:	4618      	mov	r0, r3
 8005052:	3740      	adds	r7, #64	; 0x40
 8005054:	46bd      	mov	sp, r7
 8005056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800505a:	bf00      	nop
 800505c:	40023800 	.word	0x40023800
 8005060:	00f42400 	.word	0x00f42400
 8005064:	017d7840 	.word	0x017d7840

08005068 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800506c:	4b03      	ldr	r3, [pc, #12]	; (800507c <HAL_RCC_GetHCLKFreq+0x14>)
 800506e:	681b      	ldr	r3, [r3, #0]
}
 8005070:	4618      	mov	r0, r3
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	20000000 	.word	0x20000000

08005080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005084:	f7ff fff0 	bl	8005068 <HAL_RCC_GetHCLKFreq>
 8005088:	4602      	mov	r2, r0
 800508a:	4b05      	ldr	r3, [pc, #20]	; (80050a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	0a9b      	lsrs	r3, r3, #10
 8005090:	f003 0307 	and.w	r3, r3, #7
 8005094:	4903      	ldr	r1, [pc, #12]	; (80050a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005096:	5ccb      	ldrb	r3, [r1, r3]
 8005098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800509c:	4618      	mov	r0, r3
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	40023800 	.word	0x40023800
 80050a4:	08009320 	.word	0x08009320

080050a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050ac:	f7ff ffdc 	bl	8005068 <HAL_RCC_GetHCLKFreq>
 80050b0:	4602      	mov	r2, r0
 80050b2:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	0b5b      	lsrs	r3, r3, #13
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	4903      	ldr	r1, [pc, #12]	; (80050cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80050be:	5ccb      	ldrb	r3, [r1, r3]
 80050c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	40023800 	.word	0x40023800
 80050cc:	08009320 	.word	0x08009320

080050d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80050d8:	2300      	movs	r3, #0
 80050da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80050e0:	2300      	movs	r3, #0
 80050e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80050e4:	2300      	movs	r3, #0
 80050e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80050e8:	2300      	movs	r3, #0
 80050ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d012      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050f8:	4b69      	ldr	r3, [pc, #420]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	4a68      	ldr	r2, [pc, #416]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005102:	6093      	str	r3, [r2, #8]
 8005104:	4b66      	ldr	r3, [pc, #408]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510c:	4964      	ldr	r1, [pc, #400]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800510e:	4313      	orrs	r3, r2
 8005110:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800511a:	2301      	movs	r3, #1
 800511c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d017      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800512a:	4b5d      	ldr	r3, [pc, #372]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800512c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005130:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005138:	4959      	ldr	r1, [pc, #356]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800513a:	4313      	orrs	r3, r2
 800513c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005144:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005148:	d101      	bne.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800514a:	2301      	movs	r3, #1
 800514c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005156:	2301      	movs	r3, #1
 8005158:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d017      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005166:	4b4e      	ldr	r3, [pc, #312]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800516c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005174:	494a      	ldr	r1, [pc, #296]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005176:	4313      	orrs	r3, r2
 8005178:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005184:	d101      	bne.n	800518a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005186:	2301      	movs	r3, #1
 8005188:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005192:	2301      	movs	r3, #1
 8005194:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80051a2:	2301      	movs	r3, #1
 80051a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0320 	and.w	r3, r3, #32
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 808b 	beq.w	80052ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051b4:	4b3a      	ldr	r3, [pc, #232]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b8:	4a39      	ldr	r2, [pc, #228]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051be:	6413      	str	r3, [r2, #64]	; 0x40
 80051c0:	4b37      	ldr	r3, [pc, #220]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c8:	60bb      	str	r3, [r7, #8]
 80051ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80051cc:	4b35      	ldr	r3, [pc, #212]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a34      	ldr	r2, [pc, #208]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051d8:	f7fe f96c 	bl	80034b4 <HAL_GetTick>
 80051dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80051de:	e008      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051e0:	f7fe f968 	bl	80034b4 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b64      	cmp	r3, #100	; 0x64
 80051ec:	d901      	bls.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e38f      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80051f2:	4b2c      	ldr	r3, [pc, #176]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0f0      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051fe:	4b28      	ldr	r3, [pc, #160]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005206:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d035      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	429a      	cmp	r2, r3
 800521a:	d02e      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800521c:	4b20      	ldr	r3, [pc, #128]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800521e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005224:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005226:	4b1e      	ldr	r3, [pc, #120]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522a:	4a1d      	ldr	r2, [pc, #116]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800522c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005230:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005232:	4b1b      	ldr	r3, [pc, #108]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005236:	4a1a      	ldr	r2, [pc, #104]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800523c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800523e:	4a18      	ldr	r2, [pc, #96]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005244:	4b16      	ldr	r3, [pc, #88]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b01      	cmp	r3, #1
 800524e:	d114      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005250:	f7fe f930 	bl	80034b4 <HAL_GetTick>
 8005254:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005256:	e00a      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005258:	f7fe f92c 	bl	80034b4 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	f241 3288 	movw	r2, #5000	; 0x1388
 8005266:	4293      	cmp	r3, r2
 8005268:	d901      	bls.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e351      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800526e:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0ee      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005282:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005286:	d111      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005288:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005294:	4b04      	ldr	r3, [pc, #16]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005296:	400b      	ands	r3, r1
 8005298:	4901      	ldr	r1, [pc, #4]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800529a:	4313      	orrs	r3, r2
 800529c:	608b      	str	r3, [r1, #8]
 800529e:	e00b      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80052a0:	40023800 	.word	0x40023800
 80052a4:	40007000 	.word	0x40007000
 80052a8:	0ffffcff 	.word	0x0ffffcff
 80052ac:	4bac      	ldr	r3, [pc, #688]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	4aab      	ldr	r2, [pc, #684]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80052b6:	6093      	str	r3, [r2, #8]
 80052b8:	4ba9      	ldr	r3, [pc, #676]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052c4:	49a6      	ldr	r1, [pc, #664]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0310 	and.w	r3, r3, #16
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d010      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052d6:	4ba2      	ldr	r3, [pc, #648]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052dc:	4aa0      	ldr	r2, [pc, #640]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80052e6:	4b9e      	ldr	r3, [pc, #632]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f0:	499b      	ldr	r1, [pc, #620]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00a      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005304:	4b96      	ldr	r3, [pc, #600]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005312:	4993      	ldr	r1, [pc, #588]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005314:	4313      	orrs	r3, r2
 8005316:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005326:	4b8e      	ldr	r3, [pc, #568]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005334:	498a      	ldr	r1, [pc, #552]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005336:	4313      	orrs	r3, r2
 8005338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005348:	4b85      	ldr	r3, [pc, #532]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800534a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005356:	4982      	ldr	r1, [pc, #520]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005358:	4313      	orrs	r3, r2
 800535a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800536a:	4b7d      	ldr	r3, [pc, #500]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800536c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005370:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005378:	4979      	ldr	r1, [pc, #484]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800537a:	4313      	orrs	r3, r2
 800537c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00a      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800538c:	4b74      	ldr	r3, [pc, #464]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800538e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005392:	f023 0203 	bic.w	r2, r3, #3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539a:	4971      	ldr	r1, [pc, #452]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800539c:	4313      	orrs	r3, r2
 800539e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00a      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053ae:	4b6c      	ldr	r3, [pc, #432]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b4:	f023 020c 	bic.w	r2, r3, #12
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053bc:	4968      	ldr	r1, [pc, #416]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00a      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053d0:	4b63      	ldr	r3, [pc, #396]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053de:	4960      	ldr	r1, [pc, #384]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00a      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053f2:	4b5b      	ldr	r3, [pc, #364]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005400:	4957      	ldr	r1, [pc, #348]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005402:	4313      	orrs	r3, r2
 8005404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00a      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005414:	4b52      	ldr	r3, [pc, #328]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005422:	494f      	ldr	r1, [pc, #316]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005424:	4313      	orrs	r3, r2
 8005426:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00a      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005436:	4b4a      	ldr	r3, [pc, #296]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005444:	4946      	ldr	r1, [pc, #280]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005446:	4313      	orrs	r3, r2
 8005448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00a      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005458:	4b41      	ldr	r3, [pc, #260]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800545a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005466:	493e      	ldr	r1, [pc, #248]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005468:	4313      	orrs	r3, r2
 800546a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800547a:	4b39      	ldr	r3, [pc, #228]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800547c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005480:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005488:	4935      	ldr	r1, [pc, #212]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800548a:	4313      	orrs	r3, r2
 800548c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00a      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800549c:	4b30      	ldr	r3, [pc, #192]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800549e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054aa:	492d      	ldr	r1, [pc, #180]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d011      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80054be:	4b28      	ldr	r3, [pc, #160]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054cc:	4924      	ldr	r1, [pc, #144]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054dc:	d101      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80054de:	2301      	movs	r3, #1
 80054e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80054ee:	2301      	movs	r3, #1
 80054f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054fe:	4b18      	ldr	r3, [pc, #96]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005504:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800550c:	4914      	ldr	r1, [pc, #80]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800550e:	4313      	orrs	r3, r2
 8005510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00b      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005520:	4b0f      	ldr	r3, [pc, #60]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005526:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005530:	490b      	ldr	r1, [pc, #44]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005532:	4313      	orrs	r3, r2
 8005534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00f      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005544:	4b06      	ldr	r3, [pc, #24]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800554a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005554:	4902      	ldr	r1, [pc, #8]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005556:	4313      	orrs	r3, r2
 8005558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800555c:	e002      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800555e:	bf00      	nop
 8005560:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00b      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005570:	4b8a      	ldr	r3, [pc, #552]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005576:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005580:	4986      	ldr	r1, [pc, #536]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005582:	4313      	orrs	r3, r2
 8005584:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00b      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005594:	4b81      	ldr	r3, [pc, #516]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005596:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800559a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055a4:	497d      	ldr	r1, [pc, #500]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d006      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f000 80d6 	beq.w	800576c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80055c0:	4b76      	ldr	r3, [pc, #472]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a75      	ldr	r2, [pc, #468]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055cc:	f7fd ff72 	bl	80034b4 <HAL_GetTick>
 80055d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055d2:	e008      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055d4:	f7fd ff6e 	bl	80034b4 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b64      	cmp	r3, #100	; 0x64
 80055e0:	d901      	bls.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e195      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055e6:	4b6d      	ldr	r3, [pc, #436]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1f0      	bne.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d021      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005602:	2b00      	cmp	r3, #0
 8005604:	d11d      	bne.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005606:	4b65      	ldr	r3, [pc, #404]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800560c:	0c1b      	lsrs	r3, r3, #16
 800560e:	f003 0303 	and.w	r3, r3, #3
 8005612:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005614:	4b61      	ldr	r3, [pc, #388]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800561a:	0e1b      	lsrs	r3, r3, #24
 800561c:	f003 030f 	and.w	r3, r3, #15
 8005620:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	019a      	lsls	r2, r3, #6
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	041b      	lsls	r3, r3, #16
 800562c:	431a      	orrs	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	061b      	lsls	r3, r3, #24
 8005632:	431a      	orrs	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	071b      	lsls	r3, r3, #28
 800563a:	4958      	ldr	r1, [pc, #352]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d004      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005652:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005656:	d00a      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005660:	2b00      	cmp	r3, #0
 8005662:	d02e      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005668:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800566c:	d129      	bne.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800566e:	4b4b      	ldr	r3, [pc, #300]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005674:	0c1b      	lsrs	r3, r3, #16
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800567c:	4b47      	ldr	r3, [pc, #284]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800567e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005682:	0f1b      	lsrs	r3, r3, #28
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	019a      	lsls	r2, r3, #6
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	041b      	lsls	r3, r3, #16
 8005694:	431a      	orrs	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	061b      	lsls	r3, r3, #24
 800569c:	431a      	orrs	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	071b      	lsls	r3, r3, #28
 80056a2:	493e      	ldr	r1, [pc, #248]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80056aa:	4b3c      	ldr	r3, [pc, #240]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056b0:	f023 021f 	bic.w	r2, r3, #31
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	3b01      	subs	r3, #1
 80056ba:	4938      	ldr	r1, [pc, #224]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d01d      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80056ce:	4b33      	ldr	r3, [pc, #204]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056d4:	0e1b      	lsrs	r3, r3, #24
 80056d6:	f003 030f 	and.w	r3, r3, #15
 80056da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056dc:	4b2f      	ldr	r3, [pc, #188]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056e2:	0f1b      	lsrs	r3, r3, #28
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	019a      	lsls	r2, r3, #6
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	041b      	lsls	r3, r3, #16
 80056f6:	431a      	orrs	r2, r3
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	061b      	lsls	r3, r3, #24
 80056fc:	431a      	orrs	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	071b      	lsls	r3, r3, #28
 8005702:	4926      	ldr	r1, [pc, #152]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005704:	4313      	orrs	r3, r2
 8005706:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d011      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	019a      	lsls	r2, r3, #6
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	041b      	lsls	r3, r3, #16
 8005722:	431a      	orrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	061b      	lsls	r3, r3, #24
 800572a:	431a      	orrs	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	071b      	lsls	r3, r3, #28
 8005732:	491a      	ldr	r1, [pc, #104]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005734:	4313      	orrs	r3, r2
 8005736:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800573a:	4b18      	ldr	r3, [pc, #96]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a17      	ldr	r2, [pc, #92]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005740:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005744:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005746:	f7fd feb5 	bl	80034b4 <HAL_GetTick>
 800574a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800574c:	e008      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800574e:	f7fd feb1 	bl	80034b4 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	2b64      	cmp	r3, #100	; 0x64
 800575a:	d901      	bls.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e0d8      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005760:	4b0e      	ldr	r3, [pc, #56]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0f0      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	2b01      	cmp	r3, #1
 8005770:	f040 80ce 	bne.w	8005910 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005774:	4b09      	ldr	r3, [pc, #36]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a08      	ldr	r2, [pc, #32]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800577a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800577e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005780:	f7fd fe98 	bl	80034b4 <HAL_GetTick>
 8005784:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005786:	e00b      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005788:	f7fd fe94 	bl	80034b4 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b64      	cmp	r3, #100	; 0x64
 8005794:	d904      	bls.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e0bb      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800579a:	bf00      	nop
 800579c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057a0:	4b5e      	ldr	r3, [pc, #376]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057ac:	d0ec      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d003      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d009      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d02e      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d12a      	bne.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80057d6:	4b51      	ldr	r3, [pc, #324]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057dc:	0c1b      	lsrs	r3, r3, #16
 80057de:	f003 0303 	and.w	r3, r3, #3
 80057e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057e4:	4b4d      	ldr	r3, [pc, #308]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ea:	0f1b      	lsrs	r3, r3, #28
 80057ec:	f003 0307 	and.w	r3, r3, #7
 80057f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	019a      	lsls	r2, r3, #6
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	041b      	lsls	r3, r3, #16
 80057fc:	431a      	orrs	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	061b      	lsls	r3, r3, #24
 8005804:	431a      	orrs	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	071b      	lsls	r3, r3, #28
 800580a:	4944      	ldr	r1, [pc, #272]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800580c:	4313      	orrs	r3, r2
 800580e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005812:	4b42      	ldr	r3, [pc, #264]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005818:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005820:	3b01      	subs	r3, #1
 8005822:	021b      	lsls	r3, r3, #8
 8005824:	493d      	ldr	r1, [pc, #244]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005826:	4313      	orrs	r3, r2
 8005828:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d022      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800583c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005840:	d11d      	bne.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005842:	4b36      	ldr	r3, [pc, #216]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005848:	0e1b      	lsrs	r3, r3, #24
 800584a:	f003 030f 	and.w	r3, r3, #15
 800584e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005850:	4b32      	ldr	r3, [pc, #200]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005856:	0f1b      	lsrs	r3, r3, #28
 8005858:	f003 0307 	and.w	r3, r3, #7
 800585c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	019a      	lsls	r2, r3, #6
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	041b      	lsls	r3, r3, #16
 800586a:	431a      	orrs	r2, r3
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	061b      	lsls	r3, r3, #24
 8005870:	431a      	orrs	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	071b      	lsls	r3, r3, #28
 8005876:	4929      	ldr	r1, [pc, #164]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005878:	4313      	orrs	r3, r2
 800587a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0308 	and.w	r3, r3, #8
 8005886:	2b00      	cmp	r3, #0
 8005888:	d028      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800588a:	4b24      	ldr	r3, [pc, #144]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800588c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005890:	0e1b      	lsrs	r3, r3, #24
 8005892:	f003 030f 	and.w	r3, r3, #15
 8005896:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005898:	4b20      	ldr	r3, [pc, #128]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800589a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589e:	0c1b      	lsrs	r3, r3, #16
 80058a0:	f003 0303 	and.w	r3, r3, #3
 80058a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	019a      	lsls	r2, r3, #6
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	041b      	lsls	r3, r3, #16
 80058b0:	431a      	orrs	r2, r3
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	061b      	lsls	r3, r3, #24
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	071b      	lsls	r3, r3, #28
 80058be:	4917      	ldr	r1, [pc, #92]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80058c6:	4b15      	ldr	r3, [pc, #84]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d4:	4911      	ldr	r1, [pc, #68]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80058dc:	4b0f      	ldr	r3, [pc, #60]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a0e      	ldr	r2, [pc, #56]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058e8:	f7fd fde4 	bl	80034b4 <HAL_GetTick>
 80058ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058ee:	e008      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80058f0:	f7fd fde0 	bl	80034b4 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b64      	cmp	r3, #100	; 0x64
 80058fc:	d901      	bls.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e007      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005902:	4b06      	ldr	r3, [pc, #24]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800590a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800590e:	d1ef      	bne.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3720      	adds	r7, #32
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	40023800 	.word	0x40023800

08005920 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e09d      	b.n	8005a6e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	2b00      	cmp	r3, #0
 8005938:	d108      	bne.n	800594c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005942:	d009      	beq.n	8005958 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	61da      	str	r2, [r3, #28]
 800594a:	e005      	b.n	8005958 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7fd f980 	bl	8002c78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800598e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005998:	d902      	bls.n	80059a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	e002      	b.n	80059a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80059a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80059ae:	d007      	beq.n	80059c0 <HAL_SPI_Init+0xa0>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059b8:	d002      	beq.n	80059c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80059d0:	431a      	orrs	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	431a      	orrs	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	69db      	ldr	r3, [r3, #28]
 80059f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059f8:	431a      	orrs	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a02:	ea42 0103 	orr.w	r1, r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	0c1b      	lsrs	r3, r3, #16
 8005a1c:	f003 0204 	and.w	r2, r3, #4
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	f003 0310 	and.w	r3, r3, #16
 8005a28:	431a      	orrs	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2e:	f003 0308 	and.w	r3, r3, #8
 8005a32:	431a      	orrs	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005a3c:	ea42 0103 	orr.w	r1, r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	69da      	ldr	r2, [r3, #28]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b088      	sub	sp, #32
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	60f8      	str	r0, [r7, #12]
 8005a7e:	60b9      	str	r1, [r7, #8]
 8005a80:	603b      	str	r3, [r7, #0]
 8005a82:	4613      	mov	r3, r2
 8005a84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d101      	bne.n	8005a98 <HAL_SPI_Transmit+0x22>
 8005a94:	2302      	movs	r3, #2
 8005a96:	e158      	b.n	8005d4a <HAL_SPI_Transmit+0x2d4>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005aa0:	f7fd fd08 	bl	80034b4 <HAL_GetTick>
 8005aa4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005aa6:	88fb      	ldrh	r3, [r7, #6]
 8005aa8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d002      	beq.n	8005abc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005aba:	e13d      	b.n	8005d38 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d002      	beq.n	8005ac8 <HAL_SPI_Transmit+0x52>
 8005ac2:	88fb      	ldrh	r3, [r7, #6]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d102      	bne.n	8005ace <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005acc:	e134      	b.n	8005d38 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2203      	movs	r2, #3
 8005ad2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	88fa      	ldrh	r2, [r7, #6]
 8005ae6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	88fa      	ldrh	r2, [r7, #6]
 8005aec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b18:	d10f      	bne.n	8005b3a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b44:	2b40      	cmp	r3, #64	; 0x40
 8005b46:	d007      	beq.n	8005b58 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b60:	d94b      	bls.n	8005bfa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d002      	beq.n	8005b70 <HAL_SPI_Transmit+0xfa>
 8005b6a:	8afb      	ldrh	r3, [r7, #22]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d13e      	bne.n	8005bee <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b74:	881a      	ldrh	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b80:	1c9a      	adds	r2, r3, #2
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b94:	e02b      	b.n	8005bee <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d112      	bne.n	8005bca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba8:	881a      	ldrh	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb4:	1c9a      	adds	r2, r3, #2
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bc8:	e011      	b.n	8005bee <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bca:	f7fd fc73 	bl	80034b4 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d803      	bhi.n	8005be2 <HAL_SPI_Transmit+0x16c>
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be0:	d102      	bne.n	8005be8 <HAL_SPI_Transmit+0x172>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d102      	bne.n	8005bee <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005bec:	e0a4      	b.n	8005d38 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1ce      	bne.n	8005b96 <HAL_SPI_Transmit+0x120>
 8005bf8:	e07c      	b.n	8005cf4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <HAL_SPI_Transmit+0x192>
 8005c02:	8afb      	ldrh	r3, [r7, #22]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d170      	bne.n	8005cea <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d912      	bls.n	8005c38 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c16:	881a      	ldrh	r2, [r3, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c22:	1c9a      	adds	r2, r3, #2
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	3b02      	subs	r3, #2
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c36:	e058      	b.n	8005cea <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	330c      	adds	r3, #12
 8005c42:	7812      	ldrb	r2, [r2, #0]
 8005c44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4a:	1c5a      	adds	r2, r3, #1
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	3b01      	subs	r3, #1
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005c5e:	e044      	b.n	8005cea <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d12b      	bne.n	8005cc6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d912      	bls.n	8005c9e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7c:	881a      	ldrh	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c88:	1c9a      	adds	r2, r3, #2
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	3b02      	subs	r3, #2
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c9c:	e025      	b.n	8005cea <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	330c      	adds	r3, #12
 8005ca8:	7812      	ldrb	r2, [r2, #0]
 8005caa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb0:	1c5a      	adds	r2, r3, #1
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cc4:	e011      	b.n	8005cea <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cc6:	f7fd fbf5 	bl	80034b4 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d803      	bhi.n	8005cde <HAL_SPI_Transmit+0x268>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cdc:	d102      	bne.n	8005ce4 <HAL_SPI_Transmit+0x26e>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d102      	bne.n	8005cea <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ce8:	e026      	b.n	8005d38 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1b5      	bne.n	8005c60 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	6839      	ldr	r1, [r7, #0]
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f000 fd07 	bl	800670c <SPI_EndRxTxTransaction>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2220      	movs	r2, #32
 8005d08:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10a      	bne.n	8005d28 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d12:	2300      	movs	r3, #0
 8005d14:	613b      	str	r3, [r7, #16]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	613b      	str	r3, [r7, #16]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	613b      	str	r3, [r7, #16]
 8005d26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	77fb      	strb	r3, [r7, #31]
 8005d34:	e000      	b.n	8005d38 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005d36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d48:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3720      	adds	r7, #32
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b088      	sub	sp, #32
 8005d56:	af02      	add	r7, sp, #8
 8005d58:	60f8      	str	r0, [r7, #12]
 8005d5a:	60b9      	str	r1, [r7, #8]
 8005d5c:	603b      	str	r3, [r7, #0]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d62:	2300      	movs	r3, #0
 8005d64:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d6e:	d112      	bne.n	8005d96 <HAL_SPI_Receive+0x44>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10e      	bne.n	8005d96 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2204      	movs	r2, #4
 8005d7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005d80:	88fa      	ldrh	r2, [r7, #6]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	4613      	mov	r3, r2
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	68b9      	ldr	r1, [r7, #8]
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 f910 	bl	8005fb2 <HAL_SPI_TransmitReceive>
 8005d92:	4603      	mov	r3, r0
 8005d94:	e109      	b.n	8005faa <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d101      	bne.n	8005da4 <HAL_SPI_Receive+0x52>
 8005da0:	2302      	movs	r3, #2
 8005da2:	e102      	b.n	8005faa <HAL_SPI_Receive+0x258>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dac:	f7fd fb82 	bl	80034b4 <HAL_GetTick>
 8005db0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d002      	beq.n	8005dc4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005dc2:	e0e9      	b.n	8005f98 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d002      	beq.n	8005dd0 <HAL_SPI_Receive+0x7e>
 8005dca:	88fb      	ldrh	r3, [r7, #6]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d102      	bne.n	8005dd6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005dd4:	e0e0      	b.n	8005f98 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2204      	movs	r2, #4
 8005dda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	88fa      	ldrh	r2, [r7, #6]
 8005dee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	88fa      	ldrh	r2, [r7, #6]
 8005df6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e20:	d908      	bls.n	8005e34 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e30:	605a      	str	r2, [r3, #4]
 8005e32:	e007      	b.n	8005e44 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e42:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e4c:	d10f      	bne.n	8005e6e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e6c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e78:	2b40      	cmp	r3, #64	; 0x40
 8005e7a:	d007      	beq.n	8005e8c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e8a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e94:	d867      	bhi.n	8005f66 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005e96:	e030      	b.n	8005efa <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d117      	bne.n	8005ed6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f103 020c 	add.w	r2, r3, #12
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb2:	7812      	ldrb	r2, [r2, #0]
 8005eb4:	b2d2      	uxtb	r2, r2
 8005eb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005ed4:	e011      	b.n	8005efa <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ed6:	f7fd faed 	bl	80034b4 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d803      	bhi.n	8005eee <HAL_SPI_Receive+0x19c>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eec:	d102      	bne.n	8005ef4 <HAL_SPI_Receive+0x1a2>
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d102      	bne.n	8005efa <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005ef8:	e04e      	b.n	8005f98 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1c8      	bne.n	8005e98 <HAL_SPI_Receive+0x146>
 8005f06:	e034      	b.n	8005f72 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d115      	bne.n	8005f42 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68da      	ldr	r2, [r3, #12]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f20:	b292      	uxth	r2, r2
 8005f22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f28:	1c9a      	adds	r2, r3, #2
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	3b01      	subs	r3, #1
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005f40:	e011      	b.n	8005f66 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f42:	f7fd fab7 	bl	80034b4 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d803      	bhi.n	8005f5a <HAL_SPI_Receive+0x208>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f58:	d102      	bne.n	8005f60 <HAL_SPI_Receive+0x20e>
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d102      	bne.n	8005f66 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005f64:	e018      	b.n	8005f98 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1ca      	bne.n	8005f08 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	6839      	ldr	r1, [r7, #0]
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f000 fb4c 	bl	8006614 <SPI_EndRxTransaction>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d002      	beq.n	8005f88 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2220      	movs	r2, #32
 8005f86:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d002      	beq.n	8005f96 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	75fb      	strb	r3, [r7, #23]
 8005f94:	e000      	b.n	8005f98 <HAL_SPI_Receive+0x246>
  }

error :
 8005f96:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3718      	adds	r7, #24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b08a      	sub	sp, #40	; 0x28
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	60f8      	str	r0, [r7, #12]
 8005fba:	60b9      	str	r1, [r7, #8]
 8005fbc:	607a      	str	r2, [r7, #4]
 8005fbe:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d101      	bne.n	8005fd8 <HAL_SPI_TransmitReceive+0x26>
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	e1fb      	b.n	80063d0 <HAL_SPI_TransmitReceive+0x41e>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fe0:	f7fd fa68 	bl	80034b4 <HAL_GetTick>
 8005fe4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fec:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005ff4:	887b      	ldrh	r3, [r7, #2]
 8005ff6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005ff8:	887b      	ldrh	r3, [r7, #2]
 8005ffa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ffc:	7efb      	ldrb	r3, [r7, #27]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d00e      	beq.n	8006020 <HAL_SPI_TransmitReceive+0x6e>
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006008:	d106      	bne.n	8006018 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d102      	bne.n	8006018 <HAL_SPI_TransmitReceive+0x66>
 8006012:	7efb      	ldrb	r3, [r7, #27]
 8006014:	2b04      	cmp	r3, #4
 8006016:	d003      	beq.n	8006020 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006018:	2302      	movs	r3, #2
 800601a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800601e:	e1cd      	b.n	80063bc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d005      	beq.n	8006032 <HAL_SPI_TransmitReceive+0x80>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d002      	beq.n	8006032 <HAL_SPI_TransmitReceive+0x80>
 800602c:	887b      	ldrh	r3, [r7, #2]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d103      	bne.n	800603a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006038:	e1c0      	b.n	80063bc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b04      	cmp	r3, #4
 8006044:	d003      	beq.n	800604e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2205      	movs	r2, #5
 800604a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	887a      	ldrh	r2, [r7, #2]
 800605e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	887a      	ldrh	r2, [r7, #2]
 8006066:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	887a      	ldrh	r2, [r7, #2]
 8006074:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	887a      	ldrh	r2, [r7, #2]
 800607a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006090:	d802      	bhi.n	8006098 <HAL_SPI_TransmitReceive+0xe6>
 8006092:	8a3b      	ldrh	r3, [r7, #16]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d908      	bls.n	80060aa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060a6:	605a      	str	r2, [r3, #4]
 80060a8:	e007      	b.n	80060ba <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060b8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c4:	2b40      	cmp	r3, #64	; 0x40
 80060c6:	d007      	beq.n	80060d8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060e0:	d97c      	bls.n	80061dc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d002      	beq.n	80060f0 <HAL_SPI_TransmitReceive+0x13e>
 80060ea:	8a7b      	ldrh	r3, [r7, #18]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d169      	bne.n	80061c4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f4:	881a      	ldrh	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006100:	1c9a      	adds	r2, r3, #2
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800610a:	b29b      	uxth	r3, r3
 800610c:	3b01      	subs	r3, #1
 800610e:	b29a      	uxth	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006114:	e056      	b.n	80061c4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f003 0302 	and.w	r3, r3, #2
 8006120:	2b02      	cmp	r3, #2
 8006122:	d11b      	bne.n	800615c <HAL_SPI_TransmitReceive+0x1aa>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006128:	b29b      	uxth	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d016      	beq.n	800615c <HAL_SPI_TransmitReceive+0x1aa>
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	2b01      	cmp	r3, #1
 8006132:	d113      	bne.n	800615c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006138:	881a      	ldrh	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006144:	1c9a      	adds	r2, r3, #2
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800614e:	b29b      	uxth	r3, r3
 8006150:	3b01      	subs	r3, #1
 8006152:	b29a      	uxth	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006158:	2300      	movs	r3, #0
 800615a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b01      	cmp	r3, #1
 8006168:	d11c      	bne.n	80061a4 <HAL_SPI_TransmitReceive+0x1f2>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006170:	b29b      	uxth	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d016      	beq.n	80061a4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68da      	ldr	r2, [r3, #12]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006180:	b292      	uxth	r2, r2
 8006182:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006188:	1c9a      	adds	r2, r3, #2
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006194:	b29b      	uxth	r3, r3
 8006196:	3b01      	subs	r3, #1
 8006198:	b29a      	uxth	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061a0:	2301      	movs	r3, #1
 80061a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80061a4:	f7fd f986 	bl	80034b4 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d807      	bhi.n	80061c4 <HAL_SPI_TransmitReceive+0x212>
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ba:	d003      	beq.n	80061c4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80061c2:	e0fb      	b.n	80063bc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1a3      	bne.n	8006116 <HAL_SPI_TransmitReceive+0x164>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d19d      	bne.n	8006116 <HAL_SPI_TransmitReceive+0x164>
 80061da:	e0df      	b.n	800639c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d003      	beq.n	80061ec <HAL_SPI_TransmitReceive+0x23a>
 80061e4:	8a7b      	ldrh	r3, [r7, #18]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	f040 80cb 	bne.w	8006382 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d912      	bls.n	800621c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fa:	881a      	ldrh	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006206:	1c9a      	adds	r2, r3, #2
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006210:	b29b      	uxth	r3, r3
 8006212:	3b02      	subs	r3, #2
 8006214:	b29a      	uxth	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	87da      	strh	r2, [r3, #62]	; 0x3e
 800621a:	e0b2      	b.n	8006382 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	330c      	adds	r3, #12
 8006226:	7812      	ldrb	r2, [r2, #0]
 8006228:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622e:	1c5a      	adds	r2, r3, #1
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006238:	b29b      	uxth	r3, r3
 800623a:	3b01      	subs	r3, #1
 800623c:	b29a      	uxth	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006242:	e09e      	b.n	8006382 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b02      	cmp	r3, #2
 8006250:	d134      	bne.n	80062bc <HAL_SPI_TransmitReceive+0x30a>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006256:	b29b      	uxth	r3, r3
 8006258:	2b00      	cmp	r3, #0
 800625a:	d02f      	beq.n	80062bc <HAL_SPI_TransmitReceive+0x30a>
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	2b01      	cmp	r3, #1
 8006260:	d12c      	bne.n	80062bc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006266:	b29b      	uxth	r3, r3
 8006268:	2b01      	cmp	r3, #1
 800626a:	d912      	bls.n	8006292 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006270:	881a      	ldrh	r2, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627c:	1c9a      	adds	r2, r3, #2
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006286:	b29b      	uxth	r3, r3
 8006288:	3b02      	subs	r3, #2
 800628a:	b29a      	uxth	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006290:	e012      	b.n	80062b8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	330c      	adds	r3, #12
 800629c:	7812      	ldrb	r2, [r2, #0]
 800629e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a4:	1c5a      	adds	r2, r3, #1
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	3b01      	subs	r3, #1
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062b8:	2300      	movs	r3, #0
 80062ba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d148      	bne.n	800635c <HAL_SPI_TransmitReceive+0x3aa>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d042      	beq.n	800635c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062dc:	b29b      	uxth	r3, r3
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d923      	bls.n	800632a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68da      	ldr	r2, [r3, #12]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ec:	b292      	uxth	r2, r2
 80062ee:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f4:	1c9a      	adds	r2, r3, #2
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006300:	b29b      	uxth	r3, r3
 8006302:	3b02      	subs	r3, #2
 8006304:	b29a      	uxth	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006312:	b29b      	uxth	r3, r3
 8006314:	2b01      	cmp	r3, #1
 8006316:	d81f      	bhi.n	8006358 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006326:	605a      	str	r2, [r3, #4]
 8006328:	e016      	b.n	8006358 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f103 020c 	add.w	r2, r3, #12
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006336:	7812      	ldrb	r2, [r2, #0]
 8006338:	b2d2      	uxtb	r2, r2
 800633a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006340:	1c5a      	adds	r2, r3, #1
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800634c:	b29b      	uxth	r3, r3
 800634e:	3b01      	subs	r3, #1
 8006350:	b29a      	uxth	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006358:	2301      	movs	r3, #1
 800635a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800635c:	f7fd f8aa 	bl	80034b4 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006368:	429a      	cmp	r2, r3
 800636a:	d803      	bhi.n	8006374 <HAL_SPI_TransmitReceive+0x3c2>
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006372:	d102      	bne.n	800637a <HAL_SPI_TransmitReceive+0x3c8>
 8006374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006376:	2b00      	cmp	r3, #0
 8006378:	d103      	bne.n	8006382 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006380:	e01c      	b.n	80063bc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006386:	b29b      	uxth	r3, r3
 8006388:	2b00      	cmp	r3, #0
 800638a:	f47f af5b 	bne.w	8006244 <HAL_SPI_TransmitReceive+0x292>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006394:	b29b      	uxth	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	f47f af54 	bne.w	8006244 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800639c:	69fa      	ldr	r2, [r7, #28]
 800639e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 f9b3 	bl	800670c <SPI_EndRxTxTransaction>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d006      	beq.n	80063ba <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2220      	movs	r2, #32
 80063b6:	661a      	str	r2, [r3, #96]	; 0x60
 80063b8:	e000      	b.n	80063bc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80063ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80063cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3728      	adds	r7, #40	; 0x28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b088      	sub	sp, #32
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	603b      	str	r3, [r7, #0]
 80063e4:	4613      	mov	r3, r2
 80063e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063e8:	f7fd f864 	bl	80034b4 <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f0:	1a9b      	subs	r3, r3, r2
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	4413      	add	r3, r2
 80063f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063f8:	f7fd f85c 	bl	80034b4 <HAL_GetTick>
 80063fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80063fe:	4b39      	ldr	r3, [pc, #228]	; (80064e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	015b      	lsls	r3, r3, #5
 8006404:	0d1b      	lsrs	r3, r3, #20
 8006406:	69fa      	ldr	r2, [r7, #28]
 8006408:	fb02 f303 	mul.w	r3, r2, r3
 800640c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800640e:	e054      	b.n	80064ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006416:	d050      	beq.n	80064ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006418:	f7fd f84c 	bl	80034b4 <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	69fa      	ldr	r2, [r7, #28]
 8006424:	429a      	cmp	r2, r3
 8006426:	d902      	bls.n	800642e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d13d      	bne.n	80064aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800643c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006446:	d111      	bne.n	800646c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006450:	d004      	beq.n	800645c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800645a:	d107      	bne.n	800646c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800646a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006474:	d10f      	bne.n	8006496 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006494:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e017      	b.n	80064da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d101      	bne.n	80064b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064b0:	2300      	movs	r3, #0
 80064b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	3b01      	subs	r3, #1
 80064b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	689a      	ldr	r2, [r3, #8]
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	4013      	ands	r3, r2
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	bf0c      	ite	eq
 80064ca:	2301      	moveq	r3, #1
 80064cc:	2300      	movne	r3, #0
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	461a      	mov	r2, r3
 80064d2:	79fb      	ldrb	r3, [r7, #7]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d19b      	bne.n	8006410 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3720      	adds	r7, #32
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	20000000 	.word	0x20000000

080064e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b08a      	sub	sp, #40	; 0x28
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
 80064f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80064f6:	2300      	movs	r3, #0
 80064f8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80064fa:	f7fc ffdb 	bl	80034b4 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006502:	1a9b      	subs	r3, r3, r2
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	4413      	add	r3, r2
 8006508:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800650a:	f7fc ffd3 	bl	80034b4 <HAL_GetTick>
 800650e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	330c      	adds	r3, #12
 8006516:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006518:	4b3d      	ldr	r3, [pc, #244]	; (8006610 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	4613      	mov	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	00da      	lsls	r2, r3, #3
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	0d1b      	lsrs	r3, r3, #20
 8006528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800652a:	fb02 f303 	mul.w	r3, r2, r3
 800652e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006530:	e060      	b.n	80065f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006538:	d107      	bne.n	800654a <SPI_WaitFifoStateUntilTimeout+0x62>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d104      	bne.n	800654a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	b2db      	uxtb	r3, r3
 8006546:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006548:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006550:	d050      	beq.n	80065f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006552:	f7fc ffaf 	bl	80034b4 <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800655e:	429a      	cmp	r2, r3
 8006560:	d902      	bls.n	8006568 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	2b00      	cmp	r3, #0
 8006566:	d13d      	bne.n	80065e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006576:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006580:	d111      	bne.n	80065a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800658a:	d004      	beq.n	8006596 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006594:	d107      	bne.n	80065a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ae:	d10f      	bne.n	80065d0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065be:	601a      	str	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e010      	b.n	8006606 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	3b01      	subs	r3, #1
 80065f2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689a      	ldr	r2, [r3, #8]
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	4013      	ands	r3, r2
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	429a      	cmp	r2, r3
 8006602:	d196      	bne.n	8006532 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3728      	adds	r7, #40	; 0x28
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	20000000 	.word	0x20000000

08006614 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b088      	sub	sp, #32
 8006618:	af02      	add	r7, sp, #8
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006628:	d111      	bne.n	800664e <SPI_EndRxTransaction+0x3a>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006632:	d004      	beq.n	800663e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800663c:	d107      	bne.n	800664e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800664c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006656:	d112      	bne.n	800667e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2200      	movs	r2, #0
 8006660:	2180      	movs	r1, #128	; 0x80
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f7ff feb8 	bl	80063d8 <SPI_WaitFlagStateUntilTimeout>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d021      	beq.n	80066b2 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006672:	f043 0220 	orr.w	r2, r3, #32
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e03d      	b.n	80066fa <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800667e:	4b21      	ldr	r3, [pc, #132]	; (8006704 <SPI_EndRxTransaction+0xf0>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a21      	ldr	r2, [pc, #132]	; (8006708 <SPI_EndRxTransaction+0xf4>)
 8006684:	fba2 2303 	umull	r2, r3, r2, r3
 8006688:	0d5b      	lsrs	r3, r3, #21
 800668a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800668e:	fb02 f303 	mul.w	r3, r2, r3
 8006692:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00a      	beq.n	80066b0 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	3b01      	subs	r3, #1
 800669e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066aa:	2b80      	cmp	r3, #128	; 0x80
 80066ac:	d0f2      	beq.n	8006694 <SPI_EndRxTransaction+0x80>
 80066ae:	e000      	b.n	80066b2 <SPI_EndRxTransaction+0x9e>
        break;
 80066b0:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066ba:	d11d      	bne.n	80066f8 <SPI_EndRxTransaction+0xe4>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066c4:	d004      	beq.n	80066d0 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ce:	d113      	bne.n	80066f8 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f7ff ff03 	bl	80064e8 <SPI_WaitFifoStateUntilTimeout>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d007      	beq.n	80066f8 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ec:	f043 0220 	orr.w	r2, r3, #32
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e000      	b.n	80066fa <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3718      	adds	r7, #24
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	20000000 	.word	0x20000000
 8006708:	165e9f81 	.word	0x165e9f81

0800670c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b088      	sub	sp, #32
 8006710:	af02      	add	r7, sp, #8
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2200      	movs	r2, #0
 8006720:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f7ff fedf 	bl	80064e8 <SPI_WaitFifoStateUntilTimeout>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d007      	beq.n	8006740 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006734:	f043 0220 	orr.w	r2, r3, #32
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e046      	b.n	80067ce <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006740:	4b25      	ldr	r3, [pc, #148]	; (80067d8 <SPI_EndRxTxTransaction+0xcc>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a25      	ldr	r2, [pc, #148]	; (80067dc <SPI_EndRxTxTransaction+0xd0>)
 8006746:	fba2 2303 	umull	r2, r3, r2, r3
 800674a:	0d5b      	lsrs	r3, r3, #21
 800674c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006750:	fb02 f303 	mul.w	r3, r2, r3
 8006754:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800675e:	d112      	bne.n	8006786 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	9300      	str	r3, [sp, #0]
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	2200      	movs	r2, #0
 8006768:	2180      	movs	r1, #128	; 0x80
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f7ff fe34 	bl	80063d8 <SPI_WaitFlagStateUntilTimeout>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d016      	beq.n	80067a4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800677a:	f043 0220 	orr.w	r2, r3, #32
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e023      	b.n	80067ce <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00a      	beq.n	80067a2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	3b01      	subs	r3, #1
 8006790:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800679c:	2b80      	cmp	r3, #128	; 0x80
 800679e:	d0f2      	beq.n	8006786 <SPI_EndRxTxTransaction+0x7a>
 80067a0:	e000      	b.n	80067a4 <SPI_EndRxTxTransaction+0x98>
        break;
 80067a2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f7ff fe99 	bl	80064e8 <SPI_WaitFifoStateUntilTimeout>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d007      	beq.n	80067cc <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c0:	f043 0220 	orr.w	r2, r3, #32
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e000      	b.n	80067ce <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3718      	adds	r7, #24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	20000000 	.word	0x20000000
 80067dc:	165e9f81 	.word	0x165e9f81

080067e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e049      	b.n	8006886 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d106      	bne.n	800680c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f7fc fcee 	bl	80031e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2202      	movs	r2, #2
 8006810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	3304      	adds	r3, #4
 800681c:	4619      	mov	r1, r3
 800681e:	4610      	mov	r0, r2
 8006820:	f000 fe2a 	bl	8007478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
	...

08006890 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d001      	beq.n	80068a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e054      	b.n	8006952 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2202      	movs	r2, #2
 80068ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68da      	ldr	r2, [r3, #12]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f042 0201 	orr.w	r2, r2, #1
 80068be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a26      	ldr	r2, [pc, #152]	; (8006960 <HAL_TIM_Base_Start_IT+0xd0>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d022      	beq.n	8006910 <HAL_TIM_Base_Start_IT+0x80>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d2:	d01d      	beq.n	8006910 <HAL_TIM_Base_Start_IT+0x80>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a22      	ldr	r2, [pc, #136]	; (8006964 <HAL_TIM_Base_Start_IT+0xd4>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d018      	beq.n	8006910 <HAL_TIM_Base_Start_IT+0x80>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a21      	ldr	r2, [pc, #132]	; (8006968 <HAL_TIM_Base_Start_IT+0xd8>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d013      	beq.n	8006910 <HAL_TIM_Base_Start_IT+0x80>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a1f      	ldr	r2, [pc, #124]	; (800696c <HAL_TIM_Base_Start_IT+0xdc>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d00e      	beq.n	8006910 <HAL_TIM_Base_Start_IT+0x80>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a1e      	ldr	r2, [pc, #120]	; (8006970 <HAL_TIM_Base_Start_IT+0xe0>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d009      	beq.n	8006910 <HAL_TIM_Base_Start_IT+0x80>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a1c      	ldr	r2, [pc, #112]	; (8006974 <HAL_TIM_Base_Start_IT+0xe4>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d004      	beq.n	8006910 <HAL_TIM_Base_Start_IT+0x80>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a1b      	ldr	r2, [pc, #108]	; (8006978 <HAL_TIM_Base_Start_IT+0xe8>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d115      	bne.n	800693c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689a      	ldr	r2, [r3, #8]
 8006916:	4b19      	ldr	r3, [pc, #100]	; (800697c <HAL_TIM_Base_Start_IT+0xec>)
 8006918:	4013      	ands	r3, r2
 800691a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2b06      	cmp	r3, #6
 8006920:	d015      	beq.n	800694e <HAL_TIM_Base_Start_IT+0xbe>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006928:	d011      	beq.n	800694e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f042 0201 	orr.w	r2, r2, #1
 8006938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800693a:	e008      	b.n	800694e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f042 0201 	orr.w	r2, r2, #1
 800694a:	601a      	str	r2, [r3, #0]
 800694c:	e000      	b.n	8006950 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800694e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	40010000 	.word	0x40010000
 8006964:	40000400 	.word	0x40000400
 8006968:	40000800 	.word	0x40000800
 800696c:	40000c00 	.word	0x40000c00
 8006970:	40010400 	.word	0x40010400
 8006974:	40014000 	.word	0x40014000
 8006978:	40001800 	.word	0x40001800
 800697c:	00010007 	.word	0x00010007

08006980 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e049      	b.n	8006a26 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d106      	bne.n	80069ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7fc fbfe 	bl	80031a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2202      	movs	r2, #2
 80069b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	3304      	adds	r3, #4
 80069bc:	4619      	mov	r1, r3
 80069be:	4610      	mov	r0, r2
 80069c0:	f000 fd5a 	bl	8007478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b082      	sub	sp, #8
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d101      	bne.n	8006a40 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e049      	b.n	8006ad4 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d106      	bne.n	8006a5a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7fc fb5b 	bl	8003110 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2202      	movs	r2, #2
 8006a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	3304      	adds	r3, #4
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	4610      	mov	r0, r2
 8006a6e:	f000 fd03 	bl	8007478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d104      	bne.n	8006afa <HAL_TIM_IC_Start_IT+0x1e>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	e023      	b.n	8006b42 <HAL_TIM_IC_Start_IT+0x66>
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	2b04      	cmp	r3, #4
 8006afe:	d104      	bne.n	8006b0a <HAL_TIM_IC_Start_IT+0x2e>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	e01b      	b.n	8006b42 <HAL_TIM_IC_Start_IT+0x66>
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b08      	cmp	r3, #8
 8006b0e:	d104      	bne.n	8006b1a <HAL_TIM_IC_Start_IT+0x3e>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	e013      	b.n	8006b42 <HAL_TIM_IC_Start_IT+0x66>
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2b0c      	cmp	r3, #12
 8006b1e:	d104      	bne.n	8006b2a <HAL_TIM_IC_Start_IT+0x4e>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	e00b      	b.n	8006b42 <HAL_TIM_IC_Start_IT+0x66>
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	2b10      	cmp	r3, #16
 8006b2e:	d104      	bne.n	8006b3a <HAL_TIM_IC_Start_IT+0x5e>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	e003      	b.n	8006b42 <HAL_TIM_IC_Start_IT+0x66>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d104      	bne.n	8006b54 <HAL_TIM_IC_Start_IT+0x78>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	e013      	b.n	8006b7c <HAL_TIM_IC_Start_IT+0xa0>
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	2b04      	cmp	r3, #4
 8006b58:	d104      	bne.n	8006b64 <HAL_TIM_IC_Start_IT+0x88>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	e00b      	b.n	8006b7c <HAL_TIM_IC_Start_IT+0xa0>
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	2b08      	cmp	r3, #8
 8006b68:	d104      	bne.n	8006b74 <HAL_TIM_IC_Start_IT+0x98>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	e003      	b.n	8006b7c <HAL_TIM_IC_Start_IT+0xa0>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b7e:	7bbb      	ldrb	r3, [r7, #14]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d102      	bne.n	8006b8a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b84:	7b7b      	ldrb	r3, [r7, #13]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d001      	beq.n	8006b8e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e0e2      	b.n	8006d54 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d104      	bne.n	8006b9e <HAL_TIM_IC_Start_IT+0xc2>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2202      	movs	r2, #2
 8006b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b9c:	e023      	b.n	8006be6 <HAL_TIM_IC_Start_IT+0x10a>
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	2b04      	cmp	r3, #4
 8006ba2:	d104      	bne.n	8006bae <HAL_TIM_IC_Start_IT+0xd2>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2202      	movs	r2, #2
 8006ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bac:	e01b      	b.n	8006be6 <HAL_TIM_IC_Start_IT+0x10a>
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	2b08      	cmp	r3, #8
 8006bb2:	d104      	bne.n	8006bbe <HAL_TIM_IC_Start_IT+0xe2>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bbc:	e013      	b.n	8006be6 <HAL_TIM_IC_Start_IT+0x10a>
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	2b0c      	cmp	r3, #12
 8006bc2:	d104      	bne.n	8006bce <HAL_TIM_IC_Start_IT+0xf2>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bcc:	e00b      	b.n	8006be6 <HAL_TIM_IC_Start_IT+0x10a>
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	2b10      	cmp	r3, #16
 8006bd2:	d104      	bne.n	8006bde <HAL_TIM_IC_Start_IT+0x102>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bdc:	e003      	b.n	8006be6 <HAL_TIM_IC_Start_IT+0x10a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2202      	movs	r2, #2
 8006be2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d104      	bne.n	8006bf6 <HAL_TIM_IC_Start_IT+0x11a>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2202      	movs	r2, #2
 8006bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bf4:	e013      	b.n	8006c1e <HAL_TIM_IC_Start_IT+0x142>
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	2b04      	cmp	r3, #4
 8006bfa:	d104      	bne.n	8006c06 <HAL_TIM_IC_Start_IT+0x12a>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c04:	e00b      	b.n	8006c1e <HAL_TIM_IC_Start_IT+0x142>
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	2b08      	cmp	r3, #8
 8006c0a:	d104      	bne.n	8006c16 <HAL_TIM_IC_Start_IT+0x13a>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c14:	e003      	b.n	8006c1e <HAL_TIM_IC_Start_IT+0x142>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2202      	movs	r2, #2
 8006c1a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b0c      	cmp	r3, #12
 8006c22:	d841      	bhi.n	8006ca8 <HAL_TIM_IC_Start_IT+0x1cc>
 8006c24:	a201      	add	r2, pc, #4	; (adr r2, 8006c2c <HAL_TIM_IC_Start_IT+0x150>)
 8006c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2a:	bf00      	nop
 8006c2c:	08006c61 	.word	0x08006c61
 8006c30:	08006ca9 	.word	0x08006ca9
 8006c34:	08006ca9 	.word	0x08006ca9
 8006c38:	08006ca9 	.word	0x08006ca9
 8006c3c:	08006c73 	.word	0x08006c73
 8006c40:	08006ca9 	.word	0x08006ca9
 8006c44:	08006ca9 	.word	0x08006ca9
 8006c48:	08006ca9 	.word	0x08006ca9
 8006c4c:	08006c85 	.word	0x08006c85
 8006c50:	08006ca9 	.word	0x08006ca9
 8006c54:	08006ca9 	.word	0x08006ca9
 8006c58:	08006ca9 	.word	0x08006ca9
 8006c5c:	08006c97 	.word	0x08006c97
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68da      	ldr	r2, [r3, #12]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f042 0202 	orr.w	r2, r2, #2
 8006c6e:	60da      	str	r2, [r3, #12]
      break;
 8006c70:	e01d      	b.n	8006cae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68da      	ldr	r2, [r3, #12]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f042 0204 	orr.w	r2, r2, #4
 8006c80:	60da      	str	r2, [r3, #12]
      break;
 8006c82:	e014      	b.n	8006cae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68da      	ldr	r2, [r3, #12]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f042 0208 	orr.w	r2, r2, #8
 8006c92:	60da      	str	r2, [r3, #12]
      break;
 8006c94:	e00b      	b.n	8006cae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68da      	ldr	r2, [r3, #12]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f042 0210 	orr.w	r2, r2, #16
 8006ca4:	60da      	str	r2, [r3, #12]
      break;
 8006ca6:	e002      	b.n	8006cae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	73fb      	strb	r3, [r7, #15]
      break;
 8006cac:	bf00      	nop
  }

  if (status == HAL_OK)
 8006cae:	7bfb      	ldrb	r3, [r7, #15]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d14e      	bne.n	8006d52 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	6839      	ldr	r1, [r7, #0]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f001 f916 	bl	8007eee <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a25      	ldr	r2, [pc, #148]	; (8006d5c <HAL_TIM_IC_Start_IT+0x280>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d022      	beq.n	8006d12 <HAL_TIM_IC_Start_IT+0x236>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd4:	d01d      	beq.n	8006d12 <HAL_TIM_IC_Start_IT+0x236>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a21      	ldr	r2, [pc, #132]	; (8006d60 <HAL_TIM_IC_Start_IT+0x284>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d018      	beq.n	8006d12 <HAL_TIM_IC_Start_IT+0x236>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a1f      	ldr	r2, [pc, #124]	; (8006d64 <HAL_TIM_IC_Start_IT+0x288>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d013      	beq.n	8006d12 <HAL_TIM_IC_Start_IT+0x236>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a1e      	ldr	r2, [pc, #120]	; (8006d68 <HAL_TIM_IC_Start_IT+0x28c>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d00e      	beq.n	8006d12 <HAL_TIM_IC_Start_IT+0x236>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a1c      	ldr	r2, [pc, #112]	; (8006d6c <HAL_TIM_IC_Start_IT+0x290>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d009      	beq.n	8006d12 <HAL_TIM_IC_Start_IT+0x236>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a1b      	ldr	r2, [pc, #108]	; (8006d70 <HAL_TIM_IC_Start_IT+0x294>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d004      	beq.n	8006d12 <HAL_TIM_IC_Start_IT+0x236>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a19      	ldr	r2, [pc, #100]	; (8006d74 <HAL_TIM_IC_Start_IT+0x298>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d115      	bne.n	8006d3e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	4b17      	ldr	r3, [pc, #92]	; (8006d78 <HAL_TIM_IC_Start_IT+0x29c>)
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	2b06      	cmp	r3, #6
 8006d22:	d015      	beq.n	8006d50 <HAL_TIM_IC_Start_IT+0x274>
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d2a:	d011      	beq.n	8006d50 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f042 0201 	orr.w	r2, r2, #1
 8006d3a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d3c:	e008      	b.n	8006d50 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f042 0201 	orr.w	r2, r2, #1
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	e000      	b.n	8006d52 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d50:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	40010000 	.word	0x40010000
 8006d60:	40000400 	.word	0x40000400
 8006d64:	40000800 	.word	0x40000800
 8006d68:	40000c00 	.word	0x40000c00
 8006d6c:	40010400 	.word	0x40010400
 8006d70:	40014000 	.word	0x40014000
 8006d74:	40001800 	.word	0x40001800
 8006d78:	00010007 	.word	0x00010007

08006d7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d122      	bne.n	8006dd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d11b      	bne.n	8006dd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f06f 0202 	mvn.w	r2, #2
 8006da8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	f003 0303 	and.w	r3, r3, #3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fb3c 	bl	800743c <HAL_TIM_IC_CaptureCallback>
 8006dc4:	e005      	b.n	8006dd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fb2e 	bl	8007428 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fb3f 	bl	8007450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	f003 0304 	and.w	r3, r3, #4
 8006de2:	2b04      	cmp	r3, #4
 8006de4:	d122      	bne.n	8006e2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	f003 0304 	and.w	r3, r3, #4
 8006df0:	2b04      	cmp	r3, #4
 8006df2:	d11b      	bne.n	8006e2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f06f 0204 	mvn.w	r2, #4
 8006dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2202      	movs	r2, #2
 8006e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d003      	beq.n	8006e1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fb12 	bl	800743c <HAL_TIM_IC_CaptureCallback>
 8006e18:	e005      	b.n	8006e26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 fb04 	bl	8007428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fb15 	bl	8007450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	f003 0308 	and.w	r3, r3, #8
 8006e36:	2b08      	cmp	r3, #8
 8006e38:	d122      	bne.n	8006e80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	f003 0308 	and.w	r3, r3, #8
 8006e44:	2b08      	cmp	r3, #8
 8006e46:	d11b      	bne.n	8006e80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f06f 0208 	mvn.w	r2, #8
 8006e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2204      	movs	r2, #4
 8006e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	69db      	ldr	r3, [r3, #28]
 8006e5e:	f003 0303 	and.w	r3, r3, #3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d003      	beq.n	8006e6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fae8 	bl	800743c <HAL_TIM_IC_CaptureCallback>
 8006e6c:	e005      	b.n	8006e7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fada 	bl	8007428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 faeb 	bl	8007450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	f003 0310 	and.w	r3, r3, #16
 8006e8a:	2b10      	cmp	r3, #16
 8006e8c:	d122      	bne.n	8006ed4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	f003 0310 	and.w	r3, r3, #16
 8006e98:	2b10      	cmp	r3, #16
 8006e9a:	d11b      	bne.n	8006ed4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f06f 0210 	mvn.w	r2, #16
 8006ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2208      	movs	r2, #8
 8006eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d003      	beq.n	8006ec2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fabe 	bl	800743c <HAL_TIM_IC_CaptureCallback>
 8006ec0:	e005      	b.n	8006ece <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fab0 	bl	8007428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fac1 	bl	8007450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d10e      	bne.n	8006f00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	f003 0301 	and.w	r3, r3, #1
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d107      	bne.n	8006f00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f06f 0201 	mvn.w	r2, #1
 8006ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7fb fdc8 	bl	8002a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f0a:	2b80      	cmp	r3, #128	; 0x80
 8006f0c:	d10e      	bne.n	8006f2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f18:	2b80      	cmp	r3, #128	; 0x80
 8006f1a:	d107      	bne.n	8006f2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f001 f89e 	bl	8008068 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f3a:	d10e      	bne.n	8006f5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f46:	2b80      	cmp	r3, #128	; 0x80
 8006f48:	d107      	bne.n	8006f5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006f52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f001 f891 	bl	800807c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f64:	2b40      	cmp	r3, #64	; 0x40
 8006f66:	d10e      	bne.n	8006f86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f72:	2b40      	cmp	r3, #64	; 0x40
 8006f74:	d107      	bne.n	8006f86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 fa6f 	bl	8007464 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	f003 0320 	and.w	r3, r3, #32
 8006f90:	2b20      	cmp	r3, #32
 8006f92:	d10e      	bne.n	8006fb2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	f003 0320 	and.w	r3, r3, #32
 8006f9e:	2b20      	cmp	r3, #32
 8006fa0:	d107      	bne.n	8006fb2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f06f 0220 	mvn.w	r2, #32
 8006faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f001 f851 	bl	8008054 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fb2:	bf00      	nop
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b086      	sub	sp, #24
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	60f8      	str	r0, [r7, #12]
 8006fc2:	60b9      	str	r1, [r7, #8]
 8006fc4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d101      	bne.n	8006fd8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	e088      	b.n	80070ea <HAL_TIM_IC_ConfigChannel+0x130>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d11b      	bne.n	800701e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6818      	ldr	r0, [r3, #0]
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	6819      	ldr	r1, [r3, #0]
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	685a      	ldr	r2, [r3, #4]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	f000 fdd1 	bl	8007b9c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	699a      	ldr	r2, [r3, #24]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f022 020c 	bic.w	r2, r2, #12
 8007008:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	6999      	ldr	r1, [r3, #24]
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	430a      	orrs	r2, r1
 800701a:	619a      	str	r2, [r3, #24]
 800701c:	e060      	b.n	80070e0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2b04      	cmp	r3, #4
 8007022:	d11c      	bne.n	800705e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6818      	ldr	r0, [r3, #0]
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	6819      	ldr	r1, [r3, #0]
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	f000 fe55 	bl	8007ce2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	699a      	ldr	r2, [r3, #24]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007046:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6999      	ldr	r1, [r3, #24]
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	021a      	lsls	r2, r3, #8
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	430a      	orrs	r2, r1
 800705a:	619a      	str	r2, [r3, #24]
 800705c:	e040      	b.n	80070e0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b08      	cmp	r3, #8
 8007062:	d11b      	bne.n	800709c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6818      	ldr	r0, [r3, #0]
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	6819      	ldr	r1, [r3, #0]
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	f000 fea2 	bl	8007dbc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	69da      	ldr	r2, [r3, #28]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f022 020c 	bic.w	r2, r2, #12
 8007086:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	69d9      	ldr	r1, [r3, #28]
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	689a      	ldr	r2, [r3, #8]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	430a      	orrs	r2, r1
 8007098:	61da      	str	r2, [r3, #28]
 800709a:	e021      	b.n	80070e0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b0c      	cmp	r3, #12
 80070a0:	d11c      	bne.n	80070dc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6818      	ldr	r0, [r3, #0]
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	6819      	ldr	r1, [r3, #0]
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	685a      	ldr	r2, [r3, #4]
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	f000 febf 	bl	8007e34 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	69da      	ldr	r2, [r3, #28]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80070c4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	69d9      	ldr	r1, [r3, #28]
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	021a      	lsls	r2, r3, #8
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	430a      	orrs	r2, r1
 80070d8:	61da      	str	r2, [r3, #28]
 80070da:	e001      	b.n	80070e0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
	...

080070f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800710a:	2b01      	cmp	r3, #1
 800710c:	d101      	bne.n	8007112 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800710e:	2302      	movs	r3, #2
 8007110:	e0ff      	b.n	8007312 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2b14      	cmp	r3, #20
 800711e:	f200 80f0 	bhi.w	8007302 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007122:	a201      	add	r2, pc, #4	; (adr r2, 8007128 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007128:	0800717d 	.word	0x0800717d
 800712c:	08007303 	.word	0x08007303
 8007130:	08007303 	.word	0x08007303
 8007134:	08007303 	.word	0x08007303
 8007138:	080071bd 	.word	0x080071bd
 800713c:	08007303 	.word	0x08007303
 8007140:	08007303 	.word	0x08007303
 8007144:	08007303 	.word	0x08007303
 8007148:	080071ff 	.word	0x080071ff
 800714c:	08007303 	.word	0x08007303
 8007150:	08007303 	.word	0x08007303
 8007154:	08007303 	.word	0x08007303
 8007158:	0800723f 	.word	0x0800723f
 800715c:	08007303 	.word	0x08007303
 8007160:	08007303 	.word	0x08007303
 8007164:	08007303 	.word	0x08007303
 8007168:	08007281 	.word	0x08007281
 800716c:	08007303 	.word	0x08007303
 8007170:	08007303 	.word	0x08007303
 8007174:	08007303 	.word	0x08007303
 8007178:	080072c1 	.word	0x080072c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68b9      	ldr	r1, [r7, #8]
 8007182:	4618      	mov	r0, r3
 8007184:	f000 fa18 	bl	80075b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	699a      	ldr	r2, [r3, #24]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f042 0208 	orr.w	r2, r2, #8
 8007196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	699a      	ldr	r2, [r3, #24]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f022 0204 	bic.w	r2, r2, #4
 80071a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6999      	ldr	r1, [r3, #24]
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	691a      	ldr	r2, [r3, #16]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	430a      	orrs	r2, r1
 80071b8:	619a      	str	r2, [r3, #24]
      break;
 80071ba:	e0a5      	b.n	8007308 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68b9      	ldr	r1, [r7, #8]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 fa6a 	bl	800769c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	699a      	ldr	r2, [r3, #24]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	699a      	ldr	r2, [r3, #24]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6999      	ldr	r1, [r3, #24]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	021a      	lsls	r2, r3, #8
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	430a      	orrs	r2, r1
 80071fa:	619a      	str	r2, [r3, #24]
      break;
 80071fc:	e084      	b.n	8007308 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68b9      	ldr	r1, [r7, #8]
 8007204:	4618      	mov	r0, r3
 8007206:	f000 fac1 	bl	800778c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	69da      	ldr	r2, [r3, #28]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f042 0208 	orr.w	r2, r2, #8
 8007218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	69da      	ldr	r2, [r3, #28]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 0204 	bic.w	r2, r2, #4
 8007228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	69d9      	ldr	r1, [r3, #28]
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	691a      	ldr	r2, [r3, #16]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	430a      	orrs	r2, r1
 800723a:	61da      	str	r2, [r3, #28]
      break;
 800723c:	e064      	b.n	8007308 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68b9      	ldr	r1, [r7, #8]
 8007244:	4618      	mov	r0, r3
 8007246:	f000 fb17 	bl	8007878 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	69da      	ldr	r2, [r3, #28]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	69da      	ldr	r2, [r3, #28]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	69d9      	ldr	r1, [r3, #28]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	021a      	lsls	r2, r3, #8
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	430a      	orrs	r2, r1
 800727c:	61da      	str	r2, [r3, #28]
      break;
 800727e:	e043      	b.n	8007308 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68b9      	ldr	r1, [r7, #8]
 8007286:	4618      	mov	r0, r3
 8007288:	f000 fb4e 	bl	8007928 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f042 0208 	orr.w	r2, r2, #8
 800729a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0204 	bic.w	r2, r2, #4
 80072aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	691a      	ldr	r2, [r3, #16]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	430a      	orrs	r2, r1
 80072bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80072be:	e023      	b.n	8007308 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68b9      	ldr	r1, [r7, #8]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 fb80 	bl	80079cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	021a      	lsls	r2, r3, #8
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	430a      	orrs	r2, r1
 80072fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007300:	e002      	b.n	8007308 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	75fb      	strb	r3, [r7, #23]
      break;
 8007306:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007310:	7dfb      	ldrb	r3, [r7, #23]
}
 8007312:	4618      	mov	r0, r3
 8007314:	3718      	adds	r7, #24
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop

0800731c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800732c:	2b01      	cmp	r3, #1
 800732e:	d101      	bne.n	8007334 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007330:	2302      	movs	r3, #2
 8007332:	e031      	b.n	8007398 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2202      	movs	r2, #2
 8007340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fb94 	bl	8007a74 <TIM_SlaveTimer_SetConfig>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d009      	beq.n	8007366 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2201      	movs	r2, #1
 8007356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e018      	b.n	8007398 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68da      	ldr	r2, [r3, #12]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007374:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68da      	ldr	r2, [r3, #12]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007384:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2201      	movs	r2, #1
 800738a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80073aa:	2300      	movs	r3, #0
 80073ac:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	2b0c      	cmp	r3, #12
 80073b2:	d831      	bhi.n	8007418 <HAL_TIM_ReadCapturedValue+0x78>
 80073b4:	a201      	add	r2, pc, #4	; (adr r2, 80073bc <HAL_TIM_ReadCapturedValue+0x1c>)
 80073b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ba:	bf00      	nop
 80073bc:	080073f1 	.word	0x080073f1
 80073c0:	08007419 	.word	0x08007419
 80073c4:	08007419 	.word	0x08007419
 80073c8:	08007419 	.word	0x08007419
 80073cc:	080073fb 	.word	0x080073fb
 80073d0:	08007419 	.word	0x08007419
 80073d4:	08007419 	.word	0x08007419
 80073d8:	08007419 	.word	0x08007419
 80073dc:	08007405 	.word	0x08007405
 80073e0:	08007419 	.word	0x08007419
 80073e4:	08007419 	.word	0x08007419
 80073e8:	08007419 	.word	0x08007419
 80073ec:	0800740f 	.word	0x0800740f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073f6:	60fb      	str	r3, [r7, #12]

      break;
 80073f8:	e00f      	b.n	800741a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007400:	60fb      	str	r3, [r7, #12]

      break;
 8007402:	e00a      	b.n	800741a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800740a:	60fb      	str	r3, [r7, #12]

      break;
 800740c:	e005      	b.n	800741a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007414:	60fb      	str	r3, [r7, #12]

      break;
 8007416:	e000      	b.n	800741a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007418:	bf00      	nop
  }

  return tmpreg;
 800741a:	68fb      	ldr	r3, [r7, #12]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3714      	adds	r7, #20
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800746c:	bf00      	nop
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a40      	ldr	r2, [pc, #256]	; (800758c <TIM_Base_SetConfig+0x114>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d013      	beq.n	80074b8 <TIM_Base_SetConfig+0x40>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007496:	d00f      	beq.n	80074b8 <TIM_Base_SetConfig+0x40>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a3d      	ldr	r2, [pc, #244]	; (8007590 <TIM_Base_SetConfig+0x118>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d00b      	beq.n	80074b8 <TIM_Base_SetConfig+0x40>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a3c      	ldr	r2, [pc, #240]	; (8007594 <TIM_Base_SetConfig+0x11c>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d007      	beq.n	80074b8 <TIM_Base_SetConfig+0x40>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a3b      	ldr	r2, [pc, #236]	; (8007598 <TIM_Base_SetConfig+0x120>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d003      	beq.n	80074b8 <TIM_Base_SetConfig+0x40>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a3a      	ldr	r2, [pc, #232]	; (800759c <TIM_Base_SetConfig+0x124>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d108      	bne.n	80074ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a2f      	ldr	r2, [pc, #188]	; (800758c <TIM_Base_SetConfig+0x114>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d02b      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074d8:	d027      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a2c      	ldr	r2, [pc, #176]	; (8007590 <TIM_Base_SetConfig+0x118>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d023      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a2b      	ldr	r2, [pc, #172]	; (8007594 <TIM_Base_SetConfig+0x11c>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d01f      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a2a      	ldr	r2, [pc, #168]	; (8007598 <TIM_Base_SetConfig+0x120>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d01b      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a29      	ldr	r2, [pc, #164]	; (800759c <TIM_Base_SetConfig+0x124>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d017      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a28      	ldr	r2, [pc, #160]	; (80075a0 <TIM_Base_SetConfig+0x128>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d013      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a27      	ldr	r2, [pc, #156]	; (80075a4 <TIM_Base_SetConfig+0x12c>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d00f      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a26      	ldr	r2, [pc, #152]	; (80075a8 <TIM_Base_SetConfig+0x130>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d00b      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a25      	ldr	r2, [pc, #148]	; (80075ac <TIM_Base_SetConfig+0x134>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d007      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a24      	ldr	r2, [pc, #144]	; (80075b0 <TIM_Base_SetConfig+0x138>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d003      	beq.n	800752a <TIM_Base_SetConfig+0xb2>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a23      	ldr	r2, [pc, #140]	; (80075b4 <TIM_Base_SetConfig+0x13c>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d108      	bne.n	800753c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	4313      	orrs	r3, r2
 800753a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	4313      	orrs	r3, r2
 8007548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	689a      	ldr	r2, [r3, #8]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a0a      	ldr	r2, [pc, #40]	; (800758c <TIM_Base_SetConfig+0x114>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d003      	beq.n	8007570 <TIM_Base_SetConfig+0xf8>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a0c      	ldr	r2, [pc, #48]	; (800759c <TIM_Base_SetConfig+0x124>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d103      	bne.n	8007578 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	691a      	ldr	r2, [r3, #16]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	615a      	str	r2, [r3, #20]
}
 800757e:	bf00      	nop
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	40010000 	.word	0x40010000
 8007590:	40000400 	.word	0x40000400
 8007594:	40000800 	.word	0x40000800
 8007598:	40000c00 	.word	0x40000c00
 800759c:	40010400 	.word	0x40010400
 80075a0:	40014000 	.word	0x40014000
 80075a4:	40014400 	.word	0x40014400
 80075a8:	40014800 	.word	0x40014800
 80075ac:	40001800 	.word	0x40001800
 80075b0:	40001c00 	.word	0x40001c00
 80075b4:	40002000 	.word	0x40002000

080075b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	f023 0201 	bic.w	r2, r3, #1
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	4b2b      	ldr	r3, [pc, #172]	; (8007690 <TIM_OC1_SetConfig+0xd8>)
 80075e4:	4013      	ands	r3, r2
 80075e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f023 0303 	bic.w	r3, r3, #3
 80075ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	f023 0302 	bic.w	r3, r3, #2
 8007600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	4313      	orrs	r3, r2
 800760a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a21      	ldr	r2, [pc, #132]	; (8007694 <TIM_OC1_SetConfig+0xdc>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d003      	beq.n	800761c <TIM_OC1_SetConfig+0x64>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a20      	ldr	r2, [pc, #128]	; (8007698 <TIM_OC1_SetConfig+0xe0>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d10c      	bne.n	8007636 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	f023 0308 	bic.w	r3, r3, #8
 8007622:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	4313      	orrs	r3, r2
 800762c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	f023 0304 	bic.w	r3, r3, #4
 8007634:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a16      	ldr	r2, [pc, #88]	; (8007694 <TIM_OC1_SetConfig+0xdc>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d003      	beq.n	8007646 <TIM_OC1_SetConfig+0x8e>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a15      	ldr	r2, [pc, #84]	; (8007698 <TIM_OC1_SetConfig+0xe0>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d111      	bne.n	800766a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800764c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007654:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	693a      	ldr	r2, [r7, #16]
 800765c:	4313      	orrs	r3, r2
 800765e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	4313      	orrs	r3, r2
 8007668:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	621a      	str	r2, [r3, #32]
}
 8007684:	bf00      	nop
 8007686:	371c      	adds	r7, #28
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr
 8007690:	fffeff8f 	.word	0xfffeff8f
 8007694:	40010000 	.word	0x40010000
 8007698:	40010400 	.word	0x40010400

0800769c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800769c:	b480      	push	{r7}
 800769e:	b087      	sub	sp, #28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	f023 0210 	bic.w	r2, r3, #16
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	4b2e      	ldr	r3, [pc, #184]	; (8007780 <TIM_OC2_SetConfig+0xe4>)
 80076c8:	4013      	ands	r3, r2
 80076ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	021b      	lsls	r3, r3, #8
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	4313      	orrs	r3, r2
 80076de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	f023 0320 	bic.w	r3, r3, #32
 80076e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	011b      	lsls	r3, r3, #4
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a23      	ldr	r2, [pc, #140]	; (8007784 <TIM_OC2_SetConfig+0xe8>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d003      	beq.n	8007704 <TIM_OC2_SetConfig+0x68>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a22      	ldr	r2, [pc, #136]	; (8007788 <TIM_OC2_SetConfig+0xec>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d10d      	bne.n	8007720 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800770a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	011b      	lsls	r3, r3, #4
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	4313      	orrs	r3, r2
 8007716:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800771e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a18      	ldr	r2, [pc, #96]	; (8007784 <TIM_OC2_SetConfig+0xe8>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d003      	beq.n	8007730 <TIM_OC2_SetConfig+0x94>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a17      	ldr	r2, [pc, #92]	; (8007788 <TIM_OC2_SetConfig+0xec>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d113      	bne.n	8007758 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007736:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800773e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	693a      	ldr	r2, [r7, #16]
 8007748:	4313      	orrs	r3, r2
 800774a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	699b      	ldr	r3, [r3, #24]
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	4313      	orrs	r3, r2
 8007756:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	693a      	ldr	r2, [r7, #16]
 800775c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	685a      	ldr	r2, [r3, #4]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	621a      	str	r2, [r3, #32]
}
 8007772:	bf00      	nop
 8007774:	371c      	adds	r7, #28
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	feff8fff 	.word	0xfeff8fff
 8007784:	40010000 	.word	0x40010000
 8007788:	40010400 	.word	0x40010400

0800778c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800778c:	b480      	push	{r7}
 800778e:	b087      	sub	sp, #28
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	69db      	ldr	r3, [r3, #28]
 80077b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	4b2d      	ldr	r3, [pc, #180]	; (800786c <TIM_OC3_SetConfig+0xe0>)
 80077b8:	4013      	ands	r3, r2
 80077ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f023 0303 	bic.w	r3, r3, #3
 80077c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	021b      	lsls	r3, r3, #8
 80077dc:	697a      	ldr	r2, [r7, #20]
 80077de:	4313      	orrs	r3, r2
 80077e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a22      	ldr	r2, [pc, #136]	; (8007870 <TIM_OC3_SetConfig+0xe4>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d003      	beq.n	80077f2 <TIM_OC3_SetConfig+0x66>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a21      	ldr	r2, [pc, #132]	; (8007874 <TIM_OC3_SetConfig+0xe8>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d10d      	bne.n	800780e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	021b      	lsls	r3, r3, #8
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	4313      	orrs	r3, r2
 8007804:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800780c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a17      	ldr	r2, [pc, #92]	; (8007870 <TIM_OC3_SetConfig+0xe4>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d003      	beq.n	800781e <TIM_OC3_SetConfig+0x92>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a16      	ldr	r2, [pc, #88]	; (8007874 <TIM_OC3_SetConfig+0xe8>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d113      	bne.n	8007846 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007824:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800782c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	011b      	lsls	r3, r3, #4
 8007834:	693a      	ldr	r2, [r7, #16]
 8007836:	4313      	orrs	r3, r2
 8007838:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	011b      	lsls	r3, r3, #4
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	4313      	orrs	r3, r2
 8007844:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	685a      	ldr	r2, [r3, #4]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	621a      	str	r2, [r3, #32]
}
 8007860:	bf00      	nop
 8007862:	371c      	adds	r7, #28
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	fffeff8f 	.word	0xfffeff8f
 8007870:	40010000 	.word	0x40010000
 8007874:	40010400 	.word	0x40010400

08007878 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a1b      	ldr	r3, [r3, #32]
 8007892:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	69db      	ldr	r3, [r3, #28]
 800789e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	4b1e      	ldr	r3, [pc, #120]	; (800791c <TIM_OC4_SetConfig+0xa4>)
 80078a4:	4013      	ands	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	021b      	lsls	r3, r3, #8
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	031b      	lsls	r3, r3, #12
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a13      	ldr	r2, [pc, #76]	; (8007920 <TIM_OC4_SetConfig+0xa8>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d003      	beq.n	80078e0 <TIM_OC4_SetConfig+0x68>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a12      	ldr	r2, [pc, #72]	; (8007924 <TIM_OC4_SetConfig+0xac>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d109      	bne.n	80078f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	019b      	lsls	r3, r3, #6
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	621a      	str	r2, [r3, #32]
}
 800790e:	bf00      	nop
 8007910:	371c      	adds	r7, #28
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	feff8fff 	.word	0xfeff8fff
 8007920:	40010000 	.word	0x40010000
 8007924:	40010400 	.word	0x40010400

08007928 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007928:	b480      	push	{r7}
 800792a:	b087      	sub	sp, #28
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800794e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	4b1b      	ldr	r3, [pc, #108]	; (80079c0 <TIM_OC5_SetConfig+0x98>)
 8007954:	4013      	ands	r3, r2
 8007956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	4313      	orrs	r3, r2
 8007960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007968:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	041b      	lsls	r3, r3, #16
 8007970:	693a      	ldr	r2, [r7, #16]
 8007972:	4313      	orrs	r3, r2
 8007974:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a12      	ldr	r2, [pc, #72]	; (80079c4 <TIM_OC5_SetConfig+0x9c>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d003      	beq.n	8007986 <TIM_OC5_SetConfig+0x5e>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a11      	ldr	r2, [pc, #68]	; (80079c8 <TIM_OC5_SetConfig+0xa0>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d109      	bne.n	800799a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800798c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	021b      	lsls	r3, r3, #8
 8007994:	697a      	ldr	r2, [r7, #20]
 8007996:	4313      	orrs	r3, r2
 8007998:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	697a      	ldr	r2, [r7, #20]
 800799e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	685a      	ldr	r2, [r3, #4]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	621a      	str	r2, [r3, #32]
}
 80079b4:	bf00      	nop
 80079b6:	371c      	adds	r7, #28
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr
 80079c0:	fffeff8f 	.word	0xfffeff8f
 80079c4:	40010000 	.word	0x40010000
 80079c8:	40010400 	.word	0x40010400

080079cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b087      	sub	sp, #28
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a1b      	ldr	r3, [r3, #32]
 80079da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	4b1c      	ldr	r3, [pc, #112]	; (8007a68 <TIM_OC6_SetConfig+0x9c>)
 80079f8:	4013      	ands	r3, r2
 80079fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	021b      	lsls	r3, r3, #8
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	051b      	lsls	r3, r3, #20
 8007a16:	693a      	ldr	r2, [r7, #16]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a13      	ldr	r2, [pc, #76]	; (8007a6c <TIM_OC6_SetConfig+0xa0>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d003      	beq.n	8007a2c <TIM_OC6_SetConfig+0x60>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a12      	ldr	r2, [pc, #72]	; (8007a70 <TIM_OC6_SetConfig+0xa4>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d109      	bne.n	8007a40 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	695b      	ldr	r3, [r3, #20]
 8007a38:	029b      	lsls	r3, r3, #10
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	621a      	str	r2, [r3, #32]
}
 8007a5a:	bf00      	nop
 8007a5c:	371c      	adds	r7, #28
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	feff8fff 	.word	0xfeff8fff
 8007a6c:	40010000 	.word	0x40010000
 8007a70:	40010400 	.word	0x40010400

08007a74 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a90:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	4b3e      	ldr	r3, [pc, #248]	; (8007b98 <TIM_SlaveTimer_SetConfig+0x124>)
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	693a      	ldr	r2, [r7, #16]
 8007ab4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	2b70      	cmp	r3, #112	; 0x70
 8007abc:	d01a      	beq.n	8007af4 <TIM_SlaveTimer_SetConfig+0x80>
 8007abe:	2b70      	cmp	r3, #112	; 0x70
 8007ac0:	d860      	bhi.n	8007b84 <TIM_SlaveTimer_SetConfig+0x110>
 8007ac2:	2b60      	cmp	r3, #96	; 0x60
 8007ac4:	d054      	beq.n	8007b70 <TIM_SlaveTimer_SetConfig+0xfc>
 8007ac6:	2b60      	cmp	r3, #96	; 0x60
 8007ac8:	d85c      	bhi.n	8007b84 <TIM_SlaveTimer_SetConfig+0x110>
 8007aca:	2b50      	cmp	r3, #80	; 0x50
 8007acc:	d046      	beq.n	8007b5c <TIM_SlaveTimer_SetConfig+0xe8>
 8007ace:	2b50      	cmp	r3, #80	; 0x50
 8007ad0:	d858      	bhi.n	8007b84 <TIM_SlaveTimer_SetConfig+0x110>
 8007ad2:	2b40      	cmp	r3, #64	; 0x40
 8007ad4:	d019      	beq.n	8007b0a <TIM_SlaveTimer_SetConfig+0x96>
 8007ad6:	2b40      	cmp	r3, #64	; 0x40
 8007ad8:	d854      	bhi.n	8007b84 <TIM_SlaveTimer_SetConfig+0x110>
 8007ada:	2b30      	cmp	r3, #48	; 0x30
 8007adc:	d055      	beq.n	8007b8a <TIM_SlaveTimer_SetConfig+0x116>
 8007ade:	2b30      	cmp	r3, #48	; 0x30
 8007ae0:	d850      	bhi.n	8007b84 <TIM_SlaveTimer_SetConfig+0x110>
 8007ae2:	2b20      	cmp	r3, #32
 8007ae4:	d051      	beq.n	8007b8a <TIM_SlaveTimer_SetConfig+0x116>
 8007ae6:	2b20      	cmp	r3, #32
 8007ae8:	d84c      	bhi.n	8007b84 <TIM_SlaveTimer_SetConfig+0x110>
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d04d      	beq.n	8007b8a <TIM_SlaveTimer_SetConfig+0x116>
 8007aee:	2b10      	cmp	r3, #16
 8007af0:	d04b      	beq.n	8007b8a <TIM_SlaveTimer_SetConfig+0x116>
 8007af2:	e047      	b.n	8007b84 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6818      	ldr	r0, [r3, #0]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	68d9      	ldr	r1, [r3, #12]
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	689a      	ldr	r2, [r3, #8]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	f000 f9d3 	bl	8007eae <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007b08:	e040      	b.n	8007b8c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b05      	cmp	r3, #5
 8007b10:	d101      	bne.n	8007b16 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e03b      	b.n	8007b8e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	6a1b      	ldr	r3, [r3, #32]
 8007b1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	6a1a      	ldr	r2, [r3, #32]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f022 0201 	bic.w	r2, r2, #1
 8007b2c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b3c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	011b      	lsls	r3, r3, #4
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	621a      	str	r2, [r3, #32]
      break;
 8007b5a:	e017      	b.n	8007b8c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6818      	ldr	r0, [r3, #0]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	6899      	ldr	r1, [r3, #8]
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	461a      	mov	r2, r3
 8007b6a:	f000 f88b 	bl	8007c84 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007b6e:	e00d      	b.n	8007b8c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6818      	ldr	r0, [r3, #0]
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	6899      	ldr	r1, [r3, #8]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	f000 f8ed 	bl	8007d5c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007b82:	e003      	b.n	8007b8c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	75fb      	strb	r3, [r7, #23]
      break;
 8007b88:	e000      	b.n	8007b8c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007b8a:	bf00      	nop
  }

  return status;
 8007b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3718      	adds	r7, #24
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	fffefff8 	.word	0xfffefff8

08007b9c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b087      	sub	sp, #28
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
 8007ba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6a1b      	ldr	r3, [r3, #32]
 8007bae:	f023 0201 	bic.w	r2, r3, #1
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6a1b      	ldr	r3, [r3, #32]
 8007bc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	4a28      	ldr	r2, [pc, #160]	; (8007c68 <TIM_TI1_SetConfig+0xcc>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d01b      	beq.n	8007c02 <TIM_TI1_SetConfig+0x66>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bd0:	d017      	beq.n	8007c02 <TIM_TI1_SetConfig+0x66>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	4a25      	ldr	r2, [pc, #148]	; (8007c6c <TIM_TI1_SetConfig+0xd0>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d013      	beq.n	8007c02 <TIM_TI1_SetConfig+0x66>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	4a24      	ldr	r2, [pc, #144]	; (8007c70 <TIM_TI1_SetConfig+0xd4>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d00f      	beq.n	8007c02 <TIM_TI1_SetConfig+0x66>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	4a23      	ldr	r2, [pc, #140]	; (8007c74 <TIM_TI1_SetConfig+0xd8>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d00b      	beq.n	8007c02 <TIM_TI1_SetConfig+0x66>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	4a22      	ldr	r2, [pc, #136]	; (8007c78 <TIM_TI1_SetConfig+0xdc>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d007      	beq.n	8007c02 <TIM_TI1_SetConfig+0x66>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	4a21      	ldr	r2, [pc, #132]	; (8007c7c <TIM_TI1_SetConfig+0xe0>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d003      	beq.n	8007c02 <TIM_TI1_SetConfig+0x66>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	4a20      	ldr	r2, [pc, #128]	; (8007c80 <TIM_TI1_SetConfig+0xe4>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d101      	bne.n	8007c06 <TIM_TI1_SetConfig+0x6a>
 8007c02:	2301      	movs	r3, #1
 8007c04:	e000      	b.n	8007c08 <TIM_TI1_SetConfig+0x6c>
 8007c06:	2300      	movs	r3, #0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d008      	beq.n	8007c1e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	f023 0303 	bic.w	r3, r3, #3
 8007c12:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	617b      	str	r3, [r7, #20]
 8007c1c:	e003      	b.n	8007c26 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	f043 0301 	orr.w	r3, r3, #1
 8007c24:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	011b      	lsls	r3, r3, #4
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	f023 030a 	bic.w	r3, r3, #10
 8007c40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	f003 030a 	and.w	r3, r3, #10
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	621a      	str	r2, [r3, #32]
}
 8007c5a:	bf00      	nop
 8007c5c:	371c      	adds	r7, #28
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	40010000 	.word	0x40010000
 8007c6c:	40000400 	.word	0x40000400
 8007c70:	40000800 	.word	0x40000800
 8007c74:	40000c00 	.word	0x40000c00
 8007c78:	40010400 	.word	0x40010400
 8007c7c:	40014000 	.word	0x40014000
 8007c80:	40001800 	.word	0x40001800

08007c84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6a1b      	ldr	r3, [r3, #32]
 8007c94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6a1b      	ldr	r3, [r3, #32]
 8007c9a:	f023 0201 	bic.w	r2, r3, #1
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	011b      	lsls	r3, r3, #4
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	f023 030a 	bic.w	r3, r3, #10
 8007cc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007cc2:	697a      	ldr	r2, [r7, #20]
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	693a      	ldr	r2, [r7, #16]
 8007cce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	621a      	str	r2, [r3, #32]
}
 8007cd6:	bf00      	nop
 8007cd8:	371c      	adds	r7, #28
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr

08007ce2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b087      	sub	sp, #28
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	60f8      	str	r0, [r7, #12]
 8007cea:	60b9      	str	r1, [r7, #8]
 8007cec:	607a      	str	r2, [r7, #4]
 8007cee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6a1b      	ldr	r3, [r3, #32]
 8007cf4:	f023 0210 	bic.w	r2, r3, #16
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	021b      	lsls	r3, r3, #8
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	031b      	lsls	r3, r3, #12
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	697a      	ldr	r2, [r7, #20]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d34:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	011b      	lsls	r3, r3, #4
 8007d3a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007d3e:	693a      	ldr	r2, [r7, #16]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	693a      	ldr	r2, [r7, #16]
 8007d4e:	621a      	str	r2, [r3, #32]
}
 8007d50:	bf00      	nop
 8007d52:	371c      	adds	r7, #28
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6a1b      	ldr	r3, [r3, #32]
 8007d6c:	f023 0210 	bic.w	r2, r3, #16
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	031b      	lsls	r3, r3, #12
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	011b      	lsls	r3, r3, #4
 8007d9e:	693a      	ldr	r2, [r7, #16]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	697a      	ldr	r2, [r7, #20]
 8007da8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	693a      	ldr	r2, [r7, #16]
 8007dae:	621a      	str	r2, [r3, #32]
}
 8007db0:	bf00      	nop
 8007db2:	371c      	adds	r7, #28
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b087      	sub	sp, #28
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
 8007dc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6a1b      	ldr	r3, [r3, #32]
 8007de0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	f023 0303 	bic.w	r3, r3, #3
 8007de8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007df8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	011b      	lsls	r3, r3, #4
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	697a      	ldr	r2, [r7, #20]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007e0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	021b      	lsls	r3, r3, #8
 8007e12:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	697a      	ldr	r2, [r7, #20]
 8007e20:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	621a      	str	r2, [r3, #32]
}
 8007e28:	bf00      	nop
 8007e2a:	371c      	adds	r7, #28
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b087      	sub	sp, #28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
 8007e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6a1b      	ldr	r3, [r3, #32]
 8007e46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6a1b      	ldr	r3, [r3, #32]
 8007e58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	021b      	lsls	r3, r3, #8
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e72:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	031b      	lsls	r3, r3, #12
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007e86:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	031b      	lsls	r3, r3, #12
 8007e8c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007e90:	693a      	ldr	r2, [r7, #16]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	621a      	str	r2, [r3, #32]
}
 8007ea2:	bf00      	nop
 8007ea4:	371c      	adds	r7, #28
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b087      	sub	sp, #28
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	60f8      	str	r0, [r7, #12]
 8007eb6:	60b9      	str	r1, [r7, #8]
 8007eb8:	607a      	str	r2, [r7, #4]
 8007eba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ec8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	021a      	lsls	r2, r3, #8
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	431a      	orrs	r2, r3
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	697a      	ldr	r2, [r7, #20]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	609a      	str	r2, [r3, #8]
}
 8007ee2:	bf00      	nop
 8007ee4:	371c      	adds	r7, #28
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b087      	sub	sp, #28
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	60f8      	str	r0, [r7, #12]
 8007ef6:	60b9      	str	r1, [r7, #8]
 8007ef8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f003 031f 	and.w	r3, r3, #31
 8007f00:	2201      	movs	r2, #1
 8007f02:	fa02 f303 	lsl.w	r3, r2, r3
 8007f06:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6a1a      	ldr	r2, [r3, #32]
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	43db      	mvns	r3, r3
 8007f10:	401a      	ands	r2, r3
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6a1a      	ldr	r2, [r3, #32]
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	f003 031f 	and.w	r3, r3, #31
 8007f20:	6879      	ldr	r1, [r7, #4]
 8007f22:	fa01 f303 	lsl.w	r3, r1, r3
 8007f26:	431a      	orrs	r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	621a      	str	r2, [r3, #32]
}
 8007f2c:	bf00      	nop
 8007f2e:	371c      	adds	r7, #28
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b085      	sub	sp, #20
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d101      	bne.n	8007f50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	e06d      	b.n	800802c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a30      	ldr	r2, [pc, #192]	; (8008038 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d004      	beq.n	8007f84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a2f      	ldr	r2, [pc, #188]	; (800803c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d108      	bne.n	8007f96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68fa      	ldr	r2, [r7, #12]
 8007fae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a20      	ldr	r2, [pc, #128]	; (8008038 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d022      	beq.n	8008000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fc2:	d01d      	beq.n	8008000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a1d      	ldr	r2, [pc, #116]	; (8008040 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d018      	beq.n	8008000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a1c      	ldr	r2, [pc, #112]	; (8008044 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d013      	beq.n	8008000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a1a      	ldr	r2, [pc, #104]	; (8008048 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d00e      	beq.n	8008000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a15      	ldr	r2, [pc, #84]	; (800803c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d009      	beq.n	8008000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a16      	ldr	r2, [pc, #88]	; (800804c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d004      	beq.n	8008000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a15      	ldr	r2, [pc, #84]	; (8008050 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d10c      	bne.n	800801a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008006:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	4313      	orrs	r3, r2
 8008010:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2201      	movs	r2, #1
 800801e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3714      	adds	r7, #20
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr
 8008038:	40010000 	.word	0x40010000
 800803c:	40010400 	.word	0x40010400
 8008040:	40000400 	.word	0x40000400
 8008044:	40000800 	.word	0x40000800
 8008048:	40000c00 	.word	0x40000c00
 800804c:	40014000 	.word	0x40014000
 8008050:	40001800 	.word	0x40001800

08008054 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d101      	bne.n	80080a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e040      	b.n	8008124 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d106      	bne.n	80080b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7fb f926 	bl	8003304 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2224      	movs	r2, #36	; 0x24
 80080bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f022 0201 	bic.w	r2, r2, #1
 80080cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f8c0 	bl	8008254 <UART_SetConfig>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d101      	bne.n	80080de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e022      	b.n	8008124 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d002      	beq.n	80080ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fb18 	bl	800871c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	685a      	ldr	r2, [r3, #4]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	689a      	ldr	r2, [r3, #8]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800810a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f042 0201 	orr.w	r2, r2, #1
 800811a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 fb9f 	bl	8008860 <UART_CheckIdleState>
 8008122:	4603      	mov	r3, r0
}
 8008124:	4618      	mov	r0, r3
 8008126:	3708      	adds	r7, #8
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b08a      	sub	sp, #40	; 0x28
 8008130:	af02      	add	r7, sp, #8
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	603b      	str	r3, [r7, #0]
 8008138:	4613      	mov	r3, r2
 800813a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008140:	2b20      	cmp	r3, #32
 8008142:	f040 8081 	bne.w	8008248 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d002      	beq.n	8008152 <HAL_UART_Transmit+0x26>
 800814c:	88fb      	ldrh	r3, [r7, #6]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	e079      	b.n	800824a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800815c:	2b01      	cmp	r3, #1
 800815e:	d101      	bne.n	8008164 <HAL_UART_Transmit+0x38>
 8008160:	2302      	movs	r3, #2
 8008162:	e072      	b.n	800824a <HAL_UART_Transmit+0x11e>
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2221      	movs	r2, #33	; 0x21
 8008178:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800817a:	f7fb f99b 	bl	80034b4 <HAL_GetTick>
 800817e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	88fa      	ldrh	r2, [r7, #6]
 8008184:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	88fa      	ldrh	r2, [r7, #6]
 800818c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008198:	d108      	bne.n	80081ac <HAL_UART_Transmit+0x80>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d104      	bne.n	80081ac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80081a2:	2300      	movs	r3, #0
 80081a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	61bb      	str	r3, [r7, #24]
 80081aa:	e003      	b.n	80081b4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081b0:	2300      	movs	r3, #0
 80081b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80081bc:	e02c      	b.n	8008218 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	9300      	str	r3, [sp, #0]
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	2200      	movs	r2, #0
 80081c6:	2180      	movs	r1, #128	; 0x80
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f000 fb92 	bl	80088f2 <UART_WaitOnFlagUntilTimeout>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d001      	beq.n	80081d8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80081d4:	2303      	movs	r3, #3
 80081d6:	e038      	b.n	800824a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d10b      	bne.n	80081f6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	881b      	ldrh	r3, [r3, #0]
 80081e2:	461a      	mov	r2, r3
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081ec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	3302      	adds	r3, #2
 80081f2:	61bb      	str	r3, [r7, #24]
 80081f4:	e007      	b.n	8008206 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	781a      	ldrb	r2, [r3, #0]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	3301      	adds	r3, #1
 8008204:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800820c:	b29b      	uxth	r3, r3
 800820e:	3b01      	subs	r3, #1
 8008210:	b29a      	uxth	r2, r3
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800821e:	b29b      	uxth	r3, r3
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1cc      	bne.n	80081be <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	2200      	movs	r2, #0
 800822c:	2140      	movs	r1, #64	; 0x40
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f000 fb5f 	bl	80088f2 <UART_WaitOnFlagUntilTimeout>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d001      	beq.n	800823e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800823a:	2303      	movs	r3, #3
 800823c:	e005      	b.n	800824a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2220      	movs	r2, #32
 8008242:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008244:	2300      	movs	r3, #0
 8008246:	e000      	b.n	800824a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8008248:	2302      	movs	r3, #2
  }
}
 800824a:	4618      	mov	r0, r3
 800824c:	3720      	adds	r7, #32
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
	...

08008254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b088      	sub	sp, #32
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800825c:	2300      	movs	r3, #0
 800825e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689a      	ldr	r2, [r3, #8]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	431a      	orrs	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	695b      	ldr	r3, [r3, #20]
 800826e:	431a      	orrs	r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	69db      	ldr	r3, [r3, #28]
 8008274:	4313      	orrs	r3, r2
 8008276:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	4ba6      	ldr	r3, [pc, #664]	; (8008518 <UART_SetConfig+0x2c4>)
 8008280:	4013      	ands	r3, r2
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	6812      	ldr	r2, [r2, #0]
 8008286:	6979      	ldr	r1, [r7, #20]
 8008288:	430b      	orrs	r3, r1
 800828a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	68da      	ldr	r2, [r3, #12]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	430a      	orrs	r2, r1
 80082a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	699b      	ldr	r3, [r3, #24]
 80082a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a1b      	ldr	r3, [r3, #32]
 80082ac:	697a      	ldr	r2, [r7, #20]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	697a      	ldr	r2, [r7, #20]
 80082c2:	430a      	orrs	r2, r1
 80082c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a94      	ldr	r2, [pc, #592]	; (800851c <UART_SetConfig+0x2c8>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d120      	bne.n	8008312 <UART_SetConfig+0xbe>
 80082d0:	4b93      	ldr	r3, [pc, #588]	; (8008520 <UART_SetConfig+0x2cc>)
 80082d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082d6:	f003 0303 	and.w	r3, r3, #3
 80082da:	2b03      	cmp	r3, #3
 80082dc:	d816      	bhi.n	800830c <UART_SetConfig+0xb8>
 80082de:	a201      	add	r2, pc, #4	; (adr r2, 80082e4 <UART_SetConfig+0x90>)
 80082e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e4:	080082f5 	.word	0x080082f5
 80082e8:	08008301 	.word	0x08008301
 80082ec:	080082fb 	.word	0x080082fb
 80082f0:	08008307 	.word	0x08008307
 80082f4:	2301      	movs	r3, #1
 80082f6:	77fb      	strb	r3, [r7, #31]
 80082f8:	e150      	b.n	800859c <UART_SetConfig+0x348>
 80082fa:	2302      	movs	r3, #2
 80082fc:	77fb      	strb	r3, [r7, #31]
 80082fe:	e14d      	b.n	800859c <UART_SetConfig+0x348>
 8008300:	2304      	movs	r3, #4
 8008302:	77fb      	strb	r3, [r7, #31]
 8008304:	e14a      	b.n	800859c <UART_SetConfig+0x348>
 8008306:	2308      	movs	r3, #8
 8008308:	77fb      	strb	r3, [r7, #31]
 800830a:	e147      	b.n	800859c <UART_SetConfig+0x348>
 800830c:	2310      	movs	r3, #16
 800830e:	77fb      	strb	r3, [r7, #31]
 8008310:	e144      	b.n	800859c <UART_SetConfig+0x348>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a83      	ldr	r2, [pc, #524]	; (8008524 <UART_SetConfig+0x2d0>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d132      	bne.n	8008382 <UART_SetConfig+0x12e>
 800831c:	4b80      	ldr	r3, [pc, #512]	; (8008520 <UART_SetConfig+0x2cc>)
 800831e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008322:	f003 030c 	and.w	r3, r3, #12
 8008326:	2b0c      	cmp	r3, #12
 8008328:	d828      	bhi.n	800837c <UART_SetConfig+0x128>
 800832a:	a201      	add	r2, pc, #4	; (adr r2, 8008330 <UART_SetConfig+0xdc>)
 800832c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008330:	08008365 	.word	0x08008365
 8008334:	0800837d 	.word	0x0800837d
 8008338:	0800837d 	.word	0x0800837d
 800833c:	0800837d 	.word	0x0800837d
 8008340:	08008371 	.word	0x08008371
 8008344:	0800837d 	.word	0x0800837d
 8008348:	0800837d 	.word	0x0800837d
 800834c:	0800837d 	.word	0x0800837d
 8008350:	0800836b 	.word	0x0800836b
 8008354:	0800837d 	.word	0x0800837d
 8008358:	0800837d 	.word	0x0800837d
 800835c:	0800837d 	.word	0x0800837d
 8008360:	08008377 	.word	0x08008377
 8008364:	2300      	movs	r3, #0
 8008366:	77fb      	strb	r3, [r7, #31]
 8008368:	e118      	b.n	800859c <UART_SetConfig+0x348>
 800836a:	2302      	movs	r3, #2
 800836c:	77fb      	strb	r3, [r7, #31]
 800836e:	e115      	b.n	800859c <UART_SetConfig+0x348>
 8008370:	2304      	movs	r3, #4
 8008372:	77fb      	strb	r3, [r7, #31]
 8008374:	e112      	b.n	800859c <UART_SetConfig+0x348>
 8008376:	2308      	movs	r3, #8
 8008378:	77fb      	strb	r3, [r7, #31]
 800837a:	e10f      	b.n	800859c <UART_SetConfig+0x348>
 800837c:	2310      	movs	r3, #16
 800837e:	77fb      	strb	r3, [r7, #31]
 8008380:	e10c      	b.n	800859c <UART_SetConfig+0x348>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a68      	ldr	r2, [pc, #416]	; (8008528 <UART_SetConfig+0x2d4>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d120      	bne.n	80083ce <UART_SetConfig+0x17a>
 800838c:	4b64      	ldr	r3, [pc, #400]	; (8008520 <UART_SetConfig+0x2cc>)
 800838e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008392:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008396:	2b30      	cmp	r3, #48	; 0x30
 8008398:	d013      	beq.n	80083c2 <UART_SetConfig+0x16e>
 800839a:	2b30      	cmp	r3, #48	; 0x30
 800839c:	d814      	bhi.n	80083c8 <UART_SetConfig+0x174>
 800839e:	2b20      	cmp	r3, #32
 80083a0:	d009      	beq.n	80083b6 <UART_SetConfig+0x162>
 80083a2:	2b20      	cmp	r3, #32
 80083a4:	d810      	bhi.n	80083c8 <UART_SetConfig+0x174>
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d002      	beq.n	80083b0 <UART_SetConfig+0x15c>
 80083aa:	2b10      	cmp	r3, #16
 80083ac:	d006      	beq.n	80083bc <UART_SetConfig+0x168>
 80083ae:	e00b      	b.n	80083c8 <UART_SetConfig+0x174>
 80083b0:	2300      	movs	r3, #0
 80083b2:	77fb      	strb	r3, [r7, #31]
 80083b4:	e0f2      	b.n	800859c <UART_SetConfig+0x348>
 80083b6:	2302      	movs	r3, #2
 80083b8:	77fb      	strb	r3, [r7, #31]
 80083ba:	e0ef      	b.n	800859c <UART_SetConfig+0x348>
 80083bc:	2304      	movs	r3, #4
 80083be:	77fb      	strb	r3, [r7, #31]
 80083c0:	e0ec      	b.n	800859c <UART_SetConfig+0x348>
 80083c2:	2308      	movs	r3, #8
 80083c4:	77fb      	strb	r3, [r7, #31]
 80083c6:	e0e9      	b.n	800859c <UART_SetConfig+0x348>
 80083c8:	2310      	movs	r3, #16
 80083ca:	77fb      	strb	r3, [r7, #31]
 80083cc:	e0e6      	b.n	800859c <UART_SetConfig+0x348>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a56      	ldr	r2, [pc, #344]	; (800852c <UART_SetConfig+0x2d8>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d120      	bne.n	800841a <UART_SetConfig+0x1c6>
 80083d8:	4b51      	ldr	r3, [pc, #324]	; (8008520 <UART_SetConfig+0x2cc>)
 80083da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80083e2:	2bc0      	cmp	r3, #192	; 0xc0
 80083e4:	d013      	beq.n	800840e <UART_SetConfig+0x1ba>
 80083e6:	2bc0      	cmp	r3, #192	; 0xc0
 80083e8:	d814      	bhi.n	8008414 <UART_SetConfig+0x1c0>
 80083ea:	2b80      	cmp	r3, #128	; 0x80
 80083ec:	d009      	beq.n	8008402 <UART_SetConfig+0x1ae>
 80083ee:	2b80      	cmp	r3, #128	; 0x80
 80083f0:	d810      	bhi.n	8008414 <UART_SetConfig+0x1c0>
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d002      	beq.n	80083fc <UART_SetConfig+0x1a8>
 80083f6:	2b40      	cmp	r3, #64	; 0x40
 80083f8:	d006      	beq.n	8008408 <UART_SetConfig+0x1b4>
 80083fa:	e00b      	b.n	8008414 <UART_SetConfig+0x1c0>
 80083fc:	2300      	movs	r3, #0
 80083fe:	77fb      	strb	r3, [r7, #31]
 8008400:	e0cc      	b.n	800859c <UART_SetConfig+0x348>
 8008402:	2302      	movs	r3, #2
 8008404:	77fb      	strb	r3, [r7, #31]
 8008406:	e0c9      	b.n	800859c <UART_SetConfig+0x348>
 8008408:	2304      	movs	r3, #4
 800840a:	77fb      	strb	r3, [r7, #31]
 800840c:	e0c6      	b.n	800859c <UART_SetConfig+0x348>
 800840e:	2308      	movs	r3, #8
 8008410:	77fb      	strb	r3, [r7, #31]
 8008412:	e0c3      	b.n	800859c <UART_SetConfig+0x348>
 8008414:	2310      	movs	r3, #16
 8008416:	77fb      	strb	r3, [r7, #31]
 8008418:	e0c0      	b.n	800859c <UART_SetConfig+0x348>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a44      	ldr	r2, [pc, #272]	; (8008530 <UART_SetConfig+0x2dc>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d125      	bne.n	8008470 <UART_SetConfig+0x21c>
 8008424:	4b3e      	ldr	r3, [pc, #248]	; (8008520 <UART_SetConfig+0x2cc>)
 8008426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800842a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800842e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008432:	d017      	beq.n	8008464 <UART_SetConfig+0x210>
 8008434:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008438:	d817      	bhi.n	800846a <UART_SetConfig+0x216>
 800843a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800843e:	d00b      	beq.n	8008458 <UART_SetConfig+0x204>
 8008440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008444:	d811      	bhi.n	800846a <UART_SetConfig+0x216>
 8008446:	2b00      	cmp	r3, #0
 8008448:	d003      	beq.n	8008452 <UART_SetConfig+0x1fe>
 800844a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800844e:	d006      	beq.n	800845e <UART_SetConfig+0x20a>
 8008450:	e00b      	b.n	800846a <UART_SetConfig+0x216>
 8008452:	2300      	movs	r3, #0
 8008454:	77fb      	strb	r3, [r7, #31]
 8008456:	e0a1      	b.n	800859c <UART_SetConfig+0x348>
 8008458:	2302      	movs	r3, #2
 800845a:	77fb      	strb	r3, [r7, #31]
 800845c:	e09e      	b.n	800859c <UART_SetConfig+0x348>
 800845e:	2304      	movs	r3, #4
 8008460:	77fb      	strb	r3, [r7, #31]
 8008462:	e09b      	b.n	800859c <UART_SetConfig+0x348>
 8008464:	2308      	movs	r3, #8
 8008466:	77fb      	strb	r3, [r7, #31]
 8008468:	e098      	b.n	800859c <UART_SetConfig+0x348>
 800846a:	2310      	movs	r3, #16
 800846c:	77fb      	strb	r3, [r7, #31]
 800846e:	e095      	b.n	800859c <UART_SetConfig+0x348>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a2f      	ldr	r2, [pc, #188]	; (8008534 <UART_SetConfig+0x2e0>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d125      	bne.n	80084c6 <UART_SetConfig+0x272>
 800847a:	4b29      	ldr	r3, [pc, #164]	; (8008520 <UART_SetConfig+0x2cc>)
 800847c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008480:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008484:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008488:	d017      	beq.n	80084ba <UART_SetConfig+0x266>
 800848a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800848e:	d817      	bhi.n	80084c0 <UART_SetConfig+0x26c>
 8008490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008494:	d00b      	beq.n	80084ae <UART_SetConfig+0x25a>
 8008496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800849a:	d811      	bhi.n	80084c0 <UART_SetConfig+0x26c>
 800849c:	2b00      	cmp	r3, #0
 800849e:	d003      	beq.n	80084a8 <UART_SetConfig+0x254>
 80084a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084a4:	d006      	beq.n	80084b4 <UART_SetConfig+0x260>
 80084a6:	e00b      	b.n	80084c0 <UART_SetConfig+0x26c>
 80084a8:	2301      	movs	r3, #1
 80084aa:	77fb      	strb	r3, [r7, #31]
 80084ac:	e076      	b.n	800859c <UART_SetConfig+0x348>
 80084ae:	2302      	movs	r3, #2
 80084b0:	77fb      	strb	r3, [r7, #31]
 80084b2:	e073      	b.n	800859c <UART_SetConfig+0x348>
 80084b4:	2304      	movs	r3, #4
 80084b6:	77fb      	strb	r3, [r7, #31]
 80084b8:	e070      	b.n	800859c <UART_SetConfig+0x348>
 80084ba:	2308      	movs	r3, #8
 80084bc:	77fb      	strb	r3, [r7, #31]
 80084be:	e06d      	b.n	800859c <UART_SetConfig+0x348>
 80084c0:	2310      	movs	r3, #16
 80084c2:	77fb      	strb	r3, [r7, #31]
 80084c4:	e06a      	b.n	800859c <UART_SetConfig+0x348>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a1b      	ldr	r2, [pc, #108]	; (8008538 <UART_SetConfig+0x2e4>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d138      	bne.n	8008542 <UART_SetConfig+0x2ee>
 80084d0:	4b13      	ldr	r3, [pc, #76]	; (8008520 <UART_SetConfig+0x2cc>)
 80084d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084d6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80084da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80084de:	d017      	beq.n	8008510 <UART_SetConfig+0x2bc>
 80084e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80084e4:	d82a      	bhi.n	800853c <UART_SetConfig+0x2e8>
 80084e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084ea:	d00b      	beq.n	8008504 <UART_SetConfig+0x2b0>
 80084ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084f0:	d824      	bhi.n	800853c <UART_SetConfig+0x2e8>
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d003      	beq.n	80084fe <UART_SetConfig+0x2aa>
 80084f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084fa:	d006      	beq.n	800850a <UART_SetConfig+0x2b6>
 80084fc:	e01e      	b.n	800853c <UART_SetConfig+0x2e8>
 80084fe:	2300      	movs	r3, #0
 8008500:	77fb      	strb	r3, [r7, #31]
 8008502:	e04b      	b.n	800859c <UART_SetConfig+0x348>
 8008504:	2302      	movs	r3, #2
 8008506:	77fb      	strb	r3, [r7, #31]
 8008508:	e048      	b.n	800859c <UART_SetConfig+0x348>
 800850a:	2304      	movs	r3, #4
 800850c:	77fb      	strb	r3, [r7, #31]
 800850e:	e045      	b.n	800859c <UART_SetConfig+0x348>
 8008510:	2308      	movs	r3, #8
 8008512:	77fb      	strb	r3, [r7, #31]
 8008514:	e042      	b.n	800859c <UART_SetConfig+0x348>
 8008516:	bf00      	nop
 8008518:	efff69f3 	.word	0xefff69f3
 800851c:	40011000 	.word	0x40011000
 8008520:	40023800 	.word	0x40023800
 8008524:	40004400 	.word	0x40004400
 8008528:	40004800 	.word	0x40004800
 800852c:	40004c00 	.word	0x40004c00
 8008530:	40005000 	.word	0x40005000
 8008534:	40011400 	.word	0x40011400
 8008538:	40007800 	.word	0x40007800
 800853c:	2310      	movs	r3, #16
 800853e:	77fb      	strb	r3, [r7, #31]
 8008540:	e02c      	b.n	800859c <UART_SetConfig+0x348>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a72      	ldr	r2, [pc, #456]	; (8008710 <UART_SetConfig+0x4bc>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d125      	bne.n	8008598 <UART_SetConfig+0x344>
 800854c:	4b71      	ldr	r3, [pc, #452]	; (8008714 <UART_SetConfig+0x4c0>)
 800854e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008552:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008556:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800855a:	d017      	beq.n	800858c <UART_SetConfig+0x338>
 800855c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008560:	d817      	bhi.n	8008592 <UART_SetConfig+0x33e>
 8008562:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008566:	d00b      	beq.n	8008580 <UART_SetConfig+0x32c>
 8008568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800856c:	d811      	bhi.n	8008592 <UART_SetConfig+0x33e>
 800856e:	2b00      	cmp	r3, #0
 8008570:	d003      	beq.n	800857a <UART_SetConfig+0x326>
 8008572:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008576:	d006      	beq.n	8008586 <UART_SetConfig+0x332>
 8008578:	e00b      	b.n	8008592 <UART_SetConfig+0x33e>
 800857a:	2300      	movs	r3, #0
 800857c:	77fb      	strb	r3, [r7, #31]
 800857e:	e00d      	b.n	800859c <UART_SetConfig+0x348>
 8008580:	2302      	movs	r3, #2
 8008582:	77fb      	strb	r3, [r7, #31]
 8008584:	e00a      	b.n	800859c <UART_SetConfig+0x348>
 8008586:	2304      	movs	r3, #4
 8008588:	77fb      	strb	r3, [r7, #31]
 800858a:	e007      	b.n	800859c <UART_SetConfig+0x348>
 800858c:	2308      	movs	r3, #8
 800858e:	77fb      	strb	r3, [r7, #31]
 8008590:	e004      	b.n	800859c <UART_SetConfig+0x348>
 8008592:	2310      	movs	r3, #16
 8008594:	77fb      	strb	r3, [r7, #31]
 8008596:	e001      	b.n	800859c <UART_SetConfig+0x348>
 8008598:	2310      	movs	r3, #16
 800859a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	69db      	ldr	r3, [r3, #28]
 80085a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085a4:	d15b      	bne.n	800865e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80085a6:	7ffb      	ldrb	r3, [r7, #31]
 80085a8:	2b08      	cmp	r3, #8
 80085aa:	d828      	bhi.n	80085fe <UART_SetConfig+0x3aa>
 80085ac:	a201      	add	r2, pc, #4	; (adr r2, 80085b4 <UART_SetConfig+0x360>)
 80085ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b2:	bf00      	nop
 80085b4:	080085d9 	.word	0x080085d9
 80085b8:	080085e1 	.word	0x080085e1
 80085bc:	080085e9 	.word	0x080085e9
 80085c0:	080085ff 	.word	0x080085ff
 80085c4:	080085ef 	.word	0x080085ef
 80085c8:	080085ff 	.word	0x080085ff
 80085cc:	080085ff 	.word	0x080085ff
 80085d0:	080085ff 	.word	0x080085ff
 80085d4:	080085f7 	.word	0x080085f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085d8:	f7fc fd52 	bl	8005080 <HAL_RCC_GetPCLK1Freq>
 80085dc:	61b8      	str	r0, [r7, #24]
        break;
 80085de:	e013      	b.n	8008608 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085e0:	f7fc fd62 	bl	80050a8 <HAL_RCC_GetPCLK2Freq>
 80085e4:	61b8      	str	r0, [r7, #24]
        break;
 80085e6:	e00f      	b.n	8008608 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085e8:	4b4b      	ldr	r3, [pc, #300]	; (8008718 <UART_SetConfig+0x4c4>)
 80085ea:	61bb      	str	r3, [r7, #24]
        break;
 80085ec:	e00c      	b.n	8008608 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085ee:	f7fc fc75 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 80085f2:	61b8      	str	r0, [r7, #24]
        break;
 80085f4:	e008      	b.n	8008608 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085fa:	61bb      	str	r3, [r7, #24]
        break;
 80085fc:	e004      	b.n	8008608 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80085fe:	2300      	movs	r3, #0
 8008600:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	77bb      	strb	r3, [r7, #30]
        break;
 8008606:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d074      	beq.n	80086f8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	005a      	lsls	r2, r3, #1
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	085b      	lsrs	r3, r3, #1
 8008618:	441a      	add	r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008622:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	2b0f      	cmp	r3, #15
 8008628:	d916      	bls.n	8008658 <UART_SetConfig+0x404>
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008630:	d212      	bcs.n	8008658 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	b29b      	uxth	r3, r3
 8008636:	f023 030f 	bic.w	r3, r3, #15
 800863a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	085b      	lsrs	r3, r3, #1
 8008640:	b29b      	uxth	r3, r3
 8008642:	f003 0307 	and.w	r3, r3, #7
 8008646:	b29a      	uxth	r2, r3
 8008648:	89fb      	ldrh	r3, [r7, #14]
 800864a:	4313      	orrs	r3, r2
 800864c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	89fa      	ldrh	r2, [r7, #14]
 8008654:	60da      	str	r2, [r3, #12]
 8008656:	e04f      	b.n	80086f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	77bb      	strb	r3, [r7, #30]
 800865c:	e04c      	b.n	80086f8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800865e:	7ffb      	ldrb	r3, [r7, #31]
 8008660:	2b08      	cmp	r3, #8
 8008662:	d828      	bhi.n	80086b6 <UART_SetConfig+0x462>
 8008664:	a201      	add	r2, pc, #4	; (adr r2, 800866c <UART_SetConfig+0x418>)
 8008666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866a:	bf00      	nop
 800866c:	08008691 	.word	0x08008691
 8008670:	08008699 	.word	0x08008699
 8008674:	080086a1 	.word	0x080086a1
 8008678:	080086b7 	.word	0x080086b7
 800867c:	080086a7 	.word	0x080086a7
 8008680:	080086b7 	.word	0x080086b7
 8008684:	080086b7 	.word	0x080086b7
 8008688:	080086b7 	.word	0x080086b7
 800868c:	080086af 	.word	0x080086af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008690:	f7fc fcf6 	bl	8005080 <HAL_RCC_GetPCLK1Freq>
 8008694:	61b8      	str	r0, [r7, #24]
        break;
 8008696:	e013      	b.n	80086c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008698:	f7fc fd06 	bl	80050a8 <HAL_RCC_GetPCLK2Freq>
 800869c:	61b8      	str	r0, [r7, #24]
        break;
 800869e:	e00f      	b.n	80086c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086a0:	4b1d      	ldr	r3, [pc, #116]	; (8008718 <UART_SetConfig+0x4c4>)
 80086a2:	61bb      	str	r3, [r7, #24]
        break;
 80086a4:	e00c      	b.n	80086c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086a6:	f7fc fc19 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 80086aa:	61b8      	str	r0, [r7, #24]
        break;
 80086ac:	e008      	b.n	80086c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086b2:	61bb      	str	r3, [r7, #24]
        break;
 80086b4:	e004      	b.n	80086c0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80086b6:	2300      	movs	r3, #0
 80086b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	77bb      	strb	r3, [r7, #30]
        break;
 80086be:	bf00      	nop
    }

    if (pclk != 0U)
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d018      	beq.n	80086f8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	085a      	lsrs	r2, r3, #1
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	441a      	add	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80086d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	2b0f      	cmp	r3, #15
 80086de:	d909      	bls.n	80086f4 <UART_SetConfig+0x4a0>
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086e6:	d205      	bcs.n	80086f4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	60da      	str	r2, [r3, #12]
 80086f2:	e001      	b.n	80086f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008704:	7fbb      	ldrb	r3, [r7, #30]
}
 8008706:	4618      	mov	r0, r3
 8008708:	3720      	adds	r7, #32
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	40007c00 	.word	0x40007c00
 8008714:	40023800 	.word	0x40023800
 8008718:	00f42400 	.word	0x00f42400

0800871c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008728:	f003 0301 	and.w	r3, r3, #1
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00a      	beq.n	8008746 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	430a      	orrs	r2, r1
 8008744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874a:	f003 0302 	and.w	r3, r3, #2
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00a      	beq.n	8008768 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	430a      	orrs	r2, r1
 8008766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876c:	f003 0304 	and.w	r3, r3, #4
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00a      	beq.n	800878a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	430a      	orrs	r2, r1
 8008788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878e:	f003 0308 	and.w	r3, r3, #8
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00a      	beq.n	80087ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	430a      	orrs	r2, r1
 80087aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b0:	f003 0310 	and.w	r3, r3, #16
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d00a      	beq.n	80087ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	430a      	orrs	r2, r1
 80087cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d2:	f003 0320 	and.w	r3, r3, #32
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00a      	beq.n	80087f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	430a      	orrs	r2, r1
 80087ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d01a      	beq.n	8008832 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	430a      	orrs	r2, r1
 8008810:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008816:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800881a:	d10a      	bne.n	8008832 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	430a      	orrs	r2, r1
 8008830:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00a      	beq.n	8008854 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	430a      	orrs	r2, r1
 8008852:	605a      	str	r2, [r3, #4]
  }
}
 8008854:	bf00      	nop
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b086      	sub	sp, #24
 8008864:	af02      	add	r7, sp, #8
 8008866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008870:	f7fa fe20 	bl	80034b4 <HAL_GetTick>
 8008874:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 0308 	and.w	r3, r3, #8
 8008880:	2b08      	cmp	r3, #8
 8008882:	d10e      	bne.n	80088a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008884:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008888:	9300      	str	r3, [sp, #0]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2200      	movs	r2, #0
 800888e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f82d 	bl	80088f2 <UART_WaitOnFlagUntilTimeout>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800889e:	2303      	movs	r3, #3
 80088a0:	e023      	b.n	80088ea <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 0304 	and.w	r3, r3, #4
 80088ac:	2b04      	cmp	r3, #4
 80088ae:	d10e      	bne.n	80088ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088b4:	9300      	str	r3, [sp, #0]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f817 	bl	80088f2 <UART_WaitOnFlagUntilTimeout>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d001      	beq.n	80088ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e00d      	b.n	80088ea <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2220      	movs	r2, #32
 80088d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2220      	movs	r2, #32
 80088d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b09c      	sub	sp, #112	; 0x70
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	60f8      	str	r0, [r7, #12]
 80088fa:	60b9      	str	r1, [r7, #8]
 80088fc:	603b      	str	r3, [r7, #0]
 80088fe:	4613      	mov	r3, r2
 8008900:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008902:	e0a5      	b.n	8008a50 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800890a:	f000 80a1 	beq.w	8008a50 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800890e:	f7fa fdd1 	bl	80034b4 <HAL_GetTick>
 8008912:	4602      	mov	r2, r0
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800891a:	429a      	cmp	r2, r3
 800891c:	d302      	bcc.n	8008924 <UART_WaitOnFlagUntilTimeout+0x32>
 800891e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008920:	2b00      	cmp	r3, #0
 8008922:	d13e      	bne.n	80089a2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800892c:	e853 3f00 	ldrex	r3, [r3]
 8008930:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008934:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008938:	667b      	str	r3, [r7, #100]	; 0x64
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	461a      	mov	r2, r3
 8008940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008942:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008944:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008946:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008948:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800894a:	e841 2300 	strex	r3, r2, [r1]
 800894e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1e6      	bne.n	8008924 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	3308      	adds	r3, #8
 800895c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008960:	e853 3f00 	ldrex	r3, [r3]
 8008964:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008968:	f023 0301 	bic.w	r3, r3, #1
 800896c:	663b      	str	r3, [r7, #96]	; 0x60
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	3308      	adds	r3, #8
 8008974:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008976:	64ba      	str	r2, [r7, #72]	; 0x48
 8008978:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800897c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800897e:	e841 2300 	strex	r3, r2, [r1]
 8008982:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1e5      	bne.n	8008956 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2220      	movs	r2, #32
 800898e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2220      	movs	r2, #32
 8008994:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800899e:	2303      	movs	r3, #3
 80089a0:	e067      	b.n	8008a72 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f003 0304 	and.w	r3, r3, #4
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d04f      	beq.n	8008a50 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	69db      	ldr	r3, [r3, #28]
 80089b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089be:	d147      	bne.n	8008a50 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d2:	e853 3f00 	ldrex	r3, [r3]
 80089d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80089de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	461a      	mov	r2, r3
 80089e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089e8:	637b      	str	r3, [r7, #52]	; 0x34
 80089ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80089ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089f0:	e841 2300 	strex	r3, r2, [r1]
 80089f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80089f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1e6      	bne.n	80089ca <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	3308      	adds	r3, #8
 8008a02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	e853 3f00 	ldrex	r3, [r3]
 8008a0a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	f023 0301 	bic.w	r3, r3, #1
 8008a12:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	3308      	adds	r3, #8
 8008a1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008a1c:	623a      	str	r2, [r7, #32]
 8008a1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a20:	69f9      	ldr	r1, [r7, #28]
 8008a22:	6a3a      	ldr	r2, [r7, #32]
 8008a24:	e841 2300 	strex	r3, r2, [r1]
 8008a28:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1e5      	bne.n	80089fc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2220      	movs	r2, #32
 8008a34:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2220      	movs	r2, #32
 8008a3a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2220      	movs	r2, #32
 8008a40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	e010      	b.n	8008a72 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	69da      	ldr	r2, [r3, #28]
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	4013      	ands	r3, r2
 8008a5a:	68ba      	ldr	r2, [r7, #8]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	bf0c      	ite	eq
 8008a60:	2301      	moveq	r3, #1
 8008a62:	2300      	movne	r3, #0
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	461a      	mov	r2, r3
 8008a68:	79fb      	ldrb	r3, [r7, #7]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	f43f af4a 	beq.w	8008904 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3770      	adds	r7, #112	; 0x70
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
	...

08008a7c <__libc_init_array>:
 8008a7c:	b570      	push	{r4, r5, r6, lr}
 8008a7e:	4d0d      	ldr	r5, [pc, #52]	; (8008ab4 <__libc_init_array+0x38>)
 8008a80:	4c0d      	ldr	r4, [pc, #52]	; (8008ab8 <__libc_init_array+0x3c>)
 8008a82:	1b64      	subs	r4, r4, r5
 8008a84:	10a4      	asrs	r4, r4, #2
 8008a86:	2600      	movs	r6, #0
 8008a88:	42a6      	cmp	r6, r4
 8008a8a:	d109      	bne.n	8008aa0 <__libc_init_array+0x24>
 8008a8c:	4d0b      	ldr	r5, [pc, #44]	; (8008abc <__libc_init_array+0x40>)
 8008a8e:	4c0c      	ldr	r4, [pc, #48]	; (8008ac0 <__libc_init_array+0x44>)
 8008a90:	f000 f864 	bl	8008b5c <_init>
 8008a94:	1b64      	subs	r4, r4, r5
 8008a96:	10a4      	asrs	r4, r4, #2
 8008a98:	2600      	movs	r6, #0
 8008a9a:	42a6      	cmp	r6, r4
 8008a9c:	d105      	bne.n	8008aaa <__libc_init_array+0x2e>
 8008a9e:	bd70      	pop	{r4, r5, r6, pc}
 8008aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aa4:	4798      	blx	r3
 8008aa6:	3601      	adds	r6, #1
 8008aa8:	e7ee      	b.n	8008a88 <__libc_init_array+0xc>
 8008aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aae:	4798      	blx	r3
 8008ab0:	3601      	adds	r6, #1
 8008ab2:	e7f2      	b.n	8008a9a <__libc_init_array+0x1e>
 8008ab4:	08009358 	.word	0x08009358
 8008ab8:	08009358 	.word	0x08009358
 8008abc:	08009358 	.word	0x08009358
 8008ac0:	0800935c 	.word	0x0800935c

08008ac4 <memset>:
 8008ac4:	4402      	add	r2, r0
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d100      	bne.n	8008ace <memset+0xa>
 8008acc:	4770      	bx	lr
 8008ace:	f803 1b01 	strb.w	r1, [r3], #1
 8008ad2:	e7f9      	b.n	8008ac8 <memset+0x4>

08008ad4 <__utoa>:
 8008ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ad6:	4c1f      	ldr	r4, [pc, #124]	; (8008b54 <__utoa+0x80>)
 8008ad8:	b08b      	sub	sp, #44	; 0x2c
 8008ada:	4605      	mov	r5, r0
 8008adc:	460b      	mov	r3, r1
 8008ade:	466e      	mov	r6, sp
 8008ae0:	f104 0c20 	add.w	ip, r4, #32
 8008ae4:	6820      	ldr	r0, [r4, #0]
 8008ae6:	6861      	ldr	r1, [r4, #4]
 8008ae8:	4637      	mov	r7, r6
 8008aea:	c703      	stmia	r7!, {r0, r1}
 8008aec:	3408      	adds	r4, #8
 8008aee:	4564      	cmp	r4, ip
 8008af0:	463e      	mov	r6, r7
 8008af2:	d1f7      	bne.n	8008ae4 <__utoa+0x10>
 8008af4:	7921      	ldrb	r1, [r4, #4]
 8008af6:	7139      	strb	r1, [r7, #4]
 8008af8:	1e91      	subs	r1, r2, #2
 8008afa:	6820      	ldr	r0, [r4, #0]
 8008afc:	6038      	str	r0, [r7, #0]
 8008afe:	2922      	cmp	r1, #34	; 0x22
 8008b00:	f04f 0100 	mov.w	r1, #0
 8008b04:	d904      	bls.n	8008b10 <__utoa+0x3c>
 8008b06:	7019      	strb	r1, [r3, #0]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	b00b      	add	sp, #44	; 0x2c
 8008b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b10:	1e58      	subs	r0, r3, #1
 8008b12:	4684      	mov	ip, r0
 8008b14:	fbb5 f7f2 	udiv	r7, r5, r2
 8008b18:	fb02 5617 	mls	r6, r2, r7, r5
 8008b1c:	3628      	adds	r6, #40	; 0x28
 8008b1e:	446e      	add	r6, sp
 8008b20:	460c      	mov	r4, r1
 8008b22:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008b26:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8008b2a:	462e      	mov	r6, r5
 8008b2c:	42b2      	cmp	r2, r6
 8008b2e:	f101 0101 	add.w	r1, r1, #1
 8008b32:	463d      	mov	r5, r7
 8008b34:	d9ee      	bls.n	8008b14 <__utoa+0x40>
 8008b36:	2200      	movs	r2, #0
 8008b38:	545a      	strb	r2, [r3, r1]
 8008b3a:	1919      	adds	r1, r3, r4
 8008b3c:	1aa5      	subs	r5, r4, r2
 8008b3e:	42aa      	cmp	r2, r5
 8008b40:	dae3      	bge.n	8008b0a <__utoa+0x36>
 8008b42:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008b46:	780e      	ldrb	r6, [r1, #0]
 8008b48:	7006      	strb	r6, [r0, #0]
 8008b4a:	3201      	adds	r2, #1
 8008b4c:	f801 5901 	strb.w	r5, [r1], #-1
 8008b50:	e7f4      	b.n	8008b3c <__utoa+0x68>
 8008b52:	bf00      	nop
 8008b54:	08009328 	.word	0x08009328

08008b58 <utoa>:
 8008b58:	f7ff bfbc 	b.w	8008ad4 <__utoa>

08008b5c <_init>:
 8008b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5e:	bf00      	nop
 8008b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b62:	bc08      	pop	{r3}
 8008b64:	469e      	mov	lr, r3
 8008b66:	4770      	bx	lr

08008b68 <_fini>:
 8008b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6a:	bf00      	nop
 8008b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b6e:	bc08      	pop	{r3}
 8008b70:	469e      	mov	lr, r3
 8008b72:	4770      	bx	lr
