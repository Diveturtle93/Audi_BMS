
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000713c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  08007334  08007334  00017334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a5c  08007a5c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007a5c  08007a5c  00017a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a64  08007a64  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a64  08007a64  00017a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a68  08007a68  00017a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007a6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  2000000c  08007a78  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08007a78  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000194ca  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038ee  00000000  00000000  00039504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  0003cdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001190  00000000  00000000  0003e120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c64a  00000000  00000000  0003f2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a5e  00000000  00000000  0006b8fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001081e3  00000000  00000000  00085358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018d53b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e58  00000000  00000000  0018d590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800731c 	.word	0x0800731c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800731c 	.word	0x0800731c

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
	// Sende String mit Laenge "Size", "Size" muss bekannt sein
	HAL_UART_Transmit(&huart2, (uint8_t*) str, size, 1000);
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	b29a      	uxth	r2, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <uartTransmit+0x24>)
 8000556:	f006 fa13 	bl	8006980 <HAL_UART_Transmit>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	2000026c 	.word	0x2000026c

08000568 <uartTransmitString>:
//----------------------------------------------------------------------

// Uart2 Transmit String Funktion
//----------------------------------------------------------------------
void uartTransmitString(const char *str)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	// So lange *text != '\0', also ungleich dem "String-Endezeichen(Terminator)"
	while(*str)																// Starte Pointerschleife
 8000570:	e009      	b.n	8000586 <uartTransmitString+0x1e>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*) str, 1, 1000);				// Sende Zeichen
 8000572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000576:	2201      	movs	r2, #1
 8000578:	6879      	ldr	r1, [r7, #4]
 800057a:	4807      	ldr	r0, [pc, #28]	; (8000598 <uartTransmitString+0x30>)
 800057c:	f006 fa00 	bl	8006980 <HAL_UART_Transmit>
		str++;																// Pointer hochzaehlen
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	3301      	adds	r3, #1
 8000584:	607b      	str	r3, [r7, #4]
	while(*str)																// Starte Pointerschleife
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d1f1      	bne.n	8000572 <uartTransmitString+0xa>
	}
}
 800058e:	bf00      	nop
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	2000026c 	.word	0x2000026c

0800059c <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
	char str[11];

	// Zahl umrechnen
	utoa(number, str, base);												// Zahl umrechnen anhand der Basis "base"
 80005a6:	683a      	ldr	r2, [r7, #0]
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	4619      	mov	r1, r3
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f006 feb2 	bl	8007318 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 1000);			// Sende Zahlen
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff fe3d 	bl	8000238 <strlen>
 80005be:	4603      	mov	r3, r0
 80005c0:	b29a      	uxth	r2, r3
 80005c2:	f107 010c 	add.w	r1, r7, #12
 80005c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ca:	4803      	ldr	r0, [pc, #12]	; (80005d8 <uartTransmitNumber+0x3c>)
 80005cc:	f006 f9d8 	bl	8006980 <HAL_UART_Transmit>
}
 80005d0:	bf00      	nop
 80005d2:	3718      	adds	r7, #24
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	2000026c 	.word	0x2000026c

080005dc <wakeup_ltc6811>:
//----------------------------------------------------------------------

// Wakeup LTC6811 idle
//----------------------------------------------------------------------
void wakeup_ltc6811(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
	// Debug Nachricht
#ifdef DEBUG_ISOSPI
	uartTransmitString("Chip wird geweckt.\n");
 80005e2:	4810      	ldr	r0, [pc, #64]	; (8000624 <wakeup_ltc6811+0x48>)
 80005e4:	f7ff ffc0 	bl	8000568 <uartTransmitString>
#endif

	for(uint8_t i = 0; i < LTC6811_DEVICES; i++)							// Wiederholen fuer Anzahl Slaves
 80005e8:	2300      	movs	r3, #0
 80005ea:	71fb      	strb	r3, [r7, #7]
 80005ec:	e011      	b.n	8000612 <wakeup_ltc6811+0x36>
	{
		// ISOCS einschalten
		ISOCS_ENABLE();														// Chip-Select einschalten
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005f4:	480c      	ldr	r0, [pc, #48]	; (8000628 <wakeup_ltc6811+0x4c>)
 80005f6:	f003 f8f1 	bl	80037dc <HAL_GPIO_WritePin>

		HAL_Delay(2);														// isoSPI braucht Zeit bis ready
 80005fa:	2002      	movs	r0, #2
 80005fc:	f002 fa54 	bl	8002aa8 <HAL_Delay>

		// ISOCS ausschalten
		ISOCS_DISABLE();													// Chip-Select ausschalten
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000606:	4808      	ldr	r0, [pc, #32]	; (8000628 <wakeup_ltc6811+0x4c>)
 8000608:	f003 f8e8 	bl	80037dc <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < LTC6811_DEVICES; i++)							// Wiederholen fuer Anzahl Slaves
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	3301      	adds	r3, #1
 8000610:	71fb      	strb	r3, [r7, #7]
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d0ea      	beq.n	80005ee <wakeup_ltc6811+0x12>
	}
}
 8000618:	bf00      	nop
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	08007334 	.word	0x08007334
 8000628:	40021000 	.word	0x40021000

0800062c <ltc6811>:
//----------------------------------------------------------------------

// Broadcast Command
//----------------------------------------------------------------------
void ltc6811(uint16_t command)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]
	// Debug Nachricht
#ifdef DEBUG_ISOSPI
	uartTransmitString("Aufruf von Transcreceive LTC6811.\n");
 8000636:	4836      	ldr	r0, [pc, #216]	; (8000710 <ltc6811+0xe4>)
 8000638:	f7ff ff96 	bl	8000568 <uartTransmitString>
#endif

	// PEC berechnen, Anhand Command
	uint16_t pec;															// pec = Zwischenspeicher 16-Bit Command
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	pec = peccommand(command);
 800063c:	88fb      	ldrh	r3, [r7, #6]
 800063e:	4618      	mov	r0, r3
 8000640:	f000 f918 	bl	8000874 <peccommand>
 8000644:	4603      	mov	r3, r0
 8000646:	81bb      	strh	r3, [r7, #12]
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000648:	f7ff ffc8 	bl	80005dc <wakeup_ltc6811>

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 800064c:	88fb      	ldrh	r3, [r7, #6]
 800064e:	0a1b      	lsrs	r3, r3, #8
 8000650:	b29b      	uxth	r3, r3
 8000652:	b2db      	uxtb	r3, r3
 8000654:	f003 0307 	and.w	r3, r3, #7
 8000658:	b2db      	uxtb	r3, r3
 800065a:	723b      	strb	r3, [r7, #8]
	cmd[1] = (command & 0xFF);
 800065c:	88fb      	ldrh	r3, [r7, #6]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	727b      	strb	r3, [r7, #9]
	cmd[2] = ((pec >> 8) & 0xFF);
 8000662:	89bb      	ldrh	r3, [r7, #12]
 8000664:	0a1b      	lsrs	r3, r3, #8
 8000666:	b29b      	uxth	r3, r3
 8000668:	b2db      	uxtb	r3, r3
 800066a:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec & 0xFE);
 800066c:	89bb      	ldrh	r3, [r7, #12]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	f023 0301 	bic.w	r3, r3, #1
 8000674:	b2db      	uxtb	r3, r3
 8000676:	72fb      	strb	r3, [r7, #11]

	// ISOCS einschalten
	ISOCS_ENABLE();
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800067e:	4825      	ldr	r0, [pc, #148]	; (8000714 <ltc6811+0xe8>)
 8000680:	f003 f8ac 	bl	80037dc <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 8000684:	f107 0108 	add.w	r1, r7, #8
 8000688:	2364      	movs	r3, #100	; 0x64
 800068a:	2204      	movs	r2, #4
 800068c:	4822      	ldr	r0, [pc, #136]	; (8000718 <ltc6811+0xec>)
 800068e:	f004 fa66 	bl	8004b5e <HAL_SPI_Transmit>

	// Wenn Command = STCOMM ist dann muessen noch 72 Takte uebertragen werden
	if (command == STCOMM)
 8000692:	88fb      	ldrh	r3, [r7, #6]
 8000694:	f240 7223 	movw	r2, #1827	; 0x723
 8000698:	4293      	cmp	r3, r2
 800069a:	d10e      	bne.n	80006ba <ltc6811+0x8e>
	{
		// 72 = 9 * 8 Bit Daten
		for (uint8_t i = 0; i < 9; i++)
 800069c:	2300      	movs	r3, #0
 800069e:	73fb      	strb	r3, [r7, #15]
 80006a0:	e008      	b.n	80006b4 <ltc6811+0x88>
		{
			// Dummy-Byte uebertragen
			HAL_SPI_Transmit(&hspi4, (uint8_t*) 0xFF, 1, 100);
 80006a2:	2364      	movs	r3, #100	; 0x64
 80006a4:	2201      	movs	r2, #1
 80006a6:	21ff      	movs	r1, #255	; 0xff
 80006a8:	481b      	ldr	r0, [pc, #108]	; (8000718 <ltc6811+0xec>)
 80006aa:	f004 fa58 	bl	8004b5e <HAL_SPI_Transmit>
		for (uint8_t i = 0; i < 9; i++)
 80006ae:	7bfb      	ldrb	r3, [r7, #15]
 80006b0:	3301      	adds	r3, #1
 80006b2:	73fb      	strb	r3, [r7, #15]
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	2b08      	cmp	r3, #8
 80006b8:	d9f3      	bls.n	80006a2 <ltc6811+0x76>
		}
	}
	
	// ISOCS ausschalten
	ISOCS_DISABLE();
 80006ba:	2201      	movs	r2, #1
 80006bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c0:	4814      	ldr	r0, [pc, #80]	; (8000714 <ltc6811+0xe8>)
 80006c2:	f003 f88b 	bl	80037dc <HAL_GPIO_WritePin>
	// Ende der Uebertragung

	// Debug Nachricht
#ifdef DEBUG_ISOSPI
	uartTransmitString("Command wurde gesendet.\n");
 80006c6:	4815      	ldr	r0, [pc, #84]	; (800071c <ltc6811+0xf0>)
 80006c8:	f7ff ff4e 	bl	8000568 <uartTransmitString>
	uartTransmitString("Folgendes wurde gesendet:");
 80006cc:	4814      	ldr	r0, [pc, #80]	; (8000720 <ltc6811+0xf4>)
 80006ce:	f7ff ff4b 	bl	8000568 <uartTransmitString>

	// Sende Command auf UART
	for (uint8_t i = 0; i < 4; i++)
 80006d2:	2300      	movs	r3, #0
 80006d4:	73bb      	strb	r3, [r7, #14]
 80006d6:	e010      	b.n	80006fa <ltc6811+0xce>
	{
		uartTransmit(" ", 1);
 80006d8:	2101      	movs	r1, #1
 80006da:	4812      	ldr	r0, [pc, #72]	; (8000724 <ltc6811+0xf8>)
 80006dc:	f7ff ff30 	bl	8000540 <uartTransmit>
		uartTransmitNumber(cmd[i], 10);
 80006e0:	7bbb      	ldrb	r3, [r7, #14]
 80006e2:	f107 0210 	add.w	r2, r7, #16
 80006e6:	4413      	add	r3, r2
 80006e8:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80006ec:	210a      	movs	r1, #10
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ff54 	bl	800059c <uartTransmitNumber>
	for (uint8_t i = 0; i < 4; i++)
 80006f4:	7bbb      	ldrb	r3, [r7, #14]
 80006f6:	3301      	adds	r3, #1
 80006f8:	73bb      	strb	r3, [r7, #14]
 80006fa:	7bbb      	ldrb	r3, [r7, #14]
 80006fc:	2b03      	cmp	r3, #3
 80006fe:	d9eb      	bls.n	80006d8 <ltc6811+0xac>
	}
	uartTransmit("\n", 1);
 8000700:	2101      	movs	r1, #1
 8000702:	4809      	ldr	r0, [pc, #36]	; (8000728 <ltc6811+0xfc>)
 8000704:	f7ff ff1c 	bl	8000540 <uartTransmit>
#endif
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	08007348 	.word	0x08007348
 8000714:	40021000 	.word	0x40021000
 8000718:	2000010c 	.word	0x2000010c
 800071c:	0800736c 	.word	0x0800736c
 8000720:	08007388 	.word	0x08007388
 8000724:	080073a4 	.word	0x080073a4
 8000728:	080073a8 	.word	0x080073a8

0800072c <ltc6811_read>:
//----------------------------------------------------------------------

// Broadcast Read Command
//----------------------------------------------------------------------
uint8_t ltc6811_read(uint16_t command, uint8_t* data)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	6039      	str	r1, [r7, #0]
 8000736:	80fb      	strh	r3, [r7, #6]
	// Debug Nachricht
#ifdef DEBUG_ISOSPI
	uartTransmitString("Aufruf von Receive LTC6811.\n");
 8000738:	4845      	ldr	r0, [pc, #276]	; (8000850 <ltc6811_read+0x124>)
 800073a:	f7ff ff15 	bl	8000568 <uartTransmitString>
#endif

	// PEC berechnen, Anhand Command
	uint16_t pec;															// pec = Zwischenspeicher 16-Bit Command
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	pec = peccommand(command);
 800073e:	88fb      	ldrh	r3, [r7, #6]
 8000740:	4618      	mov	r0, r3
 8000742:	f000 f897 	bl	8000874 <peccommand>
 8000746:	4603      	mov	r3, r0
 8000748:	827b      	strh	r3, [r7, #18]
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 800074a:	f7ff ff47 	bl	80005dc <wakeup_ltc6811>

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 800074e:	88fb      	ldrh	r3, [r7, #6]
 8000750:	0a1b      	lsrs	r3, r3, #8
 8000752:	b29b      	uxth	r3, r3
 8000754:	b2db      	uxtb	r3, r3
 8000756:	f003 0307 	and.w	r3, r3, #7
 800075a:	b2db      	uxtb	r3, r3
 800075c:	733b      	strb	r3, [r7, #12]
	cmd[1] = (command & 0xFF);
 800075e:	88fb      	ldrh	r3, [r7, #6]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	737b      	strb	r3, [r7, #13]
	cmd[2] = ((pec >> 8) & 0xFF);
 8000764:	8a7b      	ldrh	r3, [r7, #18]
 8000766:	0a1b      	lsrs	r3, r3, #8
 8000768:	b29b      	uxth	r3, r3
 800076a:	b2db      	uxtb	r3, r3
 800076c:	73bb      	strb	r3, [r7, #14]
	cmd[3] = (pec & 0xFE);
 800076e:	8a7b      	ldrh	r3, [r7, #18]
 8000770:	b2db      	uxtb	r3, r3
 8000772:	f023 0301 	bic.w	r3, r3, #1
 8000776:	b2db      	uxtb	r3, r3
 8000778:	73fb      	strb	r3, [r7, #15]

	// ISOCS einschalten
	ISOCS_ENABLE();
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000780:	4834      	ldr	r0, [pc, #208]	; (8000854 <ltc6811_read+0x128>)
 8000782:	f003 f82b 	bl	80037dc <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 8000786:	f107 010c 	add.w	r1, r7, #12
 800078a:	2364      	movs	r3, #100	; 0x64
 800078c:	2204      	movs	r2, #4
 800078e:	4832      	ldr	r0, [pc, #200]	; (8000858 <ltc6811_read+0x12c>)
 8000790:	f004 f9e5 	bl	8004b5e <HAL_SPI_Transmit>
	
	// Data empfangen
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 8000794:	2300      	movs	r3, #0
 8000796:	75fb      	strb	r3, [r7, #23]
 8000798:	e00c      	b.n	80007b4 <ltc6811_read+0x88>
	{
		// Dummy Byte senden
		HAL_SPI_Receive(&hspi4, &data[i*8], 8, 100);
 800079a:	7dfb      	ldrb	r3, [r7, #23]
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	461a      	mov	r2, r3
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	1899      	adds	r1, r3, r2
 80007a4:	2364      	movs	r3, #100	; 0x64
 80007a6:	2208      	movs	r2, #8
 80007a8:	482b      	ldr	r0, [pc, #172]	; (8000858 <ltc6811_read+0x12c>)
 80007aa:	f004 fb46 	bl	8004e3a <HAL_SPI_Receive>
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 80007ae:	7dfb      	ldrb	r3, [r7, #23]
 80007b0:	3301      	adds	r3, #1
 80007b2:	75fb      	strb	r3, [r7, #23]
 80007b4:	7dfb      	ldrb	r3, [r7, #23]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d0ef      	beq.n	800079a <ltc6811_read+0x6e>
	}
	
	// ISOCS ausschalten
	ISOCS_DISABLE();
 80007ba:	2201      	movs	r2, #1
 80007bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007c0:	4824      	ldr	r0, [pc, #144]	; (8000854 <ltc6811_read+0x128>)
 80007c2:	f003 f80b 	bl	80037dc <HAL_GPIO_WritePin>
	// Ende der Uebertragung

	// Debug Nachricht
#ifdef DEBUG_ISOSPI
	uartTransmitString("Command wurde gesendet.\n");
 80007c6:	4825      	ldr	r0, [pc, #148]	; (800085c <ltc6811_read+0x130>)
 80007c8:	f7ff fece 	bl	8000568 <uartTransmitString>
	uartTransmitString("Folgendes wurde gesendet:");
 80007cc:	4824      	ldr	r0, [pc, #144]	; (8000860 <ltc6811_read+0x134>)
 80007ce:	f7ff fecb 	bl	8000568 <uartTransmitString>

	// Sende Command auf UART
	for (uint8_t i = 0; i < 4; i++)
 80007d2:	2300      	movs	r3, #0
 80007d4:	75bb      	strb	r3, [r7, #22]
 80007d6:	e010      	b.n	80007fa <ltc6811_read+0xce>
	{
		uartTransmit(" ", 1);
 80007d8:	2101      	movs	r1, #1
 80007da:	4822      	ldr	r0, [pc, #136]	; (8000864 <ltc6811_read+0x138>)
 80007dc:	f7ff feb0 	bl	8000540 <uartTransmit>
		uartTransmitNumber(cmd[i], 10);
 80007e0:	7dbb      	ldrb	r3, [r7, #22]
 80007e2:	f107 0218 	add.w	r2, r7, #24
 80007e6:	4413      	add	r3, r2
 80007e8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80007ec:	210a      	movs	r1, #10
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff fed4 	bl	800059c <uartTransmitNumber>
	for (uint8_t i = 0; i < 4; i++)
 80007f4:	7dbb      	ldrb	r3, [r7, #22]
 80007f6:	3301      	adds	r3, #1
 80007f8:	75bb      	strb	r3, [r7, #22]
 80007fa:	7dbb      	ldrb	r3, [r7, #22]
 80007fc:	2b03      	cmp	r3, #3
 80007fe:	d9eb      	bls.n	80007d8 <ltc6811_read+0xac>
	}
	uartTransmit("\n", 1);
 8000800:	2101      	movs	r1, #1
 8000802:	4819      	ldr	r0, [pc, #100]	; (8000868 <ltc6811_read+0x13c>)
 8000804:	f7ff fe9c 	bl	8000540 <uartTransmit>

	uartTransmitString("Daten wurde empfangen.\n");
 8000808:	4818      	ldr	r0, [pc, #96]	; (800086c <ltc6811_read+0x140>)
 800080a:	f7ff fead 	bl	8000568 <uartTransmitString>
	uartTransmitString("Folgendes wurde empfangen:");
 800080e:	4818      	ldr	r0, [pc, #96]	; (8000870 <ltc6811_read+0x144>)
 8000810:	f7ff feaa 	bl	8000568 <uartTransmitString>

	// Sende Daten auf UART
	for (uint8_t i = 0; i < 8; i++)
 8000814:	2300      	movs	r3, #0
 8000816:	757b      	strb	r3, [r7, #21]
 8000818:	e00e      	b.n	8000838 <ltc6811_read+0x10c>
	{
		uartTransmit(" ", 1);
 800081a:	2101      	movs	r1, #1
 800081c:	4811      	ldr	r0, [pc, #68]	; (8000864 <ltc6811_read+0x138>)
 800081e:	f7ff fe8f 	bl	8000540 <uartTransmit>
		uartTransmitNumber(data[i], 10);
 8000822:	7d7b      	ldrb	r3, [r7, #21]
 8000824:	683a      	ldr	r2, [r7, #0]
 8000826:	4413      	add	r3, r2
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	210a      	movs	r1, #10
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff feb5 	bl	800059c <uartTransmitNumber>
	for (uint8_t i = 0; i < 8; i++)
 8000832:	7d7b      	ldrb	r3, [r7, #21]
 8000834:	3301      	adds	r3, #1
 8000836:	757b      	strb	r3, [r7, #21]
 8000838:	7d7b      	ldrb	r3, [r7, #21]
 800083a:	2b07      	cmp	r3, #7
 800083c:	d9ed      	bls.n	800081a <ltc6811_read+0xee>
	}
	uartTransmit("\n", 1);
 800083e:	2101      	movs	r1, #1
 8000840:	4809      	ldr	r0, [pc, #36]	; (8000868 <ltc6811_read+0x13c>)
 8000842:	f7ff fe7d 	bl	8000540 <uartTransmit>
#endif

	return 0;
 8000846:	2300      	movs	r3, #0
}
 8000848:	4618      	mov	r0, r3
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	080073e4 	.word	0x080073e4
 8000854:	40021000 	.word	0x40021000
 8000858:	2000010c 	.word	0x2000010c
 800085c:	0800736c 	.word	0x0800736c
 8000860:	08007388 	.word	0x08007388
 8000864:	080073a4 	.word	0x080073a4
 8000868:	080073a8 	.word	0x080073a8
 800086c:	08007404 	.word	0x08007404
 8000870:	0800741c 	.word	0x0800741c

08000874 <peccommand>:
//----------------------------------------------------------------------

// Pec Command bauen
//----------------------------------------------------------------------
uint16_t peccommand(uint16_t command)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	80fb      	strh	r3, [r7, #6]
	// Variable definieren
	uint8_t pec[2];															// pec = Zwischenspeicher 16-Bit Command in 2x 8-Bit Bytes
	
	// 16 Bit Command in 8 Bit Array uebertragen
	pec[1] = (command & 0xFF);												// pec[1] = lower Command Byte
 800087e:	88fb      	ldrh	r3, [r7, #6]
 8000880:	b2db      	uxtb	r3, r3
 8000882:	737b      	strb	r3, [r7, #13]
	pec[0] = ((command >> 8) & 0x07);										// pec[0] = upper Command Byte
 8000884:	88fb      	ldrh	r3, [r7, #6]
 8000886:	0a1b      	lsrs	r3, r3, #8
 8000888:	b29b      	uxth	r3, r3
 800088a:	b2db      	uxtb	r3, r3
 800088c:	f003 0307 	and.w	r3, r3, #7
 8000890:	b2db      	uxtb	r3, r3
 8000892:	733b      	strb	r3, [r7, #12]
	
	// Pec zurueckgeben
	return peclookup(2, pec);
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	4619      	mov	r1, r3
 800089a:	2002      	movs	r0, #2
 800089c:	f000 f806 	bl	80008ac <peclookup>
 80008a0:	4603      	mov	r3, r0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <peclookup>:
//----------------------------------------------------------------------

// Pec kalculieren (Datasheet ltc6811 Page 76, Datasheet ltc6811 Page 72)
//----------------------------------------------------------------------
uint16_t peclookup(uint8_t len,	uint8_t *data)								// len = Anzahl Byte, data = Daten fuer die Pec ausgewaehlt wird
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	6039      	str	r1, [r7, #0]
 80008b6:	71fb      	strb	r3, [r7, #7]
	// Variable definieren
	uint16_t remainder, addr;												// remainder = Zwischenspeicher Pec, addr = Zwischenspeicher Addresse
	remainder = 16;															// Initialisiere reminder mit 16 (0b0000000000010000)
 80008b8:	2310      	movs	r3, #16
 80008ba:	81fb      	strh	r3, [r7, #14]
	
	// Schleife fuer die Pec-Calculation
	for(uint8_t i = 0; i < len; i++)
 80008bc:	2300      	movs	r3, #0
 80008be:	737b      	strb	r3, [r7, #13]
 80008c0:	e019      	b.n	80008f6 <peclookup+0x4a>
	{
		// Kalkuliere Pec Anhand der Lookuptabelle
		addr = ((remainder >> 7) ^ data[i]) & 0xFF;							// Tabellenaddresse berechnen
 80008c2:	89fb      	ldrh	r3, [r7, #14]
 80008c4:	09db      	lsrs	r3, r3, #7
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	7b7b      	ldrb	r3, [r7, #13]
 80008ca:	6839      	ldr	r1, [r7, #0]
 80008cc:	440b      	add	r3, r1
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	4053      	eors	r3, r2
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ pec15Table[addr];					// Pec berechnen
 80008da:	89fb      	ldrh	r3, [r7, #14]
 80008dc:	021b      	lsls	r3, r3, #8
 80008de:	b21a      	sxth	r2, r3
 80008e0:	897b      	ldrh	r3, [r7, #10]
 80008e2:	490b      	ldr	r1, [pc, #44]	; (8000910 <peclookup+0x64>)
 80008e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008e8:	b21b      	sxth	r3, r3
 80008ea:	4053      	eors	r3, r2
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i < len; i++)
 80008f0:	7b7b      	ldrb	r3, [r7, #13]
 80008f2:	3301      	adds	r3, #1
 80008f4:	737b      	strb	r3, [r7, #13]
 80008f6:	7b7a      	ldrb	r2, [r7, #13]
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d3e1      	bcc.n	80008c2 <peclookup+0x16>
	}
	
	// Pec zurueckgeben
	return (remainder << 1);												// Der Pec hat eine 0 als LSB, remainder muss um 1 nach links geshiftet werden
 80008fe:	89fb      	ldrh	r3, [r7, #14]
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	b29b      	uxth	r3, r3
}
 8000904:	4618      	mov	r0, r3
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	0800781c 	.word	0x0800781c

08000914 <ltc6811_check>:
//----------------------------------------------------------------------*/

// LTC6811 Status auslesen und auswerten
//----------------------------------------------------------------------
uint8_t ltc6811_check(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b092      	sub	sp, #72	; 0x48
 8000918:	af00      	add	r7, sp, #0
	// Variablen definieren
	uint8_t tmp_data[64] = {0}, error = 0;									// Speicher Registerwerte, Fehlerspeicher
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	f107 0308 	add.w	r3, r7, #8
 8000922:	223c      	movs	r2, #60	; 0x3c
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f006 fcac 	bl	8007284 <memset>
 800092c:	2300      	movs	r3, #0
 800092e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000932:	f7ff fe53 	bl	80005dc <wakeup_ltc6811>

	// Alle Register zuruecksetzen
	ltc6811(CLRCELL);														// Register Zellspannung auf default setzen
 8000936:	f240 7011 	movw	r0, #1809	; 0x711
 800093a:	f7ff fe77 	bl	800062c <ltc6811>
	ltc6811(CLRAUX);														// Register GPIO-Spannung auf default setzen
 800093e:	f240 7012 	movw	r0, #1810	; 0x712
 8000942:	f7ff fe73 	bl	800062c <ltc6811>
	ltc6811(CLRSTAT);														// Register Interne Messungen auf default setzen
 8000946:	f240 7013 	movw	r0, #1811	; 0x713
 800094a:	f7ff fe6f 	bl	800062c <ltc6811>

	// Lese Register Status B aus
	ltc6811_read(RDSTATB, &tmp_data[0]);
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	4619      	mov	r1, r3
 8000952:	2012      	movs	r0, #18
 8000954:	f7ff feea 	bl	800072c <ltc6811_read>
	{
		error |= (1 << 0);													// Thermal Shutdown nicht Ok
	}

	// Selbsttest 1 Digitale Filter
	if (ltc6811_test(ST1 | MD73) == 1)
 8000958:	f44f 7090 	mov.w	r0, #288	; 0x120
 800095c:	f000 f832 	bl	80009c4 <ltc6811_test>
 8000960:	4603      	mov	r3, r0
 8000962:	2b01      	cmp	r3, #1
 8000964:	d105      	bne.n	8000972 <ltc6811_check+0x5e>
	{
		error |= (1 << 1);													// Selbsttest 1 nicht bestanden
 8000966:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800096a:	f043 0302 	orr.w	r3, r3, #2
 800096e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	// Selbsttest 2 Digitale Filter
	if (ltc6811_test(ST2 | MD73) == 1)
 8000972:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8000976:	f000 f825 	bl	80009c4 <ltc6811_test>
 800097a:	4603      	mov	r3, r0
 800097c:	2b01      	cmp	r3, #1
 800097e:	d105      	bne.n	800098c <ltc6811_check+0x78>
	{
		error |= (1 << 2);													// Selbsttest 2 nicht bestanden
 8000980:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	// Selbsttest Multiplexer
	if (ltc6811_diagn() == 1)
 800098c:	f000 f9ec 	bl	8000d68 <ltc6811_diagn>
 8000990:	4603      	mov	r3, r0
 8000992:	2b01      	cmp	r3, #1
 8000994:	d105      	bne.n	80009a2 <ltc6811_check+0x8e>
	{
		error |= (1 << 3);													// Multiplexertest nicht bestanden
 8000996:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800099a:	f043 0308 	orr.w	r3, r3, #8
 800099e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	// Open Wire Check durchfuehren
	if (ltc6811_openwire() == 1)
 80009a2:	f000 fa01 	bl	8000da8 <ltc6811_openwire>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d105      	bne.n	80009b8 <ltc6811_check+0xa4>
	{
		error |= (1 << 4);													// Open-Wire Test nicht bestanden
 80009ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80009b0:	f043 0310 	orr.w	r3, r3, #16
 80009b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	// Fehlercode zurueckgeben
	return error;															// Fehler 0 = alles Ok, Fehler > 0 = Selbsttest fehlerhaft
 80009b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3748      	adds	r7, #72	; 0x48
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <ltc6811_test>:
//----------------------------------------------------------------------

// Selbsttest Digitale Filter (Datasheet ltc6811 Page 28)
//----------------------------------------------------------------------
uint8_t ltc6811_test(uint16_t command)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b094      	sub	sp, #80	; 0x50
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	80fb      	strh	r3, [r7, #6]
	// Variablen definieren
	uint8_t tmp_data[64] = {0};												// Speicher Registerwerte
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	223c      	movs	r2, #60	; 0x3c
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f006 fc52 	bl	8007284 <memset>
	uint16_t tmp = 0, test_pattern = 0;										// Zwischenspeicher, Kontrollvariable Selbsttest
 80009e0:	2300      	movs	r3, #0
 80009e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80009e6:	2300      	movs	r3, #0
 80009e8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	// Commands fuer Status senden  Test 1
	ltc6811(CVST | command);												// Digitalfilter Check Zellspannungen
 80009ec:	88fb      	ldrh	r3, [r7, #6]
 80009ee:	f443 7301 	orr.w	r3, r3, #516	; 0x204
 80009f2:	f043 0303 	orr.w	r3, r3, #3
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fe17 	bl	800062c <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 80009fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a02:	f002 f851 	bl	8002aa8 <HAL_Delay>
	ltc6811(AUXST | command);												// Digitalfilter Check GPIO-Spannungen
 8000a06:	88fb      	ldrh	r3, [r7, #6]
 8000a08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a0c:	f043 0307 	orr.w	r3, r3, #7
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fe0a 	bl	800062c <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 8000a18:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a1c:	f002 f844 	bl	8002aa8 <HAL_Delay>
	ltc6811(STATST | command);												// Digitalfilter Check Interne Messungen
 8000a20:	88fb      	ldrh	r3, [r7, #6]
 8000a22:	f443 6381 	orr.w	r3, r3, #1032	; 0x408
 8000a26:	f043 0307 	orr.w	r3, r3, #7
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fdfd 	bl	800062c <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 8000a32:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a36:	f002 f837 	bl	8002aa8 <HAL_Delay>

	// Register auslesen Test 1
	// Spannungsregister
	ltc6811_read(RDCVA, &tmp_data[0]);										// Lese Register CVA zurueck
 8000a3a:	f107 0308 	add.w	r3, r7, #8
 8000a3e:	4619      	mov	r1, r3
 8000a40:	2004      	movs	r0, #4
 8000a42:	f7ff fe73 	bl	800072c <ltc6811_read>
	ltc6811_read(RDCVB, &tmp_data[8]);										// Lese Register CVB zurueck
 8000a46:	f107 0308 	add.w	r3, r7, #8
 8000a4a:	3308      	adds	r3, #8
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	2006      	movs	r0, #6
 8000a50:	f7ff fe6c 	bl	800072c <ltc6811_read>
	ltc6811_read(RDCVC, &tmp_data[16]);										// Lese Register CVC zurueck
 8000a54:	f107 0308 	add.w	r3, r7, #8
 8000a58:	3310      	adds	r3, #16
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	2008      	movs	r0, #8
 8000a5e:	f7ff fe65 	bl	800072c <ltc6811_read>
	ltc6811_read(RDCVD, &tmp_data[24]);										// Lese Register CVD zurueck
 8000a62:	f107 0308 	add.w	r3, r7, #8
 8000a66:	3318      	adds	r3, #24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	200a      	movs	r0, #10
 8000a6c:	f7ff fe5e 	bl	800072c <ltc6811_read>

	// GPIO-Register
	ltc6811_read(RDAUXA, &tmp_data[32]);									// Lese Register AUXA zurueck
 8000a70:	f107 0308 	add.w	r3, r7, #8
 8000a74:	3320      	adds	r3, #32
 8000a76:	4619      	mov	r1, r3
 8000a78:	200c      	movs	r0, #12
 8000a7a:	f7ff fe57 	bl	800072c <ltc6811_read>
	ltc6811_read(RDAUXB, &tmp_data[40]);									// Lese Register AUXB zurueck
 8000a7e:	f107 0308 	add.w	r3, r7, #8
 8000a82:	3328      	adds	r3, #40	; 0x28
 8000a84:	4619      	mov	r1, r3
 8000a86:	200e      	movs	r0, #14
 8000a88:	f7ff fe50 	bl	800072c <ltc6811_read>

	// Statusregister
	ltc6811_read(RDSTATA, &tmp_data[48]);									// Lese Register STATA zurueck
 8000a8c:	f107 0308 	add.w	r3, r7, #8
 8000a90:	3330      	adds	r3, #48	; 0x30
 8000a92:	4619      	mov	r1, r3
 8000a94:	2010      	movs	r0, #16
 8000a96:	f7ff fe49 	bl	800072c <ltc6811_read>
	ltc6811_read(RDSTATB, &tmp_data[56]);									// Lese Register STATB zurueck
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	3338      	adds	r3, #56	; 0x38
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	2012      	movs	r0, #18
 8000aa4:	f7ff fe42 	bl	800072c <ltc6811_read>

	// Lookup fuer Selbstest digitaler Filter
	// Kontrollvariable heraussuchen
	if (command && MD2714)													// Wenn Sampling Frequenz = MD2714
 8000aa8:	88fb      	ldrh	r3, [r7, #6]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d013      	beq.n	8000ad6 <ltc6811_test+0x112>
			}
		}
		else																// Wenn ADCOPT nicht gesetzt
		{*/
			// Wenn Selbsttest 1 gewaehlt
			if (command == ST1)
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	2b20      	cmp	r3, #32
 8000ab2:	d104      	bne.n	8000abe <ltc6811_test+0xfa>
			{
				test_pattern = 0x9565;										// Registerwert bei 27kHz
 8000ab4:	f249 5365 	movw	r3, #38245	; 0x9565
 8000ab8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000abc:	e01e      	b.n	8000afc <ltc6811_test+0x138>
			}
			// Wenn Selbsttest 2 gewaehlt
			else if (command == ST2)
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	2b40      	cmp	r3, #64	; 0x40
 8000ac2:	d104      	bne.n	8000ace <ltc6811_test+0x10a>
			{
				test_pattern = 0x6A9A;										// Registerwert bei 27kHz
 8000ac4:	f646 239a 	movw	r3, #27290	; 0x6a9a
 8000ac8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000acc:	e016      	b.n	8000afc <ltc6811_test+0x138>
			}
			// Bei fehlerhaften Einstellungen
			else
			{
				test_pattern = 0;											// Registerwert = 0 damit Fehler ausloest
 8000ace:	2300      	movs	r3, #0
 8000ad0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000ad4:	e012      	b.n	8000afc <ltc6811_test+0x138>
//		}
	}
	else
	{
		// Wenn Selbsttest 1 gewaehlt
		if (command == ST1)
 8000ad6:	88fb      	ldrh	r3, [r7, #6]
 8000ad8:	2b20      	cmp	r3, #32
 8000ada:	d104      	bne.n	8000ae6 <ltc6811_test+0x122>
		{
			test_pattern = 0x9555;											// Registerwert bei allen anderen Sampling Frequenzen
 8000adc:	f249 5355 	movw	r3, #38229	; 0x9555
 8000ae0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000ae4:	e00a      	b.n	8000afc <ltc6811_test+0x138>
		}
		// Wenn Selbsttest 2 gewaehlt
		else if (command == ST2)
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	2b40      	cmp	r3, #64	; 0x40
 8000aea:	d104      	bne.n	8000af6 <ltc6811_test+0x132>
		{
			test_pattern = 0x6AAA;											// Registerwert bei allen anderen Sampling Frequenzen
 8000aec:	f646 23aa 	movw	r3, #27306	; 0x6aaa
 8000af0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000af4:	e002      	b.n	8000afc <ltc6811_test+0x138>
		}
		// Bei fehlerhaften Einstellungen
		else
		{
			test_pattern = 0;												// Registerwert = 0 damit Fehler ausloest
 8000af6:	2300      	movs	r3, #0
 8000af8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		}
	}

	// Daten pruefen Test 1
	for (uint8_t i=0; i<22; i++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8000b02:	e127      	b.n	8000d54 <ltc6811_test+0x390>
	{
		// Auswaehlen welches Register im Array steht
		switch (i)
 8000b04:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000b08:	2b1d      	cmp	r3, #29
 8000b0a:	f200 8115 	bhi.w	8000d38 <ltc6811_test+0x374>
 8000b0e:	a201      	add	r2, pc, #4	; (adr r2, 8000b14 <ltc6811_test+0x150>)
 8000b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b14:	08000b8d 	.word	0x08000b8d
 8000b18:	08000b8d 	.word	0x08000b8d
 8000b1c:	08000b8d 	.word	0x08000b8d
 8000b20:	08000bbf 	.word	0x08000bbf
 8000b24:	08000bbf 	.word	0x08000bbf
 8000b28:	08000bbf 	.word	0x08000bbf
 8000b2c:	08000bf3 	.word	0x08000bf3
 8000b30:	08000bf3 	.word	0x08000bf3
 8000b34:	08000bf3 	.word	0x08000bf3
 8000b38:	08000c29 	.word	0x08000c29
 8000b3c:	08000c29 	.word	0x08000c29
 8000b40:	08000c29 	.word	0x08000c29
 8000b44:	08000c5f 	.word	0x08000c5f
 8000b48:	08000c5f 	.word	0x08000c5f
 8000b4c:	08000c5f 	.word	0x08000c5f
 8000b50:	08000c97 	.word	0x08000c97
 8000b54:	08000c97 	.word	0x08000c97
 8000b58:	08000c97 	.word	0x08000c97
 8000b5c:	08000ccd 	.word	0x08000ccd
 8000b60:	08000d39 	.word	0x08000d39
 8000b64:	08000ccd 	.word	0x08000ccd
 8000b68:	08000d03 	.word	0x08000d03
 8000b6c:	08000d39 	.word	0x08000d39
 8000b70:	08000d39 	.word	0x08000d39
 8000b74:	08000d39 	.word	0x08000d39
 8000b78:	08000d39 	.word	0x08000d39
 8000b7c:	08000d39 	.word	0x08000d39
 8000b80:	08000d39 	.word	0x08000d39
 8000b84:	08000d39 	.word	0x08000d39
 8000b88:	08000ccd 	.word	0x08000ccd
		{
			// Register CVA
			case 0:
			case 1:
			case 2:
				tmp = ((tmp_data[i*2+1]<<8)|tmp_data[i*2]);					// Register CVA umwandeln
 8000b8c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	3301      	adds	r3, #1
 8000b94:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000b98:	4413      	add	r3, r2
 8000b9a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000b9e:	021b      	lsls	r3, r3, #8
 8000ba0:	b21a      	sxth	r2, r3
 8000ba2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000bac:	440b      	add	r3, r1
 8000bae:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000bb2:	b21b      	sxth	r3, r3
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	b21b      	sxth	r3, r3
 8000bb8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000bbc:	e0bd      	b.n	8000d3a <ltc6811_test+0x376>
			// Register CVB
			case 3:
			case 4:
			case 5:
				tmp = ((tmp_data[i*2+3] << 8)|tmp_data[i*2+2]);				// Register CVB umwandeln
 8000bbe:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	3303      	adds	r3, #3
 8000bc6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000bca:	4413      	add	r3, r2
 8000bcc:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000bd0:	021b      	lsls	r3, r3, #8
 8000bd2:	b21a      	sxth	r2, r3
 8000bd4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000bd8:	3301      	adds	r3, #1
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000be0:	440b      	add	r3, r1
 8000be2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000be6:	b21b      	sxth	r3, r3
 8000be8:	4313      	orrs	r3, r2
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000bf0:	e0a3      	b.n	8000d3a <ltc6811_test+0x376>
			// Register CVC
			case 6:
			case 7:
			case 8:
				tmp = ((tmp_data[(i+2)*2+1] << 8)|tmp_data[(i+2)*2]);		// Register CVC umwandeln
 8000bf2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000bf6:	3302      	adds	r3, #2
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000c00:	4413      	add	r3, r2
 8000c02:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000c06:	021b      	lsls	r3, r3, #8
 8000c08:	b21a      	sxth	r2, r3
 8000c0a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000c0e:	3302      	adds	r3, #2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000c16:	440b      	add	r3, r1
 8000c18:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000c1c:	b21b      	sxth	r3, r3
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	b21b      	sxth	r3, r3
 8000c22:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000c26:	e088      	b.n	8000d3a <ltc6811_test+0x376>
			// Register CVD
			case 9:
			case 10:
			case 11:
				tmp = ((tmp_data[(i+2)*2+3] << 8)|tmp_data[(i+2)*2+2]);		// Register CVD umwandeln
 8000c28:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000c2c:	3302      	adds	r3, #2
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	3303      	adds	r3, #3
 8000c32:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000c36:	4413      	add	r3, r2
 8000c38:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000c3c:	021b      	lsls	r3, r3, #8
 8000c3e:	b21a      	sxth	r2, r3
 8000c40:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000c44:	3303      	adds	r3, #3
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000c4c:	440b      	add	r3, r1
 8000c4e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000c52:	b21b      	sxth	r3, r3
 8000c54:	4313      	orrs	r3, r2
 8000c56:	b21b      	sxth	r3, r3
 8000c58:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000c5c:	e06d      	b.n	8000d3a <ltc6811_test+0x376>
			// Register AUXA
			case 12:
			case 13:
			case 14:
				tmp = ((tmp_data[(i+4)*2+1] << 8)|tmp_data[(i+4)*2+1]);		// Register AUXA umwandeln
 8000c5e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000c62:	3304      	adds	r3, #4
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	3301      	adds	r3, #1
 8000c68:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000c6c:	4413      	add	r3, r2
 8000c6e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000c72:	021b      	lsls	r3, r3, #8
 8000c74:	b21a      	sxth	r2, r3
 8000c76:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000c7a:	3304      	adds	r3, #4
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	3301      	adds	r3, #1
 8000c80:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000c84:	440b      	add	r3, r1
 8000c86:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000c8a:	b21b      	sxth	r3, r3
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	b21b      	sxth	r3, r3
 8000c90:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000c94:	e051      	b.n	8000d3a <ltc6811_test+0x376>
			// Register AUXB
			case 15:
			case 16:
			case 17:
				tmp = ((tmp_data[(i+4)*2+3] << 8)|tmp_data[(i+4)*2+2]);		// Register AUXB umwandeln
 8000c96:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000c9a:	3304      	adds	r3, #4
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	3303      	adds	r3, #3
 8000ca0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000ca4:	4413      	add	r3, r2
 8000ca6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000caa:	021b      	lsls	r3, r3, #8
 8000cac:	b21a      	sxth	r2, r3
 8000cae:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000cb2:	3305      	adds	r3, #5
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000cba:	440b      	add	r3, r1
 8000cbc:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000cc0:	b21b      	sxth	r3, r3
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	b21b      	sxth	r3, r3
 8000cc6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000cca:	e036      	b.n	8000d3a <ltc6811_test+0x376>
			// Register STATA
			case 18:
			case 29:
			case 20:
				tmp = ((tmp_data[(i+6)*2+3] << 8)|tmp_data[(i+6)*2+2]);		// Register STATA umwandeln
 8000ccc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000cd0:	3306      	adds	r3, #6
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	3303      	adds	r3, #3
 8000cd6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000cda:	4413      	add	r3, r2
 8000cdc:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000ce0:	021b      	lsls	r3, r3, #8
 8000ce2:	b21a      	sxth	r2, r3
 8000ce4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ce8:	3307      	adds	r3, #7
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000cf0:	440b      	add	r3, r1
 8000cf2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000cf6:	b21b      	sxth	r3, r3
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	b21b      	sxth	r3, r3
 8000cfc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000d00:	e01b      	b.n	8000d3a <ltc6811_test+0x376>
			// Register STATB
			case 21:
				tmp = ((tmp_data[(i+6)*2+3] << 8)|tmp_data[(i+6)*2+2]);		// Register STATB umwandeln
 8000d02:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d06:	3306      	adds	r3, #6
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	3303      	adds	r3, #3
 8000d0c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000d10:	4413      	add	r3, r2
 8000d12:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d16:	021b      	lsls	r3, r3, #8
 8000d18:	b21a      	sxth	r2, r3
 8000d1a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d1e:	3307      	adds	r3, #7
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000d26:	440b      	add	r3, r1
 8000d28:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d2c:	b21b      	sxth	r3, r3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	b21b      	sxth	r3, r3
 8000d32:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000d36:	e000      	b.n	8000d3a <ltc6811_test+0x376>
			// Kein Register
			default:
				break;
 8000d38:	bf00      	nop
		}

		// Vergleiche Registerwert mit Vorgabewert aus Datenblatt
		if (tmp != test_pattern)
 8000d3a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8000d3e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d001      	beq.n	8000d4a <ltc6811_test+0x386>
		{
			return 1;														// Selbsttest 1 nicht OK
 8000d46:	2301      	movs	r3, #1
 8000d48:	e00a      	b.n	8000d60 <ltc6811_test+0x39c>
	for (uint8_t i=0; i<22; i++)
 8000d4a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d4e:	3301      	adds	r3, #1
 8000d50:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8000d54:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d58:	2b15      	cmp	r3, #21
 8000d5a:	f67f aed3 	bls.w	8000b04 <ltc6811_test+0x140>
		}
	}

	return 0;																// Selbsttest 1 OK
 8000d5e:	2300      	movs	r3, #0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3750      	adds	r7, #80	; 0x50
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <ltc6811_diagn>:
//----------------------------------------------------------------------

// Selbstdiagnose Multiplexer (Datasheet ltc6811 Page 27)
//----------------------------------------------------------------------
uint8_t ltc6811_diagn(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
	// Variablen definieren
	uint8_t tmp_data[8] = {0};												// Speicher Registerwerte
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000d76:	f7ff fc31 	bl	80005dc <wakeup_ltc6811>

	// Command senden
	ltc6811(DIAGN);															// Multiplexer Check
 8000d7a:	f240 7015 	movw	r0, #1813	; 0x715
 8000d7e:	f7ff fc55 	bl	800062c <ltc6811>

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000d82:	f7ff fc2b 	bl	80005dc <wakeup_ltc6811>

	// Lese Register
	ltc6811_read(RDSTATB, &tmp_data[0]);									// Lese Status B Register fuer Multiplexer Check
 8000d86:	463b      	mov	r3, r7
 8000d88:	4619      	mov	r1, r3
 8000d8a:	2012      	movs	r0, #18
 8000d8c:	f7ff fcce 	bl	800072c <ltc6811_read>

	// Multiplexer pruefen
	if (tmp_data[5] & (1 << 1))
 8000d90:	797b      	ldrb	r3, [r7, #5]
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <ltc6811_diagn+0x36>
	{
		return 1;															// Multiplexertest nicht OK
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e000      	b.n	8000da0 <ltc6811_diagn+0x38>
	}

	return 0;																// Multiplexertest OK
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <ltc6811_openwire>:
//----------------------------------------------------------------------

// LTC6811 Openwire check
//----------------------------------------------------------------------
uint8_t ltc6811_openwire(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b098      	sub	sp, #96	; 0x60
 8000dac:	af00      	add	r7, sp, #0
	// Arrays definieren
	uint8_t tmp_data[64] = {0};												// Speicher Registerwerte
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
 8000db2:	f107 0320 	add.w	r3, r7, #32
 8000db6:	223c      	movs	r2, #60	; 0x3c
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f006 fa62 	bl	8007284 <memset>
	uint16_t cell[1] = {0}, openwire[12] = {0};								// Speicher Zelle, Openwire vergleic Threshold
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	833b      	strh	r3, [r7, #24]
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
 8000dd0:	611a      	str	r2, [r3, #16]
 8000dd2:	615a      	str	r2, [r3, #20]

	// Pullup Current
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000dd4:	f7ff fc02 	bl	80005dc <wakeup_ltc6811>

	// Commands fuer Openwire Test, Durchgang 1
	ltc6811(ADOW | MD262 | PUP);											// Pullup Current
 8000dd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ddc:	f7ff fc26 	bl	800062c <ltc6811>
	HAL_Delay(300);
 8000de0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000de4:	f001 fe60 	bl	8002aa8 <HAL_Delay>

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000de8:	f7ff fbf8 	bl	80005dc <wakeup_ltc6811>

	// Commands fuer Openwire Test, Durchgang 2
	ltc6811(ADOW | MD262 | PUP);											// Pullup Current
 8000dec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000df0:	f7ff fc1c 	bl	800062c <ltc6811>
	HAL_Delay(300);
 8000df4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000df8:	f001 fe56 	bl	8002aa8 <HAL_Delay>

	// Register auslesen OpenWire
	ltc6811_read(RDCVA, &tmp_data[0]);
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	4619      	mov	r1, r3
 8000e02:	2004      	movs	r0, #4
 8000e04:	f7ff fc92 	bl	800072c <ltc6811_read>
	ltc6811_read(RDCVB, &tmp_data[8]);
 8000e08:	f107 031c 	add.w	r3, r7, #28
 8000e0c:	3308      	adds	r3, #8
 8000e0e:	4619      	mov	r1, r3
 8000e10:	2006      	movs	r0, #6
 8000e12:	f7ff fc8b 	bl	800072c <ltc6811_read>
	ltc6811_read(RDCVC, &tmp_data[16]);
 8000e16:	f107 031c 	add.w	r3, r7, #28
 8000e1a:	3310      	adds	r3, #16
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	2008      	movs	r0, #8
 8000e20:	f7ff fc84 	bl	800072c <ltc6811_read>
	ltc6811_read(RDCVD, &tmp_data[24]);
 8000e24:	f107 031c 	add.w	r3, r7, #28
 8000e28:	3318      	adds	r3, #24
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	200a      	movs	r0, #10
 8000e2e:	f7ff fc7d 	bl	800072c <ltc6811_read>

	// Pulldown Current
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000e32:	f7ff fbd3 	bl	80005dc <wakeup_ltc6811>

	// Commands fuer Openwire Test, Durchgang 1
	ltc6811(ADOW | MD262);													// Pulldown Current
 8000e36:	f44f 706a 	mov.w	r0, #936	; 0x3a8
 8000e3a:	f7ff fbf7 	bl	800062c <ltc6811>
	HAL_Delay(300);
 8000e3e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e42:	f001 fe31 	bl	8002aa8 <HAL_Delay>

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000e46:	f7ff fbc9 	bl	80005dc <wakeup_ltc6811>

	// Commands fuer Openwire Test, Durchgang 2
	ltc6811(ADOW | MD262);													// Pulldown Current
 8000e4a:	f44f 706a 	mov.w	r0, #936	; 0x3a8
 8000e4e:	f7ff fbed 	bl	800062c <ltc6811>
	HAL_Delay(300);
 8000e52:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e56:	f001 fe27 	bl	8002aa8 <HAL_Delay>

	// Register auslesen OpenWire
	ltc6811_read(RDCVA, &tmp_data[32]);
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	3320      	adds	r3, #32
 8000e60:	4619      	mov	r1, r3
 8000e62:	2004      	movs	r0, #4
 8000e64:	f7ff fc62 	bl	800072c <ltc6811_read>
	ltc6811_read(RDCVB, &tmp_data[40]);
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	3328      	adds	r3, #40	; 0x28
 8000e6e:	4619      	mov	r1, r3
 8000e70:	2006      	movs	r0, #6
 8000e72:	f7ff fc5b 	bl	800072c <ltc6811_read>
	ltc6811_read(RDCVC, &tmp_data[48]);
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	3330      	adds	r3, #48	; 0x30
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	2008      	movs	r0, #8
 8000e80:	f7ff fc54 	bl	800072c <ltc6811_read>
	ltc6811_read(RDCVD, &tmp_data[56]);
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	3338      	adds	r3, #56	; 0x38
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	200a      	movs	r0, #10
 8000e8e:	f7ff fc4d 	bl	800072c <ltc6811_read>

	// Schleife zum umformatieren der Daten
	for (uint8_t i = 1; i < 12; i++)
 8000e92:	2301      	movs	r3, #1
 8000e94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000e98:	e111      	b.n	80010be <ltc6811_openwire+0x316>
	{
		// Auswahl welche Leitung
		switch (i)
 8000e9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e9e:	2b0b      	cmp	r3, #11
 8000ea0:	f200 8107 	bhi.w	80010b2 <ltc6811_openwire+0x30a>
 8000ea4:	a201      	add	r2, pc, #4	; (adr r2, 8000eac <ltc6811_openwire+0x104>)
 8000ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eaa:	bf00      	nop
 8000eac:	08000edd 	.word	0x08000edd
 8000eb0:	08000edd 	.word	0x08000edd
 8000eb4:	08000edd 	.word	0x08000edd
 8000eb8:	08000f51 	.word	0x08000f51
 8000ebc:	08000f51 	.word	0x08000f51
 8000ec0:	08000f51 	.word	0x08000f51
 8000ec4:	08000fc7 	.word	0x08000fc7
 8000ec8:	08000fc7 	.word	0x08000fc7
 8000ecc:	08000fc7 	.word	0x08000fc7
 8000ed0:	0800103d 	.word	0x0800103d
 8000ed4:	0800103d 	.word	0x0800103d
 8000ed8:	0800103d 	.word	0x0800103d
		{
			// Leitungen Zelle 1/2 bis 3/4
			case 0:
			case 1:
			case 2:
				openwire[i] = (((tmp_data[i*2+33] << 8) + tmp_data[i*2+32]) - ((tmp_data[i*2+1] << 8) + tmp_data[i*2]));
 8000edc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	3321      	adds	r3, #33	; 0x21
 8000ee4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000ee8:	4413      	add	r3, r2
 8000eea:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000ef8:	3310      	adds	r3, #16
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000f00:	440b      	add	r3, r1
 8000f02:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	4413      	add	r3, r2
 8000f0a:	b299      	uxth	r1, r3
 8000f0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	3301      	adds	r3, #1
 8000f14:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000f18:	4413      	add	r3, r2
 8000f1a:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	021b      	lsls	r3, r3, #8
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8000f2e:	4403      	add	r3, r0
 8000f30:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	4413      	add	r3, r2
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000f3e:	1a8a      	subs	r2, r1, r2
 8000f40:	b292      	uxth	r2, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000f48:	440b      	add	r3, r1
 8000f4a:	f823 2c60 	strh.w	r2, [r3, #-96]
				break;
 8000f4e:	e0b1      	b.n	80010b4 <ltc6811_openwire+0x30c>
			// Leitungen Zelle 4/5 bis 6/7
			case 3:
			case 4:
			case 5:
				openwire[i] = (((tmp_data[i*2+35] << 8) + tmp_data[i*2+34]) - ((tmp_data[i*2+3] << 8) + tmp_data[i*2+2]));
 8000f50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	3323      	adds	r3, #35	; 0x23
 8000f58:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000f5c:	4413      	add	r3, r2
 8000f5e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000f6c:	3311      	adds	r3, #17
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000f74:	440b      	add	r3, r1
 8000f76:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	4413      	add	r3, r2
 8000f7e:	b299      	uxth	r1, r3
 8000f80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	3303      	adds	r3, #3
 8000f88:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000f8c:	4413      	add	r3, r2
 8000f8e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	021b      	lsls	r3, r3, #8
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8000fa4:	4403      	add	r3, r0
 8000fa6:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	4413      	add	r3, r2
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000fb4:	1a8a      	subs	r2, r1, r2
 8000fb6:	b292      	uxth	r2, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f823 2c60 	strh.w	r2, [r3, #-96]
				break;
 8000fc4:	e076      	b.n	80010b4 <ltc6811_openwire+0x30c>
			// Leitungen Zelle 7/8 bis 9/10
			case 6:
			case 7:
			case 8:
				openwire[i] = (((tmp_data[i*2+37] << 8) + tmp_data[i*2+36]) - ((tmp_data[i*2+5] << 8) + tmp_data[i*2+4]));
 8000fc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	3325      	adds	r3, #37	; 0x25
 8000fce:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000fd2:	4413      	add	r3, r2
 8000fd4:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000fe2:	3312      	adds	r3, #18
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000fea:	440b      	add	r3, r1
 8000fec:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	4413      	add	r3, r2
 8000ff4:	b299      	uxth	r1, r3
 8000ff6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	3305      	adds	r3, #5
 8000ffe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001002:	4413      	add	r3, r2
 8001004:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001008:	b29b      	uxth	r3, r3
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b29a      	uxth	r2, r3
 800100e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001012:	3302      	adds	r3, #2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800101a:	4403      	add	r3, r0
 800101c:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001020:	b29b      	uxth	r3, r3
 8001022:	4413      	add	r3, r2
 8001024:	b29a      	uxth	r2, r3
 8001026:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800102a:	1a8a      	subs	r2, r1, r2
 800102c:	b292      	uxth	r2, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001034:	440b      	add	r3, r1
 8001036:	f823 2c60 	strh.w	r2, [r3, #-96]
				break;
 800103a:	e03b      	b.n	80010b4 <ltc6811_openwire+0x30c>
			// Leitungen Zelle 10/11 und 11/12
			case 9:
			case 10:
			case 11:
				openwire[i] = (((tmp_data[i*2+39] << 8) + tmp_data[i*2+38]) - ((tmp_data[i*2+7] << 8) + tmp_data[i*2+6]));
 800103c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	3327      	adds	r3, #39	; 0x27
 8001044:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001048:	4413      	add	r3, r2
 800104a:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800104e:	b29b      	uxth	r3, r3
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	b29a      	uxth	r2, r3
 8001054:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001058:	3313      	adds	r3, #19
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001060:	440b      	add	r3, r1
 8001062:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001066:	b29b      	uxth	r3, r3
 8001068:	4413      	add	r3, r2
 800106a:	b299      	uxth	r1, r3
 800106c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	3307      	adds	r3, #7
 8001074:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001078:	4413      	add	r3, r2
 800107a:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800107e:	b29b      	uxth	r3, r3
 8001080:	021b      	lsls	r3, r3, #8
 8001082:	b29a      	uxth	r2, r3
 8001084:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001088:	3303      	adds	r3, #3
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001090:	4403      	add	r3, r0
 8001092:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001096:	b29b      	uxth	r3, r3
 8001098:	4413      	add	r3, r2
 800109a:	b29a      	uxth	r2, r3
 800109c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80010a0:	1a8a      	subs	r2, r1, r2
 80010a2:	b292      	uxth	r2, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80010aa:	440b      	add	r3, r1
 80010ac:	f823 2c60 	strh.w	r2, [r3, #-96]
				break;
 80010b0:	e000      	b.n	80010b4 <ltc6811_openwire+0x30c>
			default:
			break;
 80010b2:	bf00      	nop
	for (uint8_t i = 1; i < 12; i++)
 80010b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80010b8:	3301      	adds	r3, #1
 80010ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80010be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80010c2:	2b0b      	cmp	r3, #11
 80010c4:	f67f aee9 	bls.w	8000e9a <ltc6811_openwire+0xf2>
		}
	}

	// Schleife zum Pruefen der Daten
	for (uint8_t i = 1; i < 12; i++)
 80010c8:	2301      	movs	r3, #1
 80010ca:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 80010ce:	e01b      	b.n	8001108 <ltc6811_openwire+0x360>
	{
		// Vergleiche Messdaten mit Threshold
		if (openwire[i] > OPENWIRE_THRESHOLD)
 80010d0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80010da:	4413      	add	r3, r2
 80010dc:	f833 3c60 	ldrh.w	r3, [r3, #-96]
 80010e0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80010e4:	d90b      	bls.n	80010fe <ltc6811_openwire+0x356>
		{
			cell[0] |= (1 << i);												// Wenn Threshold ueberschritten, Offene Leitung
 80010e6:	8b3b      	ldrh	r3, [r7, #24]
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80010ee:	2101      	movs	r1, #1
 80010f0:	fa01 f303 	lsl.w	r3, r1, r3
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	833b      	strh	r3, [r7, #24]
	for (uint8_t i = 1; i < 12; i++)
 80010fe:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001102:	3301      	adds	r3, #1
 8001104:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8001108:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800110c:	2b0b      	cmp	r3, #11
 800110e:	d9df      	bls.n	80010d0 <ltc6811_openwire+0x328>
		}
	}

	// Offene Leitung erste Zelle messen
	if (((tmp_data[1] << 8) + tmp_data[0]) == 0)
 8001110:	7f7b      	ldrb	r3, [r7, #29]
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	7f3a      	ldrb	r2, [r7, #28]
 8001116:	4413      	add	r3, r2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d104      	bne.n	8001126 <ltc6811_openwire+0x37e>
	{
		cell[0] |= (1 << 0);													// Unterste Leitung Offen
 800111c:	8b3b      	ldrh	r3, [r7, #24]
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	b29b      	uxth	r3, r3
 8001124:	833b      	strh	r3, [r7, #24]
	}

	// Offene Leitung letzte Zelle messen
	if (((tmp_data[61] << 8) + tmp_data[60]) == 0)
 8001126:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8001130:	4413      	add	r3, r2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d104      	bne.n	8001140 <ltc6811_openwire+0x398>
	{
		cell[0] |= (1 << 12);													// Oberste Leitung offen
 8001136:	8b3b      	ldrh	r3, [r7, #24]
 8001138:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800113c:	b29b      	uxth	r3, r3
 800113e:	833b      	strh	r3, [r7, #24]
	}

	// Wenn offene Leitung vorhanden
	if (cell[0] != 0)
 8001140:	8b3b      	ldrh	r3, [r7, #24]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <ltc6811_openwire+0x3a2>
	{
		return 1;															// Open Wire nicht OK
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <ltc6811_openwire+0x3a4>
	}

	return 0;																// Open Wire OK
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	3760      	adds	r7, #96	; 0x60
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t\t\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t\t\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 800115a:	2115      	movs	r1, #21
 800115c:	483b      	ldr	r0, [pc, #236]	; (800124c <collectHardwareInfo+0xf8>)
 800115e:	f7ff f9ef 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 8001162:	f001 fcdb 	bl	8002b1c <HAL_GetDEVID>
 8001166:	4603      	mov	r3, r0
 8001168:	210a      	movs	r1, #10
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fa16 	bl	800059c <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 8001170:	2117      	movs	r1, #23
 8001172:	4837      	ldr	r0, [pc, #220]	; (8001250 <collectHardwareInfo+0xfc>)
 8001174:	f7ff f9e4 	bl	8000540 <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 8001178:	f001 fcc4 	bl	8002b04 <HAL_GetREVID>
 800117c:	4603      	mov	r3, r0
 800117e:	f242 0201 	movw	r2, #8193	; 0x2001
 8001182:	4293      	cmp	r3, r2
 8001184:	d016      	beq.n	80011b4 <collectHardwareInfo+0x60>
 8001186:	f242 0201 	movw	r2, #8193	; 0x2001
 800118a:	4293      	cmp	r3, r2
 800118c:	d817      	bhi.n	80011be <collectHardwareInfo+0x6a>
 800118e:	f241 0201 	movw	r2, #4097	; 0x1001
 8001192:	4293      	cmp	r3, r2
 8001194:	d004      	beq.n	80011a0 <collectHardwareInfo+0x4c>
 8001196:	f241 0203 	movw	r2, #4099	; 0x1003
 800119a:	4293      	cmp	r3, r2
 800119c:	d005      	beq.n	80011aa <collectHardwareInfo+0x56>
 800119e:	e00e      	b.n	80011be <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 80011a0:	2101      	movs	r1, #1
 80011a2:	482c      	ldr	r0, [pc, #176]	; (8001254 <collectHardwareInfo+0x100>)
 80011a4:	f7ff f9cc 	bl	8000540 <uartTransmit>
			break;
 80011a8:	e011      	b.n	80011ce <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 80011aa:	2101      	movs	r1, #1
 80011ac:	482a      	ldr	r0, [pc, #168]	; (8001258 <collectHardwareInfo+0x104>)
 80011ae:	f7ff f9c7 	bl	8000540 <uartTransmit>
			break;
 80011b2:	e00c      	b.n	80011ce <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 80011b4:	2101      	movs	r1, #1
 80011b6:	4829      	ldr	r0, [pc, #164]	; (800125c <collectHardwareInfo+0x108>)
 80011b8:	f7ff f9c2 	bl	8000540 <uartTransmit>
			break;
 80011bc:	e007      	b.n	80011ce <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 80011be:	f001 fca1 	bl	8002b04 <HAL_GetREVID>
 80011c2:	4603      	mov	r3, r0
 80011c4:	210a      	movs	r1, #10
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f9e8 	bl	800059c <uartTransmitNumber>
			break;
 80011cc:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 80011ce:	2115      	movs	r1, #21
 80011d0:	4823      	ldr	r0, [pc, #140]	; (8001260 <collectHardwareInfo+0x10c>)
 80011d2:	f7ff f9b5 	bl	8000540 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 80011d6:	f002 ff05 	bl	8003fe4 <HAL_RCC_GetSysClockFreq>
 80011da:	6078      	str	r0, [r7, #4]
		frequency = frequency / 1000000;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a21      	ldr	r2, [pc, #132]	; (8001264 <collectHardwareInfo+0x110>)
 80011e0:	fba2 2303 	umull	r2, r3, r2, r3
 80011e4:	0c9b      	lsrs	r3, r3, #18
 80011e6:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 80011e8:	210a      	movs	r1, #10
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff f9d6 	bl	800059c <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 80011f0:	2104      	movs	r1, #4
 80011f2:	481d      	ldr	r0, [pc, #116]	; (8001268 <collectHardwareInfo+0x114>)
 80011f4:	f7ff f9a4 	bl	8000540 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 80011f8:	2111      	movs	r1, #17
 80011fa:	481c      	ldr	r0, [pc, #112]	; (800126c <collectHardwareInfo+0x118>)
 80011fc:	f7ff f9a0 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 8001200:	f001 fc9a 	bl	8002b38 <HAL_GetUIDw0>
 8001204:	4603      	mov	r3, r0
 8001206:	2110      	movs	r1, #16
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f9c7 	bl	800059c <uartTransmitNumber>

	uartTransmit(" ", 1);
 800120e:	2101      	movs	r1, #1
 8001210:	4817      	ldr	r0, [pc, #92]	; (8001270 <collectHardwareInfo+0x11c>)
 8001212:	f7ff f995 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 8001216:	f001 fc9b 	bl	8002b50 <HAL_GetUIDw1>
 800121a:	4603      	mov	r3, r0
 800121c:	2110      	movs	r1, #16
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f9bc 	bl	800059c <uartTransmitNumber>

	uartTransmit(" ", 1);
 8001224:	2101      	movs	r1, #1
 8001226:	4812      	ldr	r0, [pc, #72]	; (8001270 <collectHardwareInfo+0x11c>)
 8001228:	f7ff f98a 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 800122c:	f001 fc9c 	bl	8002b68 <HAL_GetUIDw2>
 8001230:	4603      	mov	r3, r0
 8001232:	2110      	movs	r1, #16
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f9b1 	bl	800059c <uartTransmitNumber>

	uartTransmit("\n", 1);
 800123a:	2101      	movs	r1, #1
 800123c:	480d      	ldr	r0, [pc, #52]	; (8001274 <collectHardwareInfo+0x120>)
 800123e:	f7ff f97f 	bl	8000540 <uartTransmit>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	08007438 	.word	0x08007438
 8001250:	08007450 	.word	0x08007450
 8001254:	08007468 	.word	0x08007468
 8001258:	0800746c 	.word	0x0800746c
 800125c:	08007470 	.word	0x08007470
 8001260:	08007474 	.word	0x08007474
 8001264:	431bde83 	.word	0x431bde83
 8001268:	0800748c 	.word	0x0800748c
 800126c:	08007494 	.word	0x08007494
 8001270:	080074a8 	.word	0x080074a8
 8001274:	080074ac 	.word	0x080074ac

08001278 <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t\t\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 800127c:	2114      	movs	r1, #20
 800127e:	4824      	ldr	r0, [pc, #144]	; (8001310 <collectMiddlewareInfo+0x98>)
 8001280:	f7ff f95e 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8001284:	210a      	movs	r1, #10
 8001286:	2005      	movs	r0, #5
 8001288:	f7ff f988 	bl	800059c <uartTransmitNumber>
	uartTransmit(".", 1);
 800128c:	2101      	movs	r1, #1
 800128e:	4821      	ldr	r0, [pc, #132]	; (8001314 <collectMiddlewareInfo+0x9c>)
 8001290:	f7ff f956 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8001294:	210a      	movs	r1, #10
 8001296:	2001      	movs	r0, #1
 8001298:	f7ff f980 	bl	800059c <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 800129c:	2112      	movs	r1, #18
 800129e:	481e      	ldr	r0, [pc, #120]	; (8001318 <collectMiddlewareInfo+0xa0>)
 80012a0:	f7ff f94e 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 80012a4:	f001 fc24 	bl	8002af0 <HAL_GetHalVersion>
 80012a8:	4603      	mov	r3, r0
 80012aa:	0e1b      	lsrs	r3, r3, #24
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	210a      	movs	r1, #10
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f973 	bl	800059c <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 80012b6:	2101      	movs	r1, #1
 80012b8:	4816      	ldr	r0, [pc, #88]	; (8001314 <collectMiddlewareInfo+0x9c>)
 80012ba:	f7ff f941 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 80012be:	f001 fc17 	bl	8002af0 <HAL_GetHalVersion>
 80012c2:	4603      	mov	r3, r0
 80012c4:	0c1b      	lsrs	r3, r3, #16
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	210a      	movs	r1, #10
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f966 	bl	800059c <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 80012d0:	2101      	movs	r1, #1
 80012d2:	4810      	ldr	r0, [pc, #64]	; (8001314 <collectMiddlewareInfo+0x9c>)
 80012d4:	f7ff f934 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 80012d8:	f001 fc0a 	bl	8002af0 <HAL_GetHalVersion>
 80012dc:	4603      	mov	r3, r0
 80012de:	0a1b      	lsrs	r3, r3, #8
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	210a      	movs	r1, #10
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f959 	bl	800059c <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 80012ea:	2101      	movs	r1, #1
 80012ec:	4809      	ldr	r0, [pc, #36]	; (8001314 <collectMiddlewareInfo+0x9c>)
 80012ee:	f7ff f927 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 80012f2:	f001 fbfd 	bl	8002af0 <HAL_GetHalVersion>
 80012f6:	4603      	mov	r3, r0
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	210a      	movs	r1, #10
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f94d 	bl	800059c <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 8001302:	2101      	movs	r1, #1
 8001304:	4805      	ldr	r0, [pc, #20]	; (800131c <collectMiddlewareInfo+0xa4>)
 8001306:	f7ff f91b 	bl	8000540 <uartTransmit>
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	080074b0 	.word	0x080074b0
 8001314:	080074c4 	.word	0x080074c4
 8001318:	080074c8 	.word	0x080074c8
 800131c:	080074ac 	.word	0x080074ac

08001320 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 8001324:	2111      	movs	r1, #17
 8001326:	4826      	ldr	r0, [pc, #152]	; (80013c0 <collectSoftwareInfo+0xa0>)
 8001328:	f7ff f90a 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 800132c:	2108      	movs	r1, #8
 800132e:	4825      	ldr	r0, [pc, #148]	; (80013c4 <collectSoftwareInfo+0xa4>)
 8001330:	f7ff f906 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8001334:	2111      	movs	r1, #17
 8001336:	4824      	ldr	r0, [pc, #144]	; (80013c8 <collectSoftwareInfo+0xa8>)
 8001338:	f7ff f902 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 800133c:	2108      	movs	r1, #8
 800133e:	4823      	ldr	r0, [pc, #140]	; (80013cc <collectSoftwareInfo+0xac>)
 8001340:	f7ff f8fe 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8001344:	210f      	movs	r1, #15
 8001346:	4822      	ldr	r0, [pc, #136]	; (80013d0 <collectSoftwareInfo+0xb0>)
 8001348:	f7ff f8fa 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 800134c:	2129      	movs	r1, #41	; 0x29
 800134e:	4821      	ldr	r0, [pc, #132]	; (80013d4 <collectSoftwareInfo+0xb4>)
 8001350:	f7ff f8f6 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8001354:	2101      	movs	r1, #1
 8001356:	4820      	ldr	r0, [pc, #128]	; (80013d8 <collectSoftwareInfo+0xb8>)
 8001358:	f7ff f8f2 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 800135c:	2116      	movs	r1, #22
 800135e:	481f      	ldr	r0, [pc, #124]	; (80013dc <collectSoftwareInfo+0xbc>)
 8001360:	f7ff f8ee 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 8001364:	2105      	movs	r1, #5
 8001366:	481e      	ldr	r0, [pc, #120]	; (80013e0 <collectSoftwareInfo+0xc0>)
 8001368:	f7ff f8ea 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 800136c:	2115      	movs	r1, #21
 800136e:	481d      	ldr	r0, [pc, #116]	; (80013e4 <collectSoftwareInfo+0xc4>)
 8001370:	f7ff f8e6 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 8001374:	2108      	movs	r1, #8
 8001376:	481c      	ldr	r0, [pc, #112]	; (80013e8 <collectSoftwareInfo+0xc8>)
 8001378:	f7ff f8e2 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 800137c:	2116      	movs	r1, #22
 800137e:	481b      	ldr	r0, [pc, #108]	; (80013ec <collectSoftwareInfo+0xcc>)
 8001380:	f7ff f8de 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 8001384:	2111      	movs	r1, #17
 8001386:	481a      	ldr	r0, [pc, #104]	; (80013f0 <collectSoftwareInfo+0xd0>)
 8001388:	f7ff f8da 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 800138c:	2101      	movs	r1, #1
 800138e:	4812      	ldr	r0, [pc, #72]	; (80013d8 <collectSoftwareInfo+0xb8>)
 8001390:	f7ff f8d6 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 8001394:	2111      	movs	r1, #17
 8001396:	4817      	ldr	r0, [pc, #92]	; (80013f4 <collectSoftwareInfo+0xd4>)
 8001398:	f7ff f8d2 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 800139c:	210b      	movs	r1, #11
 800139e:	4816      	ldr	r0, [pc, #88]	; (80013f8 <collectSoftwareInfo+0xd8>)
 80013a0:	f7ff f8ce 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 80013a4:	2111      	movs	r1, #17
 80013a6:	4815      	ldr	r0, [pc, #84]	; (80013fc <collectSoftwareInfo+0xdc>)
 80013a8:	f7ff f8ca 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 80013ac:	2109      	movs	r1, #9
 80013ae:	4814      	ldr	r0, [pc, #80]	; (8001400 <collectSoftwareInfo+0xe0>)
 80013b0:	f7ff f8c6 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80013b4:	2101      	movs	r1, #1
 80013b6:	4808      	ldr	r0, [pc, #32]	; (80013d8 <collectSoftwareInfo+0xb8>)
 80013b8:	f7ff f8c2 	bl	8000540 <uartTransmit>
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	080074dc 	.word	0x080074dc
 80013c4:	080074f0 	.word	0x080074f0
 80013c8:	080074f8 	.word	0x080074f8
 80013cc:	0800750c 	.word	0x0800750c
 80013d0:	08007514 	.word	0x08007514
 80013d4:	08007524 	.word	0x08007524
 80013d8:	080074ac 	.word	0x080074ac
 80013dc:	08007550 	.word	0x08007550
 80013e0:	08007568 	.word	0x08007568
 80013e4:	08007570 	.word	0x08007570
 80013e8:	08007588 	.word	0x08007588
 80013ec:	08007590 	.word	0x08007590
 80013f0:	080075a8 	.word	0x080075a8
 80013f4:	080075bc 	.word	0x080075bc
 80013f8:	080075d0 	.word	0x080075d0
 80013fc:	080075dc 	.word	0x080075dc
 8001400:	080075f0 	.word	0x080075f0

08001404 <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 8001408:	2115      	movs	r1, #21
 800140a:	4814      	ldr	r0, [pc, #80]	; (800145c <collectGitcounts+0x58>)
 800140c:	f7ff f898 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 8001410:	2103      	movs	r1, #3
 8001412:	4813      	ldr	r0, [pc, #76]	; (8001460 <collectGitcounts+0x5c>)
 8001414:	f7ff f894 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 8001418:	2117      	movs	r1, #23
 800141a:	4812      	ldr	r0, [pc, #72]	; (8001464 <collectGitcounts+0x60>)
 800141c:	f7ff f890 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 8001420:	2103      	movs	r1, #3
 8001422:	4811      	ldr	r0, [pc, #68]	; (8001468 <collectGitcounts+0x64>)
 8001424:	f7ff f88c 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 8001428:	211c      	movs	r1, #28
 800142a:	4810      	ldr	r0, [pc, #64]	; (800146c <collectGitcounts+0x68>)
 800142c:	f7ff f888 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 8001430:	2103      	movs	r1, #3
 8001432:	480f      	ldr	r0, [pc, #60]	; (8001470 <collectGitcounts+0x6c>)
 8001434:	f7ff f884 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8001438:	2116      	movs	r1, #22
 800143a:	480e      	ldr	r0, [pc, #56]	; (8001474 <collectGitcounts+0x70>)
 800143c:	f7ff f880 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8001440:	2102      	movs	r1, #2
 8001442:	480d      	ldr	r0, [pc, #52]	; (8001478 <collectGitcounts+0x74>)
 8001444:	f7ff f87c 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8001448:	2115      	movs	r1, #21
 800144a:	480c      	ldr	r0, [pc, #48]	; (800147c <collectGitcounts+0x78>)
 800144c:	f7ff f878 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 8001450:	2102      	movs	r1, #2
 8001452:	480b      	ldr	r0, [pc, #44]	; (8001480 <collectGitcounts+0x7c>)
 8001454:	f7ff f874 	bl	8000540 <uartTransmit>
}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}
 800145c:	080075fc 	.word	0x080075fc
 8001460:	08007614 	.word	0x08007614
 8001464:	08007618 	.word	0x08007618
 8001468:	08007630 	.word	0x08007630
 800146c:	08007634 	.word	0x08007634
 8001470:	08007650 	.word	0x08007650
 8001474:	08007550 	.word	0x08007550
 8001478:	08007654 	.word	0x08007654
 800147c:	08007570 	.word	0x08007570
 8001480:	08007658 	.word	0x08007658

08001484 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8001488:	2111      	movs	r1, #17
 800148a:	480e      	ldr	r0, [pc, #56]	; (80014c4 <collectSystemInfo+0x40>)
 800148c:	f7ff f858 	bl	8000540 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8001490:	f7ff fe60 	bl	8001154 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8001494:	2111      	movs	r1, #17
 8001496:	480c      	ldr	r0, [pc, #48]	; (80014c8 <collectSystemInfo+0x44>)
 8001498:	f7ff f852 	bl	8000540 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 800149c:	f7ff ff40 	bl	8001320 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 80014a0:	2113      	movs	r1, #19
 80014a2:	480a      	ldr	r0, [pc, #40]	; (80014cc <collectSystemInfo+0x48>)
 80014a4:	f7ff f84c 	bl	8000540 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 80014a8:	f7ff fee6 	bl	8001278 <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 80014ac:	2113      	movs	r1, #19
 80014ae:	4808      	ldr	r0, [pc, #32]	; (80014d0 <collectSystemInfo+0x4c>)
 80014b0:	f7ff f846 	bl	8000540 <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 80014b4:	f7ff ffa6 	bl	8001404 <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 80014b8:	2103      	movs	r1, #3
 80014ba:	4806      	ldr	r0, [pc, #24]	; (80014d4 <collectSystemInfo+0x50>)
 80014bc:	f7ff f840 	bl	8000540 <uartTransmit>
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	0800765c 	.word	0x0800765c
 80014c8:	08007670 	.word	0x08007670
 80014cc:	08007684 	.word	0x08007684
 80014d0:	08007698 	.word	0x08007698
 80014d4:	080076ac 	.word	0x080076ac

080014d8 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 80014de:	2300      	movs	r3, #0
 80014e0:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 80014e2:	4b25      	ldr	r3, [pc, #148]	; (8001578 <readResetSource+0xa0>)
 80014e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d002      	beq.n	80014f4 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	3301      	adds	r3, #1
 80014f2:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 80014f4:	4b20      	ldr	r3, [pc, #128]	; (8001578 <readResetSource+0xa0>)
 80014f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d002      	beq.n	8001506 <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	3302      	adds	r3, #2
 8001504:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 8001506:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <readResetSource+0xa0>)
 8001508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800150a:	2b00      	cmp	r3, #0
 800150c:	da02      	bge.n	8001514 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	3304      	adds	r3, #4
 8001512:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8001514:	4b18      	ldr	r3, [pc, #96]	; (8001578 <readResetSource+0xa0>)
 8001516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d002      	beq.n	8001526 <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	3308      	adds	r3, #8
 8001524:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 8001526:	4b14      	ldr	r3, [pc, #80]	; (8001578 <readResetSource+0xa0>)
 8001528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800152a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d002      	beq.n	8001538 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	3310      	adds	r3, #16
 8001536:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <readResetSource+0xa0>)
 800153a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800153c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d002      	beq.n	800154a <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	3320      	adds	r3, #32
 8001548:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <readResetSource+0xa0>)
 800154c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800154e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d002      	beq.n	800155c <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	3340      	adds	r3, #64	; 0x40
 800155a:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <readResetSource+0xa0>)
 800155e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001560:	4a05      	ldr	r2, [pc, #20]	; (8001578 <readResetSource+0xa0>)
 8001562:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001566:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8001568:	79fb      	ldrb	r3, [r7, #7]
}
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800

0800157c <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8001586:	2106      	movs	r1, #6
 8001588:	482a      	ldr	r0, [pc, #168]	; (8001634 <printResetSource+0xb8>)
 800158a:	f7fe ffd9 	bl	8000540 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d104      	bne.n	800159e <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 8001594:	210f      	movs	r1, #15
 8001596:	4828      	ldr	r0, [pc, #160]	; (8001638 <printResetSource+0xbc>)
 8001598:	f7fe ffd2 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 800159c:	e046      	b.n	800162c <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 80015a8:	2118      	movs	r1, #24
 80015aa:	4824      	ldr	r0, [pc, #144]	; (800163c <printResetSource+0xc0>)
 80015ac:	f7fe ffc8 	bl	8000540 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 80015ba:	2116      	movs	r1, #22
 80015bc:	4820      	ldr	r0, [pc, #128]	; (8001640 <printResetSource+0xc4>)
 80015be:	f7fe ffbf 	bl	8000540 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 80015cc:	210a      	movs	r1, #10
 80015ce:	481d      	ldr	r0, [pc, #116]	; (8001644 <printResetSource+0xc8>)
 80015d0:	f7fe ffb6 	bl	8000540 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 80015de:	2110      	movs	r1, #16
 80015e0:	4819      	ldr	r0, [pc, #100]	; (8001648 <printResetSource+0xcc>)
 80015e2:	f7fe ffad 	bl	8000540 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	f003 0310 	and.w	r3, r3, #16
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 80015f0:	210f      	movs	r1, #15
 80015f2:	4816      	ldr	r0, [pc, #88]	; (800164c <printResetSource+0xd0>)
 80015f4:	f7fe ffa4 	bl	8000540 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f003 0320 	and.w	r3, r3, #32
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 8001602:	210f      	movs	r1, #15
 8001604:	4812      	ldr	r0, [pc, #72]	; (8001650 <printResetSource+0xd4>)
 8001606:	f7fe ff9b 	bl	8000540 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8001614:	210a      	movs	r1, #10
 8001616:	480f      	ldr	r0, [pc, #60]	; (8001654 <printResetSource+0xd8>)
 8001618:	f7fe ff92 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 800161c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001620:	2b00      	cmp	r3, #0
 8001622:	da03      	bge.n	800162c <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8001624:	2105      	movs	r1, #5
 8001626:	480c      	ldr	r0, [pc, #48]	; (8001658 <printResetSource+0xdc>)
 8001628:	f7fe ff8a 	bl	8000540 <uartTransmit>
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	080076b0 	.word	0x080076b0
 8001638:	080076b8 	.word	0x080076b8
 800163c:	080076c8 	.word	0x080076c8
 8001640:	080076e4 	.word	0x080076e4
 8001644:	080076fc 	.word	0x080076fc
 8001648:	08007708 	.word	0x08007708
 800164c:	0800771c 	.word	0x0800771c
 8001650:	0800772c 	.word	0x0800772c
 8001654:	0800773c 	.word	0x0800773c
 8001658:	08007748 	.word	0x08007748

0800165c <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 8001660:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001664:	4850      	ldr	r0, [pc, #320]	; (80017a8 <readall_inputs+0x14c>)
 8001666:	f002 f8a1 	bl	80037ac <HAL_GPIO_ReadPin>
 800166a:	4603      	mov	r3, r0
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	b2d9      	uxtb	r1, r3
 8001672:	4a4e      	ldr	r2, [pc, #312]	; (80017ac <readall_inputs+0x150>)
 8001674:	7813      	ldrb	r3, [r2, #0]
 8001676:	f361 0300 	bfi	r3, r1, #0, #1
 800167a:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 800167c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001680:	484b      	ldr	r0, [pc, #300]	; (80017b0 <readall_inputs+0x154>)
 8001682:	f002 f893 	bl	80037ac <HAL_GPIO_ReadPin>
 8001686:	4603      	mov	r3, r0
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	b2d9      	uxtb	r1, r3
 800168e:	4a47      	ldr	r2, [pc, #284]	; (80017ac <readall_inputs+0x150>)
 8001690:	7813      	ldrb	r3, [r2, #0]
 8001692:	f361 0341 	bfi	r3, r1, #1, #1
 8001696:	7013      	strb	r3, [r2, #0]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8001698:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800169c:	4845      	ldr	r0, [pc, #276]	; (80017b4 <readall_inputs+0x158>)
 800169e:	f002 f885 	bl	80037ac <HAL_GPIO_ReadPin>
 80016a2:	4603      	mov	r3, r0
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	b2d9      	uxtb	r1, r3
 80016aa:	4a40      	ldr	r2, [pc, #256]	; (80017ac <readall_inputs+0x150>)
 80016ac:	7813      	ldrb	r3, [r2, #0]
 80016ae:	f361 03c3 	bfi	r3, r1, #3, #1
 80016b2:	7013      	strb	r3, [r2, #0]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 80016b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016b8:	483e      	ldr	r0, [pc, #248]	; (80017b4 <readall_inputs+0x158>)
 80016ba:	f002 f877 	bl	80037ac <HAL_GPIO_ReadPin>
 80016be:	4603      	mov	r3, r0
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	b2d9      	uxtb	r1, r3
 80016c6:	4a39      	ldr	r2, [pc, #228]	; (80017ac <readall_inputs+0x150>)
 80016c8:	7813      	ldrb	r3, [r2, #0]
 80016ca:	f361 1304 	bfi	r3, r1, #4, #1
 80016ce:	7013      	strb	r3, [r2, #0]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 80016d0:	2101      	movs	r1, #1
 80016d2:	4838      	ldr	r0, [pc, #224]	; (80017b4 <readall_inputs+0x158>)
 80016d4:	f002 f86a 	bl	80037ac <HAL_GPIO_ReadPin>
 80016d8:	4603      	mov	r3, r0
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	b2d9      	uxtb	r1, r3
 80016e0:	4a32      	ldr	r2, [pc, #200]	; (80017ac <readall_inputs+0x150>)
 80016e2:	7813      	ldrb	r3, [r2, #0]
 80016e4:	f361 1345 	bfi	r3, r1, #5, #1
 80016e8:	7013      	strb	r3, [r2, #0]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 80016ea:	2104      	movs	r1, #4
 80016ec:	4831      	ldr	r0, [pc, #196]	; (80017b4 <readall_inputs+0x158>)
 80016ee:	f002 f85d 	bl	80037ac <HAL_GPIO_ReadPin>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	b2d9      	uxtb	r1, r3
 80016fa:	4a2c      	ldr	r2, [pc, #176]	; (80017ac <readall_inputs+0x150>)
 80016fc:	7813      	ldrb	r3, [r2, #0]
 80016fe:	f361 1386 	bfi	r3, r1, #6, #1
 8001702:	7013      	strb	r3, [r2, #0]

	// SDC-Eingaenge einlesen
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);					// IMD OK, Akku
 8001704:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001708:	4827      	ldr	r0, [pc, #156]	; (80017a8 <readall_inputs+0x14c>)
 800170a:	f002 f84f 	bl	80037ac <HAL_GPIO_ReadPin>
 800170e:	4603      	mov	r3, r0
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	b2d9      	uxtb	r1, r3
 8001716:	4a28      	ldr	r2, [pc, #160]	; (80017b8 <readall_inputs+0x15c>)
 8001718:	7813      	ldrb	r3, [r2, #0]
 800171a:	f361 0300 	bfi	r3, r1, #0, #1
 800171e:	7013      	strb	r3, [r2, #0]
	sdc_in.HVIL = HAL_GPIO_ReadPin(SENSE_SDC_HVIL_GPIO_Port, SENSE_SDC_HVIL_Pin);				// Shutdown-Circuit HVIL, OK
 8001720:	2108      	movs	r1, #8
 8001722:	4821      	ldr	r0, [pc, #132]	; (80017a8 <readall_inputs+0x14c>)
 8001724:	f002 f842 	bl	80037ac <HAL_GPIO_ReadPin>
 8001728:	4603      	mov	r3, r0
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	b2d9      	uxtb	r1, r3
 8001730:	4a21      	ldr	r2, [pc, #132]	; (80017b8 <readall_inputs+0x15c>)
 8001732:	7813      	ldrb	r3, [r2, #0]
 8001734:	f361 0341 	bfi	r3, r1, #1, #1
 8001738:	7013      	strb	r3, [r2, #0]
	sdc_in.MotorSDC = HAL_GPIO_ReadPin(SENSE_SDC_MOTOR_GPIO_Port, SENSE_SDC_MOTOR_Pin);			// Shutdown-Circuit Akku, OK
 800173a:	2120      	movs	r1, #32
 800173c:	481a      	ldr	r0, [pc, #104]	; (80017a8 <readall_inputs+0x14c>)
 800173e:	f002 f835 	bl	80037ac <HAL_GPIO_ReadPin>
 8001742:	4603      	mov	r3, r0
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	b2d9      	uxtb	r1, r3
 800174a:	4a1b      	ldr	r2, [pc, #108]	; (80017b8 <readall_inputs+0x15c>)
 800174c:	7813      	ldrb	r3, [r2, #0]
 800174e:	f361 0382 	bfi	r3, r1, #2, #1
 8001752:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8001754:	2110      	movs	r1, #16
 8001756:	4814      	ldr	r0, [pc, #80]	; (80017a8 <readall_inputs+0x14c>)
 8001758:	f002 f828 	bl	80037ac <HAL_GPIO_ReadPin>
 800175c:	4603      	mov	r3, r0
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	b2d9      	uxtb	r1, r3
 8001764:	4a14      	ldr	r2, [pc, #80]	; (80017b8 <readall_inputs+0x15c>)
 8001766:	7813      	ldrb	r3, [r2, #0]
 8001768:	f361 03c3 	bfi	r3, r1, #3, #1
 800176c:	7013      	strb	r3, [r2, #0]
	sdc_in.PrechargeIn = HAL_GPIO_ReadPin(PRECHARGE_IN_GPIO_Port, PRECHARGE_IN_Pin);			// Eingang Precharge abgeschlossen
 800176e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001772:	4812      	ldr	r0, [pc, #72]	; (80017bc <readall_inputs+0x160>)
 8001774:	f002 f81a 	bl	80037ac <HAL_GPIO_ReadPin>
 8001778:	4603      	mov	r3, r0
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	b2d9      	uxtb	r1, r3
 8001780:	4a0d      	ldr	r2, [pc, #52]	; (80017b8 <readall_inputs+0x15c>)
 8001782:	7813      	ldrb	r3, [r2, #0]
 8001784:	f361 1304 	bfi	r3, r1, #4, #1
 8001788:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.OVC = HAL_GPIO_ReadPin(OVC_SENSE_GPIO_Port, OVC_SENSE_Pin);						// Eingang Overcurrent erkannt
 800178a:	2104      	movs	r1, #4
 800178c:	480b      	ldr	r0, [pc, #44]	; (80017bc <readall_inputs+0x160>)
 800178e:	f002 f80d 	bl	80037ac <HAL_GPIO_ReadPin>
 8001792:	4603      	mov	r3, r0
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	b2d9      	uxtb	r1, r3
 800179a:	4a09      	ldr	r2, [pc, #36]	; (80017c0 <readall_inputs+0x164>)
 800179c:	7813      	ldrb	r3, [r2, #0]
 800179e:	f361 0300 	bfi	r3, r1, #0, #1
 80017a2:	7013      	strb	r3, [r2, #0]
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40021000 	.word	0x40021000
 80017ac:	20000060 	.word	0x20000060
 80017b0:	40020c00 	.word	0x40020c00
 80017b4:	40020000 	.word	0x40020000
 80017b8:	20000068 	.word	0x20000068
 80017bc:	40021400 	.word	0x40021400
 80017c0:	20000064 	.word	0x20000064

080017c4 <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 80017c8:	2201      	movs	r2, #1
 80017ca:	2180      	movs	r1, #128	; 0x80
 80017cc:	481b      	ldr	r0, [pc, #108]	; (800183c <testPCB_Leds+0x78>)
 80017ce:	f002 f805 	bl	80037dc <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80017d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017d6:	f001 f967 	bl	8002aa8 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80017da:	2200      	movs	r2, #0
 80017dc:	2180      	movs	r1, #128	; 0x80
 80017de:	4817      	ldr	r0, [pc, #92]	; (800183c <testPCB_Leds+0x78>)
 80017e0:	f001 fffc 	bl	80037dc <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80017e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017e8:	f001 f95e 	bl	8002aa8 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 80017ec:	2201      	movs	r2, #1
 80017ee:	2104      	movs	r1, #4
 80017f0:	4812      	ldr	r0, [pc, #72]	; (800183c <testPCB_Leds+0x78>)
 80017f2:	f001 fff3 	bl	80037dc <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80017f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017fa:	f001 f955 	bl	8002aa8 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80017fe:	2200      	movs	r2, #0
 8001800:	2104      	movs	r1, #4
 8001802:	480e      	ldr	r0, [pc, #56]	; (800183c <testPCB_Leds+0x78>)
 8001804:	f001 ffea 	bl	80037dc <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001808:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800180c:	f001 f94c 	bl	8002aa8 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001810:	2201      	movs	r2, #1
 8001812:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001816:	4809      	ldr	r0, [pc, #36]	; (800183c <testPCB_Leds+0x78>)
 8001818:	f001 ffe0 	bl	80037dc <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 800181c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001820:	f001 f942 	bl	8002aa8 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001824:	2200      	movs	r2, #0
 8001826:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800182a:	4804      	ldr	r0, [pc, #16]	; (800183c <testPCB_Leds+0x78>)
 800182c:	f001 ffd6 	bl	80037dc <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001830:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001834:	f001 f938 	bl	8002aa8 <HAL_Delay>
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40020400 	.word	0x40020400

08001840 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001846:	463b      	mov	r3, r7
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001852:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <MX_ADC1_Init+0x98>)
 8001854:	4a21      	ldr	r2, [pc, #132]	; (80018dc <MX_ADC1_Init+0x9c>)
 8001856:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001858:	4b1f      	ldr	r3, [pc, #124]	; (80018d8 <MX_ADC1_Init+0x98>)
 800185a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800185e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001860:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <MX_ADC1_Init+0x98>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001866:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <MX_ADC1_Init+0x98>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800186c:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <MX_ADC1_Init+0x98>)
 800186e:	2200      	movs	r2, #0
 8001870:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001872:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <MX_ADC1_Init+0x98>)
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800187a:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <MX_ADC1_Init+0x98>)
 800187c:	2200      	movs	r2, #0
 800187e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001880:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <MX_ADC1_Init+0x98>)
 8001882:	4a17      	ldr	r2, [pc, #92]	; (80018e0 <MX_ADC1_Init+0xa0>)
 8001884:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001886:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <MX_ADC1_Init+0x98>)
 8001888:	2200      	movs	r2, #0
 800188a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <MX_ADC1_Init+0x98>)
 800188e:	2201      	movs	r2, #1
 8001890:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <MX_ADC1_Init+0x98>)
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800189a:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <MX_ADC1_Init+0x98>)
 800189c:	2201      	movs	r2, #1
 800189e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018a0:	480d      	ldr	r0, [pc, #52]	; (80018d8 <MX_ADC1_Init+0x98>)
 80018a2:	f001 f96d 	bl	8002b80 <HAL_ADC_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80018ac:	f000 fcbc 	bl	8002228 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80018b0:	2304      	movs	r3, #4
 80018b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018b4:	2301      	movs	r3, #1
 80018b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018bc:	463b      	mov	r3, r7
 80018be:	4619      	mov	r1, r3
 80018c0:	4805      	ldr	r0, [pc, #20]	; (80018d8 <MX_ADC1_Init+0x98>)
 80018c2:	f001 f9a1 	bl	8002c08 <HAL_ADC_ConfigChannel>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80018cc:	f000 fcac 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	2000006c 	.word	0x2000006c
 80018dc:	40012000 	.word	0x40012000
 80018e0:	0f000001 	.word	0x0f000001

080018e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	; 0x28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a15      	ldr	r2, [pc, #84]	; (8001958 <HAL_ADC_MspInit+0x74>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d123      	bne.n	800194e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <HAL_ADC_MspInit+0x78>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	4a14      	ldr	r2, [pc, #80]	; (800195c <HAL_ADC_MspInit+0x78>)
 800190c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001910:	6453      	str	r3, [r2, #68]	; 0x44
 8001912:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_ADC_MspInit+0x78>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	4b0f      	ldr	r3, [pc, #60]	; (800195c <HAL_ADC_MspInit+0x78>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a0e      	ldr	r2, [pc, #56]	; (800195c <HAL_ADC_MspInit+0x78>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b0c      	ldr	r3, [pc, #48]	; (800195c <HAL_ADC_MspInit+0x78>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 8001936:	23f8      	movs	r3, #248	; 0xf8
 8001938:	617b      	str	r3, [r7, #20]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800193a:	2303      	movs	r3, #3
 800193c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	4805      	ldr	r0, [pc, #20]	; (8001960 <HAL_ADC_MspInit+0x7c>)
 800194a:	f001 fd83 	bl	8003454 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800194e:	bf00      	nop
 8001950:	3728      	adds	r7, #40	; 0x28
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40012000 	.word	0x40012000
 800195c:	40023800 	.word	0x40023800
 8001960:	40020000 	.word	0x40020000

08001964 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001968:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <MX_CAN1_Init+0x64>)
 800196a:	4a18      	ldr	r2, [pc, #96]	; (80019cc <MX_CAN1_Init+0x68>)
 800196c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800196e:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <MX_CAN1_Init+0x64>)
 8001970:	2210      	movs	r2, #16
 8001972:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <MX_CAN1_Init+0x64>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <MX_CAN1_Init+0x64>)
 800197c:	2200      	movs	r2, #0
 800197e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <MX_CAN1_Init+0x64>)
 8001982:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001986:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <MX_CAN1_Init+0x64>)
 800198a:	2200      	movs	r2, #0
 800198c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <MX_CAN1_Init+0x64>)
 8001990:	2200      	movs	r2, #0
 8001992:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <MX_CAN1_Init+0x64>)
 8001996:	2200      	movs	r2, #0
 8001998:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <MX_CAN1_Init+0x64>)
 800199c:	2200      	movs	r2, #0
 800199e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <MX_CAN1_Init+0x64>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80019a6:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <MX_CAN1_Init+0x64>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <MX_CAN1_Init+0x64>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80019b2:	4805      	ldr	r0, [pc, #20]	; (80019c8 <MX_CAN1_Init+0x64>)
 80019b4:	f001 fb6c 	bl	8003090 <HAL_CAN_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80019be:	f000 fc33 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200000dc 	.word	0x200000dc
 80019cc:	40006400 	.word	0x40006400

080019d0 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 80019d4:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <MX_CAN3_Init+0x64>)
 80019d6:	4a18      	ldr	r2, [pc, #96]	; (8001a38 <MX_CAN3_Init+0x68>)
 80019d8:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 80019da:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <MX_CAN3_Init+0x64>)
 80019dc:	2206      	movs	r2, #6
 80019de:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 80019e0:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <MX_CAN3_Init+0x64>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <MX_CAN3_Init+0x64>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <MX_CAN3_Init+0x64>)
 80019ee:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80019f2:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <MX_CAN3_Init+0x64>)
 80019f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019fa:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 80019fc:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <MX_CAN3_Init+0x64>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <MX_CAN3_Init+0x64>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001a08:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <MX_CAN3_Init+0x64>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <MX_CAN3_Init+0x64>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001a14:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <MX_CAN3_Init+0x64>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <MX_CAN3_Init+0x64>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001a20:	4804      	ldr	r0, [pc, #16]	; (8001a34 <MX_CAN3_Init+0x64>)
 8001a22:	f001 fb35 	bl	8003090 <HAL_CAN_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001a2c:	f000 fbfc 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	200000b4 	.word	0x200000b4
 8001a38:	40003400 	.word	0x40003400

08001a3c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08e      	sub	sp, #56	; 0x38
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a43      	ldr	r2, [pc, #268]	; (8001b68 <HAL_CAN_MspInit+0x12c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d131      	bne.n	8001ac2 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001a5e:	4b43      	ldr	r3, [pc, #268]	; (8001b6c <HAL_CAN_MspInit+0x130>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	3301      	adds	r3, #1
 8001a64:	4a41      	ldr	r2, [pc, #260]	; (8001b6c <HAL_CAN_MspInit+0x130>)
 8001a66:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001a68:	4b40      	ldr	r3, [pc, #256]	; (8001b6c <HAL_CAN_MspInit+0x130>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d10b      	bne.n	8001a88 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001a70:	4b3f      	ldr	r3, [pc, #252]	; (8001b70 <HAL_CAN_MspInit+0x134>)
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	4a3e      	ldr	r2, [pc, #248]	; (8001b70 <HAL_CAN_MspInit+0x134>)
 8001a76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7c:	4b3c      	ldr	r3, [pc, #240]	; (8001b70 <HAL_CAN_MspInit+0x134>)
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a84:	623b      	str	r3, [r7, #32]
 8001a86:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a88:	4b39      	ldr	r3, [pc, #228]	; (8001b70 <HAL_CAN_MspInit+0x134>)
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8c:	4a38      	ldr	r2, [pc, #224]	; (8001b70 <HAL_CAN_MspInit+0x134>)
 8001a8e:	f043 0308 	orr.w	r3, r3, #8
 8001a92:	6313      	str	r3, [r2, #48]	; 0x30
 8001a94:	4b36      	ldr	r3, [pc, #216]	; (8001b70 <HAL_CAN_MspInit+0x134>)
 8001a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a98:	f003 0308 	and.w	r3, r3, #8
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aac:	2303      	movs	r3, #3
 8001aae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ab0:	2309      	movs	r3, #9
 8001ab2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab8:	4619      	mov	r1, r3
 8001aba:	482e      	ldr	r0, [pc, #184]	; (8001b74 <HAL_CAN_MspInit+0x138>)
 8001abc:	f001 fcca 	bl	8003454 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8001ac0:	e04e      	b.n	8001b60 <HAL_CAN_MspInit+0x124>
  else if(canHandle->Instance==CAN3)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a2c      	ldr	r2, [pc, #176]	; (8001b78 <HAL_CAN_MspInit+0x13c>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d149      	bne.n	8001b60 <HAL_CAN_MspInit+0x124>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001acc:	4b28      	ldr	r3, [pc, #160]	; (8001b70 <HAL_CAN_MspInit+0x134>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	4a27      	ldr	r2, [pc, #156]	; (8001b70 <HAL_CAN_MspInit+0x134>)
 8001ad2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ad6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad8:	4b25      	ldr	r3, [pc, #148]	; (8001b70 <HAL_CAN_MspInit+0x134>)
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ae0:	61bb      	str	r3, [r7, #24]
 8001ae2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001ae4:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <HAL_CAN_MspInit+0x134>)
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	4a21      	ldr	r2, [pc, #132]	; (8001b70 <HAL_CAN_MspInit+0x134>)
 8001aea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001aee:	6413      	str	r3, [r2, #64]	; 0x40
 8001af0:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <HAL_CAN_MspInit+0x134>)
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001afc:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <HAL_CAN_MspInit+0x130>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	3301      	adds	r3, #1
 8001b02:	4a1a      	ldr	r2, [pc, #104]	; (8001b6c <HAL_CAN_MspInit+0x130>)
 8001b04:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001b06:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_CAN_MspInit+0x130>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d10b      	bne.n	8001b26 <HAL_CAN_MspInit+0xea>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001b0e:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <HAL_CAN_MspInit+0x134>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	4a17      	ldr	r2, [pc, #92]	; (8001b70 <HAL_CAN_MspInit+0x134>)
 8001b14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b18:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <HAL_CAN_MspInit+0x134>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_CAN_MspInit+0x134>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a11      	ldr	r2, [pc, #68]	; (8001b70 <HAL_CAN_MspInit+0x134>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <HAL_CAN_MspInit+0x134>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8001b3e:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	2302      	movs	r3, #2
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001b50:	230b      	movs	r3, #11
 8001b52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4808      	ldr	r0, [pc, #32]	; (8001b7c <HAL_CAN_MspInit+0x140>)
 8001b5c:	f001 fc7a 	bl	8003454 <HAL_GPIO_Init>
}
 8001b60:	bf00      	nop
 8001b62:	3738      	adds	r7, #56	; 0x38
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40006400 	.word	0x40006400
 8001b6c:	20000028 	.word	0x20000028
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020c00 	.word	0x40020c00
 8001b78:	40003400 	.word	0x40003400
 8001b7c:	40020000 	.word	0x40020000

08001b80 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08e      	sub	sp, #56	; 0x38
 8001b84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	60da      	str	r2, [r3, #12]
 8001b94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b96:	4bb7      	ldr	r3, [pc, #732]	; (8001e74 <MX_GPIO_Init+0x2f4>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4ab6      	ldr	r2, [pc, #728]	; (8001e74 <MX_GPIO_Init+0x2f4>)
 8001b9c:	f043 0310 	orr.w	r3, r3, #16
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4bb4      	ldr	r3, [pc, #720]	; (8001e74 <MX_GPIO_Init+0x2f4>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0310 	and.w	r3, r3, #16
 8001baa:	623b      	str	r3, [r7, #32]
 8001bac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bae:	4bb1      	ldr	r3, [pc, #708]	; (8001e74 <MX_GPIO_Init+0x2f4>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4ab0      	ldr	r2, [pc, #704]	; (8001e74 <MX_GPIO_Init+0x2f4>)
 8001bb4:	f043 0304 	orr.w	r3, r3, #4
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4bae      	ldr	r3, [pc, #696]	; (8001e74 <MX_GPIO_Init+0x2f4>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	61fb      	str	r3, [r7, #28]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bc6:	4bab      	ldr	r3, [pc, #684]	; (8001e74 <MX_GPIO_Init+0x2f4>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4aaa      	ldr	r2, [pc, #680]	; (8001e74 <MX_GPIO_Init+0x2f4>)
 8001bcc:	f043 0320 	orr.w	r3, r3, #32
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4ba8      	ldr	r3, [pc, #672]	; (8001e74 <MX_GPIO_Init+0x2f4>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f003 0320 	and.w	r3, r3, #32
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bde:	4ba5      	ldr	r3, [pc, #660]	; (8001e74 <MX_GPIO_Init+0x2f4>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4aa4      	ldr	r2, [pc, #656]	; (8001e74 <MX_GPIO_Init+0x2f4>)
 8001be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4ba2      	ldr	r3, [pc, #648]	; (8001e74 <MX_GPIO_Init+0x2f4>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	4b9f      	ldr	r3, [pc, #636]	; (8001e74 <MX_GPIO_Init+0x2f4>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a9e      	ldr	r2, [pc, #632]	; (8001e74 <MX_GPIO_Init+0x2f4>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b9c      	ldr	r3, [pc, #624]	; (8001e74 <MX_GPIO_Init+0x2f4>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0e:	4b99      	ldr	r3, [pc, #612]	; (8001e74 <MX_GPIO_Init+0x2f4>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a98      	ldr	r2, [pc, #608]	; (8001e74 <MX_GPIO_Init+0x2f4>)
 8001c14:	f043 0302 	orr.w	r3, r3, #2
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b96      	ldr	r3, [pc, #600]	; (8001e74 <MX_GPIO_Init+0x2f4>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c26:	4b93      	ldr	r3, [pc, #588]	; (8001e74 <MX_GPIO_Init+0x2f4>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a92      	ldr	r2, [pc, #584]	; (8001e74 <MX_GPIO_Init+0x2f4>)
 8001c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b90      	ldr	r3, [pc, #576]	; (8001e74 <MX_GPIO_Init+0x2f4>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c3e:	4b8d      	ldr	r3, [pc, #564]	; (8001e74 <MX_GPIO_Init+0x2f4>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	4a8c      	ldr	r2, [pc, #560]	; (8001e74 <MX_GPIO_Init+0x2f4>)
 8001c44:	f043 0308 	orr.w	r3, r3, #8
 8001c48:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4a:	4b8a      	ldr	r3, [pc, #552]	; (8001e74 <MX_GPIO_Init+0x2f4>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 8001c56:	2200      	movs	r2, #0
 8001c58:	f248 0187 	movw	r1, #32903	; 0x8087
 8001c5c:	4886      	ldr	r0, [pc, #536]	; (8001e78 <MX_GPIO_Init+0x2f8>)
 8001c5e:	f001 fdbd 	bl	80037dc <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c68:	4884      	ldr	r0, [pc, #528]	; (8001e7c <MX_GPIO_Init+0x2fc>)
 8001c6a:	f001 fdb7 	bl	80037dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin, GPIO_PIN_RESET);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f242 0102 	movw	r1, #8194	; 0x2002
 8001c74:	4882      	ldr	r0, [pc, #520]	; (8001e80 <MX_GPIO_Init+0x300>)
 8001c76:	f001 fdb1 	bl	80037dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f240 6102 	movw	r1, #1538	; 0x602
 8001c80:	4880      	ldr	r0, [pc, #512]	; (8001e84 <MX_GPIO_Init+0x304>)
 8001c82:	f001 fdab 	bl	80037dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8001c86:	2200      	movs	r2, #0
 8001c88:	f244 0184 	movw	r1, #16516	; 0x4084
 8001c8c:	487e      	ldr	r0, [pc, #504]	; (8001e88 <MX_GPIO_Init+0x308>)
 8001c8e:	f001 fda5 	bl	80037dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISOSPI_CS_GPIO_Port, ISOSPI_CS_Pin, GPIO_PIN_SET);
 8001c92:	2201      	movs	r2, #1
 8001c94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c98:	4877      	ldr	r0, [pc, #476]	; (8001e78 <MX_GPIO_Init+0x2f8>)
 8001c9a:	f001 fd9f 	bl	80037dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 8001ca4:	4879      	ldr	r0, [pc, #484]	; (8001e8c <MX_GPIO_Init+0x30c>)
 8001ca6:	f001 fd99 	bl	80037dc <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2118      	movs	r1, #24
 8001cae:	4878      	ldr	r0, [pc, #480]	; (8001e90 <MX_GPIO_Init+0x310>)
 8001cb0:	f001 fd94 	bl	80037dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_CS_Pin|ISOSPI_EN_Pin
 8001cb4:	f648 0387 	movw	r3, #34951	; 0x8887
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
                          |FREIGABE_Pin|INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cca:	4619      	mov	r1, r3
 8001ccc:	486a      	ldr	r0, [pc, #424]	; (8001e78 <MX_GPIO_Init+0x2f8>)
 8001cce:	f001 fbc1 	bl	8003454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 8001cd2:	f44f 739c 	mov.w	r3, #312	; 0x138
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4864      	ldr	r0, [pc, #400]	; (8001e78 <MX_GPIO_Init+0x2f8>)
 8001ce8:	f001 fbb4 	bl	8003454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8001cec:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfe:	4619      	mov	r1, r3
 8001d00:	485d      	ldr	r0, [pc, #372]	; (8001e78 <MX_GPIO_Init+0x2f8>)
 8001d02:	f001 fba7 	bl	8003454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 8001d06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d14:	2300      	movs	r3, #0
 8001d16:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8001d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4857      	ldr	r0, [pc, #348]	; (8001e7c <MX_GPIO_Init+0x2fc>)
 8001d20:	f001 fb98 	bl	8003454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PCPin PC7 PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001d24:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |SD_SW_Pin|GPIO_PIN_7|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d36:	4619      	mov	r1, r3
 8001d38:	4850      	ldr	r0, [pc, #320]	; (8001e7c <MX_GPIO_Init+0x2fc>)
 8001d3a:	f001 fb8b 	bl	8003454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF3 PF4 PF5
                           PFPin PFPin PFPin PFPin
                           PF10 PF11 PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001d3e:	f645 73f9 	movw	r3, #24569	; 0x5ff9
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d44:	2303      	movs	r3, #3
 8001d46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d50:	4619      	mov	r1, r3
 8001d52:	484b      	ldr	r0, [pc, #300]	; (8001e80 <MX_GPIO_Init+0x300>)
 8001d54:	f001 fb7e 	bl	8003454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin;
 8001d58:	f242 0302 	movw	r3, #8194	; 0x2002
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d66:	2300      	movs	r3, #0
 8001d68:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4843      	ldr	r0, [pc, #268]	; (8001e80 <MX_GPIO_Init+0x300>)
 8001d72:	f001 fb6f 	bl	8003454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin|PRECHARGE_IN_Pin;
 8001d76:	f248 0304 	movw	r3, #32772	; 0x8004
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d88:	4619      	mov	r1, r3
 8001d8a:	483d      	ldr	r0, [pc, #244]	; (8001e80 <MX_GPIO_Init+0x300>)
 8001d8c:	f001 fb62 	bl	8003454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|HW_WAKE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 8001d90:	f641 0305 	movw	r3, #6149	; 0x1805
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d96:	2300      	movs	r3, #0
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da2:	4619      	mov	r1, r3
 8001da4:	4837      	ldr	r0, [pc, #220]	; (8001e84 <MX_GPIO_Init+0x304>)
 8001da6:	f001 fb55 	bl	8003454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 8001daa:	f240 6302 	movw	r3, #1538	; 0x602
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db0:	2301      	movs	r3, #1
 8001db2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db8:	2300      	movs	r3, #0
 8001dba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4830      	ldr	r0, [pc, #192]	; (8001e84 <MX_GPIO_Init+0x304>)
 8001dc4:	f001 fb46 	bl	8003454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8001dc8:	f64b 7373 	movw	r3, #49011	; 0xbf73
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|I2C_SCL_Pin|I2C_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dda:	4619      	mov	r1, r3
 8001ddc:	482a      	ldr	r0, [pc, #168]	; (8001e88 <MX_GPIO_Init+0x308>)
 8001dde:	f001 fb39 	bl	8003454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 8001de2:	f244 0384 	movw	r3, #16516	; 0x4084
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de8:	2301      	movs	r3, #1
 8001dea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df0:	2300      	movs	r3, #0
 8001df2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4823      	ldr	r0, [pc, #140]	; (8001e88 <MX_GPIO_Init+0x308>)
 8001dfc:	f001 fb2a 	bl	8003454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8;
 8001e00:	f240 1343 	movw	r3, #323	; 0x143
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e06:	2303      	movs	r3, #3
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e12:	4619      	mov	r1, r3
 8001e14:	481d      	ldr	r0, [pc, #116]	; (8001e8c <MX_GPIO_Init+0x30c>)
 8001e16:	f001 fb1d 	bl	8003454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|SD_CMD_Pin;
 8001e1a:	f240 7304 	movw	r3, #1796	; 0x704
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e20:	2303      	movs	r3, #3
 8001e22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4818      	ldr	r0, [pc, #96]	; (8001e90 <MX_GPIO_Init+0x310>)
 8001e30:	f001 fb10 	bl	8003454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 8001e34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 8001e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e46:	4619      	mov	r1, r3
 8001e48:	4811      	ldr	r0, [pc, #68]	; (8001e90 <MX_GPIO_Init+0x310>)
 8001e4a:	f001 fb03 	bl	8003454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8001e4e:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e54:	2301      	movs	r3, #1
 8001e56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e64:	4619      	mov	r1, r3
 8001e66:	4809      	ldr	r0, [pc, #36]	; (8001e8c <MX_GPIO_Init+0x30c>)
 8001e68:	f001 faf4 	bl	8003454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|DIGITAL2_Pin;
 8001e6c:	2318      	movs	r3, #24
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e70:	e010      	b.n	8001e94 <MX_GPIO_Init+0x314>
 8001e72:	bf00      	nop
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40020800 	.word	0x40020800
 8001e80:	40021400 	.word	0x40021400
 8001e84:	40020000 	.word	0x40020000
 8001e88:	40020400 	.word	0x40020400
 8001e8c:	40021800 	.word	0x40021800
 8001e90:	40020c00 	.word	0x40020c00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e94:	2301      	movs	r3, #1
 8001e96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4803      	ldr	r0, [pc, #12]	; (8001eb4 <MX_GPIO_Init+0x334>)
 8001ea8:	f001 fad4 	bl	8003454 <HAL_GPIO_Init>

}
 8001eac:	bf00      	nop
 8001eae:	3738      	adds	r7, #56	; 0x38
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40020c00 	.word	0x40020c00

08001eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ebe:	f000 fd96 	bl	80029ee <HAL_Init>

  /* USER CODE BEGIN Init */
  uint16_t spannungen[12] = {0};
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
 8001ed0:	615a      	str	r2, [r3, #20]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ed2:	f000 f917 	bl	8002104 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ed6:	f7ff fe53 	bl	8001b80 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001eda:	f7ff fd43 	bl	8001964 <MX_CAN1_Init>
  MX_SPI4_Init();
 8001ede:	f000 fa0f 	bl	8002300 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 8001ee2:	f000 fce7 	bl	80028b4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001ee6:	f7ff fcab 	bl	8001840 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001eea:	f000 fb45 	bl	8002578 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001eee:	f000 fbc9 	bl	8002684 <MX_TIM4_Init>
  MX_SPI1_Init();
 8001ef2:	f000 f9c7 	bl	8002284 <MX_SPI1_Init>
  MX_CAN3_Init();
 8001ef6:	f7ff fd6b 	bl	80019d0 <MX_CAN3_Init>
  /* USER CODE BEGIN 2 */

	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 8001efa:	f7ff faed 	bl	80014d8 <readResetSource>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fb3b 	bl	800157c <printResetSource>

	/* Teste serielle Schnittstelle*/
	#define TEST_STRING_UART	"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 8001f06:	213a      	movs	r1, #58	; 0x3a
 8001f08:	486d      	ldr	r0, [pc, #436]	; (80020c0 <main+0x208>)
 8001f0a:	f7fe fb19 	bl	8000540 <uartTransmit>

	/* Sammel Systeminformationen */
	collectSystemInfo();
 8001f0e:	f7ff fab9 	bl	8001484 <collectSystemInfo>
#endif

	// Leds Testen
	testPCB_Leds();
 8001f12:	f7ff fc57 	bl	80017c4 <testPCB_Leds>

  	// Lese alle Eingaenge
  	readall_inputs();
 8001f16:	f7ff fba1 	bl	800165c <readall_inputs>

  	// IsoSPI einschalten, Isolierte Spannungsversorgung IsoSPI und HV-Precharge Messung einschalten
  	ISOSPI_ENABLE();
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f20:	4868      	ldr	r0, [pc, #416]	; (80020c4 <main+0x20c>)
 8001f22:	f001 fc5b 	bl	80037dc <HAL_GPIO_WritePin>

    uartTransmit("\n", 1);
 8001f26:	2101      	movs	r1, #1
 8001f28:	4867      	ldr	r0, [pc, #412]	; (80020c8 <main+0x210>)
 8001f2a:	f7fe fb09 	bl	8000540 <uartTransmit>
#define TEST_LTC6811	"Starte Batteriemanagement-System\n"
    uartTransmit(TEST_LTC6811, sizeof(TEST_LTC6811));
 8001f2e:	2122      	movs	r1, #34	; 0x22
 8001f30:	4866      	ldr	r0, [pc, #408]	; (80020cc <main+0x214>)
 8001f32:	f7fe fb05 	bl	8000540 <uartTransmit>

	if ((temp = ltc6811_check()) != 0)									// LTC6804 Selftest durchfuehren
 8001f36:	f7fe fced 	bl	8000914 <ltc6811_check>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4b64      	ldr	r3, [pc, #400]	; (80020d0 <main+0x218>)
 8001f40:	701a      	strb	r2, [r3, #0]
 8001f42:	4b63      	ldr	r3, [pc, #396]	; (80020d0 <main+0x218>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d01e      	beq.n	8001f88 <main+0xd0>
	{
#define LTC6811_FAILED	"Selbsttest LTC6811 fehlerhaft\n"
		uartTransmit(LTC6811_FAILED, sizeof(LTC6811_FAILED));			// Ausgabe bei Fehlerhaftem Selbsttest
 8001f4a:	211f      	movs	r1, #31
 8001f4c:	4861      	ldr	r0, [pc, #388]	; (80020d4 <main+0x21c>)
 8001f4e:	f7fe faf7 	bl	8000540 <uartTransmit>
		leuchten_out.RedLed = 1;										// Variable setzen
 8001f52:	4a61      	ldr	r2, [pc, #388]	; (80020d8 <main+0x220>)
 8001f54:	7813      	ldrb	r3, [r2, #0]
 8001f56:	f043 0320 	orr.w	r3, r3, #32
 8001f5a:	7013      	strb	r3, [r2, #0]
	    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);// Ausgabe auf LEDs
 8001f5c:	4b5e      	ldr	r3, [pc, #376]	; (80020d8 <main+0x220>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	461a      	mov	r2, r3
 8001f68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f6c:	485b      	ldr	r0, [pc, #364]	; (80020dc <main+0x224>)
 8001f6e:	f001 fc35 	bl	80037dc <HAL_GPIO_WritePin>

	    uartTransmitNumber(temp, 10);
 8001f72:	4b57      	ldr	r3, [pc, #348]	; (80020d0 <main+0x218>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	210a      	movs	r1, #10
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe fb0f 	bl	800059c <uartTransmitNumber>
		uartTransmit("\n", 1);
 8001f7e:	2101      	movs	r1, #1
 8001f80:	4851      	ldr	r0, [pc, #324]	; (80020c8 <main+0x210>)
 8001f82:	f7fe fadd 	bl	8000540 <uartTransmit>
 8001f86:	e003      	b.n	8001f90 <main+0xd8>
		//return 0;														// Programm abbrechen
	}
	else
	{
#define LTC6811_PASSED	"Selbsttest LTC6811 erfolgreich\n"
		uartTransmit(LTC6811_PASSED, sizeof(LTC6811_PASSED));			// Ausgabe bei Erfolgreichem Selbsttest
 8001f88:	2120      	movs	r1, #32
 8001f8a:	4855      	ldr	r0, [pc, #340]	; (80020e0 <main+0x228>)
 8001f8c:	f7fe fad8 	bl	8000540 <uartTransmit>
	}

	ltc6811_read(RDCFG, &data[0]);
 8001f90:	4954      	ldr	r1, [pc, #336]	; (80020e4 <main+0x22c>)
 8001f92:	2002      	movs	r0, #2
 8001f94:	f7fe fbca 	bl	800072c <ltc6811_read>

	// Alle Register zuruecksetzen
	ltc6811(CLRCELL);
 8001f98:	f240 7011 	movw	r0, #1809	; 0x711
 8001f9c:	f7fe fb46 	bl	800062c <ltc6811>
	ltc6811(CLRSTAT);
 8001fa0:	f240 7013 	movw	r0, #1811	; 0x713
 8001fa4:	f7fe fb42 	bl	800062c <ltc6811>
	ltc6811(CLRAUX);
 8001fa8:	f240 7012 	movw	r0, #1810	; 0x712
 8001fac:	f7fe fb3e 	bl	800062c <ltc6811>

	ltc6811(ADAX | MD262 | GPIOALL);
 8001fb0:	f44f 60bc 	mov.w	r0, #1504	; 0x5e0
 8001fb4:	f7fe fb3a 	bl	800062c <ltc6811>
	ltc6811_read(RDAUXA, &data[0]);
 8001fb8:	494a      	ldr	r1, [pc, #296]	; (80020e4 <main+0x22c>)
 8001fba:	200c      	movs	r0, #12
 8001fbc:	f7fe fbb6 	bl	800072c <ltc6811_read>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		ltc6811(ADCVC | MD73 | CELLALL);
 8001fc0:	f44f 7058 	mov.w	r0, #864	; 0x360
 8001fc4:	f7fe fb32 	bl	800062c <ltc6811>
		HAL_Delay(300);
 8001fc8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001fcc:	f000 fd6c 	bl	8002aa8 <HAL_Delay>

		ltc6811_read(RDCVA, &data[0]);
 8001fd0:	4944      	ldr	r1, [pc, #272]	; (80020e4 <main+0x22c>)
 8001fd2:	2004      	movs	r0, #4
 8001fd4:	f7fe fbaa 	bl	800072c <ltc6811_read>
		ltc6811_read(RDCVB, &data[6]);
 8001fd8:	4943      	ldr	r1, [pc, #268]	; (80020e8 <main+0x230>)
 8001fda:	2006      	movs	r0, #6
 8001fdc:	f7fe fba6 	bl	800072c <ltc6811_read>
		ltc6811_read(RDCVC, &data[12]);
 8001fe0:	4942      	ldr	r1, [pc, #264]	; (80020ec <main+0x234>)
 8001fe2:	2008      	movs	r0, #8
 8001fe4:	f7fe fba2 	bl	800072c <ltc6811_read>
		ltc6811_read(RDCVD, &data[18]);
 8001fe8:	4941      	ldr	r1, [pc, #260]	; (80020f0 <main+0x238>)
 8001fea:	200a      	movs	r0, #10
 8001fec:	f7fe fb9e 	bl	800072c <ltc6811_read>
		ltc6811_read(RDCFG, &data[26]);
 8001ff0:	4940      	ldr	r1, [pc, #256]	; (80020f4 <main+0x23c>)
 8001ff2:	2002      	movs	r0, #2
 8001ff4:	f7fe fb9a 	bl	800072c <ltc6811_read>

		for (uint8_t i = 0; i < 12; i++)
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	77fb      	strb	r3, [r7, #31]
 8001ffc:	e018      	b.n	8002030 <main+0x178>
		{
			spannungen[i] = ((data[i*2+1]<<8) | data[i*2]);
 8001ffe:	7ffb      	ldrb	r3, [r7, #31]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	3301      	adds	r3, #1
 8002004:	4a37      	ldr	r2, [pc, #220]	; (80020e4 <main+0x22c>)
 8002006:	5cd3      	ldrb	r3, [r2, r3]
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	b21a      	sxth	r2, r3
 800200c:	7ffb      	ldrb	r3, [r7, #31]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4934      	ldr	r1, [pc, #208]	; (80020e4 <main+0x22c>)
 8002012:	5ccb      	ldrb	r3, [r1, r3]
 8002014:	b21b      	sxth	r3, r3
 8002016:	4313      	orrs	r3, r2
 8002018:	b21a      	sxth	r2, r3
 800201a:	7ffb      	ldrb	r3, [r7, #31]
 800201c:	b292      	uxth	r2, r2
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	f107 0120 	add.w	r1, r7, #32
 8002024:	440b      	add	r3, r1
 8002026:	f823 2c1c 	strh.w	r2, [r3, #-28]
		for (uint8_t i = 0; i < 12; i++)
 800202a:	7ffb      	ldrb	r3, [r7, #31]
 800202c:	3301      	adds	r3, #1
 800202e:	77fb      	strb	r3, [r7, #31]
 8002030:	7ffb      	ldrb	r3, [r7, #31]
 8002032:	2b0b      	cmp	r3, #11
 8002034:	d9e3      	bls.n	8001ffe <main+0x146>
		}

		for (uint8_t i = 0; i < 12; i++)
 8002036:	2300      	movs	r3, #0
 8002038:	77bb      	strb	r3, [r7, #30]
 800203a:	e011      	b.n	8002060 <main+0x1a8>
		{
			uartTransmitNumber(spannungen[i], 10);
 800203c:	7fbb      	ldrb	r3, [r7, #30]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	f107 0220 	add.w	r2, r7, #32
 8002044:	4413      	add	r3, r2
 8002046:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 800204a:	210a      	movs	r1, #10
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe faa5 	bl	800059c <uartTransmitNumber>
			uartTransmit(";", 1);
 8002052:	2101      	movs	r1, #1
 8002054:	4828      	ldr	r0, [pc, #160]	; (80020f8 <main+0x240>)
 8002056:	f7fe fa73 	bl	8000540 <uartTransmit>
		for (uint8_t i = 0; i < 12; i++)
 800205a:	7fbb      	ldrb	r3, [r7, #30]
 800205c:	3301      	adds	r3, #1
 800205e:	77bb      	strb	r3, [r7, #30]
 8002060:	7fbb      	ldrb	r3, [r7, #30]
 8002062:	2b0b      	cmp	r3, #11
 8002064:	d9ea      	bls.n	800203c <main+0x184>
		}

		tmp = 0;
 8002066:	4b25      	ldr	r3, [pc, #148]	; (80020fc <main+0x244>)
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
		for (uint8_t i = 0; i < 12; i++)
 800206c:	2300      	movs	r3, #0
 800206e:	777b      	strb	r3, [r7, #29]
 8002070:	e00f      	b.n	8002092 <main+0x1da>
		{
			tmp += spannungen[i];
 8002072:	7f7b      	ldrb	r3, [r7, #29]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	f107 0220 	add.w	r2, r7, #32
 800207a:	4413      	add	r3, r2
 800207c:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8002080:	461a      	mov	r2, r3
 8002082:	4b1e      	ldr	r3, [pc, #120]	; (80020fc <main+0x244>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4413      	add	r3, r2
 8002088:	4a1c      	ldr	r2, [pc, #112]	; (80020fc <main+0x244>)
 800208a:	6013      	str	r3, [r2, #0]
		for (uint8_t i = 0; i < 12; i++)
 800208c:	7f7b      	ldrb	r3, [r7, #29]
 800208e:	3301      	adds	r3, #1
 8002090:	777b      	strb	r3, [r7, #29]
 8002092:	7f7b      	ldrb	r3, [r7, #29]
 8002094:	2b0b      	cmp	r3, #11
 8002096:	d9ec      	bls.n	8002072 <main+0x1ba>
		}
		tmp /= 12;
 8002098:	4b18      	ldr	r3, [pc, #96]	; (80020fc <main+0x244>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a18      	ldr	r2, [pc, #96]	; (8002100 <main+0x248>)
 800209e:	fba2 2303 	umull	r2, r3, r2, r3
 80020a2:	08db      	lsrs	r3, r3, #3
 80020a4:	4a15      	ldr	r2, [pc, #84]	; (80020fc <main+0x244>)
 80020a6:	6013      	str	r3, [r2, #0]
		uartTransmitNumber(tmp, 10);
 80020a8:	4b14      	ldr	r3, [pc, #80]	; (80020fc <main+0x244>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	210a      	movs	r1, #10
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe fa74 	bl	800059c <uartTransmitNumber>

		uartTransmit("\n", 1);
 80020b4:	2101      	movs	r1, #1
 80020b6:	4804      	ldr	r0, [pc, #16]	; (80020c8 <main+0x210>)
 80020b8:	f7fe fa42 	bl	8000540 <uartTransmit>
		ltc6811(ADCVC | MD73 | CELLALL);
 80020bc:	e780      	b.n	8001fc0 <main+0x108>
 80020be:	bf00      	nop
 80020c0:	08007750 	.word	0x08007750
 80020c4:	40021000 	.word	0x40021000
 80020c8:	0800778c 	.word	0x0800778c
 80020cc:	08007790 	.word	0x08007790
 80020d0:	20000108 	.word	0x20000108
 80020d4:	080077b4 	.word	0x080077b4
 80020d8:	2000005c 	.word	0x2000005c
 80020dc:	40020400 	.word	0x40020400
 80020e0:	080077d4 	.word	0x080077d4
 80020e4:	2000002c 	.word	0x2000002c
 80020e8:	20000032 	.word	0x20000032
 80020ec:	20000038 	.word	0x20000038
 80020f0:	2000003e 	.word	0x2000003e
 80020f4:	20000046 	.word	0x20000046
 80020f8:	080077f4 	.word	0x080077f4
 80020fc:	20000104 	.word	0x20000104
 8002100:	aaaaaaab 	.word	0xaaaaaaab

08002104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b0b8      	sub	sp, #224	; 0xe0
 8002108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800210a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800210e:	2234      	movs	r2, #52	; 0x34
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f005 f8b6 	bl	8007284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002118:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002128:	f107 0308 	add.w	r3, r7, #8
 800212c:	2290      	movs	r2, #144	; 0x90
 800212e:	2100      	movs	r1, #0
 8002130:	4618      	mov	r0, r3
 8002132:	f005 f8a7 	bl	8007284 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002136:	4b3a      	ldr	r3, [pc, #232]	; (8002220 <SystemClock_Config+0x11c>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	4a39      	ldr	r2, [pc, #228]	; (8002220 <SystemClock_Config+0x11c>)
 800213c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002140:	6413      	str	r3, [r2, #64]	; 0x40
 8002142:	4b37      	ldr	r3, [pc, #220]	; (8002220 <SystemClock_Config+0x11c>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214a:	607b      	str	r3, [r7, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800214e:	4b35      	ldr	r3, [pc, #212]	; (8002224 <SystemClock_Config+0x120>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a34      	ldr	r2, [pc, #208]	; (8002224 <SystemClock_Config+0x120>)
 8002154:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	4b32      	ldr	r3, [pc, #200]	; (8002224 <SystemClock_Config+0x120>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002166:	2301      	movs	r3, #1
 8002168:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800216c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002170:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002174:	2302      	movs	r3, #2
 8002176:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800217a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800217e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002182:	2319      	movs	r3, #25
 8002184:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002188:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800218c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002190:	2302      	movs	r3, #2
 8002192:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002196:	2308      	movs	r3, #8
 8002198:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800219c:	2302      	movs	r3, #2
 800219e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80021a6:	4618      	mov	r0, r3
 80021a8:	f001 fb82 	bl	80038b0 <HAL_RCC_OscConfig>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80021b2:	f000 f839 	bl	8002228 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80021b6:	f001 fb2b 	bl	8003810 <HAL_PWREx_EnableOverDrive>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80021c0:	f000 f832 	bl	8002228 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021c4:	230f      	movs	r3, #15
 80021c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ca:	2302      	movs	r3, #2
 80021cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80021e6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80021ea:	2107      	movs	r1, #7
 80021ec:	4618      	mov	r0, r3
 80021ee:	f001 fe0d 	bl	8003e0c <HAL_RCC_ClockConfig>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80021f8:	f000 f816 	bl	8002228 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021fc:	2380      	movs	r3, #128	; 0x80
 80021fe:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002200:	2300      	movs	r3, #0
 8002202:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002204:	f107 0308 	add.w	r3, r7, #8
 8002208:	4618      	mov	r0, r3
 800220a:	f001 ffd5 	bl	80041b8 <HAL_RCCEx_PeriphCLKConfig>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8002214:	f000 f808 	bl	8002228 <Error_Handler>
  }
}
 8002218:	bf00      	nop
 800221a:	37e0      	adds	r7, #224	; 0xe0
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40023800 	.word	0x40023800
 8002224:	40007000 	.word	0x40007000

08002228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800222c:	b672      	cpsid	i
}
 800222e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 8002230:	4a11      	ldr	r2, [pc, #68]	; (8002278 <Error_Handler+0x50>)
 8002232:	7813      	ldrb	r3, [r2, #0]
 8002234:	f043 0320 	orr.w	r3, r3, #32
 8002238:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 800223a:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <Error_Handler+0x50>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002242:	b2db      	uxtb	r3, r3
 8002244:	461a      	mov	r2, r3
 8002246:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800224a:	480c      	ldr	r0, [pc, #48]	; (800227c <Error_Handler+0x54>)
 800224c:	f001 fac6 	bl	80037dc <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8002250:	4a09      	ldr	r2, [pc, #36]	; (8002278 <Error_Handler+0x50>)
 8002252:	7813      	ldrb	r3, [r2, #0]
 8002254:	f36f 1386 	bfc	r3, #6, #1
 8002258:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 800225a:	4b07      	ldr	r3, [pc, #28]	; (8002278 <Error_Handler+0x50>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002262:	b2db      	uxtb	r3, r3
 8002264:	461a      	mov	r2, r3
 8002266:	2104      	movs	r1, #4
 8002268:	4804      	ldr	r0, [pc, #16]	; (800227c <Error_Handler+0x54>)
 800226a:	f001 fab7 	bl	80037dc <HAL_GPIO_WritePin>

	// Sende Nachricht auf Uart-Interface
#ifdef DEBUG
#define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
	uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 800226e:	2122      	movs	r1, #34	; 0x22
 8002270:	4803      	ldr	r0, [pc, #12]	; (8002280 <Error_Handler+0x58>)
 8002272:	f7fe f965 	bl	8000540 <uartTransmit>
#endif
	// Beginne Endlosschleife nachdem Fehler aufgetreten ist
	while (1);
 8002276:	e7fe      	b.n	8002276 <Error_Handler+0x4e>
 8002278:	2000005c 	.word	0x2000005c
 800227c:	40020400 	.word	0x40020400
 8002280:	080077f8 	.word	0x080077f8

08002284 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002288:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <MX_SPI1_Init+0x74>)
 800228a:	4a1c      	ldr	r2, [pc, #112]	; (80022fc <MX_SPI1_Init+0x78>)
 800228c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800228e:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <MX_SPI1_Init+0x74>)
 8002290:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002294:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002296:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <MX_SPI1_Init+0x74>)
 8002298:	2200      	movs	r2, #0
 800229a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800229c:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <MX_SPI1_Init+0x74>)
 800229e:	f44f 7240 	mov.w	r2, #768	; 0x300
 80022a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022a4:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <MX_SPI1_Init+0x74>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022aa:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <MX_SPI1_Init+0x74>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <MX_SPI1_Init+0x74>)
 80022b2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80022b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022b8:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <MX_SPI1_Init+0x74>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <MX_SPI1_Init+0x74>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <MX_SPI1_Init+0x74>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022ca:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <MX_SPI1_Init+0x74>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <MX_SPI1_Init+0x74>)
 80022d2:	2207      	movs	r2, #7
 80022d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022d6:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <MX_SPI1_Init+0x74>)
 80022d8:	2200      	movs	r2, #0
 80022da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <MX_SPI1_Init+0x74>)
 80022de:	2208      	movs	r2, #8
 80022e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022e2:	4805      	ldr	r0, [pc, #20]	; (80022f8 <MX_SPI1_Init+0x74>)
 80022e4:	f002 fb90 	bl	8004a08 <HAL_SPI_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80022ee:	f7ff ff9b 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000170 	.word	0x20000170
 80022fc:	40013000 	.word	0x40013000

08002300 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002304:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <MX_SPI4_Init+0x74>)
 8002306:	4a1c      	ldr	r2, [pc, #112]	; (8002378 <MX_SPI4_Init+0x78>)
 8002308:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800230a:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <MX_SPI4_Init+0x74>)
 800230c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002310:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002312:	4b18      	ldr	r3, [pc, #96]	; (8002374 <MX_SPI4_Init+0x74>)
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002318:	4b16      	ldr	r3, [pc, #88]	; (8002374 <MX_SPI4_Init+0x74>)
 800231a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800231e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002320:	4b14      	ldr	r3, [pc, #80]	; (8002374 <MX_SPI4_Init+0x74>)
 8002322:	2202      	movs	r2, #2
 8002324:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002326:	4b13      	ldr	r3, [pc, #76]	; (8002374 <MX_SPI4_Init+0x74>)
 8002328:	2201      	movs	r2, #1
 800232a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800232c:	4b11      	ldr	r3, [pc, #68]	; (8002374 <MX_SPI4_Init+0x74>)
 800232e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002332:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002334:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <MX_SPI4_Init+0x74>)
 8002336:	2230      	movs	r2, #48	; 0x30
 8002338:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800233a:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <MX_SPI4_Init+0x74>)
 800233c:	2200      	movs	r2, #0
 800233e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <MX_SPI4_Init+0x74>)
 8002342:	2200      	movs	r2, #0
 8002344:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002346:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <MX_SPI4_Init+0x74>)
 8002348:	2200      	movs	r2, #0
 800234a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 800234c:	4b09      	ldr	r3, [pc, #36]	; (8002374 <MX_SPI4_Init+0x74>)
 800234e:	2207      	movs	r2, #7
 8002350:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002352:	4b08      	ldr	r3, [pc, #32]	; (8002374 <MX_SPI4_Init+0x74>)
 8002354:	2200      	movs	r2, #0
 8002356:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <MX_SPI4_Init+0x74>)
 800235a:	2200      	movs	r2, #0
 800235c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800235e:	4805      	ldr	r0, [pc, #20]	; (8002374 <MX_SPI4_Init+0x74>)
 8002360:	f002 fb52 	bl	8004a08 <HAL_SPI_Init>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800236a:	f7ff ff5d 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	2000010c 	.word	0x2000010c
 8002378:	40013400 	.word	0x40013400

0800237c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08c      	sub	sp, #48	; 0x30
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002384:	f107 031c 	add.w	r3, r7, #28
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a3d      	ldr	r2, [pc, #244]	; (8002490 <HAL_SPI_MspInit+0x114>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d145      	bne.n	800242a <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800239e:	4b3d      	ldr	r3, [pc, #244]	; (8002494 <HAL_SPI_MspInit+0x118>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	4a3c      	ldr	r2, [pc, #240]	; (8002494 <HAL_SPI_MspInit+0x118>)
 80023a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023a8:	6453      	str	r3, [r2, #68]	; 0x44
 80023aa:	4b3a      	ldr	r3, [pc, #232]	; (8002494 <HAL_SPI_MspInit+0x118>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023b2:	61bb      	str	r3, [r7, #24]
 80023b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023b6:	4b37      	ldr	r3, [pc, #220]	; (8002494 <HAL_SPI_MspInit+0x118>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	4a36      	ldr	r2, [pc, #216]	; (8002494 <HAL_SPI_MspInit+0x118>)
 80023bc:	f043 0308 	orr.w	r3, r3, #8
 80023c0:	6313      	str	r3, [r2, #48]	; 0x30
 80023c2:	4b34      	ldr	r3, [pc, #208]	; (8002494 <HAL_SPI_MspInit+0x118>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80023ce:	4b31      	ldr	r3, [pc, #196]	; (8002494 <HAL_SPI_MspInit+0x118>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a30      	ldr	r2, [pc, #192]	; (8002494 <HAL_SPI_MspInit+0x118>)
 80023d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b2e      	ldr	r3, [pc, #184]	; (8002494 <HAL_SPI_MspInit+0x118>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 80023e6:	2380      	movs	r3, #128	; 0x80
 80023e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f2:	2303      	movs	r3, #3
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023f6:	2305      	movs	r3, #5
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 80023fa:	f107 031c 	add.w	r3, r7, #28
 80023fe:	4619      	mov	r1, r3
 8002400:	4825      	ldr	r0, [pc, #148]	; (8002498 <HAL_SPI_MspInit+0x11c>)
 8002402:	f001 f827 	bl	8003454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTI_MISO_Pin|POTI_CS_Pin|POTI_SCK_Pin;
 8002406:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800240a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240c:	2302      	movs	r3, #2
 800240e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002414:	2303      	movs	r3, #3
 8002416:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002418:	2305      	movs	r3, #5
 800241a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800241c:	f107 031c 	add.w	r3, r7, #28
 8002420:	4619      	mov	r1, r3
 8002422:	481e      	ldr	r0, [pc, #120]	; (800249c <HAL_SPI_MspInit+0x120>)
 8002424:	f001 f816 	bl	8003454 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002428:	e02d      	b.n	8002486 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI4)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a1c      	ldr	r2, [pc, #112]	; (80024a0 <HAL_SPI_MspInit+0x124>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d128      	bne.n	8002486 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002434:	4b17      	ldr	r3, [pc, #92]	; (8002494 <HAL_SPI_MspInit+0x118>)
 8002436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002438:	4a16      	ldr	r2, [pc, #88]	; (8002494 <HAL_SPI_MspInit+0x118>)
 800243a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800243e:	6453      	str	r3, [r2, #68]	; 0x44
 8002440:	4b14      	ldr	r3, [pc, #80]	; (8002494 <HAL_SPI_MspInit+0x118>)
 8002442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002444:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <HAL_SPI_MspInit+0x118>)
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	4a10      	ldr	r2, [pc, #64]	; (8002494 <HAL_SPI_MspInit+0x118>)
 8002452:	f043 0310 	orr.w	r3, r3, #16
 8002456:	6313      	str	r3, [r2, #48]	; 0x30
 8002458:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <HAL_SPI_MspInit+0x118>)
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	f003 0310 	and.w	r3, r3, #16
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 8002464:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246a:	2302      	movs	r3, #2
 800246c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002472:	2303      	movs	r3, #3
 8002474:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002476:	2305      	movs	r3, #5
 8002478:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800247a:	f107 031c 	add.w	r3, r7, #28
 800247e:	4619      	mov	r1, r3
 8002480:	4808      	ldr	r0, [pc, #32]	; (80024a4 <HAL_SPI_MspInit+0x128>)
 8002482:	f000 ffe7 	bl	8003454 <HAL_GPIO_Init>
}
 8002486:	bf00      	nop
 8002488:	3730      	adds	r7, #48	; 0x30
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40013000 	.word	0x40013000
 8002494:	40023800 	.word	0x40023800
 8002498:	40020c00 	.word	0x40020c00
 800249c:	40021800 	.word	0x40021800
 80024a0:	40013400 	.word	0x40013400
 80024a4:	40021000 	.word	0x40021000

080024a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80024ae:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <HAL_MspInit+0x44>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	4a0e      	ldr	r2, [pc, #56]	; (80024ec <HAL_MspInit+0x44>)
 80024b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ba:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <HAL_MspInit+0x44>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c2:	607b      	str	r3, [r7, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c6:	4b09      	ldr	r3, [pc, #36]	; (80024ec <HAL_MspInit+0x44>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	4a08      	ldr	r2, [pc, #32]	; (80024ec <HAL_MspInit+0x44>)
 80024cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024d0:	6453      	str	r3, [r2, #68]	; 0x44
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_MspInit+0x44>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024da:	603b      	str	r3, [r7, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40023800 	.word	0x40023800

080024f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002502:	e7fe      	b.n	8002502 <HardFault_Handler+0x4>

08002504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002508:	e7fe      	b.n	8002508 <MemManage_Handler+0x4>

0800250a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800250e:	e7fe      	b.n	800250e <BusFault_Handler+0x4>

08002510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002514:	e7fe      	b.n	8002514 <UsageFault_Handler+0x4>

08002516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002544:	f000 fa90 	bl	8002a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}

0800254c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002550:	4b08      	ldr	r3, [pc, #32]	; (8002574 <SystemInit+0x28>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002556:	4a07      	ldr	r2, [pc, #28]	; (8002574 <SystemInit+0x28>)
 8002558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800255c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002560:	4b04      	ldr	r3, [pc, #16]	; (8002574 <SystemInit+0x28>)
 8002562:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002566:	609a      	str	r2, [r3, #8]
#endif
}
 8002568:	bf00      	nop
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08c      	sub	sp, #48	; 0x30
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800257e:	f107 031c 	add.w	r3, r7, #28
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	605a      	str	r2, [r3, #4]
 8002588:	609a      	str	r2, [r3, #8]
 800258a:	60da      	str	r2, [r3, #12]
 800258c:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800258e:	f107 030c 	add.w	r3, r7, #12
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	609a      	str	r2, [r3, #8]
 800259a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800259c:	463b      	mov	r3, r7
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80025a6:	4b35      	ldr	r3, [pc, #212]	; (800267c <MX_TIM1_Init+0x104>)
 80025a8:	4a35      	ldr	r2, [pc, #212]	; (8002680 <MX_TIM1_Init+0x108>)
 80025aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80025ac:	4b33      	ldr	r3, [pc, #204]	; (800267c <MX_TIM1_Init+0x104>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b2:	4b32      	ldr	r3, [pc, #200]	; (800267c <MX_TIM1_Init+0x104>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80025b8:	4b30      	ldr	r3, [pc, #192]	; (800267c <MX_TIM1_Init+0x104>)
 80025ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c0:	4b2e      	ldr	r3, [pc, #184]	; (800267c <MX_TIM1_Init+0x104>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025c6:	4b2d      	ldr	r3, [pc, #180]	; (800267c <MX_TIM1_Init+0x104>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025cc:	4b2b      	ldr	r3, [pc, #172]	; (800267c <MX_TIM1_Init+0x104>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80025d2:	482a      	ldr	r0, [pc, #168]	; (800267c <MX_TIM1_Init+0x104>)
 80025d4:	f003 f983 	bl	80058de <HAL_TIM_IC_Init>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80025de:	f7ff fe23 	bl	8002228 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80025e2:	2304      	movs	r3, #4
 80025e4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80025e6:	2350      	movs	r3, #80	; 0x50
 80025e8:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80025ea:	2300      	movs	r3, #0
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80025ee:	2300      	movs	r3, #0
 80025f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80025f6:	f107 031c 	add.w	r3, r7, #28
 80025fa:	4619      	mov	r1, r3
 80025fc:	481f      	ldr	r0, [pc, #124]	; (800267c <MX_TIM1_Init+0x104>)
 80025fe:	f003 fb69 	bl	8005cd4 <HAL_TIM_SlaveConfigSynchro>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002608:	f7ff fe0e 	bl	8002228 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800260c:	2300      	movs	r3, #0
 800260e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002610:	2301      	movs	r3, #1
 8002612:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002618:	2300      	movs	r3, #0
 800261a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800261c:	f107 030c 	add.w	r3, r7, #12
 8002620:	2200      	movs	r2, #0
 8002622:	4619      	mov	r1, r3
 8002624:	4815      	ldr	r0, [pc, #84]	; (800267c <MX_TIM1_Init+0x104>)
 8002626:	f003 f9b1 	bl	800598c <HAL_TIM_IC_ConfigChannel>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8002630:	f7ff fdfa 	bl	8002228 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002634:	2302      	movs	r3, #2
 8002636:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002638:	2302      	movs	r3, #2
 800263a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800263c:	f107 030c 	add.w	r3, r7, #12
 8002640:	2204      	movs	r2, #4
 8002642:	4619      	mov	r1, r3
 8002644:	480d      	ldr	r0, [pc, #52]	; (800267c <MX_TIM1_Init+0x104>)
 8002646:	f003 f9a1 	bl	800598c <HAL_TIM_IC_ConfigChannel>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8002650:	f7ff fdea 	bl	8002228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002654:	2300      	movs	r3, #0
 8002656:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002658:	2300      	movs	r3, #0
 800265a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800265c:	2300      	movs	r3, #0
 800265e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002660:	463b      	mov	r3, r7
 8002662:	4619      	mov	r1, r3
 8002664:	4805      	ldr	r0, [pc, #20]	; (800267c <MX_TIM1_Init+0x104>)
 8002666:	f004 f8af 	bl	80067c8 <HAL_TIMEx_MasterConfigSynchronization>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002670:	f7ff fdda 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002674:	bf00      	nop
 8002676:	3730      	adds	r7, #48	; 0x30
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20000220 	.word	0x20000220
 8002680:	40010000 	.word	0x40010000

08002684 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	; 0x28
 8002688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800268a:	f107 031c 	add.w	r3, r7, #28
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]
 8002694:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002696:	463b      	mov	r3, r7
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
 80026a4:	615a      	str	r2, [r3, #20]
 80026a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80026a8:	4b32      	ldr	r3, [pc, #200]	; (8002774 <MX_TIM4_Init+0xf0>)
 80026aa:	4a33      	ldr	r2, [pc, #204]	; (8002778 <MX_TIM4_Init+0xf4>)
 80026ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80026ae:	4b31      	ldr	r3, [pc, #196]	; (8002774 <MX_TIM4_Init+0xf0>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b4:	4b2f      	ldr	r3, [pc, #188]	; (8002774 <MX_TIM4_Init+0xf0>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80026ba:	4b2e      	ldr	r3, [pc, #184]	; (8002774 <MX_TIM4_Init+0xf0>)
 80026bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026c2:	4b2c      	ldr	r3, [pc, #176]	; (8002774 <MX_TIM4_Init+0xf0>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026c8:	4b2a      	ldr	r3, [pc, #168]	; (8002774 <MX_TIM4_Init+0xf0>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80026ce:	4829      	ldr	r0, [pc, #164]	; (8002774 <MX_TIM4_Init+0xf0>)
 80026d0:	f003 f8ae 	bl	8005830 <HAL_TIM_PWM_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80026da:	f7ff fda5 	bl	8002228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026e6:	f107 031c 	add.w	r3, r7, #28
 80026ea:	4619      	mov	r1, r3
 80026ec:	4821      	ldr	r0, [pc, #132]	; (8002774 <MX_TIM4_Init+0xf0>)
 80026ee:	f004 f86b 	bl	80067c8 <HAL_TIMEx_MasterConfigSynchronization>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80026f8:	f7ff fd96 	bl	8002228 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026fc:	2360      	movs	r3, #96	; 0x60
 80026fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002704:	2300      	movs	r3, #0
 8002706:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002708:	2300      	movs	r3, #0
 800270a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800270c:	463b      	mov	r3, r7
 800270e:	2200      	movs	r2, #0
 8002710:	4619      	mov	r1, r3
 8002712:	4818      	ldr	r0, [pc, #96]	; (8002774 <MX_TIM4_Init+0xf0>)
 8002714:	f003 f9ce 	bl	8005ab4 <HAL_TIM_PWM_ConfigChannel>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800271e:	f7ff fd83 	bl	8002228 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002722:	463b      	mov	r3, r7
 8002724:	2204      	movs	r2, #4
 8002726:	4619      	mov	r1, r3
 8002728:	4812      	ldr	r0, [pc, #72]	; (8002774 <MX_TIM4_Init+0xf0>)
 800272a:	f003 f9c3 	bl	8005ab4 <HAL_TIM_PWM_ConfigChannel>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002734:	f7ff fd78 	bl	8002228 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002738:	463b      	mov	r3, r7
 800273a:	2208      	movs	r2, #8
 800273c:	4619      	mov	r1, r3
 800273e:	480d      	ldr	r0, [pc, #52]	; (8002774 <MX_TIM4_Init+0xf0>)
 8002740:	f003 f9b8 	bl	8005ab4 <HAL_TIM_PWM_ConfigChannel>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 800274a:	f7ff fd6d 	bl	8002228 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800274e:	463b      	mov	r3, r7
 8002750:	220c      	movs	r2, #12
 8002752:	4619      	mov	r1, r3
 8002754:	4807      	ldr	r0, [pc, #28]	; (8002774 <MX_TIM4_Init+0xf0>)
 8002756:	f003 f9ad 	bl	8005ab4 <HAL_TIM_PWM_ConfigChannel>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002760:	f7ff fd62 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002764:	4803      	ldr	r0, [pc, #12]	; (8002774 <MX_TIM4_Init+0xf0>)
 8002766:	f000 f86d 	bl	8002844 <HAL_TIM_MspPostInit>

}
 800276a:	bf00      	nop
 800276c:	3728      	adds	r7, #40	; 0x28
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	200001d4 	.word	0x200001d4
 8002778:	40000800 	.word	0x40000800

0800277c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08a      	sub	sp, #40	; 0x28
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002784:	f107 0314 	add.w	r3, r7, #20
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a17      	ldr	r2, [pc, #92]	; (80027f8 <HAL_TIM_IC_MspInit+0x7c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d128      	bne.n	80027f0 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800279e:	4b17      	ldr	r3, [pc, #92]	; (80027fc <HAL_TIM_IC_MspInit+0x80>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	4a16      	ldr	r2, [pc, #88]	; (80027fc <HAL_TIM_IC_MspInit+0x80>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6453      	str	r3, [r2, #68]	; 0x44
 80027aa:	4b14      	ldr	r3, [pc, #80]	; (80027fc <HAL_TIM_IC_MspInit+0x80>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027b6:	4b11      	ldr	r3, [pc, #68]	; (80027fc <HAL_TIM_IC_MspInit+0x80>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	4a10      	ldr	r2, [pc, #64]	; (80027fc <HAL_TIM_IC_MspInit+0x80>)
 80027bc:	f043 0310 	orr.w	r3, r3, #16
 80027c0:	6313      	str	r3, [r2, #48]	; 0x30
 80027c2:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <HAL_TIM_IC_MspInit+0x80>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f003 0310 	and.w	r3, r3, #16
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 80027ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d4:	2302      	movs	r3, #2
 80027d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027dc:	2300      	movs	r3, #0
 80027de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80027e0:	2301      	movs	r3, #1
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	4619      	mov	r1, r3
 80027ea:	4805      	ldr	r0, [pc, #20]	; (8002800 <HAL_TIM_IC_MspInit+0x84>)
 80027ec:	f000 fe32 	bl	8003454 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80027f0:	bf00      	nop
 80027f2:	3728      	adds	r7, #40	; 0x28
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40010000 	.word	0x40010000
 80027fc:	40023800 	.word	0x40023800
 8002800:	40021000 	.word	0x40021000

08002804 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a0a      	ldr	r2, [pc, #40]	; (800283c <HAL_TIM_PWM_MspInit+0x38>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d10b      	bne.n	800282e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002816:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <HAL_TIM_PWM_MspInit+0x3c>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	4a09      	ldr	r2, [pc, #36]	; (8002840 <HAL_TIM_PWM_MspInit+0x3c>)
 800281c:	f043 0304 	orr.w	r3, r3, #4
 8002820:	6413      	str	r3, [r2, #64]	; 0x40
 8002822:	4b07      	ldr	r3, [pc, #28]	; (8002840 <HAL_TIM_PWM_MspInit+0x3c>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800282e:	bf00      	nop
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40000800 	.word	0x40000800
 8002840:	40023800 	.word	0x40023800

08002844 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284c:	f107 030c 	add.w	r3, r7, #12
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a11      	ldr	r2, [pc, #68]	; (80028a8 <HAL_TIM_MspPostInit+0x64>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d11c      	bne.n	80028a0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002866:	4b11      	ldr	r3, [pc, #68]	; (80028ac <HAL_TIM_MspPostInit+0x68>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	4a10      	ldr	r2, [pc, #64]	; (80028ac <HAL_TIM_MspPostInit+0x68>)
 800286c:	f043 0308 	orr.w	r3, r3, #8
 8002870:	6313      	str	r3, [r2, #48]	; 0x30
 8002872:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <HAL_TIM_MspPostInit+0x68>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	60bb      	str	r3, [r7, #8]
 800287c:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin|PWM_HV_Charger_Pin;
 800287e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002882:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002884:	2302      	movs	r3, #2
 8002886:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288c:	2300      	movs	r3, #0
 800288e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002890:	2302      	movs	r3, #2
 8002892:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002894:	f107 030c 	add.w	r3, r7, #12
 8002898:	4619      	mov	r1, r3
 800289a:	4805      	ldr	r0, [pc, #20]	; (80028b0 <HAL_TIM_MspPostInit+0x6c>)
 800289c:	f000 fdda 	bl	8003454 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80028a0:	bf00      	nop
 80028a2:	3720      	adds	r7, #32
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40000800 	.word	0x40000800
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40020c00 	.word	0x40020c00

080028b4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028b8:	4b14      	ldr	r3, [pc, #80]	; (800290c <MX_USART2_UART_Init+0x58>)
 80028ba:	4a15      	ldr	r2, [pc, #84]	; (8002910 <MX_USART2_UART_Init+0x5c>)
 80028bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80028be:	4b13      	ldr	r3, [pc, #76]	; (800290c <MX_USART2_UART_Init+0x58>)
 80028c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80028c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028c6:	4b11      	ldr	r3, [pc, #68]	; (800290c <MX_USART2_UART_Init+0x58>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028cc:	4b0f      	ldr	r3, [pc, #60]	; (800290c <MX_USART2_UART_Init+0x58>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028d2:	4b0e      	ldr	r3, [pc, #56]	; (800290c <MX_USART2_UART_Init+0x58>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028d8:	4b0c      	ldr	r3, [pc, #48]	; (800290c <MX_USART2_UART_Init+0x58>)
 80028da:	220c      	movs	r2, #12
 80028dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028de:	4b0b      	ldr	r3, [pc, #44]	; (800290c <MX_USART2_UART_Init+0x58>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028e4:	4b09      	ldr	r3, [pc, #36]	; (800290c <MX_USART2_UART_Init+0x58>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028ea:	4b08      	ldr	r3, [pc, #32]	; (800290c <MX_USART2_UART_Init+0x58>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <MX_USART2_UART_Init+0x58>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028f6:	4805      	ldr	r0, [pc, #20]	; (800290c <MX_USART2_UART_Init+0x58>)
 80028f8:	f003 fff4 	bl	80068e4 <HAL_UART_Init>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002902:	f7ff fc91 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	2000026c 	.word	0x2000026c
 8002910:	40004400 	.word	0x40004400

08002914 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08a      	sub	sp, #40	; 0x28
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	60da      	str	r2, [r3, #12]
 800292a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a17      	ldr	r2, [pc, #92]	; (8002990 <HAL_UART_MspInit+0x7c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d127      	bne.n	8002986 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002936:	4b17      	ldr	r3, [pc, #92]	; (8002994 <HAL_UART_MspInit+0x80>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	4a16      	ldr	r2, [pc, #88]	; (8002994 <HAL_UART_MspInit+0x80>)
 800293c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002940:	6413      	str	r3, [r2, #64]	; 0x40
 8002942:	4b14      	ldr	r3, [pc, #80]	; (8002994 <HAL_UART_MspInit+0x80>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800294e:	4b11      	ldr	r3, [pc, #68]	; (8002994 <HAL_UART_MspInit+0x80>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a10      	ldr	r2, [pc, #64]	; (8002994 <HAL_UART_MspInit+0x80>)
 8002954:	f043 0308 	orr.w	r3, r3, #8
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <HAL_UART_MspInit+0x80>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002966:	2360      	movs	r3, #96	; 0x60
 8002968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002972:	2303      	movs	r3, #3
 8002974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002976:	2307      	movs	r3, #7
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800297a:	f107 0314 	add.w	r3, r7, #20
 800297e:	4619      	mov	r1, r3
 8002980:	4805      	ldr	r0, [pc, #20]	; (8002998 <HAL_UART_MspInit+0x84>)
 8002982:	f000 fd67 	bl	8003454 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002986:	bf00      	nop
 8002988:	3728      	adds	r7, #40	; 0x28
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40004400 	.word	0x40004400
 8002994:	40023800 	.word	0x40023800
 8002998:	40020c00 	.word	0x40020c00

0800299c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800299c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029a2:	e003      	b.n	80029ac <LoopCopyDataInit>

080029a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029a4:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029aa:	3104      	adds	r1, #4

080029ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029ac:	480b      	ldr	r0, [pc, #44]	; (80029dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029ae:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029b4:	d3f6      	bcc.n	80029a4 <CopyDataInit>
  ldr  r2, =_sbss
 80029b6:	4a0b      	ldr	r2, [pc, #44]	; (80029e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80029b8:	e002      	b.n	80029c0 <LoopFillZerobss>

080029ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80029ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80029bc:	f842 3b04 	str.w	r3, [r2], #4

080029c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80029c0:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80029c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80029c4:	d3f9      	bcc.n	80029ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029c6:	f7ff fdc1 	bl	800254c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029ca:	f004 fc37 	bl	800723c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ce:	f7ff fa73 	bl	8001eb8 <main>
  bx  lr    
 80029d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029d4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80029d8:	08007a6c 	.word	0x08007a6c
  ldr  r0, =_sdata
 80029dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80029e0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80029e4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80029e8:	200002f4 	.word	0x200002f4

080029ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029ec:	e7fe      	b.n	80029ec <ADC_IRQHandler>

080029ee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f2:	2003      	movs	r0, #3
 80029f4:	f000 fcfa 	bl	80033ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029f8:	2000      	movs	r0, #0
 80029fa:	f000 f805 	bl	8002a08 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80029fe:	f7ff fd53 	bl	80024a8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a10:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <HAL_InitTick+0x54>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <HAL_InitTick+0x58>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 fd07 	bl	800343a <HAL_SYSTICK_Config>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e00e      	b.n	8002a54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b0f      	cmp	r3, #15
 8002a3a:	d80a      	bhi.n	8002a52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	f04f 30ff 	mov.w	r0, #4294967295
 8002a44:	f000 fcdd 	bl	8003402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a48:	4a06      	ldr	r2, [pc, #24]	; (8002a64 <HAL_InitTick+0x5c>)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	e000      	b.n	8002a54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	20000000 	.word	0x20000000
 8002a60:	20000008 	.word	0x20000008
 8002a64:	20000004 	.word	0x20000004

08002a68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a6c:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <HAL_IncTick+0x20>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_IncTick+0x24>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4413      	add	r3, r2
 8002a78:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <HAL_IncTick+0x24>)
 8002a7a:	6013      	str	r3, [r2, #0]
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	20000008 	.word	0x20000008
 8002a8c:	200002f0 	.word	0x200002f0

08002a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  return uwTick;
 8002a94:	4b03      	ldr	r3, [pc, #12]	; (8002aa4 <HAL_GetTick+0x14>)
 8002a96:	681b      	ldr	r3, [r3, #0]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	200002f0 	.word	0x200002f0

08002aa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ab0:	f7ff ffee 	bl	8002a90 <HAL_GetTick>
 8002ab4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac0:	d005      	beq.n	8002ace <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <HAL_Delay+0x44>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4413      	add	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ace:	bf00      	nop
 8002ad0:	f7ff ffde 	bl	8002a90 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d8f7      	bhi.n	8002ad0 <HAL_Delay+0x28>
  {
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	bf00      	nop
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000008 	.word	0x20000008

08002af0 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
 return __STM32F7xx_HAL_VERSION;
 8002af4:	4b02      	ldr	r3, [pc, #8]	; (8002b00 <HAL_GetHalVersion+0x10>)
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	01020900 	.word	0x01020900

08002b04 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8002b08:	4b03      	ldr	r3, [pc, #12]	; (8002b18 <HAL_GetREVID+0x14>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	0c1b      	lsrs	r3, r3, #16
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e0042000 	.word	0xe0042000

08002b1c <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8002b20:	4b04      	ldr	r3, [pc, #16]	; (8002b34 <HAL_GetDEVID+0x18>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	e0042000 	.word	0xe0042000

08002b38 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8002b3c:	4b03      	ldr	r3, [pc, #12]	; (8002b4c <HAL_GetUIDw0+0x14>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	1ff0f420 	.word	0x1ff0f420

08002b50 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002b54:	4b03      	ldr	r3, [pc, #12]	; (8002b64 <HAL_GetUIDw1+0x14>)
 8002b56:	681b      	ldr	r3, [r3, #0]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	1ff0f424 	.word	0x1ff0f424

08002b68 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002b6c:	4b03      	ldr	r3, [pc, #12]	; (8002b7c <HAL_GetUIDw2+0x14>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	1ff0f428 	.word	0x1ff0f428

08002b80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e031      	b.n	8002bfa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d109      	bne.n	8002bb2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7fe fea0 	bl	80018e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d116      	bne.n	8002bec <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bc2:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <HAL_ADC_Init+0x84>)
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	f043 0202 	orr.w	r2, r3, #2
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f964 	bl	8002e9c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	f023 0303 	bic.w	r3, r3, #3
 8002be2:	f043 0201 	orr.w	r2, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	641a      	str	r2, [r3, #64]	; 0x40
 8002bea:	e001      	b.n	8002bf0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	ffffeefd 	.word	0xffffeefd

08002c08 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x1c>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e12a      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x272>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b09      	cmp	r3, #9
 8002c32:	d93a      	bls.n	8002caa <HAL_ADC_ConfigChannel+0xa2>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c3c:	d035      	beq.n	8002caa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68d9      	ldr	r1, [r3, #12]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	4413      	add	r3, r2
 8002c52:	3b1e      	subs	r3, #30
 8002c54:	2207      	movs	r2, #7
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43da      	mvns	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	400a      	ands	r2, r1
 8002c62:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a87      	ldr	r2, [pc, #540]	; (8002e88 <HAL_ADC_ConfigChannel+0x280>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d10a      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68d9      	ldr	r1, [r3, #12]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	061a      	lsls	r2, r3, #24
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c82:	e035      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68d9      	ldr	r1, [r3, #12]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	4618      	mov	r0, r3
 8002c96:	4603      	mov	r3, r0
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	4403      	add	r3, r0
 8002c9c:	3b1e      	subs	r3, #30
 8002c9e:	409a      	lsls	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ca8:	e022      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6919      	ldr	r1, [r3, #16]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	4613      	mov	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4413      	add	r3, r2
 8002cbe:	2207      	movs	r2, #7
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43da      	mvns	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	400a      	ands	r2, r1
 8002ccc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6919      	ldr	r1, [r3, #16]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	4618      	mov	r0, r3
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	4403      	add	r3, r0
 8002ce6:	409a      	lsls	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b06      	cmp	r3, #6
 8002cf6:	d824      	bhi.n	8002d42 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	3b05      	subs	r3, #5
 8002d0a:	221f      	movs	r2, #31
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43da      	mvns	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	400a      	ands	r2, r1
 8002d18:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	4618      	mov	r0, r3
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	3b05      	subs	r3, #5
 8002d34:	fa00 f203 	lsl.w	r2, r0, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	635a      	str	r2, [r3, #52]	; 0x34
 8002d40:	e04c      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b0c      	cmp	r3, #12
 8002d48:	d824      	bhi.n	8002d94 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	3b23      	subs	r3, #35	; 0x23
 8002d5c:	221f      	movs	r2, #31
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43da      	mvns	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	400a      	ands	r2, r1
 8002d6a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	4618      	mov	r0, r3
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	3b23      	subs	r3, #35	; 0x23
 8002d86:	fa00 f203 	lsl.w	r2, r0, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	631a      	str	r2, [r3, #48]	; 0x30
 8002d92:	e023      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	3b41      	subs	r3, #65	; 0x41
 8002da6:	221f      	movs	r2, #31
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43da      	mvns	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	400a      	ands	r2, r1
 8002db4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	3b41      	subs	r3, #65	; 0x41
 8002dd0:	fa00 f203 	lsl.w	r2, r0, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a2a      	ldr	r2, [pc, #168]	; (8002e8c <HAL_ADC_ConfigChannel+0x284>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d10a      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x1f4>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dee:	d105      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002df0:	4b27      	ldr	r3, [pc, #156]	; (8002e90 <HAL_ADC_ConfigChannel+0x288>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	4a26      	ldr	r2, [pc, #152]	; (8002e90 <HAL_ADC_ConfigChannel+0x288>)
 8002df6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002dfa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a22      	ldr	r2, [pc, #136]	; (8002e8c <HAL_ADC_ConfigChannel+0x284>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d109      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x212>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2b12      	cmp	r3, #18
 8002e0c:	d105      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002e0e:	4b20      	ldr	r3, [pc, #128]	; (8002e90 <HAL_ADC_ConfigChannel+0x288>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	4a1f      	ldr	r2, [pc, #124]	; (8002e90 <HAL_ADC_ConfigChannel+0x288>)
 8002e14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e18:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a1b      	ldr	r2, [pc, #108]	; (8002e8c <HAL_ADC_ConfigChannel+0x284>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d125      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x268>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a17      	ldr	r2, [pc, #92]	; (8002e88 <HAL_ADC_ConfigChannel+0x280>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d003      	beq.n	8002e36 <HAL_ADC_ConfigChannel+0x22e>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b11      	cmp	r3, #17
 8002e34:	d11c      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002e36:	4b16      	ldr	r3, [pc, #88]	; (8002e90 <HAL_ADC_ConfigChannel+0x288>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	4a15      	ldr	r2, [pc, #84]	; (8002e90 <HAL_ADC_ConfigChannel+0x288>)
 8002e3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e40:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a10      	ldr	r2, [pc, #64]	; (8002e88 <HAL_ADC_ConfigChannel+0x280>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d111      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002e4c:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <HAL_ADC_ConfigChannel+0x28c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a11      	ldr	r2, [pc, #68]	; (8002e98 <HAL_ADC_ConfigChannel+0x290>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	0c9a      	lsrs	r2, r3, #18
 8002e58:	4613      	mov	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002e62:	e002      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1f9      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	10000012 	.word	0x10000012
 8002e8c:	40012000 	.word	0x40012000
 8002e90:	40012300 	.word	0x40012300
 8002e94:	20000000 	.word	0x20000000
 8002e98:	431bde83 	.word	0x431bde83

08002e9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002ea4:	4b78      	ldr	r3, [pc, #480]	; (8003088 <ADC_Init+0x1ec>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	4a77      	ldr	r2, [pc, #476]	; (8003088 <ADC_Init+0x1ec>)
 8002eaa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002eae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002eb0:	4b75      	ldr	r3, [pc, #468]	; (8003088 <ADC_Init+0x1ec>)
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4973      	ldr	r1, [pc, #460]	; (8003088 <ADC_Init+0x1ec>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ecc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6859      	ldr	r1, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	021a      	lsls	r2, r3, #8
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ef0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6859      	ldr	r1, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6899      	ldr	r1, [r3, #8]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2a:	4a58      	ldr	r2, [pc, #352]	; (800308c <ADC_Init+0x1f0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d022      	beq.n	8002f76 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6899      	ldr	r1, [r3, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6899      	ldr	r1, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	609a      	str	r2, [r3, #8]
 8002f74:	e00f      	b.n	8002f96 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f94:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0202 	bic.w	r2, r2, #2
 8002fa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6899      	ldr	r1, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	005a      	lsls	r2, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d01b      	beq.n	8002ffc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fd2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002fe2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6859      	ldr	r1, [r3, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	035a      	lsls	r2, r3, #13
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	e007      	b.n	800300c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800300a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800301a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	3b01      	subs	r3, #1
 8003028:	051a      	lsls	r2, r3, #20
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003040:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6899      	ldr	r1, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800304e:	025a      	lsls	r2, r3, #9
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003066:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6899      	ldr	r1, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	029a      	lsls	r2, r3, #10
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	609a      	str	r2, [r3, #8]
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	40012300 	.word	0x40012300
 800308c:	0f000001 	.word	0x0f000001

08003090 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e0ed      	b.n	800327e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d102      	bne.n	80030b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7fe fcc4 	bl	8001a3c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0202 	bic.w	r2, r2, #2
 80030c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030c4:	f7ff fce4 	bl	8002a90 <HAL_GetTick>
 80030c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80030ca:	e012      	b.n	80030f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030cc:	f7ff fce0 	bl	8002a90 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b0a      	cmp	r3, #10
 80030d8:	d90b      	bls.n	80030f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2205      	movs	r2, #5
 80030ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e0c5      	b.n	800327e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1e5      	bne.n	80030cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0201 	orr.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003110:	f7ff fcbe 	bl	8002a90 <HAL_GetTick>
 8003114:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003116:	e012      	b.n	800313e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003118:	f7ff fcba 	bl	8002a90 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b0a      	cmp	r3, #10
 8003124:	d90b      	bls.n	800313e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2205      	movs	r2, #5
 8003136:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e09f      	b.n	800327e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0e5      	beq.n	8003118 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	7e1b      	ldrb	r3, [r3, #24]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d108      	bne.n	8003166 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	e007      	b.n	8003176 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003174:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	7e5b      	ldrb	r3, [r3, #25]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d108      	bne.n	8003190 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	e007      	b.n	80031a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800319e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	7e9b      	ldrb	r3, [r3, #26]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d108      	bne.n	80031ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0220 	orr.w	r2, r2, #32
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	e007      	b.n	80031ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0220 	bic.w	r2, r2, #32
 80031c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	7edb      	ldrb	r3, [r3, #27]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d108      	bne.n	80031e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0210 	bic.w	r2, r2, #16
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	e007      	b.n	80031f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0210 	orr.w	r2, r2, #16
 80031f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	7f1b      	ldrb	r3, [r3, #28]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d108      	bne.n	800320e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0208 	orr.w	r2, r2, #8
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	e007      	b.n	800321e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0208 	bic.w	r2, r2, #8
 800321c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	7f5b      	ldrb	r3, [r3, #29]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d108      	bne.n	8003238 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 0204 	orr.w	r2, r2, #4
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	e007      	b.n	8003248 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0204 	bic.w	r2, r2, #4
 8003246:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	ea42 0103 	orr.w	r1, r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	1e5a      	subs	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003298:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <__NVIC_SetPriorityGrouping+0x40>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032a4:	4013      	ands	r3, r2
 80032a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80032b0:	4b06      	ldr	r3, [pc, #24]	; (80032cc <__NVIC_SetPriorityGrouping+0x44>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032b6:	4a04      	ldr	r2, [pc, #16]	; (80032c8 <__NVIC_SetPriorityGrouping+0x40>)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	60d3      	str	r3, [r2, #12]
}
 80032bc:	bf00      	nop
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	e000ed00 	.word	0xe000ed00
 80032cc:	05fa0000 	.word	0x05fa0000

080032d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032d4:	4b04      	ldr	r3, [pc, #16]	; (80032e8 <__NVIC_GetPriorityGrouping+0x18>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	0a1b      	lsrs	r3, r3, #8
 80032da:	f003 0307 	and.w	r3, r3, #7
}
 80032de:	4618      	mov	r0, r3
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	e000ed00 	.word	0xe000ed00

080032ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	6039      	str	r1, [r7, #0]
 80032f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	db0a      	blt.n	8003316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	b2da      	uxtb	r2, r3
 8003304:	490c      	ldr	r1, [pc, #48]	; (8003338 <__NVIC_SetPriority+0x4c>)
 8003306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330a:	0112      	lsls	r2, r2, #4
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	440b      	add	r3, r1
 8003310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003314:	e00a      	b.n	800332c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	b2da      	uxtb	r2, r3
 800331a:	4908      	ldr	r1, [pc, #32]	; (800333c <__NVIC_SetPriority+0x50>)
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	3b04      	subs	r3, #4
 8003324:	0112      	lsls	r2, r2, #4
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	440b      	add	r3, r1
 800332a:	761a      	strb	r2, [r3, #24]
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	e000e100 	.word	0xe000e100
 800333c:	e000ed00 	.word	0xe000ed00

08003340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003340:	b480      	push	{r7}
 8003342:	b089      	sub	sp, #36	; 0x24
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f1c3 0307 	rsb	r3, r3, #7
 800335a:	2b04      	cmp	r3, #4
 800335c:	bf28      	it	cs
 800335e:	2304      	movcs	r3, #4
 8003360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	3304      	adds	r3, #4
 8003366:	2b06      	cmp	r3, #6
 8003368:	d902      	bls.n	8003370 <NVIC_EncodePriority+0x30>
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	3b03      	subs	r3, #3
 800336e:	e000      	b.n	8003372 <NVIC_EncodePriority+0x32>
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003374:	f04f 32ff 	mov.w	r2, #4294967295
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43da      	mvns	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	401a      	ands	r2, r3
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003388:	f04f 31ff 	mov.w	r1, #4294967295
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	fa01 f303 	lsl.w	r3, r1, r3
 8003392:	43d9      	mvns	r1, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003398:	4313      	orrs	r3, r2
         );
}
 800339a:	4618      	mov	r0, r3
 800339c:	3724      	adds	r7, #36	; 0x24
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
	...

080033a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033b8:	d301      	bcc.n	80033be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ba:	2301      	movs	r3, #1
 80033bc:	e00f      	b.n	80033de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033be:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <SysTick_Config+0x40>)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033c6:	210f      	movs	r1, #15
 80033c8:	f04f 30ff 	mov.w	r0, #4294967295
 80033cc:	f7ff ff8e 	bl	80032ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033d0:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <SysTick_Config+0x40>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033d6:	4b04      	ldr	r3, [pc, #16]	; (80033e8 <SysTick_Config+0x40>)
 80033d8:	2207      	movs	r2, #7
 80033da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	e000e010 	.word	0xe000e010

080033ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff ff47 	bl	8003288 <__NVIC_SetPriorityGrouping>
}
 80033fa:	bf00      	nop
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003402:	b580      	push	{r7, lr}
 8003404:	b086      	sub	sp, #24
 8003406:	af00      	add	r7, sp, #0
 8003408:	4603      	mov	r3, r0
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	607a      	str	r2, [r7, #4]
 800340e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003414:	f7ff ff5c 	bl	80032d0 <__NVIC_GetPriorityGrouping>
 8003418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	68b9      	ldr	r1, [r7, #8]
 800341e:	6978      	ldr	r0, [r7, #20]
 8003420:	f7ff ff8e 	bl	8003340 <NVIC_EncodePriority>
 8003424:	4602      	mov	r2, r0
 8003426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800342a:	4611      	mov	r1, r2
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff ff5d 	bl	80032ec <__NVIC_SetPriority>
}
 8003432:	bf00      	nop
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b082      	sub	sp, #8
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff ffb0 	bl	80033a8 <SysTick_Config>
 8003448:	4603      	mov	r3, r0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003454:	b480      	push	{r7}
 8003456:	b089      	sub	sp, #36	; 0x24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800345e:	2300      	movs	r3, #0
 8003460:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003466:	2300      	movs	r3, #0
 8003468:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800346a:	2300      	movs	r3, #0
 800346c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800346e:	2300      	movs	r3, #0
 8003470:	61fb      	str	r3, [r7, #28]
 8003472:	e175      	b.n	8003760 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003474:	2201      	movs	r2, #1
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	4013      	ands	r3, r2
 8003486:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	429a      	cmp	r2, r3
 800348e:	f040 8164 	bne.w	800375a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d00b      	beq.n	80034b2 <HAL_GPIO_Init+0x5e>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d007      	beq.n	80034b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034a6:	2b11      	cmp	r3, #17
 80034a8:	d003      	beq.n	80034b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b12      	cmp	r3, #18
 80034b0:	d130      	bne.n	8003514 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	2203      	movs	r2, #3
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4013      	ands	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034e8:	2201      	movs	r2, #1
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	091b      	lsrs	r3, r3, #4
 80034fe:	f003 0201 	and.w	r2, r3, #1
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	2203      	movs	r2, #3
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	43db      	mvns	r3, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	4013      	ands	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4313      	orrs	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b02      	cmp	r3, #2
 800354a:	d003      	beq.n	8003554 <HAL_GPIO_Init+0x100>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b12      	cmp	r3, #18
 8003552:	d123      	bne.n	800359c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	08da      	lsrs	r2, r3, #3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3208      	adds	r2, #8
 800355c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	220f      	movs	r2, #15
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43db      	mvns	r3, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4013      	ands	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	691a      	ldr	r2, [r3, #16]
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4313      	orrs	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	08da      	lsrs	r2, r3, #3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3208      	adds	r2, #8
 8003596:	69b9      	ldr	r1, [r7, #24]
 8003598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	2203      	movs	r2, #3
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	43db      	mvns	r3, r3
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4013      	ands	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 0203 	and.w	r2, r3, #3
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 80be 	beq.w	800375a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035de:	4b66      	ldr	r3, [pc, #408]	; (8003778 <HAL_GPIO_Init+0x324>)
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	4a65      	ldr	r2, [pc, #404]	; (8003778 <HAL_GPIO_Init+0x324>)
 80035e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035e8:	6453      	str	r3, [r2, #68]	; 0x44
 80035ea:	4b63      	ldr	r3, [pc, #396]	; (8003778 <HAL_GPIO_Init+0x324>)
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80035f6:	4a61      	ldr	r2, [pc, #388]	; (800377c <HAL_GPIO_Init+0x328>)
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	089b      	lsrs	r3, r3, #2
 80035fc:	3302      	adds	r3, #2
 80035fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003602:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	220f      	movs	r2, #15
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43db      	mvns	r3, r3
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4013      	ands	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a58      	ldr	r2, [pc, #352]	; (8003780 <HAL_GPIO_Init+0x32c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d037      	beq.n	8003692 <HAL_GPIO_Init+0x23e>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a57      	ldr	r2, [pc, #348]	; (8003784 <HAL_GPIO_Init+0x330>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d031      	beq.n	800368e <HAL_GPIO_Init+0x23a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a56      	ldr	r2, [pc, #344]	; (8003788 <HAL_GPIO_Init+0x334>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d02b      	beq.n	800368a <HAL_GPIO_Init+0x236>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a55      	ldr	r2, [pc, #340]	; (800378c <HAL_GPIO_Init+0x338>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d025      	beq.n	8003686 <HAL_GPIO_Init+0x232>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a54      	ldr	r2, [pc, #336]	; (8003790 <HAL_GPIO_Init+0x33c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d01f      	beq.n	8003682 <HAL_GPIO_Init+0x22e>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a53      	ldr	r2, [pc, #332]	; (8003794 <HAL_GPIO_Init+0x340>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d019      	beq.n	800367e <HAL_GPIO_Init+0x22a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a52      	ldr	r2, [pc, #328]	; (8003798 <HAL_GPIO_Init+0x344>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d013      	beq.n	800367a <HAL_GPIO_Init+0x226>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a51      	ldr	r2, [pc, #324]	; (800379c <HAL_GPIO_Init+0x348>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d00d      	beq.n	8003676 <HAL_GPIO_Init+0x222>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a50      	ldr	r2, [pc, #320]	; (80037a0 <HAL_GPIO_Init+0x34c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d007      	beq.n	8003672 <HAL_GPIO_Init+0x21e>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a4f      	ldr	r2, [pc, #316]	; (80037a4 <HAL_GPIO_Init+0x350>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d101      	bne.n	800366e <HAL_GPIO_Init+0x21a>
 800366a:	2309      	movs	r3, #9
 800366c:	e012      	b.n	8003694 <HAL_GPIO_Init+0x240>
 800366e:	230a      	movs	r3, #10
 8003670:	e010      	b.n	8003694 <HAL_GPIO_Init+0x240>
 8003672:	2308      	movs	r3, #8
 8003674:	e00e      	b.n	8003694 <HAL_GPIO_Init+0x240>
 8003676:	2307      	movs	r3, #7
 8003678:	e00c      	b.n	8003694 <HAL_GPIO_Init+0x240>
 800367a:	2306      	movs	r3, #6
 800367c:	e00a      	b.n	8003694 <HAL_GPIO_Init+0x240>
 800367e:	2305      	movs	r3, #5
 8003680:	e008      	b.n	8003694 <HAL_GPIO_Init+0x240>
 8003682:	2304      	movs	r3, #4
 8003684:	e006      	b.n	8003694 <HAL_GPIO_Init+0x240>
 8003686:	2303      	movs	r3, #3
 8003688:	e004      	b.n	8003694 <HAL_GPIO_Init+0x240>
 800368a:	2302      	movs	r3, #2
 800368c:	e002      	b.n	8003694 <HAL_GPIO_Init+0x240>
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <HAL_GPIO_Init+0x240>
 8003692:	2300      	movs	r3, #0
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	f002 0203 	and.w	r2, r2, #3
 800369a:	0092      	lsls	r2, r2, #2
 800369c:	4093      	lsls	r3, r2
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80036a4:	4935      	ldr	r1, [pc, #212]	; (800377c <HAL_GPIO_Init+0x328>)
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	089b      	lsrs	r3, r3, #2
 80036aa:	3302      	adds	r3, #2
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036b2:	4b3d      	ldr	r3, [pc, #244]	; (80037a8 <HAL_GPIO_Init+0x354>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	43db      	mvns	r3, r3
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	4013      	ands	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036d6:	4a34      	ldr	r2, [pc, #208]	; (80037a8 <HAL_GPIO_Init+0x354>)
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80036dc:	4b32      	ldr	r3, [pc, #200]	; (80037a8 <HAL_GPIO_Init+0x354>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	43db      	mvns	r3, r3
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4013      	ands	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003700:	4a29      	ldr	r2, [pc, #164]	; (80037a8 <HAL_GPIO_Init+0x354>)
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003706:	4b28      	ldr	r3, [pc, #160]	; (80037a8 <HAL_GPIO_Init+0x354>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	43db      	mvns	r3, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4013      	ands	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	4313      	orrs	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800372a:	4a1f      	ldr	r2, [pc, #124]	; (80037a8 <HAL_GPIO_Init+0x354>)
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003730:	4b1d      	ldr	r3, [pc, #116]	; (80037a8 <HAL_GPIO_Init+0x354>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	43db      	mvns	r3, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4013      	ands	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003754:	4a14      	ldr	r2, [pc, #80]	; (80037a8 <HAL_GPIO_Init+0x354>)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	3301      	adds	r3, #1
 800375e:	61fb      	str	r3, [r7, #28]
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	2b0f      	cmp	r3, #15
 8003764:	f67f ae86 	bls.w	8003474 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003768:	bf00      	nop
 800376a:	bf00      	nop
 800376c:	3724      	adds	r7, #36	; 0x24
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40023800 	.word	0x40023800
 800377c:	40013800 	.word	0x40013800
 8003780:	40020000 	.word	0x40020000
 8003784:	40020400 	.word	0x40020400
 8003788:	40020800 	.word	0x40020800
 800378c:	40020c00 	.word	0x40020c00
 8003790:	40021000 	.word	0x40021000
 8003794:	40021400 	.word	0x40021400
 8003798:	40021800 	.word	0x40021800
 800379c:	40021c00 	.word	0x40021c00
 80037a0:	40022000 	.word	0x40022000
 80037a4:	40022400 	.word	0x40022400
 80037a8:	40013c00 	.word	0x40013c00

080037ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691a      	ldr	r2, [r3, #16]
 80037bc:	887b      	ldrh	r3, [r7, #2]
 80037be:	4013      	ands	r3, r2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d002      	beq.n	80037ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037c4:	2301      	movs	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]
 80037c8:	e001      	b.n	80037ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037ca:	2300      	movs	r3, #0
 80037cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	460b      	mov	r3, r1
 80037e6:	807b      	strh	r3, [r7, #2]
 80037e8:	4613      	mov	r3, r2
 80037ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037ec:	787b      	ldrb	r3, [r7, #1]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037f2:	887a      	ldrh	r2, [r7, #2]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80037f8:	e003      	b.n	8003802 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80037fa:	887b      	ldrh	r3, [r7, #2]
 80037fc:	041a      	lsls	r2, r3, #16
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	619a      	str	r2, [r3, #24]
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
	...

08003810 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003816:	2300      	movs	r3, #0
 8003818:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800381a:	4b23      	ldr	r3, [pc, #140]	; (80038a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	4a22      	ldr	r2, [pc, #136]	; (80038a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003824:	6413      	str	r3, [r2, #64]	; 0x40
 8003826:	4b20      	ldr	r3, [pc, #128]	; (80038a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382e:	603b      	str	r3, [r7, #0]
 8003830:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003832:	4b1e      	ldr	r3, [pc, #120]	; (80038ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a1d      	ldr	r2, [pc, #116]	; (80038ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800383e:	f7ff f927 	bl	8002a90 <HAL_GetTick>
 8003842:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003844:	e009      	b.n	800385a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003846:	f7ff f923 	bl	8002a90 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003854:	d901      	bls.n	800385a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e022      	b.n	80038a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800385a:	4b14      	ldr	r3, [pc, #80]	; (80038ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003866:	d1ee      	bne.n	8003846 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003868:	4b10      	ldr	r3, [pc, #64]	; (80038ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a0f      	ldr	r2, [pc, #60]	; (80038ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800386e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003872:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003874:	f7ff f90c 	bl	8002a90 <HAL_GetTick>
 8003878:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800387a:	e009      	b.n	8003890 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800387c:	f7ff f908 	bl	8002a90 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800388a:	d901      	bls.n	8003890 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e007      	b.n	80038a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003890:	4b06      	ldr	r3, [pc, #24]	; (80038ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003898:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800389c:	d1ee      	bne.n	800387c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40023800 	.word	0x40023800
 80038ac:	40007000 	.word	0x40007000

080038b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80038b8:	2300      	movs	r3, #0
 80038ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e29b      	b.n	8003dfe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 8087 	beq.w	80039e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038d4:	4b96      	ldr	r3, [pc, #600]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 030c 	and.w	r3, r3, #12
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d00c      	beq.n	80038fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038e0:	4b93      	ldr	r3, [pc, #588]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f003 030c 	and.w	r3, r3, #12
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d112      	bne.n	8003912 <HAL_RCC_OscConfig+0x62>
 80038ec:	4b90      	ldr	r3, [pc, #576]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038f8:	d10b      	bne.n	8003912 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038fa:	4b8d      	ldr	r3, [pc, #564]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d06c      	beq.n	80039e0 <HAL_RCC_OscConfig+0x130>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d168      	bne.n	80039e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e275      	b.n	8003dfe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800391a:	d106      	bne.n	800392a <HAL_RCC_OscConfig+0x7a>
 800391c:	4b84      	ldr	r3, [pc, #528]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a83      	ldr	r2, [pc, #524]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 8003922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003926:	6013      	str	r3, [r2, #0]
 8003928:	e02e      	b.n	8003988 <HAL_RCC_OscConfig+0xd8>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10c      	bne.n	800394c <HAL_RCC_OscConfig+0x9c>
 8003932:	4b7f      	ldr	r3, [pc, #508]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a7e      	ldr	r2, [pc, #504]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 8003938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	4b7c      	ldr	r3, [pc, #496]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a7b      	ldr	r2, [pc, #492]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 8003944:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	e01d      	b.n	8003988 <HAL_RCC_OscConfig+0xd8>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003954:	d10c      	bne.n	8003970 <HAL_RCC_OscConfig+0xc0>
 8003956:	4b76      	ldr	r3, [pc, #472]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a75      	ldr	r2, [pc, #468]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 800395c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	4b73      	ldr	r3, [pc, #460]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a72      	ldr	r2, [pc, #456]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 8003968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	e00b      	b.n	8003988 <HAL_RCC_OscConfig+0xd8>
 8003970:	4b6f      	ldr	r3, [pc, #444]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a6e      	ldr	r2, [pc, #440]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 8003976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	4b6c      	ldr	r3, [pc, #432]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a6b      	ldr	r2, [pc, #428]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 8003982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d013      	beq.n	80039b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003990:	f7ff f87e 	bl	8002a90 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003998:	f7ff f87a 	bl	8002a90 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b64      	cmp	r3, #100	; 0x64
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e229      	b.n	8003dfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039aa:	4b61      	ldr	r3, [pc, #388]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0f0      	beq.n	8003998 <HAL_RCC_OscConfig+0xe8>
 80039b6:	e014      	b.n	80039e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b8:	f7ff f86a 	bl	8002a90 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c0:	f7ff f866 	bl	8002a90 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b64      	cmp	r3, #100	; 0x64
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e215      	b.n	8003dfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039d2:	4b57      	ldr	r3, [pc, #348]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f0      	bne.n	80039c0 <HAL_RCC_OscConfig+0x110>
 80039de:	e000      	b.n	80039e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d069      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039ee:	4b50      	ldr	r3, [pc, #320]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 030c 	and.w	r3, r3, #12
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00b      	beq.n	8003a12 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039fa:	4b4d      	ldr	r3, [pc, #308]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 030c 	and.w	r3, r3, #12
 8003a02:	2b08      	cmp	r3, #8
 8003a04:	d11c      	bne.n	8003a40 <HAL_RCC_OscConfig+0x190>
 8003a06:	4b4a      	ldr	r3, [pc, #296]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d116      	bne.n	8003a40 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a12:	4b47      	ldr	r3, [pc, #284]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d005      	beq.n	8003a2a <HAL_RCC_OscConfig+0x17a>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d001      	beq.n	8003a2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e1e9      	b.n	8003dfe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a2a:	4b41      	ldr	r3, [pc, #260]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	493d      	ldr	r1, [pc, #244]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a3e:	e040      	b.n	8003ac2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d023      	beq.n	8003a90 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a48:	4b39      	ldr	r3, [pc, #228]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a38      	ldr	r2, [pc, #224]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 8003a4e:	f043 0301 	orr.w	r3, r3, #1
 8003a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a54:	f7ff f81c 	bl	8002a90 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a5c:	f7ff f818 	bl	8002a90 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e1c7      	b.n	8003dfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a6e:	4b30      	ldr	r3, [pc, #192]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f0      	beq.n	8003a5c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a7a:	4b2d      	ldr	r3, [pc, #180]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4929      	ldr	r1, [pc, #164]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	600b      	str	r3, [r1, #0]
 8003a8e:	e018      	b.n	8003ac2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a90:	4b27      	ldr	r3, [pc, #156]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a26      	ldr	r2, [pc, #152]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 8003a96:	f023 0301 	bic.w	r3, r3, #1
 8003a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9c:	f7fe fff8 	bl	8002a90 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aa4:	f7fe fff4 	bl	8002a90 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e1a3      	b.n	8003dfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab6:	4b1e      	ldr	r3, [pc, #120]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f0      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d038      	beq.n	8003b40 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d019      	beq.n	8003b0a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ad6:	4b16      	ldr	r3, [pc, #88]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 8003ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ada:	4a15      	ldr	r2, [pc, #84]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 8003adc:	f043 0301 	orr.w	r3, r3, #1
 8003ae0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae2:	f7fe ffd5 	bl	8002a90 <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ae8:	e008      	b.n	8003afc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aea:	f7fe ffd1 	bl	8002a90 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e180      	b.n	8003dfe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003afc:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 8003afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0f0      	beq.n	8003aea <HAL_RCC_OscConfig+0x23a>
 8003b08:	e01a      	b.n	8003b40 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b0a:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 8003b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0e:	4a08      	ldr	r2, [pc, #32]	; (8003b30 <HAL_RCC_OscConfig+0x280>)
 8003b10:	f023 0301 	bic.w	r3, r3, #1
 8003b14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b16:	f7fe ffbb 	bl	8002a90 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b1c:	e00a      	b.n	8003b34 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b1e:	f7fe ffb7 	bl	8002a90 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d903      	bls.n	8003b34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e166      	b.n	8003dfe <HAL_RCC_OscConfig+0x54e>
 8003b30:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b34:	4b92      	ldr	r3, [pc, #584]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1ee      	bne.n	8003b1e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 80a4 	beq.w	8003c96 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b4e:	4b8c      	ldr	r3, [pc, #560]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10d      	bne.n	8003b76 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b5a:	4b89      	ldr	r3, [pc, #548]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	4a88      	ldr	r2, [pc, #544]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b64:	6413      	str	r3, [r2, #64]	; 0x40
 8003b66:	4b86      	ldr	r3, [pc, #536]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	60bb      	str	r3, [r7, #8]
 8003b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b72:	2301      	movs	r3, #1
 8003b74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b76:	4b83      	ldr	r3, [pc, #524]	; (8003d84 <HAL_RCC_OscConfig+0x4d4>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d118      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003b82:	4b80      	ldr	r3, [pc, #512]	; (8003d84 <HAL_RCC_OscConfig+0x4d4>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a7f      	ldr	r2, [pc, #508]	; (8003d84 <HAL_RCC_OscConfig+0x4d4>)
 8003b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b8e:	f7fe ff7f 	bl	8002a90 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b96:	f7fe ff7b 	bl	8002a90 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b64      	cmp	r3, #100	; 0x64
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e12a      	b.n	8003dfe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ba8:	4b76      	ldr	r3, [pc, #472]	; (8003d84 <HAL_RCC_OscConfig+0x4d4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0f0      	beq.n	8003b96 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d106      	bne.n	8003bca <HAL_RCC_OscConfig+0x31a>
 8003bbc:	4b70      	ldr	r3, [pc, #448]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc0:	4a6f      	ldr	r2, [pc, #444]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc8:	e02d      	b.n	8003c26 <HAL_RCC_OscConfig+0x376>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10c      	bne.n	8003bec <HAL_RCC_OscConfig+0x33c>
 8003bd2:	4b6b      	ldr	r3, [pc, #428]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd6:	4a6a      	ldr	r2, [pc, #424]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003bd8:	f023 0301 	bic.w	r3, r3, #1
 8003bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bde:	4b68      	ldr	r3, [pc, #416]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be2:	4a67      	ldr	r2, [pc, #412]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003be4:	f023 0304 	bic.w	r3, r3, #4
 8003be8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bea:	e01c      	b.n	8003c26 <HAL_RCC_OscConfig+0x376>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b05      	cmp	r3, #5
 8003bf2:	d10c      	bne.n	8003c0e <HAL_RCC_OscConfig+0x35e>
 8003bf4:	4b62      	ldr	r3, [pc, #392]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf8:	4a61      	ldr	r2, [pc, #388]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003bfa:	f043 0304 	orr.w	r3, r3, #4
 8003bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8003c00:	4b5f      	ldr	r3, [pc, #380]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c04:	4a5e      	ldr	r2, [pc, #376]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003c06:	f043 0301 	orr.w	r3, r3, #1
 8003c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c0c:	e00b      	b.n	8003c26 <HAL_RCC_OscConfig+0x376>
 8003c0e:	4b5c      	ldr	r3, [pc, #368]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c12:	4a5b      	ldr	r2, [pc, #364]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003c14:	f023 0301 	bic.w	r3, r3, #1
 8003c18:	6713      	str	r3, [r2, #112]	; 0x70
 8003c1a:	4b59      	ldr	r3, [pc, #356]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1e:	4a58      	ldr	r2, [pc, #352]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003c20:	f023 0304 	bic.w	r3, r3, #4
 8003c24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d015      	beq.n	8003c5a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2e:	f7fe ff2f 	bl	8002a90 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c34:	e00a      	b.n	8003c4c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c36:	f7fe ff2b 	bl	8002a90 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e0d8      	b.n	8003dfe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4c:	4b4c      	ldr	r3, [pc, #304]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0ee      	beq.n	8003c36 <HAL_RCC_OscConfig+0x386>
 8003c58:	e014      	b.n	8003c84 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5a:	f7fe ff19 	bl	8002a90 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c60:	e00a      	b.n	8003c78 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c62:	f7fe ff15 	bl	8002a90 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e0c2      	b.n	8003dfe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c78:	4b41      	ldr	r3, [pc, #260]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1ee      	bne.n	8003c62 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c84:	7dfb      	ldrb	r3, [r7, #23]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d105      	bne.n	8003c96 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c8a:	4b3d      	ldr	r3, [pc, #244]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	4a3c      	ldr	r2, [pc, #240]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 80ae 	beq.w	8003dfc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ca0:	4b37      	ldr	r3, [pc, #220]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 030c 	and.w	r3, r3, #12
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d06d      	beq.n	8003d88 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d14b      	bne.n	8003d4c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb4:	4b32      	ldr	r3, [pc, #200]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a31      	ldr	r2, [pc, #196]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003cba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc0:	f7fe fee6 	bl	8002a90 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc8:	f7fe fee2 	bl	8002a90 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e091      	b.n	8003dfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cda:	4b29      	ldr	r3, [pc, #164]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69da      	ldr	r2, [r3, #28]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	019b      	lsls	r3, r3, #6
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfc:	085b      	lsrs	r3, r3, #1
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	041b      	lsls	r3, r3, #16
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	061b      	lsls	r3, r3, #24
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	071b      	lsls	r3, r3, #28
 8003d12:	491b      	ldr	r1, [pc, #108]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d18:	4b19      	ldr	r3, [pc, #100]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a18      	ldr	r2, [pc, #96]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003d1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d24:	f7fe feb4 	bl	8002a90 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d2c:	f7fe feb0 	bl	8002a90 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e05f      	b.n	8003dfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d3e:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0f0      	beq.n	8003d2c <HAL_RCC_OscConfig+0x47c>
 8003d4a:	e057      	b.n	8003dfc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d4c:	4b0c      	ldr	r3, [pc, #48]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a0b      	ldr	r2, [pc, #44]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003d52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d58:	f7fe fe9a 	bl	8002a90 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d60:	f7fe fe96 	bl	8002a90 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e045      	b.n	8003dfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d72:	4b03      	ldr	r3, [pc, #12]	; (8003d80 <HAL_RCC_OscConfig+0x4d0>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_OscConfig+0x4b0>
 8003d7e:	e03d      	b.n	8003dfc <HAL_RCC_OscConfig+0x54c>
 8003d80:	40023800 	.word	0x40023800
 8003d84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003d88:	4b1f      	ldr	r3, [pc, #124]	; (8003e08 <HAL_RCC_OscConfig+0x558>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d030      	beq.n	8003df8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d129      	bne.n	8003df8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d122      	bne.n	8003df8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003db8:	4013      	ands	r3, r2
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dbe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d119      	bne.n	8003df8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dce:	085b      	lsrs	r3, r3, #1
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d10f      	bne.n	8003df8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d107      	bne.n	8003df8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d001      	beq.n	8003dfc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e000      	b.n	8003dfe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40023800 	.word	0x40023800

08003e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e0d0      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e24:	4b6a      	ldr	r3, [pc, #424]	; (8003fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 030f 	and.w	r3, r3, #15
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d910      	bls.n	8003e54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e32:	4b67      	ldr	r3, [pc, #412]	; (8003fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f023 020f 	bic.w	r2, r3, #15
 8003e3a:	4965      	ldr	r1, [pc, #404]	; (8003fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e42:	4b63      	ldr	r3, [pc, #396]	; (8003fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d001      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e0b8      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d020      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e6c:	4b59      	ldr	r3, [pc, #356]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	4a58      	ldr	r2, [pc, #352]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0308 	and.w	r3, r3, #8
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d005      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e84:	4b53      	ldr	r3, [pc, #332]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	4a52      	ldr	r2, [pc, #328]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e90:	4b50      	ldr	r3, [pc, #320]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	494d      	ldr	r1, [pc, #308]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d040      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d107      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb6:	4b47      	ldr	r3, [pc, #284]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d115      	bne.n	8003eee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e07f      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d107      	bne.n	8003ede <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ece:	4b41      	ldr	r3, [pc, #260]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d109      	bne.n	8003eee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e073      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ede:	4b3d      	ldr	r3, [pc, #244]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e06b      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eee:	4b39      	ldr	r3, [pc, #228]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f023 0203 	bic.w	r2, r3, #3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	4936      	ldr	r1, [pc, #216]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f00:	f7fe fdc6 	bl	8002a90 <HAL_GetTick>
 8003f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f06:	e00a      	b.n	8003f1e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f08:	f7fe fdc2 	bl	8002a90 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e053      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f1e:	4b2d      	ldr	r3, [pc, #180]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 020c 	and.w	r2, r3, #12
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d1eb      	bne.n	8003f08 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f30:	4b27      	ldr	r3, [pc, #156]	; (8003fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 030f 	and.w	r3, r3, #15
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d210      	bcs.n	8003f60 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3e:	4b24      	ldr	r3, [pc, #144]	; (8003fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f023 020f 	bic.w	r2, r3, #15
 8003f46:	4922      	ldr	r1, [pc, #136]	; (8003fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f4e:	4b20      	ldr	r3, [pc, #128]	; (8003fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d001      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e032      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d008      	beq.n	8003f7e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f6c:	4b19      	ldr	r3, [pc, #100]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	4916      	ldr	r1, [pc, #88]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d009      	beq.n	8003f9e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f8a:	4b12      	ldr	r3, [pc, #72]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	490e      	ldr	r1, [pc, #56]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f9e:	f000 f821 	bl	8003fe4 <HAL_RCC_GetSysClockFreq>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	091b      	lsrs	r3, r3, #4
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	490a      	ldr	r1, [pc, #40]	; (8003fd8 <HAL_RCC_ClockConfig+0x1cc>)
 8003fb0:	5ccb      	ldrb	r3, [r1, r3]
 8003fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb6:	4a09      	ldr	r2, [pc, #36]	; (8003fdc <HAL_RCC_ClockConfig+0x1d0>)
 8003fb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fba:	4b09      	ldr	r3, [pc, #36]	; (8003fe0 <HAL_RCC_ClockConfig+0x1d4>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fe fd22 	bl	8002a08 <HAL_InitTick>

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	40023c00 	.word	0x40023c00
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	08007a1c 	.word	0x08007a1c
 8003fdc:	20000000 	.word	0x20000000
 8003fe0:	20000004 	.word	0x20000004

08003fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fe4:	b5b0      	push	{r4, r5, r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003fea:	2100      	movs	r1, #0
 8003fec:	6079      	str	r1, [r7, #4]
 8003fee:	2100      	movs	r1, #0
 8003ff0:	60f9      	str	r1, [r7, #12]
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ffa:	4952      	ldr	r1, [pc, #328]	; (8004144 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ffc:	6889      	ldr	r1, [r1, #8]
 8003ffe:	f001 010c 	and.w	r1, r1, #12
 8004002:	2908      	cmp	r1, #8
 8004004:	d00d      	beq.n	8004022 <HAL_RCC_GetSysClockFreq+0x3e>
 8004006:	2908      	cmp	r1, #8
 8004008:	f200 8094 	bhi.w	8004134 <HAL_RCC_GetSysClockFreq+0x150>
 800400c:	2900      	cmp	r1, #0
 800400e:	d002      	beq.n	8004016 <HAL_RCC_GetSysClockFreq+0x32>
 8004010:	2904      	cmp	r1, #4
 8004012:	d003      	beq.n	800401c <HAL_RCC_GetSysClockFreq+0x38>
 8004014:	e08e      	b.n	8004134 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004016:	4b4c      	ldr	r3, [pc, #304]	; (8004148 <HAL_RCC_GetSysClockFreq+0x164>)
 8004018:	60bb      	str	r3, [r7, #8]
      break;
 800401a:	e08e      	b.n	800413a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800401c:	4b4b      	ldr	r3, [pc, #300]	; (800414c <HAL_RCC_GetSysClockFreq+0x168>)
 800401e:	60bb      	str	r3, [r7, #8]
      break;
 8004020:	e08b      	b.n	800413a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004022:	4948      	ldr	r1, [pc, #288]	; (8004144 <HAL_RCC_GetSysClockFreq+0x160>)
 8004024:	6849      	ldr	r1, [r1, #4]
 8004026:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800402a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800402c:	4945      	ldr	r1, [pc, #276]	; (8004144 <HAL_RCC_GetSysClockFreq+0x160>)
 800402e:	6849      	ldr	r1, [r1, #4]
 8004030:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004034:	2900      	cmp	r1, #0
 8004036:	d024      	beq.n	8004082 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004038:	4942      	ldr	r1, [pc, #264]	; (8004144 <HAL_RCC_GetSysClockFreq+0x160>)
 800403a:	6849      	ldr	r1, [r1, #4]
 800403c:	0989      	lsrs	r1, r1, #6
 800403e:	4608      	mov	r0, r1
 8004040:	f04f 0100 	mov.w	r1, #0
 8004044:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004048:	f04f 0500 	mov.w	r5, #0
 800404c:	ea00 0204 	and.w	r2, r0, r4
 8004050:	ea01 0305 	and.w	r3, r1, r5
 8004054:	493d      	ldr	r1, [pc, #244]	; (800414c <HAL_RCC_GetSysClockFreq+0x168>)
 8004056:	fb01 f003 	mul.w	r0, r1, r3
 800405a:	2100      	movs	r1, #0
 800405c:	fb01 f102 	mul.w	r1, r1, r2
 8004060:	1844      	adds	r4, r0, r1
 8004062:	493a      	ldr	r1, [pc, #232]	; (800414c <HAL_RCC_GetSysClockFreq+0x168>)
 8004064:	fba2 0101 	umull	r0, r1, r2, r1
 8004068:	1863      	adds	r3, r4, r1
 800406a:	4619      	mov	r1, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	461a      	mov	r2, r3
 8004070:	f04f 0300 	mov.w	r3, #0
 8004074:	f7fc f8e8 	bl	8000248 <__aeabi_uldivmod>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4613      	mov	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	e04a      	b.n	8004118 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004082:	4b30      	ldr	r3, [pc, #192]	; (8004144 <HAL_RCC_GetSysClockFreq+0x160>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	099b      	lsrs	r3, r3, #6
 8004088:	461a      	mov	r2, r3
 800408a:	f04f 0300 	mov.w	r3, #0
 800408e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004092:	f04f 0100 	mov.w	r1, #0
 8004096:	ea02 0400 	and.w	r4, r2, r0
 800409a:	ea03 0501 	and.w	r5, r3, r1
 800409e:	4620      	mov	r0, r4
 80040a0:	4629      	mov	r1, r5
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	014b      	lsls	r3, r1, #5
 80040ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040b0:	0142      	lsls	r2, r0, #5
 80040b2:	4610      	mov	r0, r2
 80040b4:	4619      	mov	r1, r3
 80040b6:	1b00      	subs	r0, r0, r4
 80040b8:	eb61 0105 	sbc.w	r1, r1, r5
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	018b      	lsls	r3, r1, #6
 80040c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040ca:	0182      	lsls	r2, r0, #6
 80040cc:	1a12      	subs	r2, r2, r0
 80040ce:	eb63 0301 	sbc.w	r3, r3, r1
 80040d2:	f04f 0000 	mov.w	r0, #0
 80040d6:	f04f 0100 	mov.w	r1, #0
 80040da:	00d9      	lsls	r1, r3, #3
 80040dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040e0:	00d0      	lsls	r0, r2, #3
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	1912      	adds	r2, r2, r4
 80040e8:	eb45 0303 	adc.w	r3, r5, r3
 80040ec:	f04f 0000 	mov.w	r0, #0
 80040f0:	f04f 0100 	mov.w	r1, #0
 80040f4:	0299      	lsls	r1, r3, #10
 80040f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80040fa:	0290      	lsls	r0, r2, #10
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4610      	mov	r0, r2
 8004102:	4619      	mov	r1, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	461a      	mov	r2, r3
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	f7fc f89c 	bl	8000248 <__aeabi_uldivmod>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4613      	mov	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004118:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <HAL_RCC_GetSysClockFreq+0x160>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	0c1b      	lsrs	r3, r3, #16
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	3301      	adds	r3, #1
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004130:	60bb      	str	r3, [r7, #8]
      break;
 8004132:	e002      	b.n	800413a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004134:	4b04      	ldr	r3, [pc, #16]	; (8004148 <HAL_RCC_GetSysClockFreq+0x164>)
 8004136:	60bb      	str	r3, [r7, #8]
      break;
 8004138:	bf00      	nop
    }
  }
  return sysclockfreq;
 800413a:	68bb      	ldr	r3, [r7, #8]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bdb0      	pop	{r4, r5, r7, pc}
 8004144:	40023800 	.word	0x40023800
 8004148:	00f42400 	.word	0x00f42400
 800414c:	017d7840 	.word	0x017d7840

08004150 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004154:	4b03      	ldr	r3, [pc, #12]	; (8004164 <HAL_RCC_GetHCLKFreq+0x14>)
 8004156:	681b      	ldr	r3, [r3, #0]
}
 8004158:	4618      	mov	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	20000000 	.word	0x20000000

08004168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800416c:	f7ff fff0 	bl	8004150 <HAL_RCC_GetHCLKFreq>
 8004170:	4602      	mov	r2, r0
 8004172:	4b05      	ldr	r3, [pc, #20]	; (8004188 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	0a9b      	lsrs	r3, r3, #10
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	4903      	ldr	r1, [pc, #12]	; (800418c <HAL_RCC_GetPCLK1Freq+0x24>)
 800417e:	5ccb      	ldrb	r3, [r1, r3]
 8004180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004184:	4618      	mov	r0, r3
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40023800 	.word	0x40023800
 800418c:	08007a2c 	.word	0x08007a2c

08004190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004194:	f7ff ffdc 	bl	8004150 <HAL_RCC_GetHCLKFreq>
 8004198:	4602      	mov	r2, r0
 800419a:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	0b5b      	lsrs	r3, r3, #13
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	4903      	ldr	r1, [pc, #12]	; (80041b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041a6:	5ccb      	ldrb	r3, [r1, r3]
 80041a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40023800 	.word	0x40023800
 80041b4:	08007a2c 	.word	0x08007a2c

080041b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80041c8:	2300      	movs	r3, #0
 80041ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80041cc:	2300      	movs	r3, #0
 80041ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d012      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041e0:	4b69      	ldr	r3, [pc, #420]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	4a68      	ldr	r2, [pc, #416]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80041ea:	6093      	str	r3, [r2, #8]
 80041ec:	4b66      	ldr	r3, [pc, #408]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f4:	4964      	ldr	r1, [pc, #400]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004202:	2301      	movs	r3, #1
 8004204:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d017      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004212:	4b5d      	ldr	r3, [pc, #372]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004218:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004220:	4959      	ldr	r1, [pc, #356]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004230:	d101      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004232:	2301      	movs	r3, #1
 8004234:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800423e:	2301      	movs	r3, #1
 8004240:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d017      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800424e:	4b4e      	ldr	r3, [pc, #312]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004254:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	494a      	ldr	r1, [pc, #296]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800426c:	d101      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800426e:	2301      	movs	r3, #1
 8004270:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800427a:	2301      	movs	r3, #1
 800427c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800428a:	2301      	movs	r3, #1
 800428c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0320 	and.w	r3, r3, #32
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 808b 	beq.w	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800429c:	4b3a      	ldr	r3, [pc, #232]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	4a39      	ldr	r2, [pc, #228]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a6:	6413      	str	r3, [r2, #64]	; 0x40
 80042a8:	4b37      	ldr	r3, [pc, #220]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b0:	60bb      	str	r3, [r7, #8]
 80042b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80042b4:	4b35      	ldr	r3, [pc, #212]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a34      	ldr	r2, [pc, #208]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c0:	f7fe fbe6 	bl	8002a90 <HAL_GetTick>
 80042c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c8:	f7fe fbe2 	bl	8002a90 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	; 0x64
 80042d4:	d901      	bls.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e38f      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80042da:	4b2c      	ldr	r3, [pc, #176]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042e6:	4b28      	ldr	r3, [pc, #160]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d035      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	429a      	cmp	r2, r3
 8004302:	d02e      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004304:	4b20      	ldr	r3, [pc, #128]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800430c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800430e:	4b1e      	ldr	r3, [pc, #120]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004312:	4a1d      	ldr	r2, [pc, #116]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004318:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800431a:	4b1b      	ldr	r3, [pc, #108]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800431c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431e:	4a1a      	ldr	r2, [pc, #104]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004324:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004326:	4a18      	ldr	r2, [pc, #96]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800432c:	4b16      	ldr	r3, [pc, #88]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800432e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b01      	cmp	r3, #1
 8004336:	d114      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004338:	f7fe fbaa 	bl	8002a90 <HAL_GetTick>
 800433c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800433e:	e00a      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004340:	f7fe fba6 	bl	8002a90 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	f241 3288 	movw	r2, #5000	; 0x1388
 800434e:	4293      	cmp	r3, r2
 8004350:	d901      	bls.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e351      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004356:	4b0c      	ldr	r3, [pc, #48]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0ee      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800436a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800436e:	d111      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004370:	4b05      	ldr	r3, [pc, #20]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800437c:	4b04      	ldr	r3, [pc, #16]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800437e:	400b      	ands	r3, r1
 8004380:	4901      	ldr	r1, [pc, #4]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004382:	4313      	orrs	r3, r2
 8004384:	608b      	str	r3, [r1, #8]
 8004386:	e00b      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004388:	40023800 	.word	0x40023800
 800438c:	40007000 	.word	0x40007000
 8004390:	0ffffcff 	.word	0x0ffffcff
 8004394:	4bb3      	ldr	r3, [pc, #716]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	4ab2      	ldr	r2, [pc, #712]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800439a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800439e:	6093      	str	r3, [r2, #8]
 80043a0:	4bb0      	ldr	r3, [pc, #704]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ac:	49ad      	ldr	r1, [pc, #692]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0310 	and.w	r3, r3, #16
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d010      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043be:	4ba9      	ldr	r3, [pc, #676]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043c4:	4aa7      	ldr	r2, [pc, #668]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80043ce:	4ba5      	ldr	r3, [pc, #660]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d8:	49a2      	ldr	r1, [pc, #648]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00a      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043ec:	4b9d      	ldr	r3, [pc, #628]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043fa:	499a      	ldr	r1, [pc, #616]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00a      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800440e:	4b95      	ldr	r3, [pc, #596]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004414:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800441c:	4991      	ldr	r1, [pc, #580]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800441e:	4313      	orrs	r3, r2
 8004420:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00a      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004430:	4b8c      	ldr	r3, [pc, #560]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004436:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800443e:	4989      	ldr	r1, [pc, #548]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004440:	4313      	orrs	r3, r2
 8004442:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004452:	4b84      	ldr	r3, [pc, #528]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004458:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004460:	4980      	ldr	r1, [pc, #512]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00a      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004474:	4b7b      	ldr	r3, [pc, #492]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447a:	f023 0203 	bic.w	r2, r3, #3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004482:	4978      	ldr	r1, [pc, #480]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004484:	4313      	orrs	r3, r2
 8004486:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004496:	4b73      	ldr	r3, [pc, #460]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449c:	f023 020c 	bic.w	r2, r3, #12
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a4:	496f      	ldr	r1, [pc, #444]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00a      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044b8:	4b6a      	ldr	r3, [pc, #424]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c6:	4967      	ldr	r1, [pc, #412]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044da:	4b62      	ldr	r3, [pc, #392]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e8:	495e      	ldr	r1, [pc, #376]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00a      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044fc:	4b59      	ldr	r3, [pc, #356]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004502:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450a:	4956      	ldr	r1, [pc, #344]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800450c:	4313      	orrs	r3, r2
 800450e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800451e:	4b51      	ldr	r3, [pc, #324]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004524:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452c:	494d      	ldr	r1, [pc, #308]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800452e:	4313      	orrs	r3, r2
 8004530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00a      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004540:	4b48      	ldr	r3, [pc, #288]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004546:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800454e:	4945      	ldr	r1, [pc, #276]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004550:	4313      	orrs	r3, r2
 8004552:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004562:	4b40      	ldr	r3, [pc, #256]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004568:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004570:	493c      	ldr	r1, [pc, #240]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00a      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004584:	4b37      	ldr	r3, [pc, #220]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004592:	4934      	ldr	r1, [pc, #208]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d011      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80045a6:	4b2f      	ldr	r3, [pc, #188]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045b4:	492b      	ldr	r1, [pc, #172]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045c4:	d101      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80045c6:	2301      	movs	r3, #1
 80045c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80045d6:	2301      	movs	r3, #1
 80045d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045e6:	4b1f      	ldr	r3, [pc, #124]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045f4:	491b      	ldr	r1, [pc, #108]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00b      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004608:	4b16      	ldr	r3, [pc, #88]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800460a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004618:	4912      	ldr	r1, [pc, #72]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800461a:	4313      	orrs	r3, r2
 800461c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00b      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800462c:	4b0d      	ldr	r3, [pc, #52]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800462e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004632:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800463c:	4909      	ldr	r1, [pc, #36]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800463e:	4313      	orrs	r3, r2
 8004640:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00f      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004650:	4b04      	ldr	r3, [pc, #16]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004652:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004656:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004660:	e002      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004662:	bf00      	nop
 8004664:	40023800 	.word	0x40023800
 8004668:	4986      	ldr	r1, [pc, #536]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00b      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800467c:	4b81      	ldr	r3, [pc, #516]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800467e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004682:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800468c:	497d      	ldr	r1, [pc, #500]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d006      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 80d6 	beq.w	8004854 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046a8:	4b76      	ldr	r3, [pc, #472]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a75      	ldr	r2, [pc, #468]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b4:	f7fe f9ec 	bl	8002a90 <HAL_GetTick>
 80046b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046ba:	e008      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046bc:	f7fe f9e8 	bl	8002a90 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b64      	cmp	r3, #100	; 0x64
 80046c8:	d901      	bls.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e195      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046ce:	4b6d      	ldr	r3, [pc, #436]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1f0      	bne.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d021      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d11d      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046ee:	4b65      	ldr	r3, [pc, #404]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046f4:	0c1b      	lsrs	r3, r3, #16
 80046f6:	f003 0303 	and.w	r3, r3, #3
 80046fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80046fc:	4b61      	ldr	r3, [pc, #388]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004702:	0e1b      	lsrs	r3, r3, #24
 8004704:	f003 030f 	and.w	r3, r3, #15
 8004708:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	019a      	lsls	r2, r3, #6
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	041b      	lsls	r3, r3, #16
 8004714:	431a      	orrs	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	061b      	lsls	r3, r3, #24
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	071b      	lsls	r3, r3, #28
 8004722:	4958      	ldr	r1, [pc, #352]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004724:	4313      	orrs	r3, r2
 8004726:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d004      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800473e:	d00a      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004748:	2b00      	cmp	r3, #0
 800474a:	d02e      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004754:	d129      	bne.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004756:	4b4b      	ldr	r3, [pc, #300]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800475c:	0c1b      	lsrs	r3, r3, #16
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004764:	4b47      	ldr	r3, [pc, #284]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800476a:	0f1b      	lsrs	r3, r3, #28
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	019a      	lsls	r2, r3, #6
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	041b      	lsls	r3, r3, #16
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	061b      	lsls	r3, r3, #24
 8004784:	431a      	orrs	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	071b      	lsls	r3, r3, #28
 800478a:	493e      	ldr	r1, [pc, #248]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800478c:	4313      	orrs	r3, r2
 800478e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004792:	4b3c      	ldr	r3, [pc, #240]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004798:	f023 021f 	bic.w	r2, r3, #31
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	3b01      	subs	r3, #1
 80047a2:	4938      	ldr	r1, [pc, #224]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d01d      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047b6:	4b33      	ldr	r3, [pc, #204]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047bc:	0e1b      	lsrs	r3, r3, #24
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047c4:	4b2f      	ldr	r3, [pc, #188]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ca:	0f1b      	lsrs	r3, r3, #28
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	019a      	lsls	r2, r3, #6
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	041b      	lsls	r3, r3, #16
 80047de:	431a      	orrs	r2, r3
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	061b      	lsls	r3, r3, #24
 80047e4:	431a      	orrs	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	071b      	lsls	r3, r3, #28
 80047ea:	4926      	ldr	r1, [pc, #152]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d011      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	019a      	lsls	r2, r3, #6
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	041b      	lsls	r3, r3, #16
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	061b      	lsls	r3, r3, #24
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	071b      	lsls	r3, r3, #28
 800481a:	491a      	ldr	r1, [pc, #104]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004822:	4b18      	ldr	r3, [pc, #96]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a17      	ldr	r2, [pc, #92]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004828:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800482c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800482e:	f7fe f92f 	bl	8002a90 <HAL_GetTick>
 8004832:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004834:	e008      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004836:	f7fe f92b 	bl	8002a90 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b64      	cmp	r3, #100	; 0x64
 8004842:	d901      	bls.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e0d8      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004848:	4b0e      	ldr	r3, [pc, #56]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0f0      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	2b01      	cmp	r3, #1
 8004858:	f040 80ce 	bne.w	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800485c:	4b09      	ldr	r3, [pc, #36]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a08      	ldr	r2, [pc, #32]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004866:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004868:	f7fe f912 	bl	8002a90 <HAL_GetTick>
 800486c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800486e:	e00b      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004870:	f7fe f90e 	bl	8002a90 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b64      	cmp	r3, #100	; 0x64
 800487c:	d904      	bls.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e0bb      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004882:	bf00      	nop
 8004884:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004888:	4b5e      	ldr	r3, [pc, #376]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004894:	d0ec      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d009      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d02e      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d12a      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80048be:	4b51      	ldr	r3, [pc, #324]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c4:	0c1b      	lsrs	r3, r3, #16
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048cc:	4b4d      	ldr	r3, [pc, #308]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d2:	0f1b      	lsrs	r3, r3, #28
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	019a      	lsls	r2, r3, #6
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	041b      	lsls	r3, r3, #16
 80048e4:	431a      	orrs	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	061b      	lsls	r3, r3, #24
 80048ec:	431a      	orrs	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	071b      	lsls	r3, r3, #28
 80048f2:	4944      	ldr	r1, [pc, #272]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80048fa:	4b42      	ldr	r3, [pc, #264]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004900:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004908:	3b01      	subs	r3, #1
 800490a:	021b      	lsls	r3, r3, #8
 800490c:	493d      	ldr	r1, [pc, #244]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800490e:	4313      	orrs	r3, r2
 8004910:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d022      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004924:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004928:	d11d      	bne.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800492a:	4b36      	ldr	r3, [pc, #216]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800492c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004930:	0e1b      	lsrs	r3, r3, #24
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004938:	4b32      	ldr	r3, [pc, #200]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800493a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493e:	0f1b      	lsrs	r3, r3, #28
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	019a      	lsls	r2, r3, #6
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	041b      	lsls	r3, r3, #16
 8004952:	431a      	orrs	r2, r3
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	061b      	lsls	r3, r3, #24
 8004958:	431a      	orrs	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	071b      	lsls	r3, r3, #28
 800495e:	4929      	ldr	r1, [pc, #164]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d028      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004972:	4b24      	ldr	r3, [pc, #144]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004978:	0e1b      	lsrs	r3, r3, #24
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004980:	4b20      	ldr	r3, [pc, #128]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004986:	0c1b      	lsrs	r3, r3, #16
 8004988:	f003 0303 	and.w	r3, r3, #3
 800498c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	019a      	lsls	r2, r3, #6
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	041b      	lsls	r3, r3, #16
 8004998:	431a      	orrs	r2, r3
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	061b      	lsls	r3, r3, #24
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	071b      	lsls	r3, r3, #28
 80049a6:	4917      	ldr	r1, [pc, #92]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80049ae:	4b15      	ldr	r3, [pc, #84]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	4911      	ldr	r1, [pc, #68]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80049c4:	4b0f      	ldr	r3, [pc, #60]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a0e      	ldr	r2, [pc, #56]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d0:	f7fe f85e 	bl	8002a90 <HAL_GetTick>
 80049d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049d6:	e008      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049d8:	f7fe f85a 	bl	8002a90 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b64      	cmp	r3, #100	; 0x64
 80049e4:	d901      	bls.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e007      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049ea:	4b06      	ldr	r3, [pc, #24]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049f6:	d1ef      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3720      	adds	r7, #32
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	40023800 	.word	0x40023800

08004a08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e09d      	b.n	8004b56 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d108      	bne.n	8004a34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a2a:	d009      	beq.n	8004a40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	61da      	str	r2, [r3, #28]
 8004a32:	e005      	b.n	8004a40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d106      	bne.n	8004a60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7fd fc8e 	bl	800237c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a80:	d902      	bls.n	8004a88 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a82:	2300      	movs	r3, #0
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	e002      	b.n	8004a8e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a8c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a96:	d007      	beq.n	8004aa8 <HAL_SPI_Init+0xa0>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004aa0:	d002      	beq.n	8004aa8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aea:	ea42 0103 	orr.w	r1, r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	0c1b      	lsrs	r3, r3, #16
 8004b04:	f003 0204 	and.w	r2, r3, #4
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	f003 0310 	and.w	r3, r3, #16
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004b24:	ea42 0103 	orr.w	r1, r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69da      	ldr	r2, [r3, #28]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b088      	sub	sp, #32
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	60f8      	str	r0, [r7, #12]
 8004b66:	60b9      	str	r1, [r7, #8]
 8004b68:	603b      	str	r3, [r7, #0]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d101      	bne.n	8004b80 <HAL_SPI_Transmit+0x22>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e158      	b.n	8004e32 <HAL_SPI_Transmit+0x2d4>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b88:	f7fd ff82 	bl	8002a90 <HAL_GetTick>
 8004b8c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b8e:	88fb      	ldrh	r3, [r7, #6]
 8004b90:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d002      	beq.n	8004ba4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ba2:	e13d      	b.n	8004e20 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <HAL_SPI_Transmit+0x52>
 8004baa:	88fb      	ldrh	r3, [r7, #6]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d102      	bne.n	8004bb6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004bb4:	e134      	b.n	8004e20 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2203      	movs	r2, #3
 8004bba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	88fa      	ldrh	r2, [r7, #6]
 8004bce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	88fa      	ldrh	r2, [r7, #6]
 8004bd4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c00:	d10f      	bne.n	8004c22 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2c:	2b40      	cmp	r3, #64	; 0x40
 8004c2e:	d007      	beq.n	8004c40 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c48:	d94b      	bls.n	8004ce2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <HAL_SPI_Transmit+0xfa>
 8004c52:	8afb      	ldrh	r3, [r7, #22]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d13e      	bne.n	8004cd6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5c:	881a      	ldrh	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c68:	1c9a      	adds	r2, r3, #2
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	3b01      	subs	r3, #1
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c7c:	e02b      	b.n	8004cd6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d112      	bne.n	8004cb2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c90:	881a      	ldrh	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9c:	1c9a      	adds	r2, r3, #2
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cb0:	e011      	b.n	8004cd6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cb2:	f7fd feed 	bl	8002a90 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d803      	bhi.n	8004cca <HAL_SPI_Transmit+0x16c>
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc8:	d102      	bne.n	8004cd0 <HAL_SPI_Transmit+0x172>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d102      	bne.n	8004cd6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004cd4:	e0a4      	b.n	8004e20 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1ce      	bne.n	8004c7e <HAL_SPI_Transmit+0x120>
 8004ce0:	e07c      	b.n	8004ddc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d002      	beq.n	8004cf0 <HAL_SPI_Transmit+0x192>
 8004cea:	8afb      	ldrh	r3, [r7, #22]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d170      	bne.n	8004dd2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d912      	bls.n	8004d20 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfe:	881a      	ldrh	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0a:	1c9a      	adds	r2, r3, #2
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	3b02      	subs	r3, #2
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d1e:	e058      	b.n	8004dd2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	330c      	adds	r3, #12
 8004d2a:	7812      	ldrb	r2, [r2, #0]
 8004d2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004d46:	e044      	b.n	8004dd2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d12b      	bne.n	8004dae <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d912      	bls.n	8004d86 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d64:	881a      	ldrh	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d70:	1c9a      	adds	r2, r3, #2
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	3b02      	subs	r3, #2
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d84:	e025      	b.n	8004dd2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	330c      	adds	r3, #12
 8004d90:	7812      	ldrb	r2, [r2, #0]
 8004d92:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dac:	e011      	b.n	8004dd2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dae:	f7fd fe6f 	bl	8002a90 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d803      	bhi.n	8004dc6 <HAL_SPI_Transmit+0x268>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc4:	d102      	bne.n	8004dcc <HAL_SPI_Transmit+0x26e>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d102      	bne.n	8004dd2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004dd0:	e026      	b.n	8004e20 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1b5      	bne.n	8004d48 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	6839      	ldr	r1, [r7, #0]
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f000 fcdf 	bl	80057a4 <SPI_EndRxTxTransaction>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d002      	beq.n	8004df2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2220      	movs	r2, #32
 8004df0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10a      	bne.n	8004e10 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	613b      	str	r3, [r7, #16]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	613b      	str	r3, [r7, #16]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	613b      	str	r3, [r7, #16]
 8004e0e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	77fb      	strb	r3, [r7, #31]
 8004e1c:	e000      	b.n	8004e20 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004e1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e30:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3720      	adds	r7, #32
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b088      	sub	sp, #32
 8004e3e:	af02      	add	r7, sp, #8
 8004e40:	60f8      	str	r0, [r7, #12]
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	603b      	str	r3, [r7, #0]
 8004e46:	4613      	mov	r3, r2
 8004e48:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e56:	d112      	bne.n	8004e7e <HAL_SPI_Receive+0x44>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10e      	bne.n	8004e7e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2204      	movs	r2, #4
 8004e64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004e68:	88fa      	ldrh	r2, [r7, #6]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	68b9      	ldr	r1, [r7, #8]
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 f910 	bl	800509a <HAL_SPI_TransmitReceive>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	e109      	b.n	8005092 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d101      	bne.n	8004e8c <HAL_SPI_Receive+0x52>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	e102      	b.n	8005092 <HAL_SPI_Receive+0x258>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e94:	f7fd fdfc 	bl	8002a90 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d002      	beq.n	8004eac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004eaa:	e0e9      	b.n	8005080 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <HAL_SPI_Receive+0x7e>
 8004eb2:	88fb      	ldrh	r3, [r7, #6]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d102      	bne.n	8004ebe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ebc:	e0e0      	b.n	8005080 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2204      	movs	r2, #4
 8004ec2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	88fa      	ldrh	r2, [r7, #6]
 8004ed6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	88fa      	ldrh	r2, [r7, #6]
 8004ede:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f08:	d908      	bls.n	8004f1c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f18:	605a      	str	r2, [r3, #4]
 8004f1a:	e007      	b.n	8004f2c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f2a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f34:	d10f      	bne.n	8004f56 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f54:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f60:	2b40      	cmp	r3, #64	; 0x40
 8004f62:	d007      	beq.n	8004f74 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f72:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f7c:	d867      	bhi.n	800504e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004f7e:	e030      	b.n	8004fe2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d117      	bne.n	8004fbe <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f103 020c 	add.w	r2, r3, #12
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	7812      	ldrb	r2, [r2, #0]
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004fbc:	e011      	b.n	8004fe2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fbe:	f7fd fd67 	bl	8002a90 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d803      	bhi.n	8004fd6 <HAL_SPI_Receive+0x19c>
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd4:	d102      	bne.n	8004fdc <HAL_SPI_Receive+0x1a2>
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d102      	bne.n	8004fe2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004fe0:	e04e      	b.n	8005080 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1c8      	bne.n	8004f80 <HAL_SPI_Receive+0x146>
 8004fee:	e034      	b.n	800505a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d115      	bne.n	800502a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68da      	ldr	r2, [r3, #12]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005008:	b292      	uxth	r2, r2
 800500a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005010:	1c9a      	adds	r2, r3, #2
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800501c:	b29b      	uxth	r3, r3
 800501e:	3b01      	subs	r3, #1
 8005020:	b29a      	uxth	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005028:	e011      	b.n	800504e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800502a:	f7fd fd31 	bl	8002a90 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d803      	bhi.n	8005042 <HAL_SPI_Receive+0x208>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005040:	d102      	bne.n	8005048 <HAL_SPI_Receive+0x20e>
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d102      	bne.n	800504e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800504c:	e018      	b.n	8005080 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005054:	b29b      	uxth	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1ca      	bne.n	8004ff0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	6839      	ldr	r1, [r7, #0]
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 fb48 	bl	80056f4 <SPI_EndRxTransaction>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2220      	movs	r2, #32
 800506e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005074:	2b00      	cmp	r3, #0
 8005076:	d002      	beq.n	800507e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	75fb      	strb	r3, [r7, #23]
 800507c:	e000      	b.n	8005080 <HAL_SPI_Receive+0x246>
  }

error :
 800507e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005090:	7dfb      	ldrb	r3, [r7, #23]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b08a      	sub	sp, #40	; 0x28
 800509e:	af00      	add	r7, sp, #0
 80050a0:	60f8      	str	r0, [r7, #12]
 80050a2:	60b9      	str	r1, [r7, #8]
 80050a4:	607a      	str	r2, [r7, #4]
 80050a6:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050a8:	2301      	movs	r3, #1
 80050aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d101      	bne.n	80050c0 <HAL_SPI_TransmitReceive+0x26>
 80050bc:	2302      	movs	r3, #2
 80050be:	e1fb      	b.n	80054b8 <HAL_SPI_TransmitReceive+0x41e>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050c8:	f7fd fce2 	bl	8002a90 <HAL_GetTick>
 80050cc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050d4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80050dc:	887b      	ldrh	r3, [r7, #2]
 80050de:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80050e0:	887b      	ldrh	r3, [r7, #2]
 80050e2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80050e4:	7efb      	ldrb	r3, [r7, #27]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d00e      	beq.n	8005108 <HAL_SPI_TransmitReceive+0x6e>
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050f0:	d106      	bne.n	8005100 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d102      	bne.n	8005100 <HAL_SPI_TransmitReceive+0x66>
 80050fa:	7efb      	ldrb	r3, [r7, #27]
 80050fc:	2b04      	cmp	r3, #4
 80050fe:	d003      	beq.n	8005108 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005100:	2302      	movs	r3, #2
 8005102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005106:	e1cd      	b.n	80054a4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d005      	beq.n	800511a <HAL_SPI_TransmitReceive+0x80>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <HAL_SPI_TransmitReceive+0x80>
 8005114:	887b      	ldrh	r3, [r7, #2]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d103      	bne.n	8005122 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005120:	e1c0      	b.n	80054a4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b04      	cmp	r3, #4
 800512c:	d003      	beq.n	8005136 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2205      	movs	r2, #5
 8005132:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	887a      	ldrh	r2, [r7, #2]
 8005146:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	887a      	ldrh	r2, [r7, #2]
 800514e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	887a      	ldrh	r2, [r7, #2]
 800515c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	887a      	ldrh	r2, [r7, #2]
 8005162:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005178:	d802      	bhi.n	8005180 <HAL_SPI_TransmitReceive+0xe6>
 800517a:	8a3b      	ldrh	r3, [r7, #16]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d908      	bls.n	8005192 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800518e:	605a      	str	r2, [r3, #4]
 8005190:	e007      	b.n	80051a2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051a0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ac:	2b40      	cmp	r3, #64	; 0x40
 80051ae:	d007      	beq.n	80051c0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051c8:	d97c      	bls.n	80052c4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d002      	beq.n	80051d8 <HAL_SPI_TransmitReceive+0x13e>
 80051d2:	8a7b      	ldrh	r3, [r7, #18]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d169      	bne.n	80052ac <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051dc:	881a      	ldrh	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	1c9a      	adds	r2, r3, #2
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	3b01      	subs	r3, #1
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051fc:	e056      	b.n	80052ac <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b02      	cmp	r3, #2
 800520a:	d11b      	bne.n	8005244 <HAL_SPI_TransmitReceive+0x1aa>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d016      	beq.n	8005244 <HAL_SPI_TransmitReceive+0x1aa>
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	2b01      	cmp	r3, #1
 800521a:	d113      	bne.n	8005244 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	881a      	ldrh	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522c:	1c9a      	adds	r2, r3, #2
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005236:	b29b      	uxth	r3, r3
 8005238:	3b01      	subs	r3, #1
 800523a:	b29a      	uxth	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b01      	cmp	r3, #1
 8005250:	d11c      	bne.n	800528c <HAL_SPI_TransmitReceive+0x1f2>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005258:	b29b      	uxth	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d016      	beq.n	800528c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68da      	ldr	r2, [r3, #12]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005268:	b292      	uxth	r2, r2
 800526a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005270:	1c9a      	adds	r2, r3, #2
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800527c:	b29b      	uxth	r3, r3
 800527e:	3b01      	subs	r3, #1
 8005280:	b29a      	uxth	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005288:	2301      	movs	r3, #1
 800528a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800528c:	f7fd fc00 	bl	8002a90 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005298:	429a      	cmp	r2, r3
 800529a:	d807      	bhi.n	80052ac <HAL_SPI_TransmitReceive+0x212>
 800529c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a2:	d003      	beq.n	80052ac <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80052aa:	e0fb      	b.n	80054a4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1a3      	bne.n	80051fe <HAL_SPI_TransmitReceive+0x164>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d19d      	bne.n	80051fe <HAL_SPI_TransmitReceive+0x164>
 80052c2:	e0df      	b.n	8005484 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <HAL_SPI_TransmitReceive+0x23a>
 80052cc:	8a7b      	ldrh	r3, [r7, #18]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	f040 80cb 	bne.w	800546a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052d8:	b29b      	uxth	r3, r3
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d912      	bls.n	8005304 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e2:	881a      	ldrh	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ee:	1c9a      	adds	r2, r3, #2
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	3b02      	subs	r3, #2
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005302:	e0b2      	b.n	800546a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	330c      	adds	r3, #12
 800530e:	7812      	ldrb	r2, [r2, #0]
 8005310:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005320:	b29b      	uxth	r3, r3
 8005322:	3b01      	subs	r3, #1
 8005324:	b29a      	uxth	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800532a:	e09e      	b.n	800546a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b02      	cmp	r3, #2
 8005338:	d134      	bne.n	80053a4 <HAL_SPI_TransmitReceive+0x30a>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800533e:	b29b      	uxth	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d02f      	beq.n	80053a4 <HAL_SPI_TransmitReceive+0x30a>
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	2b01      	cmp	r3, #1
 8005348:	d12c      	bne.n	80053a4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800534e:	b29b      	uxth	r3, r3
 8005350:	2b01      	cmp	r3, #1
 8005352:	d912      	bls.n	800537a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005358:	881a      	ldrh	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005364:	1c9a      	adds	r2, r3, #2
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800536e:	b29b      	uxth	r3, r3
 8005370:	3b02      	subs	r3, #2
 8005372:	b29a      	uxth	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005378:	e012      	b.n	80053a0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	330c      	adds	r3, #12
 8005384:	7812      	ldrb	r2, [r2, #0]
 8005386:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005396:	b29b      	uxth	r3, r3
 8005398:	3b01      	subs	r3, #1
 800539a:	b29a      	uxth	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053a0:	2300      	movs	r3, #0
 80053a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d148      	bne.n	8005444 <HAL_SPI_TransmitReceive+0x3aa>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d042      	beq.n	8005444 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d923      	bls.n	8005412 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68da      	ldr	r2, [r3, #12]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d4:	b292      	uxth	r2, r2
 80053d6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053dc:	1c9a      	adds	r2, r3, #2
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	3b02      	subs	r3, #2
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d81f      	bhi.n	8005440 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800540e:	605a      	str	r2, [r3, #4]
 8005410:	e016      	b.n	8005440 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f103 020c 	add.w	r2, r3, #12
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	7812      	ldrb	r2, [r2, #0]
 8005420:	b2d2      	uxtb	r2, r2
 8005422:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005434:	b29b      	uxth	r3, r3
 8005436:	3b01      	subs	r3, #1
 8005438:	b29a      	uxth	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005440:	2301      	movs	r3, #1
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005444:	f7fd fb24 	bl	8002a90 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005450:	429a      	cmp	r2, r3
 8005452:	d803      	bhi.n	800545c <HAL_SPI_TransmitReceive+0x3c2>
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545a:	d102      	bne.n	8005462 <HAL_SPI_TransmitReceive+0x3c8>
 800545c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545e:	2b00      	cmp	r3, #0
 8005460:	d103      	bne.n	800546a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005468:	e01c      	b.n	80054a4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800546e:	b29b      	uxth	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	f47f af5b 	bne.w	800532c <HAL_SPI_TransmitReceive+0x292>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800547c:	b29b      	uxth	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	f47f af54 	bne.w	800532c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005484:	69fa      	ldr	r2, [r7, #28]
 8005486:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 f98b 	bl	80057a4 <SPI_EndRxTxTransaction>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d006      	beq.n	80054a2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2220      	movs	r2, #32
 800549e:	661a      	str	r2, [r3, #96]	; 0x60
 80054a0:	e000      	b.n	80054a4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80054a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80054b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3728      	adds	r7, #40	; 0x28
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b088      	sub	sp, #32
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	603b      	str	r3, [r7, #0]
 80054cc:	4613      	mov	r3, r2
 80054ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054d0:	f7fd fade 	bl	8002a90 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d8:	1a9b      	subs	r3, r3, r2
 80054da:	683a      	ldr	r2, [r7, #0]
 80054dc:	4413      	add	r3, r2
 80054de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054e0:	f7fd fad6 	bl	8002a90 <HAL_GetTick>
 80054e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054e6:	4b39      	ldr	r3, [pc, #228]	; (80055cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	015b      	lsls	r3, r3, #5
 80054ec:	0d1b      	lsrs	r3, r3, #20
 80054ee:	69fa      	ldr	r2, [r7, #28]
 80054f0:	fb02 f303 	mul.w	r3, r2, r3
 80054f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054f6:	e054      	b.n	80055a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fe:	d050      	beq.n	80055a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005500:	f7fd fac6 	bl	8002a90 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	69fa      	ldr	r2, [r7, #28]
 800550c:	429a      	cmp	r2, r3
 800550e:	d902      	bls.n	8005516 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d13d      	bne.n	8005592 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005524:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800552e:	d111      	bne.n	8005554 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005538:	d004      	beq.n	8005544 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005542:	d107      	bne.n	8005554 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005552:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800555c:	d10f      	bne.n	800557e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800557c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e017      	b.n	80055c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005598:	2300      	movs	r3, #0
 800559a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	3b01      	subs	r3, #1
 80055a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	4013      	ands	r3, r2
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	bf0c      	ite	eq
 80055b2:	2301      	moveq	r3, #1
 80055b4:	2300      	movne	r3, #0
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	461a      	mov	r2, r3
 80055ba:	79fb      	ldrb	r3, [r7, #7]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d19b      	bne.n	80054f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3720      	adds	r7, #32
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	20000000 	.word	0x20000000

080055d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b088      	sub	sp, #32
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
 80055dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80055de:	f7fd fa57 	bl	8002a90 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e6:	1a9b      	subs	r3, r3, r2
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	4413      	add	r3, r2
 80055ec:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80055ee:	f7fd fa4f 	bl	8002a90 <HAL_GetTick>
 80055f2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80055f4:	4b3e      	ldr	r3, [pc, #248]	; (80056f0 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	4613      	mov	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	00da      	lsls	r2, r3, #3
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	0d1b      	lsrs	r3, r3, #20
 8005604:	69fa      	ldr	r2, [r7, #28]
 8005606:	fb02 f303 	mul.w	r3, r2, r3
 800560a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800560c:	e062      	b.n	80056d4 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005614:	d109      	bne.n	800562a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d106      	bne.n	800562a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	330c      	adds	r3, #12
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	b2db      	uxtb	r3, r3
 8005626:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005628:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005630:	d050      	beq.n	80056d4 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005632:	f7fd fa2d 	bl	8002a90 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	69fa      	ldr	r2, [r7, #28]
 800563e:	429a      	cmp	r2, r3
 8005640:	d902      	bls.n	8005648 <SPI_WaitFifoStateUntilTimeout+0x78>
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d13d      	bne.n	80056c4 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005656:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005660:	d111      	bne.n	8005686 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800566a:	d004      	beq.n	8005676 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005674:	d107      	bne.n	8005686 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005684:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800568e:	d10f      	bne.n	80056b0 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800569e:	601a      	str	r2, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e010      	b.n	80056e6 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	3b01      	subs	r3, #1
 80056d2:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689a      	ldr	r2, [r3, #8]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	4013      	ands	r3, r2
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d194      	bne.n	800560e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3720      	adds	r7, #32
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	20000000 	.word	0x20000000

080056f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af02      	add	r7, sp, #8
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005708:	d111      	bne.n	800572e <SPI_EndRxTransaction+0x3a>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005712:	d004      	beq.n	800571e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800571c:	d107      	bne.n	800572e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800572c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2200      	movs	r2, #0
 8005736:	2180      	movs	r1, #128	; 0x80
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f7ff fec1 	bl	80054c0 <SPI_WaitFlagStateUntilTimeout>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d007      	beq.n	8005754 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005748:	f043 0220 	orr.w	r2, r3, #32
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e023      	b.n	800579c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800575c:	d11d      	bne.n	800579a <SPI_EndRxTransaction+0xa6>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005766:	d004      	beq.n	8005772 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005770:	d113      	bne.n	800579a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	2200      	movs	r2, #0
 800577a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f7ff ff26 	bl	80055d0 <SPI_WaitFifoStateUntilTimeout>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d007      	beq.n	800579a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800578e:	f043 0220 	orr.w	r2, r3, #32
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e000      	b.n	800579c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af02      	add	r7, sp, #8
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f7ff ff07 	bl	80055d0 <SPI_WaitFifoStateUntilTimeout>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d007      	beq.n	80057d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057cc:	f043 0220 	orr.w	r2, r3, #32
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e027      	b.n	8005828 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2200      	movs	r2, #0
 80057e0:	2180      	movs	r1, #128	; 0x80
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f7ff fe6c 	bl	80054c0 <SPI_WaitFlagStateUntilTimeout>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d007      	beq.n	80057fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057f2:	f043 0220 	orr.w	r2, r3, #32
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e014      	b.n	8005828 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2200      	movs	r2, #0
 8005806:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f7ff fee0 	bl	80055d0 <SPI_WaitFifoStateUntilTimeout>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d007      	beq.n	8005826 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800581a:	f043 0220 	orr.w	r2, r3, #32
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e000      	b.n	8005828 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e049      	b.n	80058d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d106      	bne.n	800585c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7fc ffd4 	bl	8002804 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	3304      	adds	r3, #4
 800586c:	4619      	mov	r1, r3
 800586e:	4610      	mov	r0, r2
 8005870:	f000 fa72 	bl	8005d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b082      	sub	sp, #8
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e049      	b.n	8005984 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d106      	bne.n	800590a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7fc ff39 	bl	800277c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2202      	movs	r2, #2
 800590e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	3304      	adds	r3, #4
 800591a:	4619      	mov	r1, r3
 800591c:	4610      	mov	r0, r2
 800591e:	f000 fa1b 	bl	8005d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3708      	adds	r7, #8
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d101      	bne.n	80059a6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80059a2:	2302      	movs	r3, #2
 80059a4:	e082      	b.n	8005aac <HAL_TIM_IC_ConfigChannel+0x120>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d11b      	bne.n	80059ec <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6818      	ldr	r0, [r3, #0]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	6819      	ldr	r1, [r3, #0]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f000 fd56 	bl	8006474 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	699a      	ldr	r2, [r3, #24]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 020c 	bic.w	r2, r2, #12
 80059d6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6999      	ldr	r1, [r3, #24]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	689a      	ldr	r2, [r3, #8]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	619a      	str	r2, [r3, #24]
 80059ea:	e05a      	b.n	8005aa2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	d11c      	bne.n	8005a2c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6818      	ldr	r0, [r3, #0]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	6819      	ldr	r1, [r3, #0]
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	f000 fdda 	bl	80065ba <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	699a      	ldr	r2, [r3, #24]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005a14:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6999      	ldr	r1, [r3, #24]
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	021a      	lsls	r2, r3, #8
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	619a      	str	r2, [r3, #24]
 8005a2a:	e03a      	b.n	8005aa2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b08      	cmp	r3, #8
 8005a30:	d11b      	bne.n	8005a6a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6818      	ldr	r0, [r3, #0]
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	6819      	ldr	r1, [r3, #0]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	f000 fe27 	bl	8006694 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	69da      	ldr	r2, [r3, #28]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 020c 	bic.w	r2, r2, #12
 8005a54:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69d9      	ldr	r1, [r3, #28]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	689a      	ldr	r2, [r3, #8]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	61da      	str	r2, [r3, #28]
 8005a68:	e01b      	b.n	8005aa2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6818      	ldr	r0, [r3, #0]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	6819      	ldr	r1, [r3, #0]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	f000 fe47 	bl	800670c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	69da      	ldr	r2, [r3, #28]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005a8c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	69d9      	ldr	r1, [r3, #28]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	021a      	lsls	r2, r3, #8
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d101      	bne.n	8005ace <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005aca:	2302      	movs	r3, #2
 8005acc:	e0fd      	b.n	8005cca <HAL_TIM_PWM_ConfigChannel+0x216>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2b14      	cmp	r3, #20
 8005ada:	f200 80f0 	bhi.w	8005cbe <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005ade:	a201      	add	r2, pc, #4	; (adr r2, 8005ae4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae4:	08005b39 	.word	0x08005b39
 8005ae8:	08005cbf 	.word	0x08005cbf
 8005aec:	08005cbf 	.word	0x08005cbf
 8005af0:	08005cbf 	.word	0x08005cbf
 8005af4:	08005b79 	.word	0x08005b79
 8005af8:	08005cbf 	.word	0x08005cbf
 8005afc:	08005cbf 	.word	0x08005cbf
 8005b00:	08005cbf 	.word	0x08005cbf
 8005b04:	08005bbb 	.word	0x08005bbb
 8005b08:	08005cbf 	.word	0x08005cbf
 8005b0c:	08005cbf 	.word	0x08005cbf
 8005b10:	08005cbf 	.word	0x08005cbf
 8005b14:	08005bfb 	.word	0x08005bfb
 8005b18:	08005cbf 	.word	0x08005cbf
 8005b1c:	08005cbf 	.word	0x08005cbf
 8005b20:	08005cbf 	.word	0x08005cbf
 8005b24:	08005c3d 	.word	0x08005c3d
 8005b28:	08005cbf 	.word	0x08005cbf
 8005b2c:	08005cbf 	.word	0x08005cbf
 8005b30:	08005cbf 	.word	0x08005cbf
 8005b34:	08005c7d 	.word	0x08005c7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68b9      	ldr	r1, [r7, #8]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 f9aa 	bl	8005e98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699a      	ldr	r2, [r3, #24]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 0208 	orr.w	r2, r2, #8
 8005b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699a      	ldr	r2, [r3, #24]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 0204 	bic.w	r2, r2, #4
 8005b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6999      	ldr	r1, [r3, #24]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	691a      	ldr	r2, [r3, #16]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	619a      	str	r2, [r3, #24]
      break;
 8005b76:	e0a3      	b.n	8005cc0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68b9      	ldr	r1, [r7, #8]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 f9fc 	bl	8005f7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	699a      	ldr	r2, [r3, #24]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699a      	ldr	r2, [r3, #24]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6999      	ldr	r1, [r3, #24]
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	021a      	lsls	r2, r3, #8
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	619a      	str	r2, [r3, #24]
      break;
 8005bb8:	e082      	b.n	8005cc0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68b9      	ldr	r1, [r7, #8]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 fa53 	bl	800606c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69da      	ldr	r2, [r3, #28]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f042 0208 	orr.w	r2, r2, #8
 8005bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	69da      	ldr	r2, [r3, #28]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 0204 	bic.w	r2, r2, #4
 8005be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	69d9      	ldr	r1, [r3, #28]
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	691a      	ldr	r2, [r3, #16]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	61da      	str	r2, [r3, #28]
      break;
 8005bf8:	e062      	b.n	8005cc0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68b9      	ldr	r1, [r7, #8]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f000 faa9 	bl	8006158 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	69da      	ldr	r2, [r3, #28]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	69da      	ldr	r2, [r3, #28]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	69d9      	ldr	r1, [r3, #28]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	021a      	lsls	r2, r3, #8
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	61da      	str	r2, [r3, #28]
      break;
 8005c3a:	e041      	b.n	8005cc0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68b9      	ldr	r1, [r7, #8]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 fae0 	bl	8006208 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f042 0208 	orr.w	r2, r2, #8
 8005c56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0204 	bic.w	r2, r2, #4
 8005c66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	691a      	ldr	r2, [r3, #16]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c7a:	e021      	b.n	8005cc0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68b9      	ldr	r1, [r7, #8]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 fb12 	bl	80062ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ca6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	021a      	lsls	r2, r3, #8
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005cbc:	e000      	b.n	8005cc0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005cbe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop

08005cd4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d101      	bne.n	8005cec <HAL_TIM_SlaveConfigSynchro+0x18>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	e031      	b.n	8005d50 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005cfc:	6839      	ldr	r1, [r7, #0]
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fb28 	bl	8006354 <TIM_SlaveTimer_SetConfig>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d009      	beq.n	8005d1e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e018      	b.n	8005d50 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68da      	ldr	r2, [r3, #12]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d2c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68da      	ldr	r2, [r3, #12]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d3c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3708      	adds	r7, #8
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a40      	ldr	r2, [pc, #256]	; (8005e6c <TIM_Base_SetConfig+0x114>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d013      	beq.n	8005d98 <TIM_Base_SetConfig+0x40>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d76:	d00f      	beq.n	8005d98 <TIM_Base_SetConfig+0x40>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a3d      	ldr	r2, [pc, #244]	; (8005e70 <TIM_Base_SetConfig+0x118>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d00b      	beq.n	8005d98 <TIM_Base_SetConfig+0x40>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a3c      	ldr	r2, [pc, #240]	; (8005e74 <TIM_Base_SetConfig+0x11c>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d007      	beq.n	8005d98 <TIM_Base_SetConfig+0x40>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a3b      	ldr	r2, [pc, #236]	; (8005e78 <TIM_Base_SetConfig+0x120>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d003      	beq.n	8005d98 <TIM_Base_SetConfig+0x40>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a3a      	ldr	r2, [pc, #232]	; (8005e7c <TIM_Base_SetConfig+0x124>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d108      	bne.n	8005daa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a2f      	ldr	r2, [pc, #188]	; (8005e6c <TIM_Base_SetConfig+0x114>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d02b      	beq.n	8005e0a <TIM_Base_SetConfig+0xb2>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db8:	d027      	beq.n	8005e0a <TIM_Base_SetConfig+0xb2>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a2c      	ldr	r2, [pc, #176]	; (8005e70 <TIM_Base_SetConfig+0x118>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d023      	beq.n	8005e0a <TIM_Base_SetConfig+0xb2>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a2b      	ldr	r2, [pc, #172]	; (8005e74 <TIM_Base_SetConfig+0x11c>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d01f      	beq.n	8005e0a <TIM_Base_SetConfig+0xb2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a2a      	ldr	r2, [pc, #168]	; (8005e78 <TIM_Base_SetConfig+0x120>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d01b      	beq.n	8005e0a <TIM_Base_SetConfig+0xb2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a29      	ldr	r2, [pc, #164]	; (8005e7c <TIM_Base_SetConfig+0x124>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d017      	beq.n	8005e0a <TIM_Base_SetConfig+0xb2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a28      	ldr	r2, [pc, #160]	; (8005e80 <TIM_Base_SetConfig+0x128>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d013      	beq.n	8005e0a <TIM_Base_SetConfig+0xb2>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a27      	ldr	r2, [pc, #156]	; (8005e84 <TIM_Base_SetConfig+0x12c>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d00f      	beq.n	8005e0a <TIM_Base_SetConfig+0xb2>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a26      	ldr	r2, [pc, #152]	; (8005e88 <TIM_Base_SetConfig+0x130>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d00b      	beq.n	8005e0a <TIM_Base_SetConfig+0xb2>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a25      	ldr	r2, [pc, #148]	; (8005e8c <TIM_Base_SetConfig+0x134>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d007      	beq.n	8005e0a <TIM_Base_SetConfig+0xb2>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a24      	ldr	r2, [pc, #144]	; (8005e90 <TIM_Base_SetConfig+0x138>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d003      	beq.n	8005e0a <TIM_Base_SetConfig+0xb2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a23      	ldr	r2, [pc, #140]	; (8005e94 <TIM_Base_SetConfig+0x13c>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d108      	bne.n	8005e1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	689a      	ldr	r2, [r3, #8]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a0a      	ldr	r2, [pc, #40]	; (8005e6c <TIM_Base_SetConfig+0x114>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d003      	beq.n	8005e50 <TIM_Base_SetConfig+0xf8>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a0c      	ldr	r2, [pc, #48]	; (8005e7c <TIM_Base_SetConfig+0x124>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d103      	bne.n	8005e58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	691a      	ldr	r2, [r3, #16]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	615a      	str	r2, [r3, #20]
}
 8005e5e:	bf00      	nop
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	40010000 	.word	0x40010000
 8005e70:	40000400 	.word	0x40000400
 8005e74:	40000800 	.word	0x40000800
 8005e78:	40000c00 	.word	0x40000c00
 8005e7c:	40010400 	.word	0x40010400
 8005e80:	40014000 	.word	0x40014000
 8005e84:	40014400 	.word	0x40014400
 8005e88:	40014800 	.word	0x40014800
 8005e8c:	40001800 	.word	0x40001800
 8005e90:	40001c00 	.word	0x40001c00
 8005e94:	40002000 	.word	0x40002000

08005e98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	f023 0201 	bic.w	r2, r3, #1
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	4b2b      	ldr	r3, [pc, #172]	; (8005f70 <TIM_OC1_SetConfig+0xd8>)
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f023 0303 	bic.w	r3, r3, #3
 8005ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f023 0302 	bic.w	r3, r3, #2
 8005ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a21      	ldr	r2, [pc, #132]	; (8005f74 <TIM_OC1_SetConfig+0xdc>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d003      	beq.n	8005efc <TIM_OC1_SetConfig+0x64>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a20      	ldr	r2, [pc, #128]	; (8005f78 <TIM_OC1_SetConfig+0xe0>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d10c      	bne.n	8005f16 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f023 0308 	bic.w	r3, r3, #8
 8005f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f023 0304 	bic.w	r3, r3, #4
 8005f14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a16      	ldr	r2, [pc, #88]	; (8005f74 <TIM_OC1_SetConfig+0xdc>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d003      	beq.n	8005f26 <TIM_OC1_SetConfig+0x8e>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a15      	ldr	r2, [pc, #84]	; (8005f78 <TIM_OC1_SetConfig+0xe0>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d111      	bne.n	8005f4a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	621a      	str	r2, [r3, #32]
}
 8005f64:	bf00      	nop
 8005f66:	371c      	adds	r7, #28
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	fffeff8f 	.word	0xfffeff8f
 8005f74:	40010000 	.word	0x40010000
 8005f78:	40010400 	.word	0x40010400

08005f7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	f023 0210 	bic.w	r2, r3, #16
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	4b2e      	ldr	r3, [pc, #184]	; (8006060 <TIM_OC2_SetConfig+0xe4>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	021b      	lsls	r3, r3, #8
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f023 0320 	bic.w	r3, r3, #32
 8005fc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	011b      	lsls	r3, r3, #4
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a23      	ldr	r2, [pc, #140]	; (8006064 <TIM_OC2_SetConfig+0xe8>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d003      	beq.n	8005fe4 <TIM_OC2_SetConfig+0x68>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a22      	ldr	r2, [pc, #136]	; (8006068 <TIM_OC2_SetConfig+0xec>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d10d      	bne.n	8006000 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	011b      	lsls	r3, r3, #4
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ffe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a18      	ldr	r2, [pc, #96]	; (8006064 <TIM_OC2_SetConfig+0xe8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d003      	beq.n	8006010 <TIM_OC2_SetConfig+0x94>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a17      	ldr	r2, [pc, #92]	; (8006068 <TIM_OC2_SetConfig+0xec>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d113      	bne.n	8006038 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006016:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800601e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	4313      	orrs	r3, r2
 800602a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	4313      	orrs	r3, r2
 8006036:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	621a      	str	r2, [r3, #32]
}
 8006052:	bf00      	nop
 8006054:	371c      	adds	r7, #28
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	feff8fff 	.word	0xfeff8fff
 8006064:	40010000 	.word	0x40010000
 8006068:	40010400 	.word	0x40010400

0800606c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	4b2d      	ldr	r3, [pc, #180]	; (800614c <TIM_OC3_SetConfig+0xe0>)
 8006098:	4013      	ands	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f023 0303 	bic.w	r3, r3, #3
 80060a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	021b      	lsls	r3, r3, #8
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	4313      	orrs	r3, r2
 80060c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a22      	ldr	r2, [pc, #136]	; (8006150 <TIM_OC3_SetConfig+0xe4>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d003      	beq.n	80060d2 <TIM_OC3_SetConfig+0x66>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a21      	ldr	r2, [pc, #132]	; (8006154 <TIM_OC3_SetConfig+0xe8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d10d      	bne.n	80060ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	021b      	lsls	r3, r3, #8
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a17      	ldr	r2, [pc, #92]	; (8006150 <TIM_OC3_SetConfig+0xe4>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d003      	beq.n	80060fe <TIM_OC3_SetConfig+0x92>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a16      	ldr	r2, [pc, #88]	; (8006154 <TIM_OC3_SetConfig+0xe8>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d113      	bne.n	8006126 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800610c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	4313      	orrs	r3, r2
 8006118:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	4313      	orrs	r3, r2
 8006124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	621a      	str	r2, [r3, #32]
}
 8006140:	bf00      	nop
 8006142:	371c      	adds	r7, #28
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr
 800614c:	fffeff8f 	.word	0xfffeff8f
 8006150:	40010000 	.word	0x40010000
 8006154:	40010400 	.word	0x40010400

08006158 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	4b1e      	ldr	r3, [pc, #120]	; (80061fc <TIM_OC4_SetConfig+0xa4>)
 8006184:	4013      	ands	r3, r2
 8006186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800618e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	021b      	lsls	r3, r3, #8
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	4313      	orrs	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	031b      	lsls	r3, r3, #12
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a13      	ldr	r2, [pc, #76]	; (8006200 <TIM_OC4_SetConfig+0xa8>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d003      	beq.n	80061c0 <TIM_OC4_SetConfig+0x68>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a12      	ldr	r2, [pc, #72]	; (8006204 <TIM_OC4_SetConfig+0xac>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d109      	bne.n	80061d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	019b      	lsls	r3, r3, #6
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	621a      	str	r2, [r3, #32]
}
 80061ee:	bf00      	nop
 80061f0:	371c      	adds	r7, #28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	feff8fff 	.word	0xfeff8fff
 8006200:	40010000 	.word	0x40010000
 8006204:	40010400 	.word	0x40010400

08006208 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800622e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	4b1b      	ldr	r3, [pc, #108]	; (80062a0 <TIM_OC5_SetConfig+0x98>)
 8006234:	4013      	ands	r3, r2
 8006236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	4313      	orrs	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006248:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	041b      	lsls	r3, r3, #16
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4313      	orrs	r3, r2
 8006254:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a12      	ldr	r2, [pc, #72]	; (80062a4 <TIM_OC5_SetConfig+0x9c>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d003      	beq.n	8006266 <TIM_OC5_SetConfig+0x5e>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a11      	ldr	r2, [pc, #68]	; (80062a8 <TIM_OC5_SetConfig+0xa0>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d109      	bne.n	800627a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800626c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	021b      	lsls	r3, r3, #8
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	4313      	orrs	r3, r2
 8006278:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	621a      	str	r2, [r3, #32]
}
 8006294:	bf00      	nop
 8006296:	371c      	adds	r7, #28
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	fffeff8f 	.word	0xfffeff8f
 80062a4:	40010000 	.word	0x40010000
 80062a8:	40010400 	.word	0x40010400

080062ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	4b1c      	ldr	r3, [pc, #112]	; (8006348 <TIM_OC6_SetConfig+0x9c>)
 80062d8:	4013      	ands	r3, r2
 80062da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	021b      	lsls	r3, r3, #8
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	051b      	lsls	r3, r3, #20
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a13      	ldr	r2, [pc, #76]	; (800634c <TIM_OC6_SetConfig+0xa0>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d003      	beq.n	800630c <TIM_OC6_SetConfig+0x60>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a12      	ldr	r2, [pc, #72]	; (8006350 <TIM_OC6_SetConfig+0xa4>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d109      	bne.n	8006320 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006312:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	029b      	lsls	r3, r3, #10
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4313      	orrs	r3, r2
 800631e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	621a      	str	r2, [r3, #32]
}
 800633a:	bf00      	nop
 800633c:	371c      	adds	r7, #28
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	feff8fff 	.word	0xfeff8fff
 800634c:	40010000 	.word	0x40010000
 8006350:	40010400 	.word	0x40010400

08006354 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	4313      	orrs	r3, r2
 8006376:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	4b3d      	ldr	r3, [pc, #244]	; (8006470 <TIM_SlaveTimer_SetConfig+0x11c>)
 800637c:	4013      	ands	r3, r2
 800637e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	4313      	orrs	r3, r2
 8006388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2b70      	cmp	r3, #112	; 0x70
 8006398:	d01a      	beq.n	80063d0 <TIM_SlaveTimer_SetConfig+0x7c>
 800639a:	2b70      	cmp	r3, #112	; 0x70
 800639c:	d860      	bhi.n	8006460 <TIM_SlaveTimer_SetConfig+0x10c>
 800639e:	2b60      	cmp	r3, #96	; 0x60
 80063a0:	d054      	beq.n	800644c <TIM_SlaveTimer_SetConfig+0xf8>
 80063a2:	2b60      	cmp	r3, #96	; 0x60
 80063a4:	d85c      	bhi.n	8006460 <TIM_SlaveTimer_SetConfig+0x10c>
 80063a6:	2b50      	cmp	r3, #80	; 0x50
 80063a8:	d046      	beq.n	8006438 <TIM_SlaveTimer_SetConfig+0xe4>
 80063aa:	2b50      	cmp	r3, #80	; 0x50
 80063ac:	d858      	bhi.n	8006460 <TIM_SlaveTimer_SetConfig+0x10c>
 80063ae:	2b40      	cmp	r3, #64	; 0x40
 80063b0:	d019      	beq.n	80063e6 <TIM_SlaveTimer_SetConfig+0x92>
 80063b2:	2b40      	cmp	r3, #64	; 0x40
 80063b4:	d854      	bhi.n	8006460 <TIM_SlaveTimer_SetConfig+0x10c>
 80063b6:	2b30      	cmp	r3, #48	; 0x30
 80063b8:	d054      	beq.n	8006464 <TIM_SlaveTimer_SetConfig+0x110>
 80063ba:	2b30      	cmp	r3, #48	; 0x30
 80063bc:	d850      	bhi.n	8006460 <TIM_SlaveTimer_SetConfig+0x10c>
 80063be:	2b20      	cmp	r3, #32
 80063c0:	d050      	beq.n	8006464 <TIM_SlaveTimer_SetConfig+0x110>
 80063c2:	2b20      	cmp	r3, #32
 80063c4:	d84c      	bhi.n	8006460 <TIM_SlaveTimer_SetConfig+0x10c>
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d04c      	beq.n	8006464 <TIM_SlaveTimer_SetConfig+0x110>
 80063ca:	2b10      	cmp	r3, #16
 80063cc:	d04a      	beq.n	8006464 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80063ce:	e047      	b.n	8006460 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6818      	ldr	r0, [r3, #0]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	68d9      	ldr	r1, [r3, #12]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	f000 f9d1 	bl	8006786 <TIM_ETR_SetConfig>
      break;
 80063e4:	e03f      	b.n	8006466 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b05      	cmp	r3, #5
 80063ec:	d101      	bne.n	80063f2 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e03a      	b.n	8006468 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6a1a      	ldr	r2, [r3, #32]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f022 0201 	bic.w	r2, r2, #1
 8006408:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006418:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	011b      	lsls	r3, r3, #4
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	621a      	str	r2, [r3, #32]
      break;
 8006436:	e016      	b.n	8006466 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6818      	ldr	r0, [r3, #0]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	6899      	ldr	r1, [r3, #8]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	461a      	mov	r2, r3
 8006446:	f000 f889 	bl	800655c <TIM_TI1_ConfigInputStage>
      break;
 800644a:	e00c      	b.n	8006466 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6818      	ldr	r0, [r3, #0]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	6899      	ldr	r1, [r3, #8]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	461a      	mov	r2, r3
 800645a:	f000 f8eb 	bl	8006634 <TIM_TI2_ConfigInputStage>
      break;
 800645e:	e002      	b.n	8006466 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8006460:	bf00      	nop
 8006462:	e000      	b.n	8006466 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8006464:	bf00      	nop
  }
  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3718      	adds	r7, #24
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	fffefff8 	.word	0xfffefff8

08006474 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006474:	b480      	push	{r7}
 8006476:	b087      	sub	sp, #28
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
 8006480:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	f023 0201 	bic.w	r2, r3, #1
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6a1b      	ldr	r3, [r3, #32]
 8006498:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	4a28      	ldr	r2, [pc, #160]	; (8006540 <TIM_TI1_SetConfig+0xcc>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d01b      	beq.n	80064da <TIM_TI1_SetConfig+0x66>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a8:	d017      	beq.n	80064da <TIM_TI1_SetConfig+0x66>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	4a25      	ldr	r2, [pc, #148]	; (8006544 <TIM_TI1_SetConfig+0xd0>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d013      	beq.n	80064da <TIM_TI1_SetConfig+0x66>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	4a24      	ldr	r2, [pc, #144]	; (8006548 <TIM_TI1_SetConfig+0xd4>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d00f      	beq.n	80064da <TIM_TI1_SetConfig+0x66>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	4a23      	ldr	r2, [pc, #140]	; (800654c <TIM_TI1_SetConfig+0xd8>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d00b      	beq.n	80064da <TIM_TI1_SetConfig+0x66>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4a22      	ldr	r2, [pc, #136]	; (8006550 <TIM_TI1_SetConfig+0xdc>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d007      	beq.n	80064da <TIM_TI1_SetConfig+0x66>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	4a21      	ldr	r2, [pc, #132]	; (8006554 <TIM_TI1_SetConfig+0xe0>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d003      	beq.n	80064da <TIM_TI1_SetConfig+0x66>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	4a20      	ldr	r2, [pc, #128]	; (8006558 <TIM_TI1_SetConfig+0xe4>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d101      	bne.n	80064de <TIM_TI1_SetConfig+0x6a>
 80064da:	2301      	movs	r3, #1
 80064dc:	e000      	b.n	80064e0 <TIM_TI1_SetConfig+0x6c>
 80064de:	2300      	movs	r3, #0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d008      	beq.n	80064f6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	f023 0303 	bic.w	r3, r3, #3
 80064ea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	617b      	str	r3, [r7, #20]
 80064f4:	e003      	b.n	80064fe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f043 0301 	orr.w	r3, r3, #1
 80064fc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006504:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	011b      	lsls	r3, r3, #4
 800650a:	b2db      	uxtb	r3, r3
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	4313      	orrs	r3, r2
 8006510:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	f023 030a 	bic.w	r3, r3, #10
 8006518:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	f003 030a 	and.w	r3, r3, #10
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4313      	orrs	r3, r2
 8006524:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	621a      	str	r2, [r3, #32]
}
 8006532:	bf00      	nop
 8006534:	371c      	adds	r7, #28
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	40010000 	.word	0x40010000
 8006544:	40000400 	.word	0x40000400
 8006548:	40000800 	.word	0x40000800
 800654c:	40000c00 	.word	0x40000c00
 8006550:	40010400 	.word	0x40010400
 8006554:	40014000 	.word	0x40014000
 8006558:	40001800 	.word	0x40001800

0800655c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	f023 0201 	bic.w	r2, r3, #1
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	011b      	lsls	r3, r3, #4
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	4313      	orrs	r3, r2
 8006590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f023 030a 	bic.w	r3, r3, #10
 8006598:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	4313      	orrs	r3, r2
 80065a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	621a      	str	r2, [r3, #32]
}
 80065ae:	bf00      	nop
 80065b0:	371c      	adds	r7, #28
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b087      	sub	sp, #28
 80065be:	af00      	add	r7, sp, #0
 80065c0:	60f8      	str	r0, [r7, #12]
 80065c2:	60b9      	str	r1, [r7, #8]
 80065c4:	607a      	str	r2, [r7, #4]
 80065c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6a1b      	ldr	r3, [r3, #32]
 80065cc:	f023 0210 	bic.w	r2, r3, #16
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	021b      	lsls	r3, r3, #8
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	031b      	lsls	r3, r3, #12
 80065fe:	b29b      	uxth	r3, r3
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	4313      	orrs	r3, r2
 8006604:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800660c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	011b      	lsls	r3, r3, #4
 8006612:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	4313      	orrs	r3, r2
 800661a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	621a      	str	r2, [r3, #32]
}
 8006628:	bf00      	nop
 800662a:	371c      	adds	r7, #28
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006634:	b480      	push	{r7}
 8006636:	b087      	sub	sp, #28
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	f023 0210 	bic.w	r2, r3, #16
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800665e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	031b      	lsls	r3, r3, #12
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	4313      	orrs	r3, r2
 8006668:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006670:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	011b      	lsls	r3, r3, #4
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	4313      	orrs	r3, r2
 800667a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	621a      	str	r2, [r3, #32]
}
 8006688:	bf00      	nop
 800668a:	371c      	adds	r7, #28
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
 80066a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6a1b      	ldr	r3, [r3, #32]
 80066b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	f023 0303 	bic.w	r3, r3, #3
 80066c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	011b      	lsls	r3, r3, #4
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	4313      	orrs	r3, r2
 80066dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80066e4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	021b      	lsls	r3, r3, #8
 80066ea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	621a      	str	r2, [r3, #32]
}
 8006700:	bf00      	nop
 8006702:	371c      	adds	r7, #28
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800670c:	b480      	push	{r7}
 800670e:	b087      	sub	sp, #28
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
 8006718:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	69db      	ldr	r3, [r3, #28]
 800672a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006738:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	021b      	lsls	r3, r3, #8
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	4313      	orrs	r3, r2
 8006742:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800674a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	031b      	lsls	r3, r3, #12
 8006750:	b29b      	uxth	r3, r3
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	4313      	orrs	r3, r2
 8006756:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800675e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	031b      	lsls	r3, r3, #12
 8006764:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	4313      	orrs	r3, r2
 800676c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	621a      	str	r2, [r3, #32]
}
 800677a:	bf00      	nop
 800677c:	371c      	adds	r7, #28
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006786:	b480      	push	{r7}
 8006788:	b087      	sub	sp, #28
 800678a:	af00      	add	r7, sp, #0
 800678c:	60f8      	str	r0, [r7, #12]
 800678e:	60b9      	str	r1, [r7, #8]
 8006790:	607a      	str	r2, [r7, #4]
 8006792:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	021a      	lsls	r2, r3, #8
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	431a      	orrs	r2, r3
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	609a      	str	r2, [r3, #8]
}
 80067ba:	bf00      	nop
 80067bc:	371c      	adds	r7, #28
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
	...

080067c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d101      	bne.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067dc:	2302      	movs	r3, #2
 80067de:	e06d      	b.n	80068bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a30      	ldr	r2, [pc, #192]	; (80068c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d004      	beq.n	8006814 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a2f      	ldr	r2, [pc, #188]	; (80068cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d108      	bne.n	8006826 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800681a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	4313      	orrs	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	4313      	orrs	r3, r2
 8006836:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a20      	ldr	r2, [pc, #128]	; (80068c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d022      	beq.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006852:	d01d      	beq.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a1d      	ldr	r2, [pc, #116]	; (80068d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d018      	beq.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a1c      	ldr	r2, [pc, #112]	; (80068d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d013      	beq.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a1a      	ldr	r2, [pc, #104]	; (80068d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d00e      	beq.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a15      	ldr	r2, [pc, #84]	; (80068cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d009      	beq.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a16      	ldr	r2, [pc, #88]	; (80068dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d004      	beq.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a15      	ldr	r2, [pc, #84]	; (80068e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d10c      	bne.n	80068aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006896:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	4313      	orrs	r3, r2
 80068a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3714      	adds	r7, #20
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	40010000 	.word	0x40010000
 80068cc:	40010400 	.word	0x40010400
 80068d0:	40000400 	.word	0x40000400
 80068d4:	40000800 	.word	0x40000800
 80068d8:	40000c00 	.word	0x40000c00
 80068dc:	40014000 	.word	0x40014000
 80068e0:	40001800 	.word	0x40001800

080068e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e040      	b.n	8006978 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d106      	bne.n	800690c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7fc f804 	bl	8002914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2224      	movs	r2, #36	; 0x24
 8006910:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f022 0201 	bic.w	r2, r2, #1
 8006920:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f8c0 	bl	8006aa8 <UART_SetConfig>
 8006928:	4603      	mov	r3, r0
 800692a:	2b01      	cmp	r3, #1
 800692c:	d101      	bne.n	8006932 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e022      	b.n	8006978 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006936:	2b00      	cmp	r3, #0
 8006938:	d002      	beq.n	8006940 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fb16 	bl	8006f6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800694e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689a      	ldr	r2, [r3, #8]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800695e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f042 0201 	orr.w	r2, r2, #1
 800696e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fb9d 	bl	80070b0 <UART_CheckIdleState>
 8006976:	4603      	mov	r3, r0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3708      	adds	r7, #8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b08a      	sub	sp, #40	; 0x28
 8006984:	af02      	add	r7, sp, #8
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	603b      	str	r3, [r7, #0]
 800698c:	4613      	mov	r3, r2
 800698e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006994:	2b20      	cmp	r3, #32
 8006996:	f040 8081 	bne.w	8006a9c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d002      	beq.n	80069a6 <HAL_UART_Transmit+0x26>
 80069a0:	88fb      	ldrh	r3, [r7, #6]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e079      	b.n	8006a9e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d101      	bne.n	80069b8 <HAL_UART_Transmit+0x38>
 80069b4:	2302      	movs	r3, #2
 80069b6:	e072      	b.n	8006a9e <HAL_UART_Transmit+0x11e>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2221      	movs	r2, #33	; 0x21
 80069cc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069ce:	f7fc f85f 	bl	8002a90 <HAL_GetTick>
 80069d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	88fa      	ldrh	r2, [r7, #6]
 80069d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	88fa      	ldrh	r2, [r7, #6]
 80069e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ec:	d108      	bne.n	8006a00 <HAL_UART_Transmit+0x80>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d104      	bne.n	8006a00 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80069f6:	2300      	movs	r3, #0
 80069f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	61bb      	str	r3, [r7, #24]
 80069fe:	e003      	b.n	8006a08 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a04:	2300      	movs	r3, #0
 8006a06:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006a10:	e02c      	b.n	8006a6c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	2180      	movs	r1, #128	; 0x80
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f000 fb90 	bl	8007142 <UART_WaitOnFlagUntilTimeout>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d001      	beq.n	8006a2c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e038      	b.n	8006a9e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10b      	bne.n	8006a4a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	461a      	mov	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	3302      	adds	r3, #2
 8006a46:	61bb      	str	r3, [r7, #24]
 8006a48:	e007      	b.n	8006a5a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	781a      	ldrb	r2, [r3, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	3301      	adds	r3, #1
 8006a58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	3b01      	subs	r3, #1
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1cc      	bne.n	8006a12 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	2140      	movs	r1, #64	; 0x40
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f000 fb5d 	bl	8007142 <UART_WaitOnFlagUntilTimeout>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e005      	b.n	8006a9e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2220      	movs	r2, #32
 8006a96:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	e000      	b.n	8006a9e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006a9c:	2302      	movs	r3, #2
  }
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3720      	adds	r7, #32
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
	...

08006aa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b088      	sub	sp, #32
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	689a      	ldr	r2, [r3, #8]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	431a      	orrs	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	69db      	ldr	r3, [r3, #28]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	4ba7      	ldr	r3, [pc, #668]	; (8006d70 <UART_SetConfig+0x2c8>)
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	6812      	ldr	r2, [r2, #0]
 8006ada:	6979      	ldr	r1, [r7, #20]
 8006adc:	430b      	orrs	r3, r1
 8006ade:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	68da      	ldr	r2, [r3, #12]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a1b      	ldr	r3, [r3, #32]
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a95      	ldr	r2, [pc, #596]	; (8006d74 <UART_SetConfig+0x2cc>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d120      	bne.n	8006b66 <UART_SetConfig+0xbe>
 8006b24:	4b94      	ldr	r3, [pc, #592]	; (8006d78 <UART_SetConfig+0x2d0>)
 8006b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b2a:	f003 0303 	and.w	r3, r3, #3
 8006b2e:	2b03      	cmp	r3, #3
 8006b30:	d816      	bhi.n	8006b60 <UART_SetConfig+0xb8>
 8006b32:	a201      	add	r2, pc, #4	; (adr r2, 8006b38 <UART_SetConfig+0x90>)
 8006b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b38:	08006b49 	.word	0x08006b49
 8006b3c:	08006b55 	.word	0x08006b55
 8006b40:	08006b4f 	.word	0x08006b4f
 8006b44:	08006b5b 	.word	0x08006b5b
 8006b48:	2301      	movs	r3, #1
 8006b4a:	77fb      	strb	r3, [r7, #31]
 8006b4c:	e14f      	b.n	8006dee <UART_SetConfig+0x346>
 8006b4e:	2302      	movs	r3, #2
 8006b50:	77fb      	strb	r3, [r7, #31]
 8006b52:	e14c      	b.n	8006dee <UART_SetConfig+0x346>
 8006b54:	2304      	movs	r3, #4
 8006b56:	77fb      	strb	r3, [r7, #31]
 8006b58:	e149      	b.n	8006dee <UART_SetConfig+0x346>
 8006b5a:	2308      	movs	r3, #8
 8006b5c:	77fb      	strb	r3, [r7, #31]
 8006b5e:	e146      	b.n	8006dee <UART_SetConfig+0x346>
 8006b60:	2310      	movs	r3, #16
 8006b62:	77fb      	strb	r3, [r7, #31]
 8006b64:	e143      	b.n	8006dee <UART_SetConfig+0x346>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a84      	ldr	r2, [pc, #528]	; (8006d7c <UART_SetConfig+0x2d4>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d132      	bne.n	8006bd6 <UART_SetConfig+0x12e>
 8006b70:	4b81      	ldr	r3, [pc, #516]	; (8006d78 <UART_SetConfig+0x2d0>)
 8006b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b76:	f003 030c 	and.w	r3, r3, #12
 8006b7a:	2b0c      	cmp	r3, #12
 8006b7c:	d828      	bhi.n	8006bd0 <UART_SetConfig+0x128>
 8006b7e:	a201      	add	r2, pc, #4	; (adr r2, 8006b84 <UART_SetConfig+0xdc>)
 8006b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b84:	08006bb9 	.word	0x08006bb9
 8006b88:	08006bd1 	.word	0x08006bd1
 8006b8c:	08006bd1 	.word	0x08006bd1
 8006b90:	08006bd1 	.word	0x08006bd1
 8006b94:	08006bc5 	.word	0x08006bc5
 8006b98:	08006bd1 	.word	0x08006bd1
 8006b9c:	08006bd1 	.word	0x08006bd1
 8006ba0:	08006bd1 	.word	0x08006bd1
 8006ba4:	08006bbf 	.word	0x08006bbf
 8006ba8:	08006bd1 	.word	0x08006bd1
 8006bac:	08006bd1 	.word	0x08006bd1
 8006bb0:	08006bd1 	.word	0x08006bd1
 8006bb4:	08006bcb 	.word	0x08006bcb
 8006bb8:	2300      	movs	r3, #0
 8006bba:	77fb      	strb	r3, [r7, #31]
 8006bbc:	e117      	b.n	8006dee <UART_SetConfig+0x346>
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	77fb      	strb	r3, [r7, #31]
 8006bc2:	e114      	b.n	8006dee <UART_SetConfig+0x346>
 8006bc4:	2304      	movs	r3, #4
 8006bc6:	77fb      	strb	r3, [r7, #31]
 8006bc8:	e111      	b.n	8006dee <UART_SetConfig+0x346>
 8006bca:	2308      	movs	r3, #8
 8006bcc:	77fb      	strb	r3, [r7, #31]
 8006bce:	e10e      	b.n	8006dee <UART_SetConfig+0x346>
 8006bd0:	2310      	movs	r3, #16
 8006bd2:	77fb      	strb	r3, [r7, #31]
 8006bd4:	e10b      	b.n	8006dee <UART_SetConfig+0x346>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a69      	ldr	r2, [pc, #420]	; (8006d80 <UART_SetConfig+0x2d8>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d120      	bne.n	8006c22 <UART_SetConfig+0x17a>
 8006be0:	4b65      	ldr	r3, [pc, #404]	; (8006d78 <UART_SetConfig+0x2d0>)
 8006be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006be6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006bea:	2b30      	cmp	r3, #48	; 0x30
 8006bec:	d013      	beq.n	8006c16 <UART_SetConfig+0x16e>
 8006bee:	2b30      	cmp	r3, #48	; 0x30
 8006bf0:	d814      	bhi.n	8006c1c <UART_SetConfig+0x174>
 8006bf2:	2b20      	cmp	r3, #32
 8006bf4:	d009      	beq.n	8006c0a <UART_SetConfig+0x162>
 8006bf6:	2b20      	cmp	r3, #32
 8006bf8:	d810      	bhi.n	8006c1c <UART_SetConfig+0x174>
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d002      	beq.n	8006c04 <UART_SetConfig+0x15c>
 8006bfe:	2b10      	cmp	r3, #16
 8006c00:	d006      	beq.n	8006c10 <UART_SetConfig+0x168>
 8006c02:	e00b      	b.n	8006c1c <UART_SetConfig+0x174>
 8006c04:	2300      	movs	r3, #0
 8006c06:	77fb      	strb	r3, [r7, #31]
 8006c08:	e0f1      	b.n	8006dee <UART_SetConfig+0x346>
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	77fb      	strb	r3, [r7, #31]
 8006c0e:	e0ee      	b.n	8006dee <UART_SetConfig+0x346>
 8006c10:	2304      	movs	r3, #4
 8006c12:	77fb      	strb	r3, [r7, #31]
 8006c14:	e0eb      	b.n	8006dee <UART_SetConfig+0x346>
 8006c16:	2308      	movs	r3, #8
 8006c18:	77fb      	strb	r3, [r7, #31]
 8006c1a:	e0e8      	b.n	8006dee <UART_SetConfig+0x346>
 8006c1c:	2310      	movs	r3, #16
 8006c1e:	77fb      	strb	r3, [r7, #31]
 8006c20:	e0e5      	b.n	8006dee <UART_SetConfig+0x346>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a57      	ldr	r2, [pc, #348]	; (8006d84 <UART_SetConfig+0x2dc>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d120      	bne.n	8006c6e <UART_SetConfig+0x1c6>
 8006c2c:	4b52      	ldr	r3, [pc, #328]	; (8006d78 <UART_SetConfig+0x2d0>)
 8006c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c36:	2bc0      	cmp	r3, #192	; 0xc0
 8006c38:	d013      	beq.n	8006c62 <UART_SetConfig+0x1ba>
 8006c3a:	2bc0      	cmp	r3, #192	; 0xc0
 8006c3c:	d814      	bhi.n	8006c68 <UART_SetConfig+0x1c0>
 8006c3e:	2b80      	cmp	r3, #128	; 0x80
 8006c40:	d009      	beq.n	8006c56 <UART_SetConfig+0x1ae>
 8006c42:	2b80      	cmp	r3, #128	; 0x80
 8006c44:	d810      	bhi.n	8006c68 <UART_SetConfig+0x1c0>
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d002      	beq.n	8006c50 <UART_SetConfig+0x1a8>
 8006c4a:	2b40      	cmp	r3, #64	; 0x40
 8006c4c:	d006      	beq.n	8006c5c <UART_SetConfig+0x1b4>
 8006c4e:	e00b      	b.n	8006c68 <UART_SetConfig+0x1c0>
 8006c50:	2300      	movs	r3, #0
 8006c52:	77fb      	strb	r3, [r7, #31]
 8006c54:	e0cb      	b.n	8006dee <UART_SetConfig+0x346>
 8006c56:	2302      	movs	r3, #2
 8006c58:	77fb      	strb	r3, [r7, #31]
 8006c5a:	e0c8      	b.n	8006dee <UART_SetConfig+0x346>
 8006c5c:	2304      	movs	r3, #4
 8006c5e:	77fb      	strb	r3, [r7, #31]
 8006c60:	e0c5      	b.n	8006dee <UART_SetConfig+0x346>
 8006c62:	2308      	movs	r3, #8
 8006c64:	77fb      	strb	r3, [r7, #31]
 8006c66:	e0c2      	b.n	8006dee <UART_SetConfig+0x346>
 8006c68:	2310      	movs	r3, #16
 8006c6a:	77fb      	strb	r3, [r7, #31]
 8006c6c:	e0bf      	b.n	8006dee <UART_SetConfig+0x346>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a45      	ldr	r2, [pc, #276]	; (8006d88 <UART_SetConfig+0x2e0>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d125      	bne.n	8006cc4 <UART_SetConfig+0x21c>
 8006c78:	4b3f      	ldr	r3, [pc, #252]	; (8006d78 <UART_SetConfig+0x2d0>)
 8006c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c86:	d017      	beq.n	8006cb8 <UART_SetConfig+0x210>
 8006c88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c8c:	d817      	bhi.n	8006cbe <UART_SetConfig+0x216>
 8006c8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c92:	d00b      	beq.n	8006cac <UART_SetConfig+0x204>
 8006c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c98:	d811      	bhi.n	8006cbe <UART_SetConfig+0x216>
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d003      	beq.n	8006ca6 <UART_SetConfig+0x1fe>
 8006c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ca2:	d006      	beq.n	8006cb2 <UART_SetConfig+0x20a>
 8006ca4:	e00b      	b.n	8006cbe <UART_SetConfig+0x216>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	77fb      	strb	r3, [r7, #31]
 8006caa:	e0a0      	b.n	8006dee <UART_SetConfig+0x346>
 8006cac:	2302      	movs	r3, #2
 8006cae:	77fb      	strb	r3, [r7, #31]
 8006cb0:	e09d      	b.n	8006dee <UART_SetConfig+0x346>
 8006cb2:	2304      	movs	r3, #4
 8006cb4:	77fb      	strb	r3, [r7, #31]
 8006cb6:	e09a      	b.n	8006dee <UART_SetConfig+0x346>
 8006cb8:	2308      	movs	r3, #8
 8006cba:	77fb      	strb	r3, [r7, #31]
 8006cbc:	e097      	b.n	8006dee <UART_SetConfig+0x346>
 8006cbe:	2310      	movs	r3, #16
 8006cc0:	77fb      	strb	r3, [r7, #31]
 8006cc2:	e094      	b.n	8006dee <UART_SetConfig+0x346>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a30      	ldr	r2, [pc, #192]	; (8006d8c <UART_SetConfig+0x2e4>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d125      	bne.n	8006d1a <UART_SetConfig+0x272>
 8006cce:	4b2a      	ldr	r3, [pc, #168]	; (8006d78 <UART_SetConfig+0x2d0>)
 8006cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006cd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cdc:	d017      	beq.n	8006d0e <UART_SetConfig+0x266>
 8006cde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ce2:	d817      	bhi.n	8006d14 <UART_SetConfig+0x26c>
 8006ce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ce8:	d00b      	beq.n	8006d02 <UART_SetConfig+0x25a>
 8006cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cee:	d811      	bhi.n	8006d14 <UART_SetConfig+0x26c>
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d003      	beq.n	8006cfc <UART_SetConfig+0x254>
 8006cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cf8:	d006      	beq.n	8006d08 <UART_SetConfig+0x260>
 8006cfa:	e00b      	b.n	8006d14 <UART_SetConfig+0x26c>
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	77fb      	strb	r3, [r7, #31]
 8006d00:	e075      	b.n	8006dee <UART_SetConfig+0x346>
 8006d02:	2302      	movs	r3, #2
 8006d04:	77fb      	strb	r3, [r7, #31]
 8006d06:	e072      	b.n	8006dee <UART_SetConfig+0x346>
 8006d08:	2304      	movs	r3, #4
 8006d0a:	77fb      	strb	r3, [r7, #31]
 8006d0c:	e06f      	b.n	8006dee <UART_SetConfig+0x346>
 8006d0e:	2308      	movs	r3, #8
 8006d10:	77fb      	strb	r3, [r7, #31]
 8006d12:	e06c      	b.n	8006dee <UART_SetConfig+0x346>
 8006d14:	2310      	movs	r3, #16
 8006d16:	77fb      	strb	r3, [r7, #31]
 8006d18:	e069      	b.n	8006dee <UART_SetConfig+0x346>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a1c      	ldr	r2, [pc, #112]	; (8006d90 <UART_SetConfig+0x2e8>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d137      	bne.n	8006d94 <UART_SetConfig+0x2ec>
 8006d24:	4b14      	ldr	r3, [pc, #80]	; (8006d78 <UART_SetConfig+0x2d0>)
 8006d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d2a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006d2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d32:	d017      	beq.n	8006d64 <UART_SetConfig+0x2bc>
 8006d34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d38:	d817      	bhi.n	8006d6a <UART_SetConfig+0x2c2>
 8006d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d3e:	d00b      	beq.n	8006d58 <UART_SetConfig+0x2b0>
 8006d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d44:	d811      	bhi.n	8006d6a <UART_SetConfig+0x2c2>
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d003      	beq.n	8006d52 <UART_SetConfig+0x2aa>
 8006d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d4e:	d006      	beq.n	8006d5e <UART_SetConfig+0x2b6>
 8006d50:	e00b      	b.n	8006d6a <UART_SetConfig+0x2c2>
 8006d52:	2300      	movs	r3, #0
 8006d54:	77fb      	strb	r3, [r7, #31]
 8006d56:	e04a      	b.n	8006dee <UART_SetConfig+0x346>
 8006d58:	2302      	movs	r3, #2
 8006d5a:	77fb      	strb	r3, [r7, #31]
 8006d5c:	e047      	b.n	8006dee <UART_SetConfig+0x346>
 8006d5e:	2304      	movs	r3, #4
 8006d60:	77fb      	strb	r3, [r7, #31]
 8006d62:	e044      	b.n	8006dee <UART_SetConfig+0x346>
 8006d64:	2308      	movs	r3, #8
 8006d66:	77fb      	strb	r3, [r7, #31]
 8006d68:	e041      	b.n	8006dee <UART_SetConfig+0x346>
 8006d6a:	2310      	movs	r3, #16
 8006d6c:	77fb      	strb	r3, [r7, #31]
 8006d6e:	e03e      	b.n	8006dee <UART_SetConfig+0x346>
 8006d70:	efff69f3 	.word	0xefff69f3
 8006d74:	40011000 	.word	0x40011000
 8006d78:	40023800 	.word	0x40023800
 8006d7c:	40004400 	.word	0x40004400
 8006d80:	40004800 	.word	0x40004800
 8006d84:	40004c00 	.word	0x40004c00
 8006d88:	40005000 	.word	0x40005000
 8006d8c:	40011400 	.word	0x40011400
 8006d90:	40007800 	.word	0x40007800
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a71      	ldr	r2, [pc, #452]	; (8006f60 <UART_SetConfig+0x4b8>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d125      	bne.n	8006dea <UART_SetConfig+0x342>
 8006d9e:	4b71      	ldr	r3, [pc, #452]	; (8006f64 <UART_SetConfig+0x4bc>)
 8006da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006da8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006dac:	d017      	beq.n	8006dde <UART_SetConfig+0x336>
 8006dae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006db2:	d817      	bhi.n	8006de4 <UART_SetConfig+0x33c>
 8006db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006db8:	d00b      	beq.n	8006dd2 <UART_SetConfig+0x32a>
 8006dba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dbe:	d811      	bhi.n	8006de4 <UART_SetConfig+0x33c>
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d003      	beq.n	8006dcc <UART_SetConfig+0x324>
 8006dc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dc8:	d006      	beq.n	8006dd8 <UART_SetConfig+0x330>
 8006dca:	e00b      	b.n	8006de4 <UART_SetConfig+0x33c>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	77fb      	strb	r3, [r7, #31]
 8006dd0:	e00d      	b.n	8006dee <UART_SetConfig+0x346>
 8006dd2:	2302      	movs	r3, #2
 8006dd4:	77fb      	strb	r3, [r7, #31]
 8006dd6:	e00a      	b.n	8006dee <UART_SetConfig+0x346>
 8006dd8:	2304      	movs	r3, #4
 8006dda:	77fb      	strb	r3, [r7, #31]
 8006ddc:	e007      	b.n	8006dee <UART_SetConfig+0x346>
 8006dde:	2308      	movs	r3, #8
 8006de0:	77fb      	strb	r3, [r7, #31]
 8006de2:	e004      	b.n	8006dee <UART_SetConfig+0x346>
 8006de4:	2310      	movs	r3, #16
 8006de6:	77fb      	strb	r3, [r7, #31]
 8006de8:	e001      	b.n	8006dee <UART_SetConfig+0x346>
 8006dea:	2310      	movs	r3, #16
 8006dec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006df6:	d15b      	bne.n	8006eb0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006df8:	7ffb      	ldrb	r3, [r7, #31]
 8006dfa:	2b08      	cmp	r3, #8
 8006dfc:	d827      	bhi.n	8006e4e <UART_SetConfig+0x3a6>
 8006dfe:	a201      	add	r2, pc, #4	; (adr r2, 8006e04 <UART_SetConfig+0x35c>)
 8006e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e04:	08006e29 	.word	0x08006e29
 8006e08:	08006e31 	.word	0x08006e31
 8006e0c:	08006e39 	.word	0x08006e39
 8006e10:	08006e4f 	.word	0x08006e4f
 8006e14:	08006e3f 	.word	0x08006e3f
 8006e18:	08006e4f 	.word	0x08006e4f
 8006e1c:	08006e4f 	.word	0x08006e4f
 8006e20:	08006e4f 	.word	0x08006e4f
 8006e24:	08006e47 	.word	0x08006e47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e28:	f7fd f99e 	bl	8004168 <HAL_RCC_GetPCLK1Freq>
 8006e2c:	61b8      	str	r0, [r7, #24]
        break;
 8006e2e:	e013      	b.n	8006e58 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e30:	f7fd f9ae 	bl	8004190 <HAL_RCC_GetPCLK2Freq>
 8006e34:	61b8      	str	r0, [r7, #24]
        break;
 8006e36:	e00f      	b.n	8006e58 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e38:	4b4b      	ldr	r3, [pc, #300]	; (8006f68 <UART_SetConfig+0x4c0>)
 8006e3a:	61bb      	str	r3, [r7, #24]
        break;
 8006e3c:	e00c      	b.n	8006e58 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e3e:	f7fd f8d1 	bl	8003fe4 <HAL_RCC_GetSysClockFreq>
 8006e42:	61b8      	str	r0, [r7, #24]
        break;
 8006e44:	e008      	b.n	8006e58 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e4a:	61bb      	str	r3, [r7, #24]
        break;
 8006e4c:	e004      	b.n	8006e58 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	77bb      	strb	r3, [r7, #30]
        break;
 8006e56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d074      	beq.n	8006f48 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	005a      	lsls	r2, r3, #1
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	085b      	lsrs	r3, r3, #1
 8006e68:	441a      	add	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	2b0f      	cmp	r3, #15
 8006e7a:	d916      	bls.n	8006eaa <UART_SetConfig+0x402>
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e82:	d212      	bcs.n	8006eaa <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	f023 030f 	bic.w	r3, r3, #15
 8006e8c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	085b      	lsrs	r3, r3, #1
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	f003 0307 	and.w	r3, r3, #7
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	89fb      	ldrh	r3, [r7, #14]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	89fa      	ldrh	r2, [r7, #14]
 8006ea6:	60da      	str	r2, [r3, #12]
 8006ea8:	e04e      	b.n	8006f48 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	77bb      	strb	r3, [r7, #30]
 8006eae:	e04b      	b.n	8006f48 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006eb0:	7ffb      	ldrb	r3, [r7, #31]
 8006eb2:	2b08      	cmp	r3, #8
 8006eb4:	d827      	bhi.n	8006f06 <UART_SetConfig+0x45e>
 8006eb6:	a201      	add	r2, pc, #4	; (adr r2, 8006ebc <UART_SetConfig+0x414>)
 8006eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ebc:	08006ee1 	.word	0x08006ee1
 8006ec0:	08006ee9 	.word	0x08006ee9
 8006ec4:	08006ef1 	.word	0x08006ef1
 8006ec8:	08006f07 	.word	0x08006f07
 8006ecc:	08006ef7 	.word	0x08006ef7
 8006ed0:	08006f07 	.word	0x08006f07
 8006ed4:	08006f07 	.word	0x08006f07
 8006ed8:	08006f07 	.word	0x08006f07
 8006edc:	08006eff 	.word	0x08006eff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ee0:	f7fd f942 	bl	8004168 <HAL_RCC_GetPCLK1Freq>
 8006ee4:	61b8      	str	r0, [r7, #24]
        break;
 8006ee6:	e013      	b.n	8006f10 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ee8:	f7fd f952 	bl	8004190 <HAL_RCC_GetPCLK2Freq>
 8006eec:	61b8      	str	r0, [r7, #24]
        break;
 8006eee:	e00f      	b.n	8006f10 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ef0:	4b1d      	ldr	r3, [pc, #116]	; (8006f68 <UART_SetConfig+0x4c0>)
 8006ef2:	61bb      	str	r3, [r7, #24]
        break;
 8006ef4:	e00c      	b.n	8006f10 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ef6:	f7fd f875 	bl	8003fe4 <HAL_RCC_GetSysClockFreq>
 8006efa:	61b8      	str	r0, [r7, #24]
        break;
 8006efc:	e008      	b.n	8006f10 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f02:	61bb      	str	r3, [r7, #24]
        break;
 8006f04:	e004      	b.n	8006f10 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006f06:	2300      	movs	r3, #0
 8006f08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	77bb      	strb	r3, [r7, #30]
        break;
 8006f0e:	bf00      	nop
    }

    if (pclk != 0U)
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d018      	beq.n	8006f48 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	085a      	lsrs	r2, r3, #1
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	441a      	add	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	2b0f      	cmp	r3, #15
 8006f30:	d908      	bls.n	8006f44 <UART_SetConfig+0x49c>
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f38:	d204      	bcs.n	8006f44 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	60da      	str	r2, [r3, #12]
 8006f42:	e001      	b.n	8006f48 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006f54:	7fbb      	ldrb	r3, [r7, #30]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3720      	adds	r7, #32
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	40007c00 	.word	0x40007c00
 8006f64:	40023800 	.word	0x40023800
 8006f68:	00f42400 	.word	0x00f42400

08006f6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f78:	f003 0301 	and.w	r3, r3, #1
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00a      	beq.n	8006f96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	430a      	orrs	r2, r1
 8006f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9a:	f003 0302 	and.w	r3, r3, #2
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00a      	beq.n	8006fb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	430a      	orrs	r2, r1
 8006fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbc:	f003 0304 	and.w	r3, r3, #4
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00a      	beq.n	8006fda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fde:	f003 0308 	and.w	r3, r3, #8
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00a      	beq.n	8006ffc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007000:	f003 0310 	and.w	r3, r3, #16
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00a      	beq.n	800701e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	430a      	orrs	r2, r1
 800701c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007022:	f003 0320 	and.w	r3, r3, #32
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00a      	beq.n	8007040 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	430a      	orrs	r2, r1
 800703e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007048:	2b00      	cmp	r3, #0
 800704a:	d01a      	beq.n	8007082 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	430a      	orrs	r2, r1
 8007060:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800706a:	d10a      	bne.n	8007082 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	430a      	orrs	r2, r1
 8007080:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00a      	beq.n	80070a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	605a      	str	r2, [r3, #4]
  }
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af02      	add	r7, sp, #8
 80070b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070c0:	f7fb fce6 	bl	8002a90 <HAL_GetTick>
 80070c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0308 	and.w	r3, r3, #8
 80070d0:	2b08      	cmp	r3, #8
 80070d2:	d10e      	bne.n	80070f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f82d 	bl	8007142 <UART_WaitOnFlagUntilTimeout>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d001      	beq.n	80070f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e023      	b.n	800713a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0304 	and.w	r3, r3, #4
 80070fc:	2b04      	cmp	r3, #4
 80070fe:	d10e      	bne.n	800711e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007100:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f817 	bl	8007142 <UART_WaitOnFlagUntilTimeout>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d001      	beq.n	800711e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e00d      	b.n	800713a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2220      	movs	r2, #32
 8007122:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2220      	movs	r2, #32
 8007128:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b084      	sub	sp, #16
 8007146:	af00      	add	r7, sp, #0
 8007148:	60f8      	str	r0, [r7, #12]
 800714a:	60b9      	str	r1, [r7, #8]
 800714c:	603b      	str	r3, [r7, #0]
 800714e:	4613      	mov	r3, r2
 8007150:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007152:	e05e      	b.n	8007212 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800715a:	d05a      	beq.n	8007212 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800715c:	f7fb fc98 	bl	8002a90 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	69ba      	ldr	r2, [r7, #24]
 8007168:	429a      	cmp	r2, r3
 800716a:	d302      	bcc.n	8007172 <UART_WaitOnFlagUntilTimeout+0x30>
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d11b      	bne.n	80071aa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007180:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 0201 	bic.w	r2, r2, #1
 8007190:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2220      	movs	r2, #32
 8007196:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2220      	movs	r2, #32
 800719c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e043      	b.n	8007232 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0304 	and.w	r3, r3, #4
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d02c      	beq.n	8007212 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	69db      	ldr	r3, [r3, #28]
 80071be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071c6:	d124      	bne.n	8007212 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80071e0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	689a      	ldr	r2, [r3, #8]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f022 0201 	bic.w	r2, r2, #1
 80071f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2220      	movs	r2, #32
 80071f6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2220      	movs	r2, #32
 80071fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2220      	movs	r2, #32
 8007202:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e00f      	b.n	8007232 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	69da      	ldr	r2, [r3, #28]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	4013      	ands	r3, r2
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	429a      	cmp	r2, r3
 8007220:	bf0c      	ite	eq
 8007222:	2301      	moveq	r3, #1
 8007224:	2300      	movne	r3, #0
 8007226:	b2db      	uxtb	r3, r3
 8007228:	461a      	mov	r2, r3
 800722a:	79fb      	ldrb	r3, [r7, #7]
 800722c:	429a      	cmp	r2, r3
 800722e:	d091      	beq.n	8007154 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
	...

0800723c <__libc_init_array>:
 800723c:	b570      	push	{r4, r5, r6, lr}
 800723e:	4d0d      	ldr	r5, [pc, #52]	; (8007274 <__libc_init_array+0x38>)
 8007240:	4c0d      	ldr	r4, [pc, #52]	; (8007278 <__libc_init_array+0x3c>)
 8007242:	1b64      	subs	r4, r4, r5
 8007244:	10a4      	asrs	r4, r4, #2
 8007246:	2600      	movs	r6, #0
 8007248:	42a6      	cmp	r6, r4
 800724a:	d109      	bne.n	8007260 <__libc_init_array+0x24>
 800724c:	4d0b      	ldr	r5, [pc, #44]	; (800727c <__libc_init_array+0x40>)
 800724e:	4c0c      	ldr	r4, [pc, #48]	; (8007280 <__libc_init_array+0x44>)
 8007250:	f000 f864 	bl	800731c <_init>
 8007254:	1b64      	subs	r4, r4, r5
 8007256:	10a4      	asrs	r4, r4, #2
 8007258:	2600      	movs	r6, #0
 800725a:	42a6      	cmp	r6, r4
 800725c:	d105      	bne.n	800726a <__libc_init_array+0x2e>
 800725e:	bd70      	pop	{r4, r5, r6, pc}
 8007260:	f855 3b04 	ldr.w	r3, [r5], #4
 8007264:	4798      	blx	r3
 8007266:	3601      	adds	r6, #1
 8007268:	e7ee      	b.n	8007248 <__libc_init_array+0xc>
 800726a:	f855 3b04 	ldr.w	r3, [r5], #4
 800726e:	4798      	blx	r3
 8007270:	3601      	adds	r6, #1
 8007272:	e7f2      	b.n	800725a <__libc_init_array+0x1e>
 8007274:	08007a64 	.word	0x08007a64
 8007278:	08007a64 	.word	0x08007a64
 800727c:	08007a64 	.word	0x08007a64
 8007280:	08007a68 	.word	0x08007a68

08007284 <memset>:
 8007284:	4402      	add	r2, r0
 8007286:	4603      	mov	r3, r0
 8007288:	4293      	cmp	r3, r2
 800728a:	d100      	bne.n	800728e <memset+0xa>
 800728c:	4770      	bx	lr
 800728e:	f803 1b01 	strb.w	r1, [r3], #1
 8007292:	e7f9      	b.n	8007288 <memset+0x4>

08007294 <__utoa>:
 8007294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007296:	4c1f      	ldr	r4, [pc, #124]	; (8007314 <__utoa+0x80>)
 8007298:	b08b      	sub	sp, #44	; 0x2c
 800729a:	4605      	mov	r5, r0
 800729c:	460b      	mov	r3, r1
 800729e:	466e      	mov	r6, sp
 80072a0:	f104 0c20 	add.w	ip, r4, #32
 80072a4:	6820      	ldr	r0, [r4, #0]
 80072a6:	6861      	ldr	r1, [r4, #4]
 80072a8:	4637      	mov	r7, r6
 80072aa:	c703      	stmia	r7!, {r0, r1}
 80072ac:	3408      	adds	r4, #8
 80072ae:	4564      	cmp	r4, ip
 80072b0:	463e      	mov	r6, r7
 80072b2:	d1f7      	bne.n	80072a4 <__utoa+0x10>
 80072b4:	7921      	ldrb	r1, [r4, #4]
 80072b6:	7139      	strb	r1, [r7, #4]
 80072b8:	1e91      	subs	r1, r2, #2
 80072ba:	6820      	ldr	r0, [r4, #0]
 80072bc:	6038      	str	r0, [r7, #0]
 80072be:	2922      	cmp	r1, #34	; 0x22
 80072c0:	f04f 0100 	mov.w	r1, #0
 80072c4:	d904      	bls.n	80072d0 <__utoa+0x3c>
 80072c6:	7019      	strb	r1, [r3, #0]
 80072c8:	460b      	mov	r3, r1
 80072ca:	4618      	mov	r0, r3
 80072cc:	b00b      	add	sp, #44	; 0x2c
 80072ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072d0:	1e58      	subs	r0, r3, #1
 80072d2:	4684      	mov	ip, r0
 80072d4:	fbb5 f7f2 	udiv	r7, r5, r2
 80072d8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80072dc:	fb02 5617 	mls	r6, r2, r7, r5
 80072e0:	4476      	add	r6, lr
 80072e2:	460c      	mov	r4, r1
 80072e4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80072e8:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80072ec:	462e      	mov	r6, r5
 80072ee:	42b2      	cmp	r2, r6
 80072f0:	f101 0101 	add.w	r1, r1, #1
 80072f4:	463d      	mov	r5, r7
 80072f6:	d9ed      	bls.n	80072d4 <__utoa+0x40>
 80072f8:	2200      	movs	r2, #0
 80072fa:	545a      	strb	r2, [r3, r1]
 80072fc:	1919      	adds	r1, r3, r4
 80072fe:	1aa5      	subs	r5, r4, r2
 8007300:	42aa      	cmp	r2, r5
 8007302:	dae2      	bge.n	80072ca <__utoa+0x36>
 8007304:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007308:	780e      	ldrb	r6, [r1, #0]
 800730a:	7006      	strb	r6, [r0, #0]
 800730c:	3201      	adds	r2, #1
 800730e:	f801 5901 	strb.w	r5, [r1], #-1
 8007312:	e7f4      	b.n	80072fe <__utoa+0x6a>
 8007314:	08007a34 	.word	0x08007a34

08007318 <utoa>:
 8007318:	f7ff bfbc 	b.w	8007294 <__utoa>

0800731c <_init>:
 800731c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731e:	bf00      	nop
 8007320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007322:	bc08      	pop	{r3}
 8007324:	469e      	mov	lr, r3
 8007326:	4770      	bx	lr

08007328 <_fini>:
 8007328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800732a:	bf00      	nop
 800732c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800732e:	bc08      	pop	{r3}
 8007330:	469e      	mov	lr, r3
 8007332:	4770      	bx	lr
