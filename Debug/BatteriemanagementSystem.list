
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069ac  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  08006ba4  08006ba4  00016ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007090  08007090  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007090  08007090  00017090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007098  08007098  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007098  08007098  00017098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800709c  0800709c  0001709c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080070a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  2000000c  080070ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  080070ac  00020310  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d59  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036b6  00000000  00000000  00037d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  0003b450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b0  00000000  00000000  0003c798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bfa5  00000000  00000000  0003d948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a8b9  00000000  00000000  000698ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108489  00000000  00000000  000841a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018c62f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ebc  00000000  00000000  0018c680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006b8c 	.word	0x08006b8c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08006b8c 	.word	0x08006b8c

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	b29a      	uxth	r2, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	6879      	ldr	r1, [r7, #4]
 8000560:	4803      	ldr	r0, [pc, #12]	; (8000570 <uartTransmit+0x24>)
 8000562:	f005 fdfb 	bl	800615c <HAL_UART_Transmit>
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000288 	.word	0x20000288

08000574 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 800057e:	683a      	ldr	r2, [r7, #0]
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4619      	mov	r1, r3
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f006 fafe 	bl	8006b88 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff fe51 	bl	8000238 <strlen>
 8000596:	4603      	mov	r3, r0
 8000598:	b29a      	uxth	r2, r3
 800059a:	f107 010c 	add.w	r1, r7, #12
 800059e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a2:	4803      	ldr	r0, [pc, #12]	; (80005b0 <uartTransmitNumber+0x3c>)
 80005a4:	f005 fdda 	bl	800615c <HAL_UART_Transmit>
}
 80005a8:	bf00      	nop
 80005aa:	3718      	adds	r7, #24
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000288 	.word	0x20000288

080005b4 <DWT_Enable>:
//----------------------------------------------------------------------

// DWT-Einheit aktivieren
//----------------------------------------------------------------------
void DWT_Enable(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
	CoreDebug -> DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <DWT_Enable+0x1c>)
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	4a04      	ldr	r2, [pc, #16]	; (80005d0 <DWT_Enable+0x1c>)
 80005be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005c2:	60d3      	str	r3, [r2, #12]
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	e000edf0 	.word	0xe000edf0

080005d4 <DWT_CycCounterEn>:
//----------------------------------------------------------------------

//Schalte DWT ein
//----------------------------------------------------------------------
void DWT_CycCounterEn()
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
	DWT -> CTRL = 0x40000001;
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <DWT_CycCounterEn+0x14>)
 80005da:	4a04      	ldr	r2, [pc, #16]	; (80005ec <DWT_CycCounterEn+0x18>)
 80005dc:	601a      	str	r2, [r3, #0]
}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	e0001000 	.word	0xe0001000
 80005ec:	40000001 	.word	0x40000001

080005f0 <DWT_CycCounterDis>:
//----------------------------------------------------------------------

// Schalte DWT aus
//----------------------------------------------------------------------
void DWT_CycCounterDis(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
	DWT -> CTRL = 0x40000000;
 80005f4:	4b04      	ldr	r3, [pc, #16]	; (8000608 <DWT_CycCounterDis+0x18>)
 80005f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005fa:	601a      	str	r2, [r3, #0]
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	e0001000 	.word	0xe0001000

0800060c <DWT_CycCounterRead>:
//----------------------------------------------------------------------

// Lese DWT Zaehlerstand
//----------------------------------------------------------------------
uint32_t DWT_CycCounterRead(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
	return DWT -> CYCCNT;
 8000610:	4b03      	ldr	r3, [pc, #12]	; (8000620 <DWT_CycCounterRead+0x14>)
 8000612:	685b      	ldr	r3, [r3, #4]
}
 8000614:	4618      	mov	r0, r3
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e0001000 	.word	0xe0001000

08000624 <DWT_CycCounterClear>:
//----------------------------------------------------------------------

// Loesche DWT Zaehlerstand
//----------------------------------------------------------------------
void DWT_CycCounterClear(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
	DWT -> CYCCNT = 0;
 8000628:	4b03      	ldr	r3, [pc, #12]	; (8000638 <DWT_CycCounterClear+0x14>)
 800062a:	2200      	movs	r2, #0
 800062c:	605a      	str	r2, [r3, #4]
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e0001000 	.word	0xe0001000

0800063c <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 8000642:	2113      	movs	r1, #19
 8000644:	483b      	ldr	r0, [pc, #236]	; (8000734 <collectHardwareInfo+0xf8>)
 8000646:	f7ff ff81 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 800064a:	f001 feb3 	bl	80023b4 <HAL_GetDEVID>
 800064e:	4603      	mov	r3, r0
 8000650:	210a      	movs	r1, #10
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ff8e 	bl	8000574 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 8000658:	2115      	movs	r1, #21
 800065a:	4837      	ldr	r0, [pc, #220]	; (8000738 <collectHardwareInfo+0xfc>)
 800065c:	f7ff ff76 	bl	800054c <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 8000660:	f001 fe9c 	bl	800239c <HAL_GetREVID>
 8000664:	4603      	mov	r3, r0
 8000666:	f242 0201 	movw	r2, #8193	; 0x2001
 800066a:	4293      	cmp	r3, r2
 800066c:	d016      	beq.n	800069c <collectHardwareInfo+0x60>
 800066e:	f242 0201 	movw	r2, #8193	; 0x2001
 8000672:	4293      	cmp	r3, r2
 8000674:	d817      	bhi.n	80006a6 <collectHardwareInfo+0x6a>
 8000676:	f241 0201 	movw	r2, #4097	; 0x1001
 800067a:	4293      	cmp	r3, r2
 800067c:	d004      	beq.n	8000688 <collectHardwareInfo+0x4c>
 800067e:	f241 0203 	movw	r2, #4099	; 0x1003
 8000682:	4293      	cmp	r3, r2
 8000684:	d005      	beq.n	8000692 <collectHardwareInfo+0x56>
 8000686:	e00e      	b.n	80006a6 <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 8000688:	2101      	movs	r1, #1
 800068a:	482c      	ldr	r0, [pc, #176]	; (800073c <collectHardwareInfo+0x100>)
 800068c:	f7ff ff5e 	bl	800054c <uartTransmit>
			break;
 8000690:	e011      	b.n	80006b6 <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 8000692:	2101      	movs	r1, #1
 8000694:	482a      	ldr	r0, [pc, #168]	; (8000740 <collectHardwareInfo+0x104>)
 8000696:	f7ff ff59 	bl	800054c <uartTransmit>
			break;
 800069a:	e00c      	b.n	80006b6 <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 800069c:	2101      	movs	r1, #1
 800069e:	4829      	ldr	r0, [pc, #164]	; (8000744 <collectHardwareInfo+0x108>)
 80006a0:	f7ff ff54 	bl	800054c <uartTransmit>
			break;
 80006a4:	e007      	b.n	80006b6 <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 80006a6:	f001 fe79 	bl	800239c <HAL_GetREVID>
 80006aa:	4603      	mov	r3, r0
 80006ac:	210a      	movs	r1, #10
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff60 	bl	8000574 <uartTransmitNumber>
			break;
 80006b4:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 80006b6:	2113      	movs	r1, #19
 80006b8:	4823      	ldr	r0, [pc, #140]	; (8000748 <collectHardwareInfo+0x10c>)
 80006ba:	f7ff ff47 	bl	800054c <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 80006be:	f003 fa6b 	bl	8003b98 <HAL_RCC_GetSysClockFreq>
 80006c2:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a21      	ldr	r2, [pc, #132]	; (800074c <collectHardwareInfo+0x110>)
 80006c8:	fba2 2303 	umull	r2, r3, r2, r3
 80006cc:	0c9b      	lsrs	r3, r3, #18
 80006ce:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 80006d0:	210a      	movs	r1, #10
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f7ff ff4e 	bl	8000574 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 80006d8:	2104      	movs	r1, #4
 80006da:	481d      	ldr	r0, [pc, #116]	; (8000750 <collectHardwareInfo+0x114>)
 80006dc:	f7ff ff36 	bl	800054c <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 80006e0:	210f      	movs	r1, #15
 80006e2:	481c      	ldr	r0, [pc, #112]	; (8000754 <collectHardwareInfo+0x118>)
 80006e4:	f7ff ff32 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 80006e8:	f001 fe72 	bl	80023d0 <HAL_GetUIDw0>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2110      	movs	r1, #16
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ff3f 	bl	8000574 <uartTransmitNumber>

	uartTransmit(" ", 1);
 80006f6:	2101      	movs	r1, #1
 80006f8:	4817      	ldr	r0, [pc, #92]	; (8000758 <collectHardwareInfo+0x11c>)
 80006fa:	f7ff ff27 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 80006fe:	f001 fe73 	bl	80023e8 <HAL_GetUIDw1>
 8000702:	4603      	mov	r3, r0
 8000704:	2110      	movs	r1, #16
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ff34 	bl	8000574 <uartTransmitNumber>

	uartTransmit(" ", 1);
 800070c:	2101      	movs	r1, #1
 800070e:	4812      	ldr	r0, [pc, #72]	; (8000758 <collectHardwareInfo+0x11c>)
 8000710:	f7ff ff1c 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8000714:	f001 fe74 	bl	8002400 <HAL_GetUIDw2>
 8000718:	4603      	mov	r3, r0
 800071a:	2110      	movs	r1, #16
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff ff29 	bl	8000574 <uartTransmitNumber>

	uartTransmit("\n", 1);
 8000722:	2101      	movs	r1, #1
 8000724:	480d      	ldr	r0, [pc, #52]	; (800075c <collectHardwareInfo+0x120>)
 8000726:	f7ff ff11 	bl	800054c <uartTransmit>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	08006ba4 	.word	0x08006ba4
 8000738:	08006bb8 	.word	0x08006bb8
 800073c:	08006bd0 	.word	0x08006bd0
 8000740:	08006bd4 	.word	0x08006bd4
 8000744:	08006bd8 	.word	0x08006bd8
 8000748:	08006bdc 	.word	0x08006bdc
 800074c:	431bde83 	.word	0x431bde83
 8000750:	08006bf0 	.word	0x08006bf0
 8000754:	08006bf8 	.word	0x08006bf8
 8000758:	08006c08 	.word	0x08006c08
 800075c:	08006c0c 	.word	0x08006c0c

08000760 <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 8000764:	2112      	movs	r1, #18
 8000766:	4824      	ldr	r0, [pc, #144]	; (80007f8 <collectMiddlewareInfo+0x98>)
 8000768:	f7ff fef0 	bl	800054c <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 800076c:	210a      	movs	r1, #10
 800076e:	2005      	movs	r0, #5
 8000770:	f7ff ff00 	bl	8000574 <uartTransmitNumber>
	uartTransmit(".", 1);
 8000774:	2101      	movs	r1, #1
 8000776:	4821      	ldr	r0, [pc, #132]	; (80007fc <collectMiddlewareInfo+0x9c>)
 8000778:	f7ff fee8 	bl	800054c <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 800077c:	210a      	movs	r1, #10
 800077e:	2001      	movs	r0, #1
 8000780:	f7ff fef8 	bl	8000574 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 8000784:	2110      	movs	r1, #16
 8000786:	481e      	ldr	r0, [pc, #120]	; (8000800 <collectMiddlewareInfo+0xa0>)
 8000788:	f7ff fee0 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 800078c:	f001 fdfc 	bl	8002388 <HAL_GetHalVersion>
 8000790:	4603      	mov	r3, r0
 8000792:	0e1b      	lsrs	r3, r3, #24
 8000794:	b2db      	uxtb	r3, r3
 8000796:	210a      	movs	r1, #10
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff feeb 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 800079e:	2101      	movs	r1, #1
 80007a0:	4816      	ldr	r0, [pc, #88]	; (80007fc <collectMiddlewareInfo+0x9c>)
 80007a2:	f7ff fed3 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 80007a6:	f001 fdef 	bl	8002388 <HAL_GetHalVersion>
 80007aa:	4603      	mov	r3, r0
 80007ac:	0c1b      	lsrs	r3, r3, #16
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	210a      	movs	r1, #10
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff fede 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 80007b8:	2101      	movs	r1, #1
 80007ba:	4810      	ldr	r0, [pc, #64]	; (80007fc <collectMiddlewareInfo+0x9c>)
 80007bc:	f7ff fec6 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 80007c0:	f001 fde2 	bl	8002388 <HAL_GetHalVersion>
 80007c4:	4603      	mov	r3, r0
 80007c6:	0a1b      	lsrs	r3, r3, #8
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	210a      	movs	r1, #10
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fed1 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 80007d2:	2101      	movs	r1, #1
 80007d4:	4809      	ldr	r0, [pc, #36]	; (80007fc <collectMiddlewareInfo+0x9c>)
 80007d6:	f7ff feb9 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 80007da:	f001 fdd5 	bl	8002388 <HAL_GetHalVersion>
 80007de:	4603      	mov	r3, r0
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	210a      	movs	r1, #10
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff fec5 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 80007ea:	2101      	movs	r1, #1
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <collectMiddlewareInfo+0xa4>)
 80007ee:	f7ff fead 	bl	800054c <uartTransmit>
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	08006c10 	.word	0x08006c10
 80007fc:	08006c24 	.word	0x08006c24
 8000800:	08006c28 	.word	0x08006c28
 8000804:	08006c0c 	.word	0x08006c0c

08000808 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 800080c:	210f      	movs	r1, #15
 800080e:	4826      	ldr	r0, [pc, #152]	; (80008a8 <collectSoftwareInfo+0xa0>)
 8000810:	f7ff fe9c 	bl	800054c <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8000814:	2108      	movs	r1, #8
 8000816:	4825      	ldr	r0, [pc, #148]	; (80008ac <collectSoftwareInfo+0xa4>)
 8000818:	f7ff fe98 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 800081c:	210f      	movs	r1, #15
 800081e:	4824      	ldr	r0, [pc, #144]	; (80008b0 <collectSoftwareInfo+0xa8>)
 8000820:	f7ff fe94 	bl	800054c <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8000824:	2101      	movs	r1, #1
 8000826:	4823      	ldr	r0, [pc, #140]	; (80008b4 <collectSoftwareInfo+0xac>)
 8000828:	f7ff fe90 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 800082c:	210d      	movs	r1, #13
 800082e:	4822      	ldr	r0, [pc, #136]	; (80008b8 <collectSoftwareInfo+0xb0>)
 8000830:	f7ff fe8c 	bl	800054c <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 8000834:	2129      	movs	r1, #41	; 0x29
 8000836:	4821      	ldr	r0, [pc, #132]	; (80008bc <collectSoftwareInfo+0xb4>)
 8000838:	f7ff fe88 	bl	800054c <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 800083c:	2101      	movs	r1, #1
 800083e:	4820      	ldr	r0, [pc, #128]	; (80008c0 <collectSoftwareInfo+0xb8>)
 8000840:	f7ff fe84 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000844:	2115      	movs	r1, #21
 8000846:	481f      	ldr	r0, [pc, #124]	; (80008c4 <collectSoftwareInfo+0xbc>)
 8000848:	f7ff fe80 	bl	800054c <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 800084c:	2105      	movs	r1, #5
 800084e:	481e      	ldr	r0, [pc, #120]	; (80008c8 <collectSoftwareInfo+0xc0>)
 8000850:	f7ff fe7c 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8000854:	2114      	movs	r1, #20
 8000856:	481d      	ldr	r0, [pc, #116]	; (80008cc <collectSoftwareInfo+0xc4>)
 8000858:	f7ff fe78 	bl	800054c <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 800085c:	2108      	movs	r1, #8
 800085e:	481c      	ldr	r0, [pc, #112]	; (80008d0 <collectSoftwareInfo+0xc8>)
 8000860:	f7ff fe74 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 8000864:	2115      	movs	r1, #21
 8000866:	481b      	ldr	r0, [pc, #108]	; (80008d4 <collectSoftwareInfo+0xcc>)
 8000868:	f7ff fe70 	bl	800054c <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 800086c:	2111      	movs	r1, #17
 800086e:	481a      	ldr	r0, [pc, #104]	; (80008d8 <collectSoftwareInfo+0xd0>)
 8000870:	f7ff fe6c 	bl	800054c <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000874:	2101      	movs	r1, #1
 8000876:	4812      	ldr	r0, [pc, #72]	; (80008c0 <collectSoftwareInfo+0xb8>)
 8000878:	f7ff fe68 	bl	800054c <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 800087c:	210f      	movs	r1, #15
 800087e:	4817      	ldr	r0, [pc, #92]	; (80008dc <collectSoftwareInfo+0xd4>)
 8000880:	f7ff fe64 	bl	800054c <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 8000884:	210b      	movs	r1, #11
 8000886:	4816      	ldr	r0, [pc, #88]	; (80008e0 <collectSoftwareInfo+0xd8>)
 8000888:	f7ff fe60 	bl	800054c <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 800088c:	210f      	movs	r1, #15
 800088e:	4815      	ldr	r0, [pc, #84]	; (80008e4 <collectSoftwareInfo+0xdc>)
 8000890:	f7ff fe5c 	bl	800054c <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 8000894:	2109      	movs	r1, #9
 8000896:	4814      	ldr	r0, [pc, #80]	; (80008e8 <collectSoftwareInfo+0xe0>)
 8000898:	f7ff fe58 	bl	800054c <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 800089c:	2101      	movs	r1, #1
 800089e:	4808      	ldr	r0, [pc, #32]	; (80008c0 <collectSoftwareInfo+0xb8>)
 80008a0:	f7ff fe54 	bl	800054c <uartTransmit>
}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	08006c38 	.word	0x08006c38
 80008ac:	08006c48 	.word	0x08006c48
 80008b0:	08006c50 	.word	0x08006c50
 80008b4:	08006c60 	.word	0x08006c60
 80008b8:	08006c64 	.word	0x08006c64
 80008bc:	08006c74 	.word	0x08006c74
 80008c0:	08006c0c 	.word	0x08006c0c
 80008c4:	08006ca0 	.word	0x08006ca0
 80008c8:	08006cb8 	.word	0x08006cb8
 80008cc:	08006cc0 	.word	0x08006cc0
 80008d0:	08006cd4 	.word	0x08006cd4
 80008d4:	08006cdc 	.word	0x08006cdc
 80008d8:	08006cf4 	.word	0x08006cf4
 80008dc:	08006d08 	.word	0x08006d08
 80008e0:	08006d18 	.word	0x08006d18
 80008e4:	08006d24 	.word	0x08006d24
 80008e8:	08006d34 	.word	0x08006d34

080008ec <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 80008f0:	2114      	movs	r1, #20
 80008f2:	4814      	ldr	r0, [pc, #80]	; (8000944 <collectGitcounts+0x58>)
 80008f4:	f7ff fe2a 	bl	800054c <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 80008f8:	2103      	movs	r1, #3
 80008fa:	4813      	ldr	r0, [pc, #76]	; (8000948 <collectGitcounts+0x5c>)
 80008fc:	f7ff fe26 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 8000900:	2116      	movs	r1, #22
 8000902:	4812      	ldr	r0, [pc, #72]	; (800094c <collectGitcounts+0x60>)
 8000904:	f7ff fe22 	bl	800054c <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 8000908:	2103      	movs	r1, #3
 800090a:	4811      	ldr	r0, [pc, #68]	; (8000950 <collectGitcounts+0x64>)
 800090c:	f7ff fe1e 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 8000910:	211c      	movs	r1, #28
 8000912:	4810      	ldr	r0, [pc, #64]	; (8000954 <collectGitcounts+0x68>)
 8000914:	f7ff fe1a 	bl	800054c <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 8000918:	2101      	movs	r1, #1
 800091a:	480f      	ldr	r0, [pc, #60]	; (8000958 <collectGitcounts+0x6c>)
 800091c:	f7ff fe16 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000920:	2115      	movs	r1, #21
 8000922:	480e      	ldr	r0, [pc, #56]	; (800095c <collectGitcounts+0x70>)
 8000924:	f7ff fe12 	bl	800054c <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8000928:	2103      	movs	r1, #3
 800092a:	480d      	ldr	r0, [pc, #52]	; (8000960 <collectGitcounts+0x74>)
 800092c:	f7ff fe0e 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8000930:	2114      	movs	r1, #20
 8000932:	480c      	ldr	r0, [pc, #48]	; (8000964 <collectGitcounts+0x78>)
 8000934:	f7ff fe0a 	bl	800054c <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 8000938:	2102      	movs	r1, #2
 800093a:	480b      	ldr	r0, [pc, #44]	; (8000968 <collectGitcounts+0x7c>)
 800093c:	f7ff fe06 	bl	800054c <uartTransmit>
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	08006d40 	.word	0x08006d40
 8000948:	08006d54 	.word	0x08006d54
 800094c:	08006d58 	.word	0x08006d58
 8000950:	08006d70 	.word	0x08006d70
 8000954:	08006d74 	.word	0x08006d74
 8000958:	08006c60 	.word	0x08006c60
 800095c:	08006ca0 	.word	0x08006ca0
 8000960:	08006d90 	.word	0x08006d90
 8000964:	08006cc0 	.word	0x08006cc0
 8000968:	08006d94 	.word	0x08006d94

0800096c <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000970:	2111      	movs	r1, #17
 8000972:	480e      	ldr	r0, [pc, #56]	; (80009ac <collectSystemInfo+0x40>)
 8000974:	f7ff fdea 	bl	800054c <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8000978:	f7ff fe60 	bl	800063c <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 800097c:	2111      	movs	r1, #17
 800097e:	480c      	ldr	r0, [pc, #48]	; (80009b0 <collectSystemInfo+0x44>)
 8000980:	f7ff fde4 	bl	800054c <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 8000984:	f7ff ff40 	bl	8000808 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000988:	2113      	movs	r1, #19
 800098a:	480a      	ldr	r0, [pc, #40]	; (80009b4 <collectSystemInfo+0x48>)
 800098c:	f7ff fdde 	bl	800054c <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8000990:	f7ff fee6 	bl	8000760 <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 8000994:	2113      	movs	r1, #19
 8000996:	4808      	ldr	r0, [pc, #32]	; (80009b8 <collectSystemInfo+0x4c>)
 8000998:	f7ff fdd8 	bl	800054c <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 800099c:	f7ff ffa6 	bl	80008ec <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 80009a0:	2103      	movs	r1, #3
 80009a2:	4806      	ldr	r0, [pc, #24]	; (80009bc <collectSystemInfo+0x50>)
 80009a4:	f7ff fdd2 	bl	800054c <uartTransmit>
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	08006d98 	.word	0x08006d98
 80009b0:	08006dac 	.word	0x08006dac
 80009b4:	08006dc0 	.word	0x08006dc0
 80009b8:	08006dd4 	.word	0x08006dd4
 80009bc:	08006de8 	.word	0x08006de8

080009c0 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 80009c6:	2300      	movs	r3, #0
 80009c8:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 80009ca:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <readResetSource+0xa0>)
 80009cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d002      	beq.n	80009dc <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	3301      	adds	r3, #1
 80009da:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 80009dc:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <readResetSource+0xa0>)
 80009de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d002      	beq.n	80009ee <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	3302      	adds	r3, #2
 80009ec:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 80009ee:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <readResetSource+0xa0>)
 80009f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	da02      	bge.n	80009fc <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	3304      	adds	r3, #4
 80009fa:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <readResetSource+0xa0>)
 80009fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d002      	beq.n	8000a0e <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	3308      	adds	r3, #8
 8000a0c:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <readResetSource+0xa0>)
 8000a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d002      	beq.n	8000a20 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	3310      	adds	r3, #16
 8000a1e:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <readResetSource+0xa0>)
 8000a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d002      	beq.n	8000a32 <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	3320      	adds	r3, #32
 8000a30:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <readResetSource+0xa0>)
 8000a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d002      	beq.n	8000a44 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	3340      	adds	r3, #64	; 0x40
 8000a42:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <readResetSource+0xa0>)
 8000a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a48:	4a05      	ldr	r2, [pc, #20]	; (8000a60 <readResetSource+0xa0>)
 8000a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a4e:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8000a50:	79fb      	ldrb	r3, [r7, #7]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800

08000a64 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8000a6e:	2106      	movs	r1, #6
 8000a70:	482a      	ldr	r0, [pc, #168]	; (8000b1c <printResetSource+0xb8>)
 8000a72:	f7ff fd6b 	bl	800054c <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d104      	bne.n	8000a86 <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 8000a7c:	210f      	movs	r1, #15
 8000a7e:	4828      	ldr	r0, [pc, #160]	; (8000b20 <printResetSource+0xbc>)
 8000a80:	f7ff fd64 	bl	800054c <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 8000a84:	e046      	b.n	8000b14 <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8000a90:	2118      	movs	r1, #24
 8000a92:	4824      	ldr	r0, [pc, #144]	; (8000b24 <printResetSource+0xc0>)
 8000a94:	f7ff fd5a 	bl	800054c <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	f003 0302 	and.w	r3, r3, #2
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d003      	beq.n	8000aaa <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8000aa2:	2116      	movs	r1, #22
 8000aa4:	4820      	ldr	r0, [pc, #128]	; (8000b28 <printResetSource+0xc4>)
 8000aa6:	f7ff fd51 	bl	800054c <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	f003 0304 	and.w	r3, r3, #4
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d003      	beq.n	8000abc <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8000ab4:	210a      	movs	r1, #10
 8000ab6:	481d      	ldr	r0, [pc, #116]	; (8000b2c <printResetSource+0xc8>)
 8000ab8:	f7ff fd48 	bl	800054c <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	f003 0308 	and.w	r3, r3, #8
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d003      	beq.n	8000ace <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 8000ac6:	2110      	movs	r1, #16
 8000ac8:	4819      	ldr	r0, [pc, #100]	; (8000b30 <printResetSource+0xcc>)
 8000aca:	f7ff fd3f 	bl	800054c <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	f003 0310 	and.w	r3, r3, #16
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d003      	beq.n	8000ae0 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 8000ad8:	210f      	movs	r1, #15
 8000ada:	4816      	ldr	r0, [pc, #88]	; (8000b34 <printResetSource+0xd0>)
 8000adc:	f7ff fd36 	bl	800054c <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	f003 0320 	and.w	r3, r3, #32
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d003      	beq.n	8000af2 <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 8000aea:	210f      	movs	r1, #15
 8000aec:	4812      	ldr	r0, [pc, #72]	; (8000b38 <printResetSource+0xd4>)
 8000aee:	f7ff fd2d 	bl	800054c <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d003      	beq.n	8000b04 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8000afc:	210a      	movs	r1, #10
 8000afe:	480f      	ldr	r0, [pc, #60]	; (8000b3c <printResetSource+0xd8>)
 8000b00:	f7ff fd24 	bl	800054c <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	da03      	bge.n	8000b14 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8000b0c:	2105      	movs	r1, #5
 8000b0e:	480c      	ldr	r0, [pc, #48]	; (8000b40 <printResetSource+0xdc>)
 8000b10:	f7ff fd1c 	bl	800054c <uartTransmit>
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	08006dec 	.word	0x08006dec
 8000b20:	08006df4 	.word	0x08006df4
 8000b24:	08006e04 	.word	0x08006e04
 8000b28:	08006e20 	.word	0x08006e20
 8000b2c:	08006e38 	.word	0x08006e38
 8000b30:	08006e44 	.word	0x08006e44
 8000b34:	08006e58 	.word	0x08006e58
 8000b38:	08006e68 	.word	0x08006e68
 8000b3c:	08006e78 	.word	0x08006e78
 8000b40:	08006e84 	.word	0x08006e84

08000b44 <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (status == HAL_OK) {													// HAL OK
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d104      	bne.n	8000b5e <hal_error+0x1a>
		uartTransmit("HAL OK\n", 7);
 8000b54:	2107      	movs	r1, #7
 8000b56:	480f      	ldr	r0, [pc, #60]	; (8000b94 <hal_error+0x50>)
 8000b58:	f7ff fcf8 	bl	800054c <uartTransmit>
	}
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 8000b5c:	e016      	b.n	8000b8c <hal_error+0x48>
	else if (status == HAL_ERROR) {											// HAL Error
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d104      	bne.n	8000b6e <hal_error+0x2a>
		uartTransmit("HAL ERROR\n", 10);
 8000b64:	210a      	movs	r1, #10
 8000b66:	480c      	ldr	r0, [pc, #48]	; (8000b98 <hal_error+0x54>)
 8000b68:	f7ff fcf0 	bl	800054c <uartTransmit>
}
 8000b6c:	e00e      	b.n	8000b8c <hal_error+0x48>
	else if (status == HAL_BUSY) {											// HAL Beschaeftigt
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d104      	bne.n	8000b7e <hal_error+0x3a>
		uartTransmit("HAL BUSY\n", 9);
 8000b74:	2109      	movs	r1, #9
 8000b76:	4809      	ldr	r0, [pc, #36]	; (8000b9c <hal_error+0x58>)
 8000b78:	f7ff fce8 	bl	800054c <uartTransmit>
}
 8000b7c:	e006      	b.n	8000b8c <hal_error+0x48>
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	2b03      	cmp	r3, #3
 8000b82:	d103      	bne.n	8000b8c <hal_error+0x48>
		uartTransmit("HAL TIMEOUT\n", 12);
 8000b84:	210c      	movs	r1, #12
 8000b86:	4806      	ldr	r0, [pc, #24]	; (8000ba0 <hal_error+0x5c>)
 8000b88:	f7ff fce0 	bl	800054c <uartTransmit>
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	08006e8c 	.word	0x08006e8c
 8000b98:	08006e94 	.word	0x08006e94
 8000b9c:	08006ea0 	.word	0x08006ea0
 8000ba0:	08006eac 	.word	0x08006eac

08000ba4 <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 8000ba8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bac:	4850      	ldr	r0, [pc, #320]	; (8000cf0 <readall_inputs+0x14c>)
 8000bae:	f002 fbd7 	bl	8003360 <HAL_GPIO_ReadPin>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	b2d9      	uxtb	r1, r3
 8000bba:	4a4e      	ldr	r2, [pc, #312]	; (8000cf4 <readall_inputs+0x150>)
 8000bbc:	7813      	ldrb	r3, [r2, #0]
 8000bbe:	f361 03c3 	bfi	r3, r1, #3, #1
 8000bc2:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 8000bc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bc8:	484b      	ldr	r0, [pc, #300]	; (8000cf8 <readall_inputs+0x154>)
 8000bca:	f002 fbc9 	bl	8003360 <HAL_GPIO_ReadPin>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	b2d9      	uxtb	r1, r3
 8000bd6:	4a47      	ldr	r2, [pc, #284]	; (8000cf4 <readall_inputs+0x150>)
 8000bd8:	7813      	ldrb	r3, [r2, #0]
 8000bda:	f361 1304 	bfi	r3, r1, #4, #1
 8000bde:	7013      	strb	r3, [r2, #0]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 8000be0:	2101      	movs	r1, #1
 8000be2:	4846      	ldr	r0, [pc, #280]	; (8000cfc <readall_inputs+0x158>)
 8000be4:	f002 fbbc 	bl	8003360 <HAL_GPIO_ReadPin>
 8000be8:	4603      	mov	r3, r0
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	b2d9      	uxtb	r1, r3
 8000bf0:	4a40      	ldr	r2, [pc, #256]	; (8000cf4 <readall_inputs+0x150>)
 8000bf2:	7813      	ldrb	r3, [r2, #0]
 8000bf4:	f361 1345 	bfi	r3, r1, #5, #1
 8000bf8:	7013      	strb	r3, [r2, #0]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8000bfa:	2104      	movs	r1, #4
 8000bfc:	483f      	ldr	r0, [pc, #252]	; (8000cfc <readall_inputs+0x158>)
 8000bfe:	f002 fbaf 	bl	8003360 <HAL_GPIO_ReadPin>
 8000c02:	4603      	mov	r3, r0
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	b2d9      	uxtb	r1, r3
 8000c0a:	4a3a      	ldr	r2, [pc, #232]	; (8000cf4 <readall_inputs+0x150>)
 8000c0c:	7813      	ldrb	r3, [r2, #0]
 8000c0e:	f361 1386 	bfi	r3, r1, #6, #1
 8000c12:	7013      	strb	r3, [r2, #0]

	// SDC-Eingaenge einlesen
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);					// IMD OK, Akku
 8000c14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c18:	4835      	ldr	r0, [pc, #212]	; (8000cf0 <readall_inputs+0x14c>)
 8000c1a:	f002 fba1 	bl	8003360 <HAL_GPIO_ReadPin>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	b2d9      	uxtb	r1, r3
 8000c26:	4a36      	ldr	r2, [pc, #216]	; (8000d00 <readall_inputs+0x15c>)
 8000c28:	7813      	ldrb	r3, [r2, #0]
 8000c2a:	f361 0300 	bfi	r3, r1, #0, #1
 8000c2e:	7013      	strb	r3, [r2, #0]
	sdc_in.HVIL = HAL_GPIO_ReadPin(SENSE_SDC_HVIL_GPIO_Port, SENSE_SDC_HVIL_Pin);				// Shutdown-Circuit HVIL, OK
 8000c30:	2108      	movs	r1, #8
 8000c32:	482f      	ldr	r0, [pc, #188]	; (8000cf0 <readall_inputs+0x14c>)
 8000c34:	f002 fb94 	bl	8003360 <HAL_GPIO_ReadPin>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	b2d9      	uxtb	r1, r3
 8000c40:	4a2f      	ldr	r2, [pc, #188]	; (8000d00 <readall_inputs+0x15c>)
 8000c42:	7813      	ldrb	r3, [r2, #0]
 8000c44:	f361 0341 	bfi	r3, r1, #1, #1
 8000c48:	7013      	strb	r3, [r2, #0]
	sdc_in.MotorSDC = HAL_GPIO_ReadPin(SENSE_SDC_MOTOR_GPIO_Port, SENSE_SDC_MOTOR_Pin);			// Shutdown-Circuit Akku, OK
 8000c4a:	2120      	movs	r1, #32
 8000c4c:	4828      	ldr	r0, [pc, #160]	; (8000cf0 <readall_inputs+0x14c>)
 8000c4e:	f002 fb87 	bl	8003360 <HAL_GPIO_ReadPin>
 8000c52:	4603      	mov	r3, r0
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	b2d9      	uxtb	r1, r3
 8000c5a:	4a29      	ldr	r2, [pc, #164]	; (8000d00 <readall_inputs+0x15c>)
 8000c5c:	7813      	ldrb	r3, [r2, #0]
 8000c5e:	f361 0382 	bfi	r3, r1, #2, #1
 8000c62:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8000c64:	2110      	movs	r1, #16
 8000c66:	4822      	ldr	r0, [pc, #136]	; (8000cf0 <readall_inputs+0x14c>)
 8000c68:	f002 fb7a 	bl	8003360 <HAL_GPIO_ReadPin>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	b2d9      	uxtb	r1, r3
 8000c74:	4a22      	ldr	r2, [pc, #136]	; (8000d00 <readall_inputs+0x15c>)
 8000c76:	7813      	ldrb	r3, [r2, #0]
 8000c78:	f361 03c3 	bfi	r3, r1, #3, #1
 8000c7c:	7013      	strb	r3, [r2, #0]
	sdc_in.PrechargeIn = HAL_GPIO_ReadPin(PRECHARGE_IN_GPIO_Port, PRECHARGE_IN_Pin);			// Eingang Precharge abgeschlossen
 8000c7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c82:	4820      	ldr	r0, [pc, #128]	; (8000d04 <readall_inputs+0x160>)
 8000c84:	f002 fb6c 	bl	8003360 <HAL_GPIO_ReadPin>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	b2d9      	uxtb	r1, r3
 8000c90:	4a1b      	ldr	r2, [pc, #108]	; (8000d00 <readall_inputs+0x15c>)
 8000c92:	7813      	ldrb	r3, [r2, #0]
 8000c94:	f361 1304 	bfi	r3, r1, #4, #1
 8000c98:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.OVC = HAL_GPIO_ReadPin(OVC_SENSE_GPIO_Port, OVC_SENSE_Pin);						// Eingang Overcurrent erkannt
 8000c9a:	2104      	movs	r1, #4
 8000c9c:	4819      	ldr	r0, [pc, #100]	; (8000d04 <readall_inputs+0x160>)
 8000c9e:	f002 fb5f 	bl	8003360 <HAL_GPIO_ReadPin>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	b2d9      	uxtb	r1, r3
 8000caa:	4a17      	ldr	r2, [pc, #92]	; (8000d08 <readall_inputs+0x164>)
 8000cac:	7813      	ldrb	r3, [r2, #0]
 8000cae:	f361 0300 	bfi	r3, r1, #0, #1
 8000cb2:	7013      	strb	r3, [r2, #0]
	komfort_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8000cb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cb8:	4810      	ldr	r0, [pc, #64]	; (8000cfc <readall_inputs+0x158>)
 8000cba:	f002 fb51 	bl	8003360 <HAL_GPIO_ReadPin>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	b2d9      	uxtb	r1, r3
 8000cc6:	4a10      	ldr	r2, [pc, #64]	; (8000d08 <readall_inputs+0x164>)
 8000cc8:	7813      	ldrb	r3, [r2, #0]
 8000cca:	f361 0341 	bfi	r3, r1, #1, #1
 8000cce:	7013      	strb	r3, [r2, #0]
	komfort_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8000cd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cd4:	4809      	ldr	r0, [pc, #36]	; (8000cfc <readall_inputs+0x158>)
 8000cd6:	f002 fb43 	bl	8003360 <HAL_GPIO_ReadPin>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	b2d9      	uxtb	r1, r3
 8000ce2:	4a09      	ldr	r2, [pc, #36]	; (8000d08 <readall_inputs+0x164>)
 8000ce4:	7813      	ldrb	r3, [r2, #0]
 8000ce6:	f361 0382 	bfi	r3, r1, #2, #1
 8000cea:	7013      	strb	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	20000028 	.word	0x20000028
 8000cf8:	40020c00 	.word	0x40020c00
 8000cfc:	40020000 	.word	0x40020000
 8000d00:	2000002c 	.word	0x2000002c
 8000d04:	40021400 	.word	0x40021400
 8000d08:	20000030 	.word	0x20000030

08000d0c <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);								// Blaue LED Platine setzen
 8000d10:	2201      	movs	r2, #1
 8000d12:	2180      	movs	r1, #128	; 0x80
 8000d14:	481b      	ldr	r0, [pc, #108]	; (8000d84 <testPCB_Leds+0x78>)
 8000d16:	f002 fb3b 	bl	8003390 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000d1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d1e:	f001 fb0f 	bl	8002340 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);							// Blaue LED Platine zuruecksetzen
 8000d22:	2200      	movs	r2, #0
 8000d24:	2180      	movs	r1, #128	; 0x80
 8000d26:	4817      	ldr	r0, [pc, #92]	; (8000d84 <testPCB_Leds+0x78>)
 8000d28:	f002 fb32 	bl	8003390 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000d2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d30:	f001 fb06 	bl	8002340 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);							// Gruene LED Platine setzen
 8000d34:	2201      	movs	r2, #1
 8000d36:	2104      	movs	r1, #4
 8000d38:	4812      	ldr	r0, [pc, #72]	; (8000d84 <testPCB_Leds+0x78>)
 8000d3a:	f002 fb29 	bl	8003390 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000d3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d42:	f001 fafd 	bl	8002340 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);							// Gruene LED Platine zuruecksetzen
 8000d46:	2200      	movs	r2, #0
 8000d48:	2104      	movs	r1, #4
 8000d4a:	480e      	ldr	r0, [pc, #56]	; (8000d84 <testPCB_Leds+0x78>)
 8000d4c:	f002 fb20 	bl	8003390 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000d50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d54:	f001 faf4 	bl	8002340 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);								// Rote LED Platine setzen
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d5e:	4809      	ldr	r0, [pc, #36]	; (8000d84 <testPCB_Leds+0x78>)
 8000d60:	f002 fb16 	bl	8003390 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000d64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d68:	f001 faea 	bl	8002340 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);								// Rote LED Platine zuruecksetzen
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d72:	4804      	ldr	r0, [pc, #16]	; (8000d84 <testPCB_Leds+0x78>)
 8000d74:	f002 fb0c 	bl	8003390 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000d78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d7c:	f001 fae0 	bl	8002340 <HAL_Delay>
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40020400 	.word	0x40020400

08000d88 <testLeds>:
//----------------------------------------------------------------------

// Teste alle externen LEDs
//----------------------------------------------------------------------
void testLeds(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	// Leds Testen
	HAL_GPIO_WritePin(AKKU_LED_GPIO_Port, AKKU_LED_Pin, GPIO_PIN_SET);								// Akku LED Kombiinstrument setzen
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2180      	movs	r1, #128	; 0x80
 8000d90:	481a      	ldr	r0, [pc, #104]	; (8000dfc <testLeds+0x74>)
 8000d92:	f002 fafd 	bl	8003390 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000d96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d9a:	f001 fad1 	bl	8002340 <HAL_Delay>
	HAL_GPIO_WritePin(AKKU_LED_GPIO_Port, AKKU_LED_Pin, GPIO_PIN_RESET);							// Akku LED Kombiinstrument zuruecksetzen
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2180      	movs	r1, #128	; 0x80
 8000da2:	4816      	ldr	r0, [pc, #88]	; (8000dfc <testLeds+0x74>)
 8000da4:	f002 faf4 	bl	8003390 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000da8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dac:	f001 fac8 	bl	8002340 <HAL_Delay>
	HAL_GPIO_WritePin(INLET_RED_GPIO_Port, INLET_RED_Pin, GPIO_PIN_SET);							// Red Inlet LED setzen
 8000db0:	2201      	movs	r2, #1
 8000db2:	2104      	movs	r1, #4
 8000db4:	4812      	ldr	r0, [pc, #72]	; (8000e00 <testLeds+0x78>)
 8000db6:	f002 faeb 	bl	8003390 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000dba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dbe:	f001 fabf 	bl	8002340 <HAL_Delay>
	HAL_GPIO_WritePin(INLET_RED_GPIO_Port, INLET_RED_Pin, GPIO_PIN_RESET);							// Red Inlet LED zuruecksetzen
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2104      	movs	r1, #4
 8000dc6:	480e      	ldr	r0, [pc, #56]	; (8000e00 <testLeds+0x78>)
 8000dc8:	f002 fae2 	bl	8003390 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000dcc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dd0:	f001 fab6 	bl	8002340 <HAL_Delay>
	HAL_GPIO_WritePin(INLET_GREEN_GPIO_Port, INLET_GREEN_Pin, GPIO_PIN_SET);						// Green Inlet LED setzen
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2102      	movs	r1, #2
 8000dd8:	4809      	ldr	r0, [pc, #36]	; (8000e00 <testLeds+0x78>)
 8000dda:	f002 fad9 	bl	8003390 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000dde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000de2:	f001 faad 	bl	8002340 <HAL_Delay>
	HAL_GPIO_WritePin(INLET_GREEN_GPIO_Port, INLET_GREEN_Pin, GPIO_PIN_RESET);						// Green Inlet LED zuruecksetzen
 8000de6:	2200      	movs	r2, #0
 8000de8:	2102      	movs	r1, #2
 8000dea:	4805      	ldr	r0, [pc, #20]	; (8000e00 <testLeds+0x78>)
 8000dec:	f002 fad0 	bl	8003390 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000df0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000df4:	f001 faa4 	bl	8002340 <HAL_Delay>
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40021800 	.word	0x40021800
 8000e00:	40021000 	.word	0x40021000

08000e04 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e16:	4b44      	ldr	r3, [pc, #272]	; (8000f28 <MX_ADC1_Init+0x124>)
 8000e18:	4a44      	ldr	r2, [pc, #272]	; (8000f2c <MX_ADC1_Init+0x128>)
 8000e1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e1c:	4b42      	ldr	r3, [pc, #264]	; (8000f28 <MX_ADC1_Init+0x124>)
 8000e1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e24:	4b40      	ldr	r3, [pc, #256]	; (8000f28 <MX_ADC1_Init+0x124>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e2a:	4b3f      	ldr	r3, [pc, #252]	; (8000f28 <MX_ADC1_Init+0x124>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e30:	4b3d      	ldr	r3, [pc, #244]	; (8000f28 <MX_ADC1_Init+0x124>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e36:	4b3c      	ldr	r3, [pc, #240]	; (8000f28 <MX_ADC1_Init+0x124>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e3e:	4b3a      	ldr	r3, [pc, #232]	; (8000f28 <MX_ADC1_Init+0x124>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e44:	4b38      	ldr	r3, [pc, #224]	; (8000f28 <MX_ADC1_Init+0x124>)
 8000e46:	4a3a      	ldr	r2, [pc, #232]	; (8000f30 <MX_ADC1_Init+0x12c>)
 8000e48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e4a:	4b37      	ldr	r3, [pc, #220]	; (8000f28 <MX_ADC1_Init+0x124>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8000e50:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <MX_ADC1_Init+0x124>)
 8000e52:	2206      	movs	r2, #6
 8000e54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e56:	4b34      	ldr	r3, [pc, #208]	; (8000f28 <MX_ADC1_Init+0x124>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e5e:	4b32      	ldr	r3, [pc, #200]	; (8000f28 <MX_ADC1_Init+0x124>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e64:	4830      	ldr	r0, [pc, #192]	; (8000f28 <MX_ADC1_Init+0x124>)
 8000e66:	f001 fad7 	bl	8002418 <HAL_ADC_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e70:	f000 fdb8 	bl	80019e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000e74:	2307      	movs	r3, #7
 8000e76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e80:	463b      	mov	r3, r7
 8000e82:	4619      	mov	r1, r3
 8000e84:	4828      	ldr	r0, [pc, #160]	; (8000f28 <MX_ADC1_Init+0x124>)
 8000e86:	f001 fb0b 	bl	80024a0 <HAL_ADC_ConfigChannel>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e90:	f000 fda8 	bl	80019e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e94:	2303      	movs	r3, #3
 8000e96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4821      	ldr	r0, [pc, #132]	; (8000f28 <MX_ADC1_Init+0x124>)
 8000ea2:	f001 fafd 	bl	80024a0 <HAL_ADC_ConfigChannel>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000eac:	f000 fd9a 	bl	80019e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb8:	463b      	mov	r3, r7
 8000eba:	4619      	mov	r1, r3
 8000ebc:	481a      	ldr	r0, [pc, #104]	; (8000f28 <MX_ADC1_Init+0x124>)
 8000ebe:	f001 faef 	bl	80024a0 <HAL_ADC_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000ec8:	f000 fd8c 	bl	80019e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ecc:	2305      	movs	r3, #5
 8000ece:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000ed0:	2304      	movs	r3, #4
 8000ed2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4813      	ldr	r0, [pc, #76]	; (8000f28 <MX_ADC1_Init+0x124>)
 8000eda:	f001 fae1 	bl	80024a0 <HAL_ADC_ConfigChannel>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000ee4:	f000 fd7e 	bl	80019e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ee8:	2306      	movs	r3, #6
 8000eea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000eec:	2305      	movs	r3, #5
 8000eee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	480c      	ldr	r0, [pc, #48]	; (8000f28 <MX_ADC1_Init+0x124>)
 8000ef6:	f001 fad3 	bl	80024a0 <HAL_ADC_ConfigChannel>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000f00:	f000 fd70 	bl	80019e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <MX_ADC1_Init+0x130>)
 8000f06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000f08:	2306      	movs	r3, #6
 8000f0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_ADC1_Init+0x124>)
 8000f12:	f001 fac5 	bl	80024a0 <HAL_ADC_ConfigChannel>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000f1c:	f000 fd62 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	2000003c 	.word	0x2000003c
 8000f2c:	40012000 	.word	0x40012000
 8000f30:	0f000001 	.word	0x0f000001
 8000f34:	10000012 	.word	0x10000012

08000f38 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a15      	ldr	r2, [pc, #84]	; (8000fac <HAL_ADC_MspInit+0x74>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d123      	bne.n	8000fa2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <HAL_ADC_MspInit+0x78>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	4a14      	ldr	r2, [pc, #80]	; (8000fb0 <HAL_ADC_MspInit+0x78>)
 8000f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f64:	6453      	str	r3, [r2, #68]	; 0x44
 8000f66:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_ADC_MspInit+0x78>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <HAL_ADC_MspInit+0x78>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <HAL_ADC_MspInit+0x78>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <HAL_ADC_MspInit+0x78>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 8000f8a:	23f8      	movs	r3, #248	; 0xf8
 8000f8c:	617b      	str	r3, [r7, #20]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <HAL_ADC_MspInit+0x7c>)
 8000f9e:	f002 f833 	bl	8003008 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	3728      	adds	r7, #40	; 0x28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40012000 	.word	0x40012000
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000fbc:	4b17      	ldr	r3, [pc, #92]	; (800101c <MX_CAN1_Init+0x64>)
 8000fbe:	4a18      	ldr	r2, [pc, #96]	; (8001020 <MX_CAN1_Init+0x68>)
 8000fc0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000fc2:	4b16      	ldr	r3, [pc, #88]	; (800101c <MX_CAN1_Init+0x64>)
 8000fc4:	2210      	movs	r2, #16
 8000fc6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000fc8:	4b14      	ldr	r3, [pc, #80]	; (800101c <MX_CAN1_Init+0x64>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fce:	4b13      	ldr	r3, [pc, #76]	; (800101c <MX_CAN1_Init+0x64>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_CAN1_Init+0x64>)
 8000fd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fda:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <MX_CAN1_Init+0x64>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <MX_CAN1_Init+0x64>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <MX_CAN1_Init+0x64>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <MX_CAN1_Init+0x64>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <MX_CAN1_Init+0x64>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <MX_CAN1_Init+0x64>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <MX_CAN1_Init+0x64>)
 8001002:	2200      	movs	r2, #0
 8001004:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <MX_CAN1_Init+0x64>)
 8001008:	f001 fc9a 	bl	8002940 <HAL_CAN_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001012:	f000 fce7 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000084 	.word	0x20000084
 8001020:	40006400 	.word	0x40006400

08001024 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8001028:	4b17      	ldr	r3, [pc, #92]	; (8001088 <MX_CAN3_Init+0x64>)
 800102a:	4a18      	ldr	r2, [pc, #96]	; (800108c <MX_CAN3_Init+0x68>)
 800102c:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 800102e:	4b16      	ldr	r3, [pc, #88]	; (8001088 <MX_CAN3_Init+0x64>)
 8001030:	2206      	movs	r2, #6
 8001032:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <MX_CAN3_Init+0x64>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <MX_CAN3_Init+0x64>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_CAN3_Init+0x64>)
 8001042:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001046:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_CAN3_Init+0x64>)
 800104a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800104e:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001050:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <MX_CAN3_Init+0x64>)
 8001052:	2200      	movs	r2, #0
 8001054:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_CAN3_Init+0x64>)
 8001058:	2200      	movs	r2, #0
 800105a:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 800105c:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <MX_CAN3_Init+0x64>)
 800105e:	2200      	movs	r2, #0
 8001060:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_CAN3_Init+0x64>)
 8001064:	2200      	movs	r2, #0
 8001066:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <MX_CAN3_Init+0x64>)
 800106a:	2200      	movs	r2, #0
 800106c:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_CAN3_Init+0x64>)
 8001070:	2200      	movs	r2, #0
 8001072:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <MX_CAN3_Init+0x64>)
 8001076:	f001 fc63 	bl	8002940 <HAL_CAN_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001080:	f000 fcb0 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200000ac 	.word	0x200000ac
 800108c:	40003400 	.word	0x40003400

08001090 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08c      	sub	sp, #48	; 0x30
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a2e      	ldr	r2, [pc, #184]	; (8001168 <HAL_CAN_MspInit+0xd8>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d128      	bne.n	8001104 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010b2:	4b2e      	ldr	r3, [pc, #184]	; (800116c <HAL_CAN_MspInit+0xdc>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	4a2d      	ldr	r2, [pc, #180]	; (800116c <HAL_CAN_MspInit+0xdc>)
 80010b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010bc:	6413      	str	r3, [r2, #64]	; 0x40
 80010be:	4b2b      	ldr	r3, [pc, #172]	; (800116c <HAL_CAN_MspInit+0xdc>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c6:	61bb      	str	r3, [r7, #24]
 80010c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ca:	4b28      	ldr	r3, [pc, #160]	; (800116c <HAL_CAN_MspInit+0xdc>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a27      	ldr	r2, [pc, #156]	; (800116c <HAL_CAN_MspInit+0xdc>)
 80010d0:	f043 0308 	orr.w	r3, r3, #8
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b25      	ldr	r3, [pc, #148]	; (800116c <HAL_CAN_MspInit+0xdc>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0308 	and.w	r3, r3, #8
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010e2:	2303      	movs	r3, #3
 80010e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ee:	2303      	movs	r3, #3
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010f2:	2309      	movs	r3, #9
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4619      	mov	r1, r3
 80010fc:	481c      	ldr	r0, [pc, #112]	; (8001170 <HAL_CAN_MspInit+0xe0>)
 80010fe:	f001 ff83 	bl	8003008 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8001102:	e02d      	b.n	8001160 <HAL_CAN_MspInit+0xd0>
  else if(canHandle->Instance==CAN3)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a1a      	ldr	r2, [pc, #104]	; (8001174 <HAL_CAN_MspInit+0xe4>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d128      	bne.n	8001160 <HAL_CAN_MspInit+0xd0>
    __HAL_RCC_CAN3_CLK_ENABLE();
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <HAL_CAN_MspInit+0xdc>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	4a16      	ldr	r2, [pc, #88]	; (800116c <HAL_CAN_MspInit+0xdc>)
 8001114:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001118:	6413      	str	r3, [r2, #64]	; 0x40
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <HAL_CAN_MspInit+0xdc>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <HAL_CAN_MspInit+0xdc>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a10      	ldr	r2, [pc, #64]	; (800116c <HAL_CAN_MspInit+0xdc>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <HAL_CAN_MspInit+0xdc>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 800113e:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001150:	230b      	movs	r3, #11
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	4619      	mov	r1, r3
 800115a:	4807      	ldr	r0, [pc, #28]	; (8001178 <HAL_CAN_MspInit+0xe8>)
 800115c:	f001 ff54 	bl	8003008 <HAL_GPIO_Init>
}
 8001160:	bf00      	nop
 8001162:	3730      	adds	r7, #48	; 0x30
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40006400 	.word	0x40006400
 800116c:	40023800 	.word	0x40023800
 8001170:	40020c00 	.word	0x40020c00
 8001174:	40003400 	.word	0x40003400
 8001178:	40020000 	.word	0x40020000

0800117c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08e      	sub	sp, #56	; 0x38
 8001180:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001192:	4bb6      	ldr	r3, [pc, #728]	; (800146c <MX_GPIO_Init+0x2f0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4ab5      	ldr	r2, [pc, #724]	; (800146c <MX_GPIO_Init+0x2f0>)
 8001198:	f043 0310 	orr.w	r3, r3, #16
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4bb3      	ldr	r3, [pc, #716]	; (800146c <MX_GPIO_Init+0x2f0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0310 	and.w	r3, r3, #16
 80011a6:	623b      	str	r3, [r7, #32]
 80011a8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	4bb0      	ldr	r3, [pc, #704]	; (800146c <MX_GPIO_Init+0x2f0>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4aaf      	ldr	r2, [pc, #700]	; (800146c <MX_GPIO_Init+0x2f0>)
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4bad      	ldr	r3, [pc, #692]	; (800146c <MX_GPIO_Init+0x2f0>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	61fb      	str	r3, [r7, #28]
 80011c0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011c2:	4baa      	ldr	r3, [pc, #680]	; (800146c <MX_GPIO_Init+0x2f0>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4aa9      	ldr	r2, [pc, #676]	; (800146c <MX_GPIO_Init+0x2f0>)
 80011c8:	f043 0320 	orr.w	r3, r3, #32
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4ba7      	ldr	r3, [pc, #668]	; (800146c <MX_GPIO_Init+0x2f0>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0320 	and.w	r3, r3, #32
 80011d6:	61bb      	str	r3, [r7, #24]
 80011d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011da:	4ba4      	ldr	r3, [pc, #656]	; (800146c <MX_GPIO_Init+0x2f0>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4aa3      	ldr	r2, [pc, #652]	; (800146c <MX_GPIO_Init+0x2f0>)
 80011e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4ba1      	ldr	r3, [pc, #644]	; (800146c <MX_GPIO_Init+0x2f0>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	4b9e      	ldr	r3, [pc, #632]	; (800146c <MX_GPIO_Init+0x2f0>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a9d      	ldr	r2, [pc, #628]	; (800146c <MX_GPIO_Init+0x2f0>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b9b      	ldr	r3, [pc, #620]	; (800146c <MX_GPIO_Init+0x2f0>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800120a:	4b98      	ldr	r3, [pc, #608]	; (800146c <MX_GPIO_Init+0x2f0>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a97      	ldr	r2, [pc, #604]	; (800146c <MX_GPIO_Init+0x2f0>)
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b95      	ldr	r3, [pc, #596]	; (800146c <MX_GPIO_Init+0x2f0>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001222:	4b92      	ldr	r3, [pc, #584]	; (800146c <MX_GPIO_Init+0x2f0>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a91      	ldr	r2, [pc, #580]	; (800146c <MX_GPIO_Init+0x2f0>)
 8001228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b8f      	ldr	r3, [pc, #572]	; (800146c <MX_GPIO_Init+0x2f0>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800123a:	4b8c      	ldr	r3, [pc, #560]	; (800146c <MX_GPIO_Init+0x2f0>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a8b      	ldr	r2, [pc, #556]	; (800146c <MX_GPIO_Init+0x2f0>)
 8001240:	f043 0308 	orr.w	r3, r3, #8
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b89      	ldr	r3, [pc, #548]	; (800146c <MX_GPIO_Init+0x2f0>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 8001252:	2200      	movs	r2, #0
 8001254:	f248 0187 	movw	r1, #32903	; 0x8087
 8001258:	4885      	ldr	r0, [pc, #532]	; (8001470 <MX_GPIO_Init+0x2f4>)
 800125a:	f002 f899 	bl	8003390 <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001264:	4883      	ldr	r0, [pc, #524]	; (8001474 <MX_GPIO_Init+0x2f8>)
 8001266:	f002 f893 	bl	8003390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	f242 0102 	movw	r1, #8194	; 0x2002
 8001270:	4881      	ldr	r0, [pc, #516]	; (8001478 <MX_GPIO_Init+0x2fc>)
 8001272:	f002 f88d 	bl	8003390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	f240 6102 	movw	r1, #1538	; 0x602
 800127c:	487f      	ldr	r0, [pc, #508]	; (800147c <MX_GPIO_Init+0x300>)
 800127e:	f002 f887 	bl	8003390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	f244 0184 	movw	r1, #16516	; 0x4084
 8001288:	487d      	ldr	r0, [pc, #500]	; (8001480 <MX_GPIO_Init+0x304>)
 800128a:	f002 f881 	bl	8003390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 800128e:	2200      	movs	r2, #0
 8001290:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 8001294:	487b      	ldr	r0, [pc, #492]	; (8001484 <MX_GPIO_Init+0x308>)
 8001296:	f002 f87b 	bl	8003390 <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	2118      	movs	r1, #24
 800129e:	487a      	ldr	r0, [pc, #488]	; (8001488 <MX_GPIO_Init+0x30c>)
 80012a0:	f002 f876 	bl	8003390 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 80012a4:	f248 0387 	movw	r3, #32903	; 0x8087
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
                          |INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ba:	4619      	mov	r1, r3
 80012bc:	486c      	ldr	r0, [pc, #432]	; (8001470 <MX_GPIO_Init+0x2f4>)
 80012be:	f001 fea3 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 80012c2:	f44f 739c 	mov.w	r3, #312	; 0x138
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d4:	4619      	mov	r1, r3
 80012d6:	4866      	ldr	r0, [pc, #408]	; (8001470 <MX_GPIO_Init+0x2f4>)
 80012d8:	f001 fe96 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 80012dc:	f44f 6388 	mov.w	r3, #1088	; 0x440
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e2:	2303      	movs	r3, #3
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ee:	4619      	mov	r1, r3
 80012f0:	485f      	ldr	r0, [pc, #380]	; (8001470 <MX_GPIO_Init+0x2f4>)
 80012f2:	f001 fe89 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 80012f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8001308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130c:	4619      	mov	r1, r3
 800130e:	4859      	ldr	r0, [pc, #356]	; (8001474 <MX_GPIO_Init+0x2f8>)
 8001310:	f001 fe7a 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PCPin PC7 PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001314:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |SD_SW_Pin|GPIO_PIN_7|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131a:	2303      	movs	r3, #3
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001326:	4619      	mov	r1, r3
 8001328:	4852      	ldr	r0, [pc, #328]	; (8001474 <MX_GPIO_Init+0x2f8>)
 800132a:	f001 fe6d 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF3 PF4 PF5
                           PFPin PFPin PFPin PFPin
                           PF10 PF11 PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800132e:	f645 73f9 	movw	r3, #24569	; 0x5ff9
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001334:	2303      	movs	r3, #3
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800133c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001340:	4619      	mov	r1, r3
 8001342:	484d      	ldr	r0, [pc, #308]	; (8001478 <MX_GPIO_Init+0x2fc>)
 8001344:	f001 fe60 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin;
 8001348:	f242 0302 	movw	r3, #8194	; 0x2002
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134e:	2301      	movs	r3, #1
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800135a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135e:	4619      	mov	r1, r3
 8001360:	4845      	ldr	r0, [pc, #276]	; (8001478 <MX_GPIO_Init+0x2fc>)
 8001362:	f001 fe51 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin|PRECHARGE_IN_Pin;
 8001366:	f248 0304 	movw	r3, #32772	; 0x8004
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136c:	2300      	movs	r3, #0
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001378:	4619      	mov	r1, r3
 800137a:	483f      	ldr	r0, [pc, #252]	; (8001478 <MX_GPIO_Init+0x2fc>)
 800137c:	f001 fe44 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|HW_WAKE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 8001380:	f641 0305 	movw	r3, #6149	; 0x1805
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001386:	2300      	movs	r3, #0
 8001388:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001392:	4619      	mov	r1, r3
 8001394:	4839      	ldr	r0, [pc, #228]	; (800147c <MX_GPIO_Init+0x300>)
 8001396:	f001 fe37 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 800139a:	f240 6302 	movw	r3, #1538	; 0x602
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a0:	2301      	movs	r3, #1
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	2300      	movs	r3, #0
 80013aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b0:	4619      	mov	r1, r3
 80013b2:	4832      	ldr	r0, [pc, #200]	; (800147c <MX_GPIO_Init+0x300>)
 80013b4:	f001 fe28 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80013b8:	f64b 7373 	movw	r3, #49011	; 0xbf73
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|I2C_SCL_Pin|I2C_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013be:	2303      	movs	r3, #3
 80013c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ca:	4619      	mov	r1, r3
 80013cc:	482c      	ldr	r0, [pc, #176]	; (8001480 <MX_GPIO_Init+0x304>)
 80013ce:	f001 fe1b 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 80013d2:	f244 0384 	movw	r3, #16516	; 0x4084
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d8:	2301      	movs	r3, #1
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e8:	4619      	mov	r1, r3
 80013ea:	4825      	ldr	r0, [pc, #148]	; (8001480 <MX_GPIO_Init+0x304>)
 80013ec:	f001 fe0c 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8;
 80013f0:	f240 1343 	movw	r3, #323	; 0x143
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f6:	2303      	movs	r3, #3
 80013f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001402:	4619      	mov	r1, r3
 8001404:	481f      	ldr	r0, [pc, #124]	; (8001484 <MX_GPIO_Init+0x308>)
 8001406:	f001 fdff 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|SD_CMD_Pin;
 800140a:	f240 7304 	movw	r3, #1796	; 0x704
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001410:	2303      	movs	r3, #3
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141c:	4619      	mov	r1, r3
 800141e:	481a      	ldr	r0, [pc, #104]	; (8001488 <MX_GPIO_Init+0x30c>)
 8001420:	f001 fdf2 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 8001424:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142a:	2300      	movs	r3, #0
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 8001432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001436:	4619      	mov	r1, r3
 8001438:	4813      	ldr	r0, [pc, #76]	; (8001488 <MX_GPIO_Init+0x30c>)
 800143a:	f001 fde5 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 800143e:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001454:	4619      	mov	r1, r3
 8001456:	480b      	ldr	r0, [pc, #44]	; (8001484 <MX_GPIO_Init+0x308>)
 8001458:	f001 fdd6 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|DIGITAL2_Pin;
 800145c:	2318      	movs	r3, #24
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001460:	2301      	movs	r3, #1
 8001462:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2300      	movs	r3, #0
 800146a:	e00f      	b.n	800148c <MX_GPIO_Init+0x310>
 800146c:	40023800 	.word	0x40023800
 8001470:	40021000 	.word	0x40021000
 8001474:	40020800 	.word	0x40020800
 8001478:	40021400 	.word	0x40021400
 800147c:	40020000 	.word	0x40020000
 8001480:	40020400 	.word	0x40020400
 8001484:	40021800 	.word	0x40021800
 8001488:	40020c00 	.word	0x40020c00
 800148c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800148e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001492:	4619      	mov	r1, r3
 8001494:	4803      	ldr	r0, [pc, #12]	; (80014a4 <MX_GPIO_Init+0x328>)
 8001496:	f001 fdb7 	bl	8003008 <HAL_GPIO_Init>

}
 800149a:	bf00      	nop
 800149c:	3738      	adds	r7, #56	; 0x38
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40020c00 	.word	0x40020c00

080014a8 <calculateMovingAverage>:
static uint16_t getDifference(uint16_t a, uint16_t b);

// Gleitenden Mittelwert berechnen, sehr Speicher arm
//----------------------------------------------------------------------
static int calculateMovingAverage(int oldValue, int newValue, int n)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
	return (oldValue + ((newValue - oldValue) / n));						// MovingAverage Calculation x_n  = x_{n-1} + ((x_n+x_{n-1})/n)
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	1ad2      	subs	r2, r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	fb92 f2f3 	sdiv	r2, r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4413      	add	r3, r2
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d0:	b5b0      	push	{r4, r5, r7, lr}
 80014d2:	b0a6      	sub	sp, #152	; 0x98
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d6:	f000 fed6 	bl	8002286 <HAL_Init>

  /* USER CODE BEGIN Init */
	// Definiere Variablen fuer Main-Funktion
	uint16_t dutyCycle, timerPeriod, frequency, count = 0, R_IMD;
 80014da:	2300      	movs	r3, #0
 80014dc:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
	uint8_t start_flag = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	// Definiere Variablen fuer Main-Funktion
	uint8_t TxData[8], OutData[4], InData[3], status;
  	CAN_FilterTypeDef sFilterConfig;

  	// Erstelle Can-Nachrichten
  	CAN_TxHeaderTypeDef TxMessage = {0x123, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 80014e6:	4bcc      	ldr	r3, [pc, #816]	; (8001818 <main+0x348>)
 80014e8:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80014ec:	461d      	mov	r5, r3
 80014ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014f6:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxOutput = {BMS_CAN_DIGITAL_OUT, 0, CAN_RTR_DATA, CAN_ID_STD, 4, DISABLE};
 80014fa:	4bc8      	ldr	r3, [pc, #800]	; (800181c <main+0x34c>)
 80014fc:	f107 041c 	add.w	r4, r7, #28
 8001500:	461d      	mov	r5, r3
 8001502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001506:	e895 0003 	ldmia.w	r5, {r0, r1}
 800150a:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxInput = {BMS_CAN_DIGITAL_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 3, DISABLE};
 800150e:	4bc4      	ldr	r3, [pc, #784]	; (8001820 <main+0x350>)
 8001510:	1d3c      	adds	r4, r7, #4
 8001512:	461d      	mov	r5, r3
 8001514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001518:	e895 0003 	ldmia.w	r5, {r0, r1}
 800151c:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001520:	f000 f9a6 	bl	8001870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001524:	f7ff fe2a 	bl	800117c <MX_GPIO_Init>
  MX_CAN1_Init();
 8001528:	f7ff fd46 	bl	8000fb8 <MX_CAN1_Init>
  MX_SPI4_Init();
 800152c:	f000 faa0 	bl	8001a70 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 8001530:	f000 fdf2 	bl	8002118 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001534:	f7ff fc66 	bl	8000e04 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001538:	f000 fbea 	bl	8001d10 <MX_TIM1_Init>
  MX_TIM4_Init();
 800153c:	f000 fc70 	bl	8001e20 <MX_TIM4_Init>
  MX_SPI1_Init();
 8001540:	f000 fa58 	bl	80019f4 <MX_SPI1_Init>
  MX_CAN3_Init();
 8001544:	f7ff fd6e 	bl	8001024 <MX_CAN3_Init>
  MX_TIM6_Init();
 8001548:	f000 fce6 	bl	8001f18 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 800154c:	f7ff fa38 	bl	80009c0 <readResetSource>
 8001550:	4603      	mov	r3, r0
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fa86 	bl	8000a64 <printResetSource>

	/* Teste serielle Schnittstelle*/
	#define TEST_STRING_UART		"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 8001558:	213a      	movs	r1, #58	; 0x3a
 800155a:	48b2      	ldr	r0, [pc, #712]	; (8001824 <main+0x354>)
 800155c:	f7fe fff6 	bl	800054c <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 8001560:	f7ff fa04 	bl	800096c <collectSystemInfo>
#endif

	timerPeriod = (HAL_RCC_GetPCLK2Freq() / htim1.Init.Prescaler);
 8001564:	f002 fbfe 	bl	8003d64 <HAL_RCC_GetPCLK2Freq>
 8001568:	4602      	mov	r2, r0
 800156a:	4baf      	ldr	r3, [pc, #700]	; (8001828 <main+0x358>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001572:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
  	// Start timer
	if (HAL_TIM_Base_Start_IT(&htim1) != HAL_OK);
 8001576:	48ac      	ldr	r0, [pc, #688]	; (8001828 <main+0x358>)
 8001578:	f003 f9a2 	bl	80048c0 <HAL_TIM_Base_Start_IT>
	if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1) != HAL_OK);
 800157c:	2100      	movs	r1, #0
 800157e:	48aa      	ldr	r0, [pc, #680]	; (8001828 <main+0x358>)
 8001580:	f003 fac4 	bl	8004b0c <HAL_TIM_IC_Start_IT>
	if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2) != HAL_OK);
 8001584:	2104      	movs	r1, #4
 8001586:	48a8      	ldr	r0, [pc, #672]	; (8001828 <main+0x358>)
 8001588:	f003 fac0 	bl	8004b0c <HAL_TIM_IC_Start_IT>
  	HAL_TIM_Base_Start(&htim6);
 800158c:	48a7      	ldr	r0, [pc, #668]	; (800182c <main+0x35c>)
 800158e:	f003 f927 	bl	80047e0 <HAL_TIM_Base_Start>

	// Leds Testen
	testPCB_Leds();
 8001592:	f7ff fbbb 	bl	8000d0c <testPCB_Leds>
	testLeds();
 8001596:	f7ff fbf7 	bl	8000d88 <testLeds>

	// Lese alle Eingaenge
	readall_inputs();
 800159a:	f7ff fb03 	bl	8000ba4 <readall_inputs>

  	// Starte CAN Bus
  	if((status = HAL_CAN_Start(&hcan3)) != HAL_OK)
 800159e:	48a4      	ldr	r0, [pc, #656]	; (8001830 <main+0x360>)
 80015a0:	f001 fbb6 	bl	8002d10 <HAL_CAN_Start>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80015aa:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d006      	beq.n	80015c0 <main+0xf0>
  	{
  		/* Start Error */
  		hal_error(status);
 80015b2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fac4 	bl	8000b44 <hal_error>
  		Error_Handler();
 80015bc:	f000 fa12 	bl	80019e4 <Error_Handler>
  	}
  	uartTransmit("CAN START\n", 10);
 80015c0:	210a      	movs	r1, #10
 80015c2:	489c      	ldr	r0, [pc, #624]	; (8001834 <main+0x364>)
 80015c4:	f7fe ffc2 	bl	800054c <uartTransmit>

  	// Aktiviere Interrupts für CAN Bus
  	if((status = HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING)) != HAL_OK)
 80015c8:	2102      	movs	r1, #2
 80015ca:	4899      	ldr	r0, [pc, #612]	; (8001830 <main+0x360>)
 80015cc:	f001 fbe4 	bl	8002d98 <HAL_CAN_ActivateNotification>
 80015d0:	4603      	mov	r3, r0
 80015d2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80015d6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d006      	beq.n	80015ec <main+0x11c>
  	{
  		/* Notification Error */
  		hal_error(status);
 80015de:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff faae 	bl	8000b44 <hal_error>
  		Error_Handler();
 80015e8:	f000 f9fc 	bl	80019e4 <Error_Handler>
  	}
  	uartTransmit("Send Message\n", 13);
 80015ec:	210d      	movs	r1, #13
 80015ee:	4892      	ldr	r0, [pc, #584]	; (8001838 <main+0x368>)
 80015f0:	f7fe ffac 	bl	800054c <uartTransmit>

  	// Filter Bank initialisieren um Daten zu empfangen
    sFilterConfig.FilterBank = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	663b      	str	r3, [r7, #96]	; 0x60
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	667b      	str	r3, [r7, #100]	; 0x64
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80015fc:	2301      	movs	r3, #1
 80015fe:	66bb      	str	r3, [r7, #104]	; 0x68
    sFilterConfig.FilterIdHigh = 0x0000;
 8001600:	2300      	movs	r3, #0
 8001602:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFilterConfig.FilterIdLow = 0x0000;
 8001604:	2300      	movs	r3, #0
 8001606:	653b      	str	r3, [r7, #80]	; 0x50
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001608:	2300      	movs	r3, #0
 800160a:	657b      	str	r3, [r7, #84]	; 0x54
    sFilterConfig.FilterMaskIdLow = 0x0000;
 800160c:	2300      	movs	r3, #0
 800160e:	65bb      	str	r3, [r7, #88]	; 0x58
    sFilterConfig.FilterFIFOAssignment = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	65fb      	str	r3, [r7, #92]	; 0x5c
    sFilterConfig.FilterActivation = ENABLE;
 8001614:	2301      	movs	r3, #1
 8001616:	66fb      	str	r3, [r7, #108]	; 0x6c

    // Filter Bank schreiben
    if((status = HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 8001618:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800161c:	4619      	mov	r1, r3
 800161e:	4884      	ldr	r0, [pc, #528]	; (8001830 <main+0x360>)
 8001620:	f001 fa8a 	bl	8002b38 <HAL_CAN_ConfigFilter>
 8001624:	4603      	mov	r3, r0
 8001626:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800162a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800162e:	2b00      	cmp	r3, #0
 8001630:	d006      	beq.n	8001640 <main+0x170>
    {
    	/* Filter configuration Error */
  		hal_error(status);
 8001632:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fa84 	bl	8000b44 <hal_error>
  		Error_Handler();
 800163c:	f000 f9d2 	bl	80019e4 <Error_Handler>
    }

    // Test CAN Nachricht beschreiben
    for (uint8_t j = 0; j < 8; j++)
 8001640:	2300      	movs	r3, #0
 8001642:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001646:	e00e      	b.n	8001666 <main+0x196>
    {
    	TxData[j] = (j + 1);
 8001648:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800164c:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001650:	3201      	adds	r2, #1
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	3398      	adds	r3, #152	; 0x98
 8001656:	443b      	add	r3, r7
 8001658:	f803 2c1c 	strb.w	r2, [r3, #-28]
    for (uint8_t j = 0; j < 8; j++)
 800165c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001660:	3301      	adds	r3, #1
 8001662:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001666:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800166a:	2b07      	cmp	r3, #7
 800166c:	d9ec      	bls.n	8001648 <main+0x178>
    }

	if (!(sdc_in.sdcinput && 0b00001111))										// SDC OK; Motor, BTB, IMD und HVIL OK
 800166e:	4b73      	ldr	r3, [pc, #460]	; (800183c <main+0x36c>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d15e      	bne.n	8001734 <main+0x264>
	{
		#define SDC_STRING_ERROR			"\nSDC ist nicht geschlossen"
		uartTransmit(SDC_STRING_ERROR, sizeof(SDC_STRING_ERROR));
 8001676:	211b      	movs	r1, #27
 8001678:	4871      	ldr	r0, [pc, #452]	; (8001840 <main+0x370>)
 800167a:	f7fe ff67 	bl	800054c <uartTransmit>

		// LEDs setzen bei SDC Fehler
		leuchten_out.GreenLed = 0;
 800167e:	4a71      	ldr	r2, [pc, #452]	; (8001844 <main+0x374>)
 8001680:	7813      	ldrb	r3, [r2, #0]
 8001682:	f36f 1386 	bfc	r3, #6, #1
 8001686:	7013      	strb	r3, [r2, #0]
		leuchten_out.RedLed = 1;
 8001688:	4a6e      	ldr	r2, [pc, #440]	; (8001844 <main+0x374>)
 800168a:	7813      	ldrb	r3, [r2, #0]
 800168c:	f043 0320 	orr.w	r3, r3, #32
 8001690:	7013      	strb	r3, [r2, #0]
		leuchten_out.AkkuErrorLed = 0;
 8001692:	4a6c      	ldr	r2, [pc, #432]	; (8001844 <main+0x374>)
 8001694:	7813      	ldrb	r3, [r2, #0]
 8001696:	f36f 0382 	bfc	r3, #2, #1
 800169a:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);
 800169c:	4b69      	ldr	r3, [pc, #420]	; (8001844 <main+0x374>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	461a      	mov	r2, r3
 80016a8:	2104      	movs	r1, #4
 80016aa:	4867      	ldr	r0, [pc, #412]	; (8001848 <main+0x378>)
 80016ac:	f001 fe70 	bl	8003390 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);
 80016b0:	4b64      	ldr	r3, [pc, #400]	; (8001844 <main+0x374>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	461a      	mov	r2, r3
 80016bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016c0:	4861      	ldr	r0, [pc, #388]	; (8001848 <main+0x378>)
 80016c2:	f001 fe65 	bl	8003390 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AKKU_LED_GPIO_Port, AKKU_LED_Pin, leuchten_out.AkkuErrorLed);
 80016c6:	4b5f      	ldr	r3, [pc, #380]	; (8001844 <main+0x374>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	461a      	mov	r2, r3
 80016d2:	2180      	movs	r1, #128	; 0x80
 80016d4:	485d      	ldr	r0, [pc, #372]	; (800184c <main+0x37c>)
 80016d6:	f001 fe5b 	bl	8003390 <HAL_GPIO_WritePin>

		// Ausgabe welcher Fehler vorhanden
		// Motorsteuergeraet Fehler
		if(!(sdc_in.MotorSDC == 1))
 80016da:	4b58      	ldr	r3, [pc, #352]	; (800183c <main+0x36c>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d103      	bne.n	80016f0 <main+0x220>
		{
			#define SDC_STRING_MOTOR		"\nSDC Motor hat einen Fehler und ist offen"
			uartTransmit(SDC_STRING_MOTOR, sizeof(SDC_STRING_MOTOR));
 80016e8:	212a      	movs	r1, #42	; 0x2a
 80016ea:	4859      	ldr	r0, [pc, #356]	; (8001850 <main+0x380>)
 80016ec:	f7fe ff2e 	bl	800054c <uartTransmit>
		}

		// BamoCar Fehler
		if (!(sdc_in.BTB_SDC == 1))
 80016f0:	4b52      	ldr	r3, [pc, #328]	; (800183c <main+0x36c>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d103      	bne.n	8001706 <main+0x236>
		{
			#define SDC_STRING_BTB			"\nSDC BTB hat einen Fehler und ist offen"
			uartTransmit(SDC_STRING_BTB, sizeof(SDC_STRING_BTB));
 80016fe:	2128      	movs	r1, #40	; 0x28
 8001700:	4854      	ldr	r0, [pc, #336]	; (8001854 <main+0x384>)
 8001702:	f7fe ff23 	bl	800054c <uartTransmit>
		}

		// HVIL Fehler
		if (!(sdc_in.HVIL == 1))
 8001706:	4b4d      	ldr	r3, [pc, #308]	; (800183c <main+0x36c>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	d103      	bne.n	800171c <main+0x24c>
		{
			#define SDC_STRING_HVIL			"\nSDC HVIL ist nicht geschlossen"
			uartTransmit(SDC_STRING_HVIL, sizeof(SDC_STRING_HVIL));
 8001714:	2120      	movs	r1, #32
 8001716:	4850      	ldr	r0, [pc, #320]	; (8001858 <main+0x388>)
 8001718:	f7fe ff18 	bl	800054c <uartTransmit>
		}

		// IMD Fehler
		if (!(sdc_in.IMD_OK_IN == 1))
 800171c:	4b47      	ldr	r3, [pc, #284]	; (800183c <main+0x36c>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d126      	bne.n	8001778 <main+0x2a8>
		{
			#define SDC_STRING_IMD			"\nSDC IMD hat einen Fehler"
			uartTransmit(SDC_STRING_IMD, sizeof(SDC_STRING_IMD));
 800172a:	211a      	movs	r1, #26
 800172c:	484b      	ldr	r0, [pc, #300]	; (800185c <main+0x38c>)
 800172e:	f7fe ff0d 	bl	800054c <uartTransmit>
 8001732:	e021      	b.n	8001778 <main+0x2a8>
		}
	}
	else
	{
		// Keine Fehler, LEDs fuer OK setzen
		system_out.AmsOK = 1;
 8001734:	4a4a      	ldr	r2, [pc, #296]	; (8001860 <main+0x390>)
 8001736:	7813      	ldrb	r3, [r2, #0]
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, system_out.AmsOK);
 800173e:	4b48      	ldr	r3, [pc, #288]	; (8001860 <main+0x390>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001746:	b2db      	uxtb	r3, r3
 8001748:	461a      	mov	r2, r3
 800174a:	2180      	movs	r1, #128	; 0x80
 800174c:	4845      	ldr	r0, [pc, #276]	; (8001864 <main+0x394>)
 800174e:	f001 fe1f 	bl	8003390 <HAL_GPIO_WritePin>
		leuchten_out.GreenLed = 1;
 8001752:	4a3c      	ldr	r2, [pc, #240]	; (8001844 <main+0x374>)
 8001754:	7813      	ldrb	r3, [r2, #0]
 8001756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800175a:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);
 800175c:	4b39      	ldr	r3, [pc, #228]	; (8001844 <main+0x374>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001764:	b2db      	uxtb	r3, r3
 8001766:	461a      	mov	r2, r3
 8001768:	2104      	movs	r1, #4
 800176a:	4837      	ldr	r0, [pc, #220]	; (8001848 <main+0x378>)
 800176c:	f001 fe10 	bl	8003390 <HAL_GPIO_WritePin>

		// Ausgabe SDC geschlossen
		#define SDC_STRING_OK				"\nSDC ist geschlossen"
		uartTransmit(SDC_STRING_OK, sizeof(SDC_STRING_OK));
 8001770:	2115      	movs	r1, #21
 8001772:	483d      	ldr	r0, [pc, #244]	; (8001868 <main+0x398>)
 8001774:	f7fe feea 	bl	800054c <uartTransmit>
	}

	uint32_t DWT_count = 0, test = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800177e:	2300      	movs	r3, #0
 8001780:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	// Systick-Zaehler benutzen
	DWT_Enable();									// DWT-Einheit aktivieren
 8001784:	f7fe ff16 	bl	80005b4 <DWT_Enable>
	DWT_CycCounterEn();								// Zaehler aktivieren
 8001788:	f7fe ff24 	bl	80005d4 <DWT_CycCounterEn>
	DWT_CycCounterClear();							// Zaehler loeschen
 800178c:	f7fe ff4a 	bl	8000624 <DWT_CycCounterClear>

	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, SET);
 8001790:	2201      	movs	r2, #1
 8001792:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001796:	482c      	ldr	r0, [pc, #176]	; (8001848 <main+0x378>)
 8001798:	f001 fdfa 	bl	8003390 <HAL_GPIO_WritePin>

	DWT_count = DWT_CycCounterRead();
 800179c:	f7fe ff36 	bl	800060c <DWT_CycCounterRead>
 80017a0:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	test = DWT_count / SYSTICK_CLKSOURCE_HCLK;
 80017a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017a8:	089b      	lsrs	r3, r3, #2
 80017aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	uartTransmitNumber(test, 10);
 80017ae:	210a      	movs	r1, #10
 80017b0:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80017b4:	f7fe fede 	bl	8000574 <uartTransmitNumber>
  	uartTransmit("\n", 1);
 80017b8:	2101      	movs	r1, #1
 80017ba:	482c      	ldr	r0, [pc, #176]	; (800186c <main+0x39c>)
 80017bc:	f7fe fec6 	bl	800054c <uartTransmit>
  	DWT_CycCounterDis();							// Zaehler deaktivieren
 80017c0:	f7fe ff16 	bl	80005f0 <DWT_CycCounterDis>
  \details Disables FIQ interrupts by setting the F-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_fault_irq(void)
{
  __ASM volatile ("cpsid f" : : : "memory");
 80017c4:	b671      	cpsid	f
}
 80017c6:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 80017c8:	b672      	cpsid	i
}
 80017ca:	bf00      	nop
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Systick-Zaehler benutzen
		DWT_CycCounterClear();						// Zaehler loeschen
 80017cc:	f7fe ff2a 	bl	8000624 <DWT_CycCounterClear>
		DWT_Enable();								// DWT-Einheit aktivieren
 80017d0:	f7fe fef0 	bl	80005b4 <DWT_Enable>
		DWT_CycCounterEn();							// Zaehler aktivieren
 80017d4:	f7fe fefe 	bl	80005d4 <DWT_CycCounterEn>

		//DWT_count = DWT_CycCounterRead();

		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, SET);
 80017d8:	2201      	movs	r2, #1
 80017da:	2104      	movs	r1, #4
 80017dc:	481a      	ldr	r0, [pc, #104]	; (8001848 <main+0x378>)
 80017de:	f001 fdd7 	bl	8003390 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, SET);
 80017e2:	2201      	movs	r2, #1
 80017e4:	2180      	movs	r1, #128	; 0x80
 80017e6:	4818      	ldr	r0, [pc, #96]	; (8001848 <main+0x378>)
 80017e8:	f001 fdd2 	bl	8003390 <HAL_GPIO_WritePin>

		DWT_count = DWT_CycCounterRead(); // - DWT_count;
 80017ec:	f7fe ff0e 	bl	800060c <DWT_CycCounterRead>
 80017f0:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		test = DWT_count / SYSTICK_CLKSOURCE_HCLK;
 80017f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017f8:	089b      	lsrs	r3, r3, #2
 80017fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

		uartTransmitNumber(DWT_count, 10);
 80017fe:	210a      	movs	r1, #10
 8001800:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001804:	f7fe feb6 	bl	8000574 <uartTransmitNumber>
	  	uartTransmit("\n", 1);
 8001808:	2101      	movs	r1, #1
 800180a:	4818      	ldr	r0, [pc, #96]	; (800186c <main+0x39c>)
 800180c:	f7fe fe9e 	bl	800054c <uartTransmit>
	  	DWT_CycCounterDis();						// Zaehler deaktivieren
 8001810:	f7fe feee 	bl	80005f0 <DWT_CycCounterDis>
		DWT_CycCounterClear();						// Zaehler loeschen
 8001814:	e7da      	b.n	80017cc <main+0x2fc>
 8001816:	bf00      	nop
 8001818:	08007008 	.word	0x08007008
 800181c:	08007020 	.word	0x08007020
 8001820:	08007038 	.word	0x08007038
 8001824:	08006ee8 	.word	0x08006ee8
 8001828:	200001a4 	.word	0x200001a4
 800182c:	2000023c 	.word	0x2000023c
 8001830:	200000ac 	.word	0x200000ac
 8001834:	08006f24 	.word	0x08006f24
 8001838:	08006f30 	.word	0x08006f30
 800183c:	2000002c 	.word	0x2000002c
 8001840:	08006f40 	.word	0x08006f40
 8001844:	20000038 	.word	0x20000038
 8001848:	40020400 	.word	0x40020400
 800184c:	40021800 	.word	0x40021800
 8001850:	08006f5c 	.word	0x08006f5c
 8001854:	08006f88 	.word	0x08006f88
 8001858:	08006fb0 	.word	0x08006fb0
 800185c:	08006fd0 	.word	0x08006fd0
 8001860:	20000034 	.word	0x20000034
 8001864:	40021000 	.word	0x40021000
 8001868:	08006fec 	.word	0x08006fec
 800186c:	08007004 	.word	0x08007004

08001870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b094      	sub	sp, #80	; 0x50
 8001874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001876:	f107 031c 	add.w	r3, r7, #28
 800187a:	2234      	movs	r2, #52	; 0x34
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f005 f938 	bl	8006af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001884:	f107 0308 	add.w	r3, r7, #8
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001894:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <SystemClock_Config+0xd8>)
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	4a2b      	ldr	r2, [pc, #172]	; (8001948 <SystemClock_Config+0xd8>)
 800189a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189e:	6413      	str	r3, [r2, #64]	; 0x40
 80018a0:	4b29      	ldr	r3, [pc, #164]	; (8001948 <SystemClock_Config+0xd8>)
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018ac:	4b27      	ldr	r3, [pc, #156]	; (800194c <SystemClock_Config+0xdc>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a26      	ldr	r2, [pc, #152]	; (800194c <SystemClock_Config+0xdc>)
 80018b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	4b24      	ldr	r3, [pc, #144]	; (800194c <SystemClock_Config+0xdc>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018c0:	603b      	str	r3, [r7, #0]
 80018c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018c4:	2301      	movs	r3, #1
 80018c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ce:	2302      	movs	r3, #2
 80018d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80018d8:	2319      	movs	r3, #25
 80018da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 80018dc:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80018e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018e2:	2302      	movs	r3, #2
 80018e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80018e6:	2308      	movs	r3, #8
 80018e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018ea:	2302      	movs	r3, #2
 80018ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	4618      	mov	r0, r3
 80018f4:	f001 fdb6 	bl	8003464 <HAL_RCC_OscConfig>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80018fe:	f000 f871 	bl	80019e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001902:	f001 fd5f 	bl	80033c4 <HAL_PWREx_EnableOverDrive>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800190c:	f000 f86a 	bl	80019e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001910:	230f      	movs	r3, #15
 8001912:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001914:	2302      	movs	r3, #2
 8001916:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001918:	2300      	movs	r3, #0
 800191a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800191c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001920:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001926:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001928:	f107 0308 	add.w	r3, r7, #8
 800192c:	2107      	movs	r1, #7
 800192e:	4618      	mov	r0, r3
 8001930:	f002 f846 	bl	80039c0 <HAL_RCC_ClockConfig>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800193a:	f000 f853 	bl	80019e4 <Error_Handler>
  }
}
 800193e:	bf00      	nop
 8001940:	3750      	adds	r7, #80	; 0x50
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	40007000 	.word	0x40007000

08001950 <HAL_TIM_PeriodElapsedCallback>:
	can_change = 1;
}

// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	// Kontrolliere welcher Timer den Ueberlauf ausgeloest hat
	if (htim == &htim6)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a1d      	ldr	r2, [pc, #116]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d102      	bne.n	8001966 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		millisekunden_flag_1 = 1;
 8001960:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001962:	2201      	movs	r2, #1
 8001964:	701a      	strb	r2, [r3, #0]
	}

	// Timer IMD
	if (htim == &htim1)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a1b      	ldr	r2, [pc, #108]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d12c      	bne.n	80019c8 <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	7f1b      	ldrb	r3, [r3, #28]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d112      	bne.n	800199c <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			rising = calculateMovingAverage(rising, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1), 64);
 8001976:	4b19      	ldr	r3, [pc, #100]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	b29b      	uxth	r3, r3
 800197c:	461c      	mov	r4, r3
 800197e:	2100      	movs	r1, #0
 8001980:	4815      	ldr	r0, [pc, #84]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001982:	f003 fd25 	bl	80053d0 <HAL_TIM_ReadCapturedValue>
 8001986:	4603      	mov	r3, r0
 8001988:	2240      	movs	r2, #64	; 0x40
 800198a:	4619      	mov	r1, r3
 800198c:	4620      	mov	r0, r4
 800198e:	f7ff fd8b 	bl	80014a8 <calculateMovingAverage>
 8001992:	4603      	mov	r3, r0
 8001994:	b29a      	uxth	r2, r3
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001998:	801a      	strh	r2, [r3, #0]
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
		{
			falling = calculateMovingAverage(falling, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2), 64);
		}
	}
}
 800199a:	e015      	b.n	80019c8 <HAL_TIM_PeriodElapsedCallback+0x78>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	7f1b      	ldrb	r3, [r3, #28]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d111      	bne.n	80019c8 <HAL_TIM_PeriodElapsedCallback+0x78>
			falling = calculateMovingAverage(falling, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2), 64);
 80019a4:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	461c      	mov	r4, r3
 80019ac:	2104      	movs	r1, #4
 80019ae:	480a      	ldr	r0, [pc, #40]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80019b0:	f003 fd0e 	bl	80053d0 <HAL_TIM_ReadCapturedValue>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2240      	movs	r2, #64	; 0x40
 80019b8:	4619      	mov	r1, r3
 80019ba:	4620      	mov	r0, r4
 80019bc:	f7ff fd74 	bl	80014a8 <calculateMovingAverage>
 80019c0:	4603      	mov	r3, r0
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80019c6:	801a      	strh	r2, [r3, #0]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd90      	pop	{r4, r7, pc}
 80019d0:	2000023c 	.word	0x2000023c
 80019d4:	200000d8 	.word	0x200000d8
 80019d8:	200001a4 	.word	0x200001a4
 80019dc:	200000d4 	.word	0x200000d4
 80019e0:	200000d6 	.word	0x200000d6

080019e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80019f8:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <MX_SPI1_Init+0x74>)
 80019fa:	4a1c      	ldr	r2, [pc, #112]	; (8001a6c <MX_SPI1_Init+0x78>)
 80019fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <MX_SPI1_Init+0x74>)
 8001a00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a06:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <MX_SPI1_Init+0x74>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001a0c:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <MX_SPI1_Init+0x74>)
 8001a0e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001a12:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a14:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <MX_SPI1_Init+0x74>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a1a:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <MX_SPI1_Init+0x74>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <MX_SPI1_Init+0x74>)
 8001a22:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001a26:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <MX_SPI1_Init+0x74>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <MX_SPI1_Init+0x74>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MX_SPI1_Init+0x74>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <MX_SPI1_Init+0x74>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <MX_SPI1_Init+0x74>)
 8001a42:	2207      	movs	r2, #7
 8001a44:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <MX_SPI1_Init+0x74>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <MX_SPI1_Init+0x74>)
 8001a4e:	2208      	movs	r2, #8
 8001a50:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a52:	4805      	ldr	r0, [pc, #20]	; (8001a68 <MX_SPI1_Init+0x74>)
 8001a54:	f002 fdc2 	bl	80045dc <HAL_SPI_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a5e:	f7ff ffc1 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200000dc 	.word	0x200000dc
 8001a6c:	40013000 	.word	0x40013000

08001a70 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <MX_SPI4_Init+0x74>)
 8001a76:	4a1c      	ldr	r2, [pc, #112]	; (8001ae8 <MX_SPI4_Init+0x78>)
 8001a78:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <MX_SPI4_Init+0x74>)
 8001a7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a80:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001a82:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <MX_SPI4_Init+0x74>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001a88:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <MX_SPI4_Init+0x74>)
 8001a8a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001a8e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <MX_SPI4_Init+0x74>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a96:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <MX_SPI4_Init+0x74>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <MX_SPI4_Init+0x74>)
 8001a9e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001aa2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <MX_SPI4_Init+0x74>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <MX_SPI4_Init+0x74>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <MX_SPI4_Init+0x74>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <MX_SPI4_Init+0x74>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <MX_SPI4_Init+0x74>)
 8001abe:	2207      	movs	r2, #7
 8001ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ac2:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <MX_SPI4_Init+0x74>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <MX_SPI4_Init+0x74>)
 8001aca:	2208      	movs	r2, #8
 8001acc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001ace:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <MX_SPI4_Init+0x74>)
 8001ad0:	f002 fd84 	bl	80045dc <HAL_SPI_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001ada:	f7ff ff83 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000140 	.word	0x20000140
 8001ae8:	40013400 	.word	0x40013400

08001aec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08c      	sub	sp, #48	; 0x30
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 031c 	add.w	r3, r7, #28
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a3d      	ldr	r2, [pc, #244]	; (8001c00 <HAL_SPI_MspInit+0x114>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d145      	bne.n	8001b9a <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b0e:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <HAL_SPI_MspInit+0x118>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	4a3c      	ldr	r2, [pc, #240]	; (8001c04 <HAL_SPI_MspInit+0x118>)
 8001b14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b18:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1a:	4b3a      	ldr	r3, [pc, #232]	; (8001c04 <HAL_SPI_MspInit+0x118>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b22:	61bb      	str	r3, [r7, #24]
 8001b24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b26:	4b37      	ldr	r3, [pc, #220]	; (8001c04 <HAL_SPI_MspInit+0x118>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a36      	ldr	r2, [pc, #216]	; (8001c04 <HAL_SPI_MspInit+0x118>)
 8001b2c:	f043 0308 	orr.w	r3, r3, #8
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b34      	ldr	r3, [pc, #208]	; (8001c04 <HAL_SPI_MspInit+0x118>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b3e:	4b31      	ldr	r3, [pc, #196]	; (8001c04 <HAL_SPI_MspInit+0x118>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4a30      	ldr	r2, [pc, #192]	; (8001c04 <HAL_SPI_MspInit+0x118>)
 8001b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4b2e      	ldr	r3, [pc, #184]	; (8001c04 <HAL_SPI_MspInit+0x118>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b62:	2303      	movs	r3, #3
 8001b64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b66:	2305      	movs	r3, #5
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001b6a:	f107 031c 	add.w	r3, r7, #28
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4825      	ldr	r0, [pc, #148]	; (8001c08 <HAL_SPI_MspInit+0x11c>)
 8001b72:	f001 fa49 	bl	8003008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTI_MISO_Pin|POTI_CS_Pin|POTI_SCK_Pin;
 8001b76:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b84:	2303      	movs	r3, #3
 8001b86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b88:	2305      	movs	r3, #5
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b8c:	f107 031c 	add.w	r3, r7, #28
 8001b90:	4619      	mov	r1, r3
 8001b92:	481e      	ldr	r0, [pc, #120]	; (8001c0c <HAL_SPI_MspInit+0x120>)
 8001b94:	f001 fa38 	bl	8003008 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001b98:	e02d      	b.n	8001bf6 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI4)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a1c      	ldr	r2, [pc, #112]	; (8001c10 <HAL_SPI_MspInit+0x124>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d128      	bne.n	8001bf6 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001ba4:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <HAL_SPI_MspInit+0x118>)
 8001ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba8:	4a16      	ldr	r2, [pc, #88]	; (8001c04 <HAL_SPI_MspInit+0x118>)
 8001baa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bae:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb0:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <HAL_SPI_MspInit+0x118>)
 8001bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <HAL_SPI_MspInit+0x118>)
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc0:	4a10      	ldr	r2, [pc, #64]	; (8001c04 <HAL_SPI_MspInit+0x118>)
 8001bc2:	f043 0310 	orr.w	r3, r3, #16
 8001bc6:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc8:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <HAL_SPI_MspInit+0x118>)
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bcc:	f003 0310 	and.w	r3, r3, #16
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ISOSPI_CS_Pin|ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 8001bd4:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8001bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be2:	2303      	movs	r3, #3
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001be6:	2305      	movs	r3, #5
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bea:	f107 031c 	add.w	r3, r7, #28
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4808      	ldr	r0, [pc, #32]	; (8001c14 <HAL_SPI_MspInit+0x128>)
 8001bf2:	f001 fa09 	bl	8003008 <HAL_GPIO_Init>
}
 8001bf6:	bf00      	nop
 8001bf8:	3730      	adds	r7, #48	; 0x30
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40013000 	.word	0x40013000
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40020c00 	.word	0x40020c00
 8001c0c:	40021800 	.word	0x40021800
 8001c10:	40013400 	.word	0x40013400
 8001c14:	40021000 	.word	0x40021000

08001c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <HAL_MspInit+0x44>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	4a0e      	ldr	r2, [pc, #56]	; (8001c5c <HAL_MspInit+0x44>)
 8001c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c28:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <HAL_MspInit+0x44>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_MspInit+0x44>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	4a08      	ldr	r2, [pc, #32]	; (8001c5c <HAL_MspInit+0x44>)
 8001c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c40:	6453      	str	r3, [r2, #68]	; 0x44
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_MspInit+0x44>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4a:	603b      	str	r3, [r7, #0]
 8001c4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800

08001c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c72:	e7fe      	b.n	8001c72 <HardFault_Handler+0x4>

08001c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <MemManage_Handler+0x4>

08001c7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c7e:	e7fe      	b.n	8001c7e <BusFault_Handler+0x4>

08001c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c84:	e7fe      	b.n	8001c84 <UsageFault_Handler+0x4>

08001c86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb4:	f000 fb24 	bl	8002300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cc0:	4802      	ldr	r0, [pc, #8]	; (8001ccc <TIM1_CC_IRQHandler+0x10>)
 8001cc2:	f003 f873 	bl	8004dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	200001a4 	.word	0x200001a4

08001cd0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001cd4:	4802      	ldr	r0, [pc, #8]	; (8001ce0 <TIM6_DAC_IRQHandler+0x10>)
 8001cd6:	f003 f869 	bl	8004dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	2000023c 	.word	0x2000023c

08001ce4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <SystemInit+0x28>)
 8001cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cee:	4a07      	ldr	r2, [pc, #28]	; (8001d0c <SystemInit+0x28>)
 8001cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <SystemInit+0x28>)
 8001cfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cfe:	609a      	str	r2, [r3, #8]
#endif
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08c      	sub	sp, #48	; 0x30
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001d16:	f107 031c 	add.w	r3, r7, #28
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	60da      	str	r2, [r3, #12]
 8001d24:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d26:	f107 030c 	add.w	r3, r7, #12
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d34:	463b      	mov	r3, r7
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d3e:	4b36      	ldr	r3, [pc, #216]	; (8001e18 <MX_TIM1_Init+0x108>)
 8001d40:	4a36      	ldr	r2, [pc, #216]	; (8001e1c <MX_TIM1_Init+0x10c>)
 8001d42:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 675 - 1;
 8001d44:	4b34      	ldr	r3, [pc, #208]	; (8001e18 <MX_TIM1_Init+0x108>)
 8001d46:	f240 22a2 	movw	r2, #674	; 0x2a2
 8001d4a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4c:	4b32      	ldr	r3, [pc, #200]	; (8001e18 <MX_TIM1_Init+0x108>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d52:	4b31      	ldr	r3, [pc, #196]	; (8001e18 <MX_TIM1_Init+0x108>)
 8001d54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d58:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d5a:	4b2f      	ldr	r3, [pc, #188]	; (8001e18 <MX_TIM1_Init+0x108>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d60:	4b2d      	ldr	r3, [pc, #180]	; (8001e18 <MX_TIM1_Init+0x108>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d66:	4b2c      	ldr	r3, [pc, #176]	; (8001e18 <MX_TIM1_Init+0x108>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001d6c:	482a      	ldr	r0, [pc, #168]	; (8001e18 <MX_TIM1_Init+0x108>)
 8001d6e:	f002 fe76 	bl	8004a5e <HAL_TIM_IC_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001d78:	f7ff fe34 	bl	80019e4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001d7c:	2304      	movs	r3, #4
 8001d7e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001d80:	2350      	movs	r3, #80	; 0x50
 8001d82:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d84:	2300      	movs	r3, #0
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001d90:	f107 031c 	add.w	r3, r7, #28
 8001d94:	4619      	mov	r1, r3
 8001d96:	4820      	ldr	r0, [pc, #128]	; (8001e18 <MX_TIM1_Init+0x108>)
 8001d98:	f003 fad8 	bl	800534c <HAL_TIM_SlaveConfigSynchro>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001da2:	f7ff fe1f 	bl	80019e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001daa:	2301      	movs	r3, #1
 8001dac:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001db6:	f107 030c 	add.w	r3, r7, #12
 8001dba:	2200      	movs	r2, #0
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4816      	ldr	r0, [pc, #88]	; (8001e18 <MX_TIM1_Init+0x108>)
 8001dc0:	f003 f913 	bl	8004fea <HAL_TIM_IC_ConfigChannel>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001dca:	f7ff fe0b 	bl	80019e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001dd6:	f107 030c 	add.w	r3, r7, #12
 8001dda:	2204      	movs	r2, #4
 8001ddc:	4619      	mov	r1, r3
 8001dde:	480e      	ldr	r0, [pc, #56]	; (8001e18 <MX_TIM1_Init+0x108>)
 8001de0:	f003 f903 	bl	8004fea <HAL_TIM_IC_ConfigChannel>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8001dea:	f7ff fdfb 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001df2:	2300      	movs	r3, #0
 8001df4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dfa:	463b      	mov	r3, r7
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4806      	ldr	r0, [pc, #24]	; (8001e18 <MX_TIM1_Init+0x108>)
 8001e00:	f004 f8b2 	bl	8005f68 <HAL_TIMEx_MasterConfigSynchronization>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001e0a:	f7ff fdeb 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e0e:	bf00      	nop
 8001e10:	3730      	adds	r7, #48	; 0x30
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200001a4 	.word	0x200001a4
 8001e1c:	40010000 	.word	0x40010000

08001e20 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e26:	f107 031c 	add.w	r3, r7, #28
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e32:	463b      	mov	r3, r7
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
 8001e40:	615a      	str	r2, [r3, #20]
 8001e42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e44:	4b32      	ldr	r3, [pc, #200]	; (8001f10 <MX_TIM4_Init+0xf0>)
 8001e46:	4a33      	ldr	r2, [pc, #204]	; (8001f14 <MX_TIM4_Init+0xf4>)
 8001e48:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001e4a:	4b31      	ldr	r3, [pc, #196]	; (8001f10 <MX_TIM4_Init+0xf0>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e50:	4b2f      	ldr	r3, [pc, #188]	; (8001f10 <MX_TIM4_Init+0xf0>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001e56:	4b2e      	ldr	r3, [pc, #184]	; (8001f10 <MX_TIM4_Init+0xf0>)
 8001e58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e5c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e5e:	4b2c      	ldr	r3, [pc, #176]	; (8001f10 <MX_TIM4_Init+0xf0>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e64:	4b2a      	ldr	r3, [pc, #168]	; (8001f10 <MX_TIM4_Init+0xf0>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e6a:	4829      	ldr	r0, [pc, #164]	; (8001f10 <MX_TIM4_Init+0xf0>)
 8001e6c:	f002 fda0 	bl	80049b0 <HAL_TIM_PWM_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001e76:	f7ff fdb5 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e82:	f107 031c 	add.w	r3, r7, #28
 8001e86:	4619      	mov	r1, r3
 8001e88:	4821      	ldr	r0, [pc, #132]	; (8001f10 <MX_TIM4_Init+0xf0>)
 8001e8a:	f004 f86d 	bl	8005f68 <HAL_TIMEx_MasterConfigSynchronization>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001e94:	f7ff fda6 	bl	80019e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e98:	2360      	movs	r3, #96	; 0x60
 8001e9a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ea8:	463b      	mov	r3, r7
 8001eaa:	2200      	movs	r2, #0
 8001eac:	4619      	mov	r1, r3
 8001eae:	4818      	ldr	r0, [pc, #96]	; (8001f10 <MX_TIM4_Init+0xf0>)
 8001eb0:	f003 f938 	bl	8005124 <HAL_TIM_PWM_ConfigChannel>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001eba:	f7ff fd93 	bl	80019e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ebe:	463b      	mov	r3, r7
 8001ec0:	2204      	movs	r2, #4
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4812      	ldr	r0, [pc, #72]	; (8001f10 <MX_TIM4_Init+0xf0>)
 8001ec6:	f003 f92d 	bl	8005124 <HAL_TIM_PWM_ConfigChannel>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001ed0:	f7ff fd88 	bl	80019e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ed4:	463b      	mov	r3, r7
 8001ed6:	2208      	movs	r2, #8
 8001ed8:	4619      	mov	r1, r3
 8001eda:	480d      	ldr	r0, [pc, #52]	; (8001f10 <MX_TIM4_Init+0xf0>)
 8001edc:	f003 f922 	bl	8005124 <HAL_TIM_PWM_ConfigChannel>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8001ee6:	f7ff fd7d 	bl	80019e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001eea:	463b      	mov	r3, r7
 8001eec:	220c      	movs	r2, #12
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4807      	ldr	r0, [pc, #28]	; (8001f10 <MX_TIM4_Init+0xf0>)
 8001ef2:	f003 f917 	bl	8005124 <HAL_TIM_PWM_ConfigChannel>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8001efc:	f7ff fd72 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001f00:	4803      	ldr	r0, [pc, #12]	; (8001f10 <MX_TIM4_Init+0xf0>)
 8001f02:	f000 f8d1 	bl	80020a8 <HAL_TIM_MspPostInit>

}
 8001f06:	bf00      	nop
 8001f08:	3728      	adds	r7, #40	; 0x28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200001f0 	.word	0x200001f0
 8001f14:	40000800 	.word	0x40000800

08001f18 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f28:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <MX_TIM6_Init+0x64>)
 8001f2a:	4a15      	ldr	r2, [pc, #84]	; (8001f80 <MX_TIM6_Init+0x68>)
 8001f2c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 27;
 8001f2e:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <MX_TIM6_Init+0x64>)
 8001f30:	221b      	movs	r2, #27
 8001f32:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <MX_TIM6_Init+0x64>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000;
 8001f3a:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <MX_TIM6_Init+0x64>)
 8001f3c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001f40:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f42:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <MX_TIM6_Init+0x64>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f48:	480c      	ldr	r0, [pc, #48]	; (8001f7c <MX_TIM6_Init+0x64>)
 8001f4a:	f002 fbf2 	bl	8004732 <HAL_TIM_Base_Init>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001f54:	f7ff fd46 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f60:	1d3b      	adds	r3, r7, #4
 8001f62:	4619      	mov	r1, r3
 8001f64:	4805      	ldr	r0, [pc, #20]	; (8001f7c <MX_TIM6_Init+0x64>)
 8001f66:	f003 ffff 	bl	8005f68 <HAL_TIMEx_MasterConfigSynchronization>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001f70:	f7ff fd38 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f74:	bf00      	nop
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	2000023c 	.word	0x2000023c
 8001f80:	40001000 	.word	0x40001000

08001f84 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a1b      	ldr	r2, [pc, #108]	; (8002010 <HAL_TIM_IC_MspInit+0x8c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d130      	bne.n	8002008 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fa6:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <HAL_TIM_IC_MspInit+0x90>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	4a1a      	ldr	r2, [pc, #104]	; (8002014 <HAL_TIM_IC_MspInit+0x90>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb2:	4b18      	ldr	r3, [pc, #96]	; (8002014 <HAL_TIM_IC_MspInit+0x90>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_TIM_IC_MspInit+0x90>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a14      	ldr	r2, [pc, #80]	; (8002014 <HAL_TIM_IC_MspInit+0x90>)
 8001fc4:	f043 0310 	orr.w	r3, r3, #16
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_TIM_IC_MspInit+0x90>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 8001fd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4809      	ldr	r0, [pc, #36]	; (8002018 <HAL_TIM_IC_MspInit+0x94>)
 8001ff4:	f001 f808 	bl	8003008 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	201b      	movs	r0, #27
 8001ffe:	f000 ffcc 	bl	8002f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002002:	201b      	movs	r0, #27
 8002004:	f000 ffe5 	bl	8002fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002008:	bf00      	nop
 800200a:	3728      	adds	r7, #40	; 0x28
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40010000 	.word	0x40010000
 8002014:	40023800 	.word	0x40023800
 8002018:	40021000 	.word	0x40021000

0800201c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <HAL_TIM_PWM_MspInit+0x38>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d10b      	bne.n	8002046 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800202e:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <HAL_TIM_PWM_MspInit+0x3c>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	4a09      	ldr	r2, [pc, #36]	; (8002058 <HAL_TIM_PWM_MspInit+0x3c>)
 8002034:	f043 0304 	orr.w	r3, r3, #4
 8002038:	6413      	str	r3, [r2, #64]	; 0x40
 800203a:	4b07      	ldr	r3, [pc, #28]	; (8002058 <HAL_TIM_PWM_MspInit+0x3c>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002046:	bf00      	nop
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40000800 	.word	0x40000800
 8002058:	40023800 	.word	0x40023800

0800205c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a0d      	ldr	r2, [pc, #52]	; (80020a0 <HAL_TIM_Base_MspInit+0x44>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d113      	bne.n	8002096 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800206e:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <HAL_TIM_Base_MspInit+0x48>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	4a0c      	ldr	r2, [pc, #48]	; (80020a4 <HAL_TIM_Base_MspInit+0x48>)
 8002074:	f043 0310 	orr.w	r3, r3, #16
 8002078:	6413      	str	r3, [r2, #64]	; 0x40
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <HAL_TIM_Base_MspInit+0x48>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f003 0310 	and.w	r3, r3, #16
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002086:	2200      	movs	r2, #0
 8002088:	2100      	movs	r1, #0
 800208a:	2036      	movs	r0, #54	; 0x36
 800208c:	f000 ff85 	bl	8002f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002090:	2036      	movs	r0, #54	; 0x36
 8002092:	f000 ff9e 	bl	8002fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40001000 	.word	0x40001000
 80020a4:	40023800 	.word	0x40023800

080020a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 030c 	add.w	r3, r7, #12
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a11      	ldr	r2, [pc, #68]	; (800210c <HAL_TIM_MspPostInit+0x64>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d11c      	bne.n	8002104 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ca:	4b11      	ldr	r3, [pc, #68]	; (8002110 <HAL_TIM_MspPostInit+0x68>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4a10      	ldr	r2, [pc, #64]	; (8002110 <HAL_TIM_MspPostInit+0x68>)
 80020d0:	f043 0308 	orr.w	r3, r3, #8
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <HAL_TIM_MspPostInit+0x68>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin|PWM_HV_Charger_Pin;
 80020e2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80020e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f0:	2300      	movs	r3, #0
 80020f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020f4:	2302      	movs	r3, #2
 80020f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020f8:	f107 030c 	add.w	r3, r7, #12
 80020fc:	4619      	mov	r1, r3
 80020fe:	4805      	ldr	r0, [pc, #20]	; (8002114 <HAL_TIM_MspPostInit+0x6c>)
 8002100:	f000 ff82 	bl	8003008 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002104:	bf00      	nop
 8002106:	3720      	adds	r7, #32
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40000800 	.word	0x40000800
 8002110:	40023800 	.word	0x40023800
 8002114:	40020c00 	.word	0x40020c00

08002118 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800211c:	4b14      	ldr	r3, [pc, #80]	; (8002170 <MX_USART2_UART_Init+0x58>)
 800211e:	4a15      	ldr	r2, [pc, #84]	; (8002174 <MX_USART2_UART_Init+0x5c>)
 8002120:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002122:	4b13      	ldr	r3, [pc, #76]	; (8002170 <MX_USART2_UART_Init+0x58>)
 8002124:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002128:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800212a:	4b11      	ldr	r3, [pc, #68]	; (8002170 <MX_USART2_UART_Init+0x58>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002130:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <MX_USART2_UART_Init+0x58>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002136:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <MX_USART2_UART_Init+0x58>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <MX_USART2_UART_Init+0x58>)
 800213e:	220c      	movs	r2, #12
 8002140:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002142:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <MX_USART2_UART_Init+0x58>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002148:	4b09      	ldr	r3, [pc, #36]	; (8002170 <MX_USART2_UART_Init+0x58>)
 800214a:	2200      	movs	r2, #0
 800214c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <MX_USART2_UART_Init+0x58>)
 8002150:	2200      	movs	r2, #0
 8002152:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <MX_USART2_UART_Init+0x58>)
 8002156:	2200      	movs	r2, #0
 8002158:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800215a:	4805      	ldr	r0, [pc, #20]	; (8002170 <MX_USART2_UART_Init+0x58>)
 800215c:	f003 ffb0 	bl	80060c0 <HAL_UART_Init>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002166:	f7ff fc3d 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000288 	.word	0x20000288
 8002174:	40004400 	.word	0x40004400

08002178 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b0ae      	sub	sp, #184	; 0xb8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	2290      	movs	r2, #144	; 0x90
 8002196:	2100      	movs	r1, #0
 8002198:	4618      	mov	r0, r3
 800219a:	f004 fcab 	bl	8006af4 <memset>
  if(uartHandle->Instance==USART2)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a21      	ldr	r2, [pc, #132]	; (8002228 <HAL_UART_MspInit+0xb0>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d13a      	bne.n	800221e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021ac:	2300      	movs	r3, #0
 80021ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	4618      	mov	r0, r3
 80021b6:	f001 fde9 	bl	8003d8c <HAL_RCCEx_PeriphCLKConfig>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021c0:	f7ff fc10 	bl	80019e4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021c4:	4b19      	ldr	r3, [pc, #100]	; (800222c <HAL_UART_MspInit+0xb4>)
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	4a18      	ldr	r2, [pc, #96]	; (800222c <HAL_UART_MspInit+0xb4>)
 80021ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ce:	6413      	str	r3, [r2, #64]	; 0x40
 80021d0:	4b16      	ldr	r3, [pc, #88]	; (800222c <HAL_UART_MspInit+0xb4>)
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021dc:	4b13      	ldr	r3, [pc, #76]	; (800222c <HAL_UART_MspInit+0xb4>)
 80021de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e0:	4a12      	ldr	r2, [pc, #72]	; (800222c <HAL_UART_MspInit+0xb4>)
 80021e2:	f043 0308 	orr.w	r3, r3, #8
 80021e6:	6313      	str	r3, [r2, #48]	; 0x30
 80021e8:	4b10      	ldr	r3, [pc, #64]	; (800222c <HAL_UART_MspInit+0xb4>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80021f4:	2360      	movs	r3, #96	; 0x60
 80021f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002206:	2303      	movs	r3, #3
 8002208:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800220c:	2307      	movs	r3, #7
 800220e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002212:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002216:	4619      	mov	r1, r3
 8002218:	4805      	ldr	r0, [pc, #20]	; (8002230 <HAL_UART_MspInit+0xb8>)
 800221a:	f000 fef5 	bl	8003008 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800221e:	bf00      	nop
 8002220:	37b8      	adds	r7, #184	; 0xb8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40004400 	.word	0x40004400
 800222c:	40023800 	.word	0x40023800
 8002230:	40020c00 	.word	0x40020c00

08002234 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002234:	f8df d034 	ldr.w	sp, [pc, #52]	; 800226c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002238:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800223a:	e003      	b.n	8002244 <LoopCopyDataInit>

0800223c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800223e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002240:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002242:	3104      	adds	r1, #4

08002244 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002244:	480b      	ldr	r0, [pc, #44]	; (8002274 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002246:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002248:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800224a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800224c:	d3f6      	bcc.n	800223c <CopyDataInit>
  ldr  r2, =_sbss
 800224e:	4a0b      	ldr	r2, [pc, #44]	; (800227c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002250:	e002      	b.n	8002258 <LoopFillZerobss>

08002252 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002252:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002254:	f842 3b04 	str.w	r3, [r2], #4

08002258 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002258:	4b09      	ldr	r3, [pc, #36]	; (8002280 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800225a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800225c:	d3f9      	bcc.n	8002252 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800225e:	f7ff fd41 	bl	8001ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002262:	f004 fc23 	bl	8006aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002266:	f7ff f933 	bl	80014d0 <main>
  bx  lr    
 800226a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800226c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002270:	080070a0 	.word	0x080070a0
  ldr  r0, =_sdata
 8002274:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002278:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800227c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002280:	20000310 	.word	0x20000310

08002284 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002284:	e7fe      	b.n	8002284 <ADC_IRQHandler>

08002286 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800228a:	2003      	movs	r0, #3
 800228c:	f000 fe7a 	bl	8002f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002290:	2000      	movs	r0, #0
 8002292:	f000 f805 	bl	80022a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002296:	f7ff fcbf 	bl	8001c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022a8:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <HAL_InitTick+0x54>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <HAL_InitTick+0x58>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	4619      	mov	r1, r3
 80022b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 fe95 	bl	8002fee <HAL_SYSTICK_Config>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e00e      	b.n	80022ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b0f      	cmp	r3, #15
 80022d2:	d80a      	bhi.n	80022ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022d4:	2200      	movs	r2, #0
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	f04f 30ff 	mov.w	r0, #4294967295
 80022dc:	f000 fe5d 	bl	8002f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022e0:	4a06      	ldr	r2, [pc, #24]	; (80022fc <HAL_InitTick+0x5c>)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	e000      	b.n	80022ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000000 	.word	0x20000000
 80022f8:	20000008 	.word	0x20000008
 80022fc:	20000004 	.word	0x20000004

08002300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_IncTick+0x20>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <HAL_IncTick+0x24>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4413      	add	r3, r2
 8002310:	4a04      	ldr	r2, [pc, #16]	; (8002324 <HAL_IncTick+0x24>)
 8002312:	6013      	str	r3, [r2, #0]
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20000008 	.word	0x20000008
 8002324:	2000030c 	.word	0x2000030c

08002328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return uwTick;
 800232c:	4b03      	ldr	r3, [pc, #12]	; (800233c <HAL_GetTick+0x14>)
 800232e:	681b      	ldr	r3, [r3, #0]
}
 8002330:	4618      	mov	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	2000030c 	.word	0x2000030c

08002340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002348:	f7ff ffee 	bl	8002328 <HAL_GetTick>
 800234c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002358:	d005      	beq.n	8002366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800235a:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <HAL_Delay+0x44>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4413      	add	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002366:	bf00      	nop
 8002368:	f7ff ffde 	bl	8002328 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	429a      	cmp	r2, r3
 8002376:	d8f7      	bhi.n	8002368 <HAL_Delay+0x28>
  {
  }
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000008 	.word	0x20000008

08002388 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 800238c:	4b02      	ldr	r3, [pc, #8]	; (8002398 <HAL_GetHalVersion+0x10>)
}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	01020a00 	.word	0x01020a00

0800239c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 80023a0:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <HAL_GetREVID+0x14>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	0c1b      	lsrs	r3, r3, #16
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e0042000 	.word	0xe0042000

080023b4 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <HAL_GetDEVID+0x18>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e0042000 	.word	0xe0042000

080023d0 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <HAL_GetUIDw0+0x14>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	1ff0f420 	.word	0x1ff0f420

080023e8 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80023ec:	4b03      	ldr	r3, [pc, #12]	; (80023fc <HAL_GetUIDw1+0x14>)
 80023ee:	681b      	ldr	r3, [r3, #0]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	1ff0f424 	.word	0x1ff0f424

08002400 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002404:	4b03      	ldr	r3, [pc, #12]	; (8002414 <HAL_GetUIDw2+0x14>)
 8002406:	681b      	ldr	r3, [r3, #0]
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	1ff0f428 	.word	0x1ff0f428

08002418 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e031      	b.n	8002492 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	2b00      	cmp	r3, #0
 8002434:	d109      	bne.n	800244a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7fe fd7e 	bl	8000f38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f003 0310 	and.w	r3, r3, #16
 8002452:	2b00      	cmp	r3, #0
 8002454:	d116      	bne.n	8002484 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800245a:	4b10      	ldr	r3, [pc, #64]	; (800249c <HAL_ADC_Init+0x84>)
 800245c:	4013      	ands	r3, r2
 800245e:	f043 0202 	orr.w	r2, r3, #2
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f970 	bl	800274c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f023 0303 	bic.w	r3, r3, #3
 800247a:	f043 0201 	orr.w	r2, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	641a      	str	r2, [r3, #64]	; 0x40
 8002482:	e001      	b.n	8002488 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002490:	7bfb      	ldrb	r3, [r7, #15]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	ffffeefd 	.word	0xffffeefd

080024a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x1c>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e136      	b.n	800272a <HAL_ADC_ConfigChannel+0x28a>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b09      	cmp	r3, #9
 80024ca:	d93a      	bls.n	8002542 <HAL_ADC_ConfigChannel+0xa2>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024d4:	d035      	beq.n	8002542 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68d9      	ldr	r1, [r3, #12]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	4613      	mov	r3, r2
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	4413      	add	r3, r2
 80024ea:	3b1e      	subs	r3, #30
 80024ec:	2207      	movs	r2, #7
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43da      	mvns	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	400a      	ands	r2, r1
 80024fa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a8d      	ldr	r2, [pc, #564]	; (8002738 <HAL_ADC_ConfigChannel+0x298>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d10a      	bne.n	800251c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68d9      	ldr	r1, [r3, #12]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	061a      	lsls	r2, r3, #24
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800251a:	e035      	b.n	8002588 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68d9      	ldr	r1, [r3, #12]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	b29b      	uxth	r3, r3
 800252c:	4618      	mov	r0, r3
 800252e:	4603      	mov	r3, r0
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4403      	add	r3, r0
 8002534:	3b1e      	subs	r3, #30
 8002536:	409a      	lsls	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002540:	e022      	b.n	8002588 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6919      	ldr	r1, [r3, #16]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	b29b      	uxth	r3, r3
 800254e:	461a      	mov	r2, r3
 8002550:	4613      	mov	r3, r2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4413      	add	r3, r2
 8002556:	2207      	movs	r2, #7
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43da      	mvns	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	400a      	ands	r2, r1
 8002564:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6919      	ldr	r1, [r3, #16]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	b29b      	uxth	r3, r3
 8002576:	4618      	mov	r0, r3
 8002578:	4603      	mov	r3, r0
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4403      	add	r3, r0
 800257e:	409a      	lsls	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b06      	cmp	r3, #6
 800258e:	d824      	bhi.n	80025da <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	3b05      	subs	r3, #5
 80025a2:	221f      	movs	r2, #31
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43da      	mvns	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	400a      	ands	r2, r1
 80025b0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	4618      	mov	r0, r3
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	3b05      	subs	r3, #5
 80025cc:	fa00 f203 	lsl.w	r2, r0, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	635a      	str	r2, [r3, #52]	; 0x34
 80025d8:	e04c      	b.n	8002674 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b0c      	cmp	r3, #12
 80025e0:	d824      	bhi.n	800262c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	3b23      	subs	r3, #35	; 0x23
 80025f4:	221f      	movs	r2, #31
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43da      	mvns	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	400a      	ands	r2, r1
 8002602:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	4618      	mov	r0, r3
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	3b23      	subs	r3, #35	; 0x23
 800261e:	fa00 f203 	lsl.w	r2, r0, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	631a      	str	r2, [r3, #48]	; 0x30
 800262a:	e023      	b.n	8002674 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	3b41      	subs	r3, #65	; 0x41
 800263e:	221f      	movs	r2, #31
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43da      	mvns	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	400a      	ands	r2, r1
 800264c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	b29b      	uxth	r3, r3
 800265a:	4618      	mov	r0, r3
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	3b41      	subs	r3, #65	; 0x41
 8002668:	fa00 f203 	lsl.w	r2, r0, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a30      	ldr	r2, [pc, #192]	; (800273c <HAL_ADC_ConfigChannel+0x29c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d10a      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x1f4>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002686:	d105      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002688:	4b2d      	ldr	r3, [pc, #180]	; (8002740 <HAL_ADC_ConfigChannel+0x2a0>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	4a2c      	ldr	r2, [pc, #176]	; (8002740 <HAL_ADC_ConfigChannel+0x2a0>)
 800268e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002692:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a28      	ldr	r2, [pc, #160]	; (800273c <HAL_ADC_ConfigChannel+0x29c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d10f      	bne.n	80026be <HAL_ADC_ConfigChannel+0x21e>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2b12      	cmp	r3, #18
 80026a4:	d10b      	bne.n	80026be <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80026a6:	4b26      	ldr	r3, [pc, #152]	; (8002740 <HAL_ADC_ConfigChannel+0x2a0>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	4a25      	ldr	r2, [pc, #148]	; (8002740 <HAL_ADC_ConfigChannel+0x2a0>)
 80026ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80026b0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80026b2:	4b23      	ldr	r3, [pc, #140]	; (8002740 <HAL_ADC_ConfigChannel+0x2a0>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	4a22      	ldr	r2, [pc, #136]	; (8002740 <HAL_ADC_ConfigChannel+0x2a0>)
 80026b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026bc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a1e      	ldr	r2, [pc, #120]	; (800273c <HAL_ADC_ConfigChannel+0x29c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d12b      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x280>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a1a      	ldr	r2, [pc, #104]	; (8002738 <HAL_ADC_ConfigChannel+0x298>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d003      	beq.n	80026da <HAL_ADC_ConfigChannel+0x23a>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b11      	cmp	r3, #17
 80026d8:	d122      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80026da:	4b19      	ldr	r3, [pc, #100]	; (8002740 <HAL_ADC_ConfigChannel+0x2a0>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	4a18      	ldr	r2, [pc, #96]	; (8002740 <HAL_ADC_ConfigChannel+0x2a0>)
 80026e0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80026e4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80026e6:	4b16      	ldr	r3, [pc, #88]	; (8002740 <HAL_ADC_ConfigChannel+0x2a0>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	4a15      	ldr	r2, [pc, #84]	; (8002740 <HAL_ADC_ConfigChannel+0x2a0>)
 80026ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026f0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a10      	ldr	r2, [pc, #64]	; (8002738 <HAL_ADC_ConfigChannel+0x298>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d111      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80026fc:	4b11      	ldr	r3, [pc, #68]	; (8002744 <HAL_ADC_ConfigChannel+0x2a4>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a11      	ldr	r2, [pc, #68]	; (8002748 <HAL_ADC_ConfigChannel+0x2a8>)
 8002702:	fba2 2303 	umull	r2, r3, r2, r3
 8002706:	0c9a      	lsrs	r2, r3, #18
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002712:	e002      	b.n	800271a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	3b01      	subs	r3, #1
 8002718:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f9      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	10000012 	.word	0x10000012
 800273c:	40012000 	.word	0x40012000
 8002740:	40012300 	.word	0x40012300
 8002744:	20000000 	.word	0x20000000
 8002748:	431bde83 	.word	0x431bde83

0800274c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002754:	4b78      	ldr	r3, [pc, #480]	; (8002938 <ADC_Init+0x1ec>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	4a77      	ldr	r2, [pc, #476]	; (8002938 <ADC_Init+0x1ec>)
 800275a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800275e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002760:	4b75      	ldr	r3, [pc, #468]	; (8002938 <ADC_Init+0x1ec>)
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	4973      	ldr	r1, [pc, #460]	; (8002938 <ADC_Init+0x1ec>)
 800276a:	4313      	orrs	r3, r2
 800276c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800277c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6859      	ldr	r1, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	021a      	lsls	r2, r3, #8
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80027a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6859      	ldr	r1, [r3, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6899      	ldr	r1, [r3, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027da:	4a58      	ldr	r2, [pc, #352]	; (800293c <ADC_Init+0x1f0>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d022      	beq.n	8002826 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6899      	ldr	r1, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002810:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6899      	ldr	r1, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	e00f      	b.n	8002846 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002834:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002844:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0202 	bic.w	r2, r2, #2
 8002854:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6899      	ldr	r1, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	005a      	lsls	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d01b      	beq.n	80028ac <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002882:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002892:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6859      	ldr	r1, [r3, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	3b01      	subs	r3, #1
 80028a0:	035a      	lsls	r2, r3, #13
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	e007      	b.n	80028bc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80028ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	051a      	lsls	r2, r3, #20
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6899      	ldr	r1, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028fe:	025a      	lsls	r2, r3, #9
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002916:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6899      	ldr	r1, [r3, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	029a      	lsls	r2, r3, #10
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	609a      	str	r2, [r3, #8]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	40012300 	.word	0x40012300
 800293c:	0f000001 	.word	0x0f000001

08002940 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e0ed      	b.n	8002b2e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d102      	bne.n	8002964 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7fe fb96 	bl	8001090 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002974:	f7ff fcd8 	bl	8002328 <HAL_GetTick>
 8002978:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800297a:	e012      	b.n	80029a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800297c:	f7ff fcd4 	bl	8002328 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b0a      	cmp	r3, #10
 8002988:	d90b      	bls.n	80029a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2205      	movs	r2, #5
 800299a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e0c5      	b.n	8002b2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0e5      	beq.n	800297c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0202 	bic.w	r2, r2, #2
 80029be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029c0:	f7ff fcb2 	bl	8002328 <HAL_GetTick>
 80029c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80029c6:	e012      	b.n	80029ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029c8:	f7ff fcae 	bl	8002328 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b0a      	cmp	r3, #10
 80029d4:	d90b      	bls.n	80029ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2205      	movs	r2, #5
 80029e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e09f      	b.n	8002b2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1e5      	bne.n	80029c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	7e1b      	ldrb	r3, [r3, #24]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d108      	bne.n	8002a16 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	e007      	b.n	8002a26 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	7e5b      	ldrb	r3, [r3, #25]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d108      	bne.n	8002a40 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	e007      	b.n	8002a50 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	7e9b      	ldrb	r3, [r3, #26]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d108      	bne.n	8002a6a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0220 	orr.w	r2, r2, #32
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	e007      	b.n	8002a7a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0220 	bic.w	r2, r2, #32
 8002a78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	7edb      	ldrb	r3, [r3, #27]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d108      	bne.n	8002a94 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0210 	bic.w	r2, r2, #16
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	e007      	b.n	8002aa4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0210 	orr.w	r2, r2, #16
 8002aa2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	7f1b      	ldrb	r3, [r3, #28]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d108      	bne.n	8002abe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0208 	orr.w	r2, r2, #8
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	e007      	b.n	8002ace <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0208 	bic.w	r2, r2, #8
 8002acc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	7f5b      	ldrb	r3, [r3, #29]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d108      	bne.n	8002ae8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f042 0204 	orr.w	r2, r2, #4
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	e007      	b.n	8002af8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0204 	bic.w	r2, r2, #4
 8002af6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	ea42 0103 	orr.w	r1, r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	1e5a      	subs	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b087      	sub	sp, #28
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b4e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002b50:	7cfb      	ldrb	r3, [r7, #19]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d003      	beq.n	8002b5e <HAL_CAN_ConfigFilter+0x26>
 8002b56:	7cfb      	ldrb	r3, [r7, #19]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	f040 80c7 	bne.w	8002cec <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a69      	ldr	r2, [pc, #420]	; (8002d08 <HAL_CAN_ConfigFilter+0x1d0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d001      	beq.n	8002b6c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002b68:	4b68      	ldr	r3, [pc, #416]	; (8002d0c <HAL_CAN_ConfigFilter+0x1d4>)
 8002b6a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b72:	f043 0201 	orr.w	r2, r3, #1
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	4a63      	ldr	r2, [pc, #396]	; (8002d0c <HAL_CAN_ConfigFilter+0x1d4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d111      	bne.n	8002ba8 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b8a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	021b      	lsls	r3, r3, #8
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	f003 031f 	and.w	r3, r3, #31
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	401a      	ands	r2, r3
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d123      	bne.n	8002c1a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	401a      	ands	r2, r3
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002bf4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	3248      	adds	r2, #72	; 0x48
 8002bfa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c0e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c10:	6979      	ldr	r1, [r7, #20]
 8002c12:	3348      	adds	r3, #72	; 0x48
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	440b      	add	r3, r1
 8002c18:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d122      	bne.n	8002c68 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c42:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	3248      	adds	r2, #72	; 0x48
 8002c48:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c5c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c5e:	6979      	ldr	r1, [r7, #20]
 8002c60:	3348      	adds	r3, #72	; 0x48
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	440b      	add	r3, r1
 8002c66:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d109      	bne.n	8002c84 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002c82:	e007      	b.n	8002c94 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d109      	bne.n	8002cb0 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	401a      	ands	r2, r3
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002cae:	e007      	b.n	8002cc0 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d107      	bne.n	8002cd8 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002cde:	f023 0201 	bic.w	r2, r3, #1
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	e006      	b.n	8002cfa <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
  }
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	371c      	adds	r7, #28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40003400 	.word	0x40003400
 8002d0c:	40006400 	.word	0x40006400

08002d10 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d12e      	bne.n	8002d82 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0201 	bic.w	r2, r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d3c:	f7ff faf4 	bl	8002328 <HAL_GetTick>
 8002d40:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d42:	e012      	b.n	8002d6a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d44:	f7ff faf0 	bl	8002328 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b0a      	cmp	r3, #10
 8002d50:	d90b      	bls.n	8002d6a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2205      	movs	r2, #5
 8002d62:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e012      	b.n	8002d90 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1e5      	bne.n	8002d44 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	e006      	b.n	8002d90 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
  }
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002da8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d002      	beq.n	8002db6 <HAL_CAN_ActivateNotification+0x1e>
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d109      	bne.n	8002dca <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6959      	ldr	r1, [r3, #20]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	e006      	b.n	8002dd8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
  }
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002df4:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <__NVIC_SetPriorityGrouping+0x40>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e00:	4013      	ands	r3, r2
 8002e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <__NVIC_SetPriorityGrouping+0x44>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e12:	4a04      	ldr	r2, [pc, #16]	; (8002e24 <__NVIC_SetPriorityGrouping+0x40>)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	60d3      	str	r3, [r2, #12]
}
 8002e18:	bf00      	nop
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	e000ed00 	.word	0xe000ed00
 8002e28:	05fa0000 	.word	0x05fa0000

08002e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e30:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <__NVIC_GetPriorityGrouping+0x18>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	0a1b      	lsrs	r3, r3, #8
 8002e36:	f003 0307 	and.w	r3, r3, #7
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	db0b      	blt.n	8002e72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	f003 021f 	and.w	r2, r3, #31
 8002e60:	4907      	ldr	r1, [pc, #28]	; (8002e80 <__NVIC_EnableIRQ+0x38>)
 8002e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	2001      	movs	r0, #1
 8002e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	e000e100 	.word	0xe000e100

08002e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	6039      	str	r1, [r7, #0]
 8002e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	db0a      	blt.n	8002eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	490c      	ldr	r1, [pc, #48]	; (8002ed0 <__NVIC_SetPriority+0x4c>)
 8002e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea2:	0112      	lsls	r2, r2, #4
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eac:	e00a      	b.n	8002ec4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	4908      	ldr	r1, [pc, #32]	; (8002ed4 <__NVIC_SetPriority+0x50>)
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	3b04      	subs	r3, #4
 8002ebc:	0112      	lsls	r2, r2, #4
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	761a      	strb	r2, [r3, #24]
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	e000e100 	.word	0xe000e100
 8002ed4:	e000ed00 	.word	0xe000ed00

08002ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b089      	sub	sp, #36	; 0x24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f1c3 0307 	rsb	r3, r3, #7
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	bf28      	it	cs
 8002ef6:	2304      	movcs	r3, #4
 8002ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	3304      	adds	r3, #4
 8002efe:	2b06      	cmp	r3, #6
 8002f00:	d902      	bls.n	8002f08 <NVIC_EncodePriority+0x30>
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	3b03      	subs	r3, #3
 8002f06:	e000      	b.n	8002f0a <NVIC_EncodePriority+0x32>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43da      	mvns	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	401a      	ands	r2, r3
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f20:	f04f 31ff 	mov.w	r1, #4294967295
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2a:	43d9      	mvns	r1, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f30:	4313      	orrs	r3, r2
         );
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3724      	adds	r7, #36	; 0x24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
	...

08002f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f50:	d301      	bcc.n	8002f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f52:	2301      	movs	r3, #1
 8002f54:	e00f      	b.n	8002f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f56:	4a0a      	ldr	r2, [pc, #40]	; (8002f80 <SysTick_Config+0x40>)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f5e:	210f      	movs	r1, #15
 8002f60:	f04f 30ff 	mov.w	r0, #4294967295
 8002f64:	f7ff ff8e 	bl	8002e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f68:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <SysTick_Config+0x40>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f6e:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <SysTick_Config+0x40>)
 8002f70:	2207      	movs	r2, #7
 8002f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	e000e010 	.word	0xe000e010

08002f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff ff29 	bl	8002de4 <__NVIC_SetPriorityGrouping>
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b086      	sub	sp, #24
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	607a      	str	r2, [r7, #4]
 8002fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fac:	f7ff ff3e 	bl	8002e2c <__NVIC_GetPriorityGrouping>
 8002fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	6978      	ldr	r0, [r7, #20]
 8002fb8:	f7ff ff8e 	bl	8002ed8 <NVIC_EncodePriority>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff5d 	bl	8002e84 <__NVIC_SetPriority>
}
 8002fca:	bf00      	nop
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	4603      	mov	r3, r0
 8002fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff ff31 	bl	8002e48 <__NVIC_EnableIRQ>
}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b082      	sub	sp, #8
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff ffa2 	bl	8002f40 <SysTick_Config>
 8002ffc:	4603      	mov	r3, r0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003008:	b480      	push	{r7}
 800300a:	b089      	sub	sp, #36	; 0x24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003012:	2300      	movs	r3, #0
 8003014:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800301e:	2300      	movs	r3, #0
 8003020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003022:	2300      	movs	r3, #0
 8003024:	61fb      	str	r3, [r7, #28]
 8003026:	e175      	b.n	8003314 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003028:	2201      	movs	r2, #1
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4013      	ands	r3, r2
 800303a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	429a      	cmp	r2, r3
 8003042:	f040 8164 	bne.w	800330e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	2b01      	cmp	r3, #1
 8003050:	d005      	beq.n	800305e <HAL_GPIO_Init+0x56>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d130      	bne.n	80030c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	2203      	movs	r2, #3
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	43db      	mvns	r3, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4013      	ands	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003094:	2201      	movs	r2, #1
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	f003 0201 	and.w	r2, r3, #1
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d017      	beq.n	80030fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	2203      	movs	r2, #3
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d123      	bne.n	8003150 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	08da      	lsrs	r2, r3, #3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3208      	adds	r2, #8
 8003110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	220f      	movs	r2, #15
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	08da      	lsrs	r2, r3, #3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3208      	adds	r2, #8
 800314a:	69b9      	ldr	r1, [r7, #24]
 800314c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	2203      	movs	r2, #3
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 0203 	and.w	r2, r3, #3
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80be 	beq.w	800330e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003192:	4b66      	ldr	r3, [pc, #408]	; (800332c <HAL_GPIO_Init+0x324>)
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	4a65      	ldr	r2, [pc, #404]	; (800332c <HAL_GPIO_Init+0x324>)
 8003198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800319c:	6453      	str	r3, [r2, #68]	; 0x44
 800319e:	4b63      	ldr	r3, [pc, #396]	; (800332c <HAL_GPIO_Init+0x324>)
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80031aa:	4a61      	ldr	r2, [pc, #388]	; (8003330 <HAL_GPIO_Init+0x328>)
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	089b      	lsrs	r3, r3, #2
 80031b0:	3302      	adds	r3, #2
 80031b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	220f      	movs	r2, #15
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43db      	mvns	r3, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4013      	ands	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a58      	ldr	r2, [pc, #352]	; (8003334 <HAL_GPIO_Init+0x32c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d037      	beq.n	8003246 <HAL_GPIO_Init+0x23e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a57      	ldr	r2, [pc, #348]	; (8003338 <HAL_GPIO_Init+0x330>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d031      	beq.n	8003242 <HAL_GPIO_Init+0x23a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a56      	ldr	r2, [pc, #344]	; (800333c <HAL_GPIO_Init+0x334>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d02b      	beq.n	800323e <HAL_GPIO_Init+0x236>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a55      	ldr	r2, [pc, #340]	; (8003340 <HAL_GPIO_Init+0x338>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d025      	beq.n	800323a <HAL_GPIO_Init+0x232>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a54      	ldr	r2, [pc, #336]	; (8003344 <HAL_GPIO_Init+0x33c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d01f      	beq.n	8003236 <HAL_GPIO_Init+0x22e>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a53      	ldr	r2, [pc, #332]	; (8003348 <HAL_GPIO_Init+0x340>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d019      	beq.n	8003232 <HAL_GPIO_Init+0x22a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a52      	ldr	r2, [pc, #328]	; (800334c <HAL_GPIO_Init+0x344>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d013      	beq.n	800322e <HAL_GPIO_Init+0x226>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a51      	ldr	r2, [pc, #324]	; (8003350 <HAL_GPIO_Init+0x348>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00d      	beq.n	800322a <HAL_GPIO_Init+0x222>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a50      	ldr	r2, [pc, #320]	; (8003354 <HAL_GPIO_Init+0x34c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d007      	beq.n	8003226 <HAL_GPIO_Init+0x21e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a4f      	ldr	r2, [pc, #316]	; (8003358 <HAL_GPIO_Init+0x350>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d101      	bne.n	8003222 <HAL_GPIO_Init+0x21a>
 800321e:	2309      	movs	r3, #9
 8003220:	e012      	b.n	8003248 <HAL_GPIO_Init+0x240>
 8003222:	230a      	movs	r3, #10
 8003224:	e010      	b.n	8003248 <HAL_GPIO_Init+0x240>
 8003226:	2308      	movs	r3, #8
 8003228:	e00e      	b.n	8003248 <HAL_GPIO_Init+0x240>
 800322a:	2307      	movs	r3, #7
 800322c:	e00c      	b.n	8003248 <HAL_GPIO_Init+0x240>
 800322e:	2306      	movs	r3, #6
 8003230:	e00a      	b.n	8003248 <HAL_GPIO_Init+0x240>
 8003232:	2305      	movs	r3, #5
 8003234:	e008      	b.n	8003248 <HAL_GPIO_Init+0x240>
 8003236:	2304      	movs	r3, #4
 8003238:	e006      	b.n	8003248 <HAL_GPIO_Init+0x240>
 800323a:	2303      	movs	r3, #3
 800323c:	e004      	b.n	8003248 <HAL_GPIO_Init+0x240>
 800323e:	2302      	movs	r3, #2
 8003240:	e002      	b.n	8003248 <HAL_GPIO_Init+0x240>
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <HAL_GPIO_Init+0x240>
 8003246:	2300      	movs	r3, #0
 8003248:	69fa      	ldr	r2, [r7, #28]
 800324a:	f002 0203 	and.w	r2, r2, #3
 800324e:	0092      	lsls	r2, r2, #2
 8003250:	4093      	lsls	r3, r2
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4313      	orrs	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003258:	4935      	ldr	r1, [pc, #212]	; (8003330 <HAL_GPIO_Init+0x328>)
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	089b      	lsrs	r3, r3, #2
 800325e:	3302      	adds	r3, #2
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003266:	4b3d      	ldr	r3, [pc, #244]	; (800335c <HAL_GPIO_Init+0x354>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	43db      	mvns	r3, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4013      	ands	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800328a:	4a34      	ldr	r2, [pc, #208]	; (800335c <HAL_GPIO_Init+0x354>)
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003290:	4b32      	ldr	r3, [pc, #200]	; (800335c <HAL_GPIO_Init+0x354>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	43db      	mvns	r3, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4013      	ands	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032b4:	4a29      	ldr	r2, [pc, #164]	; (800335c <HAL_GPIO_Init+0x354>)
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032ba:	4b28      	ldr	r3, [pc, #160]	; (800335c <HAL_GPIO_Init+0x354>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	43db      	mvns	r3, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4013      	ands	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4313      	orrs	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032de:	4a1f      	ldr	r2, [pc, #124]	; (800335c <HAL_GPIO_Init+0x354>)
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032e4:	4b1d      	ldr	r3, [pc, #116]	; (800335c <HAL_GPIO_Init+0x354>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	43db      	mvns	r3, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4013      	ands	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	4313      	orrs	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003308:	4a14      	ldr	r2, [pc, #80]	; (800335c <HAL_GPIO_Init+0x354>)
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	3301      	adds	r3, #1
 8003312:	61fb      	str	r3, [r7, #28]
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	2b0f      	cmp	r3, #15
 8003318:	f67f ae86 	bls.w	8003028 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800331c:	bf00      	nop
 800331e:	bf00      	nop
 8003320:	3724      	adds	r7, #36	; 0x24
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40023800 	.word	0x40023800
 8003330:	40013800 	.word	0x40013800
 8003334:	40020000 	.word	0x40020000
 8003338:	40020400 	.word	0x40020400
 800333c:	40020800 	.word	0x40020800
 8003340:	40020c00 	.word	0x40020c00
 8003344:	40021000 	.word	0x40021000
 8003348:	40021400 	.word	0x40021400
 800334c:	40021800 	.word	0x40021800
 8003350:	40021c00 	.word	0x40021c00
 8003354:	40022000 	.word	0x40022000
 8003358:	40022400 	.word	0x40022400
 800335c:	40013c00 	.word	0x40013c00

08003360 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	887b      	ldrh	r3, [r7, #2]
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003378:	2301      	movs	r3, #1
 800337a:	73fb      	strb	r3, [r7, #15]
 800337c:	e001      	b.n	8003382 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800337e:	2300      	movs	r3, #0
 8003380:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003382:	7bfb      	ldrb	r3, [r7, #15]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	807b      	strh	r3, [r7, #2]
 800339c:	4613      	mov	r3, r2
 800339e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033a0:	787b      	ldrb	r3, [r7, #1]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033a6:	887a      	ldrh	r2, [r7, #2]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80033ac:	e003      	b.n	80033b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80033ae:	887b      	ldrh	r3, [r7, #2]
 80033b0:	041a      	lsls	r2, r3, #16
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	619a      	str	r2, [r3, #24]
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
	...

080033c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80033ce:	4b23      	ldr	r3, [pc, #140]	; (800345c <HAL_PWREx_EnableOverDrive+0x98>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	4a22      	ldr	r2, [pc, #136]	; (800345c <HAL_PWREx_EnableOverDrive+0x98>)
 80033d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d8:	6413      	str	r3, [r2, #64]	; 0x40
 80033da:	4b20      	ldr	r3, [pc, #128]	; (800345c <HAL_PWREx_EnableOverDrive+0x98>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e2:	603b      	str	r3, [r7, #0]
 80033e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80033e6:	4b1e      	ldr	r3, [pc, #120]	; (8003460 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a1d      	ldr	r2, [pc, #116]	; (8003460 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033f2:	f7fe ff99 	bl	8002328 <HAL_GetTick>
 80033f6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033f8:	e009      	b.n	800340e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033fa:	f7fe ff95 	bl	8002328 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003408:	d901      	bls.n	800340e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e022      	b.n	8003454 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800340e:	4b14      	ldr	r3, [pc, #80]	; (8003460 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800341a:	d1ee      	bne.n	80033fa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800341c:	4b10      	ldr	r3, [pc, #64]	; (8003460 <HAL_PWREx_EnableOverDrive+0x9c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a0f      	ldr	r2, [pc, #60]	; (8003460 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003426:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003428:	f7fe ff7e 	bl	8002328 <HAL_GetTick>
 800342c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800342e:	e009      	b.n	8003444 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003430:	f7fe ff7a 	bl	8002328 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800343e:	d901      	bls.n	8003444 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e007      	b.n	8003454 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003444:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003450:	d1ee      	bne.n	8003430 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40023800 	.word	0x40023800
 8003460:	40007000 	.word	0x40007000

08003464 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800346c:	2300      	movs	r3, #0
 800346e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e29b      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 8087 	beq.w	8003596 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003488:	4b96      	ldr	r3, [pc, #600]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 030c 	and.w	r3, r3, #12
 8003490:	2b04      	cmp	r3, #4
 8003492:	d00c      	beq.n	80034ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003494:	4b93      	ldr	r3, [pc, #588]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 030c 	and.w	r3, r3, #12
 800349c:	2b08      	cmp	r3, #8
 800349e:	d112      	bne.n	80034c6 <HAL_RCC_OscConfig+0x62>
 80034a0:	4b90      	ldr	r3, [pc, #576]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034ac:	d10b      	bne.n	80034c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ae:	4b8d      	ldr	r3, [pc, #564]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d06c      	beq.n	8003594 <HAL_RCC_OscConfig+0x130>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d168      	bne.n	8003594 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e275      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ce:	d106      	bne.n	80034de <HAL_RCC_OscConfig+0x7a>
 80034d0:	4b84      	ldr	r3, [pc, #528]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a83      	ldr	r2, [pc, #524]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80034d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	e02e      	b.n	800353c <HAL_RCC_OscConfig+0xd8>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10c      	bne.n	8003500 <HAL_RCC_OscConfig+0x9c>
 80034e6:	4b7f      	ldr	r3, [pc, #508]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a7e      	ldr	r2, [pc, #504]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80034ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	4b7c      	ldr	r3, [pc, #496]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a7b      	ldr	r2, [pc, #492]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80034f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	e01d      	b.n	800353c <HAL_RCC_OscConfig+0xd8>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003508:	d10c      	bne.n	8003524 <HAL_RCC_OscConfig+0xc0>
 800350a:	4b76      	ldr	r3, [pc, #472]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a75      	ldr	r2, [pc, #468]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 8003510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	4b73      	ldr	r3, [pc, #460]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a72      	ldr	r2, [pc, #456]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 800351c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	e00b      	b.n	800353c <HAL_RCC_OscConfig+0xd8>
 8003524:	4b6f      	ldr	r3, [pc, #444]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a6e      	ldr	r2, [pc, #440]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 800352a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	4b6c      	ldr	r3, [pc, #432]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a6b      	ldr	r2, [pc, #428]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 8003536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800353a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d013      	beq.n	800356c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7fe fef0 	bl	8002328 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800354c:	f7fe feec 	bl	8002328 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b64      	cmp	r3, #100	; 0x64
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e229      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355e:	4b61      	ldr	r3, [pc, #388]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0xe8>
 800356a:	e014      	b.n	8003596 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7fe fedc 	bl	8002328 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003574:	f7fe fed8 	bl	8002328 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b64      	cmp	r3, #100	; 0x64
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e215      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003586:	4b57      	ldr	r3, [pc, #348]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0x110>
 8003592:	e000      	b.n	8003596 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d069      	beq.n	8003676 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035a2:	4b50      	ldr	r3, [pc, #320]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00b      	beq.n	80035c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ae:	4b4d      	ldr	r3, [pc, #308]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d11c      	bne.n	80035f4 <HAL_RCC_OscConfig+0x190>
 80035ba:	4b4a      	ldr	r3, [pc, #296]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d116      	bne.n	80035f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c6:	4b47      	ldr	r3, [pc, #284]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d005      	beq.n	80035de <HAL_RCC_OscConfig+0x17a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d001      	beq.n	80035de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e1e9      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035de:	4b41      	ldr	r3, [pc, #260]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	493d      	ldr	r1, [pc, #244]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035f2:	e040      	b.n	8003676 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d023      	beq.n	8003644 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035fc:	4b39      	ldr	r3, [pc, #228]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a38      	ldr	r2, [pc, #224]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 8003602:	f043 0301 	orr.w	r3, r3, #1
 8003606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003608:	f7fe fe8e 	bl	8002328 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003610:	f7fe fe8a 	bl	8002328 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e1c7      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003622:	4b30      	ldr	r3, [pc, #192]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0f0      	beq.n	8003610 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362e:	4b2d      	ldr	r3, [pc, #180]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	4929      	ldr	r1, [pc, #164]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]
 8003642:	e018      	b.n	8003676 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003644:	4b27      	ldr	r3, [pc, #156]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a26      	ldr	r2, [pc, #152]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 800364a:	f023 0301 	bic.w	r3, r3, #1
 800364e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003650:	f7fe fe6a 	bl	8002328 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003658:	f7fe fe66 	bl	8002328 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e1a3      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366a:	4b1e      	ldr	r3, [pc, #120]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d038      	beq.n	80036f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d019      	beq.n	80036be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800368a:	4b16      	ldr	r3, [pc, #88]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 800368c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800368e:	4a15      	ldr	r2, [pc, #84]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003696:	f7fe fe47 	bl	8002328 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800369e:	f7fe fe43 	bl	8002328 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e180      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b0:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80036b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0f0      	beq.n	800369e <HAL_RCC_OscConfig+0x23a>
 80036bc:	e01a      	b.n	80036f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036be:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80036c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c2:	4a08      	ldr	r2, [pc, #32]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80036c4:	f023 0301 	bic.w	r3, r3, #1
 80036c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ca:	f7fe fe2d 	bl	8002328 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d0:	e00a      	b.n	80036e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d2:	f7fe fe29 	bl	8002328 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d903      	bls.n	80036e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e166      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
 80036e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e8:	4b92      	ldr	r3, [pc, #584]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 80036ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1ee      	bne.n	80036d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 80a4 	beq.w	800384a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003702:	4b8c      	ldr	r3, [pc, #560]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10d      	bne.n	800372a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800370e:	4b89      	ldr	r3, [pc, #548]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	4a88      	ldr	r2, [pc, #544]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003718:	6413      	str	r3, [r2, #64]	; 0x40
 800371a:	4b86      	ldr	r3, [pc, #536]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003722:	60bb      	str	r3, [r7, #8]
 8003724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003726:	2301      	movs	r3, #1
 8003728:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800372a:	4b83      	ldr	r3, [pc, #524]	; (8003938 <HAL_RCC_OscConfig+0x4d4>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003732:	2b00      	cmp	r3, #0
 8003734:	d118      	bne.n	8003768 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003736:	4b80      	ldr	r3, [pc, #512]	; (8003938 <HAL_RCC_OscConfig+0x4d4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a7f      	ldr	r2, [pc, #508]	; (8003938 <HAL_RCC_OscConfig+0x4d4>)
 800373c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003742:	f7fe fdf1 	bl	8002328 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800374a:	f7fe fded 	bl	8002328 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b64      	cmp	r3, #100	; 0x64
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e12a      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800375c:	4b76      	ldr	r3, [pc, #472]	; (8003938 <HAL_RCC_OscConfig+0x4d4>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0f0      	beq.n	800374a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d106      	bne.n	800377e <HAL_RCC_OscConfig+0x31a>
 8003770:	4b70      	ldr	r3, [pc, #448]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003774:	4a6f      	ldr	r2, [pc, #444]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	6713      	str	r3, [r2, #112]	; 0x70
 800377c:	e02d      	b.n	80037da <HAL_RCC_OscConfig+0x376>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10c      	bne.n	80037a0 <HAL_RCC_OscConfig+0x33c>
 8003786:	4b6b      	ldr	r3, [pc, #428]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378a:	4a6a      	ldr	r2, [pc, #424]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 800378c:	f023 0301 	bic.w	r3, r3, #1
 8003790:	6713      	str	r3, [r2, #112]	; 0x70
 8003792:	4b68      	ldr	r3, [pc, #416]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003796:	4a67      	ldr	r2, [pc, #412]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003798:	f023 0304 	bic.w	r3, r3, #4
 800379c:	6713      	str	r3, [r2, #112]	; 0x70
 800379e:	e01c      	b.n	80037da <HAL_RCC_OscConfig+0x376>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	2b05      	cmp	r3, #5
 80037a6:	d10c      	bne.n	80037c2 <HAL_RCC_OscConfig+0x35e>
 80037a8:	4b62      	ldr	r3, [pc, #392]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 80037aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ac:	4a61      	ldr	r2, [pc, #388]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 80037ae:	f043 0304 	orr.w	r3, r3, #4
 80037b2:	6713      	str	r3, [r2, #112]	; 0x70
 80037b4:	4b5f      	ldr	r3, [pc, #380]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 80037b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b8:	4a5e      	ldr	r2, [pc, #376]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	6713      	str	r3, [r2, #112]	; 0x70
 80037c0:	e00b      	b.n	80037da <HAL_RCC_OscConfig+0x376>
 80037c2:	4b5c      	ldr	r3, [pc, #368]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 80037c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c6:	4a5b      	ldr	r2, [pc, #364]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 80037c8:	f023 0301 	bic.w	r3, r3, #1
 80037cc:	6713      	str	r3, [r2, #112]	; 0x70
 80037ce:	4b59      	ldr	r3, [pc, #356]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 80037d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d2:	4a58      	ldr	r2, [pc, #352]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 80037d4:	f023 0304 	bic.w	r3, r3, #4
 80037d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d015      	beq.n	800380e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e2:	f7fe fda1 	bl	8002328 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e8:	e00a      	b.n	8003800 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ea:	f7fe fd9d 	bl	8002328 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e0d8      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003800:	4b4c      	ldr	r3, [pc, #304]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0ee      	beq.n	80037ea <HAL_RCC_OscConfig+0x386>
 800380c:	e014      	b.n	8003838 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380e:	f7fe fd8b 	bl	8002328 <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003814:	e00a      	b.n	800382c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003816:	f7fe fd87 	bl	8002328 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	f241 3288 	movw	r2, #5000	; 0x1388
 8003824:	4293      	cmp	r3, r2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e0c2      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800382c:	4b41      	ldr	r3, [pc, #260]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 800382e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1ee      	bne.n	8003816 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003838:	7dfb      	ldrb	r3, [r7, #23]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d105      	bne.n	800384a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800383e:	4b3d      	ldr	r3, [pc, #244]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	4a3c      	ldr	r2, [pc, #240]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003848:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 80ae 	beq.w	80039b0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003854:	4b37      	ldr	r3, [pc, #220]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f003 030c 	and.w	r3, r3, #12
 800385c:	2b08      	cmp	r3, #8
 800385e:	d06d      	beq.n	800393c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	2b02      	cmp	r3, #2
 8003866:	d14b      	bne.n	8003900 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003868:	4b32      	ldr	r3, [pc, #200]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a31      	ldr	r2, [pc, #196]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 800386e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003874:	f7fe fd58 	bl	8002328 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387c:	f7fe fd54 	bl	8002328 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e091      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388e:	4b29      	ldr	r3, [pc, #164]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f0      	bne.n	800387c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69da      	ldr	r2, [r3, #28]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	019b      	lsls	r3, r3, #6
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b0:	085b      	lsrs	r3, r3, #1
 80038b2:	3b01      	subs	r3, #1
 80038b4:	041b      	lsls	r3, r3, #16
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	061b      	lsls	r3, r3, #24
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c4:	071b      	lsls	r3, r3, #28
 80038c6:	491b      	ldr	r1, [pc, #108]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038cc:	4b19      	ldr	r3, [pc, #100]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a18      	ldr	r2, [pc, #96]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 80038d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7fe fd26 	bl	8002328 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e0:	f7fe fd22 	bl	8002328 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e05f      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f2:	4b10      	ldr	r3, [pc, #64]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0x47c>
 80038fe:	e057      	b.n	80039b0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003900:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a0b      	ldr	r2, [pc, #44]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800390a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390c:	f7fe fd0c 	bl	8002328 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003914:	f7fe fd08 	bl	8002328 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e045      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003926:	4b03      	ldr	r3, [pc, #12]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f0      	bne.n	8003914 <HAL_RCC_OscConfig+0x4b0>
 8003932:	e03d      	b.n	80039b0 <HAL_RCC_OscConfig+0x54c>
 8003934:	40023800 	.word	0x40023800
 8003938:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800393c:	4b1f      	ldr	r3, [pc, #124]	; (80039bc <HAL_RCC_OscConfig+0x558>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d030      	beq.n	80039ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003954:	429a      	cmp	r2, r3
 8003956:	d129      	bne.n	80039ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003962:	429a      	cmp	r2, r3
 8003964:	d122      	bne.n	80039ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800396c:	4013      	ands	r3, r2
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003972:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003974:	4293      	cmp	r3, r2
 8003976:	d119      	bne.n	80039ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003982:	085b      	lsrs	r3, r3, #1
 8003984:	3b01      	subs	r3, #1
 8003986:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003988:	429a      	cmp	r2, r3
 800398a:	d10f      	bne.n	80039ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003998:	429a      	cmp	r2, r3
 800399a:	d107      	bne.n	80039ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40023800 	.word	0x40023800

080039c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80039ca:	2300      	movs	r3, #0
 80039cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d101      	bne.n	80039d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0d0      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039d8:	4b6a      	ldr	r3, [pc, #424]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d910      	bls.n	8003a08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e6:	4b67      	ldr	r3, [pc, #412]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f023 020f 	bic.w	r2, r3, #15
 80039ee:	4965      	ldr	r1, [pc, #404]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f6:	4b63      	ldr	r3, [pc, #396]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d001      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e0b8      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d020      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a20:	4b59      	ldr	r3, [pc, #356]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	4a58      	ldr	r2, [pc, #352]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a38:	4b53      	ldr	r3, [pc, #332]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	4a52      	ldr	r2, [pc, #328]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a44:	4b50      	ldr	r3, [pc, #320]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	494d      	ldr	r1, [pc, #308]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d040      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d107      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6a:	4b47      	ldr	r3, [pc, #284]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d115      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e07f      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d107      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a82:	4b41      	ldr	r3, [pc, #260]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d109      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e073      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a92:	4b3d      	ldr	r3, [pc, #244]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e06b      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aa2:	4b39      	ldr	r3, [pc, #228]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f023 0203 	bic.w	r2, r3, #3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	4936      	ldr	r1, [pc, #216]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab4:	f7fe fc38 	bl	8002328 <HAL_GetTick>
 8003ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aba:	e00a      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003abc:	f7fe fc34 	bl	8002328 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e053      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad2:	4b2d      	ldr	r3, [pc, #180]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 020c 	and.w	r2, r3, #12
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d1eb      	bne.n	8003abc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ae4:	4b27      	ldr	r3, [pc, #156]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 030f 	and.w	r3, r3, #15
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d210      	bcs.n	8003b14 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af2:	4b24      	ldr	r3, [pc, #144]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f023 020f 	bic.w	r2, r3, #15
 8003afa:	4922      	ldr	r1, [pc, #136]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b02:	4b20      	ldr	r3, [pc, #128]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d001      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e032      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b20:	4b19      	ldr	r3, [pc, #100]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	4916      	ldr	r1, [pc, #88]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d009      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b3e:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	490e      	ldr	r1, [pc, #56]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b52:	f000 f821 	bl	8003b98 <HAL_RCC_GetSysClockFreq>
 8003b56:	4602      	mov	r2, r0
 8003b58:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	091b      	lsrs	r3, r3, #4
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	490a      	ldr	r1, [pc, #40]	; (8003b8c <HAL_RCC_ClockConfig+0x1cc>)
 8003b64:	5ccb      	ldrb	r3, [r1, r3]
 8003b66:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6a:	4a09      	ldr	r2, [pc, #36]	; (8003b90 <HAL_RCC_ClockConfig+0x1d0>)
 8003b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b6e:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <HAL_RCC_ClockConfig+0x1d4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fe fb94 	bl	80022a0 <HAL_InitTick>

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40023c00 	.word	0x40023c00
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	08007050 	.word	0x08007050
 8003b90:	20000000 	.word	0x20000000
 8003b94:	20000004 	.word	0x20000004

08003b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b9c:	b090      	sub	sp, #64	; 0x40
 8003b9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ba8:	2300      	movs	r3, #0
 8003baa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003bac:	2300      	movs	r3, #0
 8003bae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bb0:	4b59      	ldr	r3, [pc, #356]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 030c 	and.w	r3, r3, #12
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d00d      	beq.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x40>
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	f200 80a1 	bhi.w	8003d04 <HAL_RCC_GetSysClockFreq+0x16c>
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <HAL_RCC_GetSysClockFreq+0x34>
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d003      	beq.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bca:	e09b      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bcc:	4b53      	ldr	r3, [pc, #332]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x184>)
 8003bce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bd0:	e09b      	b.n	8003d0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bd2:	4b53      	ldr	r3, [pc, #332]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bd4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bd6:	e098      	b.n	8003d0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bd8:	4b4f      	ldr	r3, [pc, #316]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003be0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003be2:	4b4d      	ldr	r3, [pc, #308]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d028      	beq.n	8003c40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bee:	4b4a      	ldr	r3, [pc, #296]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	099b      	lsrs	r3, r3, #6
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	623b      	str	r3, [r7, #32]
 8003bf8:	627a      	str	r2, [r7, #36]	; 0x24
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c00:	2100      	movs	r1, #0
 8003c02:	4b47      	ldr	r3, [pc, #284]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c04:	fb03 f201 	mul.w	r2, r3, r1
 8003c08:	2300      	movs	r3, #0
 8003c0a:	fb00 f303 	mul.w	r3, r0, r3
 8003c0e:	4413      	add	r3, r2
 8003c10:	4a43      	ldr	r2, [pc, #268]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c12:	fba0 1202 	umull	r1, r2, r0, r2
 8003c16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c18:	460a      	mov	r2, r1
 8003c1a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c1e:	4413      	add	r3, r2
 8003c20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c24:	2200      	movs	r2, #0
 8003c26:	61bb      	str	r3, [r7, #24]
 8003c28:	61fa      	str	r2, [r7, #28]
 8003c2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c32:	f7fc fb09 	bl	8000248 <__aeabi_uldivmod>
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c3e:	e053      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c40:	4b35      	ldr	r3, [pc, #212]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	099b      	lsrs	r3, r3, #6
 8003c46:	2200      	movs	r2, #0
 8003c48:	613b      	str	r3, [r7, #16]
 8003c4a:	617a      	str	r2, [r7, #20]
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c52:	f04f 0b00 	mov.w	fp, #0
 8003c56:	4652      	mov	r2, sl
 8003c58:	465b      	mov	r3, fp
 8003c5a:	f04f 0000 	mov.w	r0, #0
 8003c5e:	f04f 0100 	mov.w	r1, #0
 8003c62:	0159      	lsls	r1, r3, #5
 8003c64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c68:	0150      	lsls	r0, r2, #5
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	ebb2 080a 	subs.w	r8, r2, sl
 8003c72:	eb63 090b 	sbc.w	r9, r3, fp
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	f04f 0300 	mov.w	r3, #0
 8003c7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c8a:	ebb2 0408 	subs.w	r4, r2, r8
 8003c8e:	eb63 0509 	sbc.w	r5, r3, r9
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	00eb      	lsls	r3, r5, #3
 8003c9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ca0:	00e2      	lsls	r2, r4, #3
 8003ca2:	4614      	mov	r4, r2
 8003ca4:	461d      	mov	r5, r3
 8003ca6:	eb14 030a 	adds.w	r3, r4, sl
 8003caa:	603b      	str	r3, [r7, #0]
 8003cac:	eb45 030b 	adc.w	r3, r5, fp
 8003cb0:	607b      	str	r3, [r7, #4]
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	028b      	lsls	r3, r1, #10
 8003cc2:	4621      	mov	r1, r4
 8003cc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cc8:	4621      	mov	r1, r4
 8003cca:	028a      	lsls	r2, r1, #10
 8003ccc:	4610      	mov	r0, r2
 8003cce:	4619      	mov	r1, r3
 8003cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	60fa      	str	r2, [r7, #12]
 8003cd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cdc:	f7fc fab4 	bl	8000248 <__aeabi_uldivmod>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	0c1b      	lsrs	r3, r3, #16
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003cf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d02:	e002      	b.n	8003d0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d04:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x184>)
 8003d06:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3740      	adds	r7, #64	; 0x40
 8003d10:	46bd      	mov	sp, r7
 8003d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d16:	bf00      	nop
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	00f42400 	.word	0x00f42400
 8003d20:	017d7840 	.word	0x017d7840

08003d24 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d28:	4b03      	ldr	r3, [pc, #12]	; (8003d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	20000000 	.word	0x20000000

08003d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d40:	f7ff fff0 	bl	8003d24 <HAL_RCC_GetHCLKFreq>
 8003d44:	4602      	mov	r2, r0
 8003d46:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	0a9b      	lsrs	r3, r3, #10
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	4903      	ldr	r1, [pc, #12]	; (8003d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d52:	5ccb      	ldrb	r3, [r1, r3]
 8003d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	08007060 	.word	0x08007060

08003d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d68:	f7ff ffdc 	bl	8003d24 <HAL_RCC_GetHCLKFreq>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	0b5b      	lsrs	r3, r3, #13
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	4903      	ldr	r1, [pc, #12]	; (8003d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d7a:	5ccb      	ldrb	r3, [r1, r3]
 8003d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40023800 	.word	0x40023800
 8003d88:	08007060 	.word	0x08007060

08003d8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b088      	sub	sp, #32
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d94:	2300      	movs	r3, #0
 8003d96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003da0:	2300      	movs	r3, #0
 8003da2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003da4:	2300      	movs	r3, #0
 8003da6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d012      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003db4:	4b69      	ldr	r3, [pc, #420]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	4a68      	ldr	r2, [pc, #416]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003dbe:	6093      	str	r3, [r2, #8]
 8003dc0:	4b66      	ldr	r3, [pc, #408]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc8:	4964      	ldr	r1, [pc, #400]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d017      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003de6:	4b5d      	ldr	r3, [pc, #372]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df4:	4959      	ldr	r1, [pc, #356]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e04:	d101      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003e06:	2301      	movs	r3, #1
 8003e08:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003e12:	2301      	movs	r3, #1
 8003e14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d017      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e22:	4b4e      	ldr	r3, [pc, #312]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	494a      	ldr	r1, [pc, #296]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e40:	d101      	bne.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e42:	2301      	movs	r3, #1
 8003e44:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0320 	and.w	r3, r3, #32
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 808b 	beq.w	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e70:	4b3a      	ldr	r3, [pc, #232]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	4a39      	ldr	r2, [pc, #228]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8003e7c:	4b37      	ldr	r3, [pc, #220]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e84:	60bb      	str	r3, [r7, #8]
 8003e86:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e88:	4b35      	ldr	r3, [pc, #212]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a34      	ldr	r2, [pc, #208]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e94:	f7fe fa48 	bl	8002328 <HAL_GetTick>
 8003e98:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e9c:	f7fe fa44 	bl	8002328 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b64      	cmp	r3, #100	; 0x64
 8003ea8:	d901      	bls.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e38f      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003eae:	4b2c      	ldr	r3, [pc, #176]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003eba:	4b28      	ldr	r3, [pc, #160]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d035      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d02e      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ed8:	4b20      	ldr	r3, [pc, #128]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ee2:	4b1e      	ldr	r3, [pc, #120]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee6:	4a1d      	ldr	r2, [pc, #116]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003eee:	4b1b      	ldr	r3, [pc, #108]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	4a1a      	ldr	r2, [pc, #104]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ef8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003efa:	4a18      	ldr	r2, [pc, #96]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f00:	4b16      	ldr	r3, [pc, #88]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d114      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0c:	f7fe fa0c 	bl	8002328 <HAL_GetTick>
 8003f10:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f12:	e00a      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f14:	f7fe fa08 	bl	8002328 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e351      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f2a:	4b0c      	ldr	r3, [pc, #48]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0ee      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f42:	d111      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f44:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f50:	4b04      	ldr	r3, [pc, #16]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f52:	400b      	ands	r3, r1
 8003f54:	4901      	ldr	r1, [pc, #4]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	608b      	str	r3, [r1, #8]
 8003f5a:	e00b      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	40007000 	.word	0x40007000
 8003f64:	0ffffcff 	.word	0x0ffffcff
 8003f68:	4bac      	ldr	r3, [pc, #688]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	4aab      	ldr	r2, [pc, #684]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f6e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f72:	6093      	str	r3, [r2, #8]
 8003f74:	4ba9      	ldr	r3, [pc, #676]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f80:	49a6      	ldr	r1, [pc, #664]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0310 	and.w	r3, r3, #16
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d010      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f92:	4ba2      	ldr	r3, [pc, #648]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f98:	4aa0      	ldr	r2, [pc, #640]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f9e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003fa2:	4b9e      	ldr	r3, [pc, #632]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fac:	499b      	ldr	r1, [pc, #620]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00a      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fc0:	4b96      	ldr	r3, [pc, #600]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fce:	4993      	ldr	r1, [pc, #588]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fe2:	4b8e      	ldr	r3, [pc, #568]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ff0:	498a      	ldr	r1, [pc, #552]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00a      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004004:	4b85      	ldr	r3, [pc, #532]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004012:	4982      	ldr	r1, [pc, #520]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004026:	4b7d      	ldr	r3, [pc, #500]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004034:	4979      	ldr	r1, [pc, #484]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00a      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004048:	4b74      	ldr	r3, [pc, #464]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800404a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404e:	f023 0203 	bic.w	r2, r3, #3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004056:	4971      	ldr	r1, [pc, #452]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800406a:	4b6c      	ldr	r3, [pc, #432]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800406c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004070:	f023 020c 	bic.w	r2, r3, #12
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004078:	4968      	ldr	r1, [pc, #416]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00a      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800408c:	4b63      	ldr	r3, [pc, #396]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004092:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800409a:	4960      	ldr	r1, [pc, #384]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800409c:	4313      	orrs	r3, r2
 800409e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040ae:	4b5b      	ldr	r3, [pc, #364]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040bc:	4957      	ldr	r1, [pc, #348]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00a      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040d0:	4b52      	ldr	r3, [pc, #328]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040de:	494f      	ldr	r1, [pc, #316]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00a      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80040f2:	4b4a      	ldr	r3, [pc, #296]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004100:	4946      	ldr	r1, [pc, #280]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00a      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004114:	4b41      	ldr	r3, [pc, #260]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004122:	493e      	ldr	r1, [pc, #248]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004136:	4b39      	ldr	r3, [pc, #228]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004144:	4935      	ldr	r1, [pc, #212]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00a      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004158:	4b30      	ldr	r3, [pc, #192]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004166:	492d      	ldr	r1, [pc, #180]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d011      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800417a:	4b28      	ldr	r3, [pc, #160]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800417c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004180:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004188:	4924      	ldr	r1, [pc, #144]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004194:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004198:	d101      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800419a:	2301      	movs	r3, #1
 800419c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80041aa:	2301      	movs	r3, #1
 80041ac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041ba:	4b18      	ldr	r3, [pc, #96]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c8:	4914      	ldr	r1, [pc, #80]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00b      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041dc:	4b0f      	ldr	r3, [pc, #60]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041ec:	490b      	ldr	r1, [pc, #44]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00f      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004200:	4b06      	ldr	r3, [pc, #24]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004206:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004210:	4902      	ldr	r1, [pc, #8]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004218:	e002      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800421a:	bf00      	nop
 800421c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00b      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800422c:	4b8a      	ldr	r3, [pc, #552]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800422e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004232:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423c:	4986      	ldr	r1, [pc, #536]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00b      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004250:	4b81      	ldr	r3, [pc, #516]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004252:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004256:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004260:	497d      	ldr	r1, [pc, #500]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d006      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 80d6 	beq.w	8004428 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800427c:	4b76      	ldr	r3, [pc, #472]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a75      	ldr	r2, [pc, #468]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004282:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004286:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004288:	f7fe f84e 	bl	8002328 <HAL_GetTick>
 800428c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004290:	f7fe f84a 	bl	8002328 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b64      	cmp	r3, #100	; 0x64
 800429c:	d901      	bls.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e195      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042a2:	4b6d      	ldr	r3, [pc, #436]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d021      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x572>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d11d      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042c2:	4b65      	ldr	r3, [pc, #404]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c8:	0c1b      	lsrs	r3, r3, #16
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042d0:	4b61      	ldr	r3, [pc, #388]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042d6:	0e1b      	lsrs	r3, r3, #24
 80042d8:	f003 030f 	and.w	r3, r3, #15
 80042dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	019a      	lsls	r2, r3, #6
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	041b      	lsls	r3, r3, #16
 80042e8:	431a      	orrs	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	061b      	lsls	r3, r3, #24
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	071b      	lsls	r3, r3, #28
 80042f6:	4958      	ldr	r1, [pc, #352]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d004      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004312:	d00a      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800431c:	2b00      	cmp	r3, #0
 800431e:	d02e      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004328:	d129      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800432a:	4b4b      	ldr	r3, [pc, #300]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800432c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004330:	0c1b      	lsrs	r3, r3, #16
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004338:	4b47      	ldr	r3, [pc, #284]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800433a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800433e:	0f1b      	lsrs	r3, r3, #28
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	019a      	lsls	r2, r3, #6
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	041b      	lsls	r3, r3, #16
 8004350:	431a      	orrs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	061b      	lsls	r3, r3, #24
 8004358:	431a      	orrs	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	071b      	lsls	r3, r3, #28
 800435e:	493e      	ldr	r1, [pc, #248]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004366:	4b3c      	ldr	r3, [pc, #240]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800436c:	f023 021f 	bic.w	r2, r3, #31
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	3b01      	subs	r3, #1
 8004376:	4938      	ldr	r1, [pc, #224]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d01d      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800438a:	4b33      	ldr	r3, [pc, #204]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800438c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004390:	0e1b      	lsrs	r3, r3, #24
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004398:	4b2f      	ldr	r3, [pc, #188]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800439a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800439e:	0f1b      	lsrs	r3, r3, #28
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	019a      	lsls	r2, r3, #6
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	041b      	lsls	r3, r3, #16
 80043b2:	431a      	orrs	r2, r3
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	061b      	lsls	r3, r3, #24
 80043b8:	431a      	orrs	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	071b      	lsls	r3, r3, #28
 80043be:	4926      	ldr	r1, [pc, #152]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d011      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	019a      	lsls	r2, r3, #6
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	041b      	lsls	r3, r3, #16
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	061b      	lsls	r3, r3, #24
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	071b      	lsls	r3, r3, #28
 80043ee:	491a      	ldr	r1, [pc, #104]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043f6:	4b18      	ldr	r3, [pc, #96]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a17      	ldr	r2, [pc, #92]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004400:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004402:	f7fd ff91 	bl	8002328 <HAL_GetTick>
 8004406:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004408:	e008      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800440a:	f7fd ff8d 	bl	8002328 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b64      	cmp	r3, #100	; 0x64
 8004416:	d901      	bls.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e0d8      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800441c:	4b0e      	ldr	r3, [pc, #56]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0f0      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	2b01      	cmp	r3, #1
 800442c:	f040 80ce 	bne.w	80045cc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004430:	4b09      	ldr	r3, [pc, #36]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a08      	ldr	r2, [pc, #32]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800443a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800443c:	f7fd ff74 	bl	8002328 <HAL_GetTick>
 8004440:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004442:	e00b      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004444:	f7fd ff70 	bl	8002328 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b64      	cmp	r3, #100	; 0x64
 8004450:	d904      	bls.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e0bb      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004456:	bf00      	nop
 8004458:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800445c:	4b5e      	ldr	r3, [pc, #376]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004468:	d0ec      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447a:	2b00      	cmp	r3, #0
 800447c:	d009      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004486:	2b00      	cmp	r3, #0
 8004488:	d02e      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	2b00      	cmp	r3, #0
 8004490:	d12a      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004492:	4b51      	ldr	r3, [pc, #324]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004498:	0c1b      	lsrs	r3, r3, #16
 800449a:	f003 0303 	and.w	r3, r3, #3
 800449e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044a0:	4b4d      	ldr	r3, [pc, #308]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a6:	0f1b      	lsrs	r3, r3, #28
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	019a      	lsls	r2, r3, #6
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	041b      	lsls	r3, r3, #16
 80044b8:	431a      	orrs	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	061b      	lsls	r3, r3, #24
 80044c0:	431a      	orrs	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	071b      	lsls	r3, r3, #28
 80044c6:	4944      	ldr	r1, [pc, #272]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80044ce:	4b42      	ldr	r3, [pc, #264]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044dc:	3b01      	subs	r3, #1
 80044de:	021b      	lsls	r3, r3, #8
 80044e0:	493d      	ldr	r1, [pc, #244]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d022      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044fc:	d11d      	bne.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044fe:	4b36      	ldr	r3, [pc, #216]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004504:	0e1b      	lsrs	r3, r3, #24
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800450c:	4b32      	ldr	r3, [pc, #200]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004512:	0f1b      	lsrs	r3, r3, #28
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	019a      	lsls	r2, r3, #6
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	041b      	lsls	r3, r3, #16
 8004526:	431a      	orrs	r2, r3
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	061b      	lsls	r3, r3, #24
 800452c:	431a      	orrs	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	071b      	lsls	r3, r3, #28
 8004532:	4929      	ldr	r1, [pc, #164]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004534:	4313      	orrs	r3, r2
 8004536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0308 	and.w	r3, r3, #8
 8004542:	2b00      	cmp	r3, #0
 8004544:	d028      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004546:	4b24      	ldr	r3, [pc, #144]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454c:	0e1b      	lsrs	r3, r3, #24
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004554:	4b20      	ldr	r3, [pc, #128]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455a:	0c1b      	lsrs	r3, r3, #16
 800455c:	f003 0303 	and.w	r3, r3, #3
 8004560:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	019a      	lsls	r2, r3, #6
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	041b      	lsls	r3, r3, #16
 800456c:	431a      	orrs	r2, r3
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	061b      	lsls	r3, r3, #24
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	69db      	ldr	r3, [r3, #28]
 8004578:	071b      	lsls	r3, r3, #28
 800457a:	4917      	ldr	r1, [pc, #92]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004582:	4b15      	ldr	r3, [pc, #84]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004588:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004590:	4911      	ldr	r1, [pc, #68]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004598:	4b0f      	ldr	r3, [pc, #60]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a0e      	ldr	r2, [pc, #56]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800459e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045a4:	f7fd fec0 	bl	8002328 <HAL_GetTick>
 80045a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045aa:	e008      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045ac:	f7fd febc 	bl	8002328 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b64      	cmp	r3, #100	; 0x64
 80045b8:	d901      	bls.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e007      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045be:	4b06      	ldr	r3, [pc, #24]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045ca:	d1ef      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3720      	adds	r7, #32
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	40023800 	.word	0x40023800

080045dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e09d      	b.n	800472a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d108      	bne.n	8004608 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045fe:	d009      	beq.n	8004614 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	61da      	str	r2, [r3, #28]
 8004606:	e005      	b.n	8004614 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fd fa5c 	bl	8001aec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800464a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004654:	d902      	bls.n	800465c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004656:	2300      	movs	r3, #0
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	e002      	b.n	8004662 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800465c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004660:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800466a:	d007      	beq.n	800467c <HAL_SPI_Init+0xa0>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004674:	d002      	beq.n	800467c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046b4:	431a      	orrs	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046be:	ea42 0103 	orr.w	r1, r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	0c1b      	lsrs	r3, r3, #16
 80046d8:	f003 0204 	and.w	r2, r3, #4
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	f003 0310 	and.w	r3, r3, #16
 80046e4:	431a      	orrs	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ea:	f003 0308 	and.w	r3, r3, #8
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80046f8:	ea42 0103 	orr.w	r1, r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69da      	ldr	r2, [r3, #28]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004718:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b082      	sub	sp, #8
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e049      	b.n	80047d8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d106      	bne.n	800475e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7fd fc7f 	bl	800205c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2202      	movs	r2, #2
 8004762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3304      	adds	r3, #4
 800476e:	4619      	mov	r1, r3
 8004770:	4610      	mov	r0, r2
 8004772:	f000 fe99 	bl	80054a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d001      	beq.n	80047f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e04c      	b.n	8004892 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a26      	ldr	r2, [pc, #152]	; (80048a0 <HAL_TIM_Base_Start+0xc0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d022      	beq.n	8004850 <HAL_TIM_Base_Start+0x70>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004812:	d01d      	beq.n	8004850 <HAL_TIM_Base_Start+0x70>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a22      	ldr	r2, [pc, #136]	; (80048a4 <HAL_TIM_Base_Start+0xc4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d018      	beq.n	8004850 <HAL_TIM_Base_Start+0x70>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a21      	ldr	r2, [pc, #132]	; (80048a8 <HAL_TIM_Base_Start+0xc8>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d013      	beq.n	8004850 <HAL_TIM_Base_Start+0x70>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a1f      	ldr	r2, [pc, #124]	; (80048ac <HAL_TIM_Base_Start+0xcc>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d00e      	beq.n	8004850 <HAL_TIM_Base_Start+0x70>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a1e      	ldr	r2, [pc, #120]	; (80048b0 <HAL_TIM_Base_Start+0xd0>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d009      	beq.n	8004850 <HAL_TIM_Base_Start+0x70>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a1c      	ldr	r2, [pc, #112]	; (80048b4 <HAL_TIM_Base_Start+0xd4>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d004      	beq.n	8004850 <HAL_TIM_Base_Start+0x70>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a1b      	ldr	r2, [pc, #108]	; (80048b8 <HAL_TIM_Base_Start+0xd8>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d115      	bne.n	800487c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	4b19      	ldr	r3, [pc, #100]	; (80048bc <HAL_TIM_Base_Start+0xdc>)
 8004858:	4013      	ands	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2b06      	cmp	r3, #6
 8004860:	d015      	beq.n	800488e <HAL_TIM_Base_Start+0xae>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004868:	d011      	beq.n	800488e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 0201 	orr.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800487a:	e008      	b.n	800488e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	e000      	b.n	8004890 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800488e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40010000 	.word	0x40010000
 80048a4:	40000400 	.word	0x40000400
 80048a8:	40000800 	.word	0x40000800
 80048ac:	40000c00 	.word	0x40000c00
 80048b0:	40010400 	.word	0x40010400
 80048b4:	40014000 	.word	0x40014000
 80048b8:	40001800 	.word	0x40001800
 80048bc:	00010007 	.word	0x00010007

080048c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d001      	beq.n	80048d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e054      	b.n	8004982 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a26      	ldr	r2, [pc, #152]	; (8004990 <HAL_TIM_Base_Start_IT+0xd0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d022      	beq.n	8004940 <HAL_TIM_Base_Start_IT+0x80>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004902:	d01d      	beq.n	8004940 <HAL_TIM_Base_Start_IT+0x80>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a22      	ldr	r2, [pc, #136]	; (8004994 <HAL_TIM_Base_Start_IT+0xd4>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d018      	beq.n	8004940 <HAL_TIM_Base_Start_IT+0x80>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a21      	ldr	r2, [pc, #132]	; (8004998 <HAL_TIM_Base_Start_IT+0xd8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d013      	beq.n	8004940 <HAL_TIM_Base_Start_IT+0x80>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a1f      	ldr	r2, [pc, #124]	; (800499c <HAL_TIM_Base_Start_IT+0xdc>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00e      	beq.n	8004940 <HAL_TIM_Base_Start_IT+0x80>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a1e      	ldr	r2, [pc, #120]	; (80049a0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d009      	beq.n	8004940 <HAL_TIM_Base_Start_IT+0x80>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a1c      	ldr	r2, [pc, #112]	; (80049a4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d004      	beq.n	8004940 <HAL_TIM_Base_Start_IT+0x80>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a1b      	ldr	r2, [pc, #108]	; (80049a8 <HAL_TIM_Base_Start_IT+0xe8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d115      	bne.n	800496c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	4b19      	ldr	r3, [pc, #100]	; (80049ac <HAL_TIM_Base_Start_IT+0xec>)
 8004948:	4013      	ands	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2b06      	cmp	r3, #6
 8004950:	d015      	beq.n	800497e <HAL_TIM_Base_Start_IT+0xbe>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004958:	d011      	beq.n	800497e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 0201 	orr.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496a:	e008      	b.n	800497e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0201 	orr.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	e000      	b.n	8004980 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	40010000 	.word	0x40010000
 8004994:	40000400 	.word	0x40000400
 8004998:	40000800 	.word	0x40000800
 800499c:	40000c00 	.word	0x40000c00
 80049a0:	40010400 	.word	0x40010400
 80049a4:	40014000 	.word	0x40014000
 80049a8:	40001800 	.word	0x40001800
 80049ac:	00010007 	.word	0x00010007

080049b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e049      	b.n	8004a56 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d106      	bne.n	80049dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7fd fb20 	bl	800201c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3304      	adds	r3, #4
 80049ec:	4619      	mov	r1, r3
 80049ee:	4610      	mov	r0, r2
 80049f0:	f000 fd5a 	bl	80054a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b082      	sub	sp, #8
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e049      	b.n	8004b04 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d106      	bne.n	8004a8a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7fd fa7d 	bl	8001f84 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	f000 fd03 	bl	80054a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3708      	adds	r7, #8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d104      	bne.n	8004b2a <HAL_TIM_IC_Start_IT+0x1e>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	e023      	b.n	8004b72 <HAL_TIM_IC_Start_IT+0x66>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d104      	bne.n	8004b3a <HAL_TIM_IC_Start_IT+0x2e>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	e01b      	b.n	8004b72 <HAL_TIM_IC_Start_IT+0x66>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d104      	bne.n	8004b4a <HAL_TIM_IC_Start_IT+0x3e>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	e013      	b.n	8004b72 <HAL_TIM_IC_Start_IT+0x66>
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b0c      	cmp	r3, #12
 8004b4e:	d104      	bne.n	8004b5a <HAL_TIM_IC_Start_IT+0x4e>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	e00b      	b.n	8004b72 <HAL_TIM_IC_Start_IT+0x66>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b10      	cmp	r3, #16
 8004b5e:	d104      	bne.n	8004b6a <HAL_TIM_IC_Start_IT+0x5e>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	e003      	b.n	8004b72 <HAL_TIM_IC_Start_IT+0x66>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d104      	bne.n	8004b84 <HAL_TIM_IC_Start_IT+0x78>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	e013      	b.n	8004bac <HAL_TIM_IC_Start_IT+0xa0>
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d104      	bne.n	8004b94 <HAL_TIM_IC_Start_IT+0x88>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	e00b      	b.n	8004bac <HAL_TIM_IC_Start_IT+0xa0>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	2b08      	cmp	r3, #8
 8004b98:	d104      	bne.n	8004ba4 <HAL_TIM_IC_Start_IT+0x98>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	e003      	b.n	8004bac <HAL_TIM_IC_Start_IT+0xa0>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004bae:	7bbb      	ldrb	r3, [r7, #14]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d102      	bne.n	8004bba <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004bb4:	7b7b      	ldrb	r3, [r7, #13]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d001      	beq.n	8004bbe <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e0e2      	b.n	8004d84 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d104      	bne.n	8004bce <HAL_TIM_IC_Start_IT+0xc2>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bcc:	e023      	b.n	8004c16 <HAL_TIM_IC_Start_IT+0x10a>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	d104      	bne.n	8004bde <HAL_TIM_IC_Start_IT+0xd2>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bdc:	e01b      	b.n	8004c16 <HAL_TIM_IC_Start_IT+0x10a>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d104      	bne.n	8004bee <HAL_TIM_IC_Start_IT+0xe2>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bec:	e013      	b.n	8004c16 <HAL_TIM_IC_Start_IT+0x10a>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b0c      	cmp	r3, #12
 8004bf2:	d104      	bne.n	8004bfe <HAL_TIM_IC_Start_IT+0xf2>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bfc:	e00b      	b.n	8004c16 <HAL_TIM_IC_Start_IT+0x10a>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b10      	cmp	r3, #16
 8004c02:	d104      	bne.n	8004c0e <HAL_TIM_IC_Start_IT+0x102>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c0c:	e003      	b.n	8004c16 <HAL_TIM_IC_Start_IT+0x10a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2202      	movs	r2, #2
 8004c12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d104      	bne.n	8004c26 <HAL_TIM_IC_Start_IT+0x11a>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c24:	e013      	b.n	8004c4e <HAL_TIM_IC_Start_IT+0x142>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d104      	bne.n	8004c36 <HAL_TIM_IC_Start_IT+0x12a>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c34:	e00b      	b.n	8004c4e <HAL_TIM_IC_Start_IT+0x142>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d104      	bne.n	8004c46 <HAL_TIM_IC_Start_IT+0x13a>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c44:	e003      	b.n	8004c4e <HAL_TIM_IC_Start_IT+0x142>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2202      	movs	r2, #2
 8004c4a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b0c      	cmp	r3, #12
 8004c52:	d841      	bhi.n	8004cd8 <HAL_TIM_IC_Start_IT+0x1cc>
 8004c54:	a201      	add	r2, pc, #4	; (adr r2, 8004c5c <HAL_TIM_IC_Start_IT+0x150>)
 8004c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5a:	bf00      	nop
 8004c5c:	08004c91 	.word	0x08004c91
 8004c60:	08004cd9 	.word	0x08004cd9
 8004c64:	08004cd9 	.word	0x08004cd9
 8004c68:	08004cd9 	.word	0x08004cd9
 8004c6c:	08004ca3 	.word	0x08004ca3
 8004c70:	08004cd9 	.word	0x08004cd9
 8004c74:	08004cd9 	.word	0x08004cd9
 8004c78:	08004cd9 	.word	0x08004cd9
 8004c7c:	08004cb5 	.word	0x08004cb5
 8004c80:	08004cd9 	.word	0x08004cd9
 8004c84:	08004cd9 	.word	0x08004cd9
 8004c88:	08004cd9 	.word	0x08004cd9
 8004c8c:	08004cc7 	.word	0x08004cc7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0202 	orr.w	r2, r2, #2
 8004c9e:	60da      	str	r2, [r3, #12]
      break;
 8004ca0:	e01d      	b.n	8004cde <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f042 0204 	orr.w	r2, r2, #4
 8004cb0:	60da      	str	r2, [r3, #12]
      break;
 8004cb2:	e014      	b.n	8004cde <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68da      	ldr	r2, [r3, #12]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0208 	orr.w	r2, r2, #8
 8004cc2:	60da      	str	r2, [r3, #12]
      break;
 8004cc4:	e00b      	b.n	8004cde <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68da      	ldr	r2, [r3, #12]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f042 0210 	orr.w	r2, r2, #16
 8004cd4:	60da      	str	r2, [r3, #12]
      break;
 8004cd6:	e002      	b.n	8004cde <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	73fb      	strb	r3, [r7, #15]
      break;
 8004cdc:	bf00      	nop
  }

  if (status == HAL_OK)
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d14e      	bne.n	8004d82 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	6839      	ldr	r1, [r7, #0]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f001 f916 	bl	8005f1e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a25      	ldr	r2, [pc, #148]	; (8004d8c <HAL_TIM_IC_Start_IT+0x280>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d022      	beq.n	8004d42 <HAL_TIM_IC_Start_IT+0x236>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d04:	d01d      	beq.n	8004d42 <HAL_TIM_IC_Start_IT+0x236>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a21      	ldr	r2, [pc, #132]	; (8004d90 <HAL_TIM_IC_Start_IT+0x284>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d018      	beq.n	8004d42 <HAL_TIM_IC_Start_IT+0x236>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a1f      	ldr	r2, [pc, #124]	; (8004d94 <HAL_TIM_IC_Start_IT+0x288>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d013      	beq.n	8004d42 <HAL_TIM_IC_Start_IT+0x236>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a1e      	ldr	r2, [pc, #120]	; (8004d98 <HAL_TIM_IC_Start_IT+0x28c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d00e      	beq.n	8004d42 <HAL_TIM_IC_Start_IT+0x236>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a1c      	ldr	r2, [pc, #112]	; (8004d9c <HAL_TIM_IC_Start_IT+0x290>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d009      	beq.n	8004d42 <HAL_TIM_IC_Start_IT+0x236>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a1b      	ldr	r2, [pc, #108]	; (8004da0 <HAL_TIM_IC_Start_IT+0x294>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d004      	beq.n	8004d42 <HAL_TIM_IC_Start_IT+0x236>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a19      	ldr	r2, [pc, #100]	; (8004da4 <HAL_TIM_IC_Start_IT+0x298>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d115      	bne.n	8004d6e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	4b17      	ldr	r3, [pc, #92]	; (8004da8 <HAL_TIM_IC_Start_IT+0x29c>)
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2b06      	cmp	r3, #6
 8004d52:	d015      	beq.n	8004d80 <HAL_TIM_IC_Start_IT+0x274>
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d5a:	d011      	beq.n	8004d80 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0201 	orr.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d6c:	e008      	b.n	8004d80 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f042 0201 	orr.w	r2, r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	e000      	b.n	8004d82 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d80:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40010000 	.word	0x40010000
 8004d90:	40000400 	.word	0x40000400
 8004d94:	40000800 	.word	0x40000800
 8004d98:	40000c00 	.word	0x40000c00
 8004d9c:	40010400 	.word	0x40010400
 8004da0:	40014000 	.word	0x40014000
 8004da4:	40001800 	.word	0x40001800
 8004da8:	00010007 	.word	0x00010007

08004dac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d122      	bne.n	8004e08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d11b      	bne.n	8004e08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f06f 0202 	mvn.w	r2, #2
 8004dd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	f003 0303 	and.w	r3, r3, #3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 fb3c 	bl	800546c <HAL_TIM_IC_CaptureCallback>
 8004df4:	e005      	b.n	8004e02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 fb2e 	bl	8005458 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 fb3f 	bl	8005480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f003 0304 	and.w	r3, r3, #4
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d122      	bne.n	8004e5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d11b      	bne.n	8004e5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f06f 0204 	mvn.w	r2, #4
 8004e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2202      	movs	r2, #2
 8004e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 fb12 	bl	800546c <HAL_TIM_IC_CaptureCallback>
 8004e48:	e005      	b.n	8004e56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 fb04 	bl	8005458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 fb15 	bl	8005480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b08      	cmp	r3, #8
 8004e68:	d122      	bne.n	8004eb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f003 0308 	and.w	r3, r3, #8
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	d11b      	bne.n	8004eb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f06f 0208 	mvn.w	r2, #8
 8004e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2204      	movs	r2, #4
 8004e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fae8 	bl	800546c <HAL_TIM_IC_CaptureCallback>
 8004e9c:	e005      	b.n	8004eaa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 fada 	bl	8005458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 faeb 	bl	8005480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	f003 0310 	and.w	r3, r3, #16
 8004eba:	2b10      	cmp	r3, #16
 8004ebc:	d122      	bne.n	8004f04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f003 0310 	and.w	r3, r3, #16
 8004ec8:	2b10      	cmp	r3, #16
 8004eca:	d11b      	bne.n	8004f04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f06f 0210 	mvn.w	r2, #16
 8004ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2208      	movs	r2, #8
 8004eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 fabe 	bl	800546c <HAL_TIM_IC_CaptureCallback>
 8004ef0:	e005      	b.n	8004efe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fab0 	bl	8005458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 fac1 	bl	8005480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d10e      	bne.n	8004f30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d107      	bne.n	8004f30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f06f 0201 	mvn.w	r2, #1
 8004f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7fc fd10 	bl	8001950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f3a:	2b80      	cmp	r3, #128	; 0x80
 8004f3c:	d10e      	bne.n	8004f5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f48:	2b80      	cmp	r3, #128	; 0x80
 8004f4a:	d107      	bne.n	8004f5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f001 f89e 	bl	8006098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f6a:	d10e      	bne.n	8004f8a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f76:	2b80      	cmp	r3, #128	; 0x80
 8004f78:	d107      	bne.n	8004f8a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f001 f891 	bl	80060ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f94:	2b40      	cmp	r3, #64	; 0x40
 8004f96:	d10e      	bne.n	8004fb6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa2:	2b40      	cmp	r3, #64	; 0x40
 8004fa4:	d107      	bne.n	8004fb6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fa6f 	bl	8005494 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f003 0320 	and.w	r3, r3, #32
 8004fc0:	2b20      	cmp	r3, #32
 8004fc2:	d10e      	bne.n	8004fe2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f003 0320 	and.w	r3, r3, #32
 8004fce:	2b20      	cmp	r3, #32
 8004fd0:	d107      	bne.n	8004fe2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f06f 0220 	mvn.w	r2, #32
 8004fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f001 f851 	bl	8006084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fe2:	bf00      	nop
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b086      	sub	sp, #24
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	60f8      	str	r0, [r7, #12]
 8004ff2:	60b9      	str	r1, [r7, #8]
 8004ff4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005004:	2302      	movs	r3, #2
 8005006:	e088      	b.n	800511a <HAL_TIM_IC_ConfigChannel+0x130>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d11b      	bne.n	800504e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6818      	ldr	r0, [r3, #0]
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	6819      	ldr	r1, [r3, #0]
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f000 fdd1 	bl	8005bcc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	699a      	ldr	r2, [r3, #24]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 020c 	bic.w	r2, r2, #12
 8005038:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6999      	ldr	r1, [r3, #24]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	619a      	str	r2, [r3, #24]
 800504c:	e060      	b.n	8005110 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b04      	cmp	r3, #4
 8005052:	d11c      	bne.n	800508e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6818      	ldr	r0, [r3, #0]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	6819      	ldr	r1, [r3, #0]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f000 fe55 	bl	8005d12 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699a      	ldr	r2, [r3, #24]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005076:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6999      	ldr	r1, [r3, #24]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	021a      	lsls	r2, r3, #8
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	619a      	str	r2, [r3, #24]
 800508c:	e040      	b.n	8005110 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b08      	cmp	r3, #8
 8005092:	d11b      	bne.n	80050cc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6818      	ldr	r0, [r3, #0]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	6819      	ldr	r1, [r3, #0]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f000 fea2 	bl	8005dec <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	69da      	ldr	r2, [r3, #28]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 020c 	bic.w	r2, r2, #12
 80050b6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	69d9      	ldr	r1, [r3, #28]
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	61da      	str	r2, [r3, #28]
 80050ca:	e021      	b.n	8005110 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b0c      	cmp	r3, #12
 80050d0:	d11c      	bne.n	800510c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6818      	ldr	r0, [r3, #0]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	6819      	ldr	r1, [r3, #0]
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	f000 febf 	bl	8005e64 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	69da      	ldr	r2, [r3, #28]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80050f4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	69d9      	ldr	r1, [r3, #28]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	021a      	lsls	r2, r3, #8
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	61da      	str	r2, [r3, #28]
 800510a:	e001      	b.n	8005110 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005118:	7dfb      	ldrb	r3, [r7, #23]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3718      	adds	r7, #24
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
	...

08005124 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005130:	2300      	movs	r3, #0
 8005132:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800513a:	2b01      	cmp	r3, #1
 800513c:	d101      	bne.n	8005142 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800513e:	2302      	movs	r3, #2
 8005140:	e0ff      	b.n	8005342 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b14      	cmp	r3, #20
 800514e:	f200 80f0 	bhi.w	8005332 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005152:	a201      	add	r2, pc, #4	; (adr r2, 8005158 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005158:	080051ad 	.word	0x080051ad
 800515c:	08005333 	.word	0x08005333
 8005160:	08005333 	.word	0x08005333
 8005164:	08005333 	.word	0x08005333
 8005168:	080051ed 	.word	0x080051ed
 800516c:	08005333 	.word	0x08005333
 8005170:	08005333 	.word	0x08005333
 8005174:	08005333 	.word	0x08005333
 8005178:	0800522f 	.word	0x0800522f
 800517c:	08005333 	.word	0x08005333
 8005180:	08005333 	.word	0x08005333
 8005184:	08005333 	.word	0x08005333
 8005188:	0800526f 	.word	0x0800526f
 800518c:	08005333 	.word	0x08005333
 8005190:	08005333 	.word	0x08005333
 8005194:	08005333 	.word	0x08005333
 8005198:	080052b1 	.word	0x080052b1
 800519c:	08005333 	.word	0x08005333
 80051a0:	08005333 	.word	0x08005333
 80051a4:	08005333 	.word	0x08005333
 80051a8:	080052f1 	.word	0x080052f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68b9      	ldr	r1, [r7, #8]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fa18 	bl	80055e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699a      	ldr	r2, [r3, #24]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0208 	orr.w	r2, r2, #8
 80051c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699a      	ldr	r2, [r3, #24]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0204 	bic.w	r2, r2, #4
 80051d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6999      	ldr	r1, [r3, #24]
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	619a      	str	r2, [r3, #24]
      break;
 80051ea:	e0a5      	b.n	8005338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68b9      	ldr	r1, [r7, #8]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fa6a 	bl	80056cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	699a      	ldr	r2, [r3, #24]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699a      	ldr	r2, [r3, #24]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6999      	ldr	r1, [r3, #24]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	021a      	lsls	r2, r3, #8
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	619a      	str	r2, [r3, #24]
      break;
 800522c:	e084      	b.n	8005338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68b9      	ldr	r1, [r7, #8]
 8005234:	4618      	mov	r0, r3
 8005236:	f000 fac1 	bl	80057bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	69da      	ldr	r2, [r3, #28]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f042 0208 	orr.w	r2, r2, #8
 8005248:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	69da      	ldr	r2, [r3, #28]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0204 	bic.w	r2, r2, #4
 8005258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	69d9      	ldr	r1, [r3, #28]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	691a      	ldr	r2, [r3, #16]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	61da      	str	r2, [r3, #28]
      break;
 800526c:	e064      	b.n	8005338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68b9      	ldr	r1, [r7, #8]
 8005274:	4618      	mov	r0, r3
 8005276:	f000 fb17 	bl	80058a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69da      	ldr	r2, [r3, #28]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	69da      	ldr	r2, [r3, #28]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	69d9      	ldr	r1, [r3, #28]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	021a      	lsls	r2, r3, #8
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	61da      	str	r2, [r3, #28]
      break;
 80052ae:	e043      	b.n	8005338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68b9      	ldr	r1, [r7, #8]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 fb4e 	bl	8005958 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0208 	orr.w	r2, r2, #8
 80052ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 0204 	bic.w	r2, r2, #4
 80052da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	691a      	ldr	r2, [r3, #16]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052ee:	e023      	b.n	8005338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68b9      	ldr	r1, [r7, #8]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 fb80 	bl	80059fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800530a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800531a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	021a      	lsls	r2, r3, #8
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	430a      	orrs	r2, r1
 800532e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005330:	e002      	b.n	8005338 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	75fb      	strb	r3, [r7, #23]
      break;
 8005336:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005340:	7dfb      	ldrb	r3, [r7, #23]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3718      	adds	r7, #24
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop

0800534c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800535c:	2b01      	cmp	r3, #1
 800535e:	d101      	bne.n	8005364 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005360:	2302      	movs	r3, #2
 8005362:	e031      	b.n	80053c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005374:	6839      	ldr	r1, [r7, #0]
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fb94 	bl	8005aa4 <TIM_SlaveTimer_SetConfig>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d009      	beq.n	8005396 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e018      	b.n	80053c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053a4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68da      	ldr	r2, [r3, #12]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80053b4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80053da:	2300      	movs	r3, #0
 80053dc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b0c      	cmp	r3, #12
 80053e2:	d831      	bhi.n	8005448 <HAL_TIM_ReadCapturedValue+0x78>
 80053e4:	a201      	add	r2, pc, #4	; (adr r2, 80053ec <HAL_TIM_ReadCapturedValue+0x1c>)
 80053e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ea:	bf00      	nop
 80053ec:	08005421 	.word	0x08005421
 80053f0:	08005449 	.word	0x08005449
 80053f4:	08005449 	.word	0x08005449
 80053f8:	08005449 	.word	0x08005449
 80053fc:	0800542b 	.word	0x0800542b
 8005400:	08005449 	.word	0x08005449
 8005404:	08005449 	.word	0x08005449
 8005408:	08005449 	.word	0x08005449
 800540c:	08005435 	.word	0x08005435
 8005410:	08005449 	.word	0x08005449
 8005414:	08005449 	.word	0x08005449
 8005418:	08005449 	.word	0x08005449
 800541c:	0800543f 	.word	0x0800543f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005426:	60fb      	str	r3, [r7, #12]

      break;
 8005428:	e00f      	b.n	800544a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005430:	60fb      	str	r3, [r7, #12]

      break;
 8005432:	e00a      	b.n	800544a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543a:	60fb      	str	r3, [r7, #12]

      break;
 800543c:	e005      	b.n	800544a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005444:	60fb      	str	r3, [r7, #12]

      break;
 8005446:	e000      	b.n	800544a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005448:	bf00      	nop
  }

  return tmpreg;
 800544a:	68fb      	ldr	r3, [r7, #12]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3714      	adds	r7, #20
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a40      	ldr	r2, [pc, #256]	; (80055bc <TIM_Base_SetConfig+0x114>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d013      	beq.n	80054e8 <TIM_Base_SetConfig+0x40>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c6:	d00f      	beq.n	80054e8 <TIM_Base_SetConfig+0x40>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a3d      	ldr	r2, [pc, #244]	; (80055c0 <TIM_Base_SetConfig+0x118>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d00b      	beq.n	80054e8 <TIM_Base_SetConfig+0x40>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a3c      	ldr	r2, [pc, #240]	; (80055c4 <TIM_Base_SetConfig+0x11c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d007      	beq.n	80054e8 <TIM_Base_SetConfig+0x40>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a3b      	ldr	r2, [pc, #236]	; (80055c8 <TIM_Base_SetConfig+0x120>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d003      	beq.n	80054e8 <TIM_Base_SetConfig+0x40>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a3a      	ldr	r2, [pc, #232]	; (80055cc <TIM_Base_SetConfig+0x124>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d108      	bne.n	80054fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a2f      	ldr	r2, [pc, #188]	; (80055bc <TIM_Base_SetConfig+0x114>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d02b      	beq.n	800555a <TIM_Base_SetConfig+0xb2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005508:	d027      	beq.n	800555a <TIM_Base_SetConfig+0xb2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a2c      	ldr	r2, [pc, #176]	; (80055c0 <TIM_Base_SetConfig+0x118>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d023      	beq.n	800555a <TIM_Base_SetConfig+0xb2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a2b      	ldr	r2, [pc, #172]	; (80055c4 <TIM_Base_SetConfig+0x11c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d01f      	beq.n	800555a <TIM_Base_SetConfig+0xb2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a2a      	ldr	r2, [pc, #168]	; (80055c8 <TIM_Base_SetConfig+0x120>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d01b      	beq.n	800555a <TIM_Base_SetConfig+0xb2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a29      	ldr	r2, [pc, #164]	; (80055cc <TIM_Base_SetConfig+0x124>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d017      	beq.n	800555a <TIM_Base_SetConfig+0xb2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a28      	ldr	r2, [pc, #160]	; (80055d0 <TIM_Base_SetConfig+0x128>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d013      	beq.n	800555a <TIM_Base_SetConfig+0xb2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a27      	ldr	r2, [pc, #156]	; (80055d4 <TIM_Base_SetConfig+0x12c>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d00f      	beq.n	800555a <TIM_Base_SetConfig+0xb2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a26      	ldr	r2, [pc, #152]	; (80055d8 <TIM_Base_SetConfig+0x130>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00b      	beq.n	800555a <TIM_Base_SetConfig+0xb2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a25      	ldr	r2, [pc, #148]	; (80055dc <TIM_Base_SetConfig+0x134>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d007      	beq.n	800555a <TIM_Base_SetConfig+0xb2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a24      	ldr	r2, [pc, #144]	; (80055e0 <TIM_Base_SetConfig+0x138>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d003      	beq.n	800555a <TIM_Base_SetConfig+0xb2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a23      	ldr	r2, [pc, #140]	; (80055e4 <TIM_Base_SetConfig+0x13c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d108      	bne.n	800556c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	4313      	orrs	r3, r2
 800556a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	4313      	orrs	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a0a      	ldr	r2, [pc, #40]	; (80055bc <TIM_Base_SetConfig+0x114>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d003      	beq.n	80055a0 <TIM_Base_SetConfig+0xf8>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a0c      	ldr	r2, [pc, #48]	; (80055cc <TIM_Base_SetConfig+0x124>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d103      	bne.n	80055a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	691a      	ldr	r2, [r3, #16]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	615a      	str	r2, [r3, #20]
}
 80055ae:	bf00      	nop
 80055b0:	3714      	adds	r7, #20
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	40010000 	.word	0x40010000
 80055c0:	40000400 	.word	0x40000400
 80055c4:	40000800 	.word	0x40000800
 80055c8:	40000c00 	.word	0x40000c00
 80055cc:	40010400 	.word	0x40010400
 80055d0:	40014000 	.word	0x40014000
 80055d4:	40014400 	.word	0x40014400
 80055d8:	40014800 	.word	0x40014800
 80055dc:	40001800 	.word	0x40001800
 80055e0:	40001c00 	.word	0x40001c00
 80055e4:	40002000 	.word	0x40002000

080055e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	f023 0201 	bic.w	r2, r3, #1
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4b2b      	ldr	r3, [pc, #172]	; (80056c0 <TIM_OC1_SetConfig+0xd8>)
 8005614:	4013      	ands	r3, r2
 8005616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 0303 	bic.w	r3, r3, #3
 800561e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	4313      	orrs	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f023 0302 	bic.w	r3, r3, #2
 8005630:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a21      	ldr	r2, [pc, #132]	; (80056c4 <TIM_OC1_SetConfig+0xdc>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d003      	beq.n	800564c <TIM_OC1_SetConfig+0x64>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a20      	ldr	r2, [pc, #128]	; (80056c8 <TIM_OC1_SetConfig+0xe0>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d10c      	bne.n	8005666 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f023 0308 	bic.w	r3, r3, #8
 8005652:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	4313      	orrs	r3, r2
 800565c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f023 0304 	bic.w	r3, r3, #4
 8005664:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a16      	ldr	r2, [pc, #88]	; (80056c4 <TIM_OC1_SetConfig+0xdc>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d003      	beq.n	8005676 <TIM_OC1_SetConfig+0x8e>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a15      	ldr	r2, [pc, #84]	; (80056c8 <TIM_OC1_SetConfig+0xe0>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d111      	bne.n	800569a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800567c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005684:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	4313      	orrs	r3, r2
 800568e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	4313      	orrs	r3, r2
 8005698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	621a      	str	r2, [r3, #32]
}
 80056b4:	bf00      	nop
 80056b6:	371c      	adds	r7, #28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	fffeff8f 	.word	0xfffeff8f
 80056c4:	40010000 	.word	0x40010000
 80056c8:	40010400 	.word	0x40010400

080056cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b087      	sub	sp, #28
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	f023 0210 	bic.w	r2, r3, #16
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	4b2e      	ldr	r3, [pc, #184]	; (80057b0 <TIM_OC2_SetConfig+0xe4>)
 80056f8:	4013      	ands	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	021b      	lsls	r3, r3, #8
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	4313      	orrs	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f023 0320 	bic.w	r3, r3, #32
 8005716:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	011b      	lsls	r3, r3, #4
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	4313      	orrs	r3, r2
 8005722:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a23      	ldr	r2, [pc, #140]	; (80057b4 <TIM_OC2_SetConfig+0xe8>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d003      	beq.n	8005734 <TIM_OC2_SetConfig+0x68>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a22      	ldr	r2, [pc, #136]	; (80057b8 <TIM_OC2_SetConfig+0xec>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d10d      	bne.n	8005750 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800573a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	4313      	orrs	r3, r2
 8005746:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800574e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a18      	ldr	r2, [pc, #96]	; (80057b4 <TIM_OC2_SetConfig+0xe8>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d003      	beq.n	8005760 <TIM_OC2_SetConfig+0x94>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a17      	ldr	r2, [pc, #92]	; (80057b8 <TIM_OC2_SetConfig+0xec>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d113      	bne.n	8005788 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005766:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800576e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	4313      	orrs	r3, r2
 800577a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	4313      	orrs	r3, r2
 8005786:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	621a      	str	r2, [r3, #32]
}
 80057a2:	bf00      	nop
 80057a4:	371c      	adds	r7, #28
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	feff8fff 	.word	0xfeff8fff
 80057b4:	40010000 	.word	0x40010000
 80057b8:	40010400 	.word	0x40010400

080057bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	4b2d      	ldr	r3, [pc, #180]	; (800589c <TIM_OC3_SetConfig+0xe0>)
 80057e8:	4013      	ands	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 0303 	bic.w	r3, r3, #3
 80057f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	021b      	lsls	r3, r3, #8
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	4313      	orrs	r3, r2
 8005810:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a22      	ldr	r2, [pc, #136]	; (80058a0 <TIM_OC3_SetConfig+0xe4>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d003      	beq.n	8005822 <TIM_OC3_SetConfig+0x66>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a21      	ldr	r2, [pc, #132]	; (80058a4 <TIM_OC3_SetConfig+0xe8>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d10d      	bne.n	800583e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005828:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	021b      	lsls	r3, r3, #8
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	4313      	orrs	r3, r2
 8005834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800583c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a17      	ldr	r2, [pc, #92]	; (80058a0 <TIM_OC3_SetConfig+0xe4>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d003      	beq.n	800584e <TIM_OC3_SetConfig+0x92>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a16      	ldr	r2, [pc, #88]	; (80058a4 <TIM_OC3_SetConfig+0xe8>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d113      	bne.n	8005876 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800585c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	011b      	lsls	r3, r3, #4
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	4313      	orrs	r3, r2
 8005868:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	011b      	lsls	r3, r3, #4
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	4313      	orrs	r3, r2
 8005874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	621a      	str	r2, [r3, #32]
}
 8005890:	bf00      	nop
 8005892:	371c      	adds	r7, #28
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	fffeff8f 	.word	0xfffeff8f
 80058a0:	40010000 	.word	0x40010000
 80058a4:	40010400 	.word	0x40010400

080058a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4b1e      	ldr	r3, [pc, #120]	; (800594c <TIM_OC4_SetConfig+0xa4>)
 80058d4:	4013      	ands	r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	021b      	lsls	r3, r3, #8
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	031b      	lsls	r3, r3, #12
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a13      	ldr	r2, [pc, #76]	; (8005950 <TIM_OC4_SetConfig+0xa8>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d003      	beq.n	8005910 <TIM_OC4_SetConfig+0x68>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a12      	ldr	r2, [pc, #72]	; (8005954 <TIM_OC4_SetConfig+0xac>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d109      	bne.n	8005924 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005916:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	019b      	lsls	r3, r3, #6
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	4313      	orrs	r3, r2
 8005922:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	621a      	str	r2, [r3, #32]
}
 800593e:	bf00      	nop
 8005940:	371c      	adds	r7, #28
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	feff8fff 	.word	0xfeff8fff
 8005950:	40010000 	.word	0x40010000
 8005954:	40010400 	.word	0x40010400

08005958 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005958:	b480      	push	{r7}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800597e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	4b1b      	ldr	r3, [pc, #108]	; (80059f0 <TIM_OC5_SetConfig+0x98>)
 8005984:	4013      	ands	r3, r2
 8005986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005998:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	041b      	lsls	r3, r3, #16
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a12      	ldr	r2, [pc, #72]	; (80059f4 <TIM_OC5_SetConfig+0x9c>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d003      	beq.n	80059b6 <TIM_OC5_SetConfig+0x5e>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a11      	ldr	r2, [pc, #68]	; (80059f8 <TIM_OC5_SetConfig+0xa0>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d109      	bne.n	80059ca <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	021b      	lsls	r3, r3, #8
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	621a      	str	r2, [r3, #32]
}
 80059e4:	bf00      	nop
 80059e6:	371c      	adds	r7, #28
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	fffeff8f 	.word	0xfffeff8f
 80059f4:	40010000 	.word	0x40010000
 80059f8:	40010400 	.word	0x40010400

080059fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	4b1c      	ldr	r3, [pc, #112]	; (8005a98 <TIM_OC6_SetConfig+0x9c>)
 8005a28:	4013      	ands	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	021b      	lsls	r3, r3, #8
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	051b      	lsls	r3, r3, #20
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a13      	ldr	r2, [pc, #76]	; (8005a9c <TIM_OC6_SetConfig+0xa0>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d003      	beq.n	8005a5c <TIM_OC6_SetConfig+0x60>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a12      	ldr	r2, [pc, #72]	; (8005aa0 <TIM_OC6_SetConfig+0xa4>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d109      	bne.n	8005a70 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	029b      	lsls	r3, r3, #10
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	621a      	str	r2, [r3, #32]
}
 8005a8a:	bf00      	nop
 8005a8c:	371c      	adds	r7, #28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	feff8fff 	.word	0xfeff8fff
 8005a9c:	40010000 	.word	0x40010000
 8005aa0:	40010400 	.word	0x40010400

08005aa4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	4b3e      	ldr	r3, [pc, #248]	; (8005bc8 <TIM_SlaveTimer_SetConfig+0x124>)
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	2b70      	cmp	r3, #112	; 0x70
 8005aec:	d01a      	beq.n	8005b24 <TIM_SlaveTimer_SetConfig+0x80>
 8005aee:	2b70      	cmp	r3, #112	; 0x70
 8005af0:	d860      	bhi.n	8005bb4 <TIM_SlaveTimer_SetConfig+0x110>
 8005af2:	2b60      	cmp	r3, #96	; 0x60
 8005af4:	d054      	beq.n	8005ba0 <TIM_SlaveTimer_SetConfig+0xfc>
 8005af6:	2b60      	cmp	r3, #96	; 0x60
 8005af8:	d85c      	bhi.n	8005bb4 <TIM_SlaveTimer_SetConfig+0x110>
 8005afa:	2b50      	cmp	r3, #80	; 0x50
 8005afc:	d046      	beq.n	8005b8c <TIM_SlaveTimer_SetConfig+0xe8>
 8005afe:	2b50      	cmp	r3, #80	; 0x50
 8005b00:	d858      	bhi.n	8005bb4 <TIM_SlaveTimer_SetConfig+0x110>
 8005b02:	2b40      	cmp	r3, #64	; 0x40
 8005b04:	d019      	beq.n	8005b3a <TIM_SlaveTimer_SetConfig+0x96>
 8005b06:	2b40      	cmp	r3, #64	; 0x40
 8005b08:	d854      	bhi.n	8005bb4 <TIM_SlaveTimer_SetConfig+0x110>
 8005b0a:	2b30      	cmp	r3, #48	; 0x30
 8005b0c:	d055      	beq.n	8005bba <TIM_SlaveTimer_SetConfig+0x116>
 8005b0e:	2b30      	cmp	r3, #48	; 0x30
 8005b10:	d850      	bhi.n	8005bb4 <TIM_SlaveTimer_SetConfig+0x110>
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	d051      	beq.n	8005bba <TIM_SlaveTimer_SetConfig+0x116>
 8005b16:	2b20      	cmp	r3, #32
 8005b18:	d84c      	bhi.n	8005bb4 <TIM_SlaveTimer_SetConfig+0x110>
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d04d      	beq.n	8005bba <TIM_SlaveTimer_SetConfig+0x116>
 8005b1e:	2b10      	cmp	r3, #16
 8005b20:	d04b      	beq.n	8005bba <TIM_SlaveTimer_SetConfig+0x116>
 8005b22:	e047      	b.n	8005bb4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6818      	ldr	r0, [r3, #0]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	68d9      	ldr	r1, [r3, #12]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	f000 f9d3 	bl	8005ede <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005b38:	e040      	b.n	8005bbc <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b05      	cmp	r3, #5
 8005b40:	d101      	bne.n	8005b46 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e03b      	b.n	8005bbe <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6a1a      	ldr	r2, [r3, #32]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 0201 	bic.w	r2, r2, #1
 8005b5c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b6c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	011b      	lsls	r3, r3, #4
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	621a      	str	r2, [r3, #32]
      break;
 8005b8a:	e017      	b.n	8005bbc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6818      	ldr	r0, [r3, #0]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	6899      	ldr	r1, [r3, #8]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	461a      	mov	r2, r3
 8005b9a:	f000 f88b 	bl	8005cb4 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005b9e:	e00d      	b.n	8005bbc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6818      	ldr	r0, [r3, #0]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	6899      	ldr	r1, [r3, #8]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	461a      	mov	r2, r3
 8005bae:	f000 f8ed 	bl	8005d8c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005bb2:	e003      	b.n	8005bbc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	75fb      	strb	r3, [r7, #23]
      break;
 8005bb8:	e000      	b.n	8005bbc <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005bba:	bf00      	nop
  }

  return status;
 8005bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	fffefff8 	.word	0xfffefff8

08005bcc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b087      	sub	sp, #28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
 8005bd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	f023 0201 	bic.w	r2, r3, #1
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	4a28      	ldr	r2, [pc, #160]	; (8005c98 <TIM_TI1_SetConfig+0xcc>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d01b      	beq.n	8005c32 <TIM_TI1_SetConfig+0x66>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c00:	d017      	beq.n	8005c32 <TIM_TI1_SetConfig+0x66>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	4a25      	ldr	r2, [pc, #148]	; (8005c9c <TIM_TI1_SetConfig+0xd0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d013      	beq.n	8005c32 <TIM_TI1_SetConfig+0x66>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4a24      	ldr	r2, [pc, #144]	; (8005ca0 <TIM_TI1_SetConfig+0xd4>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d00f      	beq.n	8005c32 <TIM_TI1_SetConfig+0x66>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4a23      	ldr	r2, [pc, #140]	; (8005ca4 <TIM_TI1_SetConfig+0xd8>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d00b      	beq.n	8005c32 <TIM_TI1_SetConfig+0x66>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4a22      	ldr	r2, [pc, #136]	; (8005ca8 <TIM_TI1_SetConfig+0xdc>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d007      	beq.n	8005c32 <TIM_TI1_SetConfig+0x66>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	4a21      	ldr	r2, [pc, #132]	; (8005cac <TIM_TI1_SetConfig+0xe0>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d003      	beq.n	8005c32 <TIM_TI1_SetConfig+0x66>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4a20      	ldr	r2, [pc, #128]	; (8005cb0 <TIM_TI1_SetConfig+0xe4>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d101      	bne.n	8005c36 <TIM_TI1_SetConfig+0x6a>
 8005c32:	2301      	movs	r3, #1
 8005c34:	e000      	b.n	8005c38 <TIM_TI1_SetConfig+0x6c>
 8005c36:	2300      	movs	r3, #0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d008      	beq.n	8005c4e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f023 0303 	bic.w	r3, r3, #3
 8005c42:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	617b      	str	r3, [r7, #20]
 8005c4c:	e003      	b.n	8005c56 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f043 0301 	orr.w	r3, r3, #1
 8005c54:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	011b      	lsls	r3, r3, #4
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f023 030a 	bic.w	r3, r3, #10
 8005c70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	f003 030a 	and.w	r3, r3, #10
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	621a      	str	r2, [r3, #32]
}
 8005c8a:	bf00      	nop
 8005c8c:	371c      	adds	r7, #28
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	40010000 	.word	0x40010000
 8005c9c:	40000400 	.word	0x40000400
 8005ca0:	40000800 	.word	0x40000800
 8005ca4:	40000c00 	.word	0x40000c00
 8005ca8:	40010400 	.word	0x40010400
 8005cac:	40014000 	.word	0x40014000
 8005cb0:	40001800 	.word	0x40001800

08005cb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	f023 0201 	bic.w	r2, r3, #1
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	011b      	lsls	r3, r3, #4
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f023 030a 	bic.w	r3, r3, #10
 8005cf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	621a      	str	r2, [r3, #32]
}
 8005d06:	bf00      	nop
 8005d08:	371c      	adds	r7, #28
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b087      	sub	sp, #28
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	60f8      	str	r0, [r7, #12]
 8005d1a:	60b9      	str	r1, [r7, #8]
 8005d1c:	607a      	str	r2, [r7, #4]
 8005d1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	f023 0210 	bic.w	r2, r3, #16
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	021b      	lsls	r3, r3, #8
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	031b      	lsls	r3, r3, #12
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d64:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	011b      	lsls	r3, r3, #4
 8005d6a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	621a      	str	r2, [r3, #32]
}
 8005d80:	bf00      	nop
 8005d82:	371c      	adds	r7, #28
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	f023 0210 	bic.w	r2, r3, #16
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005db6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	031b      	lsls	r3, r3, #12
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dc8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	011b      	lsls	r3, r3, #4
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	621a      	str	r2, [r3, #32]
}
 8005de0:	bf00      	nop
 8005de2:	371c      	adds	r7, #28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
 8005df8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f023 0303 	bic.w	r3, r3, #3
 8005e18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e28:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	011b      	lsls	r3, r3, #4
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005e3c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	021b      	lsls	r3, r3, #8
 8005e42:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	621a      	str	r2, [r3, #32]
}
 8005e58:	bf00      	nop
 8005e5a:	371c      	adds	r7, #28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
 8005e70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e90:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	021b      	lsls	r3, r3, #8
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ea2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	031b      	lsls	r3, r3, #12
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005eb6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	031b      	lsls	r3, r3, #12
 8005ebc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	621a      	str	r2, [r3, #32]
}
 8005ed2:	bf00      	nop
 8005ed4:	371c      	adds	r7, #28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b087      	sub	sp, #28
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	60f8      	str	r0, [r7, #12]
 8005ee6:	60b9      	str	r1, [r7, #8]
 8005ee8:	607a      	str	r2, [r7, #4]
 8005eea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ef8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	021a      	lsls	r2, r3, #8
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	431a      	orrs	r2, r3
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	609a      	str	r2, [r3, #8]
}
 8005f12:	bf00      	nop
 8005f14:	371c      	adds	r7, #28
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b087      	sub	sp, #28
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	60f8      	str	r0, [r7, #12]
 8005f26:	60b9      	str	r1, [r7, #8]
 8005f28:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f003 031f 	and.w	r3, r3, #31
 8005f30:	2201      	movs	r2, #1
 8005f32:	fa02 f303 	lsl.w	r3, r2, r3
 8005f36:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6a1a      	ldr	r2, [r3, #32]
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	43db      	mvns	r3, r3
 8005f40:	401a      	ands	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6a1a      	ldr	r2, [r3, #32]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	f003 031f 	and.w	r3, r3, #31
 8005f50:	6879      	ldr	r1, [r7, #4]
 8005f52:	fa01 f303 	lsl.w	r3, r1, r3
 8005f56:	431a      	orrs	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	621a      	str	r2, [r3, #32]
}
 8005f5c:	bf00      	nop
 8005f5e:	371c      	adds	r7, #28
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d101      	bne.n	8005f80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	e06d      	b.n	800605c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a30      	ldr	r2, [pc, #192]	; (8006068 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d004      	beq.n	8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a2f      	ldr	r2, [pc, #188]	; (800606c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d108      	bne.n	8005fc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005fba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fcc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a20      	ldr	r2, [pc, #128]	; (8006068 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d022      	beq.n	8006030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff2:	d01d      	beq.n	8006030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a1d      	ldr	r2, [pc, #116]	; (8006070 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d018      	beq.n	8006030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a1c      	ldr	r2, [pc, #112]	; (8006074 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d013      	beq.n	8006030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a1a      	ldr	r2, [pc, #104]	; (8006078 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d00e      	beq.n	8006030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a15      	ldr	r2, [pc, #84]	; (800606c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d009      	beq.n	8006030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a16      	ldr	r2, [pc, #88]	; (800607c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d004      	beq.n	8006030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a15      	ldr	r2, [pc, #84]	; (8006080 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d10c      	bne.n	800604a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006036:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	4313      	orrs	r3, r2
 8006040:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	40010000 	.word	0x40010000
 800606c:	40010400 	.word	0x40010400
 8006070:	40000400 	.word	0x40000400
 8006074:	40000800 	.word	0x40000800
 8006078:	40000c00 	.word	0x40000c00
 800607c:	40014000 	.word	0x40014000
 8006080:	40001800 	.word	0x40001800

08006084 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e040      	b.n	8006154 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d106      	bne.n	80060e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fc f848 	bl	8002178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2224      	movs	r2, #36	; 0x24
 80060ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 0201 	bic.w	r2, r2, #1
 80060fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f8c0 	bl	8006284 <UART_SetConfig>
 8006104:	4603      	mov	r3, r0
 8006106:	2b01      	cmp	r3, #1
 8006108:	d101      	bne.n	800610e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e022      	b.n	8006154 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006112:	2b00      	cmp	r3, #0
 8006114:	d002      	beq.n	800611c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 fb18 	bl	800674c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685a      	ldr	r2, [r3, #4]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800612a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689a      	ldr	r2, [r3, #8]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800613a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f042 0201 	orr.w	r2, r2, #1
 800614a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 fb9f 	bl	8006890 <UART_CheckIdleState>
 8006152:	4603      	mov	r3, r0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b08a      	sub	sp, #40	; 0x28
 8006160:	af02      	add	r7, sp, #8
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	603b      	str	r3, [r7, #0]
 8006168:	4613      	mov	r3, r2
 800616a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006170:	2b20      	cmp	r3, #32
 8006172:	f040 8081 	bne.w	8006278 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <HAL_UART_Transmit+0x26>
 800617c:	88fb      	ldrh	r3, [r7, #6]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e079      	b.n	800627a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800618c:	2b01      	cmp	r3, #1
 800618e:	d101      	bne.n	8006194 <HAL_UART_Transmit+0x38>
 8006190:	2302      	movs	r3, #2
 8006192:	e072      	b.n	800627a <HAL_UART_Transmit+0x11e>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2221      	movs	r2, #33	; 0x21
 80061a8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061aa:	f7fc f8bd 	bl	8002328 <HAL_GetTick>
 80061ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	88fa      	ldrh	r2, [r7, #6]
 80061b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	88fa      	ldrh	r2, [r7, #6]
 80061bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c8:	d108      	bne.n	80061dc <HAL_UART_Transmit+0x80>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d104      	bne.n	80061dc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80061d2:	2300      	movs	r3, #0
 80061d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	61bb      	str	r3, [r7, #24]
 80061da:	e003      	b.n	80061e4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061e0:	2300      	movs	r3, #0
 80061e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80061ec:	e02c      	b.n	8006248 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	2200      	movs	r2, #0
 80061f6:	2180      	movs	r1, #128	; 0x80
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 fb92 	bl	8006922 <UART_WaitOnFlagUntilTimeout>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e038      	b.n	800627a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10b      	bne.n	8006226 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	461a      	mov	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800621c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	3302      	adds	r3, #2
 8006222:	61bb      	str	r3, [r7, #24]
 8006224:	e007      	b.n	8006236 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	781a      	ldrb	r2, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	3301      	adds	r3, #1
 8006234:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800623c:	b29b      	uxth	r3, r3
 800623e:	3b01      	subs	r3, #1
 8006240:	b29a      	uxth	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800624e:	b29b      	uxth	r3, r3
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1cc      	bne.n	80061ee <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	2200      	movs	r2, #0
 800625c:	2140      	movs	r1, #64	; 0x40
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 fb5f 	bl	8006922 <UART_WaitOnFlagUntilTimeout>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e005      	b.n	800627a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2220      	movs	r2, #32
 8006272:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006274:	2300      	movs	r3, #0
 8006276:	e000      	b.n	800627a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006278:	2302      	movs	r3, #2
  }
}
 800627a:	4618      	mov	r0, r3
 800627c:	3720      	adds	r7, #32
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
	...

08006284 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b088      	sub	sp, #32
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800628c:	2300      	movs	r3, #0
 800628e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	689a      	ldr	r2, [r3, #8]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	431a      	orrs	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	431a      	orrs	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	69db      	ldr	r3, [r3, #28]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	4ba6      	ldr	r3, [pc, #664]	; (8006548 <UART_SetConfig+0x2c4>)
 80062b0:	4013      	ands	r3, r2
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	6812      	ldr	r2, [r2, #0]
 80062b6:	6979      	ldr	r1, [r7, #20]
 80062b8:	430b      	orrs	r3, r1
 80062ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68da      	ldr	r2, [r3, #12]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	4313      	orrs	r3, r2
 80062e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a94      	ldr	r2, [pc, #592]	; (800654c <UART_SetConfig+0x2c8>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d120      	bne.n	8006342 <UART_SetConfig+0xbe>
 8006300:	4b93      	ldr	r3, [pc, #588]	; (8006550 <UART_SetConfig+0x2cc>)
 8006302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006306:	f003 0303 	and.w	r3, r3, #3
 800630a:	2b03      	cmp	r3, #3
 800630c:	d816      	bhi.n	800633c <UART_SetConfig+0xb8>
 800630e:	a201      	add	r2, pc, #4	; (adr r2, 8006314 <UART_SetConfig+0x90>)
 8006310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006314:	08006325 	.word	0x08006325
 8006318:	08006331 	.word	0x08006331
 800631c:	0800632b 	.word	0x0800632b
 8006320:	08006337 	.word	0x08006337
 8006324:	2301      	movs	r3, #1
 8006326:	77fb      	strb	r3, [r7, #31]
 8006328:	e150      	b.n	80065cc <UART_SetConfig+0x348>
 800632a:	2302      	movs	r3, #2
 800632c:	77fb      	strb	r3, [r7, #31]
 800632e:	e14d      	b.n	80065cc <UART_SetConfig+0x348>
 8006330:	2304      	movs	r3, #4
 8006332:	77fb      	strb	r3, [r7, #31]
 8006334:	e14a      	b.n	80065cc <UART_SetConfig+0x348>
 8006336:	2308      	movs	r3, #8
 8006338:	77fb      	strb	r3, [r7, #31]
 800633a:	e147      	b.n	80065cc <UART_SetConfig+0x348>
 800633c:	2310      	movs	r3, #16
 800633e:	77fb      	strb	r3, [r7, #31]
 8006340:	e144      	b.n	80065cc <UART_SetConfig+0x348>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a83      	ldr	r2, [pc, #524]	; (8006554 <UART_SetConfig+0x2d0>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d132      	bne.n	80063b2 <UART_SetConfig+0x12e>
 800634c:	4b80      	ldr	r3, [pc, #512]	; (8006550 <UART_SetConfig+0x2cc>)
 800634e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006352:	f003 030c 	and.w	r3, r3, #12
 8006356:	2b0c      	cmp	r3, #12
 8006358:	d828      	bhi.n	80063ac <UART_SetConfig+0x128>
 800635a:	a201      	add	r2, pc, #4	; (adr r2, 8006360 <UART_SetConfig+0xdc>)
 800635c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006360:	08006395 	.word	0x08006395
 8006364:	080063ad 	.word	0x080063ad
 8006368:	080063ad 	.word	0x080063ad
 800636c:	080063ad 	.word	0x080063ad
 8006370:	080063a1 	.word	0x080063a1
 8006374:	080063ad 	.word	0x080063ad
 8006378:	080063ad 	.word	0x080063ad
 800637c:	080063ad 	.word	0x080063ad
 8006380:	0800639b 	.word	0x0800639b
 8006384:	080063ad 	.word	0x080063ad
 8006388:	080063ad 	.word	0x080063ad
 800638c:	080063ad 	.word	0x080063ad
 8006390:	080063a7 	.word	0x080063a7
 8006394:	2300      	movs	r3, #0
 8006396:	77fb      	strb	r3, [r7, #31]
 8006398:	e118      	b.n	80065cc <UART_SetConfig+0x348>
 800639a:	2302      	movs	r3, #2
 800639c:	77fb      	strb	r3, [r7, #31]
 800639e:	e115      	b.n	80065cc <UART_SetConfig+0x348>
 80063a0:	2304      	movs	r3, #4
 80063a2:	77fb      	strb	r3, [r7, #31]
 80063a4:	e112      	b.n	80065cc <UART_SetConfig+0x348>
 80063a6:	2308      	movs	r3, #8
 80063a8:	77fb      	strb	r3, [r7, #31]
 80063aa:	e10f      	b.n	80065cc <UART_SetConfig+0x348>
 80063ac:	2310      	movs	r3, #16
 80063ae:	77fb      	strb	r3, [r7, #31]
 80063b0:	e10c      	b.n	80065cc <UART_SetConfig+0x348>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a68      	ldr	r2, [pc, #416]	; (8006558 <UART_SetConfig+0x2d4>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d120      	bne.n	80063fe <UART_SetConfig+0x17a>
 80063bc:	4b64      	ldr	r3, [pc, #400]	; (8006550 <UART_SetConfig+0x2cc>)
 80063be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063c6:	2b30      	cmp	r3, #48	; 0x30
 80063c8:	d013      	beq.n	80063f2 <UART_SetConfig+0x16e>
 80063ca:	2b30      	cmp	r3, #48	; 0x30
 80063cc:	d814      	bhi.n	80063f8 <UART_SetConfig+0x174>
 80063ce:	2b20      	cmp	r3, #32
 80063d0:	d009      	beq.n	80063e6 <UART_SetConfig+0x162>
 80063d2:	2b20      	cmp	r3, #32
 80063d4:	d810      	bhi.n	80063f8 <UART_SetConfig+0x174>
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <UART_SetConfig+0x15c>
 80063da:	2b10      	cmp	r3, #16
 80063dc:	d006      	beq.n	80063ec <UART_SetConfig+0x168>
 80063de:	e00b      	b.n	80063f8 <UART_SetConfig+0x174>
 80063e0:	2300      	movs	r3, #0
 80063e2:	77fb      	strb	r3, [r7, #31]
 80063e4:	e0f2      	b.n	80065cc <UART_SetConfig+0x348>
 80063e6:	2302      	movs	r3, #2
 80063e8:	77fb      	strb	r3, [r7, #31]
 80063ea:	e0ef      	b.n	80065cc <UART_SetConfig+0x348>
 80063ec:	2304      	movs	r3, #4
 80063ee:	77fb      	strb	r3, [r7, #31]
 80063f0:	e0ec      	b.n	80065cc <UART_SetConfig+0x348>
 80063f2:	2308      	movs	r3, #8
 80063f4:	77fb      	strb	r3, [r7, #31]
 80063f6:	e0e9      	b.n	80065cc <UART_SetConfig+0x348>
 80063f8:	2310      	movs	r3, #16
 80063fa:	77fb      	strb	r3, [r7, #31]
 80063fc:	e0e6      	b.n	80065cc <UART_SetConfig+0x348>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a56      	ldr	r2, [pc, #344]	; (800655c <UART_SetConfig+0x2d8>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d120      	bne.n	800644a <UART_SetConfig+0x1c6>
 8006408:	4b51      	ldr	r3, [pc, #324]	; (8006550 <UART_SetConfig+0x2cc>)
 800640a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800640e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006412:	2bc0      	cmp	r3, #192	; 0xc0
 8006414:	d013      	beq.n	800643e <UART_SetConfig+0x1ba>
 8006416:	2bc0      	cmp	r3, #192	; 0xc0
 8006418:	d814      	bhi.n	8006444 <UART_SetConfig+0x1c0>
 800641a:	2b80      	cmp	r3, #128	; 0x80
 800641c:	d009      	beq.n	8006432 <UART_SetConfig+0x1ae>
 800641e:	2b80      	cmp	r3, #128	; 0x80
 8006420:	d810      	bhi.n	8006444 <UART_SetConfig+0x1c0>
 8006422:	2b00      	cmp	r3, #0
 8006424:	d002      	beq.n	800642c <UART_SetConfig+0x1a8>
 8006426:	2b40      	cmp	r3, #64	; 0x40
 8006428:	d006      	beq.n	8006438 <UART_SetConfig+0x1b4>
 800642a:	e00b      	b.n	8006444 <UART_SetConfig+0x1c0>
 800642c:	2300      	movs	r3, #0
 800642e:	77fb      	strb	r3, [r7, #31]
 8006430:	e0cc      	b.n	80065cc <UART_SetConfig+0x348>
 8006432:	2302      	movs	r3, #2
 8006434:	77fb      	strb	r3, [r7, #31]
 8006436:	e0c9      	b.n	80065cc <UART_SetConfig+0x348>
 8006438:	2304      	movs	r3, #4
 800643a:	77fb      	strb	r3, [r7, #31]
 800643c:	e0c6      	b.n	80065cc <UART_SetConfig+0x348>
 800643e:	2308      	movs	r3, #8
 8006440:	77fb      	strb	r3, [r7, #31]
 8006442:	e0c3      	b.n	80065cc <UART_SetConfig+0x348>
 8006444:	2310      	movs	r3, #16
 8006446:	77fb      	strb	r3, [r7, #31]
 8006448:	e0c0      	b.n	80065cc <UART_SetConfig+0x348>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a44      	ldr	r2, [pc, #272]	; (8006560 <UART_SetConfig+0x2dc>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d125      	bne.n	80064a0 <UART_SetConfig+0x21c>
 8006454:	4b3e      	ldr	r3, [pc, #248]	; (8006550 <UART_SetConfig+0x2cc>)
 8006456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800645a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800645e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006462:	d017      	beq.n	8006494 <UART_SetConfig+0x210>
 8006464:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006468:	d817      	bhi.n	800649a <UART_SetConfig+0x216>
 800646a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800646e:	d00b      	beq.n	8006488 <UART_SetConfig+0x204>
 8006470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006474:	d811      	bhi.n	800649a <UART_SetConfig+0x216>
 8006476:	2b00      	cmp	r3, #0
 8006478:	d003      	beq.n	8006482 <UART_SetConfig+0x1fe>
 800647a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800647e:	d006      	beq.n	800648e <UART_SetConfig+0x20a>
 8006480:	e00b      	b.n	800649a <UART_SetConfig+0x216>
 8006482:	2300      	movs	r3, #0
 8006484:	77fb      	strb	r3, [r7, #31]
 8006486:	e0a1      	b.n	80065cc <UART_SetConfig+0x348>
 8006488:	2302      	movs	r3, #2
 800648a:	77fb      	strb	r3, [r7, #31]
 800648c:	e09e      	b.n	80065cc <UART_SetConfig+0x348>
 800648e:	2304      	movs	r3, #4
 8006490:	77fb      	strb	r3, [r7, #31]
 8006492:	e09b      	b.n	80065cc <UART_SetConfig+0x348>
 8006494:	2308      	movs	r3, #8
 8006496:	77fb      	strb	r3, [r7, #31]
 8006498:	e098      	b.n	80065cc <UART_SetConfig+0x348>
 800649a:	2310      	movs	r3, #16
 800649c:	77fb      	strb	r3, [r7, #31]
 800649e:	e095      	b.n	80065cc <UART_SetConfig+0x348>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a2f      	ldr	r2, [pc, #188]	; (8006564 <UART_SetConfig+0x2e0>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d125      	bne.n	80064f6 <UART_SetConfig+0x272>
 80064aa:	4b29      	ldr	r3, [pc, #164]	; (8006550 <UART_SetConfig+0x2cc>)
 80064ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064b8:	d017      	beq.n	80064ea <UART_SetConfig+0x266>
 80064ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064be:	d817      	bhi.n	80064f0 <UART_SetConfig+0x26c>
 80064c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064c4:	d00b      	beq.n	80064de <UART_SetConfig+0x25a>
 80064c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ca:	d811      	bhi.n	80064f0 <UART_SetConfig+0x26c>
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d003      	beq.n	80064d8 <UART_SetConfig+0x254>
 80064d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064d4:	d006      	beq.n	80064e4 <UART_SetConfig+0x260>
 80064d6:	e00b      	b.n	80064f0 <UART_SetConfig+0x26c>
 80064d8:	2301      	movs	r3, #1
 80064da:	77fb      	strb	r3, [r7, #31]
 80064dc:	e076      	b.n	80065cc <UART_SetConfig+0x348>
 80064de:	2302      	movs	r3, #2
 80064e0:	77fb      	strb	r3, [r7, #31]
 80064e2:	e073      	b.n	80065cc <UART_SetConfig+0x348>
 80064e4:	2304      	movs	r3, #4
 80064e6:	77fb      	strb	r3, [r7, #31]
 80064e8:	e070      	b.n	80065cc <UART_SetConfig+0x348>
 80064ea:	2308      	movs	r3, #8
 80064ec:	77fb      	strb	r3, [r7, #31]
 80064ee:	e06d      	b.n	80065cc <UART_SetConfig+0x348>
 80064f0:	2310      	movs	r3, #16
 80064f2:	77fb      	strb	r3, [r7, #31]
 80064f4:	e06a      	b.n	80065cc <UART_SetConfig+0x348>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a1b      	ldr	r2, [pc, #108]	; (8006568 <UART_SetConfig+0x2e4>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d138      	bne.n	8006572 <UART_SetConfig+0x2ee>
 8006500:	4b13      	ldr	r3, [pc, #76]	; (8006550 <UART_SetConfig+0x2cc>)
 8006502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006506:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800650a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800650e:	d017      	beq.n	8006540 <UART_SetConfig+0x2bc>
 8006510:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006514:	d82a      	bhi.n	800656c <UART_SetConfig+0x2e8>
 8006516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800651a:	d00b      	beq.n	8006534 <UART_SetConfig+0x2b0>
 800651c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006520:	d824      	bhi.n	800656c <UART_SetConfig+0x2e8>
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <UART_SetConfig+0x2aa>
 8006526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800652a:	d006      	beq.n	800653a <UART_SetConfig+0x2b6>
 800652c:	e01e      	b.n	800656c <UART_SetConfig+0x2e8>
 800652e:	2300      	movs	r3, #0
 8006530:	77fb      	strb	r3, [r7, #31]
 8006532:	e04b      	b.n	80065cc <UART_SetConfig+0x348>
 8006534:	2302      	movs	r3, #2
 8006536:	77fb      	strb	r3, [r7, #31]
 8006538:	e048      	b.n	80065cc <UART_SetConfig+0x348>
 800653a:	2304      	movs	r3, #4
 800653c:	77fb      	strb	r3, [r7, #31]
 800653e:	e045      	b.n	80065cc <UART_SetConfig+0x348>
 8006540:	2308      	movs	r3, #8
 8006542:	77fb      	strb	r3, [r7, #31]
 8006544:	e042      	b.n	80065cc <UART_SetConfig+0x348>
 8006546:	bf00      	nop
 8006548:	efff69f3 	.word	0xefff69f3
 800654c:	40011000 	.word	0x40011000
 8006550:	40023800 	.word	0x40023800
 8006554:	40004400 	.word	0x40004400
 8006558:	40004800 	.word	0x40004800
 800655c:	40004c00 	.word	0x40004c00
 8006560:	40005000 	.word	0x40005000
 8006564:	40011400 	.word	0x40011400
 8006568:	40007800 	.word	0x40007800
 800656c:	2310      	movs	r3, #16
 800656e:	77fb      	strb	r3, [r7, #31]
 8006570:	e02c      	b.n	80065cc <UART_SetConfig+0x348>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a72      	ldr	r2, [pc, #456]	; (8006740 <UART_SetConfig+0x4bc>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d125      	bne.n	80065c8 <UART_SetConfig+0x344>
 800657c:	4b71      	ldr	r3, [pc, #452]	; (8006744 <UART_SetConfig+0x4c0>)
 800657e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006582:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006586:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800658a:	d017      	beq.n	80065bc <UART_SetConfig+0x338>
 800658c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006590:	d817      	bhi.n	80065c2 <UART_SetConfig+0x33e>
 8006592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006596:	d00b      	beq.n	80065b0 <UART_SetConfig+0x32c>
 8006598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800659c:	d811      	bhi.n	80065c2 <UART_SetConfig+0x33e>
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <UART_SetConfig+0x326>
 80065a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065a6:	d006      	beq.n	80065b6 <UART_SetConfig+0x332>
 80065a8:	e00b      	b.n	80065c2 <UART_SetConfig+0x33e>
 80065aa:	2300      	movs	r3, #0
 80065ac:	77fb      	strb	r3, [r7, #31]
 80065ae:	e00d      	b.n	80065cc <UART_SetConfig+0x348>
 80065b0:	2302      	movs	r3, #2
 80065b2:	77fb      	strb	r3, [r7, #31]
 80065b4:	e00a      	b.n	80065cc <UART_SetConfig+0x348>
 80065b6:	2304      	movs	r3, #4
 80065b8:	77fb      	strb	r3, [r7, #31]
 80065ba:	e007      	b.n	80065cc <UART_SetConfig+0x348>
 80065bc:	2308      	movs	r3, #8
 80065be:	77fb      	strb	r3, [r7, #31]
 80065c0:	e004      	b.n	80065cc <UART_SetConfig+0x348>
 80065c2:	2310      	movs	r3, #16
 80065c4:	77fb      	strb	r3, [r7, #31]
 80065c6:	e001      	b.n	80065cc <UART_SetConfig+0x348>
 80065c8:	2310      	movs	r3, #16
 80065ca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	69db      	ldr	r3, [r3, #28]
 80065d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065d4:	d15b      	bne.n	800668e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80065d6:	7ffb      	ldrb	r3, [r7, #31]
 80065d8:	2b08      	cmp	r3, #8
 80065da:	d828      	bhi.n	800662e <UART_SetConfig+0x3aa>
 80065dc:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <UART_SetConfig+0x360>)
 80065de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e2:	bf00      	nop
 80065e4:	08006609 	.word	0x08006609
 80065e8:	08006611 	.word	0x08006611
 80065ec:	08006619 	.word	0x08006619
 80065f0:	0800662f 	.word	0x0800662f
 80065f4:	0800661f 	.word	0x0800661f
 80065f8:	0800662f 	.word	0x0800662f
 80065fc:	0800662f 	.word	0x0800662f
 8006600:	0800662f 	.word	0x0800662f
 8006604:	08006627 	.word	0x08006627
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006608:	f7fd fb98 	bl	8003d3c <HAL_RCC_GetPCLK1Freq>
 800660c:	61b8      	str	r0, [r7, #24]
        break;
 800660e:	e013      	b.n	8006638 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006610:	f7fd fba8 	bl	8003d64 <HAL_RCC_GetPCLK2Freq>
 8006614:	61b8      	str	r0, [r7, #24]
        break;
 8006616:	e00f      	b.n	8006638 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006618:	4b4b      	ldr	r3, [pc, #300]	; (8006748 <UART_SetConfig+0x4c4>)
 800661a:	61bb      	str	r3, [r7, #24]
        break;
 800661c:	e00c      	b.n	8006638 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800661e:	f7fd fabb 	bl	8003b98 <HAL_RCC_GetSysClockFreq>
 8006622:	61b8      	str	r0, [r7, #24]
        break;
 8006624:	e008      	b.n	8006638 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800662a:	61bb      	str	r3, [r7, #24]
        break;
 800662c:	e004      	b.n	8006638 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	77bb      	strb	r3, [r7, #30]
        break;
 8006636:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d074      	beq.n	8006728 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	005a      	lsls	r2, r3, #1
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	085b      	lsrs	r3, r3, #1
 8006648:	441a      	add	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006652:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	2b0f      	cmp	r3, #15
 8006658:	d916      	bls.n	8006688 <UART_SetConfig+0x404>
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006660:	d212      	bcs.n	8006688 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	b29b      	uxth	r3, r3
 8006666:	f023 030f 	bic.w	r3, r3, #15
 800666a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	085b      	lsrs	r3, r3, #1
 8006670:	b29b      	uxth	r3, r3
 8006672:	f003 0307 	and.w	r3, r3, #7
 8006676:	b29a      	uxth	r2, r3
 8006678:	89fb      	ldrh	r3, [r7, #14]
 800667a:	4313      	orrs	r3, r2
 800667c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	89fa      	ldrh	r2, [r7, #14]
 8006684:	60da      	str	r2, [r3, #12]
 8006686:	e04f      	b.n	8006728 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	77bb      	strb	r3, [r7, #30]
 800668c:	e04c      	b.n	8006728 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800668e:	7ffb      	ldrb	r3, [r7, #31]
 8006690:	2b08      	cmp	r3, #8
 8006692:	d828      	bhi.n	80066e6 <UART_SetConfig+0x462>
 8006694:	a201      	add	r2, pc, #4	; (adr r2, 800669c <UART_SetConfig+0x418>)
 8006696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669a:	bf00      	nop
 800669c:	080066c1 	.word	0x080066c1
 80066a0:	080066c9 	.word	0x080066c9
 80066a4:	080066d1 	.word	0x080066d1
 80066a8:	080066e7 	.word	0x080066e7
 80066ac:	080066d7 	.word	0x080066d7
 80066b0:	080066e7 	.word	0x080066e7
 80066b4:	080066e7 	.word	0x080066e7
 80066b8:	080066e7 	.word	0x080066e7
 80066bc:	080066df 	.word	0x080066df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066c0:	f7fd fb3c 	bl	8003d3c <HAL_RCC_GetPCLK1Freq>
 80066c4:	61b8      	str	r0, [r7, #24]
        break;
 80066c6:	e013      	b.n	80066f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066c8:	f7fd fb4c 	bl	8003d64 <HAL_RCC_GetPCLK2Freq>
 80066cc:	61b8      	str	r0, [r7, #24]
        break;
 80066ce:	e00f      	b.n	80066f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066d0:	4b1d      	ldr	r3, [pc, #116]	; (8006748 <UART_SetConfig+0x4c4>)
 80066d2:	61bb      	str	r3, [r7, #24]
        break;
 80066d4:	e00c      	b.n	80066f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066d6:	f7fd fa5f 	bl	8003b98 <HAL_RCC_GetSysClockFreq>
 80066da:	61b8      	str	r0, [r7, #24]
        break;
 80066dc:	e008      	b.n	80066f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066e2:	61bb      	str	r3, [r7, #24]
        break;
 80066e4:	e004      	b.n	80066f0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	77bb      	strb	r3, [r7, #30]
        break;
 80066ee:	bf00      	nop
    }

    if (pclk != 0U)
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d018      	beq.n	8006728 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	085a      	lsrs	r2, r3, #1
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	441a      	add	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	fbb2 f3f3 	udiv	r3, r2, r3
 8006708:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	2b0f      	cmp	r3, #15
 800670e:	d909      	bls.n	8006724 <UART_SetConfig+0x4a0>
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006716:	d205      	bcs.n	8006724 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	b29a      	uxth	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	60da      	str	r2, [r3, #12]
 8006722:	e001      	b.n	8006728 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006734:	7fbb      	ldrb	r3, [r7, #30]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3720      	adds	r7, #32
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	40007c00 	.word	0x40007c00
 8006744:	40023800 	.word	0x40023800
 8006748:	00f42400 	.word	0x00f42400

0800674c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00a      	beq.n	8006776 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677a:	f003 0302 	and.w	r3, r3, #2
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00a      	beq.n	8006798 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679c:	f003 0304 	and.w	r3, r3, #4
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00a      	beq.n	80067ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067be:	f003 0308 	and.w	r3, r3, #8
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00a      	beq.n	80067dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	430a      	orrs	r2, r1
 80067da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e0:	f003 0310 	and.w	r3, r3, #16
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00a      	beq.n	80067fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	430a      	orrs	r2, r1
 80067fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006802:	f003 0320 	and.w	r3, r3, #32
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00a      	beq.n	8006820 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	430a      	orrs	r2, r1
 800681e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006828:	2b00      	cmp	r3, #0
 800682a:	d01a      	beq.n	8006862 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	430a      	orrs	r2, r1
 8006840:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800684a:	d10a      	bne.n	8006862 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00a      	beq.n	8006884 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	430a      	orrs	r2, r1
 8006882:	605a      	str	r2, [r3, #4]
  }
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af02      	add	r7, sp, #8
 8006896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068a0:	f7fb fd42 	bl	8002328 <HAL_GetTick>
 80068a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0308 	and.w	r3, r3, #8
 80068b0:	2b08      	cmp	r3, #8
 80068b2:	d10e      	bne.n	80068d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f82d 	bl	8006922 <UART_WaitOnFlagUntilTimeout>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e023      	b.n	800691a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0304 	and.w	r3, r3, #4
 80068dc:	2b04      	cmp	r3, #4
 80068de:	d10e      	bne.n	80068fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f817 	bl	8006922 <UART_WaitOnFlagUntilTimeout>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e00d      	b.n	800691a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2220      	movs	r2, #32
 8006902:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2220      	movs	r2, #32
 8006908:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b09c      	sub	sp, #112	; 0x70
 8006926:	af00      	add	r7, sp, #0
 8006928:	60f8      	str	r0, [r7, #12]
 800692a:	60b9      	str	r1, [r7, #8]
 800692c:	603b      	str	r3, [r7, #0]
 800692e:	4613      	mov	r3, r2
 8006930:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006932:	e0a5      	b.n	8006a80 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693a:	f000 80a1 	beq.w	8006a80 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800693e:	f7fb fcf3 	bl	8002328 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800694a:	429a      	cmp	r2, r3
 800694c:	d302      	bcc.n	8006954 <UART_WaitOnFlagUntilTimeout+0x32>
 800694e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006950:	2b00      	cmp	r3, #0
 8006952:	d13e      	bne.n	80069d2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800695c:	e853 3f00 	ldrex	r3, [r3]
 8006960:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006964:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006968:	667b      	str	r3, [r7, #100]	; 0x64
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	461a      	mov	r2, r3
 8006970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006972:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006974:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006976:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006978:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1e6      	bne.n	8006954 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	3308      	adds	r3, #8
 800698c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006990:	e853 3f00 	ldrex	r3, [r3]
 8006994:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006998:	f023 0301 	bic.w	r3, r3, #1
 800699c:	663b      	str	r3, [r7, #96]	; 0x60
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	3308      	adds	r3, #8
 80069a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80069a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80069a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069ae:	e841 2300 	strex	r3, r2, [r1]
 80069b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80069b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1e5      	bne.n	8006986 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2220      	movs	r2, #32
 80069be:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2220      	movs	r2, #32
 80069c4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e067      	b.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0304 	and.w	r3, r3, #4
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d04f      	beq.n	8006a80 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ee:	d147      	bne.n	8006a80 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a02:	e853 3f00 	ldrex	r3, [r3]
 8006a06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	461a      	mov	r2, r3
 8006a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a18:	637b      	str	r3, [r7, #52]	; 0x34
 8006a1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a20:	e841 2300 	strex	r3, r2, [r1]
 8006a24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1e6      	bne.n	80069fa <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3308      	adds	r3, #8
 8006a32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	e853 3f00 	ldrex	r3, [r3]
 8006a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f023 0301 	bic.w	r3, r3, #1
 8006a42:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	3308      	adds	r3, #8
 8006a4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a4c:	623a      	str	r2, [r7, #32]
 8006a4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a50:	69f9      	ldr	r1, [r7, #28]
 8006a52:	6a3a      	ldr	r2, [r7, #32]
 8006a54:	e841 2300 	strex	r3, r2, [r1]
 8006a58:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1e5      	bne.n	8006a2c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2220      	movs	r2, #32
 8006a64:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e010      	b.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	69da      	ldr	r2, [r3, #28]
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	4013      	ands	r3, r2
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	bf0c      	ite	eq
 8006a90:	2301      	moveq	r3, #1
 8006a92:	2300      	movne	r3, #0
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	461a      	mov	r2, r3
 8006a98:	79fb      	ldrb	r3, [r7, #7]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	f43f af4a 	beq.w	8006934 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3770      	adds	r7, #112	; 0x70
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
	...

08006aac <__libc_init_array>:
 8006aac:	b570      	push	{r4, r5, r6, lr}
 8006aae:	4d0d      	ldr	r5, [pc, #52]	; (8006ae4 <__libc_init_array+0x38>)
 8006ab0:	4c0d      	ldr	r4, [pc, #52]	; (8006ae8 <__libc_init_array+0x3c>)
 8006ab2:	1b64      	subs	r4, r4, r5
 8006ab4:	10a4      	asrs	r4, r4, #2
 8006ab6:	2600      	movs	r6, #0
 8006ab8:	42a6      	cmp	r6, r4
 8006aba:	d109      	bne.n	8006ad0 <__libc_init_array+0x24>
 8006abc:	4d0b      	ldr	r5, [pc, #44]	; (8006aec <__libc_init_array+0x40>)
 8006abe:	4c0c      	ldr	r4, [pc, #48]	; (8006af0 <__libc_init_array+0x44>)
 8006ac0:	f000 f864 	bl	8006b8c <_init>
 8006ac4:	1b64      	subs	r4, r4, r5
 8006ac6:	10a4      	asrs	r4, r4, #2
 8006ac8:	2600      	movs	r6, #0
 8006aca:	42a6      	cmp	r6, r4
 8006acc:	d105      	bne.n	8006ada <__libc_init_array+0x2e>
 8006ace:	bd70      	pop	{r4, r5, r6, pc}
 8006ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ad4:	4798      	blx	r3
 8006ad6:	3601      	adds	r6, #1
 8006ad8:	e7ee      	b.n	8006ab8 <__libc_init_array+0xc>
 8006ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ade:	4798      	blx	r3
 8006ae0:	3601      	adds	r6, #1
 8006ae2:	e7f2      	b.n	8006aca <__libc_init_array+0x1e>
 8006ae4:	08007098 	.word	0x08007098
 8006ae8:	08007098 	.word	0x08007098
 8006aec:	08007098 	.word	0x08007098
 8006af0:	0800709c 	.word	0x0800709c

08006af4 <memset>:
 8006af4:	4402      	add	r2, r0
 8006af6:	4603      	mov	r3, r0
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d100      	bne.n	8006afe <memset+0xa>
 8006afc:	4770      	bx	lr
 8006afe:	f803 1b01 	strb.w	r1, [r3], #1
 8006b02:	e7f9      	b.n	8006af8 <memset+0x4>

08006b04 <__utoa>:
 8006b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b06:	4c1f      	ldr	r4, [pc, #124]	; (8006b84 <__utoa+0x80>)
 8006b08:	b08b      	sub	sp, #44	; 0x2c
 8006b0a:	4605      	mov	r5, r0
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	466e      	mov	r6, sp
 8006b10:	f104 0c20 	add.w	ip, r4, #32
 8006b14:	6820      	ldr	r0, [r4, #0]
 8006b16:	6861      	ldr	r1, [r4, #4]
 8006b18:	4637      	mov	r7, r6
 8006b1a:	c703      	stmia	r7!, {r0, r1}
 8006b1c:	3408      	adds	r4, #8
 8006b1e:	4564      	cmp	r4, ip
 8006b20:	463e      	mov	r6, r7
 8006b22:	d1f7      	bne.n	8006b14 <__utoa+0x10>
 8006b24:	7921      	ldrb	r1, [r4, #4]
 8006b26:	7139      	strb	r1, [r7, #4]
 8006b28:	1e91      	subs	r1, r2, #2
 8006b2a:	6820      	ldr	r0, [r4, #0]
 8006b2c:	6038      	str	r0, [r7, #0]
 8006b2e:	2922      	cmp	r1, #34	; 0x22
 8006b30:	f04f 0100 	mov.w	r1, #0
 8006b34:	d904      	bls.n	8006b40 <__utoa+0x3c>
 8006b36:	7019      	strb	r1, [r3, #0]
 8006b38:	460b      	mov	r3, r1
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	b00b      	add	sp, #44	; 0x2c
 8006b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b40:	1e58      	subs	r0, r3, #1
 8006b42:	4684      	mov	ip, r0
 8006b44:	fbb5 f7f2 	udiv	r7, r5, r2
 8006b48:	fb02 5617 	mls	r6, r2, r7, r5
 8006b4c:	3628      	adds	r6, #40	; 0x28
 8006b4e:	446e      	add	r6, sp
 8006b50:	460c      	mov	r4, r1
 8006b52:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006b56:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006b5a:	462e      	mov	r6, r5
 8006b5c:	42b2      	cmp	r2, r6
 8006b5e:	f101 0101 	add.w	r1, r1, #1
 8006b62:	463d      	mov	r5, r7
 8006b64:	d9ee      	bls.n	8006b44 <__utoa+0x40>
 8006b66:	2200      	movs	r2, #0
 8006b68:	545a      	strb	r2, [r3, r1]
 8006b6a:	1919      	adds	r1, r3, r4
 8006b6c:	1aa5      	subs	r5, r4, r2
 8006b6e:	42aa      	cmp	r2, r5
 8006b70:	dae3      	bge.n	8006b3a <__utoa+0x36>
 8006b72:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006b76:	780e      	ldrb	r6, [r1, #0]
 8006b78:	7006      	strb	r6, [r0, #0]
 8006b7a:	3201      	adds	r2, #1
 8006b7c:	f801 5901 	strb.w	r5, [r1], #-1
 8006b80:	e7f4      	b.n	8006b6c <__utoa+0x68>
 8006b82:	bf00      	nop
 8006b84:	08007068 	.word	0x08007068

08006b88 <utoa>:
 8006b88:	f7ff bfbc 	b.w	8006b04 <__utoa>

08006b8c <_init>:
 8006b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8e:	bf00      	nop
 8006b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b92:	bc08      	pop	{r3}
 8006b94:	469e      	mov	lr, r3
 8006b96:	4770      	bx	lr

08006b98 <_fini>:
 8006b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9a:	bf00      	nop
 8006b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b9e:	bc08      	pop	{r3}
 8006ba0:	469e      	mov	lr, r3
 8006ba2:	4770      	bx	lr
