
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006904  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  08006afc  08006afc  00016afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007004  08007004  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007004  08007004  00017004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800700c  0800700c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800700c  0800700c  0001700c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007010  08007010  00017010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  2000000c  08007020  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08007020  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000189ed  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003857  00000000  00000000  00038a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  0003c280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  0003d578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c3d8  00000000  00000000  0003e6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019548  00000000  00000000  0006aab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107b42  00000000  00000000  00083ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018bb3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d84  00000000  00000000  0018bb90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006ae4 	.word	0x08006ae4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08006ae4 	.word	0x08006ae4

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	b29a      	uxth	r2, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <uartTransmit+0x24>)
 8000556:	f005 fdf7 	bl	8006148 <HAL_UART_Transmit>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	2000026c 	.word	0x2000026c

08000568 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 8000572:	683a      	ldr	r2, [r7, #0]
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	4619      	mov	r1, r3
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f006 fab0 	bl	8006ae0 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff fe57 	bl	8000238 <strlen>
 800058a:	4603      	mov	r3, r0
 800058c:	b29a      	uxth	r2, r3
 800058e:	f107 010c 	add.w	r1, r7, #12
 8000592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <uartTransmitNumber+0x3c>)
 8000598:	f005 fdd6 	bl	8006148 <HAL_UART_Transmit>
}
 800059c:	bf00      	nop
 800059e:	3718      	adds	r7, #24
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	2000026c 	.word	0x2000026c

080005a8 <wakeup_ltc6811>:
//----------------------------------------------------------------------

// Wakeup LTC6811 idle
//----------------------------------------------------------------------
void wakeup_ltc6811(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<LTC6811_DEVICES; i++)
 80005ae:	2300      	movs	r3, #0
 80005b0:	71fb      	strb	r3, [r7, #7]
 80005b2:	e011      	b.n	80005d8 <wakeup_ltc6811+0x30>
	{
		ISOCS_ENABLE();
 80005b4:	2200      	movs	r2, #0
 80005b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ba:	480b      	ldr	r0, [pc, #44]	; (80005e8 <wakeup_ltc6811+0x40>)
 80005bc:	f002 fcf2 	bl	8002fa4 <HAL_GPIO_WritePin>
		HAL_Delay(2);														//isoSPI braucht Zeit bis ready
 80005c0:	2002      	movs	r0, #2
 80005c2:	f001 fe55 	bl	8002270 <HAL_Delay>
//		HAL_SPI_Transmit(&hspi4, (uint8_t*)0xFF, 1, 100);
		ISOCS_DISABLE();
 80005c6:	2201      	movs	r2, #1
 80005c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005cc:	4806      	ldr	r0, [pc, #24]	; (80005e8 <wakeup_ltc6811+0x40>)
 80005ce:	f002 fce9 	bl	8002fa4 <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<LTC6811_DEVICES; i++)
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	3301      	adds	r3, #1
 80005d6:	71fb      	strb	r3, [r7, #7]
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d0ea      	beq.n	80005b4 <wakeup_ltc6811+0xc>
	}
}
 80005de:	bf00      	nop
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40021000 	.word	0x40021000

080005ec <ltc6811>:
//----------------------------------------------------------------------

// Broadcast Command
//----------------------------------------------------------------------
void ltc6811(uint16_t command)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]
	// PEC berechnen, Anhand Command
	uint16_t pec;
	uint8_t cmd[4];
	pec = peccommand(command);
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 f89b 	bl	8000734 <peccommand>
 80005fe:	4603      	mov	r3, r0
 8000600:	81bb      	strh	r3, [r7, #12]
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000602:	f7ff ffd1 	bl	80005a8 <wakeup_ltc6811>

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	0a1b      	lsrs	r3, r3, #8
 800060a:	b29b      	uxth	r3, r3
 800060c:	b2db      	uxtb	r3, r3
 800060e:	f003 0307 	and.w	r3, r3, #7
 8000612:	b2db      	uxtb	r3, r3
 8000614:	723b      	strb	r3, [r7, #8]
	cmd[1] = (command & 0xFF);
 8000616:	88fb      	ldrh	r3, [r7, #6]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	727b      	strb	r3, [r7, #9]
	cmd[2] = ((pec >> 8) & 0xFF);
 800061c:	89bb      	ldrh	r3, [r7, #12]
 800061e:	0a1b      	lsrs	r3, r3, #8
 8000620:	b29b      	uxth	r3, r3
 8000622:	b2db      	uxtb	r3, r3
 8000624:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec & 0xFE);
 8000626:	89bb      	ldrh	r3, [r7, #12]
 8000628:	b2db      	uxtb	r3, r3
 800062a:	f023 0301 	bic.w	r3, r3, #1
 800062e:	b2db      	uxtb	r3, r3
 8000630:	72fb      	strb	r3, [r7, #11]

	// ISOCS einschalten
	ISOCS_ENABLE();
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000638:	4813      	ldr	r0, [pc, #76]	; (8000688 <ltc6811+0x9c>)
 800063a:	f002 fcb3 	bl	8002fa4 <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 800063e:	f107 0108 	add.w	r1, r7, #8
 8000642:	2364      	movs	r3, #100	; 0x64
 8000644:	2204      	movs	r2, #4
 8000646:	4811      	ldr	r0, [pc, #68]	; (800068c <ltc6811+0xa0>)
 8000648:	f003 fe6d 	bl	8004326 <HAL_SPI_Transmit>

	// Wenn Command = STCOMM ist dann muessen noch 72 Takte uebertragen werden
	if (command == STCOMM)
 800064c:	88fb      	ldrh	r3, [r7, #6]
 800064e:	f240 7223 	movw	r2, #1827	; 0x723
 8000652:	4293      	cmp	r3, r2
 8000654:	d10e      	bne.n	8000674 <ltc6811+0x88>
	{
		// 72 = 9 * 8 Bit Daten
		for (uint8_t i = 0; i < 9; i++)
 8000656:	2300      	movs	r3, #0
 8000658:	73fb      	strb	r3, [r7, #15]
 800065a:	e008      	b.n	800066e <ltc6811+0x82>
		{
			// Dummy-Byte uebertragen
			HAL_SPI_Transmit(&hspi4, (uint8_t*) 0xFF, 1, 100);
 800065c:	2364      	movs	r3, #100	; 0x64
 800065e:	2201      	movs	r2, #1
 8000660:	21ff      	movs	r1, #255	; 0xff
 8000662:	480a      	ldr	r0, [pc, #40]	; (800068c <ltc6811+0xa0>)
 8000664:	f003 fe5f 	bl	8004326 <HAL_SPI_Transmit>
		for (uint8_t i = 0; i < 9; i++)
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	3301      	adds	r3, #1
 800066c:	73fb      	strb	r3, [r7, #15]
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	2b08      	cmp	r3, #8
 8000672:	d9f3      	bls.n	800065c <ltc6811+0x70>
		}
	}
	
	// ISOCS ausschalten
	ISOCS_DISABLE();
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800067a:	4803      	ldr	r0, [pc, #12]	; (8000688 <ltc6811+0x9c>)
 800067c:	f002 fc92 	bl	8002fa4 <HAL_GPIO_WritePin>
	// Ende der Uebertragung
}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40021000 	.word	0x40021000
 800068c:	2000010c 	.word	0x2000010c

08000690 <ltc6811_read>:
//----------------------------------------------------------------------

// Broadcast Read Command
//----------------------------------------------------------------------
void ltc6811_read(uint16_t command, uint8_t* data)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	80fb      	strh	r3, [r7, #6]
	// PEC berechnen, Anhand Command
	uint16_t pec;
	uint8_t cmd[4];
	pec = peccommand(command);
 800069c:	88fb      	ldrh	r3, [r7, #6]
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f848 	bl	8000734 <peccommand>
 80006a4:	4603      	mov	r3, r0
 80006a6:	81bb      	strh	r3, [r7, #12]
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 80006a8:	f7ff ff7e 	bl	80005a8 <wakeup_ltc6811>

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 80006ac:	88fb      	ldrh	r3, [r7, #6]
 80006ae:	0a1b      	lsrs	r3, r3, #8
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	f003 0307 	and.w	r3, r3, #7
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	723b      	strb	r3, [r7, #8]
	cmd[1] = (command & 0xFF);
 80006bc:	88fb      	ldrh	r3, [r7, #6]
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	727b      	strb	r3, [r7, #9]
	cmd[2] = ((pec >> 8) & 0xFF);
 80006c2:	89bb      	ldrh	r3, [r7, #12]
 80006c4:	0a1b      	lsrs	r3, r3, #8
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec & 0xFE);
 80006cc:	89bb      	ldrh	r3, [r7, #12]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	f023 0301 	bic.w	r3, r3, #1
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	72fb      	strb	r3, [r7, #11]

	// ISOCS einschalten
	ISOCS_ENABLE();
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006de:	4813      	ldr	r0, [pc, #76]	; (800072c <ltc6811_read+0x9c>)
 80006e0:	f002 fc60 	bl	8002fa4 <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 80006e4:	f107 0108 	add.w	r1, r7, #8
 80006e8:	2364      	movs	r3, #100	; 0x64
 80006ea:	2204      	movs	r2, #4
 80006ec:	4810      	ldr	r0, [pc, #64]	; (8000730 <ltc6811_read+0xa0>)
 80006ee:	f003 fe1a 	bl	8004326 <HAL_SPI_Transmit>
	
	// Data empfangen
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 80006f2:	2300      	movs	r3, #0
 80006f4:	73fb      	strb	r3, [r7, #15]
 80006f6:	e00c      	b.n	8000712 <ltc6811_read+0x82>
	{
		// Dummy Byte senden
		HAL_SPI_Receive(&hspi4, &data[i*8], 8, 100);
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	00db      	lsls	r3, r3, #3
 80006fc:	461a      	mov	r2, r3
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	1899      	adds	r1, r3, r2
 8000702:	2364      	movs	r3, #100	; 0x64
 8000704:	2208      	movs	r2, #8
 8000706:	480a      	ldr	r0, [pc, #40]	; (8000730 <ltc6811_read+0xa0>)
 8000708:	f003 ff7b 	bl	8004602 <HAL_SPI_Receive>
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	3301      	adds	r3, #1
 8000710:	73fb      	strb	r3, [r7, #15]
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d0ef      	beq.n	80006f8 <ltc6811_read+0x68>
	}
	
	// ISOCS ausschalten
	ISOCS_DISABLE();
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800071e:	4803      	ldr	r0, [pc, #12]	; (800072c <ltc6811_read+0x9c>)
 8000720:	f002 fc40 	bl	8002fa4 <HAL_GPIO_WritePin>
	// Ende der Uebertragung
}
 8000724:	bf00      	nop
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40021000 	.word	0x40021000
 8000730:	2000010c 	.word	0x2000010c

08000734 <peccommand>:
//----------------------------------------------------------------------

// Pec Command bauen
//----------------------------------------------------------------------
uint16_t peccommand(uint16_t command)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	80fb      	strh	r3, [r7, #6]
	uint8_t pec[2];															// pec = Zwischenspeicher 16-Bit Command in 2x 8-Bit Bytes
	
	pec[1] = (command & 0xFF);												// pec[1] = lower Command Byte
 800073e:	88fb      	ldrh	r3, [r7, #6]
 8000740:	b2db      	uxtb	r3, r3
 8000742:	737b      	strb	r3, [r7, #13]
	pec[0] = ((command >> 8) & 0x07);										// pec[0] = upper Command Byte
 8000744:	88fb      	ldrh	r3, [r7, #6]
 8000746:	0a1b      	lsrs	r3, r3, #8
 8000748:	b29b      	uxth	r3, r3
 800074a:	b2db      	uxtb	r3, r3
 800074c:	f003 0307 	and.w	r3, r3, #7
 8000750:	b2db      	uxtb	r3, r3
 8000752:	733b      	strb	r3, [r7, #12]
	
	return peclookup(2, pec);
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	4619      	mov	r1, r3
 800075a:	2002      	movs	r0, #2
 800075c:	f000 f806 	bl	800076c <peclookup>
 8000760:	4603      	mov	r3, r0
}
 8000762:	4618      	mov	r0, r3
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <peclookup>:
//----------------------------------------------------------------------

// Pec kalculieren (Datasheet ltc6811 Page 76, Datasheet ltc6811 Page 72)
//----------------------------------------------------------------------
uint16_t peclookup(uint8_t len,	uint8_t *data)								// len = Anzahl Byte, data = Daten fuer die Pec ausgewaehlt wird
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	6039      	str	r1, [r7, #0]
 8000776:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;												// remainder = Zwischenspeicher Pec, addr = Zwischenspeicher Addresse
	remainder = 16;															// Initialisiere reminder mit 16 (0b0000000000010000)
 8000778:	2310      	movs	r3, #16
 800077a:	81fb      	strh	r3, [r7, #14]
	
	// Schleife fuer die Pec-Calculation
	for(uint8_t i = 0; i < len; i++)
 800077c:	2300      	movs	r3, #0
 800077e:	737b      	strb	r3, [r7, #13]
 8000780:	e019      	b.n	80007b6 <peclookup+0x4a>
	{
		// Kalkuliere Pec Anhand der Lookuptabelle
		addr = ((remainder >> 7) ^ data[i]) & 0xFF;							// Tabellenaddresse berechnen
 8000782:	89fb      	ldrh	r3, [r7, #14]
 8000784:	09db      	lsrs	r3, r3, #7
 8000786:	b29a      	uxth	r2, r3
 8000788:	7b7b      	ldrb	r3, [r7, #13]
 800078a:	6839      	ldr	r1, [r7, #0]
 800078c:	440b      	add	r3, r1
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	b29b      	uxth	r3, r3
 8000792:	4053      	eors	r3, r2
 8000794:	b29b      	uxth	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ pec15Table[addr];					// Pec berechnen
 800079a:	89fb      	ldrh	r3, [r7, #14]
 800079c:	021b      	lsls	r3, r3, #8
 800079e:	b21a      	sxth	r2, r3
 80007a0:	897b      	ldrh	r3, [r7, #10]
 80007a2:	490b      	ldr	r1, [pc, #44]	; (80007d0 <peclookup+0x64>)
 80007a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	4053      	eors	r3, r2
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i < len; i++)
 80007b0:	7b7b      	ldrb	r3, [r7, #13]
 80007b2:	3301      	adds	r3, #1
 80007b4:	737b      	strb	r3, [r7, #13]
 80007b6:	7b7a      	ldrb	r2, [r7, #13]
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d3e1      	bcc.n	8000782 <peclookup+0x16>
	}
	
	return (remainder << 1);												// Der Pec hat eine 0 als LSB, remainder muss um 1 nach links geshiftet werden
 80007be:	89fb      	ldrh	r3, [r7, #14]
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	b29b      	uxth	r3, r3
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	08006dc4 	.word	0x08006dc4

080007d4 <ltc6811_check>:


// LTC6811 Status auslesen und auswerten
//----------------------------------------------------------------------
uint8_t ltc6811_check(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b092      	sub	sp, #72	; 0x48
 80007d8:	af00      	add	r7, sp, #0
	uint8_t tmp_data[64] = {0}, result = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	223c      	movs	r2, #60	; 0x3c
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f006 f931 	bl	8006a4c <memset>
 80007ea:	2300      	movs	r3, #0
 80007ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint16_t temp = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 80007f6:	f7ff fed7 	bl	80005a8 <wakeup_ltc6811>

	// Commands für Status senden  Test 1
	ltc6811(CVST | MD73 | ST1);
 80007fa:	f240 3027 	movw	r0, #807	; 0x327
 80007fe:	f7ff fef5 	bl	80005ec <ltc6811>
	HAL_Delay(300);
 8000802:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000806:	f001 fd33 	bl	8002270 <HAL_Delay>
	ltc6811(AXST | MD73 | ST1);
 800080a:	f240 5027 	movw	r0, #1319	; 0x527
 800080e:	f7ff feed 	bl	80005ec <ltc6811>
	HAL_Delay(300);
 8000812:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000816:	f001 fd2b 	bl	8002270 <HAL_Delay>
	ltc6811(STATST | MD73 | ST1);
 800081a:	f240 502f 	movw	r0, #1327	; 0x52f
 800081e:	f7ff fee5 	bl	80005ec <ltc6811>
	HAL_Delay(300);
 8000822:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000826:	f001 fd23 	bl	8002270 <HAL_Delay>

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 800082a:	f7ff febd 	bl	80005a8 <wakeup_ltc6811>

	// Register auslesen Test 1
	// Spannungsregister
	ltc6811_read(RDCVA, &tmp_data[0]);
 800082e:	463b      	mov	r3, r7
 8000830:	4619      	mov	r1, r3
 8000832:	2004      	movs	r0, #4
 8000834:	f7ff ff2c 	bl	8000690 <ltc6811_read>
	ltc6811_read(RDCVB, &tmp_data[8]);
 8000838:	463b      	mov	r3, r7
 800083a:	3308      	adds	r3, #8
 800083c:	4619      	mov	r1, r3
 800083e:	2006      	movs	r0, #6
 8000840:	f7ff ff26 	bl	8000690 <ltc6811_read>
	ltc6811_read(RDCVC, &tmp_data[16]);
 8000844:	463b      	mov	r3, r7
 8000846:	3310      	adds	r3, #16
 8000848:	4619      	mov	r1, r3
 800084a:	2008      	movs	r0, #8
 800084c:	f7ff ff20 	bl	8000690 <ltc6811_read>
	ltc6811_read(RDCVD, &tmp_data[24]);
 8000850:	463b      	mov	r3, r7
 8000852:	3318      	adds	r3, #24
 8000854:	4619      	mov	r1, r3
 8000856:	200a      	movs	r0, #10
 8000858:	f7ff ff1a 	bl	8000690 <ltc6811_read>

	// GPIO-Register
	ltc6811_read(RDAUXA, &tmp_data[32]);
 800085c:	463b      	mov	r3, r7
 800085e:	3320      	adds	r3, #32
 8000860:	4619      	mov	r1, r3
 8000862:	200c      	movs	r0, #12
 8000864:	f7ff ff14 	bl	8000690 <ltc6811_read>
	ltc6811_read(RDAUXB, &tmp_data[40]);
 8000868:	463b      	mov	r3, r7
 800086a:	3328      	adds	r3, #40	; 0x28
 800086c:	4619      	mov	r1, r3
 800086e:	200e      	movs	r0, #14
 8000870:	f7ff ff0e 	bl	8000690 <ltc6811_read>

	// Statusregister
	ltc6811_read(RDSTATA, &tmp_data[48]);
 8000874:	463b      	mov	r3, r7
 8000876:	3330      	adds	r3, #48	; 0x30
 8000878:	4619      	mov	r1, r3
 800087a:	2010      	movs	r0, #16
 800087c:	f7ff ff08 	bl	8000690 <ltc6811_read>
	ltc6811_read(RDSTATB, &tmp_data[56]);
 8000880:	463b      	mov	r3, r7
 8000882:	3338      	adds	r3, #56	; 0x38
 8000884:	4619      	mov	r1, r3
 8000886:	2012      	movs	r0, #18
 8000888:	f7ff ff02 	bl	8000690 <ltc6811_read>

	// Daten pruefen Test 1
	for (uint8_t i=0; i<12; i++)
 800088c:	2300      	movs	r3, #0
 800088e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000892:	e025      	b.n	80008e0 <ltc6811_check+0x10c>
	{
		temp = ((tmp_data[i*2+1]<<8)|tmp_data[i*2]);
 8000894:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	3301      	adds	r3, #1
 800089c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80008a0:	4413      	add	r3, r2
 80008a2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80008a6:	021b      	lsls	r3, r3, #8
 80008a8:	b21a      	sxth	r2, r3
 80008aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80008b4:	440b      	add	r3, r1
 80008b6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80008ba:	b21b      	sxth	r3, r3
 80008bc:	4313      	orrs	r3, r2
 80008be:	b21b      	sxth	r3, r3
 80008c0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		if (temp != 0x9555)
 80008c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80008c8:	f249 5255 	movw	r2, #38229	; 0x9555
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d002      	beq.n	80008d6 <ltc6811_check+0x102>
			result = 1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	for (uint8_t i=0; i<12; i++)
 80008d6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80008da:	3301      	adds	r3, #1
 80008dc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80008e0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80008e4:	2b0b      	cmp	r3, #11
 80008e6:	d9d5      	bls.n	8000894 <ltc6811_check+0xc0>
	}

	// Commands für Status senden Test 2
	ltc6811(CVST | MD73 | ST2);
 80008e8:	f240 3047 	movw	r0, #839	; 0x347
 80008ec:	f7ff fe7e 	bl	80005ec <ltc6811>
	HAL_Delay(300);
 80008f0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008f4:	f001 fcbc 	bl	8002270 <HAL_Delay>
	ltc6811(AXST | MD73 | ST2);
 80008f8:	f240 5047 	movw	r0, #1351	; 0x547
 80008fc:	f7ff fe76 	bl	80005ec <ltc6811>
	HAL_Delay(300);
 8000900:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000904:	f001 fcb4 	bl	8002270 <HAL_Delay>
	ltc6811(STATST | MD73 | ST2);
 8000908:	f240 504f 	movw	r0, #1359	; 0x54f
 800090c:	f7ff fe6e 	bl	80005ec <ltc6811>
	HAL_Delay(300);
 8000910:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000914:	f001 fcac 	bl	8002270 <HAL_Delay>

	// Register auslesen Test 2
	// Spannungsregister
	ltc6811_read(RDCVA, &tmp_data[0]);
 8000918:	463b      	mov	r3, r7
 800091a:	4619      	mov	r1, r3
 800091c:	2004      	movs	r0, #4
 800091e:	f7ff feb7 	bl	8000690 <ltc6811_read>
	ltc6811_read(RDCVB, &tmp_data[8]);
 8000922:	463b      	mov	r3, r7
 8000924:	3308      	adds	r3, #8
 8000926:	4619      	mov	r1, r3
 8000928:	2006      	movs	r0, #6
 800092a:	f7ff feb1 	bl	8000690 <ltc6811_read>
	ltc6811_read(RDCVC, &tmp_data[16]);
 800092e:	463b      	mov	r3, r7
 8000930:	3310      	adds	r3, #16
 8000932:	4619      	mov	r1, r3
 8000934:	2008      	movs	r0, #8
 8000936:	f7ff feab 	bl	8000690 <ltc6811_read>
	ltc6811_read(RDCVD, &tmp_data[24]);
 800093a:	463b      	mov	r3, r7
 800093c:	3318      	adds	r3, #24
 800093e:	4619      	mov	r1, r3
 8000940:	200a      	movs	r0, #10
 8000942:	f7ff fea5 	bl	8000690 <ltc6811_read>

	// GPIO-Register
	ltc6811_read(RDAUXA, &tmp_data[32]);
 8000946:	463b      	mov	r3, r7
 8000948:	3320      	adds	r3, #32
 800094a:	4619      	mov	r1, r3
 800094c:	200c      	movs	r0, #12
 800094e:	f7ff fe9f 	bl	8000690 <ltc6811_read>
	ltc6811_read(RDAUXB, &tmp_data[40]);
 8000952:	463b      	mov	r3, r7
 8000954:	3328      	adds	r3, #40	; 0x28
 8000956:	4619      	mov	r1, r3
 8000958:	200e      	movs	r0, #14
 800095a:	f7ff fe99 	bl	8000690 <ltc6811_read>

	// Statusregister
	ltc6811_read(RDSTATA, &tmp_data[48]);
 800095e:	463b      	mov	r3, r7
 8000960:	3330      	adds	r3, #48	; 0x30
 8000962:	4619      	mov	r1, r3
 8000964:	2010      	movs	r0, #16
 8000966:	f7ff fe93 	bl	8000690 <ltc6811_read>
	ltc6811_read(RDSTATB, &tmp_data[56]);
 800096a:	463b      	mov	r3, r7
 800096c:	3338      	adds	r3, #56	; 0x38
 800096e:	4619      	mov	r1, r3
 8000970:	2012      	movs	r0, #18
 8000972:	f7ff fe8d 	bl	8000690 <ltc6811_read>

	// Daten pruefen Test 2
	for (uint8_t i=0; i<12; i++)
 8000976:	2300      	movs	r3, #0
 8000978:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800097c:	e028      	b.n	80009d0 <ltc6811_check+0x1fc>
	{
		temp = ((tmp_data[i*2+1]<<8)|tmp_data[i*2]);
 800097e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	3301      	adds	r3, #1
 8000986:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800098a:	4413      	add	r3, r2
 800098c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000990:	021b      	lsls	r3, r3, #8
 8000992:	b21a      	sxth	r2, r3
 8000994:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800099e:	440b      	add	r3, r1
 80009a0:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80009a4:	b21b      	sxth	r3, r3
 80009a6:	4313      	orrs	r3, r2
 80009a8:	b21b      	sxth	r3, r3
 80009aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		if (temp != 0x6AAA)
 80009ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80009b2:	f646 22aa 	movw	r2, #27306	; 0x6aaa
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d005      	beq.n	80009c6 <ltc6811_check+0x1f2>
			result |= 2;
 80009ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80009be:	f043 0302 	orr.w	r3, r3, #2
 80009c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	for (uint8_t i=0; i<12; i++)
 80009c6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80009ca:	3301      	adds	r3, #1
 80009cc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80009d0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80009d4:	2b0b      	cmp	r3, #11
 80009d6:	d9d2      	bls.n	800097e <ltc6811_check+0x1aa>
	}
	wakeup_ltc6811();
 80009d8:	f7ff fde6 	bl	80005a8 <wakeup_ltc6811>
	ltc6811(DIAGN);
 80009dc:	f240 7015 	movw	r0, #1813	; 0x715
 80009e0:	f7ff fe04 	bl	80005ec <ltc6811>
	wakeup_ltc6811();
 80009e4:	f7ff fde0 	bl	80005a8 <wakeup_ltc6811>
	ltc6811_read(RDSTATB, &tmp_data[0]);
 80009e8:	463b      	mov	r3, r7
 80009ea:	4619      	mov	r1, r3
 80009ec:	2012      	movs	r0, #18
 80009ee:	f7ff fe4f 	bl	8000690 <ltc6811_read>

	if (tmp_data[5] & (1<<1))
 80009f2:	797b      	ldrb	r3, [r7, #5]
 80009f4:	f003 0302 	and.w	r3, r3, #2
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d005      	beq.n	8000a08 <ltc6811_check+0x234>
	{
		result |= 4;
 80009fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	ltc6811_read(RDCVA, &tmp_data[24]);
	ltc6811_read(RDCVB, &tmp_data[30]);
	ltc6811_read(RDCVC, &tmp_data[36]);
	ltc6811_read(RDCVD, &tmp_data[42]);*/

	return result;										// return result
 8000a08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3748      	adds	r7, #72	; 0x48
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <collectMiddlewareInfo>:


// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION		"\nCMSIS Version:\t\t"
	#define STRING_HAL_VERSION			"\nHAL Version:\t\t"
	#define STRING_RTOS_CMSIS_VERSION	"\nRTOS CMSIS Version:\t"
	#define STRING_RTOS_VERSION			"\nRTOS Version:\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 8000a18:	2112      	movs	r1, #18
 8000a1a:	4824      	ldr	r0, [pc, #144]	; (8000aac <collectMiddlewareInfo+0x98>)
 8000a1c:	f7ff fd90 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8000a20:	210a      	movs	r1, #10
 8000a22:	2005      	movs	r0, #5
 8000a24:	f7ff fda0 	bl	8000568 <uartTransmitNumber>
	uartTransmit(".", 1);
 8000a28:	2101      	movs	r1, #1
 8000a2a:	4821      	ldr	r0, [pc, #132]	; (8000ab0 <collectMiddlewareInfo+0x9c>)
 8000a2c:	f7ff fd88 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8000a30:	210a      	movs	r1, #10
 8000a32:	2001      	movs	r0, #1
 8000a34:	f7ff fd98 	bl	8000568 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 8000a38:	2110      	movs	r1, #16
 8000a3a:	481e      	ldr	r0, [pc, #120]	; (8000ab4 <collectMiddlewareInfo+0xa0>)
 8000a3c:	f7ff fd80 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8000a40:	f001 fc3a 	bl	80022b8 <HAL_GetHalVersion>
 8000a44:	4603      	mov	r3, r0
 8000a46:	0e1b      	lsrs	r3, r3, #24
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	210a      	movs	r1, #10
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fd8b 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000a52:	2101      	movs	r1, #1
 8000a54:	4816      	ldr	r0, [pc, #88]	; (8000ab0 <collectMiddlewareInfo+0x9c>)
 8000a56:	f7ff fd73 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 8000a5a:	f001 fc2d 	bl	80022b8 <HAL_GetHalVersion>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	0c1b      	lsrs	r3, r3, #16
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	210a      	movs	r1, #10
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fd7e 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	4810      	ldr	r0, [pc, #64]	; (8000ab0 <collectMiddlewareInfo+0x9c>)
 8000a70:	f7ff fd66 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8000a74:	f001 fc20 	bl	80022b8 <HAL_GetHalVersion>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	0a1b      	lsrs	r3, r3, #8
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	210a      	movs	r1, #10
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fd71 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000a86:	2101      	movs	r1, #1
 8000a88:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <collectMiddlewareInfo+0x9c>)
 8000a8a:	f7ff fd59 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000a8e:	f001 fc13 	bl	80022b8 <HAL_GetHalVersion>
 8000a92:	4603      	mov	r3, r0
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	210a      	movs	r1, #10
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fd65 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <collectMiddlewareInfo+0xa4>)
 8000aa2:	f7ff fd4d 	bl	8000540 <uartTransmit>
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	08006afc 	.word	0x08006afc
 8000ab0:	08006b10 	.word	0x08006b10
 8000ab4:	08006b14 	.word	0x08006b14
 8000ab8:	08006b24 	.word	0x08006b24

08000abc <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	#define STRING_GIT_BRANCH			"\nGit Branch:\t\t"
	#define STRING_GIT_HASH				"\nGit Hash:\t\t"
	#define STRING_BUILD_DATE			"\nBuild Date:\t\t"
	#define STRING_BUILD_TIME			"\nBuild Time:\t\t"

	uartTransmit(STRING_GIT_VERSION, sizeof(STRING_GIT_VERSION));
 8000ac0:	2110      	movs	r1, #16
 8000ac2:	4816      	ldr	r0, [pc, #88]	; (8000b1c <collectSoftwareInfo+0x60>)
 8000ac4:	f7ff fd3c 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8000ac8:	2108      	movs	r1, #8
 8000aca:	4815      	ldr	r0, [pc, #84]	; (8000b20 <collectSoftwareInfo+0x64>)
 8000acc:	f7ff fd38 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8000ad0:	210f      	movs	r1, #15
 8000ad2:	4814      	ldr	r0, [pc, #80]	; (8000b24 <collectSoftwareInfo+0x68>)
 8000ad4:	f7ff fd34 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8000ad8:	210c      	movs	r1, #12
 8000ada:	4813      	ldr	r0, [pc, #76]	; (8000b28 <collectSoftwareInfo+0x6c>)
 8000adc:	f7ff fd30 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8000ae0:	210d      	movs	r1, #13
 8000ae2:	4812      	ldr	r0, [pc, #72]	; (8000b2c <collectSoftwareInfo+0x70>)
 8000ae4:	f7ff fd2c 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 8000ae8:	2129      	movs	r1, #41	; 0x29
 8000aea:	4811      	ldr	r0, [pc, #68]	; (8000b30 <collectSoftwareInfo+0x74>)
 8000aec:	f7ff fd28 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 8000af0:	210f      	movs	r1, #15
 8000af2:	4810      	ldr	r0, [pc, #64]	; (8000b34 <collectSoftwareInfo+0x78>)
 8000af4:	f7ff fd24 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 8000af8:	210c      	movs	r1, #12
 8000afa:	480f      	ldr	r0, [pc, #60]	; (8000b38 <collectSoftwareInfo+0x7c>)
 8000afc:	f7ff fd20 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 8000b00:	210f      	movs	r1, #15
 8000b02:	480e      	ldr	r0, [pc, #56]	; (8000b3c <collectSoftwareInfo+0x80>)
 8000b04:	f7ff fd1c 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 8000b08:	2109      	movs	r1, #9
 8000b0a:	480d      	ldr	r0, [pc, #52]	; (8000b40 <collectSoftwareInfo+0x84>)
 8000b0c:	f7ff fd18 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);
 8000b10:	2101      	movs	r1, #1
 8000b12:	480c      	ldr	r0, [pc, #48]	; (8000b44 <collectSoftwareInfo+0x88>)
 8000b14:	f7ff fd14 	bl	8000540 <uartTransmit>
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	08006b28 	.word	0x08006b28
 8000b20:	08006b38 	.word	0x08006b38
 8000b24:	08006b40 	.word	0x08006b40
 8000b28:	08006b50 	.word	0x08006b50
 8000b2c:	08006b5c 	.word	0x08006b5c
 8000b30:	08006b6c 	.word	0x08006b6c
 8000b34:	08006b98 	.word	0x08006b98
 8000b38:	08006ba8 	.word	0x08006ba8
 8000b3c:	08006bb4 	.word	0x08006bb4
 8000b40:	08006bc4 	.word	0x08006bc4
 8000b44:	08006b24 	.word	0x08006b24

08000b48 <collectHardwareInfo>:
//----------------------------------------------------------------------

// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID		"\nSTM32 Device ID:\t"
	#define STRING_STM_REVISION			"\nSTM32 Revision ID:\t"
	#define STRING_STM_FREQ				"\nSTM32 CPU-Freq:\t\t"
	#define STRING_STM_UUID				"\nSTM32 UUID:\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 8000b4e:	2113      	movs	r1, #19
 8000b50:	483b      	ldr	r0, [pc, #236]	; (8000c40 <collectHardwareInfo+0xf8>)
 8000b52:	f7ff fcf5 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 8000b56:	f001 fbc5 	bl	80022e4 <HAL_GetDEVID>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	210a      	movs	r1, #10
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fd02 	bl	8000568 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 8000b64:	2115      	movs	r1, #21
 8000b66:	4837      	ldr	r0, [pc, #220]	; (8000c44 <collectHardwareInfo+0xfc>)
 8000b68:	f7ff fcea 	bl	8000540 <uartTransmit>
	
	switch(HAL_GetREVID())													// Mikrocontroller Revision
 8000b6c:	f001 fbae 	bl	80022cc <HAL_GetREVID>
 8000b70:	4603      	mov	r3, r0
 8000b72:	f242 0201 	movw	r2, #8193	; 0x2001
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d016      	beq.n	8000ba8 <collectHardwareInfo+0x60>
 8000b7a:	f242 0201 	movw	r2, #8193	; 0x2001
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d817      	bhi.n	8000bb2 <collectHardwareInfo+0x6a>
 8000b82:	f241 0201 	movw	r2, #4097	; 0x1001
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d004      	beq.n	8000b94 <collectHardwareInfo+0x4c>
 8000b8a:	f241 0203 	movw	r2, #4099	; 0x1003
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d005      	beq.n	8000b9e <collectHardwareInfo+0x56>
 8000b92:	e00e      	b.n	8000bb2 <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 8000b94:	2101      	movs	r1, #1
 8000b96:	482c      	ldr	r0, [pc, #176]	; (8000c48 <collectHardwareInfo+0x100>)
 8000b98:	f7ff fcd2 	bl	8000540 <uartTransmit>
			break;
 8000b9c:	e011      	b.n	8000bc2 <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	482a      	ldr	r0, [pc, #168]	; (8000c4c <collectHardwareInfo+0x104>)
 8000ba2:	f7ff fccd 	bl	8000540 <uartTransmit>
			break;
 8000ba6:	e00c      	b.n	8000bc2 <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8000ba8:	2101      	movs	r1, #1
 8000baa:	4829      	ldr	r0, [pc, #164]	; (8000c50 <collectHardwareInfo+0x108>)
 8000bac:	f7ff fcc8 	bl	8000540 <uartTransmit>
			break;
 8000bb0:	e007      	b.n	8000bc2 <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 8000bb2:	f001 fb8b 	bl	80022cc <HAL_GetREVID>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	210a      	movs	r1, #10
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fcd4 	bl	8000568 <uartTransmitNumber>
			break;
 8000bc0:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 8000bc2:	2113      	movs	r1, #19
 8000bc4:	4823      	ldr	r0, [pc, #140]	; (8000c54 <collectHardwareInfo+0x10c>)
 8000bc6:	f7ff fcbb 	bl	8000540 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 8000bca:	f002 fdef 	bl	80037ac <HAL_RCC_GetSysClockFreq>
 8000bce:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a21      	ldr	r2, [pc, #132]	; (8000c58 <collectHardwareInfo+0x110>)
 8000bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd8:	0c9b      	lsrs	r3, r3, #18
 8000bda:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 8000bdc:	210a      	movs	r1, #10
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff fcc2 	bl	8000568 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 8000be4:	2104      	movs	r1, #4
 8000be6:	481d      	ldr	r0, [pc, #116]	; (8000c5c <collectHardwareInfo+0x114>)
 8000be8:	f7ff fcaa 	bl	8000540 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 8000bec:	210f      	movs	r1, #15
 8000bee:	481c      	ldr	r0, [pc, #112]	; (8000c60 <collectHardwareInfo+0x118>)
 8000bf0:	f7ff fca6 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 8000bf4:	f001 fb84 	bl	8002300 <HAL_GetUIDw0>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2110      	movs	r1, #16
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fcb3 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000c02:	2101      	movs	r1, #1
 8000c04:	4817      	ldr	r0, [pc, #92]	; (8000c64 <collectHardwareInfo+0x11c>)
 8000c06:	f7ff fc9b 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 8000c0a:	f001 fb85 	bl	8002318 <HAL_GetUIDw1>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2110      	movs	r1, #16
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fca8 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000c18:	2101      	movs	r1, #1
 8000c1a:	4812      	ldr	r0, [pc, #72]	; (8000c64 <collectHardwareInfo+0x11c>)
 8000c1c:	f7ff fc90 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8000c20:	f001 fb86 	bl	8002330 <HAL_GetUIDw2>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2110      	movs	r1, #16
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fc9d 	bl	8000568 <uartTransmitNumber>

	uartTransmit("\n", 1);
 8000c2e:	2101      	movs	r1, #1
 8000c30:	480d      	ldr	r0, [pc, #52]	; (8000c68 <collectHardwareInfo+0x120>)
 8000c32:	f7ff fc85 	bl	8000540 <uartTransmit>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	08006bd0 	.word	0x08006bd0
 8000c44:	08006be4 	.word	0x08006be4
 8000c48:	08006bfc 	.word	0x08006bfc
 8000c4c:	08006c00 	.word	0x08006c00
 8000c50:	08006c04 	.word	0x08006c04
 8000c54:	08006c08 	.word	0x08006c08
 8000c58:	431bde83 	.word	0x431bde83
 8000c5c:	08006c1c 	.word	0x08006c1c
 8000c60:	08006c24 	.word	0x08006c24
 8000c64:	08006c34 	.word	0x08006c34
 8000c68:	08006b24 	.word	0x08006b24

08000c6c <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL "\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL "\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL "\n\t --Software--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000c70:	2111      	movs	r1, #17
 8000c72:	480b      	ldr	r0, [pc, #44]	; (8000ca0 <collectSystemInfo+0x34>)
 8000c74:	f7ff fc64 	bl	8000540 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8000c78:	f7ff ff66 	bl	8000b48 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000c7c:	2111      	movs	r1, #17
 8000c7e:	4809      	ldr	r0, [pc, #36]	; (8000ca4 <collectSystemInfo+0x38>)
 8000c80:	f7ff fc5e 	bl	8000540 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 8000c84:	f7ff ff1a 	bl	8000abc <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000c88:	2113      	movs	r1, #19
 8000c8a:	4807      	ldr	r0, [pc, #28]	; (8000ca8 <collectSystemInfo+0x3c>)
 8000c8c:	f7ff fc58 	bl	8000540 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8000c90:	f7ff fec0 	bl	8000a14 <collectMiddlewareInfo>

	uartTransmit("\n\n\n", 3);
 8000c94:	2103      	movs	r1, #3
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <collectSystemInfo+0x40>)
 8000c98:	f7ff fc52 	bl	8000540 <uartTransmit>
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	08006c38 	.word	0x08006c38
 8000ca4:	08006c4c 	.word	0x08006c4c
 8000ca8:	08006c60 	.word	0x08006c60
 8000cac:	08006c74 	.word	0x08006c74

08000cb0 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8000cba:	4b25      	ldr	r3, [pc, #148]	; (8000d50 <readResetSource+0xa0>)
 8000cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d002      	beq.n	8000ccc <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8000ccc:	4b20      	ldr	r3, [pc, #128]	; (8000d50 <readResetSource+0xa0>)
 8000cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d002      	beq.n	8000cde <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	3302      	adds	r3, #2
 8000cdc:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 8000cde:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <readResetSource+0xa0>)
 8000ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	da02      	bge.n	8000cec <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8000cec:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <readResetSource+0xa0>)
 8000cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d002      	beq.n	8000cfe <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	3308      	adds	r3, #8
 8000cfc:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <readResetSource+0xa0>)
 8000d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d002      	beq.n	8000d10 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	3310      	adds	r3, #16
 8000d0e:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8000d10:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <readResetSource+0xa0>)
 8000d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d002      	beq.n	8000d22 <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	3320      	adds	r3, #32
 8000d20:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <readResetSource+0xa0>)
 8000d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d002      	beq.n	8000d34 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	3340      	adds	r3, #64	; 0x40
 8000d32:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <readResetSource+0xa0>)
 8000d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d38:	4a05      	ldr	r2, [pc, #20]	; (8000d50 <readResetSource+0xa0>)
 8000d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d3e:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8000d40:	79fb      	ldrb	r3, [r7, #7]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800

08000d54 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8000d5e:	2106      	movs	r1, #6
 8000d60:	482a      	ldr	r0, [pc, #168]	; (8000e0c <printResetSource+0xb8>)
 8000d62:	f7ff fbed 	bl	8000540 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d104      	bne.n	8000d76 <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 8000d6c:	210f      	movs	r1, #15
 8000d6e:	4828      	ldr	r0, [pc, #160]	; (8000e10 <printResetSource+0xbc>)
 8000d70:	f7ff fbe6 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 8000d74:	e046      	b.n	8000e04 <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d003      	beq.n	8000d88 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8000d80:	2118      	movs	r1, #24
 8000d82:	4824      	ldr	r0, [pc, #144]	; (8000e14 <printResetSource+0xc0>)
 8000d84:	f7ff fbdc 	bl	8000540 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8000d92:	2116      	movs	r1, #22
 8000d94:	4820      	ldr	r0, [pc, #128]	; (8000e18 <printResetSource+0xc4>)
 8000d96:	f7ff fbd3 	bl	8000540 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	f003 0304 	and.w	r3, r3, #4
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d003      	beq.n	8000dac <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8000da4:	210a      	movs	r1, #10
 8000da6:	481d      	ldr	r0, [pc, #116]	; (8000e1c <printResetSource+0xc8>)
 8000da8:	f7ff fbca 	bl	8000540 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f003 0308 	and.w	r3, r3, #8
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 8000db6:	2110      	movs	r1, #16
 8000db8:	4819      	ldr	r0, [pc, #100]	; (8000e20 <printResetSource+0xcc>)
 8000dba:	f7ff fbc1 	bl	8000540 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f003 0310 	and.w	r3, r3, #16
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d003      	beq.n	8000dd0 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 8000dc8:	210f      	movs	r1, #15
 8000dca:	4816      	ldr	r0, [pc, #88]	; (8000e24 <printResetSource+0xd0>)
 8000dcc:	f7ff fbb8 	bl	8000540 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	f003 0320 	and.w	r3, r3, #32
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d003      	beq.n	8000de2 <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 8000dda:	210f      	movs	r1, #15
 8000ddc:	4812      	ldr	r0, [pc, #72]	; (8000e28 <printResetSource+0xd4>)
 8000dde:	f7ff fbaf 	bl	8000540 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d003      	beq.n	8000df4 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8000dec:	210a      	movs	r1, #10
 8000dee:	480f      	ldr	r0, [pc, #60]	; (8000e2c <printResetSource+0xd8>)
 8000df0:	f7ff fba6 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	da03      	bge.n	8000e04 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8000dfc:	2105      	movs	r1, #5
 8000dfe:	480c      	ldr	r0, [pc, #48]	; (8000e30 <printResetSource+0xdc>)
 8000e00:	f7ff fb9e 	bl	8000540 <uartTransmit>
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	08006c78 	.word	0x08006c78
 8000e10:	08006c80 	.word	0x08006c80
 8000e14:	08006c90 	.word	0x08006c90
 8000e18:	08006cac 	.word	0x08006cac
 8000e1c:	08006cc4 	.word	0x08006cc4
 8000e20:	08006cd0 	.word	0x08006cd0
 8000e24:	08006ce4 	.word	0x08006ce4
 8000e28:	08006cf4 	.word	0x08006cf4
 8000e2c:	08006d04 	.word	0x08006d04
 8000e30:	08006d10 	.word	0x08006d10

08000e34 <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 8000e38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e3c:	4850      	ldr	r0, [pc, #320]	; (8000f80 <readall_inputs+0x14c>)
 8000e3e:	f002 f899 	bl	8002f74 <HAL_GPIO_ReadPin>
 8000e42:	4603      	mov	r3, r0
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	b2d9      	uxtb	r1, r3
 8000e4a:	4a4e      	ldr	r2, [pc, #312]	; (8000f84 <readall_inputs+0x150>)
 8000e4c:	7813      	ldrb	r3, [r2, #0]
 8000e4e:	f361 0300 	bfi	r3, r1, #0, #1
 8000e52:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 8000e54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e58:	484b      	ldr	r0, [pc, #300]	; (8000f88 <readall_inputs+0x154>)
 8000e5a:	f002 f88b 	bl	8002f74 <HAL_GPIO_ReadPin>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	b2d9      	uxtb	r1, r3
 8000e66:	4a47      	ldr	r2, [pc, #284]	; (8000f84 <readall_inputs+0x150>)
 8000e68:	7813      	ldrb	r3, [r2, #0]
 8000e6a:	f361 0341 	bfi	r3, r1, #1, #1
 8000e6e:	7013      	strb	r3, [r2, #0]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8000e70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e74:	4845      	ldr	r0, [pc, #276]	; (8000f8c <readall_inputs+0x158>)
 8000e76:	f002 f87d 	bl	8002f74 <HAL_GPIO_ReadPin>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	b2d9      	uxtb	r1, r3
 8000e82:	4a40      	ldr	r2, [pc, #256]	; (8000f84 <readall_inputs+0x150>)
 8000e84:	7813      	ldrb	r3, [r2, #0]
 8000e86:	f361 03c3 	bfi	r3, r1, #3, #1
 8000e8a:	7013      	strb	r3, [r2, #0]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8000e8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e90:	483e      	ldr	r0, [pc, #248]	; (8000f8c <readall_inputs+0x158>)
 8000e92:	f002 f86f 	bl	8002f74 <HAL_GPIO_ReadPin>
 8000e96:	4603      	mov	r3, r0
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	b2d9      	uxtb	r1, r3
 8000e9e:	4a39      	ldr	r2, [pc, #228]	; (8000f84 <readall_inputs+0x150>)
 8000ea0:	7813      	ldrb	r3, [r2, #0]
 8000ea2:	f361 1304 	bfi	r3, r1, #4, #1
 8000ea6:	7013      	strb	r3, [r2, #0]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	4838      	ldr	r0, [pc, #224]	; (8000f8c <readall_inputs+0x158>)
 8000eac:	f002 f862 	bl	8002f74 <HAL_GPIO_ReadPin>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	b2d9      	uxtb	r1, r3
 8000eb8:	4a32      	ldr	r2, [pc, #200]	; (8000f84 <readall_inputs+0x150>)
 8000eba:	7813      	ldrb	r3, [r2, #0]
 8000ebc:	f361 1345 	bfi	r3, r1, #5, #1
 8000ec0:	7013      	strb	r3, [r2, #0]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	4831      	ldr	r0, [pc, #196]	; (8000f8c <readall_inputs+0x158>)
 8000ec6:	f002 f855 	bl	8002f74 <HAL_GPIO_ReadPin>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	b2d9      	uxtb	r1, r3
 8000ed2:	4a2c      	ldr	r2, [pc, #176]	; (8000f84 <readall_inputs+0x150>)
 8000ed4:	7813      	ldrb	r3, [r2, #0]
 8000ed6:	f361 1386 	bfi	r3, r1, #6, #1
 8000eda:	7013      	strb	r3, [r2, #0]

	// SDC-Eingaenge einlesen
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);					// IMD OK, Akku
 8000edc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee0:	4827      	ldr	r0, [pc, #156]	; (8000f80 <readall_inputs+0x14c>)
 8000ee2:	f002 f847 	bl	8002f74 <HAL_GPIO_ReadPin>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	b2d9      	uxtb	r1, r3
 8000eee:	4a28      	ldr	r2, [pc, #160]	; (8000f90 <readall_inputs+0x15c>)
 8000ef0:	7813      	ldrb	r3, [r2, #0]
 8000ef2:	f361 0300 	bfi	r3, r1, #0, #1
 8000ef6:	7013      	strb	r3, [r2, #0]
	sdc_in.HVIL = HAL_GPIO_ReadPin(SENSE_SDC_HVIL_GPIO_Port, SENSE_SDC_HVIL_Pin);				// Shutdown-Circuit HVIL, OK
 8000ef8:	2108      	movs	r1, #8
 8000efa:	4821      	ldr	r0, [pc, #132]	; (8000f80 <readall_inputs+0x14c>)
 8000efc:	f002 f83a 	bl	8002f74 <HAL_GPIO_ReadPin>
 8000f00:	4603      	mov	r3, r0
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	b2d9      	uxtb	r1, r3
 8000f08:	4a21      	ldr	r2, [pc, #132]	; (8000f90 <readall_inputs+0x15c>)
 8000f0a:	7813      	ldrb	r3, [r2, #0]
 8000f0c:	f361 0341 	bfi	r3, r1, #1, #1
 8000f10:	7013      	strb	r3, [r2, #0]
	sdc_in.MotorSDC = HAL_GPIO_ReadPin(SENSE_SDC_MOTOR_GPIO_Port, SENSE_SDC_MOTOR_Pin);			// Shutdown-Circuit Akku, OK
 8000f12:	2120      	movs	r1, #32
 8000f14:	481a      	ldr	r0, [pc, #104]	; (8000f80 <readall_inputs+0x14c>)
 8000f16:	f002 f82d 	bl	8002f74 <HAL_GPIO_ReadPin>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	b2d9      	uxtb	r1, r3
 8000f22:	4a1b      	ldr	r2, [pc, #108]	; (8000f90 <readall_inputs+0x15c>)
 8000f24:	7813      	ldrb	r3, [r2, #0]
 8000f26:	f361 0382 	bfi	r3, r1, #2, #1
 8000f2a:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8000f2c:	2110      	movs	r1, #16
 8000f2e:	4814      	ldr	r0, [pc, #80]	; (8000f80 <readall_inputs+0x14c>)
 8000f30:	f002 f820 	bl	8002f74 <HAL_GPIO_ReadPin>
 8000f34:	4603      	mov	r3, r0
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	b2d9      	uxtb	r1, r3
 8000f3c:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <readall_inputs+0x15c>)
 8000f3e:	7813      	ldrb	r3, [r2, #0]
 8000f40:	f361 03c3 	bfi	r3, r1, #3, #1
 8000f44:	7013      	strb	r3, [r2, #0]
	sdc_in.PrechargeIn = HAL_GPIO_ReadPin(PRECHARGE_IN_GPIO_Port, PRECHARGE_IN_Pin);			// Eingang Precharge abgeschlossen
 8000f46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f4a:	4812      	ldr	r0, [pc, #72]	; (8000f94 <readall_inputs+0x160>)
 8000f4c:	f002 f812 	bl	8002f74 <HAL_GPIO_ReadPin>
 8000f50:	4603      	mov	r3, r0
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	b2d9      	uxtb	r1, r3
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <readall_inputs+0x15c>)
 8000f5a:	7813      	ldrb	r3, [r2, #0]
 8000f5c:	f361 1304 	bfi	r3, r1, #4, #1
 8000f60:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.OVC = HAL_GPIO_ReadPin(OVC_SENSE_GPIO_Port, OVC_SENSE_Pin);						// Eingang Overcurrent erkannt
 8000f62:	2104      	movs	r1, #4
 8000f64:	480b      	ldr	r0, [pc, #44]	; (8000f94 <readall_inputs+0x160>)
 8000f66:	f002 f805 	bl	8002f74 <HAL_GPIO_ReadPin>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	b2d9      	uxtb	r1, r3
 8000f72:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <readall_inputs+0x164>)
 8000f74:	7813      	ldrb	r3, [r2, #0]
 8000f76:	f361 0300 	bfi	r3, r1, #0, #1
 8000f7a:	7013      	strb	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40021000 	.word	0x40021000
 8000f84:	20000060 	.word	0x20000060
 8000f88:	40020c00 	.word	0x40020c00
 8000f8c:	40020000 	.word	0x40020000
 8000f90:	20000068 	.word	0x20000068
 8000f94:	40021400 	.word	0x40021400
 8000f98:	20000064 	.word	0x20000064

08000f9c <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2180      	movs	r1, #128	; 0x80
 8000fa4:	481b      	ldr	r0, [pc, #108]	; (8001014 <testPCB_Leds+0x78>)
 8000fa6:	f001 fffd 	bl	8002fa4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000faa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fae:	f001 f95f 	bl	8002270 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2180      	movs	r1, #128	; 0x80
 8000fb6:	4817      	ldr	r0, [pc, #92]	; (8001014 <testPCB_Leds+0x78>)
 8000fb8:	f001 fff4 	bl	8002fa4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000fbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fc0:	f001 f956 	bl	8002270 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2104      	movs	r1, #4
 8000fc8:	4812      	ldr	r0, [pc, #72]	; (8001014 <testPCB_Leds+0x78>)
 8000fca:	f001 ffeb 	bl	8002fa4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000fce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd2:	f001 f94d 	bl	8002270 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2104      	movs	r1, #4
 8000fda:	480e      	ldr	r0, [pc, #56]	; (8001014 <testPCB_Leds+0x78>)
 8000fdc:	f001 ffe2 	bl	8002fa4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000fe0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fe4:	f001 f944 	bl	8002270 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fee:	4809      	ldr	r0, [pc, #36]	; (8001014 <testPCB_Leds+0x78>)
 8000ff0:	f001 ffd8 	bl	8002fa4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000ff4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff8:	f001 f93a 	bl	8002270 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001002:	4804      	ldr	r0, [pc, #16]	; (8001014 <testPCB_Leds+0x78>)
 8001004:	f001 ffce 	bl	8002fa4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001008:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800100c:	f001 f930 	bl	8002270 <HAL_Delay>
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40020400 	.word	0x40020400

08001018 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800101e:	463b      	mov	r3, r7
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800102a:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <MX_ADC1_Init+0x98>)
 800102c:	4a21      	ldr	r2, [pc, #132]	; (80010b4 <MX_ADC1_Init+0x9c>)
 800102e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001032:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001036:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001038:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <MX_ADC1_Init+0x98>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800103e:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001044:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001046:	2200      	movs	r2, #0
 8001048:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800104a:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <MX_ADC1_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001052:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001054:	2200      	movs	r2, #0
 8001056:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001058:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <MX_ADC1_Init+0x98>)
 800105a:	4a17      	ldr	r2, [pc, #92]	; (80010b8 <MX_ADC1_Init+0xa0>)
 800105c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001060:	2200      	movs	r2, #0
 8001062:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001066:	2201      	movs	r2, #1
 8001068:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_ADC1_Init+0x98>)
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001074:	2201      	movs	r2, #1
 8001076:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001078:	480d      	ldr	r0, [pc, #52]	; (80010b0 <MX_ADC1_Init+0x98>)
 800107a:	f001 f965 	bl	8002348 <HAL_ADC_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001084:	f000 fcb4 	bl	80019f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001088:	2304      	movs	r3, #4
 800108a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800108c:	2301      	movs	r3, #1
 800108e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001094:	463b      	mov	r3, r7
 8001096:	4619      	mov	r1, r3
 8001098:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_ADC1_Init+0x98>)
 800109a:	f001 f999 	bl	80023d0 <HAL_ADC_ConfigChannel>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010a4:	f000 fca4 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	2000006c 	.word	0x2000006c
 80010b4:	40012000 	.word	0x40012000
 80010b8:	0f000001 	.word	0x0f000001

080010bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	; 0x28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a15      	ldr	r2, [pc, #84]	; (8001130 <HAL_ADC_MspInit+0x74>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d123      	bne.n	8001126 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_ADC_MspInit+0x78>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	4a14      	ldr	r2, [pc, #80]	; (8001134 <HAL_ADC_MspInit+0x78>)
 80010e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_ADC_MspInit+0x78>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <HAL_ADC_MspInit+0x78>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <HAL_ADC_MspInit+0x78>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <HAL_ADC_MspInit+0x78>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 800110e:	23f8      	movs	r3, #248	; 0xf8
 8001110:	617b      	str	r3, [r7, #20]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001112:	2303      	movs	r3, #3
 8001114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <HAL_ADC_MspInit+0x7c>)
 8001122:	f001 fd7b 	bl	8002c1c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001126:	bf00      	nop
 8001128:	3728      	adds	r7, #40	; 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40012000 	.word	0x40012000
 8001134:	40023800 	.word	0x40023800
 8001138:	40020000 	.word	0x40020000

0800113c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001140:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <MX_CAN1_Init+0x64>)
 8001142:	4a18      	ldr	r2, [pc, #96]	; (80011a4 <MX_CAN1_Init+0x68>)
 8001144:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001146:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <MX_CAN1_Init+0x64>)
 8001148:	2210      	movs	r2, #16
 800114a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_CAN1_Init+0x64>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <MX_CAN1_Init+0x64>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_CAN1_Init+0x64>)
 800115a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800115e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_CAN1_Init+0x64>)
 8001162:	2200      	movs	r2, #0
 8001164:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_CAN1_Init+0x64>)
 8001168:	2200      	movs	r2, #0
 800116a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_CAN1_Init+0x64>)
 800116e:	2200      	movs	r2, #0
 8001170:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <MX_CAN1_Init+0x64>)
 8001174:	2200      	movs	r2, #0
 8001176:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_CAN1_Init+0x64>)
 800117a:	2200      	movs	r2, #0
 800117c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <MX_CAN1_Init+0x64>)
 8001180:	2200      	movs	r2, #0
 8001182:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_CAN1_Init+0x64>)
 8001186:	2200      	movs	r2, #0
 8001188:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_CAN1_Init+0x64>)
 800118c:	f001 fb64 	bl	8002858 <HAL_CAN_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001196:	f000 fc2b 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200000dc 	.word	0x200000dc
 80011a4:	40006400 	.word	0x40006400

080011a8 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 80011ac:	4b17      	ldr	r3, [pc, #92]	; (800120c <MX_CAN3_Init+0x64>)
 80011ae:	4a18      	ldr	r2, [pc, #96]	; (8001210 <MX_CAN3_Init+0x68>)
 80011b0:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <MX_CAN3_Init+0x64>)
 80011b4:	2206      	movs	r2, #6
 80011b6:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <MX_CAN3_Init+0x64>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <MX_CAN3_Init+0x64>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <MX_CAN3_Init+0x64>)
 80011c6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80011ca:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <MX_CAN3_Init+0x64>)
 80011ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80011d2:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 80011d4:	4b0d      	ldr	r3, [pc, #52]	; (800120c <MX_CAN3_Init+0x64>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <MX_CAN3_Init+0x64>)
 80011dc:	2200      	movs	r2, #0
 80011de:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <MX_CAN3_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <MX_CAN3_Init+0x64>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 80011ec:	4b07      	ldr	r3, [pc, #28]	; (800120c <MX_CAN3_Init+0x64>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <MX_CAN3_Init+0x64>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 80011f8:	4804      	ldr	r0, [pc, #16]	; (800120c <MX_CAN3_Init+0x64>)
 80011fa:	f001 fb2d 	bl	8002858 <HAL_CAN_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001204:	f000 fbf4 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200000b4 	.word	0x200000b4
 8001210:	40003400 	.word	0x40003400

08001214 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08e      	sub	sp, #56	; 0x38
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a43      	ldr	r2, [pc, #268]	; (8001340 <HAL_CAN_MspInit+0x12c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d131      	bne.n	800129a <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001236:	4b43      	ldr	r3, [pc, #268]	; (8001344 <HAL_CAN_MspInit+0x130>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	4a41      	ldr	r2, [pc, #260]	; (8001344 <HAL_CAN_MspInit+0x130>)
 800123e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001240:	4b40      	ldr	r3, [pc, #256]	; (8001344 <HAL_CAN_MspInit+0x130>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d10b      	bne.n	8001260 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001248:	4b3f      	ldr	r3, [pc, #252]	; (8001348 <HAL_CAN_MspInit+0x134>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	4a3e      	ldr	r2, [pc, #248]	; (8001348 <HAL_CAN_MspInit+0x134>)
 800124e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001252:	6413      	str	r3, [r2, #64]	; 0x40
 8001254:	4b3c      	ldr	r3, [pc, #240]	; (8001348 <HAL_CAN_MspInit+0x134>)
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800125c:	623b      	str	r3, [r7, #32]
 800125e:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001260:	4b39      	ldr	r3, [pc, #228]	; (8001348 <HAL_CAN_MspInit+0x134>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001264:	4a38      	ldr	r2, [pc, #224]	; (8001348 <HAL_CAN_MspInit+0x134>)
 8001266:	f043 0308 	orr.w	r3, r3, #8
 800126a:	6313      	str	r3, [r2, #48]	; 0x30
 800126c:	4b36      	ldr	r3, [pc, #216]	; (8001348 <HAL_CAN_MspInit+0x134>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001270:	f003 0308 	and.w	r3, r3, #8
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001278:	2303      	movs	r3, #3
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001288:	2309      	movs	r3, #9
 800128a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800128c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001290:	4619      	mov	r1, r3
 8001292:	482e      	ldr	r0, [pc, #184]	; (800134c <HAL_CAN_MspInit+0x138>)
 8001294:	f001 fcc2 	bl	8002c1c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8001298:	e04e      	b.n	8001338 <HAL_CAN_MspInit+0x124>
  else if(canHandle->Instance==CAN3)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a2c      	ldr	r2, [pc, #176]	; (8001350 <HAL_CAN_MspInit+0x13c>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d149      	bne.n	8001338 <HAL_CAN_MspInit+0x124>
    __HAL_RCC_CAN3_CLK_ENABLE();
 80012a4:	4b28      	ldr	r3, [pc, #160]	; (8001348 <HAL_CAN_MspInit+0x134>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	4a27      	ldr	r2, [pc, #156]	; (8001348 <HAL_CAN_MspInit+0x134>)
 80012aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012ae:	6413      	str	r3, [r2, #64]	; 0x40
 80012b0:	4b25      	ldr	r3, [pc, #148]	; (8001348 <HAL_CAN_MspInit+0x134>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012b8:	61bb      	str	r3, [r7, #24]
 80012ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 80012bc:	4b22      	ldr	r3, [pc, #136]	; (8001348 <HAL_CAN_MspInit+0x134>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	4a21      	ldr	r2, [pc, #132]	; (8001348 <HAL_CAN_MspInit+0x134>)
 80012c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012c6:	6413      	str	r3, [r2, #64]	; 0x40
 80012c8:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <HAL_CAN_MspInit+0x134>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <HAL_CAN_MspInit+0x130>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3301      	adds	r3, #1
 80012da:	4a1a      	ldr	r2, [pc, #104]	; (8001344 <HAL_CAN_MspInit+0x130>)
 80012dc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80012de:	4b19      	ldr	r3, [pc, #100]	; (8001344 <HAL_CAN_MspInit+0x130>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d10b      	bne.n	80012fe <HAL_CAN_MspInit+0xea>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80012e6:	4b18      	ldr	r3, [pc, #96]	; (8001348 <HAL_CAN_MspInit+0x134>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	4a17      	ldr	r2, [pc, #92]	; (8001348 <HAL_CAN_MspInit+0x134>)
 80012ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012f0:	6413      	str	r3, [r2, #64]	; 0x40
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_CAN_MspInit+0x134>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_CAN_MspInit+0x134>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a11      	ldr	r2, [pc, #68]	; (8001348 <HAL_CAN_MspInit+0x134>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <HAL_CAN_MspInit+0x134>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8001316:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001328:	230b      	movs	r3, #11
 800132a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001330:	4619      	mov	r1, r3
 8001332:	4808      	ldr	r0, [pc, #32]	; (8001354 <HAL_CAN_MspInit+0x140>)
 8001334:	f001 fc72 	bl	8002c1c <HAL_GPIO_Init>
}
 8001338:	bf00      	nop
 800133a:	3738      	adds	r7, #56	; 0x38
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40006400 	.word	0x40006400
 8001344:	20000028 	.word	0x20000028
 8001348:	40023800 	.word	0x40023800
 800134c:	40020c00 	.word	0x40020c00
 8001350:	40003400 	.word	0x40003400
 8001354:	40020000 	.word	0x40020000

08001358 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08e      	sub	sp, #56	; 0x38
 800135c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800136e:	4bb7      	ldr	r3, [pc, #732]	; (800164c <MX_GPIO_Init+0x2f4>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4ab6      	ldr	r2, [pc, #728]	; (800164c <MX_GPIO_Init+0x2f4>)
 8001374:	f043 0310 	orr.w	r3, r3, #16
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4bb4      	ldr	r3, [pc, #720]	; (800164c <MX_GPIO_Init+0x2f4>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0310 	and.w	r3, r3, #16
 8001382:	623b      	str	r3, [r7, #32]
 8001384:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001386:	4bb1      	ldr	r3, [pc, #708]	; (800164c <MX_GPIO_Init+0x2f4>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4ab0      	ldr	r2, [pc, #704]	; (800164c <MX_GPIO_Init+0x2f4>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4bae      	ldr	r3, [pc, #696]	; (800164c <MX_GPIO_Init+0x2f4>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	61fb      	str	r3, [r7, #28]
 800139c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800139e:	4bab      	ldr	r3, [pc, #684]	; (800164c <MX_GPIO_Init+0x2f4>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4aaa      	ldr	r2, [pc, #680]	; (800164c <MX_GPIO_Init+0x2f4>)
 80013a4:	f043 0320 	orr.w	r3, r3, #32
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4ba8      	ldr	r3, [pc, #672]	; (800164c <MX_GPIO_Init+0x2f4>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0320 	and.w	r3, r3, #32
 80013b2:	61bb      	str	r3, [r7, #24]
 80013b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013b6:	4ba5      	ldr	r3, [pc, #660]	; (800164c <MX_GPIO_Init+0x2f4>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4aa4      	ldr	r2, [pc, #656]	; (800164c <MX_GPIO_Init+0x2f4>)
 80013bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4ba2      	ldr	r3, [pc, #648]	; (800164c <MX_GPIO_Init+0x2f4>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	4b9f      	ldr	r3, [pc, #636]	; (800164c <MX_GPIO_Init+0x2f4>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a9e      	ldr	r2, [pc, #632]	; (800164c <MX_GPIO_Init+0x2f4>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b9c      	ldr	r3, [pc, #624]	; (800164c <MX_GPIO_Init+0x2f4>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	4b99      	ldr	r3, [pc, #612]	; (800164c <MX_GPIO_Init+0x2f4>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a98      	ldr	r2, [pc, #608]	; (800164c <MX_GPIO_Init+0x2f4>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b96      	ldr	r3, [pc, #600]	; (800164c <MX_GPIO_Init+0x2f4>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013fe:	4b93      	ldr	r3, [pc, #588]	; (800164c <MX_GPIO_Init+0x2f4>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a92      	ldr	r2, [pc, #584]	; (800164c <MX_GPIO_Init+0x2f4>)
 8001404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b90      	ldr	r3, [pc, #576]	; (800164c <MX_GPIO_Init+0x2f4>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001416:	4b8d      	ldr	r3, [pc, #564]	; (800164c <MX_GPIO_Init+0x2f4>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a8c      	ldr	r2, [pc, #560]	; (800164c <MX_GPIO_Init+0x2f4>)
 800141c:	f043 0308 	orr.w	r3, r3, #8
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b8a      	ldr	r3, [pc, #552]	; (800164c <MX_GPIO_Init+0x2f4>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 800142e:	2200      	movs	r2, #0
 8001430:	f248 0187 	movw	r1, #32903	; 0x8087
 8001434:	4886      	ldr	r0, [pc, #536]	; (8001650 <MX_GPIO_Init+0x2f8>)
 8001436:	f001 fdb5 	bl	8002fa4 <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001440:	4884      	ldr	r0, [pc, #528]	; (8001654 <MX_GPIO_Init+0x2fc>)
 8001442:	f001 fdaf 	bl	8002fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f242 0102 	movw	r1, #8194	; 0x2002
 800144c:	4882      	ldr	r0, [pc, #520]	; (8001658 <MX_GPIO_Init+0x300>)
 800144e:	f001 fda9 	bl	8002fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	f240 6102 	movw	r1, #1538	; 0x602
 8001458:	4880      	ldr	r0, [pc, #512]	; (800165c <MX_GPIO_Init+0x304>)
 800145a:	f001 fda3 	bl	8002fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	f244 0184 	movw	r1, #16516	; 0x4084
 8001464:	487e      	ldr	r0, [pc, #504]	; (8001660 <MX_GPIO_Init+0x308>)
 8001466:	f001 fd9d 	bl	8002fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISOSPI_CS_GPIO_Port, ISOSPI_CS_Pin, GPIO_PIN_SET);
 800146a:	2201      	movs	r2, #1
 800146c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001470:	4877      	ldr	r0, [pc, #476]	; (8001650 <MX_GPIO_Init+0x2f8>)
 8001472:	f001 fd97 	bl	8002fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8001476:	2200      	movs	r2, #0
 8001478:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 800147c:	4879      	ldr	r0, [pc, #484]	; (8001664 <MX_GPIO_Init+0x30c>)
 800147e:	f001 fd91 	bl	8002fa4 <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	2118      	movs	r1, #24
 8001486:	4878      	ldr	r0, [pc, #480]	; (8001668 <MX_GPIO_Init+0x310>)
 8001488:	f001 fd8c 	bl	8002fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_CS_Pin|ISOSPI_EN_Pin
 800148c:	f648 0387 	movw	r3, #34951	; 0x8887
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
                          |FREIGABE_Pin|INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800149e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a2:	4619      	mov	r1, r3
 80014a4:	486a      	ldr	r0, [pc, #424]	; (8001650 <MX_GPIO_Init+0x2f8>)
 80014a6:	f001 fbb9 	bl	8002c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 80014aa:	f44f 739c 	mov.w	r3, #312	; 0x138
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014bc:	4619      	mov	r1, r3
 80014be:	4864      	ldr	r0, [pc, #400]	; (8001650 <MX_GPIO_Init+0x2f8>)
 80014c0:	f001 fbac 	bl	8002c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 80014c4:	f44f 6388 	mov.w	r3, #1088	; 0x440
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ca:	2303      	movs	r3, #3
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d6:	4619      	mov	r1, r3
 80014d8:	485d      	ldr	r0, [pc, #372]	; (8001650 <MX_GPIO_Init+0x2f8>)
 80014da:	f001 fb9f 	bl	8002c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 80014de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e4:	2301      	movs	r3, #1
 80014e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 80014f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f4:	4619      	mov	r1, r3
 80014f6:	4857      	ldr	r0, [pc, #348]	; (8001654 <MX_GPIO_Init+0x2fc>)
 80014f8:	f001 fb90 	bl	8002c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PCPin PC7 PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 80014fc:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |SD_SW_Pin|GPIO_PIN_7|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001502:	2303      	movs	r3, #3
 8001504:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150e:	4619      	mov	r1, r3
 8001510:	4850      	ldr	r0, [pc, #320]	; (8001654 <MX_GPIO_Init+0x2fc>)
 8001512:	f001 fb83 	bl	8002c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF3 PF4 PF5
                           PFPin PFPin PFPin PFPin
                           PF10 PF11 PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001516:	f645 73f9 	movw	r3, #24569	; 0x5ff9
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800151c:	2303      	movs	r3, #3
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001528:	4619      	mov	r1, r3
 800152a:	484b      	ldr	r0, [pc, #300]	; (8001658 <MX_GPIO_Init+0x300>)
 800152c:	f001 fb76 	bl	8002c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin;
 8001530:	f242 0302 	movw	r3, #8194	; 0x2002
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001536:	2301      	movs	r3, #1
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001546:	4619      	mov	r1, r3
 8001548:	4843      	ldr	r0, [pc, #268]	; (8001658 <MX_GPIO_Init+0x300>)
 800154a:	f001 fb67 	bl	8002c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin|PRECHARGE_IN_Pin;
 800154e:	f248 0304 	movw	r3, #32772	; 0x8004
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800155c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001560:	4619      	mov	r1, r3
 8001562:	483d      	ldr	r0, [pc, #244]	; (8001658 <MX_GPIO_Init+0x300>)
 8001564:	f001 fb5a 	bl	8002c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|HW_WAKE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 8001568:	f641 0305 	movw	r3, #6149	; 0x1805
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156e:	2300      	movs	r3, #0
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157a:	4619      	mov	r1, r3
 800157c:	4837      	ldr	r0, [pc, #220]	; (800165c <MX_GPIO_Init+0x304>)
 800157e:	f001 fb4d 	bl	8002c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 8001582:	f240 6302 	movw	r3, #1538	; 0x602
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001588:	2301      	movs	r3, #1
 800158a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001598:	4619      	mov	r1, r3
 800159a:	4830      	ldr	r0, [pc, #192]	; (800165c <MX_GPIO_Init+0x304>)
 800159c:	f001 fb3e 	bl	8002c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80015a0:	f64b 7373 	movw	r3, #49011	; 0xbf73
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|I2C_SCL_Pin|I2C_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015a6:	2303      	movs	r3, #3
 80015a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b2:	4619      	mov	r1, r3
 80015b4:	482a      	ldr	r0, [pc, #168]	; (8001660 <MX_GPIO_Init+0x308>)
 80015b6:	f001 fb31 	bl	8002c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 80015ba:	f244 0384 	movw	r3, #16516	; 0x4084
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c0:	2301      	movs	r3, #1
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d0:	4619      	mov	r1, r3
 80015d2:	4823      	ldr	r0, [pc, #140]	; (8001660 <MX_GPIO_Init+0x308>)
 80015d4:	f001 fb22 	bl	8002c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8;
 80015d8:	f240 1343 	movw	r3, #323	; 0x143
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015de:	2303      	movs	r3, #3
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ea:	4619      	mov	r1, r3
 80015ec:	481d      	ldr	r0, [pc, #116]	; (8001664 <MX_GPIO_Init+0x30c>)
 80015ee:	f001 fb15 	bl	8002c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|SD_CMD_Pin;
 80015f2:	f240 7304 	movw	r3, #1796	; 0x704
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f8:	2303      	movs	r3, #3
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001604:	4619      	mov	r1, r3
 8001606:	4818      	ldr	r0, [pc, #96]	; (8001668 <MX_GPIO_Init+0x310>)
 8001608:	f001 fb08 	bl	8002c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 800160c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001612:	2300      	movs	r3, #0
 8001614:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 800161a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161e:	4619      	mov	r1, r3
 8001620:	4811      	ldr	r0, [pc, #68]	; (8001668 <MX_GPIO_Init+0x310>)
 8001622:	f001 fafb 	bl	8002c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8001626:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163c:	4619      	mov	r1, r3
 800163e:	4809      	ldr	r0, [pc, #36]	; (8001664 <MX_GPIO_Init+0x30c>)
 8001640:	f001 faec 	bl	8002c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|DIGITAL2_Pin;
 8001644:	2318      	movs	r3, #24
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
 8001648:	e010      	b.n	800166c <MX_GPIO_Init+0x314>
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800
 8001650:	40021000 	.word	0x40021000
 8001654:	40020800 	.word	0x40020800
 8001658:	40021400 	.word	0x40021400
 800165c:	40020000 	.word	0x40020000
 8001660:	40020400 	.word	0x40020400
 8001664:	40021800 	.word	0x40021800
 8001668:	40020c00 	.word	0x40020c00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2301      	movs	r3, #1
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167c:	4619      	mov	r1, r3
 800167e:	4803      	ldr	r0, [pc, #12]	; (800168c <MX_GPIO_Init+0x334>)
 8001680:	f001 facc 	bl	8002c1c <HAL_GPIO_Init>

}
 8001684:	bf00      	nop
 8001686:	3738      	adds	r7, #56	; 0x38
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40020c00 	.word	0x40020c00

08001690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001696:	f000 fd8e 	bl	80021b6 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint16_t spannungen[12] = {0};
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
 80016a8:	615a      	str	r2, [r3, #20]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016aa:	f000 f90f 	bl	80018cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ae:	f7ff fe53 	bl	8001358 <MX_GPIO_Init>
  MX_CAN1_Init();
 80016b2:	f7ff fd43 	bl	800113c <MX_CAN1_Init>
  MX_SPI4_Init();
 80016b6:	f000 fa07 	bl	8001ac8 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 80016ba:	f000 fcdf 	bl	800207c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80016be:	f7ff fcab 	bl	8001018 <MX_ADC1_Init>
  MX_TIM1_Init();
 80016c2:	f000 fb3d 	bl	8001d40 <MX_TIM1_Init>
  MX_TIM4_Init();
 80016c6:	f000 fbc1 	bl	8001e4c <MX_TIM4_Init>
  MX_SPI1_Init();
 80016ca:	f000 f9bf 	bl	8001a4c <MX_SPI1_Init>
  MX_CAN3_Init();
 80016ce:	f7ff fd6b 	bl	80011a8 <MX_CAN3_Init>
  /* USER CODE BEGIN 2 */

	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 80016d2:	f7ff faed 	bl	8000cb0 <readResetSource>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fb3b 	bl	8000d54 <printResetSource>

	/* Teste serielle Schnittstelle*/
	#define TEST_STRING_UART	"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 80016de:	213a      	movs	r1, #58	; 0x3a
 80016e0:	486a      	ldr	r0, [pc, #424]	; (800188c <main+0x1fc>)
 80016e2:	f7fe ff2d 	bl	8000540 <uartTransmit>

	/* Sammel Systeminformationen */
	collectSystemInfo();
 80016e6:	f7ff fac1 	bl	8000c6c <collectSystemInfo>
#endif

	// Leds Testen
	testPCB_Leds();
 80016ea:	f7ff fc57 	bl	8000f9c <testPCB_Leds>

  	// Lese alle Eingaenge
  	readall_inputs();
 80016ee:	f7ff fba1 	bl	8000e34 <readall_inputs>

  	// IsoSPI einschalten, Isolierte Spannungsversorgung IsoSPI und HV-Precharge Messung einschalten
    HAL_GPIO_WritePin(ISOSPI_EN_GPIO_Port, ISOSPI_EN_Pin, GPIO_PIN_SET);
 80016f2:	2201      	movs	r2, #1
 80016f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016f8:	4865      	ldr	r0, [pc, #404]	; (8001890 <main+0x200>)
 80016fa:	f001 fc53 	bl	8002fa4 <HAL_GPIO_WritePin>

    uartTransmit("\n", 1);
 80016fe:	2101      	movs	r1, #1
 8001700:	4864      	ldr	r0, [pc, #400]	; (8001894 <main+0x204>)
 8001702:	f7fe ff1d 	bl	8000540 <uartTransmit>
#define TEST_LTC6811	"Starte Batteriemanagement-System\n"
uartTransmit(TEST_LTC6811, sizeof(TEST_LTC6811));
 8001706:	2122      	movs	r1, #34	; 0x22
 8001708:	4863      	ldr	r0, [pc, #396]	; (8001898 <main+0x208>)
 800170a:	f7fe ff19 	bl	8000540 <uartTransmit>

	if ((temp = ltc6811_check()) != 0)									// LTC6804 Selftest durchfuehren
 800170e:	f7ff f861 	bl	80007d4 <ltc6811_check>
 8001712:	4603      	mov	r3, r0
 8001714:	461a      	mov	r2, r3
 8001716:	4b61      	ldr	r3, [pc, #388]	; (800189c <main+0x20c>)
 8001718:	701a      	strb	r2, [r3, #0]
 800171a:	4b60      	ldr	r3, [pc, #384]	; (800189c <main+0x20c>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d01d      	beq.n	800175e <main+0xce>
	{
#define LTC6811_FAILED	"Selbsttest LTC6811 fehlerhaft\n"
uartTransmit(LTC6811_FAILED, sizeof(LTC6811_FAILED));					// Ausgabe bei Fehlerhaftem Selbsttest
 8001722:	211f      	movs	r1, #31
 8001724:	485e      	ldr	r0, [pc, #376]	; (80018a0 <main+0x210>)
 8001726:	f7fe ff0b 	bl	8000540 <uartTransmit>
		leuchten_out.RedLed = 1;										// Variable setzen
 800172a:	4a5e      	ldr	r2, [pc, #376]	; (80018a4 <main+0x214>)
 800172c:	7813      	ldrb	r3, [r2, #0]
 800172e:	f043 0320 	orr.w	r3, r3, #32
 8001732:	7013      	strb	r3, [r2, #0]
	    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);// Ausgabe auf LEDs
 8001734:	4b5b      	ldr	r3, [pc, #364]	; (80018a4 <main+0x214>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800173c:	b2db      	uxtb	r3, r3
 800173e:	461a      	mov	r2, r3
 8001740:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001744:	4858      	ldr	r0, [pc, #352]	; (80018a8 <main+0x218>)
 8001746:	f001 fc2d 	bl	8002fa4 <HAL_GPIO_WritePin>

	    uartTransmitNumber(temp, 10);
 800174a:	4b54      	ldr	r3, [pc, #336]	; (800189c <main+0x20c>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	210a      	movs	r1, #10
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe ff09 	bl	8000568 <uartTransmitNumber>
		uartTransmit("\n", 1);
 8001756:	2101      	movs	r1, #1
 8001758:	484e      	ldr	r0, [pc, #312]	; (8001894 <main+0x204>)
 800175a:	f7fe fef1 	bl	8000540 <uartTransmit>

		//return 0;														// Programm abbrechen
	}

	ltc6811_read(RDCFG, &data[0]);
 800175e:	4953      	ldr	r1, [pc, #332]	; (80018ac <main+0x21c>)
 8001760:	2002      	movs	r0, #2
 8001762:	f7fe ff95 	bl	8000690 <ltc6811_read>

	// Alle Register zurücksetzen
	ltc6811(CLRCELL);
 8001766:	f240 7011 	movw	r0, #1809	; 0x711
 800176a:	f7fe ff3f 	bl	80005ec <ltc6811>
	ltc6811(CLRSTAT);
 800176e:	f240 7013 	movw	r0, #1811	; 0x713
 8001772:	f7fe ff3b 	bl	80005ec <ltc6811>
	ltc6811(CLRAUX);
 8001776:	f240 7012 	movw	r0, #1810	; 0x712
 800177a:	f7fe ff37 	bl	80005ec <ltc6811>

	ltc6811(ADAX | MD262 | GPIOALL);
 800177e:	f44f 60bc 	mov.w	r0, #1504	; 0x5e0
 8001782:	f7fe ff33 	bl	80005ec <ltc6811>
	ltc6811_read(RDAUXA, &data[0]);
 8001786:	4949      	ldr	r1, [pc, #292]	; (80018ac <main+0x21c>)
 8001788:	200c      	movs	r0, #12
 800178a:	f7fe ff81 	bl	8000690 <ltc6811_read>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		ltc6811(ADCVC | MD73 | CELLALL);
 800178e:	f44f 7058 	mov.w	r0, #864	; 0x360
 8001792:	f7fe ff2b 	bl	80005ec <ltc6811>
		HAL_Delay(300);
 8001796:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800179a:	f000 fd69 	bl	8002270 <HAL_Delay>

		ltc6811_read(RDCVA, &data[0]);
 800179e:	4943      	ldr	r1, [pc, #268]	; (80018ac <main+0x21c>)
 80017a0:	2004      	movs	r0, #4
 80017a2:	f7fe ff75 	bl	8000690 <ltc6811_read>
		ltc6811_read(RDCVB, &data[6]);
 80017a6:	4942      	ldr	r1, [pc, #264]	; (80018b0 <main+0x220>)
 80017a8:	2006      	movs	r0, #6
 80017aa:	f7fe ff71 	bl	8000690 <ltc6811_read>
		ltc6811_read(RDCVC, &data[12]);
 80017ae:	4941      	ldr	r1, [pc, #260]	; (80018b4 <main+0x224>)
 80017b0:	2008      	movs	r0, #8
 80017b2:	f7fe ff6d 	bl	8000690 <ltc6811_read>
		ltc6811_read(RDCVD, &data[18]);
 80017b6:	4940      	ldr	r1, [pc, #256]	; (80018b8 <main+0x228>)
 80017b8:	200a      	movs	r0, #10
 80017ba:	f7fe ff69 	bl	8000690 <ltc6811_read>
		ltc6811_read(RDCFG, &data[26]);
 80017be:	493f      	ldr	r1, [pc, #252]	; (80018bc <main+0x22c>)
 80017c0:	2002      	movs	r0, #2
 80017c2:	f7fe ff65 	bl	8000690 <ltc6811_read>

		for (uint8_t i = 0; i < 12; i++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	77fb      	strb	r3, [r7, #31]
 80017ca:	e018      	b.n	80017fe <main+0x16e>
		{
			spannungen[i] = ((data[i*2+1]<<8) | data[i*2]);
 80017cc:	7ffb      	ldrb	r3, [r7, #31]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	3301      	adds	r3, #1
 80017d2:	4a36      	ldr	r2, [pc, #216]	; (80018ac <main+0x21c>)
 80017d4:	5cd3      	ldrb	r3, [r2, r3]
 80017d6:	021b      	lsls	r3, r3, #8
 80017d8:	b21a      	sxth	r2, r3
 80017da:	7ffb      	ldrb	r3, [r7, #31]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4933      	ldr	r1, [pc, #204]	; (80018ac <main+0x21c>)
 80017e0:	5ccb      	ldrb	r3, [r1, r3]
 80017e2:	b21b      	sxth	r3, r3
 80017e4:	4313      	orrs	r3, r2
 80017e6:	b21a      	sxth	r2, r3
 80017e8:	7ffb      	ldrb	r3, [r7, #31]
 80017ea:	b292      	uxth	r2, r2
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	f107 0120 	add.w	r1, r7, #32
 80017f2:	440b      	add	r3, r1
 80017f4:	f823 2c1c 	strh.w	r2, [r3, #-28]
		for (uint8_t i = 0; i < 12; i++)
 80017f8:	7ffb      	ldrb	r3, [r7, #31]
 80017fa:	3301      	adds	r3, #1
 80017fc:	77fb      	strb	r3, [r7, #31]
 80017fe:	7ffb      	ldrb	r3, [r7, #31]
 8001800:	2b0b      	cmp	r3, #11
 8001802:	d9e3      	bls.n	80017cc <main+0x13c>
		}

		for (uint8_t i = 0; i < 12; i++)
 8001804:	2300      	movs	r3, #0
 8001806:	77bb      	strb	r3, [r7, #30]
 8001808:	e011      	b.n	800182e <main+0x19e>
		{
			uartTransmitNumber(spannungen[i], 10);
 800180a:	7fbb      	ldrb	r3, [r7, #30]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	f107 0220 	add.w	r2, r7, #32
 8001812:	4413      	add	r3, r2
 8001814:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001818:	210a      	movs	r1, #10
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fea4 	bl	8000568 <uartTransmitNumber>
			uartTransmit(";", 1);
 8001820:	2101      	movs	r1, #1
 8001822:	4827      	ldr	r0, [pc, #156]	; (80018c0 <main+0x230>)
 8001824:	f7fe fe8c 	bl	8000540 <uartTransmit>
		for (uint8_t i = 0; i < 12; i++)
 8001828:	7fbb      	ldrb	r3, [r7, #30]
 800182a:	3301      	adds	r3, #1
 800182c:	77bb      	strb	r3, [r7, #30]
 800182e:	7fbb      	ldrb	r3, [r7, #30]
 8001830:	2b0b      	cmp	r3, #11
 8001832:	d9ea      	bls.n	800180a <main+0x17a>
		}

		tmp = 0;
 8001834:	4b23      	ldr	r3, [pc, #140]	; (80018c4 <main+0x234>)
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
		for (uint8_t i = 0; i < 12; i++)
 800183a:	2300      	movs	r3, #0
 800183c:	777b      	strb	r3, [r7, #29]
 800183e:	e00f      	b.n	8001860 <main+0x1d0>
		{
			tmp += spannungen[i];
 8001840:	7f7b      	ldrb	r3, [r7, #29]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	f107 0220 	add.w	r2, r7, #32
 8001848:	4413      	add	r3, r2
 800184a:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 800184e:	461a      	mov	r2, r3
 8001850:	4b1c      	ldr	r3, [pc, #112]	; (80018c4 <main+0x234>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4413      	add	r3, r2
 8001856:	4a1b      	ldr	r2, [pc, #108]	; (80018c4 <main+0x234>)
 8001858:	6013      	str	r3, [r2, #0]
		for (uint8_t i = 0; i < 12; i++)
 800185a:	7f7b      	ldrb	r3, [r7, #29]
 800185c:	3301      	adds	r3, #1
 800185e:	777b      	strb	r3, [r7, #29]
 8001860:	7f7b      	ldrb	r3, [r7, #29]
 8001862:	2b0b      	cmp	r3, #11
 8001864:	d9ec      	bls.n	8001840 <main+0x1b0>
		}
		tmp /= 12;
 8001866:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <main+0x234>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a17      	ldr	r2, [pc, #92]	; (80018c8 <main+0x238>)
 800186c:	fba2 2303 	umull	r2, r3, r2, r3
 8001870:	08db      	lsrs	r3, r3, #3
 8001872:	4a14      	ldr	r2, [pc, #80]	; (80018c4 <main+0x234>)
 8001874:	6013      	str	r3, [r2, #0]
		uartTransmitNumber(tmp, 10);
 8001876:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <main+0x234>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	210a      	movs	r1, #10
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe73 	bl	8000568 <uartTransmitNumber>

		uartTransmit("\n", 1);
 8001882:	2101      	movs	r1, #1
 8001884:	4803      	ldr	r0, [pc, #12]	; (8001894 <main+0x204>)
 8001886:	f7fe fe5b 	bl	8000540 <uartTransmit>
		ltc6811(ADCVC | MD73 | CELLALL);
 800188a:	e780      	b.n	800178e <main+0xfe>
 800188c:	08006d18 	.word	0x08006d18
 8001890:	40021000 	.word	0x40021000
 8001894:	08006d54 	.word	0x08006d54
 8001898:	08006d58 	.word	0x08006d58
 800189c:	20000108 	.word	0x20000108
 80018a0:	08006d7c 	.word	0x08006d7c
 80018a4:	2000005c 	.word	0x2000005c
 80018a8:	40020400 	.word	0x40020400
 80018ac:	2000002c 	.word	0x2000002c
 80018b0:	20000032 	.word	0x20000032
 80018b4:	20000038 	.word	0x20000038
 80018b8:	2000003e 	.word	0x2000003e
 80018bc:	20000046 	.word	0x20000046
 80018c0:	08006d9c 	.word	0x08006d9c
 80018c4:	20000104 	.word	0x20000104
 80018c8:	aaaaaaab 	.word	0xaaaaaaab

080018cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b0b8      	sub	sp, #224	; 0xe0
 80018d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018d2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018d6:	2234      	movs	r2, #52	; 0x34
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f005 f8b6 	bl	8006a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018f0:	f107 0308 	add.w	r3, r7, #8
 80018f4:	2290      	movs	r2, #144	; 0x90
 80018f6:	2100      	movs	r1, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f005 f8a7 	bl	8006a4c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fe:	4b3a      	ldr	r3, [pc, #232]	; (80019e8 <SystemClock_Config+0x11c>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	4a39      	ldr	r2, [pc, #228]	; (80019e8 <SystemClock_Config+0x11c>)
 8001904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001908:	6413      	str	r3, [r2, #64]	; 0x40
 800190a:	4b37      	ldr	r3, [pc, #220]	; (80019e8 <SystemClock_Config+0x11c>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001916:	4b35      	ldr	r3, [pc, #212]	; (80019ec <SystemClock_Config+0x120>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a34      	ldr	r2, [pc, #208]	; (80019ec <SystemClock_Config+0x120>)
 800191c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	4b32      	ldr	r3, [pc, #200]	; (80019ec <SystemClock_Config+0x120>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800192a:	603b      	str	r3, [r7, #0]
 800192c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800192e:	2301      	movs	r3, #1
 8001930:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001934:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001938:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800193c:	2302      	movs	r3, #2
 800193e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001942:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001946:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 800194a:	2319      	movs	r3, #25
 800194c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001950:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001954:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001958:	2302      	movs	r3, #2
 800195a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800195e:	2308      	movs	r3, #8
 8001960:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001964:	2302      	movs	r3, #2
 8001966:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800196a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800196e:	4618      	mov	r0, r3
 8001970:	f001 fb82 	bl	8003078 <HAL_RCC_OscConfig>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800197a:	f000 f839 	bl	80019f0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800197e:	f001 fb2b 	bl	8002fd8 <HAL_PWREx_EnableOverDrive>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001988:	f000 f832 	bl	80019f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800198c:	230f      	movs	r3, #15
 800198e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001992:	2302      	movs	r3, #2
 8001994:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001998:	2300      	movs	r3, #0
 800199a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800199e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80019ae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80019b2:	2107      	movs	r1, #7
 80019b4:	4618      	mov	r0, r3
 80019b6:	f001 fe0d 	bl	80035d4 <HAL_RCC_ClockConfig>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80019c0:	f000 f816 	bl	80019f0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019c8:	2300      	movs	r3, #0
 80019ca:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019cc:	f107 0308 	add.w	r3, r7, #8
 80019d0:	4618      	mov	r0, r3
 80019d2:	f001 ffd5 	bl	8003980 <HAL_RCCEx_PeriphCLKConfig>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <SystemClock_Config+0x114>
  {
    Error_Handler();
 80019dc:	f000 f808 	bl	80019f0 <Error_Handler>
  }
}
 80019e0:	bf00      	nop
 80019e2:	37e0      	adds	r7, #224	; 0xe0
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40007000 	.word	0x40007000

080019f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f4:	b672      	cpsid	i
}
 80019f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 80019f8:	4a11      	ldr	r2, [pc, #68]	; (8001a40 <Error_Handler+0x50>)
 80019fa:	7813      	ldrb	r3, [r2, #0]
 80019fc:	f043 0320 	orr.w	r3, r3, #32
 8001a00:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8001a02:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <Error_Handler+0x50>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a12:	480c      	ldr	r0, [pc, #48]	; (8001a44 <Error_Handler+0x54>)
 8001a14:	f001 fac6 	bl	8002fa4 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8001a18:	4a09      	ldr	r2, [pc, #36]	; (8001a40 <Error_Handler+0x50>)
 8001a1a:	7813      	ldrb	r3, [r2, #0]
 8001a1c:	f36f 1386 	bfc	r3, #6, #1
 8001a20:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 8001a22:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <Error_Handler+0x50>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	2104      	movs	r1, #4
 8001a30:	4804      	ldr	r0, [pc, #16]	; (8001a44 <Error_Handler+0x54>)
 8001a32:	f001 fab7 	bl	8002fa4 <HAL_GPIO_WritePin>

	// Sende Nachricht auf Uart-Interface
#ifdef DEBUG
#define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
	uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 8001a36:	2122      	movs	r1, #34	; 0x22
 8001a38:	4803      	ldr	r0, [pc, #12]	; (8001a48 <Error_Handler+0x58>)
 8001a3a:	f7fe fd81 	bl	8000540 <uartTransmit>
#endif
	// Beginne Endlosschleife nachdem Fehler aufgetreten ist
	while (1);
 8001a3e:	e7fe      	b.n	8001a3e <Error_Handler+0x4e>
 8001a40:	2000005c 	.word	0x2000005c
 8001a44:	40020400 	.word	0x40020400
 8001a48:	08006da0 	.word	0x08006da0

08001a4c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a50:	4b1b      	ldr	r3, [pc, #108]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001a52:	4a1c      	ldr	r2, [pc, #112]	; (8001ac4 <MX_SPI1_Init+0x78>)
 8001a54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a56:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001a58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a5e:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001a64:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001a66:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001a6a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a6c:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a72:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001a7a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001a7e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a92:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001a9a:	2207      	movs	r2, #7
 8001a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a9e:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001aa6:	2208      	movs	r2, #8
 8001aa8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001aaa:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001aac:	f002 fb90 	bl	80041d0 <HAL_SPI_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001ab6:	f7ff ff9b 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000170 	.word	0x20000170
 8001ac4:	40013000 	.word	0x40013000

08001ac8 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001acc:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <MX_SPI4_Init+0x74>)
 8001ace:	4a1c      	ldr	r2, [pc, #112]	; (8001b40 <MX_SPI4_Init+0x78>)
 8001ad0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001ad2:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <MX_SPI4_Init+0x74>)
 8001ad4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ad8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001ada:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <MX_SPI4_Init+0x74>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ae0:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <MX_SPI4_Init+0x74>)
 8001ae2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ae6:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001ae8:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <MX_SPI4_Init+0x74>)
 8001aea:	2202      	movs	r2, #2
 8001aec:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001aee:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <MX_SPI4_Init+0x74>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <MX_SPI4_Init+0x74>)
 8001af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001afa:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <MX_SPI4_Init+0x74>)
 8001afe:	2230      	movs	r2, #48	; 0x30
 8001b00:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <MX_SPI4_Init+0x74>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <MX_SPI4_Init+0x74>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <MX_SPI4_Init+0x74>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <MX_SPI4_Init+0x74>)
 8001b16:	2207      	movs	r2, #7
 8001b18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b1a:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <MX_SPI4_Init+0x74>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <MX_SPI4_Init+0x74>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001b26:	4805      	ldr	r0, [pc, #20]	; (8001b3c <MX_SPI4_Init+0x74>)
 8001b28:	f002 fb52 	bl	80041d0 <HAL_SPI_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001b32:	f7ff ff5d 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	2000010c 	.word	0x2000010c
 8001b40:	40013400 	.word	0x40013400

08001b44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08c      	sub	sp, #48	; 0x30
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 031c 	add.w	r3, r7, #28
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a3d      	ldr	r2, [pc, #244]	; (8001c58 <HAL_SPI_MspInit+0x114>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d145      	bne.n	8001bf2 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b66:	4b3d      	ldr	r3, [pc, #244]	; (8001c5c <HAL_SPI_MspInit+0x118>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	4a3c      	ldr	r2, [pc, #240]	; (8001c5c <HAL_SPI_MspInit+0x118>)
 8001b6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b70:	6453      	str	r3, [r2, #68]	; 0x44
 8001b72:	4b3a      	ldr	r3, [pc, #232]	; (8001c5c <HAL_SPI_MspInit+0x118>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b7a:	61bb      	str	r3, [r7, #24]
 8001b7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b7e:	4b37      	ldr	r3, [pc, #220]	; (8001c5c <HAL_SPI_MspInit+0x118>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a36      	ldr	r2, [pc, #216]	; (8001c5c <HAL_SPI_MspInit+0x118>)
 8001b84:	f043 0308 	orr.w	r3, r3, #8
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b34      	ldr	r3, [pc, #208]	; (8001c5c <HAL_SPI_MspInit+0x118>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b96:	4b31      	ldr	r3, [pc, #196]	; (8001c5c <HAL_SPI_MspInit+0x118>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a30      	ldr	r2, [pc, #192]	; (8001c5c <HAL_SPI_MspInit+0x118>)
 8001b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b2e      	ldr	r3, [pc, #184]	; (8001c5c <HAL_SPI_MspInit+0x118>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 8001bae:	2380      	movs	r3, #128	; 0x80
 8001bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bbe:	2305      	movs	r3, #5
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001bc2:	f107 031c 	add.w	r3, r7, #28
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4825      	ldr	r0, [pc, #148]	; (8001c60 <HAL_SPI_MspInit+0x11c>)
 8001bca:	f001 f827 	bl	8002c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTI_MISO_Pin|POTI_CS_Pin|POTI_SCK_Pin;
 8001bce:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001be0:	2305      	movs	r3, #5
 8001be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001be4:	f107 031c 	add.w	r3, r7, #28
 8001be8:	4619      	mov	r1, r3
 8001bea:	481e      	ldr	r0, [pc, #120]	; (8001c64 <HAL_SPI_MspInit+0x120>)
 8001bec:	f001 f816 	bl	8002c1c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001bf0:	e02d      	b.n	8001c4e <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI4)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a1c      	ldr	r2, [pc, #112]	; (8001c68 <HAL_SPI_MspInit+0x124>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d128      	bne.n	8001c4e <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001bfc:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <HAL_SPI_MspInit+0x118>)
 8001bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c00:	4a16      	ldr	r2, [pc, #88]	; (8001c5c <HAL_SPI_MspInit+0x118>)
 8001c02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c06:	6453      	str	r3, [r2, #68]	; 0x44
 8001c08:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <HAL_SPI_MspInit+0x118>)
 8001c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <HAL_SPI_MspInit+0x118>)
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	4a10      	ldr	r2, [pc, #64]	; (8001c5c <HAL_SPI_MspInit+0x118>)
 8001c1a:	f043 0310 	orr.w	r3, r3, #16
 8001c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c20:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <HAL_SPI_MspInit+0x118>)
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c24:	f003 0310 	and.w	r3, r3, #16
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 8001c2c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c32:	2302      	movs	r3, #2
 8001c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001c3e:	2305      	movs	r3, #5
 8001c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c42:	f107 031c 	add.w	r3, r7, #28
 8001c46:	4619      	mov	r1, r3
 8001c48:	4808      	ldr	r0, [pc, #32]	; (8001c6c <HAL_SPI_MspInit+0x128>)
 8001c4a:	f000 ffe7 	bl	8002c1c <HAL_GPIO_Init>
}
 8001c4e:	bf00      	nop
 8001c50:	3730      	adds	r7, #48	; 0x30
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40013000 	.word	0x40013000
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40020c00 	.word	0x40020c00
 8001c64:	40021800 	.word	0x40021800
 8001c68:	40013400 	.word	0x40013400
 8001c6c:	40021000 	.word	0x40021000

08001c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c76:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <HAL_MspInit+0x44>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	4a0e      	ldr	r2, [pc, #56]	; (8001cb4 <HAL_MspInit+0x44>)
 8001c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c80:	6413      	str	r3, [r2, #64]	; 0x40
 8001c82:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <HAL_MspInit+0x44>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <HAL_MspInit+0x44>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	4a08      	ldr	r2, [pc, #32]	; (8001cb4 <HAL_MspInit+0x44>)
 8001c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c98:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_MspInit+0x44>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40023800 	.word	0x40023800

08001cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <HardFault_Handler+0x4>

08001ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <MemManage_Handler+0x4>

08001cd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd6:	e7fe      	b.n	8001cd6 <BusFault_Handler+0x4>

08001cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <UsageFault_Handler+0x4>

08001cde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d0c:	f000 fa90 	bl	8002230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d18:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <SystemInit+0x28>)
 8001d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1e:	4a07      	ldr	r2, [pc, #28]	; (8001d3c <SystemInit+0x28>)
 8001d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d28:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <SystemInit+0x28>)
 8001d2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d2e:	609a      	str	r2, [r3, #8]
#endif
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08c      	sub	sp, #48	; 0x30
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001d46:	f107 031c 	add.w	r3, r7, #28
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
 8001d54:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d56:	f107 030c 	add.w	r3, r7, #12
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	609a      	str	r2, [r3, #8]
 8001d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d64:	463b      	mov	r3, r7
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d6e:	4b35      	ldr	r3, [pc, #212]	; (8001e44 <MX_TIM1_Init+0x104>)
 8001d70:	4a35      	ldr	r2, [pc, #212]	; (8001e48 <MX_TIM1_Init+0x108>)
 8001d72:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d74:	4b33      	ldr	r3, [pc, #204]	; (8001e44 <MX_TIM1_Init+0x104>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7a:	4b32      	ldr	r3, [pc, #200]	; (8001e44 <MX_TIM1_Init+0x104>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d80:	4b30      	ldr	r3, [pc, #192]	; (8001e44 <MX_TIM1_Init+0x104>)
 8001d82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d88:	4b2e      	ldr	r3, [pc, #184]	; (8001e44 <MX_TIM1_Init+0x104>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d8e:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <MX_TIM1_Init+0x104>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d94:	4b2b      	ldr	r3, [pc, #172]	; (8001e44 <MX_TIM1_Init+0x104>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001d9a:	482a      	ldr	r0, [pc, #168]	; (8001e44 <MX_TIM1_Init+0x104>)
 8001d9c:	f003 f983 	bl	80050a6 <HAL_TIM_IC_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001da6:	f7ff fe23 	bl	80019f0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001daa:	2304      	movs	r3, #4
 8001dac:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001dae:	2350      	movs	r3, #80	; 0x50
 8001db0:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001db2:	2300      	movs	r3, #0
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001db6:	2300      	movs	r3, #0
 8001db8:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001dbe:	f107 031c 	add.w	r3, r7, #28
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	481f      	ldr	r0, [pc, #124]	; (8001e44 <MX_TIM1_Init+0x104>)
 8001dc6:	f003 fb69 	bl	800549c <HAL_TIM_SlaveConfigSynchro>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001dd0:	f7ff fe0e 	bl	80019f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001de4:	f107 030c 	add.w	r3, r7, #12
 8001de8:	2200      	movs	r2, #0
 8001dea:	4619      	mov	r1, r3
 8001dec:	4815      	ldr	r0, [pc, #84]	; (8001e44 <MX_TIM1_Init+0x104>)
 8001dee:	f003 f9b1 	bl	8005154 <HAL_TIM_IC_ConfigChannel>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001df8:	f7ff fdfa 	bl	80019f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001e00:	2302      	movs	r3, #2
 8001e02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001e04:	f107 030c 	add.w	r3, r7, #12
 8001e08:	2204      	movs	r2, #4
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	480d      	ldr	r0, [pc, #52]	; (8001e44 <MX_TIM1_Init+0x104>)
 8001e0e:	f003 f9a1 	bl	8005154 <HAL_TIM_IC_ConfigChannel>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001e18:	f7ff fdea 	bl	80019f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e20:	2300      	movs	r3, #0
 8001e22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e28:	463b      	mov	r3, r7
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4805      	ldr	r0, [pc, #20]	; (8001e44 <MX_TIM1_Init+0x104>)
 8001e2e:	f004 f8af 	bl	8005f90 <HAL_TIMEx_MasterConfigSynchronization>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001e38:	f7ff fdda 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e3c:	bf00      	nop
 8001e3e:	3730      	adds	r7, #48	; 0x30
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000220 	.word	0x20000220
 8001e48:	40010000 	.word	0x40010000

08001e4c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	; 0x28
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e52:	f107 031c 	add.w	r3, r7, #28
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e5e:	463b      	mov	r3, r7
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
 8001e6c:	615a      	str	r2, [r3, #20]
 8001e6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e70:	4b32      	ldr	r3, [pc, #200]	; (8001f3c <MX_TIM4_Init+0xf0>)
 8001e72:	4a33      	ldr	r2, [pc, #204]	; (8001f40 <MX_TIM4_Init+0xf4>)
 8001e74:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001e76:	4b31      	ldr	r3, [pc, #196]	; (8001f3c <MX_TIM4_Init+0xf0>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7c:	4b2f      	ldr	r3, [pc, #188]	; (8001f3c <MX_TIM4_Init+0xf0>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001e82:	4b2e      	ldr	r3, [pc, #184]	; (8001f3c <MX_TIM4_Init+0xf0>)
 8001e84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e88:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e8a:	4b2c      	ldr	r3, [pc, #176]	; (8001f3c <MX_TIM4_Init+0xf0>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e90:	4b2a      	ldr	r3, [pc, #168]	; (8001f3c <MX_TIM4_Init+0xf0>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e96:	4829      	ldr	r0, [pc, #164]	; (8001f3c <MX_TIM4_Init+0xf0>)
 8001e98:	f003 f8ae 	bl	8004ff8 <HAL_TIM_PWM_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001ea2:	f7ff fda5 	bl	80019f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001eae:	f107 031c 	add.w	r3, r7, #28
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4821      	ldr	r0, [pc, #132]	; (8001f3c <MX_TIM4_Init+0xf0>)
 8001eb6:	f004 f86b 	bl	8005f90 <HAL_TIMEx_MasterConfigSynchronization>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001ec0:	f7ff fd96 	bl	80019f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ec4:	2360      	movs	r3, #96	; 0x60
 8001ec6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ed4:	463b      	mov	r3, r7
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4818      	ldr	r0, [pc, #96]	; (8001f3c <MX_TIM4_Init+0xf0>)
 8001edc:	f003 f9ce 	bl	800527c <HAL_TIM_PWM_ConfigChannel>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001ee6:	f7ff fd83 	bl	80019f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001eea:	463b      	mov	r3, r7
 8001eec:	2204      	movs	r2, #4
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4812      	ldr	r0, [pc, #72]	; (8001f3c <MX_TIM4_Init+0xf0>)
 8001ef2:	f003 f9c3 	bl	800527c <HAL_TIM_PWM_ConfigChannel>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001efc:	f7ff fd78 	bl	80019f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f00:	463b      	mov	r3, r7
 8001f02:	2208      	movs	r2, #8
 8001f04:	4619      	mov	r1, r3
 8001f06:	480d      	ldr	r0, [pc, #52]	; (8001f3c <MX_TIM4_Init+0xf0>)
 8001f08:	f003 f9b8 	bl	800527c <HAL_TIM_PWM_ConfigChannel>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8001f12:	f7ff fd6d 	bl	80019f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f16:	463b      	mov	r3, r7
 8001f18:	220c      	movs	r2, #12
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4807      	ldr	r0, [pc, #28]	; (8001f3c <MX_TIM4_Init+0xf0>)
 8001f1e:	f003 f9ad 	bl	800527c <HAL_TIM_PWM_ConfigChannel>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8001f28:	f7ff fd62 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001f2c:	4803      	ldr	r0, [pc, #12]	; (8001f3c <MX_TIM4_Init+0xf0>)
 8001f2e:	f000 f86d 	bl	800200c <HAL_TIM_MspPostInit>

}
 8001f32:	bf00      	nop
 8001f34:	3728      	adds	r7, #40	; 0x28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	200001d4 	.word	0x200001d4
 8001f40:	40000800 	.word	0x40000800

08001f44 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	; 0x28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a17      	ldr	r2, [pc, #92]	; (8001fc0 <HAL_TIM_IC_MspInit+0x7c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d128      	bne.n	8001fb8 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f66:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <HAL_TIM_IC_MspInit+0x80>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	4a16      	ldr	r2, [pc, #88]	; (8001fc4 <HAL_TIM_IC_MspInit+0x80>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	6453      	str	r3, [r2, #68]	; 0x44
 8001f72:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <HAL_TIM_IC_MspInit+0x80>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f7e:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <HAL_TIM_IC_MspInit+0x80>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	4a10      	ldr	r2, [pc, #64]	; (8001fc4 <HAL_TIM_IC_MspInit+0x80>)
 8001f84:	f043 0310 	orr.w	r3, r3, #16
 8001f88:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <HAL_TIM_IC_MspInit+0x80>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f003 0310 	and.w	r3, r3, #16
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 8001f96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4805      	ldr	r0, [pc, #20]	; (8001fc8 <HAL_TIM_IC_MspInit+0x84>)
 8001fb4:	f000 fe32 	bl	8002c1c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001fb8:	bf00      	nop
 8001fba:	3728      	adds	r7, #40	; 0x28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40010000 	.word	0x40010000
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40021000 	.word	0x40021000

08001fcc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <HAL_TIM_PWM_MspInit+0x38>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d10b      	bne.n	8001ff6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fde:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <HAL_TIM_PWM_MspInit+0x3c>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	4a09      	ldr	r2, [pc, #36]	; (8002008 <HAL_TIM_PWM_MspInit+0x3c>)
 8001fe4:	f043 0304 	orr.w	r3, r3, #4
 8001fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fea:	4b07      	ldr	r3, [pc, #28]	; (8002008 <HAL_TIM_PWM_MspInit+0x3c>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40000800 	.word	0x40000800
 8002008:	40023800 	.word	0x40023800

0800200c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 030c 	add.w	r3, r7, #12
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a11      	ldr	r2, [pc, #68]	; (8002070 <HAL_TIM_MspPostInit+0x64>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d11c      	bne.n	8002068 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <HAL_TIM_MspPostInit+0x68>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a10      	ldr	r2, [pc, #64]	; (8002074 <HAL_TIM_MspPostInit+0x68>)
 8002034:	f043 0308 	orr.w	r3, r3, #8
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <HAL_TIM_MspPostInit+0x68>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin|PWM_HV_Charger_Pin;
 8002046:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800204a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204c:	2302      	movs	r3, #2
 800204e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002054:	2300      	movs	r3, #0
 8002056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002058:	2302      	movs	r3, #2
 800205a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800205c:	f107 030c 	add.w	r3, r7, #12
 8002060:	4619      	mov	r1, r3
 8002062:	4805      	ldr	r0, [pc, #20]	; (8002078 <HAL_TIM_MspPostInit+0x6c>)
 8002064:	f000 fdda 	bl	8002c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002068:	bf00      	nop
 800206a:	3720      	adds	r7, #32
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40000800 	.word	0x40000800
 8002074:	40023800 	.word	0x40023800
 8002078:	40020c00 	.word	0x40020c00

0800207c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002080:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <MX_USART2_UART_Init+0x58>)
 8002082:	4a15      	ldr	r2, [pc, #84]	; (80020d8 <MX_USART2_UART_Init+0x5c>)
 8002084:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002086:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <MX_USART2_UART_Init+0x58>)
 8002088:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800208c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <MX_USART2_UART_Init+0x58>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002094:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <MX_USART2_UART_Init+0x58>)
 8002096:	2200      	movs	r2, #0
 8002098:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800209a:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <MX_USART2_UART_Init+0x58>)
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020a0:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <MX_USART2_UART_Init+0x58>)
 80020a2:	220c      	movs	r2, #12
 80020a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020a6:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <MX_USART2_UART_Init+0x58>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020ac:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <MX_USART2_UART_Init+0x58>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020b2:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <MX_USART2_UART_Init+0x58>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <MX_USART2_UART_Init+0x58>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020be:	4805      	ldr	r0, [pc, #20]	; (80020d4 <MX_USART2_UART_Init+0x58>)
 80020c0:	f003 fff4 	bl	80060ac <HAL_UART_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80020ca:	f7ff fc91 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	2000026c 	.word	0x2000026c
 80020d8:	40004400 	.word	0x40004400

080020dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	; 0x28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a17      	ldr	r2, [pc, #92]	; (8002158 <HAL_UART_MspInit+0x7c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d127      	bne.n	800214e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020fe:	4b17      	ldr	r3, [pc, #92]	; (800215c <HAL_UART_MspInit+0x80>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	4a16      	ldr	r2, [pc, #88]	; (800215c <HAL_UART_MspInit+0x80>)
 8002104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002108:	6413      	str	r3, [r2, #64]	; 0x40
 800210a:	4b14      	ldr	r3, [pc, #80]	; (800215c <HAL_UART_MspInit+0x80>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002116:	4b11      	ldr	r3, [pc, #68]	; (800215c <HAL_UART_MspInit+0x80>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a10      	ldr	r2, [pc, #64]	; (800215c <HAL_UART_MspInit+0x80>)
 800211c:	f043 0308 	orr.w	r3, r3, #8
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b0e      	ldr	r3, [pc, #56]	; (800215c <HAL_UART_MspInit+0x80>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800212e:	2360      	movs	r3, #96	; 0x60
 8002130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213a:	2303      	movs	r3, #3
 800213c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800213e:	2307      	movs	r3, #7
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002142:	f107 0314 	add.w	r3, r7, #20
 8002146:	4619      	mov	r1, r3
 8002148:	4805      	ldr	r0, [pc, #20]	; (8002160 <HAL_UART_MspInit+0x84>)
 800214a:	f000 fd67 	bl	8002c1c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800214e:	bf00      	nop
 8002150:	3728      	adds	r7, #40	; 0x28
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40004400 	.word	0x40004400
 800215c:	40023800 	.word	0x40023800
 8002160:	40020c00 	.word	0x40020c00

08002164 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800219c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002168:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800216a:	e003      	b.n	8002174 <LoopCopyDataInit>

0800216c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800216e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002170:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002172:	3104      	adds	r1, #4

08002174 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002174:	480b      	ldr	r0, [pc, #44]	; (80021a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002176:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002178:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800217a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800217c:	d3f6      	bcc.n	800216c <CopyDataInit>
  ldr  r2, =_sbss
 800217e:	4a0b      	ldr	r2, [pc, #44]	; (80021ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002180:	e002      	b.n	8002188 <LoopFillZerobss>

08002182 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002182:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002184:	f842 3b04 	str.w	r3, [r2], #4

08002188 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002188:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800218a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800218c:	d3f9      	bcc.n	8002182 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800218e:	f7ff fdc1 	bl	8001d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002192:	f004 fc37 	bl	8006a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002196:	f7ff fa7b 	bl	8001690 <main>
  bx  lr    
 800219a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800219c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80021a0:	08007014 	.word	0x08007014
  ldr  r0, =_sdata
 80021a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80021a8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80021ac:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80021b0:	200002f4 	.word	0x200002f4

080021b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021b4:	e7fe      	b.n	80021b4 <ADC_IRQHandler>

080021b6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ba:	2003      	movs	r0, #3
 80021bc:	f000 fcfa 	bl	8002bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021c0:	2000      	movs	r0, #0
 80021c2:	f000 f805 	bl	80021d0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80021c6:	f7ff fd53 	bl	8001c70 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021d8:	4b12      	ldr	r3, [pc, #72]	; (8002224 <HAL_InitTick+0x54>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HAL_InitTick+0x58>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	4619      	mov	r1, r3
 80021e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 fd07 	bl	8002c02 <HAL_SYSTICK_Config>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e00e      	b.n	800221c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b0f      	cmp	r3, #15
 8002202:	d80a      	bhi.n	800221a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002204:	2200      	movs	r2, #0
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	f04f 30ff 	mov.w	r0, #4294967295
 800220c:	f000 fcdd 	bl	8002bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002210:	4a06      	ldr	r2, [pc, #24]	; (800222c <HAL_InitTick+0x5c>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	e000      	b.n	800221c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20000000 	.word	0x20000000
 8002228:	20000008 	.word	0x20000008
 800222c:	20000004 	.word	0x20000004

08002230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002234:	4b06      	ldr	r3, [pc, #24]	; (8002250 <HAL_IncTick+0x20>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_IncTick+0x24>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4413      	add	r3, r2
 8002240:	4a04      	ldr	r2, [pc, #16]	; (8002254 <HAL_IncTick+0x24>)
 8002242:	6013      	str	r3, [r2, #0]
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	20000008 	.word	0x20000008
 8002254:	200002f0 	.word	0x200002f0

08002258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return uwTick;
 800225c:	4b03      	ldr	r3, [pc, #12]	; (800226c <HAL_GetTick+0x14>)
 800225e:	681b      	ldr	r3, [r3, #0]
}
 8002260:	4618      	mov	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	200002f0 	.word	0x200002f0

08002270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002278:	f7ff ffee 	bl	8002258 <HAL_GetTick>
 800227c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002288:	d005      	beq.n	8002296 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800228a:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <HAL_Delay+0x44>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	461a      	mov	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4413      	add	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002296:	bf00      	nop
 8002298:	f7ff ffde 	bl	8002258 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d8f7      	bhi.n	8002298 <HAL_Delay+0x28>
  {
  }
}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000008 	.word	0x20000008

080022b8 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
 return __STM32F7xx_HAL_VERSION;
 80022bc:	4b02      	ldr	r3, [pc, #8]	; (80022c8 <HAL_GetHalVersion+0x10>)
}
 80022be:	4618      	mov	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	01020900 	.word	0x01020900

080022cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 80022d0:	4b03      	ldr	r3, [pc, #12]	; (80022e0 <HAL_GetREVID+0x14>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	0c1b      	lsrs	r3, r3, #16
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	e0042000 	.word	0xe0042000

080022e4 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80022e8:	4b04      	ldr	r3, [pc, #16]	; (80022fc <HAL_GetDEVID+0x18>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e0042000 	.word	0xe0042000

08002300 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <HAL_GetUIDw0+0x14>)
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	1ff0f420 	.word	0x1ff0f420

08002318 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 800231c:	4b03      	ldr	r3, [pc, #12]	; (800232c <HAL_GetUIDw1+0x14>)
 800231e:	681b      	ldr	r3, [r3, #0]
}
 8002320:	4618      	mov	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	1ff0f424 	.word	0x1ff0f424

08002330 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <HAL_GetUIDw2+0x14>)
 8002336:	681b      	ldr	r3, [r3, #0]
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	1ff0f428 	.word	0x1ff0f428

08002348 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002350:	2300      	movs	r3, #0
 8002352:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e031      	b.n	80023c2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	2b00      	cmp	r3, #0
 8002364:	d109      	bne.n	800237a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7fe fea8 	bl	80010bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	2b00      	cmp	r3, #0
 8002384:	d116      	bne.n	80023b4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800238a:	4b10      	ldr	r3, [pc, #64]	; (80023cc <HAL_ADC_Init+0x84>)
 800238c:	4013      	ands	r3, r2
 800238e:	f043 0202 	orr.w	r2, r3, #2
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f964 	bl	8002664 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	f023 0303 	bic.w	r3, r3, #3
 80023aa:	f043 0201 	orr.w	r2, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	641a      	str	r2, [r3, #64]	; 0x40
 80023b2:	e001      	b.n	80023b8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	ffffeefd 	.word	0xffffeefd

080023d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x1c>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e12a      	b.n	8002642 <HAL_ADC_ConfigChannel+0x272>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b09      	cmp	r3, #9
 80023fa:	d93a      	bls.n	8002472 <HAL_ADC_ConfigChannel+0xa2>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002404:	d035      	beq.n	8002472 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68d9      	ldr	r1, [r3, #12]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	b29b      	uxth	r3, r3
 8002412:	461a      	mov	r2, r3
 8002414:	4613      	mov	r3, r2
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	4413      	add	r3, r2
 800241a:	3b1e      	subs	r3, #30
 800241c:	2207      	movs	r2, #7
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43da      	mvns	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	400a      	ands	r2, r1
 800242a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a87      	ldr	r2, [pc, #540]	; (8002650 <HAL_ADC_ConfigChannel+0x280>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d10a      	bne.n	800244c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68d9      	ldr	r1, [r3, #12]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	061a      	lsls	r2, r3, #24
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800244a:	e035      	b.n	80024b8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68d9      	ldr	r1, [r3, #12]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	b29b      	uxth	r3, r3
 800245c:	4618      	mov	r0, r3
 800245e:	4603      	mov	r3, r0
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4403      	add	r3, r0
 8002464:	3b1e      	subs	r3, #30
 8002466:	409a      	lsls	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002470:	e022      	b.n	80024b8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6919      	ldr	r1, [r3, #16]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	b29b      	uxth	r3, r3
 800247e:	461a      	mov	r2, r3
 8002480:	4613      	mov	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4413      	add	r3, r2
 8002486:	2207      	movs	r2, #7
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43da      	mvns	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	400a      	ands	r2, r1
 8002494:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6919      	ldr	r1, [r3, #16]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	4618      	mov	r0, r3
 80024a8:	4603      	mov	r3, r0
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	4403      	add	r3, r0
 80024ae:	409a      	lsls	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b06      	cmp	r3, #6
 80024be:	d824      	bhi.n	800250a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	3b05      	subs	r3, #5
 80024d2:	221f      	movs	r2, #31
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43da      	mvns	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	400a      	ands	r2, r1
 80024e0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	4618      	mov	r0, r3
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	3b05      	subs	r3, #5
 80024fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	635a      	str	r2, [r3, #52]	; 0x34
 8002508:	e04c      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b0c      	cmp	r3, #12
 8002510:	d824      	bhi.n	800255c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	3b23      	subs	r3, #35	; 0x23
 8002524:	221f      	movs	r2, #31
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43da      	mvns	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	400a      	ands	r2, r1
 8002532:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	4618      	mov	r0, r3
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	3b23      	subs	r3, #35	; 0x23
 800254e:	fa00 f203 	lsl.w	r2, r0, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	631a      	str	r2, [r3, #48]	; 0x30
 800255a:	e023      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	3b41      	subs	r3, #65	; 0x41
 800256e:	221f      	movs	r2, #31
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43da      	mvns	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	400a      	ands	r2, r1
 800257c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	b29b      	uxth	r3, r3
 800258a:	4618      	mov	r0, r3
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	3b41      	subs	r3, #65	; 0x41
 8002598:	fa00 f203 	lsl.w	r2, r0, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a2a      	ldr	r2, [pc, #168]	; (8002654 <HAL_ADC_ConfigChannel+0x284>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d10a      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x1f4>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025b6:	d105      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80025b8:	4b27      	ldr	r3, [pc, #156]	; (8002658 <HAL_ADC_ConfigChannel+0x288>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	4a26      	ldr	r2, [pc, #152]	; (8002658 <HAL_ADC_ConfigChannel+0x288>)
 80025be:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80025c2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a22      	ldr	r2, [pc, #136]	; (8002654 <HAL_ADC_ConfigChannel+0x284>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d109      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x212>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b12      	cmp	r3, #18
 80025d4:	d105      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80025d6:	4b20      	ldr	r3, [pc, #128]	; (8002658 <HAL_ADC_ConfigChannel+0x288>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	4a1f      	ldr	r2, [pc, #124]	; (8002658 <HAL_ADC_ConfigChannel+0x288>)
 80025dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025e0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a1b      	ldr	r2, [pc, #108]	; (8002654 <HAL_ADC_ConfigChannel+0x284>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d125      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x268>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a17      	ldr	r2, [pc, #92]	; (8002650 <HAL_ADC_ConfigChannel+0x280>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d003      	beq.n	80025fe <HAL_ADC_ConfigChannel+0x22e>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b11      	cmp	r3, #17
 80025fc:	d11c      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80025fe:	4b16      	ldr	r3, [pc, #88]	; (8002658 <HAL_ADC_ConfigChannel+0x288>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	4a15      	ldr	r2, [pc, #84]	; (8002658 <HAL_ADC_ConfigChannel+0x288>)
 8002604:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002608:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a10      	ldr	r2, [pc, #64]	; (8002650 <HAL_ADC_ConfigChannel+0x280>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d111      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002614:	4b11      	ldr	r3, [pc, #68]	; (800265c <HAL_ADC_ConfigChannel+0x28c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a11      	ldr	r2, [pc, #68]	; (8002660 <HAL_ADC_ConfigChannel+0x290>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	0c9a      	lsrs	r2, r3, #18
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800262a:	e002      	b.n	8002632 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	3b01      	subs	r3, #1
 8002630:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f9      	bne.n	800262c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	10000012 	.word	0x10000012
 8002654:	40012000 	.word	0x40012000
 8002658:	40012300 	.word	0x40012300
 800265c:	20000000 	.word	0x20000000
 8002660:	431bde83 	.word	0x431bde83

08002664 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800266c:	4b78      	ldr	r3, [pc, #480]	; (8002850 <ADC_Init+0x1ec>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	4a77      	ldr	r2, [pc, #476]	; (8002850 <ADC_Init+0x1ec>)
 8002672:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002676:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002678:	4b75      	ldr	r3, [pc, #468]	; (8002850 <ADC_Init+0x1ec>)
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	4973      	ldr	r1, [pc, #460]	; (8002850 <ADC_Init+0x1ec>)
 8002682:	4313      	orrs	r3, r2
 8002684:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002694:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6859      	ldr	r1, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	021a      	lsls	r2, r3, #8
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6859      	ldr	r1, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6899      	ldr	r1, [r3, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f2:	4a58      	ldr	r2, [pc, #352]	; (8002854 <ADC_Init+0x1f0>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d022      	beq.n	800273e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002706:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6899      	ldr	r1, [r3, #8]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002728:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6899      	ldr	r1, [r3, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	e00f      	b.n	800275e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800274c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800275c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0202 	bic.w	r2, r2, #2
 800276c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6899      	ldr	r1, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	005a      	lsls	r2, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d01b      	beq.n	80027c4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800279a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6859      	ldr	r1, [r3, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	3b01      	subs	r3, #1
 80027b8:	035a      	lsls	r2, r3, #13
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	e007      	b.n	80027d4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	051a      	lsls	r2, r3, #20
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002808:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6899      	ldr	r1, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002816:	025a      	lsls	r2, r3, #9
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800282e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6899      	ldr	r1, [r3, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	029a      	lsls	r2, r3, #10
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	609a      	str	r2, [r3, #8]
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	40012300 	.word	0x40012300
 8002854:	0f000001 	.word	0x0f000001

08002858 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e0ed      	b.n	8002a46 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d102      	bne.n	800287c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7fe fccc 	bl	8001214 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0202 	bic.w	r2, r2, #2
 800288a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800288c:	f7ff fce4 	bl	8002258 <HAL_GetTick>
 8002890:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002892:	e012      	b.n	80028ba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002894:	f7ff fce0 	bl	8002258 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b0a      	cmp	r3, #10
 80028a0:	d90b      	bls.n	80028ba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2205      	movs	r2, #5
 80028b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e0c5      	b.n	8002a46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1e5      	bne.n	8002894 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0201 	orr.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028d8:	f7ff fcbe 	bl	8002258 <HAL_GetTick>
 80028dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028de:	e012      	b.n	8002906 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028e0:	f7ff fcba 	bl	8002258 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b0a      	cmp	r3, #10
 80028ec:	d90b      	bls.n	8002906 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2205      	movs	r2, #5
 80028fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e09f      	b.n	8002a46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0e5      	beq.n	80028e0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	7e1b      	ldrb	r3, [r3, #24]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d108      	bne.n	800292e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	e007      	b.n	800293e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800293c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	7e5b      	ldrb	r3, [r3, #25]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d108      	bne.n	8002958 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	e007      	b.n	8002968 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002966:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	7e9b      	ldrb	r3, [r3, #26]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d108      	bne.n	8002982 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0220 	orr.w	r2, r2, #32
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	e007      	b.n	8002992 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0220 	bic.w	r2, r2, #32
 8002990:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	7edb      	ldrb	r3, [r3, #27]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d108      	bne.n	80029ac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0210 	bic.w	r2, r2, #16
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	e007      	b.n	80029bc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0210 	orr.w	r2, r2, #16
 80029ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	7f1b      	ldrb	r3, [r3, #28]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d108      	bne.n	80029d6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0208 	orr.w	r2, r2, #8
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	e007      	b.n	80029e6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0208 	bic.w	r2, r2, #8
 80029e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	7f5b      	ldrb	r3, [r3, #29]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d108      	bne.n	8002a00 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f042 0204 	orr.w	r2, r2, #4
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	e007      	b.n	8002a10 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0204 	bic.w	r2, r2, #4
 8002a0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	ea42 0103 	orr.w	r1, r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	1e5a      	subs	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <__NVIC_SetPriorityGrouping+0x40>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <__NVIC_SetPriorityGrouping+0x44>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a7e:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <__NVIC_SetPriorityGrouping+0x40>)
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	60d3      	str	r3, [r2, #12]
}
 8002a84:	bf00      	nop
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000ed00 	.word	0xe000ed00
 8002a94:	05fa0000 	.word	0x05fa0000

08002a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a9c:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	0a1b      	lsrs	r3, r3, #8
 8002aa2:	f003 0307 	and.w	r3, r3, #7
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	6039      	str	r1, [r7, #0]
 8002abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	db0a      	blt.n	8002ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	490c      	ldr	r1, [pc, #48]	; (8002b00 <__NVIC_SetPriority+0x4c>)
 8002ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad2:	0112      	lsls	r2, r2, #4
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002adc:	e00a      	b.n	8002af4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	4908      	ldr	r1, [pc, #32]	; (8002b04 <__NVIC_SetPriority+0x50>)
 8002ae4:	79fb      	ldrb	r3, [r7, #7]
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	3b04      	subs	r3, #4
 8002aec:	0112      	lsls	r2, r2, #4
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	440b      	add	r3, r1
 8002af2:	761a      	strb	r2, [r3, #24]
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	e000e100 	.word	0xe000e100
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b089      	sub	sp, #36	; 0x24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f1c3 0307 	rsb	r3, r3, #7
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	bf28      	it	cs
 8002b26:	2304      	movcs	r3, #4
 8002b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	2b06      	cmp	r3, #6
 8002b30:	d902      	bls.n	8002b38 <NVIC_EncodePriority+0x30>
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	3b03      	subs	r3, #3
 8002b36:	e000      	b.n	8002b3a <NVIC_EncodePriority+0x32>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43da      	mvns	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b50:	f04f 31ff 	mov.w	r1, #4294967295
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5a:	43d9      	mvns	r1, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b60:	4313      	orrs	r3, r2
         );
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3724      	adds	r7, #36	; 0x24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
	...

08002b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b80:	d301      	bcc.n	8002b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b82:	2301      	movs	r3, #1
 8002b84:	e00f      	b.n	8002ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b86:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <SysTick_Config+0x40>)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b8e:	210f      	movs	r1, #15
 8002b90:	f04f 30ff 	mov.w	r0, #4294967295
 8002b94:	f7ff ff8e 	bl	8002ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <SysTick_Config+0x40>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b9e:	4b04      	ldr	r3, [pc, #16]	; (8002bb0 <SysTick_Config+0x40>)
 8002ba0:	2207      	movs	r2, #7
 8002ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	e000e010 	.word	0xe000e010

08002bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff ff47 	bl	8002a50 <__NVIC_SetPriorityGrouping>
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b086      	sub	sp, #24
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
 8002bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bdc:	f7ff ff5c 	bl	8002a98 <__NVIC_GetPriorityGrouping>
 8002be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	6978      	ldr	r0, [r7, #20]
 8002be8:	f7ff ff8e 	bl	8002b08 <NVIC_EncodePriority>
 8002bec:	4602      	mov	r2, r0
 8002bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ff5d 	bl	8002ab4 <__NVIC_SetPriority>
}
 8002bfa:	bf00      	nop
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff ffb0 	bl	8002b70 <SysTick_Config>
 8002c10:	4603      	mov	r3, r0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b089      	sub	sp, #36	; 0x24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
 8002c3a:	e175      	b.n	8002f28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	f040 8164 	bne.w	8002f22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d00b      	beq.n	8002c7a <HAL_GPIO_Init+0x5e>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d007      	beq.n	8002c7a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c6e:	2b11      	cmp	r3, #17
 8002c70:	d003      	beq.n	8002c7a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b12      	cmp	r3, #18
 8002c78:	d130      	bne.n	8002cdc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	2203      	movs	r2, #3
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	091b      	lsrs	r3, r3, #4
 8002cc6:	f003 0201 	and.w	r2, r3, #1
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d003      	beq.n	8002d1c <HAL_GPIO_Init+0x100>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b12      	cmp	r3, #18
 8002d1a:	d123      	bne.n	8002d64 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	08da      	lsrs	r2, r3, #3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3208      	adds	r2, #8
 8002d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	220f      	movs	r2, #15
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	08da      	lsrs	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3208      	adds	r2, #8
 8002d5e:	69b9      	ldr	r1, [r7, #24]
 8002d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	2203      	movs	r2, #3
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0203 	and.w	r2, r3, #3
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 80be 	beq.w	8002f22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da6:	4b66      	ldr	r3, [pc, #408]	; (8002f40 <HAL_GPIO_Init+0x324>)
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	4a65      	ldr	r2, [pc, #404]	; (8002f40 <HAL_GPIO_Init+0x324>)
 8002dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002db0:	6453      	str	r3, [r2, #68]	; 0x44
 8002db2:	4b63      	ldr	r3, [pc, #396]	; (8002f40 <HAL_GPIO_Init+0x324>)
 8002db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002dbe:	4a61      	ldr	r2, [pc, #388]	; (8002f44 <HAL_GPIO_Init+0x328>)
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	089b      	lsrs	r3, r3, #2
 8002dc4:	3302      	adds	r3, #2
 8002dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	220f      	movs	r2, #15
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4013      	ands	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a58      	ldr	r2, [pc, #352]	; (8002f48 <HAL_GPIO_Init+0x32c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d037      	beq.n	8002e5a <HAL_GPIO_Init+0x23e>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a57      	ldr	r2, [pc, #348]	; (8002f4c <HAL_GPIO_Init+0x330>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d031      	beq.n	8002e56 <HAL_GPIO_Init+0x23a>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a56      	ldr	r2, [pc, #344]	; (8002f50 <HAL_GPIO_Init+0x334>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d02b      	beq.n	8002e52 <HAL_GPIO_Init+0x236>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a55      	ldr	r2, [pc, #340]	; (8002f54 <HAL_GPIO_Init+0x338>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d025      	beq.n	8002e4e <HAL_GPIO_Init+0x232>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a54      	ldr	r2, [pc, #336]	; (8002f58 <HAL_GPIO_Init+0x33c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d01f      	beq.n	8002e4a <HAL_GPIO_Init+0x22e>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a53      	ldr	r2, [pc, #332]	; (8002f5c <HAL_GPIO_Init+0x340>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d019      	beq.n	8002e46 <HAL_GPIO_Init+0x22a>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a52      	ldr	r2, [pc, #328]	; (8002f60 <HAL_GPIO_Init+0x344>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d013      	beq.n	8002e42 <HAL_GPIO_Init+0x226>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a51      	ldr	r2, [pc, #324]	; (8002f64 <HAL_GPIO_Init+0x348>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d00d      	beq.n	8002e3e <HAL_GPIO_Init+0x222>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a50      	ldr	r2, [pc, #320]	; (8002f68 <HAL_GPIO_Init+0x34c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d007      	beq.n	8002e3a <HAL_GPIO_Init+0x21e>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a4f      	ldr	r2, [pc, #316]	; (8002f6c <HAL_GPIO_Init+0x350>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d101      	bne.n	8002e36 <HAL_GPIO_Init+0x21a>
 8002e32:	2309      	movs	r3, #9
 8002e34:	e012      	b.n	8002e5c <HAL_GPIO_Init+0x240>
 8002e36:	230a      	movs	r3, #10
 8002e38:	e010      	b.n	8002e5c <HAL_GPIO_Init+0x240>
 8002e3a:	2308      	movs	r3, #8
 8002e3c:	e00e      	b.n	8002e5c <HAL_GPIO_Init+0x240>
 8002e3e:	2307      	movs	r3, #7
 8002e40:	e00c      	b.n	8002e5c <HAL_GPIO_Init+0x240>
 8002e42:	2306      	movs	r3, #6
 8002e44:	e00a      	b.n	8002e5c <HAL_GPIO_Init+0x240>
 8002e46:	2305      	movs	r3, #5
 8002e48:	e008      	b.n	8002e5c <HAL_GPIO_Init+0x240>
 8002e4a:	2304      	movs	r3, #4
 8002e4c:	e006      	b.n	8002e5c <HAL_GPIO_Init+0x240>
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e004      	b.n	8002e5c <HAL_GPIO_Init+0x240>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e002      	b.n	8002e5c <HAL_GPIO_Init+0x240>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <HAL_GPIO_Init+0x240>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	69fa      	ldr	r2, [r7, #28]
 8002e5e:	f002 0203 	and.w	r2, r2, #3
 8002e62:	0092      	lsls	r2, r2, #2
 8002e64:	4093      	lsls	r3, r2
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e6c:	4935      	ldr	r1, [pc, #212]	; (8002f44 <HAL_GPIO_Init+0x328>)
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	089b      	lsrs	r3, r3, #2
 8002e72:	3302      	adds	r3, #2
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e7a:	4b3d      	ldr	r3, [pc, #244]	; (8002f70 <HAL_GPIO_Init+0x354>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	43db      	mvns	r3, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4013      	ands	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e9e:	4a34      	ldr	r2, [pc, #208]	; (8002f70 <HAL_GPIO_Init+0x354>)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ea4:	4b32      	ldr	r3, [pc, #200]	; (8002f70 <HAL_GPIO_Init+0x354>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	43db      	mvns	r3, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ec8:	4a29      	ldr	r2, [pc, #164]	; (8002f70 <HAL_GPIO_Init+0x354>)
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ece:	4b28      	ldr	r3, [pc, #160]	; (8002f70 <HAL_GPIO_Init+0x354>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4013      	ands	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ef2:	4a1f      	ldr	r2, [pc, #124]	; (8002f70 <HAL_GPIO_Init+0x354>)
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ef8:	4b1d      	ldr	r3, [pc, #116]	; (8002f70 <HAL_GPIO_Init+0x354>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4013      	ands	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f1c:	4a14      	ldr	r2, [pc, #80]	; (8002f70 <HAL_GPIO_Init+0x354>)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	3301      	adds	r3, #1
 8002f26:	61fb      	str	r3, [r7, #28]
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	2b0f      	cmp	r3, #15
 8002f2c:	f67f ae86 	bls.w	8002c3c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f30:	bf00      	nop
 8002f32:	bf00      	nop
 8002f34:	3724      	adds	r7, #36	; 0x24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40023800 	.word	0x40023800
 8002f44:	40013800 	.word	0x40013800
 8002f48:	40020000 	.word	0x40020000
 8002f4c:	40020400 	.word	0x40020400
 8002f50:	40020800 	.word	0x40020800
 8002f54:	40020c00 	.word	0x40020c00
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	40021400 	.word	0x40021400
 8002f60:	40021800 	.word	0x40021800
 8002f64:	40021c00 	.word	0x40021c00
 8002f68:	40022000 	.word	0x40022000
 8002f6c:	40022400 	.word	0x40022400
 8002f70:	40013c00 	.word	0x40013c00

08002f74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	887b      	ldrh	r3, [r7, #2]
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d002      	beq.n	8002f92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	73fb      	strb	r3, [r7, #15]
 8002f90:	e001      	b.n	8002f96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f92:	2300      	movs	r3, #0
 8002f94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	807b      	strh	r3, [r7, #2]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fb4:	787b      	ldrb	r3, [r7, #1]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fba:	887a      	ldrh	r2, [r7, #2]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002fc0:	e003      	b.n	8002fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002fc2:	887b      	ldrh	r3, [r7, #2]
 8002fc4:	041a      	lsls	r2, r3, #16
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	619a      	str	r2, [r3, #24]
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
	...

08002fd8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002fe2:	4b23      	ldr	r3, [pc, #140]	; (8003070 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	4a22      	ldr	r2, [pc, #136]	; (8003070 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fec:	6413      	str	r3, [r2, #64]	; 0x40
 8002fee:	4b20      	ldr	r3, [pc, #128]	; (8003070 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002ffa:	4b1e      	ldr	r3, [pc, #120]	; (8003074 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a1d      	ldr	r2, [pc, #116]	; (8003074 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003004:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003006:	f7ff f927 	bl	8002258 <HAL_GetTick>
 800300a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800300c:	e009      	b.n	8003022 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800300e:	f7ff f923 	bl	8002258 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800301c:	d901      	bls.n	8003022 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e022      	b.n	8003068 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003022:	4b14      	ldr	r3, [pc, #80]	; (8003074 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800302a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800302e:	d1ee      	bne.n	800300e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003030:	4b10      	ldr	r3, [pc, #64]	; (8003074 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a0f      	ldr	r2, [pc, #60]	; (8003074 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800303a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800303c:	f7ff f90c 	bl	8002258 <HAL_GetTick>
 8003040:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003042:	e009      	b.n	8003058 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003044:	f7ff f908 	bl	8002258 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003052:	d901      	bls.n	8003058 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e007      	b.n	8003068 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003058:	4b06      	ldr	r3, [pc, #24]	; (8003074 <HAL_PWREx_EnableOverDrive+0x9c>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003060:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003064:	d1ee      	bne.n	8003044 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40023800 	.word	0x40023800
 8003074:	40007000 	.word	0x40007000

08003078 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003080:	2300      	movs	r3, #0
 8003082:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e29b      	b.n	80035c6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 8087 	beq.w	80031aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800309c:	4b96      	ldr	r3, [pc, #600]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 030c 	and.w	r3, r3, #12
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d00c      	beq.n	80030c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030a8:	4b93      	ldr	r3, [pc, #588]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 030c 	and.w	r3, r3, #12
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d112      	bne.n	80030da <HAL_RCC_OscConfig+0x62>
 80030b4:	4b90      	ldr	r3, [pc, #576]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030c0:	d10b      	bne.n	80030da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c2:	4b8d      	ldr	r3, [pc, #564]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d06c      	beq.n	80031a8 <HAL_RCC_OscConfig+0x130>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d168      	bne.n	80031a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e275      	b.n	80035c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e2:	d106      	bne.n	80030f2 <HAL_RCC_OscConfig+0x7a>
 80030e4:	4b84      	ldr	r3, [pc, #528]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a83      	ldr	r2, [pc, #524]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 80030ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	e02e      	b.n	8003150 <HAL_RCC_OscConfig+0xd8>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10c      	bne.n	8003114 <HAL_RCC_OscConfig+0x9c>
 80030fa:	4b7f      	ldr	r3, [pc, #508]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a7e      	ldr	r2, [pc, #504]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 8003100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	4b7c      	ldr	r3, [pc, #496]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a7b      	ldr	r2, [pc, #492]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 800310c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	e01d      	b.n	8003150 <HAL_RCC_OscConfig+0xd8>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800311c:	d10c      	bne.n	8003138 <HAL_RCC_OscConfig+0xc0>
 800311e:	4b76      	ldr	r3, [pc, #472]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a75      	ldr	r2, [pc, #468]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 8003124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	4b73      	ldr	r3, [pc, #460]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a72      	ldr	r2, [pc, #456]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e00b      	b.n	8003150 <HAL_RCC_OscConfig+0xd8>
 8003138:	4b6f      	ldr	r3, [pc, #444]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a6e      	ldr	r2, [pc, #440]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 800313e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003142:	6013      	str	r3, [r2, #0]
 8003144:	4b6c      	ldr	r3, [pc, #432]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a6b      	ldr	r2, [pc, #428]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 800314a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800314e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d013      	beq.n	8003180 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7ff f87e 	bl	8002258 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003160:	f7ff f87a 	bl	8002258 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	; 0x64
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e229      	b.n	80035c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003172:	4b61      	ldr	r3, [pc, #388]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0xe8>
 800317e:	e014      	b.n	80031aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003180:	f7ff f86a 	bl	8002258 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003188:	f7ff f866 	bl	8002258 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b64      	cmp	r3, #100	; 0x64
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e215      	b.n	80035c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319a:	4b57      	ldr	r3, [pc, #348]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x110>
 80031a6:	e000      	b.n	80031aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d069      	beq.n	800328a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031b6:	4b50      	ldr	r3, [pc, #320]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 030c 	and.w	r3, r3, #12
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00b      	beq.n	80031da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031c2:	4b4d      	ldr	r3, [pc, #308]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d11c      	bne.n	8003208 <HAL_RCC_OscConfig+0x190>
 80031ce:	4b4a      	ldr	r3, [pc, #296]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d116      	bne.n	8003208 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031da:	4b47      	ldr	r3, [pc, #284]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d005      	beq.n	80031f2 <HAL_RCC_OscConfig+0x17a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d001      	beq.n	80031f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e1e9      	b.n	80035c6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f2:	4b41      	ldr	r3, [pc, #260]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	493d      	ldr	r1, [pc, #244]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003206:	e040      	b.n	800328a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d023      	beq.n	8003258 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003210:	4b39      	ldr	r3, [pc, #228]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a38      	ldr	r2, [pc, #224]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 8003216:	f043 0301 	orr.w	r3, r3, #1
 800321a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7ff f81c 	bl	8002258 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003224:	f7ff f818 	bl	8002258 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e1c7      	b.n	80035c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003236:	4b30      	ldr	r3, [pc, #192]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f0      	beq.n	8003224 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003242:	4b2d      	ldr	r3, [pc, #180]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4929      	ldr	r1, [pc, #164]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 8003252:	4313      	orrs	r3, r2
 8003254:	600b      	str	r3, [r1, #0]
 8003256:	e018      	b.n	800328a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003258:	4b27      	ldr	r3, [pc, #156]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a26      	ldr	r2, [pc, #152]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 800325e:	f023 0301 	bic.w	r3, r3, #1
 8003262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003264:	f7fe fff8 	bl	8002258 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800326c:	f7fe fff4 	bl	8002258 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e1a3      	b.n	80035c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800327e:	4b1e      	ldr	r3, [pc, #120]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d038      	beq.n	8003308 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d019      	beq.n	80032d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800329e:	4b16      	ldr	r3, [pc, #88]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 80032a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a2:	4a15      	ldr	r2, [pc, #84]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032aa:	f7fe ffd5 	bl	8002258 <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b2:	f7fe ffd1 	bl	8002258 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e180      	b.n	80035c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032c4:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 80032c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0f0      	beq.n	80032b2 <HAL_RCC_OscConfig+0x23a>
 80032d0:	e01a      	b.n	8003308 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d2:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 80032d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d6:	4a08      	ldr	r2, [pc, #32]	; (80032f8 <HAL_RCC_OscConfig+0x280>)
 80032d8:	f023 0301 	bic.w	r3, r3, #1
 80032dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032de:	f7fe ffbb 	bl	8002258 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e4:	e00a      	b.n	80032fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032e6:	f7fe ffb7 	bl	8002258 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d903      	bls.n	80032fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e166      	b.n	80035c6 <HAL_RCC_OscConfig+0x54e>
 80032f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032fc:	4b92      	ldr	r3, [pc, #584]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 80032fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1ee      	bne.n	80032e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 80a4 	beq.w	800345e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003316:	4b8c      	ldr	r3, [pc, #560]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10d      	bne.n	800333e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003322:	4b89      	ldr	r3, [pc, #548]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	4a88      	ldr	r2, [pc, #544]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 8003328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800332c:	6413      	str	r3, [r2, #64]	; 0x40
 800332e:	4b86      	ldr	r3, [pc, #536]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003336:	60bb      	str	r3, [r7, #8]
 8003338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800333a:	2301      	movs	r3, #1
 800333c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800333e:	4b83      	ldr	r3, [pc, #524]	; (800354c <HAL_RCC_OscConfig+0x4d4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003346:	2b00      	cmp	r3, #0
 8003348:	d118      	bne.n	800337c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800334a:	4b80      	ldr	r3, [pc, #512]	; (800354c <HAL_RCC_OscConfig+0x4d4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a7f      	ldr	r2, [pc, #508]	; (800354c <HAL_RCC_OscConfig+0x4d4>)
 8003350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003356:	f7fe ff7f 	bl	8002258 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335e:	f7fe ff7b 	bl	8002258 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b64      	cmp	r3, #100	; 0x64
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e12a      	b.n	80035c6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003370:	4b76      	ldr	r3, [pc, #472]	; (800354c <HAL_RCC_OscConfig+0x4d4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0f0      	beq.n	800335e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d106      	bne.n	8003392 <HAL_RCC_OscConfig+0x31a>
 8003384:	4b70      	ldr	r3, [pc, #448]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 8003386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003388:	4a6f      	ldr	r2, [pc, #444]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	6713      	str	r3, [r2, #112]	; 0x70
 8003390:	e02d      	b.n	80033ee <HAL_RCC_OscConfig+0x376>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10c      	bne.n	80033b4 <HAL_RCC_OscConfig+0x33c>
 800339a:	4b6b      	ldr	r3, [pc, #428]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	4a6a      	ldr	r2, [pc, #424]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 80033a0:	f023 0301 	bic.w	r3, r3, #1
 80033a4:	6713      	str	r3, [r2, #112]	; 0x70
 80033a6:	4b68      	ldr	r3, [pc, #416]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 80033a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033aa:	4a67      	ldr	r2, [pc, #412]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 80033ac:	f023 0304 	bic.w	r3, r3, #4
 80033b0:	6713      	str	r3, [r2, #112]	; 0x70
 80033b2:	e01c      	b.n	80033ee <HAL_RCC_OscConfig+0x376>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b05      	cmp	r3, #5
 80033ba:	d10c      	bne.n	80033d6 <HAL_RCC_OscConfig+0x35e>
 80033bc:	4b62      	ldr	r3, [pc, #392]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	4a61      	ldr	r2, [pc, #388]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 80033c2:	f043 0304 	orr.w	r3, r3, #4
 80033c6:	6713      	str	r3, [r2, #112]	; 0x70
 80033c8:	4b5f      	ldr	r3, [pc, #380]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	4a5e      	ldr	r2, [pc, #376]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	6713      	str	r3, [r2, #112]	; 0x70
 80033d4:	e00b      	b.n	80033ee <HAL_RCC_OscConfig+0x376>
 80033d6:	4b5c      	ldr	r3, [pc, #368]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033da:	4a5b      	ldr	r2, [pc, #364]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 80033dc:	f023 0301 	bic.w	r3, r3, #1
 80033e0:	6713      	str	r3, [r2, #112]	; 0x70
 80033e2:	4b59      	ldr	r3, [pc, #356]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	4a58      	ldr	r2, [pc, #352]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 80033e8:	f023 0304 	bic.w	r3, r3, #4
 80033ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d015      	beq.n	8003422 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f6:	f7fe ff2f 	bl	8002258 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fc:	e00a      	b.n	8003414 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fe:	f7fe ff2b 	bl	8002258 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f241 3288 	movw	r2, #5000	; 0x1388
 800340c:	4293      	cmp	r3, r2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e0d8      	b.n	80035c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003414:	4b4c      	ldr	r3, [pc, #304]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 8003416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0ee      	beq.n	80033fe <HAL_RCC_OscConfig+0x386>
 8003420:	e014      	b.n	800344c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003422:	f7fe ff19 	bl	8002258 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003428:	e00a      	b.n	8003440 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342a:	f7fe ff15 	bl	8002258 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	f241 3288 	movw	r2, #5000	; 0x1388
 8003438:	4293      	cmp	r3, r2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e0c2      	b.n	80035c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003440:	4b41      	ldr	r3, [pc, #260]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 8003442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1ee      	bne.n	800342a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800344c:	7dfb      	ldrb	r3, [r7, #23]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d105      	bne.n	800345e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003452:	4b3d      	ldr	r3, [pc, #244]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	4a3c      	ldr	r2, [pc, #240]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 8003458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800345c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 80ae 	beq.w	80035c4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003468:	4b37      	ldr	r3, [pc, #220]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f003 030c 	and.w	r3, r3, #12
 8003470:	2b08      	cmp	r3, #8
 8003472:	d06d      	beq.n	8003550 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	2b02      	cmp	r3, #2
 800347a:	d14b      	bne.n	8003514 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347c:	4b32      	ldr	r3, [pc, #200]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a31      	ldr	r2, [pc, #196]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 8003482:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fe fee6 	bl	8002258 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003490:	f7fe fee2 	bl	8002258 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e091      	b.n	80035c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a2:	4b29      	ldr	r3, [pc, #164]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69da      	ldr	r2, [r3, #28]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	019b      	lsls	r3, r3, #6
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c4:	085b      	lsrs	r3, r3, #1
 80034c6:	3b01      	subs	r3, #1
 80034c8:	041b      	lsls	r3, r3, #16
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d0:	061b      	lsls	r3, r3, #24
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d8:	071b      	lsls	r3, r3, #28
 80034da:	491b      	ldr	r1, [pc, #108]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e0:	4b19      	ldr	r3, [pc, #100]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a18      	ldr	r2, [pc, #96]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 80034e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ec:	f7fe feb4 	bl	8002258 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f4:	f7fe feb0 	bl	8002258 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e05f      	b.n	80035c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003506:	4b10      	ldr	r3, [pc, #64]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0f0      	beq.n	80034f4 <HAL_RCC_OscConfig+0x47c>
 8003512:	e057      	b.n	80035c4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003514:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a0b      	ldr	r2, [pc, #44]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 800351a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800351e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003520:	f7fe fe9a 	bl	8002258 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003528:	f7fe fe96 	bl	8002258 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e045      	b.n	80035c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800353a:	4b03      	ldr	r3, [pc, #12]	; (8003548 <HAL_RCC_OscConfig+0x4d0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0x4b0>
 8003546:	e03d      	b.n	80035c4 <HAL_RCC_OscConfig+0x54c>
 8003548:	40023800 	.word	0x40023800
 800354c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003550:	4b1f      	ldr	r3, [pc, #124]	; (80035d0 <HAL_RCC_OscConfig+0x558>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d030      	beq.n	80035c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003568:	429a      	cmp	r2, r3
 800356a:	d129      	bne.n	80035c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003576:	429a      	cmp	r2, r3
 8003578:	d122      	bne.n	80035c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003580:	4013      	ands	r3, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003586:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003588:	4293      	cmp	r3, r2
 800358a:	d119      	bne.n	80035c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	085b      	lsrs	r3, r3, #1
 8003598:	3b01      	subs	r3, #1
 800359a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800359c:	429a      	cmp	r2, r3
 800359e:	d10f      	bne.n	80035c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d107      	bne.n	80035c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035bc:	429a      	cmp	r2, r3
 80035be:	d001      	beq.n	80035c4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e000      	b.n	80035c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40023800 	.word	0x40023800

080035d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80035de:	2300      	movs	r3, #0
 80035e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e0d0      	b.n	800378e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035ec:	4b6a      	ldr	r3, [pc, #424]	; (8003798 <HAL_RCC_ClockConfig+0x1c4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 030f 	and.w	r3, r3, #15
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d910      	bls.n	800361c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fa:	4b67      	ldr	r3, [pc, #412]	; (8003798 <HAL_RCC_ClockConfig+0x1c4>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f023 020f 	bic.w	r2, r3, #15
 8003602:	4965      	ldr	r1, [pc, #404]	; (8003798 <HAL_RCC_ClockConfig+0x1c4>)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	4313      	orrs	r3, r2
 8003608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800360a:	4b63      	ldr	r3, [pc, #396]	; (8003798 <HAL_RCC_ClockConfig+0x1c4>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d001      	beq.n	800361c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e0b8      	b.n	800378e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d020      	beq.n	800366a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003634:	4b59      	ldr	r3, [pc, #356]	; (800379c <HAL_RCC_ClockConfig+0x1c8>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	4a58      	ldr	r2, [pc, #352]	; (800379c <HAL_RCC_ClockConfig+0x1c8>)
 800363a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800363e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b00      	cmp	r3, #0
 800364a:	d005      	beq.n	8003658 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800364c:	4b53      	ldr	r3, [pc, #332]	; (800379c <HAL_RCC_ClockConfig+0x1c8>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	4a52      	ldr	r2, [pc, #328]	; (800379c <HAL_RCC_ClockConfig+0x1c8>)
 8003652:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003656:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003658:	4b50      	ldr	r3, [pc, #320]	; (800379c <HAL_RCC_ClockConfig+0x1c8>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	494d      	ldr	r1, [pc, #308]	; (800379c <HAL_RCC_ClockConfig+0x1c8>)
 8003666:	4313      	orrs	r3, r2
 8003668:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d040      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d107      	bne.n	800368e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367e:	4b47      	ldr	r3, [pc, #284]	; (800379c <HAL_RCC_ClockConfig+0x1c8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d115      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e07f      	b.n	800378e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d107      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003696:	4b41      	ldr	r3, [pc, #260]	; (800379c <HAL_RCC_ClockConfig+0x1c8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d109      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e073      	b.n	800378e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a6:	4b3d      	ldr	r3, [pc, #244]	; (800379c <HAL_RCC_ClockConfig+0x1c8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e06b      	b.n	800378e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036b6:	4b39      	ldr	r3, [pc, #228]	; (800379c <HAL_RCC_ClockConfig+0x1c8>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f023 0203 	bic.w	r2, r3, #3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	4936      	ldr	r1, [pc, #216]	; (800379c <HAL_RCC_ClockConfig+0x1c8>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c8:	f7fe fdc6 	bl	8002258 <HAL_GetTick>
 80036cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ce:	e00a      	b.n	80036e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d0:	f7fe fdc2 	bl	8002258 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	f241 3288 	movw	r2, #5000	; 0x1388
 80036de:	4293      	cmp	r3, r2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e053      	b.n	800378e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e6:	4b2d      	ldr	r3, [pc, #180]	; (800379c <HAL_RCC_ClockConfig+0x1c8>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 020c 	and.w	r2, r3, #12
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d1eb      	bne.n	80036d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036f8:	4b27      	ldr	r3, [pc, #156]	; (8003798 <HAL_RCC_ClockConfig+0x1c4>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 030f 	and.w	r3, r3, #15
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d210      	bcs.n	8003728 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003706:	4b24      	ldr	r3, [pc, #144]	; (8003798 <HAL_RCC_ClockConfig+0x1c4>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f023 020f 	bic.w	r2, r3, #15
 800370e:	4922      	ldr	r1, [pc, #136]	; (8003798 <HAL_RCC_ClockConfig+0x1c4>)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	4313      	orrs	r3, r2
 8003714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003716:	4b20      	ldr	r3, [pc, #128]	; (8003798 <HAL_RCC_ClockConfig+0x1c4>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d001      	beq.n	8003728 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e032      	b.n	800378e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003734:	4b19      	ldr	r3, [pc, #100]	; (800379c <HAL_RCC_ClockConfig+0x1c8>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	4916      	ldr	r1, [pc, #88]	; (800379c <HAL_RCC_ClockConfig+0x1c8>)
 8003742:	4313      	orrs	r3, r2
 8003744:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d009      	beq.n	8003766 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003752:	4b12      	ldr	r3, [pc, #72]	; (800379c <HAL_RCC_ClockConfig+0x1c8>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	490e      	ldr	r1, [pc, #56]	; (800379c <HAL_RCC_ClockConfig+0x1c8>)
 8003762:	4313      	orrs	r3, r2
 8003764:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003766:	f000 f821 	bl	80037ac <HAL_RCC_GetSysClockFreq>
 800376a:	4602      	mov	r2, r0
 800376c:	4b0b      	ldr	r3, [pc, #44]	; (800379c <HAL_RCC_ClockConfig+0x1c8>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	091b      	lsrs	r3, r3, #4
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	490a      	ldr	r1, [pc, #40]	; (80037a0 <HAL_RCC_ClockConfig+0x1cc>)
 8003778:	5ccb      	ldrb	r3, [r1, r3]
 800377a:	fa22 f303 	lsr.w	r3, r2, r3
 800377e:	4a09      	ldr	r2, [pc, #36]	; (80037a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003782:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <HAL_RCC_ClockConfig+0x1d4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f7fe fd22 	bl	80021d0 <HAL_InitTick>

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40023c00 	.word	0x40023c00
 800379c:	40023800 	.word	0x40023800
 80037a0:	08006fc4 	.word	0x08006fc4
 80037a4:	20000000 	.word	0x20000000
 80037a8:	20000004 	.word	0x20000004

080037ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037ac:	b5b0      	push	{r4, r5, r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80037b2:	2100      	movs	r1, #0
 80037b4:	6079      	str	r1, [r7, #4]
 80037b6:	2100      	movs	r1, #0
 80037b8:	60f9      	str	r1, [r7, #12]
 80037ba:	2100      	movs	r1, #0
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80037be:	2100      	movs	r1, #0
 80037c0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037c2:	4952      	ldr	r1, [pc, #328]	; (800390c <HAL_RCC_GetSysClockFreq+0x160>)
 80037c4:	6889      	ldr	r1, [r1, #8]
 80037c6:	f001 010c 	and.w	r1, r1, #12
 80037ca:	2908      	cmp	r1, #8
 80037cc:	d00d      	beq.n	80037ea <HAL_RCC_GetSysClockFreq+0x3e>
 80037ce:	2908      	cmp	r1, #8
 80037d0:	f200 8094 	bhi.w	80038fc <HAL_RCC_GetSysClockFreq+0x150>
 80037d4:	2900      	cmp	r1, #0
 80037d6:	d002      	beq.n	80037de <HAL_RCC_GetSysClockFreq+0x32>
 80037d8:	2904      	cmp	r1, #4
 80037da:	d003      	beq.n	80037e4 <HAL_RCC_GetSysClockFreq+0x38>
 80037dc:	e08e      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037de:	4b4c      	ldr	r3, [pc, #304]	; (8003910 <HAL_RCC_GetSysClockFreq+0x164>)
 80037e0:	60bb      	str	r3, [r7, #8]
      break;
 80037e2:	e08e      	b.n	8003902 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037e4:	4b4b      	ldr	r3, [pc, #300]	; (8003914 <HAL_RCC_GetSysClockFreq+0x168>)
 80037e6:	60bb      	str	r3, [r7, #8]
      break;
 80037e8:	e08b      	b.n	8003902 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037ea:	4948      	ldr	r1, [pc, #288]	; (800390c <HAL_RCC_GetSysClockFreq+0x160>)
 80037ec:	6849      	ldr	r1, [r1, #4]
 80037ee:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80037f2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037f4:	4945      	ldr	r1, [pc, #276]	; (800390c <HAL_RCC_GetSysClockFreq+0x160>)
 80037f6:	6849      	ldr	r1, [r1, #4]
 80037f8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80037fc:	2900      	cmp	r1, #0
 80037fe:	d024      	beq.n	800384a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003800:	4942      	ldr	r1, [pc, #264]	; (800390c <HAL_RCC_GetSysClockFreq+0x160>)
 8003802:	6849      	ldr	r1, [r1, #4]
 8003804:	0989      	lsrs	r1, r1, #6
 8003806:	4608      	mov	r0, r1
 8003808:	f04f 0100 	mov.w	r1, #0
 800380c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003810:	f04f 0500 	mov.w	r5, #0
 8003814:	ea00 0204 	and.w	r2, r0, r4
 8003818:	ea01 0305 	and.w	r3, r1, r5
 800381c:	493d      	ldr	r1, [pc, #244]	; (8003914 <HAL_RCC_GetSysClockFreq+0x168>)
 800381e:	fb01 f003 	mul.w	r0, r1, r3
 8003822:	2100      	movs	r1, #0
 8003824:	fb01 f102 	mul.w	r1, r1, r2
 8003828:	1844      	adds	r4, r0, r1
 800382a:	493a      	ldr	r1, [pc, #232]	; (8003914 <HAL_RCC_GetSysClockFreq+0x168>)
 800382c:	fba2 0101 	umull	r0, r1, r2, r1
 8003830:	1863      	adds	r3, r4, r1
 8003832:	4619      	mov	r1, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	461a      	mov	r2, r3
 8003838:	f04f 0300 	mov.w	r3, #0
 800383c:	f7fc fd04 	bl	8000248 <__aeabi_uldivmod>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	4613      	mov	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	e04a      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800384a:	4b30      	ldr	r3, [pc, #192]	; (800390c <HAL_RCC_GetSysClockFreq+0x160>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	099b      	lsrs	r3, r3, #6
 8003850:	461a      	mov	r2, r3
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	f240 10ff 	movw	r0, #511	; 0x1ff
 800385a:	f04f 0100 	mov.w	r1, #0
 800385e:	ea02 0400 	and.w	r4, r2, r0
 8003862:	ea03 0501 	and.w	r5, r3, r1
 8003866:	4620      	mov	r0, r4
 8003868:	4629      	mov	r1, r5
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	014b      	lsls	r3, r1, #5
 8003874:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003878:	0142      	lsls	r2, r0, #5
 800387a:	4610      	mov	r0, r2
 800387c:	4619      	mov	r1, r3
 800387e:	1b00      	subs	r0, r0, r4
 8003880:	eb61 0105 	sbc.w	r1, r1, r5
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	f04f 0300 	mov.w	r3, #0
 800388c:	018b      	lsls	r3, r1, #6
 800388e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003892:	0182      	lsls	r2, r0, #6
 8003894:	1a12      	subs	r2, r2, r0
 8003896:	eb63 0301 	sbc.w	r3, r3, r1
 800389a:	f04f 0000 	mov.w	r0, #0
 800389e:	f04f 0100 	mov.w	r1, #0
 80038a2:	00d9      	lsls	r1, r3, #3
 80038a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038a8:	00d0      	lsls	r0, r2, #3
 80038aa:	4602      	mov	r2, r0
 80038ac:	460b      	mov	r3, r1
 80038ae:	1912      	adds	r2, r2, r4
 80038b0:	eb45 0303 	adc.w	r3, r5, r3
 80038b4:	f04f 0000 	mov.w	r0, #0
 80038b8:	f04f 0100 	mov.w	r1, #0
 80038bc:	0299      	lsls	r1, r3, #10
 80038be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80038c2:	0290      	lsls	r0, r2, #10
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	4610      	mov	r0, r2
 80038ca:	4619      	mov	r1, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	461a      	mov	r2, r3
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	f7fc fcb8 	bl	8000248 <__aeabi_uldivmod>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	4613      	mov	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80038e0:	4b0a      	ldr	r3, [pc, #40]	; (800390c <HAL_RCC_GetSysClockFreq+0x160>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	0c1b      	lsrs	r3, r3, #16
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	3301      	adds	r3, #1
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f8:	60bb      	str	r3, [r7, #8]
      break;
 80038fa:	e002      	b.n	8003902 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038fc:	4b04      	ldr	r3, [pc, #16]	; (8003910 <HAL_RCC_GetSysClockFreq+0x164>)
 80038fe:	60bb      	str	r3, [r7, #8]
      break;
 8003900:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003902:	68bb      	ldr	r3, [r7, #8]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bdb0      	pop	{r4, r5, r7, pc}
 800390c:	40023800 	.word	0x40023800
 8003910:	00f42400 	.word	0x00f42400
 8003914:	017d7840 	.word	0x017d7840

08003918 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800391c:	4b03      	ldr	r3, [pc, #12]	; (800392c <HAL_RCC_GetHCLKFreq+0x14>)
 800391e:	681b      	ldr	r3, [r3, #0]
}
 8003920:	4618      	mov	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	20000000 	.word	0x20000000

08003930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003934:	f7ff fff0 	bl	8003918 <HAL_RCC_GetHCLKFreq>
 8003938:	4602      	mov	r2, r0
 800393a:	4b05      	ldr	r3, [pc, #20]	; (8003950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	0a9b      	lsrs	r3, r3, #10
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	4903      	ldr	r1, [pc, #12]	; (8003954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003946:	5ccb      	ldrb	r3, [r1, r3]
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800394c:	4618      	mov	r0, r3
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40023800 	.word	0x40023800
 8003954:	08006fd4 	.word	0x08006fd4

08003958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800395c:	f7ff ffdc 	bl	8003918 <HAL_RCC_GetHCLKFreq>
 8003960:	4602      	mov	r2, r0
 8003962:	4b05      	ldr	r3, [pc, #20]	; (8003978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	0b5b      	lsrs	r3, r3, #13
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	4903      	ldr	r1, [pc, #12]	; (800397c <HAL_RCC_GetPCLK2Freq+0x24>)
 800396e:	5ccb      	ldrb	r3, [r1, r3]
 8003970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003974:	4618      	mov	r0, r3
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40023800 	.word	0x40023800
 800397c:	08006fd4 	.word	0x08006fd4

08003980 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800398c:	2300      	movs	r3, #0
 800398e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003994:	2300      	movs	r3, #0
 8003996:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003998:	2300      	movs	r3, #0
 800399a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d012      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039a8:	4b69      	ldr	r3, [pc, #420]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	4a68      	ldr	r2, [pc, #416]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80039b2:	6093      	str	r3, [r2, #8]
 80039b4:	4b66      	ldr	r3, [pc, #408]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039bc:	4964      	ldr	r1, [pc, #400]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80039ca:	2301      	movs	r3, #1
 80039cc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d017      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039da:	4b5d      	ldr	r3, [pc, #372]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e8:	4959      	ldr	r1, [pc, #356]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039f8:	d101      	bne.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80039fa:	2301      	movs	r3, #1
 80039fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a06:	2301      	movs	r3, #1
 8003a08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d017      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a16:	4b4e      	ldr	r3, [pc, #312]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	494a      	ldr	r1, [pc, #296]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a34:	d101      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003a36:	2301      	movs	r3, #1
 8003a38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003a42:	2301      	movs	r3, #1
 8003a44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003a52:	2301      	movs	r3, #1
 8003a54:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 808b 	beq.w	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a64:	4b3a      	ldr	r3, [pc, #232]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	4a39      	ldr	r2, [pc, #228]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8003a70:	4b37      	ldr	r3, [pc, #220]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a78:	60bb      	str	r3, [r7, #8]
 8003a7a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a7c:	4b35      	ldr	r3, [pc, #212]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a34      	ldr	r2, [pc, #208]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a88:	f7fe fbe6 	bl	8002258 <HAL_GetTick>
 8003a8c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a90:	f7fe fbe2 	bl	8002258 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b64      	cmp	r3, #100	; 0x64
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e38f      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003aa2:	4b2c      	ldr	r3, [pc, #176]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0f0      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003aae:	4b28      	ldr	r3, [pc, #160]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ab6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d035      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d02e      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003acc:	4b20      	ldr	r3, [pc, #128]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ad6:	4b1e      	ldr	r3, [pc, #120]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ada:	4a1d      	ldr	r2, [pc, #116]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ae2:	4b1b      	ldr	r3, [pc, #108]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae6:	4a1a      	ldr	r2, [pc, #104]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003aee:	4a18      	ldr	r2, [pc, #96]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003af4:	4b16      	ldr	r3, [pc, #88]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d114      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b00:	f7fe fbaa 	bl	8002258 <HAL_GetTick>
 8003b04:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b06:	e00a      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b08:	f7fe fba6 	bl	8002258 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e351      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b1e:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0ee      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b36:	d111      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003b38:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b44:	4b04      	ldr	r3, [pc, #16]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b46:	400b      	ands	r3, r1
 8003b48:	4901      	ldr	r1, [pc, #4]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	608b      	str	r3, [r1, #8]
 8003b4e:	e00b      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003b50:	40023800 	.word	0x40023800
 8003b54:	40007000 	.word	0x40007000
 8003b58:	0ffffcff 	.word	0x0ffffcff
 8003b5c:	4bb3      	ldr	r3, [pc, #716]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	4ab2      	ldr	r2, [pc, #712]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b62:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003b66:	6093      	str	r3, [r2, #8]
 8003b68:	4bb0      	ldr	r3, [pc, #704]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b74:	49ad      	ldr	r1, [pc, #692]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0310 	and.w	r3, r3, #16
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d010      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b86:	4ba9      	ldr	r3, [pc, #676]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b8c:	4aa7      	ldr	r2, [pc, #668]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003b96:	4ba5      	ldr	r3, [pc, #660]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b98:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba0:	49a2      	ldr	r1, [pc, #648]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00a      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bb4:	4b9d      	ldr	r3, [pc, #628]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bc2:	499a      	ldr	r1, [pc, #616]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bd6:	4b95      	ldr	r3, [pc, #596]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003be4:	4991      	ldr	r1, [pc, #580]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00a      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bf8:	4b8c      	ldr	r3, [pc, #560]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c06:	4989      	ldr	r1, [pc, #548]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c1a:	4b84      	ldr	r3, [pc, #528]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c28:	4980      	ldr	r1, [pc, #512]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00a      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c3c:	4b7b      	ldr	r3, [pc, #492]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c42:	f023 0203 	bic.w	r2, r3, #3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4a:	4978      	ldr	r1, [pc, #480]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c5e:	4b73      	ldr	r3, [pc, #460]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c64:	f023 020c 	bic.w	r2, r3, #12
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c6c:	496f      	ldr	r1, [pc, #444]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c80:	4b6a      	ldr	r3, [pc, #424]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c86:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8e:	4967      	ldr	r1, [pc, #412]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ca2:	4b62      	ldr	r3, [pc, #392]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb0:	495e      	ldr	r1, [pc, #376]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cc4:	4b59      	ldr	r3, [pc, #356]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd2:	4956      	ldr	r1, [pc, #344]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003ce6:	4b51      	ldr	r3, [pc, #324]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf4:	494d      	ldr	r1, [pc, #308]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d08:	4b48      	ldr	r3, [pc, #288]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d16:	4945      	ldr	r1, [pc, #276]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003d2a:	4b40      	ldr	r3, [pc, #256]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d38:	493c      	ldr	r1, [pc, #240]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00a      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d4c:	4b37      	ldr	r3, [pc, #220]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d52:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d5a:	4934      	ldr	r1, [pc, #208]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d011      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d6e:	4b2f      	ldr	r3, [pc, #188]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d74:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d7c:	492b      	ldr	r1, [pc, #172]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d8c:	d101      	bne.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dae:	4b1f      	ldr	r3, [pc, #124]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dbc:	491b      	ldr	r1, [pc, #108]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00b      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dd0:	4b16      	ldr	r3, [pc, #88]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003de0:	4912      	ldr	r1, [pc, #72]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00b      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003df4:	4b0d      	ldr	r3, [pc, #52]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e04:	4909      	ldr	r1, [pc, #36]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00f      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e18:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e1e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e28:	e002      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003e2a:	bf00      	nop
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	4986      	ldr	r1, [pc, #536]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00b      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003e44:	4b81      	ldr	r3, [pc, #516]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e4a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e54:	497d      	ldr	r1, [pc, #500]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d006      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 80d6 	beq.w	800401c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e70:	4b76      	ldr	r3, [pc, #472]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a75      	ldr	r2, [pc, #468]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e7c:	f7fe f9ec 	bl	8002258 <HAL_GetTick>
 8003e80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e84:	f7fe f9e8 	bl	8002258 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	; 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e195      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e96:	4b6d      	ldr	r3, [pc, #436]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d021      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d11d      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003eb6:	4b65      	ldr	r3, [pc, #404]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ebc:	0c1b      	lsrs	r3, r3, #16
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ec4:	4b61      	ldr	r3, [pc, #388]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eca:	0e1b      	lsrs	r3, r3, #24
 8003ecc:	f003 030f 	and.w	r3, r3, #15
 8003ed0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	019a      	lsls	r2, r3, #6
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	041b      	lsls	r3, r3, #16
 8003edc:	431a      	orrs	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	061b      	lsls	r3, r3, #24
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	071b      	lsls	r3, r3, #28
 8003eea:	4958      	ldr	r1, [pc, #352]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d004      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f06:	d00a      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d02e      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f1c:	d129      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f1e:	4b4b      	ldr	r3, [pc, #300]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f24:	0c1b      	lsrs	r3, r3, #16
 8003f26:	f003 0303 	and.w	r3, r3, #3
 8003f2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f2c:	4b47      	ldr	r3, [pc, #284]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f32:	0f1b      	lsrs	r3, r3, #28
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	019a      	lsls	r2, r3, #6
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	041b      	lsls	r3, r3, #16
 8003f44:	431a      	orrs	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	061b      	lsls	r3, r3, #24
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	071b      	lsls	r3, r3, #28
 8003f52:	493e      	ldr	r1, [pc, #248]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f5a:	4b3c      	ldr	r3, [pc, #240]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f60:	f023 021f 	bic.w	r2, r3, #31
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	4938      	ldr	r1, [pc, #224]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d01d      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f7e:	4b33      	ldr	r3, [pc, #204]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f84:	0e1b      	lsrs	r3, r3, #24
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f8c:	4b2f      	ldr	r3, [pc, #188]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f92:	0f1b      	lsrs	r3, r3, #28
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	019a      	lsls	r2, r3, #6
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	041b      	lsls	r3, r3, #16
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	061b      	lsls	r3, r3, #24
 8003fac:	431a      	orrs	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	071b      	lsls	r3, r3, #28
 8003fb2:	4926      	ldr	r1, [pc, #152]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d011      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	019a      	lsls	r2, r3, #6
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	041b      	lsls	r3, r3, #16
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	061b      	lsls	r3, r3, #24
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	071b      	lsls	r3, r3, #28
 8003fe2:	491a      	ldr	r1, [pc, #104]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003fea:	4b18      	ldr	r3, [pc, #96]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a17      	ldr	r2, [pc, #92]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ff0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ff4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ff6:	f7fe f92f 	bl	8002258 <HAL_GetTick>
 8003ffa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ffc:	e008      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ffe:	f7fe f92b 	bl	8002258 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b64      	cmp	r3, #100	; 0x64
 800400a:	d901      	bls.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e0d8      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004010:	4b0e      	ldr	r3, [pc, #56]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0f0      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	2b01      	cmp	r3, #1
 8004020:	f040 80ce 	bne.w	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004024:	4b09      	ldr	r3, [pc, #36]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a08      	ldr	r2, [pc, #32]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800402a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800402e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004030:	f7fe f912 	bl	8002258 <HAL_GetTick>
 8004034:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004036:	e00b      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004038:	f7fe f90e 	bl	8002258 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b64      	cmp	r3, #100	; 0x64
 8004044:	d904      	bls.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e0bb      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800404a:	bf00      	nop
 800404c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004050:	4b5e      	ldr	r3, [pc, #376]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800405c:	d0ec      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406e:	2b00      	cmp	r3, #0
 8004070:	d009      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800407a:	2b00      	cmp	r3, #0
 800407c:	d02e      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	2b00      	cmp	r3, #0
 8004084:	d12a      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004086:	4b51      	ldr	r3, [pc, #324]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408c:	0c1b      	lsrs	r3, r3, #16
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004094:	4b4d      	ldr	r3, [pc, #308]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409a:	0f1b      	lsrs	r3, r3, #28
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	019a      	lsls	r2, r3, #6
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	041b      	lsls	r3, r3, #16
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	061b      	lsls	r3, r3, #24
 80040b4:	431a      	orrs	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	071b      	lsls	r3, r3, #28
 80040ba:	4944      	ldr	r1, [pc, #272]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80040c2:	4b42      	ldr	r3, [pc, #264]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d0:	3b01      	subs	r3, #1
 80040d2:	021b      	lsls	r3, r3, #8
 80040d4:	493d      	ldr	r1, [pc, #244]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d022      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040f0:	d11d      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040f2:	4b36      	ldr	r3, [pc, #216]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f8:	0e1b      	lsrs	r3, r3, #24
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004100:	4b32      	ldr	r3, [pc, #200]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004106:	0f1b      	lsrs	r3, r3, #28
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	019a      	lsls	r2, r3, #6
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	041b      	lsls	r3, r3, #16
 800411a:	431a      	orrs	r2, r3
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	061b      	lsls	r3, r3, #24
 8004120:	431a      	orrs	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	071b      	lsls	r3, r3, #28
 8004126:	4929      	ldr	r1, [pc, #164]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b00      	cmp	r3, #0
 8004138:	d028      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800413a:	4b24      	ldr	r3, [pc, #144]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800413c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004140:	0e1b      	lsrs	r3, r3, #24
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004148:	4b20      	ldr	r3, [pc, #128]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800414a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414e:	0c1b      	lsrs	r3, r3, #16
 8004150:	f003 0303 	and.w	r3, r3, #3
 8004154:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	019a      	lsls	r2, r3, #6
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	041b      	lsls	r3, r3, #16
 8004160:	431a      	orrs	r2, r3
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	061b      	lsls	r3, r3, #24
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	071b      	lsls	r3, r3, #28
 800416e:	4917      	ldr	r1, [pc, #92]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004170:	4313      	orrs	r3, r2
 8004172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004176:	4b15      	ldr	r3, [pc, #84]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800417c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	4911      	ldr	r1, [pc, #68]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800418c:	4b0f      	ldr	r3, [pc, #60]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a0e      	ldr	r2, [pc, #56]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004196:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004198:	f7fe f85e 	bl	8002258 <HAL_GetTick>
 800419c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800419e:	e008      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041a0:	f7fe f85a 	bl	8002258 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b64      	cmp	r3, #100	; 0x64
 80041ac:	d901      	bls.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e007      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041b2:	4b06      	ldr	r3, [pc, #24]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041be:	d1ef      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3720      	adds	r7, #32
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	40023800 	.word	0x40023800

080041d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e09d      	b.n	800431e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d108      	bne.n	80041fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041f2:	d009      	beq.n	8004208 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	61da      	str	r2, [r3, #28]
 80041fa:	e005      	b.n	8004208 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d106      	bne.n	8004228 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7fd fc8e 	bl	8001b44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800423e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004248:	d902      	bls.n	8004250 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	e002      	b.n	8004256 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004254:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800425e:	d007      	beq.n	8004270 <HAL_SPI_Init+0xa0>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004268:	d002      	beq.n	8004270 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004280:	431a      	orrs	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	431a      	orrs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	431a      	orrs	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042a8:	431a      	orrs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b2:	ea42 0103 	orr.w	r1, r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	0c1b      	lsrs	r3, r3, #16
 80042cc:	f003 0204 	and.w	r2, r3, #4
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	f003 0310 	and.w	r3, r3, #16
 80042d8:	431a      	orrs	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80042ec:	ea42 0103 	orr.w	r1, r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	69da      	ldr	r2, [r3, #28]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800430c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b088      	sub	sp, #32
 800432a:	af00      	add	r7, sp, #0
 800432c:	60f8      	str	r0, [r7, #12]
 800432e:	60b9      	str	r1, [r7, #8]
 8004330:	603b      	str	r3, [r7, #0]
 8004332:	4613      	mov	r3, r2
 8004334:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_SPI_Transmit+0x22>
 8004344:	2302      	movs	r3, #2
 8004346:	e158      	b.n	80045fa <HAL_SPI_Transmit+0x2d4>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004350:	f7fd ff82 	bl	8002258 <HAL_GetTick>
 8004354:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004356:	88fb      	ldrh	r3, [r7, #6]
 8004358:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b01      	cmp	r3, #1
 8004364:	d002      	beq.n	800436c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004366:	2302      	movs	r3, #2
 8004368:	77fb      	strb	r3, [r7, #31]
    goto error;
 800436a:	e13d      	b.n	80045e8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <HAL_SPI_Transmit+0x52>
 8004372:	88fb      	ldrh	r3, [r7, #6]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d102      	bne.n	800437e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800437c:	e134      	b.n	80045e8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2203      	movs	r2, #3
 8004382:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	88fa      	ldrh	r2, [r7, #6]
 8004396:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	88fa      	ldrh	r2, [r7, #6]
 800439c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043c8:	d10f      	bne.n	80043ea <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f4:	2b40      	cmp	r3, #64	; 0x40
 80043f6:	d007      	beq.n	8004408 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004406:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004410:	d94b      	bls.n	80044aa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d002      	beq.n	8004420 <HAL_SPI_Transmit+0xfa>
 800441a:	8afb      	ldrh	r3, [r7, #22]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d13e      	bne.n	800449e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004424:	881a      	ldrh	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004430:	1c9a      	adds	r2, r3, #2
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800443a:	b29b      	uxth	r3, r3
 800443c:	3b01      	subs	r3, #1
 800443e:	b29a      	uxth	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004444:	e02b      	b.n	800449e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b02      	cmp	r3, #2
 8004452:	d112      	bne.n	800447a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004458:	881a      	ldrh	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004464:	1c9a      	adds	r2, r3, #2
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800446e:	b29b      	uxth	r3, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004478:	e011      	b.n	800449e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800447a:	f7fd feed 	bl	8002258 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d803      	bhi.n	8004492 <HAL_SPI_Transmit+0x16c>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004490:	d102      	bne.n	8004498 <HAL_SPI_Transmit+0x172>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d102      	bne.n	800449e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800449c:	e0a4      	b.n	80045e8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1ce      	bne.n	8004446 <HAL_SPI_Transmit+0x120>
 80044a8:	e07c      	b.n	80045a4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_SPI_Transmit+0x192>
 80044b2:	8afb      	ldrh	r3, [r7, #22]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d170      	bne.n	800459a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044bc:	b29b      	uxth	r3, r3
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d912      	bls.n	80044e8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c6:	881a      	ldrh	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d2:	1c9a      	adds	r2, r3, #2
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044dc:	b29b      	uxth	r3, r3
 80044de:	3b02      	subs	r3, #2
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044e6:	e058      	b.n	800459a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	330c      	adds	r3, #12
 80044f2:	7812      	ldrb	r2, [r2, #0]
 80044f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004504:	b29b      	uxth	r3, r3
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800450e:	e044      	b.n	800459a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b02      	cmp	r3, #2
 800451c:	d12b      	bne.n	8004576 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004522:	b29b      	uxth	r3, r3
 8004524:	2b01      	cmp	r3, #1
 8004526:	d912      	bls.n	800454e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452c:	881a      	ldrh	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004538:	1c9a      	adds	r2, r3, #2
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004542:	b29b      	uxth	r3, r3
 8004544:	3b02      	subs	r3, #2
 8004546:	b29a      	uxth	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800454c:	e025      	b.n	800459a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	330c      	adds	r3, #12
 8004558:	7812      	ldrb	r2, [r2, #0]
 800455a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004574:	e011      	b.n	800459a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004576:	f7fd fe6f 	bl	8002258 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	429a      	cmp	r2, r3
 8004584:	d803      	bhi.n	800458e <HAL_SPI_Transmit+0x268>
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458c:	d102      	bne.n	8004594 <HAL_SPI_Transmit+0x26e>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d102      	bne.n	800459a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004598:	e026      	b.n	80045e8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800459e:	b29b      	uxth	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1b5      	bne.n	8004510 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	6839      	ldr	r1, [r7, #0]
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 fcdf 	bl	8004f6c <SPI_EndRxTxTransaction>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d002      	beq.n	80045ba <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2220      	movs	r2, #32
 80045b8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10a      	bne.n	80045d8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045c2:	2300      	movs	r3, #0
 80045c4:	613b      	str	r3, [r7, #16]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	613b      	str	r3, [r7, #16]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	613b      	str	r3, [r7, #16]
 80045d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d002      	beq.n	80045e6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	77fb      	strb	r3, [r7, #31]
 80045e4:	e000      	b.n	80045e8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80045e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80045f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3720      	adds	r7, #32
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b088      	sub	sp, #32
 8004606:	af02      	add	r7, sp, #8
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	603b      	str	r3, [r7, #0]
 800460e:	4613      	mov	r3, r2
 8004610:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800461e:	d112      	bne.n	8004646 <HAL_SPI_Receive+0x44>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10e      	bne.n	8004646 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2204      	movs	r2, #4
 800462c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004630:	88fa      	ldrh	r2, [r7, #6]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	4613      	mov	r3, r2
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	68b9      	ldr	r1, [r7, #8]
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 f910 	bl	8004862 <HAL_SPI_TransmitReceive>
 8004642:	4603      	mov	r3, r0
 8004644:	e109      	b.n	800485a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_SPI_Receive+0x52>
 8004650:	2302      	movs	r3, #2
 8004652:	e102      	b.n	800485a <HAL_SPI_Receive+0x258>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800465c:	f7fd fdfc 	bl	8002258 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b01      	cmp	r3, #1
 800466c:	d002      	beq.n	8004674 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800466e:	2302      	movs	r3, #2
 8004670:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004672:	e0e9      	b.n	8004848 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <HAL_SPI_Receive+0x7e>
 800467a:	88fb      	ldrh	r3, [r7, #6]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d102      	bne.n	8004686 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004684:	e0e0      	b.n	8004848 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2204      	movs	r2, #4
 800468a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	88fa      	ldrh	r2, [r7, #6]
 800469e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	88fa      	ldrh	r2, [r7, #6]
 80046a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046d0:	d908      	bls.n	80046e4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046e0:	605a      	str	r2, [r3, #4]
 80046e2:	e007      	b.n	80046f4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046f2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046fc:	d10f      	bne.n	800471e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800470c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800471c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004728:	2b40      	cmp	r3, #64	; 0x40
 800472a:	d007      	beq.n	800473c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800473a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004744:	d867      	bhi.n	8004816 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004746:	e030      	b.n	80047aa <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b01      	cmp	r3, #1
 8004754:	d117      	bne.n	8004786 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f103 020c 	add.w	r2, r3, #12
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	7812      	ldrb	r2, [r2, #0]
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476c:	1c5a      	adds	r2, r3, #1
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004778:	b29b      	uxth	r3, r3
 800477a:	3b01      	subs	r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004784:	e011      	b.n	80047aa <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004786:	f7fd fd67 	bl	8002258 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d803      	bhi.n	800479e <HAL_SPI_Receive+0x19c>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479c:	d102      	bne.n	80047a4 <HAL_SPI_Receive+0x1a2>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d102      	bne.n	80047aa <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80047a8:	e04e      	b.n	8004848 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1c8      	bne.n	8004748 <HAL_SPI_Receive+0x146>
 80047b6:	e034      	b.n	8004822 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d115      	bne.n	80047f2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68da      	ldr	r2, [r3, #12]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	b292      	uxth	r2, r2
 80047d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	1c9a      	adds	r2, r3, #2
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	3b01      	subs	r3, #1
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80047f0:	e011      	b.n	8004816 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047f2:	f7fd fd31 	bl	8002258 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d803      	bhi.n	800480a <HAL_SPI_Receive+0x208>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004808:	d102      	bne.n	8004810 <HAL_SPI_Receive+0x20e>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d102      	bne.n	8004816 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004814:	e018      	b.n	8004848 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800481c:	b29b      	uxth	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1ca      	bne.n	80047b8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	6839      	ldr	r1, [r7, #0]
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 fb48 	bl	8004ebc <SPI_EndRxTransaction>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2220      	movs	r2, #32
 8004836:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800483c:	2b00      	cmp	r3, #0
 800483e:	d002      	beq.n	8004846 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	75fb      	strb	r3, [r7, #23]
 8004844:	e000      	b.n	8004848 <HAL_SPI_Receive+0x246>
  }

error :
 8004846:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004858:	7dfb      	ldrb	r3, [r7, #23]
}
 800485a:	4618      	mov	r0, r3
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b08a      	sub	sp, #40	; 0x28
 8004866:	af00      	add	r7, sp, #0
 8004868:	60f8      	str	r0, [r7, #12]
 800486a:	60b9      	str	r1, [r7, #8]
 800486c:	607a      	str	r2, [r7, #4]
 800486e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004870:	2301      	movs	r3, #1
 8004872:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004874:	2300      	movs	r3, #0
 8004876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004880:	2b01      	cmp	r3, #1
 8004882:	d101      	bne.n	8004888 <HAL_SPI_TransmitReceive+0x26>
 8004884:	2302      	movs	r3, #2
 8004886:	e1fb      	b.n	8004c80 <HAL_SPI_TransmitReceive+0x41e>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004890:	f7fd fce2 	bl	8002258 <HAL_GetTick>
 8004894:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800489c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80048a4:	887b      	ldrh	r3, [r7, #2]
 80048a6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80048a8:	887b      	ldrh	r3, [r7, #2]
 80048aa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80048ac:	7efb      	ldrb	r3, [r7, #27]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d00e      	beq.n	80048d0 <HAL_SPI_TransmitReceive+0x6e>
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048b8:	d106      	bne.n	80048c8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d102      	bne.n	80048c8 <HAL_SPI_TransmitReceive+0x66>
 80048c2:	7efb      	ldrb	r3, [r7, #27]
 80048c4:	2b04      	cmp	r3, #4
 80048c6:	d003      	beq.n	80048d0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80048c8:	2302      	movs	r3, #2
 80048ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80048ce:	e1cd      	b.n	8004c6c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d005      	beq.n	80048e2 <HAL_SPI_TransmitReceive+0x80>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <HAL_SPI_TransmitReceive+0x80>
 80048dc:	887b      	ldrh	r3, [r7, #2]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d103      	bne.n	80048ea <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80048e8:	e1c0      	b.n	8004c6c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d003      	beq.n	80048fe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2205      	movs	r2, #5
 80048fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	887a      	ldrh	r2, [r7, #2]
 800490e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	887a      	ldrh	r2, [r7, #2]
 8004916:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	887a      	ldrh	r2, [r7, #2]
 8004924:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	887a      	ldrh	r2, [r7, #2]
 800492a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004940:	d802      	bhi.n	8004948 <HAL_SPI_TransmitReceive+0xe6>
 8004942:	8a3b      	ldrh	r3, [r7, #16]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d908      	bls.n	800495a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004956:	605a      	str	r2, [r3, #4]
 8004958:	e007      	b.n	800496a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004968:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004974:	2b40      	cmp	r3, #64	; 0x40
 8004976:	d007      	beq.n	8004988 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004986:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004990:	d97c      	bls.n	8004a8c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <HAL_SPI_TransmitReceive+0x13e>
 800499a:	8a7b      	ldrh	r3, [r7, #18]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d169      	bne.n	8004a74 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	881a      	ldrh	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	1c9a      	adds	r2, r3, #2
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049c4:	e056      	b.n	8004a74 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d11b      	bne.n	8004a0c <HAL_SPI_TransmitReceive+0x1aa>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049d8:	b29b      	uxth	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d016      	beq.n	8004a0c <HAL_SPI_TransmitReceive+0x1aa>
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d113      	bne.n	8004a0c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e8:	881a      	ldrh	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f4:	1c9a      	adds	r2, r3, #2
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d11c      	bne.n	8004a54 <HAL_SPI_TransmitReceive+0x1f2>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d016      	beq.n	8004a54 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68da      	ldr	r2, [r3, #12]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	b292      	uxth	r2, r2
 8004a32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a38:	1c9a      	adds	r2, r3, #2
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	3b01      	subs	r3, #1
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a50:	2301      	movs	r3, #1
 8004a52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a54:	f7fd fc00 	bl	8002258 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d807      	bhi.n	8004a74 <HAL_SPI_TransmitReceive+0x212>
 8004a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6a:	d003      	beq.n	8004a74 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004a72:	e0fb      	b.n	8004c6c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1a3      	bne.n	80049c6 <HAL_SPI_TransmitReceive+0x164>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d19d      	bne.n	80049c6 <HAL_SPI_TransmitReceive+0x164>
 8004a8a:	e0df      	b.n	8004c4c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <HAL_SPI_TransmitReceive+0x23a>
 8004a94:	8a7b      	ldrh	r3, [r7, #18]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	f040 80cb 	bne.w	8004c32 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d912      	bls.n	8004acc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	881a      	ldrh	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab6:	1c9a      	adds	r2, r3, #2
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	3b02      	subs	r3, #2
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004aca:	e0b2      	b.n	8004c32 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	330c      	adds	r3, #12
 8004ad6:	7812      	ldrb	r2, [r2, #0]
 8004ad8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	3b01      	subs	r3, #1
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004af2:	e09e      	b.n	8004c32 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d134      	bne.n	8004b6c <HAL_SPI_TransmitReceive+0x30a>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d02f      	beq.n	8004b6c <HAL_SPI_TransmitReceive+0x30a>
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d12c      	bne.n	8004b6c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d912      	bls.n	8004b42 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b20:	881a      	ldrh	r2, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	1c9a      	adds	r2, r3, #2
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b02      	subs	r3, #2
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b40:	e012      	b.n	8004b68 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	330c      	adds	r3, #12
 8004b4c:	7812      	ldrb	r2, [r2, #0]
 8004b4e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d148      	bne.n	8004c0c <HAL_SPI_TransmitReceive+0x3aa>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d042      	beq.n	8004c0c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d923      	bls.n	8004bda <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	b292      	uxth	r2, r2
 8004b9e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	1c9a      	adds	r2, r3, #2
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	3b02      	subs	r3, #2
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d81f      	bhi.n	8004c08 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004bd6:	605a      	str	r2, [r3, #4]
 8004bd8:	e016      	b.n	8004c08 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f103 020c 	add.w	r2, r3, #12
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	7812      	ldrb	r2, [r2, #0]
 8004be8:	b2d2      	uxtb	r2, r2
 8004bea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c0c:	f7fd fb24 	bl	8002258 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d803      	bhi.n	8004c24 <HAL_SPI_TransmitReceive+0x3c2>
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c22:	d102      	bne.n	8004c2a <HAL_SPI_TransmitReceive+0x3c8>
 8004c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d103      	bne.n	8004c32 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004c30:	e01c      	b.n	8004c6c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f47f af5b 	bne.w	8004af4 <HAL_SPI_TransmitReceive+0x292>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f47f af54 	bne.w	8004af4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c4c:	69fa      	ldr	r2, [r7, #28]
 8004c4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 f98b 	bl	8004f6c <SPI_EndRxTxTransaction>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d006      	beq.n	8004c6a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2220      	movs	r2, #32
 8004c66:	661a      	str	r2, [r3, #96]	; 0x60
 8004c68:	e000      	b.n	8004c6c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004c6a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004c7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3728      	adds	r7, #40	; 0x28
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	4613      	mov	r3, r2
 8004c96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c98:	f7fd fade 	bl	8002258 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca0:	1a9b      	subs	r3, r3, r2
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ca8:	f7fd fad6 	bl	8002258 <HAL_GetTick>
 8004cac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cae:	4b39      	ldr	r3, [pc, #228]	; (8004d94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	015b      	lsls	r3, r3, #5
 8004cb4:	0d1b      	lsrs	r3, r3, #20
 8004cb6:	69fa      	ldr	r2, [r7, #28]
 8004cb8:	fb02 f303 	mul.w	r3, r2, r3
 8004cbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cbe:	e054      	b.n	8004d6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc6:	d050      	beq.n	8004d6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cc8:	f7fd fac6 	bl	8002258 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	69fa      	ldr	r2, [r7, #28]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d902      	bls.n	8004cde <SPI_WaitFlagStateUntilTimeout+0x56>
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d13d      	bne.n	8004d5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cf6:	d111      	bne.n	8004d1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d00:	d004      	beq.n	8004d0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d0a:	d107      	bne.n	8004d1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d24:	d10f      	bne.n	8004d46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e017      	b.n	8004d8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	4013      	ands	r3, r2
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	bf0c      	ite	eq
 8004d7a:	2301      	moveq	r3, #1
 8004d7c:	2300      	movne	r3, #0
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	461a      	mov	r2, r3
 8004d82:	79fb      	ldrb	r3, [r7, #7]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d19b      	bne.n	8004cc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3720      	adds	r7, #32
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	20000000 	.word	0x20000000

08004d98 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b088      	sub	sp, #32
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
 8004da4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004da6:	f7fd fa57 	bl	8002258 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dae:	1a9b      	subs	r3, r3, r2
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	4413      	add	r3, r2
 8004db4:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004db6:	f7fd fa4f 	bl	8002258 <HAL_GetTick>
 8004dba:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004dbc:	4b3e      	ldr	r3, [pc, #248]	; (8004eb8 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	00da      	lsls	r2, r3, #3
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	0d1b      	lsrs	r3, r3, #20
 8004dcc:	69fa      	ldr	r2, [r7, #28]
 8004dce:	fb02 f303 	mul.w	r3, r2, r3
 8004dd2:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8004dd4:	e062      	b.n	8004e9c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ddc:	d109      	bne.n	8004df2 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d106      	bne.n	8004df2 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	330c      	adds	r3, #12
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8004df0:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df8:	d050      	beq.n	8004e9c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004dfa:	f7fd fa2d 	bl	8002258 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	69fa      	ldr	r2, [r7, #28]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d902      	bls.n	8004e10 <SPI_WaitFifoStateUntilTimeout+0x78>
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d13d      	bne.n	8004e8c <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e1e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e28:	d111      	bne.n	8004e4e <SPI_WaitFifoStateUntilTimeout+0xb6>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e32:	d004      	beq.n	8004e3e <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e3c:	d107      	bne.n	8004e4e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e4c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e56:	d10f      	bne.n	8004e78 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e76:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e010      	b.n	8004eae <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d194      	bne.n	8004dd6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3720      	adds	r7, #32
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20000000 	.word	0x20000000

08004ebc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af02      	add	r7, sp, #8
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ed0:	d111      	bne.n	8004ef6 <SPI_EndRxTransaction+0x3a>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eda:	d004      	beq.n	8004ee6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee4:	d107      	bne.n	8004ef6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ef4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2200      	movs	r2, #0
 8004efe:	2180      	movs	r1, #128	; 0x80
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f7ff fec1 	bl	8004c88 <SPI_WaitFlagStateUntilTimeout>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d007      	beq.n	8004f1c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f10:	f043 0220 	orr.w	r2, r3, #32
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e023      	b.n	8004f64 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f24:	d11d      	bne.n	8004f62 <SPI_EndRxTransaction+0xa6>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f2e:	d004      	beq.n	8004f3a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f38:	d113      	bne.n	8004f62 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f7ff ff26 	bl	8004d98 <SPI_WaitFifoStateUntilTimeout>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d007      	beq.n	8004f62 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f56:	f043 0220 	orr.w	r2, r3, #32
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e000      	b.n	8004f64 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f7ff ff07 	bl	8004d98 <SPI_WaitFifoStateUntilTimeout>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d007      	beq.n	8004fa0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f94:	f043 0220 	orr.w	r2, r3, #32
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e027      	b.n	8004ff0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	2180      	movs	r1, #128	; 0x80
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f7ff fe6c 	bl	8004c88 <SPI_WaitFlagStateUntilTimeout>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d007      	beq.n	8004fc6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fba:	f043 0220 	orr.w	r2, r3, #32
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e014      	b.n	8004ff0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f7ff fee0 	bl	8004d98 <SPI_WaitFifoStateUntilTimeout>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d007      	beq.n	8004fee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe2:	f043 0220 	orr.w	r2, r3, #32
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e000      	b.n	8004ff0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e049      	b.n	800509e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d106      	bne.n	8005024 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7fc ffd4 	bl	8001fcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3304      	adds	r3, #4
 8005034:	4619      	mov	r1, r3
 8005036:	4610      	mov	r0, r2
 8005038:	f000 fa72 	bl	8005520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e049      	b.n	800514c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d106      	bne.n	80050d2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7fc ff39 	bl	8001f44 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2202      	movs	r2, #2
 80050d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3304      	adds	r3, #4
 80050e2:	4619      	mov	r1, r3
 80050e4:	4610      	mov	r0, r2
 80050e6:	f000 fa1b 	bl	8005520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005166:	2b01      	cmp	r3, #1
 8005168:	d101      	bne.n	800516e <HAL_TIM_IC_ConfigChannel+0x1a>
 800516a:	2302      	movs	r3, #2
 800516c:	e082      	b.n	8005274 <HAL_TIM_IC_ConfigChannel+0x120>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d11b      	bne.n	80051b4 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6818      	ldr	r0, [r3, #0]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	6819      	ldr	r1, [r3, #0]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f000 fd56 	bl	8005c3c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	699a      	ldr	r2, [r3, #24]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 020c 	bic.w	r2, r2, #12
 800519e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6999      	ldr	r1, [r3, #24]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	689a      	ldr	r2, [r3, #8]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	619a      	str	r2, [r3, #24]
 80051b2:	e05a      	b.n	800526a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d11c      	bne.n	80051f4 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6818      	ldr	r0, [r3, #0]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	6819      	ldr	r1, [r3, #0]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f000 fdda 	bl	8005d82 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	699a      	ldr	r2, [r3, #24]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80051dc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6999      	ldr	r1, [r3, #24]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	021a      	lsls	r2, r3, #8
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	619a      	str	r2, [r3, #24]
 80051f2:	e03a      	b.n	800526a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b08      	cmp	r3, #8
 80051f8:	d11b      	bne.n	8005232 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6818      	ldr	r0, [r3, #0]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	6819      	ldr	r1, [r3, #0]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f000 fe27 	bl	8005e5c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69da      	ldr	r2, [r3, #28]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 020c 	bic.w	r2, r2, #12
 800521c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	69d9      	ldr	r1, [r3, #28]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	61da      	str	r2, [r3, #28]
 8005230:	e01b      	b.n	800526a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6818      	ldr	r0, [r3, #0]
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	6819      	ldr	r1, [r3, #0]
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f000 fe47 	bl	8005ed4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69da      	ldr	r2, [r3, #28]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005254:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69d9      	ldr	r1, [r3, #28]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	021a      	lsls	r2, r3, #8
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800528e:	2b01      	cmp	r3, #1
 8005290:	d101      	bne.n	8005296 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005292:	2302      	movs	r3, #2
 8005294:	e0fd      	b.n	8005492 <HAL_TIM_PWM_ConfigChannel+0x216>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b14      	cmp	r3, #20
 80052a2:	f200 80f0 	bhi.w	8005486 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80052a6:	a201      	add	r2, pc, #4	; (adr r2, 80052ac <HAL_TIM_PWM_ConfigChannel+0x30>)
 80052a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ac:	08005301 	.word	0x08005301
 80052b0:	08005487 	.word	0x08005487
 80052b4:	08005487 	.word	0x08005487
 80052b8:	08005487 	.word	0x08005487
 80052bc:	08005341 	.word	0x08005341
 80052c0:	08005487 	.word	0x08005487
 80052c4:	08005487 	.word	0x08005487
 80052c8:	08005487 	.word	0x08005487
 80052cc:	08005383 	.word	0x08005383
 80052d0:	08005487 	.word	0x08005487
 80052d4:	08005487 	.word	0x08005487
 80052d8:	08005487 	.word	0x08005487
 80052dc:	080053c3 	.word	0x080053c3
 80052e0:	08005487 	.word	0x08005487
 80052e4:	08005487 	.word	0x08005487
 80052e8:	08005487 	.word	0x08005487
 80052ec:	08005405 	.word	0x08005405
 80052f0:	08005487 	.word	0x08005487
 80052f4:	08005487 	.word	0x08005487
 80052f8:	08005487 	.word	0x08005487
 80052fc:	08005445 	.word	0x08005445
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68b9      	ldr	r1, [r7, #8]
 8005306:	4618      	mov	r0, r3
 8005308:	f000 f9aa 	bl	8005660 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	699a      	ldr	r2, [r3, #24]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0208 	orr.w	r2, r2, #8
 800531a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699a      	ldr	r2, [r3, #24]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0204 	bic.w	r2, r2, #4
 800532a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6999      	ldr	r1, [r3, #24]
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	691a      	ldr	r2, [r3, #16]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	619a      	str	r2, [r3, #24]
      break;
 800533e:	e0a3      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68b9      	ldr	r1, [r7, #8]
 8005346:	4618      	mov	r0, r3
 8005348:	f000 f9fc 	bl	8005744 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	699a      	ldr	r2, [r3, #24]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800535a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	699a      	ldr	r2, [r3, #24]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800536a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6999      	ldr	r1, [r3, #24]
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	021a      	lsls	r2, r3, #8
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	619a      	str	r2, [r3, #24]
      break;
 8005380:	e082      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68b9      	ldr	r1, [r7, #8]
 8005388:	4618      	mov	r0, r3
 800538a:	f000 fa53 	bl	8005834 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69da      	ldr	r2, [r3, #28]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f042 0208 	orr.w	r2, r2, #8
 800539c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69da      	ldr	r2, [r3, #28]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0204 	bic.w	r2, r2, #4
 80053ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	69d9      	ldr	r1, [r3, #28]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	691a      	ldr	r2, [r3, #16]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	61da      	str	r2, [r3, #28]
      break;
 80053c0:	e062      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68b9      	ldr	r1, [r7, #8]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f000 faa9 	bl	8005920 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	69da      	ldr	r2, [r3, #28]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	69da      	ldr	r2, [r3, #28]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	69d9      	ldr	r1, [r3, #28]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	021a      	lsls	r2, r3, #8
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	61da      	str	r2, [r3, #28]
      break;
 8005402:	e041      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68b9      	ldr	r1, [r7, #8]
 800540a:	4618      	mov	r0, r3
 800540c:	f000 fae0 	bl	80059d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f042 0208 	orr.w	r2, r2, #8
 800541e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0204 	bic.w	r2, r2, #4
 800542e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	691a      	ldr	r2, [r3, #16]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005442:	e021      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	4618      	mov	r0, r3
 800544c:	f000 fb12 	bl	8005a74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800545e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800546e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	021a      	lsls	r2, r3, #8
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005484:	e000      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005486:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop

0800549c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d101      	bne.n	80054b4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80054b0:	2302      	movs	r3, #2
 80054b2:	e031      	b.n	8005518 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80054c4:	6839      	ldr	r1, [r7, #0]
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fb28 	bl	8005b1c <TIM_SlaveTimer_SetConfig>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d009      	beq.n	80054e6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e018      	b.n	8005518 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68da      	ldr	r2, [r3, #12]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054f4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68da      	ldr	r2, [r3, #12]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005504:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a40      	ldr	r2, [pc, #256]	; (8005634 <TIM_Base_SetConfig+0x114>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d013      	beq.n	8005560 <TIM_Base_SetConfig+0x40>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800553e:	d00f      	beq.n	8005560 <TIM_Base_SetConfig+0x40>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a3d      	ldr	r2, [pc, #244]	; (8005638 <TIM_Base_SetConfig+0x118>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d00b      	beq.n	8005560 <TIM_Base_SetConfig+0x40>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a3c      	ldr	r2, [pc, #240]	; (800563c <TIM_Base_SetConfig+0x11c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d007      	beq.n	8005560 <TIM_Base_SetConfig+0x40>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a3b      	ldr	r2, [pc, #236]	; (8005640 <TIM_Base_SetConfig+0x120>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d003      	beq.n	8005560 <TIM_Base_SetConfig+0x40>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a3a      	ldr	r2, [pc, #232]	; (8005644 <TIM_Base_SetConfig+0x124>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d108      	bne.n	8005572 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a2f      	ldr	r2, [pc, #188]	; (8005634 <TIM_Base_SetConfig+0x114>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d02b      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005580:	d027      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a2c      	ldr	r2, [pc, #176]	; (8005638 <TIM_Base_SetConfig+0x118>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d023      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a2b      	ldr	r2, [pc, #172]	; (800563c <TIM_Base_SetConfig+0x11c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d01f      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a2a      	ldr	r2, [pc, #168]	; (8005640 <TIM_Base_SetConfig+0x120>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d01b      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a29      	ldr	r2, [pc, #164]	; (8005644 <TIM_Base_SetConfig+0x124>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d017      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a28      	ldr	r2, [pc, #160]	; (8005648 <TIM_Base_SetConfig+0x128>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d013      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a27      	ldr	r2, [pc, #156]	; (800564c <TIM_Base_SetConfig+0x12c>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00f      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a26      	ldr	r2, [pc, #152]	; (8005650 <TIM_Base_SetConfig+0x130>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00b      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a25      	ldr	r2, [pc, #148]	; (8005654 <TIM_Base_SetConfig+0x134>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d007      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a24      	ldr	r2, [pc, #144]	; (8005658 <TIM_Base_SetConfig+0x138>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d003      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a23      	ldr	r2, [pc, #140]	; (800565c <TIM_Base_SetConfig+0x13c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d108      	bne.n	80055e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a0a      	ldr	r2, [pc, #40]	; (8005634 <TIM_Base_SetConfig+0x114>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d003      	beq.n	8005618 <TIM_Base_SetConfig+0xf8>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a0c      	ldr	r2, [pc, #48]	; (8005644 <TIM_Base_SetConfig+0x124>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d103      	bne.n	8005620 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	615a      	str	r2, [r3, #20]
}
 8005626:	bf00      	nop
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	40010000 	.word	0x40010000
 8005638:	40000400 	.word	0x40000400
 800563c:	40000800 	.word	0x40000800
 8005640:	40000c00 	.word	0x40000c00
 8005644:	40010400 	.word	0x40010400
 8005648:	40014000 	.word	0x40014000
 800564c:	40014400 	.word	0x40014400
 8005650:	40014800 	.word	0x40014800
 8005654:	40001800 	.word	0x40001800
 8005658:	40001c00 	.word	0x40001c00
 800565c:	40002000 	.word	0x40002000

08005660 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	f023 0201 	bic.w	r2, r3, #1
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4b2b      	ldr	r3, [pc, #172]	; (8005738 <TIM_OC1_SetConfig+0xd8>)
 800568c:	4013      	ands	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 0303 	bic.w	r3, r3, #3
 8005696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f023 0302 	bic.w	r3, r3, #2
 80056a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a21      	ldr	r2, [pc, #132]	; (800573c <TIM_OC1_SetConfig+0xdc>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d003      	beq.n	80056c4 <TIM_OC1_SetConfig+0x64>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a20      	ldr	r2, [pc, #128]	; (8005740 <TIM_OC1_SetConfig+0xe0>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d10c      	bne.n	80056de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f023 0308 	bic.w	r3, r3, #8
 80056ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f023 0304 	bic.w	r3, r3, #4
 80056dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a16      	ldr	r2, [pc, #88]	; (800573c <TIM_OC1_SetConfig+0xdc>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d003      	beq.n	80056ee <TIM_OC1_SetConfig+0x8e>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a15      	ldr	r2, [pc, #84]	; (8005740 <TIM_OC1_SetConfig+0xe0>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d111      	bne.n	8005712 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	4313      	orrs	r3, r2
 8005706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	4313      	orrs	r3, r2
 8005710:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	621a      	str	r2, [r3, #32]
}
 800572c:	bf00      	nop
 800572e:	371c      	adds	r7, #28
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	fffeff8f 	.word	0xfffeff8f
 800573c:	40010000 	.word	0x40010000
 8005740:	40010400 	.word	0x40010400

08005744 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	f023 0210 	bic.w	r2, r3, #16
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	4b2e      	ldr	r3, [pc, #184]	; (8005828 <TIM_OC2_SetConfig+0xe4>)
 8005770:	4013      	ands	r3, r2
 8005772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800577a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	021b      	lsls	r3, r3, #8
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	4313      	orrs	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f023 0320 	bic.w	r3, r3, #32
 800578e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	011b      	lsls	r3, r3, #4
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	4313      	orrs	r3, r2
 800579a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a23      	ldr	r2, [pc, #140]	; (800582c <TIM_OC2_SetConfig+0xe8>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d003      	beq.n	80057ac <TIM_OC2_SetConfig+0x68>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a22      	ldr	r2, [pc, #136]	; (8005830 <TIM_OC2_SetConfig+0xec>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d10d      	bne.n	80057c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	4313      	orrs	r3, r2
 80057be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a18      	ldr	r2, [pc, #96]	; (800582c <TIM_OC2_SetConfig+0xe8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d003      	beq.n	80057d8 <TIM_OC2_SetConfig+0x94>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a17      	ldr	r2, [pc, #92]	; (8005830 <TIM_OC2_SetConfig+0xec>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d113      	bne.n	8005800 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	621a      	str	r2, [r3, #32]
}
 800581a:	bf00      	nop
 800581c:	371c      	adds	r7, #28
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	feff8fff 	.word	0xfeff8fff
 800582c:	40010000 	.word	0x40010000
 8005830:	40010400 	.word	0x40010400

08005834 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005834:	b480      	push	{r7}
 8005836:	b087      	sub	sp, #28
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	4b2d      	ldr	r3, [pc, #180]	; (8005914 <TIM_OC3_SetConfig+0xe0>)
 8005860:	4013      	ands	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f023 0303 	bic.w	r3, r3, #3
 800586a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800587c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	021b      	lsls	r3, r3, #8
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	4313      	orrs	r3, r2
 8005888:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a22      	ldr	r2, [pc, #136]	; (8005918 <TIM_OC3_SetConfig+0xe4>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d003      	beq.n	800589a <TIM_OC3_SetConfig+0x66>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a21      	ldr	r2, [pc, #132]	; (800591c <TIM_OC3_SetConfig+0xe8>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d10d      	bne.n	80058b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	021b      	lsls	r3, r3, #8
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a17      	ldr	r2, [pc, #92]	; (8005918 <TIM_OC3_SetConfig+0xe4>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d003      	beq.n	80058c6 <TIM_OC3_SetConfig+0x92>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a16      	ldr	r2, [pc, #88]	; (800591c <TIM_OC3_SetConfig+0xe8>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d113      	bne.n	80058ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	011b      	lsls	r3, r3, #4
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	4313      	orrs	r3, r2
 80058e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685a      	ldr	r2, [r3, #4]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	621a      	str	r2, [r3, #32]
}
 8005908:	bf00      	nop
 800590a:	371c      	adds	r7, #28
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	fffeff8f 	.word	0xfffeff8f
 8005918:	40010000 	.word	0x40010000
 800591c:	40010400 	.word	0x40010400

08005920 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	4b1e      	ldr	r3, [pc, #120]	; (80059c4 <TIM_OC4_SetConfig+0xa4>)
 800594c:	4013      	ands	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005956:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	021b      	lsls	r3, r3, #8
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4313      	orrs	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800596a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	031b      	lsls	r3, r3, #12
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	4313      	orrs	r3, r2
 8005976:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a13      	ldr	r2, [pc, #76]	; (80059c8 <TIM_OC4_SetConfig+0xa8>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d003      	beq.n	8005988 <TIM_OC4_SetConfig+0x68>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a12      	ldr	r2, [pc, #72]	; (80059cc <TIM_OC4_SetConfig+0xac>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d109      	bne.n	800599c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800598e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	019b      	lsls	r3, r3, #6
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	4313      	orrs	r3, r2
 800599a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	621a      	str	r2, [r3, #32]
}
 80059b6:	bf00      	nop
 80059b8:	371c      	adds	r7, #28
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	feff8fff 	.word	0xfeff8fff
 80059c8:	40010000 	.word	0x40010000
 80059cc:	40010400 	.word	0x40010400

080059d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4b1b      	ldr	r3, [pc, #108]	; (8005a68 <TIM_OC5_SetConfig+0x98>)
 80059fc:	4013      	ands	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	041b      	lsls	r3, r3, #16
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a12      	ldr	r2, [pc, #72]	; (8005a6c <TIM_OC5_SetConfig+0x9c>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d003      	beq.n	8005a2e <TIM_OC5_SetConfig+0x5e>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a11      	ldr	r2, [pc, #68]	; (8005a70 <TIM_OC5_SetConfig+0xa0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d109      	bne.n	8005a42 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	021b      	lsls	r3, r3, #8
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	621a      	str	r2, [r3, #32]
}
 8005a5c:	bf00      	nop
 8005a5e:	371c      	adds	r7, #28
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	fffeff8f 	.word	0xfffeff8f
 8005a6c:	40010000 	.word	0x40010000
 8005a70:	40010400 	.word	0x40010400

08005a74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b087      	sub	sp, #28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	4b1c      	ldr	r3, [pc, #112]	; (8005b10 <TIM_OC6_SetConfig+0x9c>)
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	021b      	lsls	r3, r3, #8
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ab6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	051b      	lsls	r3, r3, #20
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a13      	ldr	r2, [pc, #76]	; (8005b14 <TIM_OC6_SetConfig+0xa0>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d003      	beq.n	8005ad4 <TIM_OC6_SetConfig+0x60>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a12      	ldr	r2, [pc, #72]	; (8005b18 <TIM_OC6_SetConfig+0xa4>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d109      	bne.n	8005ae8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ada:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	029b      	lsls	r3, r3, #10
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	621a      	str	r2, [r3, #32]
}
 8005b02:	bf00      	nop
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	feff8fff 	.word	0xfeff8fff
 8005b14:	40010000 	.word	0x40010000
 8005b18:	40010400 	.word	0x40010400

08005b1c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b34:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	4b3d      	ldr	r3, [pc, #244]	; (8005c38 <TIM_SlaveTimer_SetConfig+0x11c>)
 8005b44:	4013      	ands	r3, r2
 8005b46:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	2b70      	cmp	r3, #112	; 0x70
 8005b60:	d01a      	beq.n	8005b98 <TIM_SlaveTimer_SetConfig+0x7c>
 8005b62:	2b70      	cmp	r3, #112	; 0x70
 8005b64:	d860      	bhi.n	8005c28 <TIM_SlaveTimer_SetConfig+0x10c>
 8005b66:	2b60      	cmp	r3, #96	; 0x60
 8005b68:	d054      	beq.n	8005c14 <TIM_SlaveTimer_SetConfig+0xf8>
 8005b6a:	2b60      	cmp	r3, #96	; 0x60
 8005b6c:	d85c      	bhi.n	8005c28 <TIM_SlaveTimer_SetConfig+0x10c>
 8005b6e:	2b50      	cmp	r3, #80	; 0x50
 8005b70:	d046      	beq.n	8005c00 <TIM_SlaveTimer_SetConfig+0xe4>
 8005b72:	2b50      	cmp	r3, #80	; 0x50
 8005b74:	d858      	bhi.n	8005c28 <TIM_SlaveTimer_SetConfig+0x10c>
 8005b76:	2b40      	cmp	r3, #64	; 0x40
 8005b78:	d019      	beq.n	8005bae <TIM_SlaveTimer_SetConfig+0x92>
 8005b7a:	2b40      	cmp	r3, #64	; 0x40
 8005b7c:	d854      	bhi.n	8005c28 <TIM_SlaveTimer_SetConfig+0x10c>
 8005b7e:	2b30      	cmp	r3, #48	; 0x30
 8005b80:	d054      	beq.n	8005c2c <TIM_SlaveTimer_SetConfig+0x110>
 8005b82:	2b30      	cmp	r3, #48	; 0x30
 8005b84:	d850      	bhi.n	8005c28 <TIM_SlaveTimer_SetConfig+0x10c>
 8005b86:	2b20      	cmp	r3, #32
 8005b88:	d050      	beq.n	8005c2c <TIM_SlaveTimer_SetConfig+0x110>
 8005b8a:	2b20      	cmp	r3, #32
 8005b8c:	d84c      	bhi.n	8005c28 <TIM_SlaveTimer_SetConfig+0x10c>
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d04c      	beq.n	8005c2c <TIM_SlaveTimer_SetConfig+0x110>
 8005b92:	2b10      	cmp	r3, #16
 8005b94:	d04a      	beq.n	8005c2c <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8005b96:	e047      	b.n	8005c28 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6818      	ldr	r0, [r3, #0]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	68d9      	ldr	r1, [r3, #12]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	f000 f9d1 	bl	8005f4e <TIM_ETR_SetConfig>
      break;
 8005bac:	e03f      	b.n	8005c2e <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b05      	cmp	r3, #5
 8005bb4:	d101      	bne.n	8005bba <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e03a      	b.n	8005c30 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6a1b      	ldr	r3, [r3, #32]
 8005bc0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6a1a      	ldr	r2, [r3, #32]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0201 	bic.w	r2, r2, #1
 8005bd0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005be0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	621a      	str	r2, [r3, #32]
      break;
 8005bfe:	e016      	b.n	8005c2e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6818      	ldr	r0, [r3, #0]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	6899      	ldr	r1, [r3, #8]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f000 f889 	bl	8005d24 <TIM_TI1_ConfigInputStage>
      break;
 8005c12:	e00c      	b.n	8005c2e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6818      	ldr	r0, [r3, #0]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	6899      	ldr	r1, [r3, #8]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	461a      	mov	r2, r3
 8005c22:	f000 f8eb 	bl	8005dfc <TIM_TI2_ConfigInputStage>
      break;
 8005c26:	e002      	b.n	8005c2e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8005c28:	bf00      	nop
 8005c2a:	e000      	b.n	8005c2e <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8005c2c:	bf00      	nop
  }
  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	fffefff8 	.word	0xfffefff8

08005c3c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
 8005c48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	f023 0201 	bic.w	r2, r3, #1
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	4a28      	ldr	r2, [pc, #160]	; (8005d08 <TIM_TI1_SetConfig+0xcc>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d01b      	beq.n	8005ca2 <TIM_TI1_SetConfig+0x66>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c70:	d017      	beq.n	8005ca2 <TIM_TI1_SetConfig+0x66>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4a25      	ldr	r2, [pc, #148]	; (8005d0c <TIM_TI1_SetConfig+0xd0>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d013      	beq.n	8005ca2 <TIM_TI1_SetConfig+0x66>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	4a24      	ldr	r2, [pc, #144]	; (8005d10 <TIM_TI1_SetConfig+0xd4>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d00f      	beq.n	8005ca2 <TIM_TI1_SetConfig+0x66>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	4a23      	ldr	r2, [pc, #140]	; (8005d14 <TIM_TI1_SetConfig+0xd8>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d00b      	beq.n	8005ca2 <TIM_TI1_SetConfig+0x66>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	4a22      	ldr	r2, [pc, #136]	; (8005d18 <TIM_TI1_SetConfig+0xdc>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d007      	beq.n	8005ca2 <TIM_TI1_SetConfig+0x66>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4a21      	ldr	r2, [pc, #132]	; (8005d1c <TIM_TI1_SetConfig+0xe0>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d003      	beq.n	8005ca2 <TIM_TI1_SetConfig+0x66>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	4a20      	ldr	r2, [pc, #128]	; (8005d20 <TIM_TI1_SetConfig+0xe4>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d101      	bne.n	8005ca6 <TIM_TI1_SetConfig+0x6a>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e000      	b.n	8005ca8 <TIM_TI1_SetConfig+0x6c>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d008      	beq.n	8005cbe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f023 0303 	bic.w	r3, r3, #3
 8005cb2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]
 8005cbc:	e003      	b.n	8005cc6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f043 0301 	orr.w	r3, r3, #1
 8005cc4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ccc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	011b      	lsls	r3, r3, #4
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	f023 030a 	bic.w	r3, r3, #10
 8005ce0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	f003 030a 	and.w	r3, r3, #10
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	621a      	str	r2, [r3, #32]
}
 8005cfa:	bf00      	nop
 8005cfc:	371c      	adds	r7, #28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	40010000 	.word	0x40010000
 8005d0c:	40000400 	.word	0x40000400
 8005d10:	40000800 	.word	0x40000800
 8005d14:	40000c00 	.word	0x40000c00
 8005d18:	40010400 	.word	0x40010400
 8005d1c:	40014000 	.word	0x40014000
 8005d20:	40001800 	.word	0x40001800

08005d24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b087      	sub	sp, #28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	f023 0201 	bic.w	r2, r3, #1
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	011b      	lsls	r3, r3, #4
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f023 030a 	bic.w	r3, r3, #10
 8005d60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	621a      	str	r2, [r3, #32]
}
 8005d76:	bf00      	nop
 8005d78:	371c      	adds	r7, #28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b087      	sub	sp, #28
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	60f8      	str	r0, [r7, #12]
 8005d8a:	60b9      	str	r1, [r7, #8]
 8005d8c:	607a      	str	r2, [r7, #4]
 8005d8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	f023 0210 	bic.w	r2, r3, #16
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	021b      	lsls	r3, r3, #8
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	031b      	lsls	r3, r3, #12
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dd4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	011b      	lsls	r3, r3, #4
 8005dda:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	621a      	str	r2, [r3, #32]
}
 8005df0:	bf00      	nop
 8005df2:	371c      	adds	r7, #28
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	f023 0210 	bic.w	r2, r3, #16
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	031b      	lsls	r3, r3, #12
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	011b      	lsls	r3, r3, #4
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	621a      	str	r2, [r3, #32]
}
 8005e50:	bf00      	nop
 8005e52:	371c      	adds	r7, #28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
 8005e68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f023 0303 	bic.w	r3, r3, #3
 8005e88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	011b      	lsls	r3, r3, #4
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005eac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	021b      	lsls	r3, r3, #8
 8005eb2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	621a      	str	r2, [r3, #32]
}
 8005ec8:	bf00      	nop
 8005eca:	371c      	adds	r7, #28
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
 8005ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	021b      	lsls	r3, r3, #8
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f12:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	031b      	lsls	r3, r3, #12
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005f26:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	031b      	lsls	r3, r3, #12
 8005f2c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	621a      	str	r2, [r3, #32]
}
 8005f42:	bf00      	nop
 8005f44:	371c      	adds	r7, #28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b087      	sub	sp, #28
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	60f8      	str	r0, [r7, #12]
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	607a      	str	r2, [r7, #4]
 8005f5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f68:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	021a      	lsls	r2, r3, #8
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	431a      	orrs	r2, r3
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	609a      	str	r2, [r3, #8]
}
 8005f82:	bf00      	nop
 8005f84:	371c      	adds	r7, #28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
	...

08005f90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d101      	bne.n	8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	e06d      	b.n	8006084 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a30      	ldr	r2, [pc, #192]	; (8006090 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d004      	beq.n	8005fdc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a2f      	ldr	r2, [pc, #188]	; (8006094 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d108      	bne.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005fe2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a20      	ldr	r2, [pc, #128]	; (8006090 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d022      	beq.n	8006058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800601a:	d01d      	beq.n	8006058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a1d      	ldr	r2, [pc, #116]	; (8006098 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d018      	beq.n	8006058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a1c      	ldr	r2, [pc, #112]	; (800609c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d013      	beq.n	8006058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a1a      	ldr	r2, [pc, #104]	; (80060a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d00e      	beq.n	8006058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a15      	ldr	r2, [pc, #84]	; (8006094 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d009      	beq.n	8006058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a16      	ldr	r2, [pc, #88]	; (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d004      	beq.n	8006058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a15      	ldr	r2, [pc, #84]	; (80060a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d10c      	bne.n	8006072 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800605e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	4313      	orrs	r3, r2
 8006068:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3714      	adds	r7, #20
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	40010000 	.word	0x40010000
 8006094:	40010400 	.word	0x40010400
 8006098:	40000400 	.word	0x40000400
 800609c:	40000800 	.word	0x40000800
 80060a0:	40000c00 	.word	0x40000c00
 80060a4:	40014000 	.word	0x40014000
 80060a8:	40001800 	.word	0x40001800

080060ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e040      	b.n	8006140 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d106      	bne.n	80060d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7fc f804 	bl	80020dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2224      	movs	r2, #36	; 0x24
 80060d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 0201 	bic.w	r2, r2, #1
 80060e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f8c0 	bl	8006270 <UART_SetConfig>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d101      	bne.n	80060fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e022      	b.n	8006140 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fb16 	bl	8006734 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006116:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689a      	ldr	r2, [r3, #8]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006126:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0201 	orr.w	r2, r2, #1
 8006136:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fb9d 	bl	8006878 <UART_CheckIdleState>
 800613e:	4603      	mov	r3, r0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08a      	sub	sp, #40	; 0x28
 800614c:	af02      	add	r7, sp, #8
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	603b      	str	r3, [r7, #0]
 8006154:	4613      	mov	r3, r2
 8006156:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800615c:	2b20      	cmp	r3, #32
 800615e:	f040 8081 	bne.w	8006264 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <HAL_UART_Transmit+0x26>
 8006168:	88fb      	ldrh	r3, [r7, #6]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e079      	b.n	8006266 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006178:	2b01      	cmp	r3, #1
 800617a:	d101      	bne.n	8006180 <HAL_UART_Transmit+0x38>
 800617c:	2302      	movs	r3, #2
 800617e:	e072      	b.n	8006266 <HAL_UART_Transmit+0x11e>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2221      	movs	r2, #33	; 0x21
 8006194:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006196:	f7fc f85f 	bl	8002258 <HAL_GetTick>
 800619a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	88fa      	ldrh	r2, [r7, #6]
 80061a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	88fa      	ldrh	r2, [r7, #6]
 80061a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b4:	d108      	bne.n	80061c8 <HAL_UART_Transmit+0x80>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d104      	bne.n	80061c8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80061be:	2300      	movs	r3, #0
 80061c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	61bb      	str	r3, [r7, #24]
 80061c6:	e003      	b.n	80061d0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061cc:	2300      	movs	r3, #0
 80061ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80061d8:	e02c      	b.n	8006234 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2200      	movs	r2, #0
 80061e2:	2180      	movs	r1, #128	; 0x80
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 fb90 	bl	800690a <UART_WaitOnFlagUntilTimeout>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e038      	b.n	8006266 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10b      	bne.n	8006212 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	881b      	ldrh	r3, [r3, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006208:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	3302      	adds	r3, #2
 800620e:	61bb      	str	r3, [r7, #24]
 8006210:	e007      	b.n	8006222 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	781a      	ldrb	r2, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	3301      	adds	r3, #1
 8006220:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006228:	b29b      	uxth	r3, r3
 800622a:	3b01      	subs	r3, #1
 800622c:	b29a      	uxth	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800623a:	b29b      	uxth	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1cc      	bne.n	80061da <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	2200      	movs	r2, #0
 8006248:	2140      	movs	r1, #64	; 0x40
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f000 fb5d 	bl	800690a <UART_WaitOnFlagUntilTimeout>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d001      	beq.n	800625a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e005      	b.n	8006266 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2220      	movs	r2, #32
 800625e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006260:	2300      	movs	r3, #0
 8006262:	e000      	b.n	8006266 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006264:	2302      	movs	r3, #2
  }
}
 8006266:	4618      	mov	r0, r3
 8006268:	3720      	adds	r7, #32
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
	...

08006270 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006278:	2300      	movs	r3, #0
 800627a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689a      	ldr	r2, [r3, #8]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	431a      	orrs	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	431a      	orrs	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	69db      	ldr	r3, [r3, #28]
 8006290:	4313      	orrs	r3, r2
 8006292:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	4ba7      	ldr	r3, [pc, #668]	; (8006538 <UART_SetConfig+0x2c8>)
 800629c:	4013      	ands	r3, r2
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	6812      	ldr	r2, [r2, #0]
 80062a2:	6979      	ldr	r1, [r7, #20]
 80062a4:	430b      	orrs	r3, r1
 80062a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68da      	ldr	r2, [r3, #12]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	430a      	orrs	r2, r1
 80062e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a95      	ldr	r2, [pc, #596]	; (800653c <UART_SetConfig+0x2cc>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d120      	bne.n	800632e <UART_SetConfig+0xbe>
 80062ec:	4b94      	ldr	r3, [pc, #592]	; (8006540 <UART_SetConfig+0x2d0>)
 80062ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f2:	f003 0303 	and.w	r3, r3, #3
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	d816      	bhi.n	8006328 <UART_SetConfig+0xb8>
 80062fa:	a201      	add	r2, pc, #4	; (adr r2, 8006300 <UART_SetConfig+0x90>)
 80062fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006300:	08006311 	.word	0x08006311
 8006304:	0800631d 	.word	0x0800631d
 8006308:	08006317 	.word	0x08006317
 800630c:	08006323 	.word	0x08006323
 8006310:	2301      	movs	r3, #1
 8006312:	77fb      	strb	r3, [r7, #31]
 8006314:	e14f      	b.n	80065b6 <UART_SetConfig+0x346>
 8006316:	2302      	movs	r3, #2
 8006318:	77fb      	strb	r3, [r7, #31]
 800631a:	e14c      	b.n	80065b6 <UART_SetConfig+0x346>
 800631c:	2304      	movs	r3, #4
 800631e:	77fb      	strb	r3, [r7, #31]
 8006320:	e149      	b.n	80065b6 <UART_SetConfig+0x346>
 8006322:	2308      	movs	r3, #8
 8006324:	77fb      	strb	r3, [r7, #31]
 8006326:	e146      	b.n	80065b6 <UART_SetConfig+0x346>
 8006328:	2310      	movs	r3, #16
 800632a:	77fb      	strb	r3, [r7, #31]
 800632c:	e143      	b.n	80065b6 <UART_SetConfig+0x346>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a84      	ldr	r2, [pc, #528]	; (8006544 <UART_SetConfig+0x2d4>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d132      	bne.n	800639e <UART_SetConfig+0x12e>
 8006338:	4b81      	ldr	r3, [pc, #516]	; (8006540 <UART_SetConfig+0x2d0>)
 800633a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633e:	f003 030c 	and.w	r3, r3, #12
 8006342:	2b0c      	cmp	r3, #12
 8006344:	d828      	bhi.n	8006398 <UART_SetConfig+0x128>
 8006346:	a201      	add	r2, pc, #4	; (adr r2, 800634c <UART_SetConfig+0xdc>)
 8006348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634c:	08006381 	.word	0x08006381
 8006350:	08006399 	.word	0x08006399
 8006354:	08006399 	.word	0x08006399
 8006358:	08006399 	.word	0x08006399
 800635c:	0800638d 	.word	0x0800638d
 8006360:	08006399 	.word	0x08006399
 8006364:	08006399 	.word	0x08006399
 8006368:	08006399 	.word	0x08006399
 800636c:	08006387 	.word	0x08006387
 8006370:	08006399 	.word	0x08006399
 8006374:	08006399 	.word	0x08006399
 8006378:	08006399 	.word	0x08006399
 800637c:	08006393 	.word	0x08006393
 8006380:	2300      	movs	r3, #0
 8006382:	77fb      	strb	r3, [r7, #31]
 8006384:	e117      	b.n	80065b6 <UART_SetConfig+0x346>
 8006386:	2302      	movs	r3, #2
 8006388:	77fb      	strb	r3, [r7, #31]
 800638a:	e114      	b.n	80065b6 <UART_SetConfig+0x346>
 800638c:	2304      	movs	r3, #4
 800638e:	77fb      	strb	r3, [r7, #31]
 8006390:	e111      	b.n	80065b6 <UART_SetConfig+0x346>
 8006392:	2308      	movs	r3, #8
 8006394:	77fb      	strb	r3, [r7, #31]
 8006396:	e10e      	b.n	80065b6 <UART_SetConfig+0x346>
 8006398:	2310      	movs	r3, #16
 800639a:	77fb      	strb	r3, [r7, #31]
 800639c:	e10b      	b.n	80065b6 <UART_SetConfig+0x346>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a69      	ldr	r2, [pc, #420]	; (8006548 <UART_SetConfig+0x2d8>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d120      	bne.n	80063ea <UART_SetConfig+0x17a>
 80063a8:	4b65      	ldr	r3, [pc, #404]	; (8006540 <UART_SetConfig+0x2d0>)
 80063aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063b2:	2b30      	cmp	r3, #48	; 0x30
 80063b4:	d013      	beq.n	80063de <UART_SetConfig+0x16e>
 80063b6:	2b30      	cmp	r3, #48	; 0x30
 80063b8:	d814      	bhi.n	80063e4 <UART_SetConfig+0x174>
 80063ba:	2b20      	cmp	r3, #32
 80063bc:	d009      	beq.n	80063d2 <UART_SetConfig+0x162>
 80063be:	2b20      	cmp	r3, #32
 80063c0:	d810      	bhi.n	80063e4 <UART_SetConfig+0x174>
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d002      	beq.n	80063cc <UART_SetConfig+0x15c>
 80063c6:	2b10      	cmp	r3, #16
 80063c8:	d006      	beq.n	80063d8 <UART_SetConfig+0x168>
 80063ca:	e00b      	b.n	80063e4 <UART_SetConfig+0x174>
 80063cc:	2300      	movs	r3, #0
 80063ce:	77fb      	strb	r3, [r7, #31]
 80063d0:	e0f1      	b.n	80065b6 <UART_SetConfig+0x346>
 80063d2:	2302      	movs	r3, #2
 80063d4:	77fb      	strb	r3, [r7, #31]
 80063d6:	e0ee      	b.n	80065b6 <UART_SetConfig+0x346>
 80063d8:	2304      	movs	r3, #4
 80063da:	77fb      	strb	r3, [r7, #31]
 80063dc:	e0eb      	b.n	80065b6 <UART_SetConfig+0x346>
 80063de:	2308      	movs	r3, #8
 80063e0:	77fb      	strb	r3, [r7, #31]
 80063e2:	e0e8      	b.n	80065b6 <UART_SetConfig+0x346>
 80063e4:	2310      	movs	r3, #16
 80063e6:	77fb      	strb	r3, [r7, #31]
 80063e8:	e0e5      	b.n	80065b6 <UART_SetConfig+0x346>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a57      	ldr	r2, [pc, #348]	; (800654c <UART_SetConfig+0x2dc>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d120      	bne.n	8006436 <UART_SetConfig+0x1c6>
 80063f4:	4b52      	ldr	r3, [pc, #328]	; (8006540 <UART_SetConfig+0x2d0>)
 80063f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80063fe:	2bc0      	cmp	r3, #192	; 0xc0
 8006400:	d013      	beq.n	800642a <UART_SetConfig+0x1ba>
 8006402:	2bc0      	cmp	r3, #192	; 0xc0
 8006404:	d814      	bhi.n	8006430 <UART_SetConfig+0x1c0>
 8006406:	2b80      	cmp	r3, #128	; 0x80
 8006408:	d009      	beq.n	800641e <UART_SetConfig+0x1ae>
 800640a:	2b80      	cmp	r3, #128	; 0x80
 800640c:	d810      	bhi.n	8006430 <UART_SetConfig+0x1c0>
 800640e:	2b00      	cmp	r3, #0
 8006410:	d002      	beq.n	8006418 <UART_SetConfig+0x1a8>
 8006412:	2b40      	cmp	r3, #64	; 0x40
 8006414:	d006      	beq.n	8006424 <UART_SetConfig+0x1b4>
 8006416:	e00b      	b.n	8006430 <UART_SetConfig+0x1c0>
 8006418:	2300      	movs	r3, #0
 800641a:	77fb      	strb	r3, [r7, #31]
 800641c:	e0cb      	b.n	80065b6 <UART_SetConfig+0x346>
 800641e:	2302      	movs	r3, #2
 8006420:	77fb      	strb	r3, [r7, #31]
 8006422:	e0c8      	b.n	80065b6 <UART_SetConfig+0x346>
 8006424:	2304      	movs	r3, #4
 8006426:	77fb      	strb	r3, [r7, #31]
 8006428:	e0c5      	b.n	80065b6 <UART_SetConfig+0x346>
 800642a:	2308      	movs	r3, #8
 800642c:	77fb      	strb	r3, [r7, #31]
 800642e:	e0c2      	b.n	80065b6 <UART_SetConfig+0x346>
 8006430:	2310      	movs	r3, #16
 8006432:	77fb      	strb	r3, [r7, #31]
 8006434:	e0bf      	b.n	80065b6 <UART_SetConfig+0x346>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a45      	ldr	r2, [pc, #276]	; (8006550 <UART_SetConfig+0x2e0>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d125      	bne.n	800648c <UART_SetConfig+0x21c>
 8006440:	4b3f      	ldr	r3, [pc, #252]	; (8006540 <UART_SetConfig+0x2d0>)
 8006442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800644a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800644e:	d017      	beq.n	8006480 <UART_SetConfig+0x210>
 8006450:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006454:	d817      	bhi.n	8006486 <UART_SetConfig+0x216>
 8006456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800645a:	d00b      	beq.n	8006474 <UART_SetConfig+0x204>
 800645c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006460:	d811      	bhi.n	8006486 <UART_SetConfig+0x216>
 8006462:	2b00      	cmp	r3, #0
 8006464:	d003      	beq.n	800646e <UART_SetConfig+0x1fe>
 8006466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800646a:	d006      	beq.n	800647a <UART_SetConfig+0x20a>
 800646c:	e00b      	b.n	8006486 <UART_SetConfig+0x216>
 800646e:	2300      	movs	r3, #0
 8006470:	77fb      	strb	r3, [r7, #31]
 8006472:	e0a0      	b.n	80065b6 <UART_SetConfig+0x346>
 8006474:	2302      	movs	r3, #2
 8006476:	77fb      	strb	r3, [r7, #31]
 8006478:	e09d      	b.n	80065b6 <UART_SetConfig+0x346>
 800647a:	2304      	movs	r3, #4
 800647c:	77fb      	strb	r3, [r7, #31]
 800647e:	e09a      	b.n	80065b6 <UART_SetConfig+0x346>
 8006480:	2308      	movs	r3, #8
 8006482:	77fb      	strb	r3, [r7, #31]
 8006484:	e097      	b.n	80065b6 <UART_SetConfig+0x346>
 8006486:	2310      	movs	r3, #16
 8006488:	77fb      	strb	r3, [r7, #31]
 800648a:	e094      	b.n	80065b6 <UART_SetConfig+0x346>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a30      	ldr	r2, [pc, #192]	; (8006554 <UART_SetConfig+0x2e4>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d125      	bne.n	80064e2 <UART_SetConfig+0x272>
 8006496:	4b2a      	ldr	r3, [pc, #168]	; (8006540 <UART_SetConfig+0x2d0>)
 8006498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800649c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064a4:	d017      	beq.n	80064d6 <UART_SetConfig+0x266>
 80064a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064aa:	d817      	bhi.n	80064dc <UART_SetConfig+0x26c>
 80064ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064b0:	d00b      	beq.n	80064ca <UART_SetConfig+0x25a>
 80064b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064b6:	d811      	bhi.n	80064dc <UART_SetConfig+0x26c>
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d003      	beq.n	80064c4 <UART_SetConfig+0x254>
 80064bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064c0:	d006      	beq.n	80064d0 <UART_SetConfig+0x260>
 80064c2:	e00b      	b.n	80064dc <UART_SetConfig+0x26c>
 80064c4:	2301      	movs	r3, #1
 80064c6:	77fb      	strb	r3, [r7, #31]
 80064c8:	e075      	b.n	80065b6 <UART_SetConfig+0x346>
 80064ca:	2302      	movs	r3, #2
 80064cc:	77fb      	strb	r3, [r7, #31]
 80064ce:	e072      	b.n	80065b6 <UART_SetConfig+0x346>
 80064d0:	2304      	movs	r3, #4
 80064d2:	77fb      	strb	r3, [r7, #31]
 80064d4:	e06f      	b.n	80065b6 <UART_SetConfig+0x346>
 80064d6:	2308      	movs	r3, #8
 80064d8:	77fb      	strb	r3, [r7, #31]
 80064da:	e06c      	b.n	80065b6 <UART_SetConfig+0x346>
 80064dc:	2310      	movs	r3, #16
 80064de:	77fb      	strb	r3, [r7, #31]
 80064e0:	e069      	b.n	80065b6 <UART_SetConfig+0x346>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a1c      	ldr	r2, [pc, #112]	; (8006558 <UART_SetConfig+0x2e8>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d137      	bne.n	800655c <UART_SetConfig+0x2ec>
 80064ec:	4b14      	ldr	r3, [pc, #80]	; (8006540 <UART_SetConfig+0x2d0>)
 80064ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80064f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064fa:	d017      	beq.n	800652c <UART_SetConfig+0x2bc>
 80064fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006500:	d817      	bhi.n	8006532 <UART_SetConfig+0x2c2>
 8006502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006506:	d00b      	beq.n	8006520 <UART_SetConfig+0x2b0>
 8006508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800650c:	d811      	bhi.n	8006532 <UART_SetConfig+0x2c2>
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <UART_SetConfig+0x2aa>
 8006512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006516:	d006      	beq.n	8006526 <UART_SetConfig+0x2b6>
 8006518:	e00b      	b.n	8006532 <UART_SetConfig+0x2c2>
 800651a:	2300      	movs	r3, #0
 800651c:	77fb      	strb	r3, [r7, #31]
 800651e:	e04a      	b.n	80065b6 <UART_SetConfig+0x346>
 8006520:	2302      	movs	r3, #2
 8006522:	77fb      	strb	r3, [r7, #31]
 8006524:	e047      	b.n	80065b6 <UART_SetConfig+0x346>
 8006526:	2304      	movs	r3, #4
 8006528:	77fb      	strb	r3, [r7, #31]
 800652a:	e044      	b.n	80065b6 <UART_SetConfig+0x346>
 800652c:	2308      	movs	r3, #8
 800652e:	77fb      	strb	r3, [r7, #31]
 8006530:	e041      	b.n	80065b6 <UART_SetConfig+0x346>
 8006532:	2310      	movs	r3, #16
 8006534:	77fb      	strb	r3, [r7, #31]
 8006536:	e03e      	b.n	80065b6 <UART_SetConfig+0x346>
 8006538:	efff69f3 	.word	0xefff69f3
 800653c:	40011000 	.word	0x40011000
 8006540:	40023800 	.word	0x40023800
 8006544:	40004400 	.word	0x40004400
 8006548:	40004800 	.word	0x40004800
 800654c:	40004c00 	.word	0x40004c00
 8006550:	40005000 	.word	0x40005000
 8006554:	40011400 	.word	0x40011400
 8006558:	40007800 	.word	0x40007800
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a71      	ldr	r2, [pc, #452]	; (8006728 <UART_SetConfig+0x4b8>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d125      	bne.n	80065b2 <UART_SetConfig+0x342>
 8006566:	4b71      	ldr	r3, [pc, #452]	; (800672c <UART_SetConfig+0x4bc>)
 8006568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800656c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006570:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006574:	d017      	beq.n	80065a6 <UART_SetConfig+0x336>
 8006576:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800657a:	d817      	bhi.n	80065ac <UART_SetConfig+0x33c>
 800657c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006580:	d00b      	beq.n	800659a <UART_SetConfig+0x32a>
 8006582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006586:	d811      	bhi.n	80065ac <UART_SetConfig+0x33c>
 8006588:	2b00      	cmp	r3, #0
 800658a:	d003      	beq.n	8006594 <UART_SetConfig+0x324>
 800658c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006590:	d006      	beq.n	80065a0 <UART_SetConfig+0x330>
 8006592:	e00b      	b.n	80065ac <UART_SetConfig+0x33c>
 8006594:	2300      	movs	r3, #0
 8006596:	77fb      	strb	r3, [r7, #31]
 8006598:	e00d      	b.n	80065b6 <UART_SetConfig+0x346>
 800659a:	2302      	movs	r3, #2
 800659c:	77fb      	strb	r3, [r7, #31]
 800659e:	e00a      	b.n	80065b6 <UART_SetConfig+0x346>
 80065a0:	2304      	movs	r3, #4
 80065a2:	77fb      	strb	r3, [r7, #31]
 80065a4:	e007      	b.n	80065b6 <UART_SetConfig+0x346>
 80065a6:	2308      	movs	r3, #8
 80065a8:	77fb      	strb	r3, [r7, #31]
 80065aa:	e004      	b.n	80065b6 <UART_SetConfig+0x346>
 80065ac:	2310      	movs	r3, #16
 80065ae:	77fb      	strb	r3, [r7, #31]
 80065b0:	e001      	b.n	80065b6 <UART_SetConfig+0x346>
 80065b2:	2310      	movs	r3, #16
 80065b4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065be:	d15b      	bne.n	8006678 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80065c0:	7ffb      	ldrb	r3, [r7, #31]
 80065c2:	2b08      	cmp	r3, #8
 80065c4:	d827      	bhi.n	8006616 <UART_SetConfig+0x3a6>
 80065c6:	a201      	add	r2, pc, #4	; (adr r2, 80065cc <UART_SetConfig+0x35c>)
 80065c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065cc:	080065f1 	.word	0x080065f1
 80065d0:	080065f9 	.word	0x080065f9
 80065d4:	08006601 	.word	0x08006601
 80065d8:	08006617 	.word	0x08006617
 80065dc:	08006607 	.word	0x08006607
 80065e0:	08006617 	.word	0x08006617
 80065e4:	08006617 	.word	0x08006617
 80065e8:	08006617 	.word	0x08006617
 80065ec:	0800660f 	.word	0x0800660f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065f0:	f7fd f99e 	bl	8003930 <HAL_RCC_GetPCLK1Freq>
 80065f4:	61b8      	str	r0, [r7, #24]
        break;
 80065f6:	e013      	b.n	8006620 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065f8:	f7fd f9ae 	bl	8003958 <HAL_RCC_GetPCLK2Freq>
 80065fc:	61b8      	str	r0, [r7, #24]
        break;
 80065fe:	e00f      	b.n	8006620 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006600:	4b4b      	ldr	r3, [pc, #300]	; (8006730 <UART_SetConfig+0x4c0>)
 8006602:	61bb      	str	r3, [r7, #24]
        break;
 8006604:	e00c      	b.n	8006620 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006606:	f7fd f8d1 	bl	80037ac <HAL_RCC_GetSysClockFreq>
 800660a:	61b8      	str	r0, [r7, #24]
        break;
 800660c:	e008      	b.n	8006620 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800660e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006612:	61bb      	str	r3, [r7, #24]
        break;
 8006614:	e004      	b.n	8006620 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006616:	2300      	movs	r3, #0
 8006618:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	77bb      	strb	r3, [r7, #30]
        break;
 800661e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d074      	beq.n	8006710 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	005a      	lsls	r2, r3, #1
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	085b      	lsrs	r3, r3, #1
 8006630:	441a      	add	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	fbb2 f3f3 	udiv	r3, r2, r3
 800663a:	b29b      	uxth	r3, r3
 800663c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	2b0f      	cmp	r3, #15
 8006642:	d916      	bls.n	8006672 <UART_SetConfig+0x402>
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800664a:	d212      	bcs.n	8006672 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	b29b      	uxth	r3, r3
 8006650:	f023 030f 	bic.w	r3, r3, #15
 8006654:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	085b      	lsrs	r3, r3, #1
 800665a:	b29b      	uxth	r3, r3
 800665c:	f003 0307 	and.w	r3, r3, #7
 8006660:	b29a      	uxth	r2, r3
 8006662:	89fb      	ldrh	r3, [r7, #14]
 8006664:	4313      	orrs	r3, r2
 8006666:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	89fa      	ldrh	r2, [r7, #14]
 800666e:	60da      	str	r2, [r3, #12]
 8006670:	e04e      	b.n	8006710 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	77bb      	strb	r3, [r7, #30]
 8006676:	e04b      	b.n	8006710 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006678:	7ffb      	ldrb	r3, [r7, #31]
 800667a:	2b08      	cmp	r3, #8
 800667c:	d827      	bhi.n	80066ce <UART_SetConfig+0x45e>
 800667e:	a201      	add	r2, pc, #4	; (adr r2, 8006684 <UART_SetConfig+0x414>)
 8006680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006684:	080066a9 	.word	0x080066a9
 8006688:	080066b1 	.word	0x080066b1
 800668c:	080066b9 	.word	0x080066b9
 8006690:	080066cf 	.word	0x080066cf
 8006694:	080066bf 	.word	0x080066bf
 8006698:	080066cf 	.word	0x080066cf
 800669c:	080066cf 	.word	0x080066cf
 80066a0:	080066cf 	.word	0x080066cf
 80066a4:	080066c7 	.word	0x080066c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066a8:	f7fd f942 	bl	8003930 <HAL_RCC_GetPCLK1Freq>
 80066ac:	61b8      	str	r0, [r7, #24]
        break;
 80066ae:	e013      	b.n	80066d8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066b0:	f7fd f952 	bl	8003958 <HAL_RCC_GetPCLK2Freq>
 80066b4:	61b8      	str	r0, [r7, #24]
        break;
 80066b6:	e00f      	b.n	80066d8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066b8:	4b1d      	ldr	r3, [pc, #116]	; (8006730 <UART_SetConfig+0x4c0>)
 80066ba:	61bb      	str	r3, [r7, #24]
        break;
 80066bc:	e00c      	b.n	80066d8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066be:	f7fd f875 	bl	80037ac <HAL_RCC_GetSysClockFreq>
 80066c2:	61b8      	str	r0, [r7, #24]
        break;
 80066c4:	e008      	b.n	80066d8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ca:	61bb      	str	r3, [r7, #24]
        break;
 80066cc:	e004      	b.n	80066d8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80066ce:	2300      	movs	r3, #0
 80066d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	77bb      	strb	r3, [r7, #30]
        break;
 80066d6:	bf00      	nop
    }

    if (pclk != 0U)
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d018      	beq.n	8006710 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	085a      	lsrs	r2, r3, #1
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	441a      	add	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	2b0f      	cmp	r3, #15
 80066f8:	d908      	bls.n	800670c <UART_SetConfig+0x49c>
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006700:	d204      	bcs.n	800670c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	60da      	str	r2, [r3, #12]
 800670a:	e001      	b.n	8006710 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800671c:	7fbb      	ldrb	r3, [r7, #30]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3720      	adds	r7, #32
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	40007c00 	.word	0x40007c00
 800672c:	40023800 	.word	0x40023800
 8006730:	00f42400 	.word	0x00f42400

08006734 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00a      	beq.n	800675e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	430a      	orrs	r2, r1
 800675c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00a      	beq.n	8006780 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	430a      	orrs	r2, r1
 800677e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00a      	beq.n	80067a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	430a      	orrs	r2, r1
 80067a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a6:	f003 0308 	and.w	r3, r3, #8
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00a      	beq.n	80067c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	430a      	orrs	r2, r1
 80067c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c8:	f003 0310 	and.w	r3, r3, #16
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00a      	beq.n	80067e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ea:	f003 0320 	and.w	r3, r3, #32
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00a      	beq.n	8006808 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	430a      	orrs	r2, r1
 8006806:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006810:	2b00      	cmp	r3, #0
 8006812:	d01a      	beq.n	800684a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	430a      	orrs	r2, r1
 8006828:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006832:	d10a      	bne.n	800684a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00a      	beq.n	800686c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	605a      	str	r2, [r3, #4]
  }
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af02      	add	r7, sp, #8
 800687e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006888:	f7fb fce6 	bl	8002258 <HAL_GetTick>
 800688c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0308 	and.w	r3, r3, #8
 8006898:	2b08      	cmp	r3, #8
 800689a:	d10e      	bne.n	80068ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800689c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f82d 	bl	800690a <UART_WaitOnFlagUntilTimeout>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e023      	b.n	8006902 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0304 	and.w	r3, r3, #4
 80068c4:	2b04      	cmp	r3, #4
 80068c6:	d10e      	bne.n	80068e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f817 	bl	800690a <UART_WaitOnFlagUntilTimeout>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e00d      	b.n	8006902 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2220      	movs	r2, #32
 80068ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2220      	movs	r2, #32
 80068f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b084      	sub	sp, #16
 800690e:	af00      	add	r7, sp, #0
 8006910:	60f8      	str	r0, [r7, #12]
 8006912:	60b9      	str	r1, [r7, #8]
 8006914:	603b      	str	r3, [r7, #0]
 8006916:	4613      	mov	r3, r2
 8006918:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800691a:	e05e      	b.n	80069da <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006922:	d05a      	beq.n	80069da <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006924:	f7fb fc98 	bl	8002258 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	69ba      	ldr	r2, [r7, #24]
 8006930:	429a      	cmp	r2, r3
 8006932:	d302      	bcc.n	800693a <UART_WaitOnFlagUntilTimeout+0x30>
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d11b      	bne.n	8006972 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006948:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f022 0201 	bic.w	r2, r2, #1
 8006958:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2220      	movs	r2, #32
 800695e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2220      	movs	r2, #32
 8006964:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e043      	b.n	80069fa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0304 	and.w	r3, r3, #4
 800697c:	2b00      	cmp	r3, #0
 800697e:	d02c      	beq.n	80069da <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800698a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800698e:	d124      	bne.n	80069da <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006998:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80069a8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f022 0201 	bic.w	r2, r2, #1
 80069b8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2220      	movs	r2, #32
 80069be:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2220      	movs	r2, #32
 80069c4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2220      	movs	r2, #32
 80069ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e00f      	b.n	80069fa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	69da      	ldr	r2, [r3, #28]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	4013      	ands	r3, r2
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	bf0c      	ite	eq
 80069ea:	2301      	moveq	r3, #1
 80069ec:	2300      	movne	r3, #0
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	461a      	mov	r2, r3
 80069f2:	79fb      	ldrb	r3, [r7, #7]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d091      	beq.n	800691c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
	...

08006a04 <__libc_init_array>:
 8006a04:	b570      	push	{r4, r5, r6, lr}
 8006a06:	4d0d      	ldr	r5, [pc, #52]	; (8006a3c <__libc_init_array+0x38>)
 8006a08:	4c0d      	ldr	r4, [pc, #52]	; (8006a40 <__libc_init_array+0x3c>)
 8006a0a:	1b64      	subs	r4, r4, r5
 8006a0c:	10a4      	asrs	r4, r4, #2
 8006a0e:	2600      	movs	r6, #0
 8006a10:	42a6      	cmp	r6, r4
 8006a12:	d109      	bne.n	8006a28 <__libc_init_array+0x24>
 8006a14:	4d0b      	ldr	r5, [pc, #44]	; (8006a44 <__libc_init_array+0x40>)
 8006a16:	4c0c      	ldr	r4, [pc, #48]	; (8006a48 <__libc_init_array+0x44>)
 8006a18:	f000 f864 	bl	8006ae4 <_init>
 8006a1c:	1b64      	subs	r4, r4, r5
 8006a1e:	10a4      	asrs	r4, r4, #2
 8006a20:	2600      	movs	r6, #0
 8006a22:	42a6      	cmp	r6, r4
 8006a24:	d105      	bne.n	8006a32 <__libc_init_array+0x2e>
 8006a26:	bd70      	pop	{r4, r5, r6, pc}
 8006a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a2c:	4798      	blx	r3
 8006a2e:	3601      	adds	r6, #1
 8006a30:	e7ee      	b.n	8006a10 <__libc_init_array+0xc>
 8006a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a36:	4798      	blx	r3
 8006a38:	3601      	adds	r6, #1
 8006a3a:	e7f2      	b.n	8006a22 <__libc_init_array+0x1e>
 8006a3c:	0800700c 	.word	0x0800700c
 8006a40:	0800700c 	.word	0x0800700c
 8006a44:	0800700c 	.word	0x0800700c
 8006a48:	08007010 	.word	0x08007010

08006a4c <memset>:
 8006a4c:	4402      	add	r2, r0
 8006a4e:	4603      	mov	r3, r0
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d100      	bne.n	8006a56 <memset+0xa>
 8006a54:	4770      	bx	lr
 8006a56:	f803 1b01 	strb.w	r1, [r3], #1
 8006a5a:	e7f9      	b.n	8006a50 <memset+0x4>

08006a5c <__utoa>:
 8006a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a5e:	4c1f      	ldr	r4, [pc, #124]	; (8006adc <__utoa+0x80>)
 8006a60:	b08b      	sub	sp, #44	; 0x2c
 8006a62:	4605      	mov	r5, r0
 8006a64:	460b      	mov	r3, r1
 8006a66:	466e      	mov	r6, sp
 8006a68:	f104 0c20 	add.w	ip, r4, #32
 8006a6c:	6820      	ldr	r0, [r4, #0]
 8006a6e:	6861      	ldr	r1, [r4, #4]
 8006a70:	4637      	mov	r7, r6
 8006a72:	c703      	stmia	r7!, {r0, r1}
 8006a74:	3408      	adds	r4, #8
 8006a76:	4564      	cmp	r4, ip
 8006a78:	463e      	mov	r6, r7
 8006a7a:	d1f7      	bne.n	8006a6c <__utoa+0x10>
 8006a7c:	7921      	ldrb	r1, [r4, #4]
 8006a7e:	7139      	strb	r1, [r7, #4]
 8006a80:	1e91      	subs	r1, r2, #2
 8006a82:	6820      	ldr	r0, [r4, #0]
 8006a84:	6038      	str	r0, [r7, #0]
 8006a86:	2922      	cmp	r1, #34	; 0x22
 8006a88:	f04f 0100 	mov.w	r1, #0
 8006a8c:	d904      	bls.n	8006a98 <__utoa+0x3c>
 8006a8e:	7019      	strb	r1, [r3, #0]
 8006a90:	460b      	mov	r3, r1
 8006a92:	4618      	mov	r0, r3
 8006a94:	b00b      	add	sp, #44	; 0x2c
 8006a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a98:	1e58      	subs	r0, r3, #1
 8006a9a:	4684      	mov	ip, r0
 8006a9c:	fbb5 f7f2 	udiv	r7, r5, r2
 8006aa0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8006aa4:	fb02 5617 	mls	r6, r2, r7, r5
 8006aa8:	4476      	add	r6, lr
 8006aaa:	460c      	mov	r4, r1
 8006aac:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006ab0:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006ab4:	462e      	mov	r6, r5
 8006ab6:	42b2      	cmp	r2, r6
 8006ab8:	f101 0101 	add.w	r1, r1, #1
 8006abc:	463d      	mov	r5, r7
 8006abe:	d9ed      	bls.n	8006a9c <__utoa+0x40>
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	545a      	strb	r2, [r3, r1]
 8006ac4:	1919      	adds	r1, r3, r4
 8006ac6:	1aa5      	subs	r5, r4, r2
 8006ac8:	42aa      	cmp	r2, r5
 8006aca:	dae2      	bge.n	8006a92 <__utoa+0x36>
 8006acc:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006ad0:	780e      	ldrb	r6, [r1, #0]
 8006ad2:	7006      	strb	r6, [r0, #0]
 8006ad4:	3201      	adds	r2, #1
 8006ad6:	f801 5901 	strb.w	r5, [r1], #-1
 8006ada:	e7f4      	b.n	8006ac6 <__utoa+0x6a>
 8006adc:	08006fdc 	.word	0x08006fdc

08006ae0 <utoa>:
 8006ae0:	f7ff bfbc 	b.w	8006a5c <__utoa>

08006ae4 <_init>:
 8006ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ae6:	bf00      	nop
 8006ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aea:	bc08      	pop	{r3}
 8006aec:	469e      	mov	lr, r3
 8006aee:	4770      	bx	lr

08006af0 <_fini>:
 8006af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af2:	bf00      	nop
 8006af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006af6:	bc08      	pop	{r3}
 8006af8:	469e      	mov	lr, r3
 8006afa:	4770      	bx	lr
