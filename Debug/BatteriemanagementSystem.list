
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dcc  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08007fc4  08007fc4  00017fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083f8  080083f8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080083f8  080083f8  000183f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008400  08008400  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008400  08008400  00018400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008404  08008404  00018404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08008408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000588  2000005c  08008464  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005e4  08008464  000205e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a342  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000437c  00000000  00000000  0003a40f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016d8  00000000  00000000  0003e790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000118a  00000000  00000000  0003fe68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000066f2  00000000  00000000  00040ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021b03  00000000  00000000  000476e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00110359  00000000  00000000  000691e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005fe8  00000000  00000000  00179540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0017f528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000005c 	.word	0x2000005c
 8000214:	00000000 	.word	0x00000000
 8000218:	08007fac 	.word	0x08007fac

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000060 	.word	0x20000060
 8000234:	08007fac 	.word	0x08007fac

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b970 	b.w	8000540 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9e08      	ldr	r6, [sp, #32]
 800027e:	460d      	mov	r5, r1
 8000280:	4604      	mov	r4, r0
 8000282:	460f      	mov	r7, r1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d14a      	bne.n	800031e <__udivmoddi4+0xa6>
 8000288:	428a      	cmp	r2, r1
 800028a:	4694      	mov	ip, r2
 800028c:	d965      	bls.n	800035a <__udivmoddi4+0xe2>
 800028e:	fab2 f382 	clz	r3, r2
 8000292:	b143      	cbz	r3, 80002a6 <__udivmoddi4+0x2e>
 8000294:	fa02 fc03 	lsl.w	ip, r2, r3
 8000298:	f1c3 0220 	rsb	r2, r3, #32
 800029c:	409f      	lsls	r7, r3
 800029e:	fa20 f202 	lsr.w	r2, r0, r2
 80002a2:	4317      	orrs	r7, r2
 80002a4:	409c      	lsls	r4, r3
 80002a6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002aa:	fa1f f58c 	uxth.w	r5, ip
 80002ae:	fbb7 f1fe 	udiv	r1, r7, lr
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002bc:	fb01 f005 	mul.w	r0, r1, r5
 80002c0:	4290      	cmp	r0, r2
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x62>
 80002c4:	eb1c 0202 	adds.w	r2, ip, r2
 80002c8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002cc:	f080 811c 	bcs.w	8000508 <__udivmoddi4+0x290>
 80002d0:	4290      	cmp	r0, r2
 80002d2:	f240 8119 	bls.w	8000508 <__udivmoddi4+0x290>
 80002d6:	3902      	subs	r1, #2
 80002d8:	4462      	add	r2, ip
 80002da:	1a12      	subs	r2, r2, r0
 80002dc:	b2a4      	uxth	r4, r4
 80002de:	fbb2 f0fe 	udiv	r0, r2, lr
 80002e2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ea:	fb00 f505 	mul.w	r5, r0, r5
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x90>
 80002f2:	eb1c 0404 	adds.w	r4, ip, r4
 80002f6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002fa:	f080 8107 	bcs.w	800050c <__udivmoddi4+0x294>
 80002fe:	42a5      	cmp	r5, r4
 8000300:	f240 8104 	bls.w	800050c <__udivmoddi4+0x294>
 8000304:	4464      	add	r4, ip
 8000306:	3802      	subs	r0, #2
 8000308:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800030c:	1b64      	subs	r4, r4, r5
 800030e:	2100      	movs	r1, #0
 8000310:	b11e      	cbz	r6, 800031a <__udivmoddi4+0xa2>
 8000312:	40dc      	lsrs	r4, r3
 8000314:	2300      	movs	r3, #0
 8000316:	e9c6 4300 	strd	r4, r3, [r6]
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0xbc>
 8000322:	2e00      	cmp	r6, #0
 8000324:	f000 80ed 	beq.w	8000502 <__udivmoddi4+0x28a>
 8000328:	2100      	movs	r1, #0
 800032a:	e9c6 0500 	strd	r0, r5, [r6]
 800032e:	4608      	mov	r0, r1
 8000330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000334:	fab3 f183 	clz	r1, r3
 8000338:	2900      	cmp	r1, #0
 800033a:	d149      	bne.n	80003d0 <__udivmoddi4+0x158>
 800033c:	42ab      	cmp	r3, r5
 800033e:	d302      	bcc.n	8000346 <__udivmoddi4+0xce>
 8000340:	4282      	cmp	r2, r0
 8000342:	f200 80f8 	bhi.w	8000536 <__udivmoddi4+0x2be>
 8000346:	1a84      	subs	r4, r0, r2
 8000348:	eb65 0203 	sbc.w	r2, r5, r3
 800034c:	2001      	movs	r0, #1
 800034e:	4617      	mov	r7, r2
 8000350:	2e00      	cmp	r6, #0
 8000352:	d0e2      	beq.n	800031a <__udivmoddi4+0xa2>
 8000354:	e9c6 4700 	strd	r4, r7, [r6]
 8000358:	e7df      	b.n	800031a <__udivmoddi4+0xa2>
 800035a:	b902      	cbnz	r2, 800035e <__udivmoddi4+0xe6>
 800035c:	deff      	udf	#255	; 0xff
 800035e:	fab2 f382 	clz	r3, r2
 8000362:	2b00      	cmp	r3, #0
 8000364:	f040 8090 	bne.w	8000488 <__udivmoddi4+0x210>
 8000368:	1a8a      	subs	r2, r1, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2101      	movs	r1, #1
 8000374:	fbb2 f5f7 	udiv	r5, r2, r7
 8000378:	fb07 2015 	mls	r0, r7, r5, r2
 800037c:	0c22      	lsrs	r2, r4, #16
 800037e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000382:	fb0e f005 	mul.w	r0, lr, r5
 8000386:	4290      	cmp	r0, r2
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x124>
 800038a:	eb1c 0202 	adds.w	r2, ip, r2
 800038e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x122>
 8000394:	4290      	cmp	r0, r2
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2b8>
 800039a:	4645      	mov	r5, r8
 800039c:	1a12      	subs	r2, r2, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003a4:	fb07 2210 	mls	r2, r7, r0, r2
 80003a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x14e>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x14c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2c2>
 80003c4:	4610      	mov	r0, r2
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ce:	e79f      	b.n	8000310 <__udivmoddi4+0x98>
 80003d0:	f1c1 0720 	rsb	r7, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa05 f401 	lsl.w	r4, r5, r1
 80003e2:	fa20 f307 	lsr.w	r3, r0, r7
 80003e6:	40fd      	lsrs	r5, r7
 80003e8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ec:	4323      	orrs	r3, r4
 80003ee:	fbb5 f8f9 	udiv	r8, r5, r9
 80003f2:	fa1f fe8c 	uxth.w	lr, ip
 80003f6:	fb09 5518 	mls	r5, r9, r8, r5
 80003fa:	0c1c      	lsrs	r4, r3, #16
 80003fc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000400:	fb08 f50e 	mul.w	r5, r8, lr
 8000404:	42a5      	cmp	r5, r4
 8000406:	fa02 f201 	lsl.w	r2, r2, r1
 800040a:	fa00 f001 	lsl.w	r0, r0, r1
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b0>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2b4>
 800041c:	42a5      	cmp	r5, r4
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2b4>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4464      	add	r4, ip
 8000428:	1b64      	subs	r4, r4, r5
 800042a:	b29d      	uxth	r5, r3
 800042c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000430:	fb09 4413 	mls	r4, r9, r3, r4
 8000434:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000438:	fb03 fe0e 	mul.w	lr, r3, lr
 800043c:	45a6      	cmp	lr, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1da>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f103 35ff 	add.w	r5, r3, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2ac>
 800044a:	45a6      	cmp	lr, r4
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2ac>
 800044e:	3b02      	subs	r3, #2
 8000450:	4464      	add	r4, ip
 8000452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000456:	fba3 9502 	umull	r9, r5, r3, r2
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	42ac      	cmp	r4, r5
 8000460:	46c8      	mov	r8, r9
 8000462:	46ae      	mov	lr, r5
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x29c>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x298>
 8000468:	b156      	cbz	r6, 8000480 <__udivmoddi4+0x208>
 800046a:	ebb0 0208 	subs.w	r2, r0, r8
 800046e:	eb64 040e 	sbc.w	r4, r4, lr
 8000472:	fa04 f707 	lsl.w	r7, r4, r7
 8000476:	40ca      	lsrs	r2, r1
 8000478:	40cc      	lsrs	r4, r1
 800047a:	4317      	orrs	r7, r2
 800047c:	e9c6 7400 	strd	r7, r4, [r6]
 8000480:	4618      	mov	r0, r3
 8000482:	2100      	movs	r1, #0
 8000484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000488:	f1c3 0120 	rsb	r1, r3, #32
 800048c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000490:	fa20 f201 	lsr.w	r2, r0, r1
 8000494:	fa25 f101 	lsr.w	r1, r5, r1
 8000498:	409d      	lsls	r5, r3
 800049a:	432a      	orrs	r2, r5
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a8:	fb07 1510 	mls	r5, r7, r0, r1
 80004ac:	0c11      	lsrs	r1, r2, #16
 80004ae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004b2:	fb00 f50e 	mul.w	r5, r0, lr
 80004b6:	428d      	cmp	r5, r1
 80004b8:	fa04 f403 	lsl.w	r4, r4, r3
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x258>
 80004be:	eb1c 0101 	adds.w	r1, ip, r1
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1b49      	subs	r1, r1, r5
 80004d2:	b292      	uxth	r2, r2
 80004d4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d8:	fb07 1115 	mls	r1, r7, r5, r1
 80004dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e0:	fb05 f10e 	mul.w	r1, r5, lr
 80004e4:	4291      	cmp	r1, r2
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x282>
 80004e8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ec:	f105 38ff 	add.w	r8, r5, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 80004f2:	4291      	cmp	r1, r2
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2a8>
 80004f6:	3d02      	subs	r5, #2
 80004f8:	4462      	add	r2, ip
 80004fa:	1a52      	subs	r2, r2, r1
 80004fc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0xfc>
 8000502:	4631      	mov	r1, r6
 8000504:	4630      	mov	r0, r6
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xa2>
 8000508:	4639      	mov	r1, r7
 800050a:	e6e6      	b.n	80002da <__udivmoddi4+0x62>
 800050c:	4610      	mov	r0, r2
 800050e:	e6fb      	b.n	8000308 <__udivmoddi4+0x90>
 8000510:	4548      	cmp	r0, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f0>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb65 0e0c 	sbc.w	lr, r5, ip
 800051c:	3b01      	subs	r3, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f0>
 8000520:	4645      	mov	r5, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x282>
 8000524:	462b      	mov	r3, r5
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1da>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x258>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b0>
 8000530:	3d02      	subs	r5, #2
 8000532:	4462      	add	r2, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x124>
 8000536:	4608      	mov	r0, r1
 8000538:	e70a      	b.n	8000350 <__udivmoddi4+0xd8>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x14e>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
	// Sende String mit Laenge "Size", "Size" muss bekannt sein
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	b29a      	uxth	r2, r3
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	6879      	ldr	r1, [r7, #4]
 8000558:	4803      	ldr	r0, [pc, #12]	; (8000568 <uartTransmit+0x24>)
 800055a:	f006 ff3f 	bl	80073dc <HAL_UART_Transmit>
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000410 	.word	0x20000410

0800056c <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
	char str[11];

	// Zahl umrechnen
	utoa(number, str, base);												// Zahl umrechnen anhand der Basis "base"
 8000576:	683a      	ldr	r2, [r7, #0]
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	4619      	mov	r1, r3
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f007 fcc0 	bl	8007f04 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);			// Sende Zahlen
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff fe55 	bl	8000238 <strlen>
 800058e:	4603      	mov	r3, r0
 8000590:	b29a      	uxth	r2, r3
 8000592:	f107 010c 	add.w	r1, r7, #12
 8000596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059a:	4803      	ldr	r0, [pc, #12]	; (80005a8 <uartTransmitNumber+0x3c>)
 800059c:	f006 ff1e 	bl	80073dc <HAL_UART_Transmit>
}
 80005a0:	bf00      	nop
 80005a2:	3718      	adds	r7, #24
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000410 	.word	0x20000410

080005ac <CANinit>:
//----------------------------------------------------------------------

// Initialisiere und starte CAN-Bus
//----------------------------------------------------------------------
void CANinit(RXQUEUE_TABLE rxSize, TXQUEUE_TABLE txSize)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	460a      	mov	r2, r1
 80005b6:	80fb      	strh	r3, [r7, #6]
 80005b8:	4613      	mov	r3, r2
 80005ba:	80bb      	strh	r3, [r7, #4]
	// Beende wenn CAN-Bus aktive ist
	if (canIsActive)
 80005bc:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <CANinit+0x3c>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d10d      	bne.n	80005e0 <CANinit+0x34>
		return;

	// Status CAN aktiv
	canIsActive = true;
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <CANinit+0x3c>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	701a      	strb	r2, [r3, #0]

	// Lege Groesse des Ringbuffers fest
	sizeRxBuffer = rxSize;
 80005ca:	4a08      	ldr	r2, [pc, #32]	; (80005ec <CANinit+0x40>)
 80005cc:	88fb      	ldrh	r3, [r7, #6]
 80005ce:	8013      	strh	r3, [r2, #0]
	sizeTxBuffer = txSize;
 80005d0:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <CANinit+0x44>)
 80005d2:	88bb      	ldrh	r3, [r7, #4]
 80005d4:	8013      	strh	r3, [r2, #0]

	// Initialisiere Ringbusbuffer
	initializeBuffer();
 80005d6:	f000 f923 	bl	8000820 <initializeBuffer>

	// Konfiguriere CAN
	MX_CAN1_Init();
 80005da:	f001 f88b 	bl	80016f4 <MX_CAN1_Init>
 80005de:	e000      	b.n	80005e2 <CANinit+0x36>
		return;
 80005e0:	bf00      	nop
}
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	2000009c 	.word	0x2000009c
 80005ec:	20000090 	.word	0x20000090
 80005f0:	20000092 	.word	0x20000092

080005f4 <CANwrite>:
//----------------------------------------------------------------------

// Schreibe Nachricht auf CAN-Bus oder in den Ringbuffer
//----------------------------------------------------------------------
bool CANwrite(CAN_message_t *CAN_tx_msg, bool sendMB)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	460b      	mov	r3, r1
 80005fe:	70fb      	strb	r3, [r7, #3]
	bool ret = true;
 8000600:	2301      	movs	r3, #1
 8000602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t TxMailbox;
	CAN_TxHeaderTypeDef TxHeader;

	// Schalte Sendeinterrupt aus
	HAL_CAN_DeactivateNotification(&hcan3, CAN_IT_TX_MAILBOX_EMPTY);
 8000606:	2101      	movs	r1, #1
 8000608:	4821      	ldr	r0, [pc, #132]	; (8000690 <CANwrite+0x9c>)
 800060a:	f003 facf 	bl	8003bac <HAL_CAN_DeactivateNotification>

	// CAN-Nachricht hat extended ID
	if (CAN_tx_msg->flags.extended == 1)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	79db      	ldrb	r3, [r3, #7]
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b00      	cmp	r3, #0
 800061a:	d005      	beq.n	8000628 <CANwrite+0x34>
	{
		TxHeader.ExtId = CAN_tx_msg->id;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	60fb      	str	r3, [r7, #12]
		TxHeader.IDE = CAN_ID_EXT;
 8000622:	2304      	movs	r3, #4
 8000624:	613b      	str	r3, [r7, #16]
 8000626:	e004      	b.n	8000632 <CANwrite+0x3e>
	}
	// CAN-Nachricht hat standart ID
	else
	{
		TxHeader.StdId = CAN_tx_msg->id;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	60bb      	str	r3, [r7, #8]
		TxHeader.IDE = CAN_ID_STD;
 800062e:	2300      	movs	r3, #0
 8000630:	613b      	str	r3, [r7, #16]
	}

	TxHeader.RTR = CAN_RTR_DATA;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
	TxHeader.DLC = CAN_tx_msg->len;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	7a1b      	ldrb	r3, [r3, #8]
 800063a:	61bb      	str	r3, [r7, #24]
	TxHeader.TransmitGlobalTime = DISABLE;
 800063c:	2300      	movs	r3, #0
 800063e:	773b      	strb	r3, [r7, #28]

	// Nachricht auf Bus schreiben
	if (HAL_CAN_AddTxMessage(&hcan3, &TxHeader, CAN_tx_msg->buf, &TxMailbox) != 0)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f103 0209 	add.w	r2, r3, #9
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	f107 0108 	add.w	r1, r7, #8
 800064e:	4810      	ldr	r0, [pc, #64]	; (8000690 <CANwrite+0x9c>)
 8000650:	f003 f8a4 	bl	800379c <HAL_CAN_AddTxMessage>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d010      	beq.n	800067c <CANwrite+0x88>
	{
		// Wenn Nachricht nicht gesendet werden kann in Ring schreiben
		if (sendMB != true)
 800065a:	78fb      	ldrb	r3, [r7, #3]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d00a      	beq.n	8000676 <CANwrite+0x82>
		{
			// Wenn Ring keinen Platz mehr hat
			if (addToRingBuffer(&txRing, (void *)CAN_tx_msg) == false)
 8000660:	6879      	ldr	r1, [r7, #4]
 8000662:	480c      	ldr	r0, [pc, #48]	; (8000694 <CANwrite+0xa0>)
 8000664:	f000 f93f 	bl	80008e6 <addToRingBuffer>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d106      	bne.n	800067c <CANwrite+0x88>
			{
				ret = false;												// Kein Platz mehr im Ringbuffer
 800066e:	2300      	movs	r3, #0
 8000670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000674:	e002      	b.n	800067c <CANwrite+0x88>
			}
		}
		// Wenn Nachricht nicht in den Ring geschrieben werden soll
		else
		{
			ret = false;
 8000676:	2300      	movs	r3, #0
 8000678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
	}

	// Schalte Sendeinterrupt ein
	HAL_CAN_ActivateNotification(&hcan3, CAN_IT_TX_MAILBOX_EMPTY);
 800067c:	2101      	movs	r1, #1
 800067e:	4804      	ldr	r0, [pc, #16]	; (8000690 <CANwrite+0x9c>)
 8000680:	f003 fa6e 	bl	8003b60 <HAL_CAN_ActivateNotification>
	return ret;
 8000684:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000688:	4618      	mov	r0, r3
 800068a:	3728      	adds	r7, #40	; 0x28
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000218 	.word	0x20000218
 8000694:	20000084 	.word	0x20000084

08000698 <CAN_available>:
//----------------------------------------------------------------------

// Abfrage, ob CAN-Nachricht verfuegbar ist
//----------------------------------------------------------------------
uint8_t CAN_available(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
	if (rxRing.head >= rxRing.tail)
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <CAN_available+0x54>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <CAN_available+0x54>)
 80006a4:	885b      	ldrh	r3, [r3, #2]
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d30a      	bcc.n	80006c2 <CAN_available+0x2a>
		return rxRing.head - rxRing.tail;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <CAN_available+0x54>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <CAN_available+0x54>)
 80006b6:	885b      	ldrh	r3, [r3, #2]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	e00e      	b.n	80006e0 <CAN_available+0x48>
	else
		return rxRing.size - (rxRing.tail - rxRing.head);
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <CAN_available+0x54>)
 80006c4:	889b      	ldrh	r3, [r3, #4]
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <CAN_available+0x54>)
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	b2d9      	uxtb	r1, r3
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <CAN_available+0x54>)
 80006d2:	885b      	ldrh	r3, [r3, #2]
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	1acb      	subs	r3, r1, r3
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	4413      	add	r3, r2
 80006de:	b2db      	uxtb	r3, r3
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	20000078 	.word	0x20000078

080006f0 <CANread>:
//----------------------------------------------------------------------

// Nachricht von Ringbuffer einlesen
//----------------------------------------------------------------------
bool CANread(CAN_message_t *CAN_rx_msg)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	bool ret;

	// Schalte Empfangsinterrupt aus
	HAL_CAN_DeactivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING);
 80006f8:	2102      	movs	r1, #2
 80006fa:	4809      	ldr	r0, [pc, #36]	; (8000720 <CANread+0x30>)
 80006fc:	f003 fa56 	bl	8003bac <HAL_CAN_DeactivateNotification>

	// Lese Nachricht
	ret = removeFromRingBuffer(&rxRing, CAN_rx_msg);
 8000700:	6879      	ldr	r1, [r7, #4]
 8000702:	4808      	ldr	r0, [pc, #32]	; (8000724 <CANread+0x34>)
 8000704:	f000 f920 	bl	8000948 <removeFromRingBuffer>
 8000708:	4603      	mov	r3, r0
 800070a:	73fb      	strb	r3, [r7, #15]

	// Schalte Empfangsinterrupt ein
	HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING);
 800070c:	2102      	movs	r1, #2
 800070e:	4804      	ldr	r0, [pc, #16]	; (8000720 <CANread+0x30>)
 8000710:	f003 fa26 	bl	8003b60 <HAL_CAN_ActivateNotification>

	return ret;
 8000714:	7bfb      	ldrb	r3, [r7, #15]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000218 	.word	0x20000218
 8000724:	20000078 	.word	0x20000078

08000728 <CANwork>:
//----------------------------------------------------------------------

//
//----------------------------------------------------------------------
void CANwork(void)
{
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < ANZAHL_OUTPUT_PAKETE; i++)
 800072e:	2300      	movs	r3, #0
 8000730:	71fb      	strb	r3, [r7, #7]
 8000732:	e034      	b.n	800079e <CANwork+0x76>
	{
		if (CAN_Output_PaketListe[i].sende_time < (millis() - CAN_Output_PaketListe[i].sendeintervall))
 8000734:	79fa      	ldrb	r2, [r7, #7]
 8000736:	491e      	ldr	r1, [pc, #120]	; (80007b0 <CANwork+0x88>)
 8000738:	4613      	mov	r3, r2
 800073a:	00db      	lsls	r3, r3, #3
 800073c:	1a9b      	subs	r3, r3, r2
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	440b      	add	r3, r1
 8000742:	3318      	adds	r3, #24
 8000744:	681c      	ldr	r4, [r3, #0]
 8000746:	f000 fdf5 	bl	8001334 <millis>
 800074a:	4601      	mov	r1, r0
 800074c:	79fa      	ldrb	r2, [r7, #7]
 800074e:	4818      	ldr	r0, [pc, #96]	; (80007b0 <CANwork+0x88>)
 8000750:	4613      	mov	r3, r2
 8000752:	00db      	lsls	r3, r3, #3
 8000754:	1a9b      	subs	r3, r3, r2
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4403      	add	r3, r0
 800075a:	3314      	adds	r3, #20
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	1acb      	subs	r3, r1, r3
 8000760:	429c      	cmp	r4, r3
 8000762:	d219      	bcs.n	8000798 <CANwork+0x70>
		{
			if (CANwrite(&CAN_Output_PaketListe[i].msg, false) != 1)
 8000764:	79fa      	ldrb	r2, [r7, #7]
 8000766:	4613      	mov	r3, r2
 8000768:	00db      	lsls	r3, r3, #3
 800076a:	1a9b      	subs	r3, r3, r2
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	4a10      	ldr	r2, [pc, #64]	; (80007b0 <CANwork+0x88>)
 8000770:	4413      	add	r3, r2
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff3d 	bl	80005f4 <CANwrite>
 800077a:	4603      	mov	r3, r0
 800077c:	2b01      	cmp	r3, #1
 800077e:	d10b      	bne.n	8000798 <CANwork+0x70>
			{

			}
			else
			{
				CAN_Output_PaketListe[i].sende_time = millis();
 8000780:	79fc      	ldrb	r4, [r7, #7]
 8000782:	f000 fdd7 	bl	8001334 <millis>
 8000786:	4602      	mov	r2, r0
 8000788:	4909      	ldr	r1, [pc, #36]	; (80007b0 <CANwork+0x88>)
 800078a:	4623      	mov	r3, r4
 800078c:	00db      	lsls	r3, r3, #3
 800078e:	1b1b      	subs	r3, r3, r4
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	440b      	add	r3, r1
 8000794:	3318      	adds	r3, #24
 8000796:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < ANZAHL_OUTPUT_PAKETE; i++)
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	3301      	adds	r3, #1
 800079c:	71fb      	strb	r3, [r7, #7]
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b06      	cmp	r3, #6
 80007a2:	d9c7      	bls.n	8000734 <CANwork+0xc>
			}
		}
	}
}
 80007a4:	bf00      	nop
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd90      	pop	{r4, r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000a0 	.word	0x200000a0

080007b4 <CAN_Nachricht>:
//----------------------------------------------------------------------

// CAN Nachricht definieren, Datentyp anpassen
//----------------------------------------------------------------------
CAN_PaketTypeDef CAN_Nachricht(uint16_t id, uint8_t length, uint16_t sendeintervall, uint32_t sende_time)
{
 80007b4:	b4b0      	push	{r4, r5, r7}
 80007b6:	b08d      	sub	sp, #52	; 0x34
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	4608      	mov	r0, r1
 80007be:	4611      	mov	r1, r2
 80007c0:	461a      	mov	r2, r3
 80007c2:	4603      	mov	r3, r0
 80007c4:	817b      	strh	r3, [r7, #10]
 80007c6:	460b      	mov	r3, r1
 80007c8:	727b      	strb	r3, [r7, #9]
 80007ca:	4613      	mov	r3, r2
 80007cc:	80fb      	strh	r3, [r7, #6]
	CAN_PaketTypeDef TxHeader;

	TxHeader.msg.id = id;
 80007ce:	897b      	ldrh	r3, [r7, #10]
 80007d0:	617b      	str	r3, [r7, #20]
	TxHeader.msg.len = length;
 80007d2:	7a7b      	ldrb	r3, [r7, #9]
 80007d4:	773b      	strb	r3, [r7, #28]
	TxHeader.sendeintervall = sendeintervall - 1;
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	3b01      	subs	r3, #1
 80007da:	b29b      	uxth	r3, r3
 80007dc:	853b      	strh	r3, [r7, #40]	; 0x28
	TxHeader.sende_time = sende_time;
 80007de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c

	return TxHeader;
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	461d      	mov	r5, r3
 80007e6:	f107 0414 	add.w	r4, r7, #20
 80007ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007ee:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80007f2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80007f6:	68f8      	ldr	r0, [r7, #12]
 80007f8:	3734      	adds	r7, #52	; 0x34
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bcb0      	pop	{r4, r5, r7}
 80007fe:	4770      	bx	lr

08000800 <isInitialized>:
//----------------------------------------------------------------------

// Abfrage, ob Ringbuffer initialisiert ist
//----------------------------------------------------------------------
bool isInitialized(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
	return rxBuffer != 0;
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <isInitialized+0x1c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	bf14      	ite	ne
 800080c:	2301      	movne	r3, #1
 800080e:	2300      	moveq	r3, #0
 8000810:	b2db      	uxtb	r3, r3
}
 8000812:	4618      	mov	r0, r3
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	20000094 	.word	0x20000094

08000820 <initializeBuffer>:
//----------------------------------------------------------------------

// Initialisiere Ringbuffer
//----------------------------------------------------------------------
void initializeBuffer(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	if (isInitialized())
 8000824:	f7ff ffec 	bl	8000800 <isInitialized>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d134      	bne.n	8000898 <initializeBuffer+0x78>
		return;

	// Konfiguriere den Sende Ringbuffer
	if (txBuffer == 0)
 800082e:	4b1b      	ldr	r3, [pc, #108]	; (800089c <initializeBuffer+0x7c>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d10d      	bne.n	8000852 <initializeBuffer+0x32>
	{
		txBuffer = (CAN_message_t *)malloc(sizeTxBuffer * sizeof(CAN_message_t));
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <initializeBuffer+0x80>)
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	461a      	mov	r2, r3
 800083c:	4613      	mov	r3, r2
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	4413      	add	r3, r2
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	4618      	mov	r0, r3
 8000846:	f007 fa67 	bl	8007d18 <malloc>
 800084a:	4603      	mov	r3, r0
 800084c:	461a      	mov	r2, r3
 800084e:	4b13      	ldr	r3, [pc, #76]	; (800089c <initializeBuffer+0x7c>)
 8000850:	601a      	str	r2, [r3, #0]
	}

	initRingBuffer(&txRing, txBuffer, sizeTxBuffer);
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <initializeBuffer+0x7c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <initializeBuffer+0x80>)
 8000858:	8812      	ldrh	r2, [r2, #0]
 800085a:	4619      	mov	r1, r3
 800085c:	4811      	ldr	r0, [pc, #68]	; (80008a4 <initializeBuffer+0x84>)
 800085e:	f000 f829 	bl	80008b4 <initRingBuffer>

	// Konfiguriere den Empfang Ringbuffer
	if (rxBuffer == 0)
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <initializeBuffer+0x88>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d10d      	bne.n	8000886 <initializeBuffer+0x66>
	{
		rxBuffer = (CAN_message_t *)malloc(sizeRxBuffer * sizeof(CAN_message_t));
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <initializeBuffer+0x8c>)
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	461a      	mov	r2, r3
 8000870:	4613      	mov	r3, r2
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	4413      	add	r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	4618      	mov	r0, r3
 800087a:	f007 fa4d 	bl	8007d18 <malloc>
 800087e:	4603      	mov	r3, r0
 8000880:	461a      	mov	r2, r3
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <initializeBuffer+0x88>)
 8000884:	601a      	str	r2, [r3, #0]
	}

	initRingBuffer(&rxRing, rxBuffer, sizeRxBuffer);
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <initializeBuffer+0x88>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a08      	ldr	r2, [pc, #32]	; (80008ac <initializeBuffer+0x8c>)
 800088c:	8812      	ldrh	r2, [r2, #0]
 800088e:	4619      	mov	r1, r3
 8000890:	4807      	ldr	r0, [pc, #28]	; (80008b0 <initializeBuffer+0x90>)
 8000892:	f000 f80f 	bl	80008b4 <initRingBuffer>
 8000896:	e000      	b.n	800089a <initializeBuffer+0x7a>
		return;
 8000898:	bf00      	nop
}
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000098 	.word	0x20000098
 80008a0:	20000092 	.word	0x20000092
 80008a4:	20000084 	.word	0x20000084
 80008a8:	20000094 	.word	0x20000094
 80008ac:	20000090 	.word	0x20000090
 80008b0:	20000078 	.word	0x20000078

080008b4 <initRingBuffer>:
//----------------------------------------------------------------------

// Initialisiere Ringbuffer
//----------------------------------------------------------------------
void initRingBuffer(RingbufferTypeDef *ring, volatile CAN_message_t *buffer, uint32_t size)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
	ring->buffer = buffer;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	68ba      	ldr	r2, [r7, #8]
 80008c4:	609a      	str	r2, [r3, #8]
	ring->size = size;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	809a      	strh	r2, [r3, #4]
	ring->head = 0;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	2200      	movs	r2, #0
 80008d2:	801a      	strh	r2, [r3, #0]
	ring->tail = 0;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2200      	movs	r2, #0
 80008d8:	805a      	strh	r2, [r3, #2]
}
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <addToRingBuffer>:
//----------------------------------------------------------------------

// Nachricht zum Ring hinzufuegen
//----------------------------------------------------------------------
bool addToRingBuffer(RingbufferTypeDef *ring, CAN_message_t *msg)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b084      	sub	sp, #16
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
 80008ee:	6039      	str	r1, [r7, #0]
	uint16_t nextEntry;
	nextEntry = (ring->head + 1) % ring->size;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	3301      	adds	r3, #1
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	8892      	ldrh	r2, [r2, #4]
 80008fc:	fb93 f1f2 	sdiv	r1, r3, r2
 8000900:	fb01 f202 	mul.w	r2, r1, r2
 8000904:	1a9b      	subs	r3, r3, r2
 8000906:	81fb      	strh	r3, [r7, #14]

	// Pruefe, ob Ringbuffer gefuellt ist
	if (nextEntry == ring->tail)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	885b      	ldrh	r3, [r3, #2]
 800090c:	b29b      	uxth	r3, r3
 800090e:	89fa      	ldrh	r2, [r7, #14]
 8000910:	429a      	cmp	r2, r3
 8000912:	d101      	bne.n	8000918 <addToRingBuffer+0x32>
		return false;
 8000914:	2300      	movs	r3, #0
 8000916:	e013      	b.n	8000940 <addToRingBuffer+0x5a>

	// Fuege Element zum Ring hinzu
	memcpy((void *)&ring->buffer[ring->head], (void *)msg, sizeof(CAN_message_t));
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	689a      	ldr	r2, [r3, #8]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	881b      	ldrh	r3, [r3, #0]
 8000920:	b29b      	uxth	r3, r3
 8000922:	4619      	mov	r1, r3
 8000924:	460b      	mov	r3, r1
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	440b      	add	r3, r1
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	4413      	add	r3, r2
 800092e:	2214      	movs	r2, #20
 8000930:	6839      	ldr	r1, [r7, #0]
 8000932:	4618      	mov	r0, r3
 8000934:	f007 fb2c 	bl	8007f90 <memcpy>

	// Ringbuffer Kopf hochzaehlen
	ring->head = nextEntry;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	89fa      	ldrh	r2, [r7, #14]
 800093c:	801a      	strh	r2, [r3, #0]

	return true;
 800093e:	2301      	movs	r3, #1
}
 8000940:	4618      	mov	r0, r3
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <removeFromRingBuffer>:
//----------------------------------------------------------------------

// Nachricht von Ring entfernen
//----------------------------------------------------------------------
bool removeFromRingBuffer(RingbufferTypeDef *ring, CAN_message_t *msg)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	6039      	str	r1, [r7, #0]
	// Pruefen, ob Nachrichten im Ring sind
	if (isRingBufferEmpty(ring) == true)
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f000 f828 	bl	80009a8 <isRingBufferEmpty>
 8000958:	4603      	mov	r3, r0
 800095a:	2b01      	cmp	r3, #1
 800095c:	d101      	bne.n	8000962 <removeFromRingBuffer+0x1a>
		return false;
 800095e:	2300      	movs	r3, #0
 8000960:	e01e      	b.n	80009a0 <removeFromRingBuffer+0x58>

	// Kopiere Nachricht
	memcpy((void *)msg, (void *)&ring->buffer[ring->tail], sizeof(CAN_message_t));
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	689a      	ldr	r2, [r3, #8]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	885b      	ldrh	r3, [r3, #2]
 800096a:	b29b      	uxth	r3, r3
 800096c:	4619      	mov	r1, r3
 800096e:	460b      	mov	r3, r1
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	440b      	add	r3, r1
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	4413      	add	r3, r2
 8000978:	2214      	movs	r2, #20
 800097a:	4619      	mov	r1, r3
 800097c:	6838      	ldr	r0, [r7, #0]
 800097e:	f007 fb07 	bl	8007f90 <memcpy>

	// Ringbuffer Schwanz hochzaehlen
	ring->tail = (ring->tail + 1) % ring->size;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	885b      	ldrh	r3, [r3, #2]
 8000986:	b29b      	uxth	r3, r3
 8000988:	3301      	adds	r3, #1
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	8892      	ldrh	r2, [r2, #4]
 800098e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000992:	fb01 f202 	mul.w	r2, r1, r2
 8000996:	1a9b      	subs	r3, r3, r2
 8000998:	b29a      	uxth	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	805a      	strh	r2, [r3, #2]

	return true;
 800099e:	2301      	movs	r3, #1
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <isRingBufferEmpty>:
//----------------------------------------------------------------------

// Abfrage, ob Ringbuffer Nachrichten hat
//----------------------------------------------------------------------
bool isRingBufferEmpty(RingbufferTypeDef *ring)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	if (ring->head == ring->tail)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	885b      	ldrh	r3, [r3, #2]
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	429a      	cmp	r2, r3
 80009be:	d101      	bne.n	80009c4 <isRingBufferEmpty+0x1c>
		return true;
 80009c0:	2301      	movs	r3, #1
 80009c2:	e000      	b.n	80009c6 <isRingBufferEmpty+0x1e>

	return false;
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
	...

080009d4 <HAL_CAN_TxMailbox0CompleteCallback>:
//----------------------------------------------------------------------

// Sendeinterrupt Mailbox 0
//----------------------------------------------------------------------
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *CanHandler)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b088      	sub	sp, #32
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	CAN_message_t txmsg;

	// Wenn CAN1 Nachricht gesendet hat
	if (CanHandler->Instance == CAN3)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d10e      	bne.n	8000a04 <HAL_CAN_TxMailbox0CompleteCallback+0x30>
	{
		if (removeFromRingBuffer(&txRing, &txmsg) == true)
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	4619      	mov	r1, r3
 80009ec:	4808      	ldr	r0, [pc, #32]	; (8000a10 <HAL_CAN_TxMailbox0CompleteCallback+0x3c>)
 80009ee:	f7ff ffab 	bl	8000948 <removeFromRingBuffer>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d105      	bne.n	8000a04 <HAL_CAN_TxMailbox0CompleteCallback+0x30>
		{
			CANwrite(&txmsg, true);
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	2101      	movs	r1, #1
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fdf8 	bl	80005f4 <CANwrite>
		}
	}

	// TODO CAN2 und CAN3 hinzufuegen
}
 8000a04:	bf00      	nop
 8000a06:	3720      	adds	r7, #32
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40003400 	.word	0x40003400
 8000a10:	20000084 	.word	0x20000084

08000a14 <HAL_CAN_TxMailbox1CompleteCallback>:
//----------------------------------------------------------------------

// Sendeinterrupt Mailbox 1
//----------------------------------------------------------------------
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *CanHandler)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	CAN_message_t txmsg;

	// Wenn CAN1 Nachricht gesendet hat
	if (CanHandler->Instance == CAN3)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <HAL_CAN_TxMailbox1CompleteCallback+0x38>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d10e      	bne.n	8000a44 <HAL_CAN_TxMailbox1CompleteCallback+0x30>
	{
		if (removeFromRingBuffer(&txRing, &txmsg) == true)
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4808      	ldr	r0, [pc, #32]	; (8000a50 <HAL_CAN_TxMailbox1CompleteCallback+0x3c>)
 8000a2e:	f7ff ff8b 	bl	8000948 <removeFromRingBuffer>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d105      	bne.n	8000a44 <HAL_CAN_TxMailbox1CompleteCallback+0x30>
		{
			CANwrite(&txmsg, true);
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fdd8 	bl	80005f4 <CANwrite>
		}
	}

	// TODO CAN2 und CAN3 hinzufuegen
}
 8000a44:	bf00      	nop
 8000a46:	3720      	adds	r7, #32
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40003400 	.word	0x40003400
 8000a50:	20000084 	.word	0x20000084

08000a54 <HAL_CAN_TxMailbox2CompleteCallback>:
//----------------------------------------------------------------------

// Sendeinterrupt Mailbox 2
//----------------------------------------------------------------------
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *CanHandler)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	CAN_message_t txmsg;

	// Wenn CAN1 Nachricht gesendet hat
	if (CanHandler->Instance == CAN3)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <HAL_CAN_TxMailbox2CompleteCallback+0x38>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d10e      	bne.n	8000a84 <HAL_CAN_TxMailbox2CompleteCallback+0x30>
	{
		if (removeFromRingBuffer(&txRing, &txmsg) == true)
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4808      	ldr	r0, [pc, #32]	; (8000a90 <HAL_CAN_TxMailbox2CompleteCallback+0x3c>)
 8000a6e:	f7ff ff6b 	bl	8000948 <removeFromRingBuffer>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d105      	bne.n	8000a84 <HAL_CAN_TxMailbox2CompleteCallback+0x30>
		{
			CANwrite(&txmsg, true);
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fdb8 	bl	80005f4 <CANwrite>
		}
	}

	// TODO CAN2 und CAN3 hinzufuegen
}
 8000a84:	bf00      	nop
 8000a86:	3720      	adds	r7, #32
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40003400 	.word	0x40003400
 8000a90:	20000084 	.word	0x20000084

08000a94 <HAL_CAN_RxFifo0MsgPendingCallback>:
//----------------------------------------------------------------------

// Empfanginterrupt FIFO0
//----------------------------------------------------------------------
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandler)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08e      	sub	sp, #56	; 0x38
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	CAN_message_t rxmsg;
	CAN_RxHeaderTypeDef RxHeader;

	// Schreibe Nachricht von CAN-Bus in Ringbuffer
	if (HAL_CAN_GetRxMessage(CanHandler, CAN_RX_FIFO0, &RxHeader, rxmsg.buf) == HAL_OK)
 8000a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa0:	3309      	adds	r3, #9
 8000aa2:	f107 0208 	add.w	r2, r7, #8
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f002 ff47 	bl	800393c <HAL_CAN_GetRxMessage>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d136      	bne.n	8000b22 <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
	{
		if (RxHeader.IDE == CAN_ID_STD)
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d108      	bne.n	8000acc <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
		{
			rxmsg.id = RxHeader.StdId;
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
			rxmsg.flags.extended = 0;
 8000abe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ac2:	f36f 0300 	bfc	r3, #0, #1
 8000ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000aca:	e007      	b.n	8000adc <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
		}
		else
		{
			rxmsg.id = RxHeader.ExtId;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
			rxmsg.flags.extended = 1;
 8000ad0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		rxmsg.flags.remote = RxHeader.RTR;
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ae8:	f362 0341 	bfi	r3, r2, #1, #1
 8000aec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		rxmsg.mb = RxHeader.FilterMatchIndex;
 8000af0:	6a3b      	ldr	r3, [r7, #32]
 8000af2:	b25b      	sxtb	r3, r3
 8000af4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		rxmsg.timestamp = RxHeader.Timestamp;
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	853b      	strh	r3, [r7, #40]	; 0x28
		rxmsg.len = RxHeader.DLC;
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

		// TODO Ringbuffer fuer einzelne CAN-Busse erstellen
		if (CanHandler->Instance == CAN3)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a08      	ldr	r2, [pc, #32]	; (8000b2c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d108      	bne.n	8000b22 <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
		{
			rxmsg.bus = 1;
 8000b10:	2301      	movs	r3, #1
 8000b12:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			addToRingBuffer(&rxRing, &rxmsg);
 8000b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4804      	ldr	r0, [pc, #16]	; (8000b30 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000b1e:	f7ff fee2 	bl	80008e6 <addToRingBuffer>
		}

		// TODO CAN2 und CAN3 hinzufuegen
	}
}
 8000b22:	bf00      	nop
 8000b24:	3738      	adds	r7, #56	; 0x38
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40003400 	.word	0x40003400
 8000b30:	20000078 	.word	0x20000078

08000b34 <CAN3_RX0_IRQHandler>:
//----------------------------------------------------------------------

// RX IRQ Handler
//----------------------------------------------------------------------
void CAN3_RX0_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan3);
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <CAN3_RX0_IRQHandler+0x10>)
 8000b3a:	f003 f85e 	bl	8003bfa <HAL_CAN_IRQHandler>
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000218 	.word	0x20000218

08000b48 <CAN3_TX_IRQHandler>:
//----------------------------------------------------------------------

// TX IRQ Handler
//----------------------------------------------------------------------
void CAN3_TX_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan3);
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <CAN3_TX_IRQHandler+0x10>)
 8000b4e:	f003 f854 	bl	8003bfa <HAL_CAN_IRQHandler>
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000218 	.word	0x20000218

08000b5c <CAN_config>:
//----------------------------------------------------------------------

// Konfiguriere CAN Nachrichten
//----------------------------------------------------------------------
void CAN_config(void)
{
 8000b5c:	b5b0      	push	{r4, r5, r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af02      	add	r7, sp, #8
	CAN_Output_PaketListe[0] = CAN_Nachricht(BMS_CAN_SAFETY, 6, 100, 17);
 8000b62:	4c42      	ldr	r4, [pc, #264]	; (8000c6c <CAN_config+0x110>)
 8000b64:	4638      	mov	r0, r7
 8000b66:	2311      	movs	r3, #17
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	2364      	movs	r3, #100	; 0x64
 8000b6c:	2206      	movs	r2, #6
 8000b6e:	f44f 719c 	mov.w	r1, #312	; 0x138
 8000b72:	f7ff fe1f 	bl	80007b4 <CAN_Nachricht>
 8000b76:	4625      	mov	r5, r4
 8000b78:	463c      	mov	r4, r7
 8000b7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b7e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000b82:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	CAN_Output_PaketListe[1] = CAN_Nachricht(BMS_CAN_DIGITAL_OUT, 6, 200, 13);
 8000b86:	4c39      	ldr	r4, [pc, #228]	; (8000c6c <CAN_config+0x110>)
 8000b88:	4638      	mov	r0, r7
 8000b8a:	230d      	movs	r3, #13
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	23c8      	movs	r3, #200	; 0xc8
 8000b90:	2206      	movs	r2, #6
 8000b92:	f240 2137 	movw	r1, #567	; 0x237
 8000b96:	f7ff fe0d 	bl	80007b4 <CAN_Nachricht>
 8000b9a:	341c      	adds	r4, #28
 8000b9c:	463d      	mov	r5, r7
 8000b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ba6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	CAN_Output_PaketListe[2] = CAN_Nachricht(BMS_CAN_DIGITAL_IN, 6, 200, 14);
 8000baa:	4c30      	ldr	r4, [pc, #192]	; (8000c6c <CAN_config+0x110>)
 8000bac:	4638      	mov	r0, r7
 8000bae:	230e      	movs	r3, #14
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	23c8      	movs	r3, #200	; 0xc8
 8000bb4:	2206      	movs	r2, #6
 8000bb6:	f44f 710e 	mov.w	r1, #568	; 0x238
 8000bba:	f7ff fdfb 	bl	80007b4 <CAN_Nachricht>
 8000bbe:	3438      	adds	r4, #56	; 0x38
 8000bc0:	463d      	mov	r5, r7
 8000bc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	CAN_Output_PaketListe[3] = CAN_Nachricht(BMS_CAN_ANALOG_IN, 8, 500, 7);
 8000bce:	4c27      	ldr	r4, [pc, #156]	; (8000c6c <CAN_config+0x110>)
 8000bd0:	4638      	mov	r0, r7
 8000bd2:	2307      	movs	r3, #7
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bda:	2208      	movs	r2, #8
 8000bdc:	f240 2139 	movw	r1, #569	; 0x239
 8000be0:	f7ff fde8 	bl	80007b4 <CAN_Nachricht>
 8000be4:	3454      	adds	r4, #84	; 0x54
 8000be6:	463d      	mov	r5, r7
 8000be8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bf0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	CAN_Output_PaketListe[4] = CAN_Nachricht(BMS_CAN_TEMPERATUR, 8, 500, 24);
 8000bf4:	4c1d      	ldr	r4, [pc, #116]	; (8000c6c <CAN_config+0x110>)
 8000bf6:	4638      	mov	r0, r7
 8000bf8:	2318      	movs	r3, #24
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c00:	2208      	movs	r2, #8
 8000c02:	f44f 61a7 	mov.w	r1, #1336	; 0x538
 8000c06:	f7ff fdd5 	bl	80007b4 <CAN_Nachricht>
 8000c0a:	3470      	adds	r4, #112	; 0x70
 8000c0c:	463d      	mov	r5, r7
 8000c0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	CAN_Output_PaketListe[5] = CAN_Nachricht(BMS_CAN_STATUS, 8, 200, 5);
 8000c1a:	4c14      	ldr	r4, [pc, #80]	; (8000c6c <CAN_config+0x110>)
 8000c1c:	4638      	mov	r0, r7
 8000c1e:	2305      	movs	r3, #5
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	23c8      	movs	r3, #200	; 0xc8
 8000c24:	2208      	movs	r2, #8
 8000c26:	f44f 61ac 	mov.w	r1, #1376	; 0x560
 8000c2a:	f7ff fdc3 	bl	80007b4 <CAN_Nachricht>
 8000c2e:	348c      	adds	r4, #140	; 0x8c
 8000c30:	463d      	mov	r5, r7
 8000c32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	CAN_Output_PaketListe[6] = CAN_Nachricht(BMS_CAN_IMD, 5, 200, 12);
 8000c3e:	4c0b      	ldr	r4, [pc, #44]	; (8000c6c <CAN_config+0x110>)
 8000c40:	4638      	mov	r0, r7
 8000c42:	230c      	movs	r3, #12
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	23c8      	movs	r3, #200	; 0xc8
 8000c48:	2205      	movs	r2, #5
 8000c4a:	f240 5105 	movw	r1, #1285	; 0x505
 8000c4e:	f7ff fdb1 	bl	80007b4 <CAN_Nachricht>
 8000c52:	34a8      	adds	r4, #168	; 0xa8
 8000c54:	463d      	mov	r5, r7
 8000c56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000c62:	bf00      	nop
 8000c64:	3720      	adds	r7, #32
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bdb0      	pop	{r4, r5, r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200000a0 	.word	0x200000a0

08000c70 <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 8000c76:	2114      	movs	r1, #20
 8000c78:	483d      	ldr	r0, [pc, #244]	; (8000d70 <collectHardwareInfo+0x100>)
 8000c7a:	f7ff fc63 	bl	8000544 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 8000c7e:	f002 f89b 	bl	8002db8 <HAL_GetDEVID>
 8000c82:	4603      	mov	r3, r0
 8000c84:	210a      	movs	r1, #10
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fc70 	bl	800056c <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 8000c8c:	2116      	movs	r1, #22
 8000c8e:	4839      	ldr	r0, [pc, #228]	; (8000d74 <collectHardwareInfo+0x104>)
 8000c90:	f7ff fc58 	bl	8000544 <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 8000c94:	f002 f884 	bl	8002da0 <HAL_GetREVID>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	f242 0201 	movw	r2, #8193	; 0x2001
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d016      	beq.n	8000cd0 <collectHardwareInfo+0x60>
 8000ca2:	f242 0201 	movw	r2, #8193	; 0x2001
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d817      	bhi.n	8000cda <collectHardwareInfo+0x6a>
 8000caa:	f241 0201 	movw	r2, #4097	; 0x1001
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d004      	beq.n	8000cbc <collectHardwareInfo+0x4c>
 8000cb2:	f241 0203 	movw	r2, #4099	; 0x1003
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d005      	beq.n	8000cc6 <collectHardwareInfo+0x56>
 8000cba:	e00e      	b.n	8000cda <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	482e      	ldr	r0, [pc, #184]	; (8000d78 <collectHardwareInfo+0x108>)
 8000cc0:	f7ff fc40 	bl	8000544 <uartTransmit>
			break;
 8000cc4:	e011      	b.n	8000cea <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	482c      	ldr	r0, [pc, #176]	; (8000d7c <collectHardwareInfo+0x10c>)
 8000cca:	f7ff fc3b 	bl	8000544 <uartTransmit>
			break;
 8000cce:	e00c      	b.n	8000cea <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	482b      	ldr	r0, [pc, #172]	; (8000d80 <collectHardwareInfo+0x110>)
 8000cd4:	f7ff fc36 	bl	8000544 <uartTransmit>
			break;
 8000cd8:	e007      	b.n	8000cea <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 8000cda:	f002 f861 	bl	8002da0 <HAL_GetREVID>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	210a      	movs	r1, #10
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fc42 	bl	800056c <uartTransmitNumber>
			break;
 8000ce8:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 8000cea:	2114      	movs	r1, #20
 8000cec:	4825      	ldr	r0, [pc, #148]	; (8000d84 <collectHardwareInfo+0x114>)
 8000cee:	f7ff fc29 	bl	8000544 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 8000cf2:	f004 f87d 	bl	8004df0 <HAL_RCC_GetSysClockFreq>
 8000cf6:	6078      	str	r0, [r7, #4]
		frequency = frequency / 1000000;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a23      	ldr	r2, [pc, #140]	; (8000d88 <collectHardwareInfo+0x118>)
 8000cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8000d00:	0c9b      	lsrs	r3, r3, #18
 8000d02:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 8000d04:	210a      	movs	r1, #10
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff fc30 	bl	800056c <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 8000d0c:	2104      	movs	r1, #4
 8000d0e:	481f      	ldr	r0, [pc, #124]	; (8000d8c <collectHardwareInfo+0x11c>)
 8000d10:	f7ff fc18 	bl	8000544 <uartTransmit>


	uartTransmit("\n", 1);
 8000d14:	2101      	movs	r1, #1
 8000d16:	481e      	ldr	r0, [pc, #120]	; (8000d90 <collectHardwareInfo+0x120>)
 8000d18:	f7ff fc14 	bl	8000544 <uartTransmit>
	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 8000d1c:	2110      	movs	r1, #16
 8000d1e:	481d      	ldr	r0, [pc, #116]	; (8000d94 <collectHardwareInfo+0x124>)
 8000d20:	f7ff fc10 	bl	8000544 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 8000d24:	f002 f856 	bl	8002dd4 <HAL_GetUIDw0>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2110      	movs	r1, #16
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fc1d 	bl	800056c <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000d32:	2101      	movs	r1, #1
 8000d34:	4818      	ldr	r0, [pc, #96]	; (8000d98 <collectHardwareInfo+0x128>)
 8000d36:	f7ff fc05 	bl	8000544 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 8000d3a:	f002 f857 	bl	8002dec <HAL_GetUIDw1>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2110      	movs	r1, #16
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fc12 	bl	800056c <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000d48:	2101      	movs	r1, #1
 8000d4a:	4813      	ldr	r0, [pc, #76]	; (8000d98 <collectHardwareInfo+0x128>)
 8000d4c:	f7ff fbfa 	bl	8000544 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8000d50:	f002 f858 	bl	8002e04 <HAL_GetUIDw2>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2110      	movs	r1, #16
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fc07 	bl	800056c <uartTransmitNumber>

	uartTransmit("\n", 1);
 8000d5e:	2101      	movs	r1, #1
 8000d60:	480b      	ldr	r0, [pc, #44]	; (8000d90 <collectHardwareInfo+0x120>)
 8000d62:	f7ff fbef 	bl	8000544 <uartTransmit>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	08007fc4 	.word	0x08007fc4
 8000d74:	08007fd8 	.word	0x08007fd8
 8000d78:	08007ff0 	.word	0x08007ff0
 8000d7c:	08007ff4 	.word	0x08007ff4
 8000d80:	08007ff8 	.word	0x08007ff8
 8000d84:	08007ffc 	.word	0x08007ffc
 8000d88:	431bde83 	.word	0x431bde83
 8000d8c:	08008010 	.word	0x08008010
 8000d90:	08008018 	.word	0x08008018
 8000d94:	0800801c 	.word	0x0800801c
 8000d98:	0800802c 	.word	0x0800802c

08000d9c <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 8000da0:	2113      	movs	r1, #19
 8000da2:	4824      	ldr	r0, [pc, #144]	; (8000e34 <collectMiddlewareInfo+0x98>)
 8000da4:	f7ff fbce 	bl	8000544 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8000da8:	210a      	movs	r1, #10
 8000daa:	2005      	movs	r0, #5
 8000dac:	f7ff fbde 	bl	800056c <uartTransmitNumber>
	uartTransmit(".", 1);
 8000db0:	2101      	movs	r1, #1
 8000db2:	4821      	ldr	r0, [pc, #132]	; (8000e38 <collectMiddlewareInfo+0x9c>)
 8000db4:	f7ff fbc6 	bl	8000544 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8000db8:	210a      	movs	r1, #10
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff fbd6 	bl	800056c <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 8000dc0:	2111      	movs	r1, #17
 8000dc2:	481e      	ldr	r0, [pc, #120]	; (8000e3c <collectMiddlewareInfo+0xa0>)
 8000dc4:	f7ff fbbe 	bl	8000544 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8000dc8:	f001 ffe0 	bl	8002d8c <HAL_GetHalVersion>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	0e1b      	lsrs	r3, r3, #24
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	210a      	movs	r1, #10
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fbc9 	bl	800056c <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000dda:	2101      	movs	r1, #1
 8000ddc:	4816      	ldr	r0, [pc, #88]	; (8000e38 <collectMiddlewareInfo+0x9c>)
 8000dde:	f7ff fbb1 	bl	8000544 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 8000de2:	f001 ffd3 	bl	8002d8c <HAL_GetHalVersion>
 8000de6:	4603      	mov	r3, r0
 8000de8:	0c1b      	lsrs	r3, r3, #16
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	210a      	movs	r1, #10
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fbbc 	bl	800056c <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000df4:	2101      	movs	r1, #1
 8000df6:	4810      	ldr	r0, [pc, #64]	; (8000e38 <collectMiddlewareInfo+0x9c>)
 8000df8:	f7ff fba4 	bl	8000544 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8000dfc:	f001 ffc6 	bl	8002d8c <HAL_GetHalVersion>
 8000e00:	4603      	mov	r3, r0
 8000e02:	0a1b      	lsrs	r3, r3, #8
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	210a      	movs	r1, #10
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fbaf 	bl	800056c <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000e0e:	2101      	movs	r1, #1
 8000e10:	4809      	ldr	r0, [pc, #36]	; (8000e38 <collectMiddlewareInfo+0x9c>)
 8000e12:	f7ff fb97 	bl	8000544 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000e16:	f001 ffb9 	bl	8002d8c <HAL_GetHalVersion>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	210a      	movs	r1, #10
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fba3 	bl	800056c <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 8000e26:	2101      	movs	r1, #1
 8000e28:	4805      	ldr	r0, [pc, #20]	; (8000e40 <collectMiddlewareInfo+0xa4>)
 8000e2a:	f7ff fb8b 	bl	8000544 <uartTransmit>
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	08008030 	.word	0x08008030
 8000e38:	08008044 	.word	0x08008044
 8000e3c:	08008048 	.word	0x08008048
 8000e40:	08008018 	.word	0x08008018

08000e44 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 8000e48:	2110      	movs	r1, #16
 8000e4a:	4826      	ldr	r0, [pc, #152]	; (8000ee4 <collectSoftwareInfo+0xa0>)
 8000e4c:	f7ff fb7a 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8000e50:	2108      	movs	r1, #8
 8000e52:	4825      	ldr	r0, [pc, #148]	; (8000ee8 <collectSoftwareInfo+0xa4>)
 8000e54:	f7ff fb76 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8000e58:	2110      	movs	r1, #16
 8000e5a:	4824      	ldr	r0, [pc, #144]	; (8000eec <collectSoftwareInfo+0xa8>)
 8000e5c:	f7ff fb72 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8000e60:	210e      	movs	r1, #14
 8000e62:	4823      	ldr	r0, [pc, #140]	; (8000ef0 <collectSoftwareInfo+0xac>)
 8000e64:	f7ff fb6e 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8000e68:	210e      	movs	r1, #14
 8000e6a:	4822      	ldr	r0, [pc, #136]	; (8000ef4 <collectSoftwareInfo+0xb0>)
 8000e6c:	f7ff fb6a 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 8000e70:	2129      	movs	r1, #41	; 0x29
 8000e72:	4821      	ldr	r0, [pc, #132]	; (8000ef8 <collectSoftwareInfo+0xb4>)
 8000e74:	f7ff fb66 	bl	8000544 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000e78:	2101      	movs	r1, #1
 8000e7a:	4820      	ldr	r0, [pc, #128]	; (8000efc <collectSoftwareInfo+0xb8>)
 8000e7c:	f7ff fb62 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000e80:	2115      	movs	r1, #21
 8000e82:	481f      	ldr	r0, [pc, #124]	; (8000f00 <collectSoftwareInfo+0xbc>)
 8000e84:	f7ff fb5e 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 8000e88:	2105      	movs	r1, #5
 8000e8a:	481e      	ldr	r0, [pc, #120]	; (8000f04 <collectSoftwareInfo+0xc0>)
 8000e8c:	f7ff fb5a 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8000e90:	2114      	movs	r1, #20
 8000e92:	481d      	ldr	r0, [pc, #116]	; (8000f08 <collectSoftwareInfo+0xc4>)
 8000e94:	f7ff fb56 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 8000e98:	2108      	movs	r1, #8
 8000e9a:	481c      	ldr	r0, [pc, #112]	; (8000f0c <collectSoftwareInfo+0xc8>)
 8000e9c:	f7ff fb52 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 8000ea0:	2115      	movs	r1, #21
 8000ea2:	481b      	ldr	r0, [pc, #108]	; (8000f10 <collectSoftwareInfo+0xcc>)
 8000ea4:	f7ff fb4e 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 8000ea8:	2111      	movs	r1, #17
 8000eaa:	481a      	ldr	r0, [pc, #104]	; (8000f14 <collectSoftwareInfo+0xd0>)
 8000eac:	f7ff fb4a 	bl	8000544 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	4812      	ldr	r0, [pc, #72]	; (8000efc <collectSoftwareInfo+0xb8>)
 8000eb4:	f7ff fb46 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 8000eb8:	2110      	movs	r1, #16
 8000eba:	4817      	ldr	r0, [pc, #92]	; (8000f18 <collectSoftwareInfo+0xd4>)
 8000ebc:	f7ff fb42 	bl	8000544 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 8000ec0:	210b      	movs	r1, #11
 8000ec2:	4816      	ldr	r0, [pc, #88]	; (8000f1c <collectSoftwareInfo+0xd8>)
 8000ec4:	f7ff fb3e 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 8000ec8:	2110      	movs	r1, #16
 8000eca:	4815      	ldr	r0, [pc, #84]	; (8000f20 <collectSoftwareInfo+0xdc>)
 8000ecc:	f7ff fb3a 	bl	8000544 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 8000ed0:	2109      	movs	r1, #9
 8000ed2:	4814      	ldr	r0, [pc, #80]	; (8000f24 <collectSoftwareInfo+0xe0>)
 8000ed4:	f7ff fb36 	bl	8000544 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000ed8:	2101      	movs	r1, #1
 8000eda:	4808      	ldr	r0, [pc, #32]	; (8000efc <collectSoftwareInfo+0xb8>)
 8000edc:	f7ff fb32 	bl	8000544 <uartTransmit>
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	0800805c 	.word	0x0800805c
 8000ee8:	0800806c 	.word	0x0800806c
 8000eec:	08008074 	.word	0x08008074
 8000ef0:	08008084 	.word	0x08008084
 8000ef4:	08008094 	.word	0x08008094
 8000ef8:	080080a4 	.word	0x080080a4
 8000efc:	08008018 	.word	0x08008018
 8000f00:	080080d0 	.word	0x080080d0
 8000f04:	080080e8 	.word	0x080080e8
 8000f08:	080080f0 	.word	0x080080f0
 8000f0c:	08008104 	.word	0x08008104
 8000f10:	0800810c 	.word	0x0800810c
 8000f14:	08008124 	.word	0x08008124
 8000f18:	08008138 	.word	0x08008138
 8000f1c:	08008148 	.word	0x08008148
 8000f20:	08008154 	.word	0x08008154
 8000f24:	08008164 	.word	0x08008164

08000f28 <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 8000f2c:	2114      	movs	r1, #20
 8000f2e:	4814      	ldr	r0, [pc, #80]	; (8000f80 <collectGitcounts+0x58>)
 8000f30:	f7ff fb08 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 8000f34:	2103      	movs	r1, #3
 8000f36:	4813      	ldr	r0, [pc, #76]	; (8000f84 <collectGitcounts+0x5c>)
 8000f38:	f7ff fb04 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 8000f3c:	2116      	movs	r1, #22
 8000f3e:	4812      	ldr	r0, [pc, #72]	; (8000f88 <collectGitcounts+0x60>)
 8000f40:	f7ff fb00 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 8000f44:	2103      	movs	r1, #3
 8000f46:	4811      	ldr	r0, [pc, #68]	; (8000f8c <collectGitcounts+0x64>)
 8000f48:	f7ff fafc 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 8000f4c:	211b      	movs	r1, #27
 8000f4e:	4810      	ldr	r0, [pc, #64]	; (8000f90 <collectGitcounts+0x68>)
 8000f50:	f7ff faf8 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 8000f54:	2103      	movs	r1, #3
 8000f56:	480f      	ldr	r0, [pc, #60]	; (8000f94 <collectGitcounts+0x6c>)
 8000f58:	f7ff faf4 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000f5c:	2115      	movs	r1, #21
 8000f5e:	480e      	ldr	r0, [pc, #56]	; (8000f98 <collectGitcounts+0x70>)
 8000f60:	f7ff faf0 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8000f64:	2102      	movs	r1, #2
 8000f66:	480d      	ldr	r0, [pc, #52]	; (8000f9c <collectGitcounts+0x74>)
 8000f68:	f7ff faec 	bl	8000544 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8000f6c:	2114      	movs	r1, #20
 8000f6e:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <collectGitcounts+0x78>)
 8000f70:	f7ff fae8 	bl	8000544 <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 8000f74:	2102      	movs	r1, #2
 8000f76:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <collectGitcounts+0x7c>)
 8000f78:	f7ff fae4 	bl	8000544 <uartTransmit>
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	08008170 	.word	0x08008170
 8000f84:	08008184 	.word	0x08008184
 8000f88:	08008188 	.word	0x08008188
 8000f8c:	080081a0 	.word	0x080081a0
 8000f90:	080081a4 	.word	0x080081a4
 8000f94:	080081c0 	.word	0x080081c0
 8000f98:	080080d0 	.word	0x080080d0
 8000f9c:	080081c4 	.word	0x080081c4
 8000fa0:	080080f0 	.word	0x080080f0
 8000fa4:	080081c8 	.word	0x080081c8

08000fa8 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000fac:	2111      	movs	r1, #17
 8000fae:	480e      	ldr	r0, [pc, #56]	; (8000fe8 <collectSystemInfo+0x40>)
 8000fb0:	f7ff fac8 	bl	8000544 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8000fb4:	f7ff fe5c 	bl	8000c70 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000fb8:	2111      	movs	r1, #17
 8000fba:	480c      	ldr	r0, [pc, #48]	; (8000fec <collectSystemInfo+0x44>)
 8000fbc:	f7ff fac2 	bl	8000544 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 8000fc0:	f7ff ff40 	bl	8000e44 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000fc4:	2113      	movs	r1, #19
 8000fc6:	480a      	ldr	r0, [pc, #40]	; (8000ff0 <collectSystemInfo+0x48>)
 8000fc8:	f7ff fabc 	bl	8000544 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8000fcc:	f7ff fee6 	bl	8000d9c <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 8000fd0:	2113      	movs	r1, #19
 8000fd2:	4808      	ldr	r0, [pc, #32]	; (8000ff4 <collectSystemInfo+0x4c>)
 8000fd4:	f7ff fab6 	bl	8000544 <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 8000fd8:	f7ff ffa6 	bl	8000f28 <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 8000fdc:	2103      	movs	r1, #3
 8000fde:	4806      	ldr	r0, [pc, #24]	; (8000ff8 <collectSystemInfo+0x50>)
 8000fe0:	f7ff fab0 	bl	8000544 <uartTransmit>
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	080081cc 	.word	0x080081cc
 8000fec:	080081e0 	.word	0x080081e0
 8000ff0:	080081f4 	.word	0x080081f4
 8000ff4:	08008208 	.word	0x08008208
 8000ff8:	0800821c 	.word	0x0800821c

08000ffc <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 8001002:	2300      	movs	r3, #0
 8001004:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8001006:	4b25      	ldr	r3, [pc, #148]	; (800109c <readResetSource+0xa0>)
 8001008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800100a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d002      	beq.n	8001018 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	3301      	adds	r3, #1
 8001016:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8001018:	4b20      	ldr	r3, [pc, #128]	; (800109c <readResetSource+0xa0>)
 800101a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800101c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d002      	beq.n	800102a <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	3302      	adds	r3, #2
 8001028:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 800102a:	4b1c      	ldr	r3, [pc, #112]	; (800109c <readResetSource+0xa0>)
 800102c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800102e:	2b00      	cmp	r3, #0
 8001030:	da02      	bge.n	8001038 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	3304      	adds	r3, #4
 8001036:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <readResetSource+0xa0>)
 800103a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800103c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d002      	beq.n	800104a <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	3308      	adds	r3, #8
 8001048:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <readResetSource+0xa0>)
 800104c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800104e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d002      	beq.n	800105c <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	3310      	adds	r3, #16
 800105a:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <readResetSource+0xa0>)
 800105e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d002      	beq.n	800106e <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	3320      	adds	r3, #32
 800106c:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <readResetSource+0xa0>)
 8001070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001072:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d002      	beq.n	8001080 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	3340      	adds	r3, #64	; 0x40
 800107e:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <readResetSource+0xa0>)
 8001082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001084:	4a05      	ldr	r2, [pc, #20]	; (800109c <readResetSource+0xa0>)
 8001086:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800108a:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 800108c:	79fb      	ldrb	r3, [r7, #7]
}
 800108e:	4618      	mov	r0, r3
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800

080010a0 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
	if (reset_flags == STARTUP)												// Regulaerer Start
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d104      	bne.n	80010ba <printResetSource+0x1a>
	{
		uartTransmit("Regular Start\r\n", 15);
 80010b0:	210f      	movs	r1, #15
 80010b2:	4827      	ldr	r0, [pc, #156]	; (8001150 <printResetSource+0xb0>)
 80010b4:	f7ff fa46 	bl	8000544 <uartTransmit>
		if (reset_flags & RMVF1)											// NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 80010b8:	e046      	b.n	8001148 <printResetSource+0xa8>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <printResetSource+0x2c>
			uartTransmit("Interner Watchdog Reset\n", 24);
 80010c4:	2118      	movs	r1, #24
 80010c6:	4823      	ldr	r0, [pc, #140]	; (8001154 <printResetSource+0xb4>)
 80010c8:	f7ff fa3c 	bl	8000544 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <printResetSource+0x3e>
			uartTransmit("Window Watchdog Reset\n", 22);
 80010d6:	2116      	movs	r1, #22
 80010d8:	481f      	ldr	r0, [pc, #124]	; (8001158 <printResetSource+0xb8>)
 80010da:	f7ff fa33 	bl	8000544 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <printResetSource+0x50>
			uartTransmit("CPU Reset\n", 10);
 80010e8:	210a      	movs	r1, #10
 80010ea:	481c      	ldr	r0, [pc, #112]	; (800115c <printResetSource+0xbc>)
 80010ec:	f7ff fa2a 	bl	8000544 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	f003 0308 	and.w	r3, r3, #8
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <printResetSource+0x62>
			uartTransmit("Brown Out Reset\n", 16);
 80010fa:	2110      	movs	r1, #16
 80010fc:	4818      	ldr	r0, [pc, #96]	; (8001160 <printResetSource+0xc0>)
 80010fe:	f7ff fa21 	bl	8000544 <uartTransmit>
		if (reset_flags & PORST1)											// Power on Reset / Power down Reser
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f003 0310 	and.w	r3, r3, #16
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <printResetSource+0x74>
			uartTransmit("Power On Reset\n", 15);
 800110c:	210f      	movs	r1, #15
 800110e:	4815      	ldr	r0, [pc, #84]	; (8001164 <printResetSource+0xc4>)
 8001110:	f7ff fa18 	bl	8000544 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	f003 0320 	and.w	r3, r3, #32
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <printResetSource+0x86>
			uartTransmit("Software Reset\n", 15);
 800111e:	210f      	movs	r1, #15
 8001120:	4811      	ldr	r0, [pc, #68]	; (8001168 <printResetSource+0xc8>)
 8001122:	f7ff fa0f 	bl	8000544 <uartTransmit>
		if (reset_flags & PINRST1)											// NRST pin
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <printResetSource+0x98>
			uartTransmit("PIN Reset\n", 10);
 8001130:	210a      	movs	r1, #10
 8001132:	480e      	ldr	r0, [pc, #56]	; (800116c <printResetSource+0xcc>)
 8001134:	f7ff fa06 	bl	8000544 <uartTransmit>
		if (reset_flags & RMVF1)											// NRST pin
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	2b00      	cmp	r3, #0
 800113e:	da03      	bge.n	8001148 <printResetSource+0xa8>
			uartTransmit("RMVF\n", 5);
 8001140:	2105      	movs	r1, #5
 8001142:	480b      	ldr	r0, [pc, #44]	; (8001170 <printResetSource+0xd0>)
 8001144:	f7ff f9fe 	bl	8000544 <uartTransmit>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	08008220 	.word	0x08008220
 8001154:	08008230 	.word	0x08008230
 8001158:	0800824c 	.word	0x0800824c
 800115c:	08008264 	.word	0x08008264
 8001160:	08008270 	.word	0x08008270
 8001164:	08008284 	.word	0x08008284
 8001168:	08008294 	.word	0x08008294
 800116c:	080082a4 	.word	0x080082a4
 8001170:	080082b0 	.word	0x080082b0

08001174 <app_info>:
#include "app_info.h"
#include "BatteriemanagementSystem.h"
//----------------------------------------------------------------------

void app_info(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  	// Teste serielle Schnittstelle
	#define START_STRING_UART		"!--- Batteriemanagement-System ---!\n"
	uartTransmit(START_STRING_UART, sizeof(START_STRING_UART));
 8001178:	2125      	movs	r1, #37	; 0x25
 800117a:	4810      	ldr	r0, [pc, #64]	; (80011bc <app_info+0x48>)
 800117c:	f7ff f9e2 	bl	8000544 <uartTransmit>
	#define VERSION_STRING_UART		"Application Version: "
	uartTransmit(VERSION_STRING_UART, sizeof(VERSION_STRING_UART));
 8001180:	2116      	movs	r1, #22
 8001182:	480f      	ldr	r0, [pc, #60]	; (80011c0 <app_info+0x4c>)
 8001184:	f7ff f9de 	bl	8000544 <uartTransmit>
	uartTransmitNumber(MAJOR, 10);
 8001188:	210a      	movs	r1, #10
 800118a:	2000      	movs	r0, #0
 800118c:	f7ff f9ee 	bl	800056c <uartTransmitNumber>
	uartTransmit(".", 1);
 8001190:	2101      	movs	r1, #1
 8001192:	480c      	ldr	r0, [pc, #48]	; (80011c4 <app_info+0x50>)
 8001194:	f7ff f9d6 	bl	8000544 <uartTransmit>
	uartTransmitNumber(MINOR, 10);
 8001198:	210a      	movs	r1, #10
 800119a:	2001      	movs	r0, #1
 800119c:	f7ff f9e6 	bl	800056c <uartTransmitNumber>
	uartTransmit("\n", 1);
 80011a0:	2101      	movs	r1, #1
 80011a2:	4809      	ldr	r0, [pc, #36]	; (80011c8 <app_info+0x54>)
 80011a4:	f7ff f9ce 	bl	8000544 <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 80011a8:	f7ff fefe 	bl	8000fa8 <collectSystemInfo>
	printResetSource(readResetSource());
 80011ac:	f7ff ff26 	bl	8000ffc <readResetSource>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ff74 	bl	80010a0 <printResetSource>
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	080082b8 	.word	0x080082b8
 80011c0:	080082e0 	.word	0x080082e0
 80011c4:	080082f8 	.word	0x080082f8
 80011c8:	080082fc 	.word	0x080082fc

080011cc <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 80011d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d4:	4850      	ldr	r0, [pc, #320]	; (8001318 <readall_inputs+0x14c>)
 80011d6:	f003 f9df 	bl	8004598 <HAL_GPIO_ReadPin>
 80011da:	4603      	mov	r3, r0
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	b2d9      	uxtb	r1, r3
 80011e2:	4a4e      	ldr	r2, [pc, #312]	; (800131c <readall_inputs+0x150>)
 80011e4:	7813      	ldrb	r3, [r2, #0]
 80011e6:	f361 1304 	bfi	r3, r1, #4, #1
 80011ea:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 80011ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f0:	484b      	ldr	r0, [pc, #300]	; (8001320 <readall_inputs+0x154>)
 80011f2:	f003 f9d1 	bl	8004598 <HAL_GPIO_ReadPin>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	b2d9      	uxtb	r1, r3
 80011fe:	4a47      	ldr	r2, [pc, #284]	; (800131c <readall_inputs+0x150>)
 8001200:	7813      	ldrb	r3, [r2, #0]
 8001202:	f361 1386 	bfi	r3, r1, #6, #1
 8001206:	7013      	strb	r3, [r2, #0]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 8001208:	2101      	movs	r1, #1
 800120a:	4846      	ldr	r0, [pc, #280]	; (8001324 <readall_inputs+0x158>)
 800120c:	f003 f9c4 	bl	8004598 <HAL_GPIO_ReadPin>
 8001210:	4603      	mov	r3, r0
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	b2d9      	uxtb	r1, r3
 8001218:	4a40      	ldr	r2, [pc, #256]	; (800131c <readall_inputs+0x150>)
 800121a:	7813      	ldrb	r3, [r2, #0]
 800121c:	f361 13c7 	bfi	r3, r1, #7, #1
 8001220:	7013      	strb	r3, [r2, #0]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8001222:	2104      	movs	r1, #4
 8001224:	483f      	ldr	r0, [pc, #252]	; (8001324 <readall_inputs+0x158>)
 8001226:	f003 f9b7 	bl	8004598 <HAL_GPIO_ReadPin>
 800122a:	4603      	mov	r3, r0
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	b2d9      	uxtb	r1, r3
 8001232:	4a3a      	ldr	r2, [pc, #232]	; (800131c <readall_inputs+0x150>)
 8001234:	7853      	ldrb	r3, [r2, #1]
 8001236:	f361 0300 	bfi	r3, r1, #0, #1
 800123a:	7053      	strb	r3, [r2, #1]

	// SDC-Eingaenge einlesen
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);					// IMD OK, Akku
 800123c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001240:	4835      	ldr	r0, [pc, #212]	; (8001318 <readall_inputs+0x14c>)
 8001242:	f003 f9a9 	bl	8004598 <HAL_GPIO_ReadPin>
 8001246:	4603      	mov	r3, r0
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	b2d9      	uxtb	r1, r3
 800124e:	4a36      	ldr	r2, [pc, #216]	; (8001328 <readall_inputs+0x15c>)
 8001250:	7813      	ldrb	r3, [r2, #0]
 8001252:	f361 0300 	bfi	r3, r1, #0, #1
 8001256:	7013      	strb	r3, [r2, #0]
	sdc_in.HVIL = HAL_GPIO_ReadPin(SENSE_SDC_HVIL_GPIO_Port, SENSE_SDC_HVIL_Pin);				// Shutdown-Circuit HVIL, OK
 8001258:	2108      	movs	r1, #8
 800125a:	482f      	ldr	r0, [pc, #188]	; (8001318 <readall_inputs+0x14c>)
 800125c:	f003 f99c 	bl	8004598 <HAL_GPIO_ReadPin>
 8001260:	4603      	mov	r3, r0
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	b2d9      	uxtb	r1, r3
 8001268:	4a2f      	ldr	r2, [pc, #188]	; (8001328 <readall_inputs+0x15c>)
 800126a:	7813      	ldrb	r3, [r2, #0]
 800126c:	f361 0341 	bfi	r3, r1, #1, #1
 8001270:	7013      	strb	r3, [r2, #0]
	sdc_in.MotorSDC = HAL_GPIO_ReadPin(SENSE_SDC_MOTOR_GPIO_Port, SENSE_SDC_MOTOR_Pin);			// Shutdown-Circuit Akku, OK
 8001272:	2120      	movs	r1, #32
 8001274:	4828      	ldr	r0, [pc, #160]	; (8001318 <readall_inputs+0x14c>)
 8001276:	f003 f98f 	bl	8004598 <HAL_GPIO_ReadPin>
 800127a:	4603      	mov	r3, r0
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	b2d9      	uxtb	r1, r3
 8001282:	4a29      	ldr	r2, [pc, #164]	; (8001328 <readall_inputs+0x15c>)
 8001284:	7813      	ldrb	r3, [r2, #0]
 8001286:	f361 0382 	bfi	r3, r1, #2, #1
 800128a:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 800128c:	2110      	movs	r1, #16
 800128e:	4822      	ldr	r0, [pc, #136]	; (8001318 <readall_inputs+0x14c>)
 8001290:	f003 f982 	bl	8004598 <HAL_GPIO_ReadPin>
 8001294:	4603      	mov	r3, r0
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	b2d9      	uxtb	r1, r3
 800129c:	4a22      	ldr	r2, [pc, #136]	; (8001328 <readall_inputs+0x15c>)
 800129e:	7813      	ldrb	r3, [r2, #0]
 80012a0:	f361 03c3 	bfi	r3, r1, #3, #1
 80012a4:	7013      	strb	r3, [r2, #0]
	sdc_in.PrechargeIn = HAL_GPIO_ReadPin(PRECHARGE_IN_GPIO_Port, PRECHARGE_IN_Pin);			// Eingang Precharge abgeschlossen
 80012a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012aa:	4820      	ldr	r0, [pc, #128]	; (800132c <readall_inputs+0x160>)
 80012ac:	f003 f974 	bl	8004598 <HAL_GPIO_ReadPin>
 80012b0:	4603      	mov	r3, r0
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	b2d9      	uxtb	r1, r3
 80012b8:	4a1b      	ldr	r2, [pc, #108]	; (8001328 <readall_inputs+0x15c>)
 80012ba:	7813      	ldrb	r3, [r2, #0]
 80012bc:	f361 1304 	bfi	r3, r1, #4, #1
 80012c0:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.OVC = HAL_GPIO_ReadPin(OVC_SENSE_GPIO_Port, OVC_SENSE_Pin);						// Eingang Overcurrent erkannt
 80012c2:	2104      	movs	r1, #4
 80012c4:	4819      	ldr	r0, [pc, #100]	; (800132c <readall_inputs+0x160>)
 80012c6:	f003 f967 	bl	8004598 <HAL_GPIO_ReadPin>
 80012ca:	4603      	mov	r3, r0
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	b2d9      	uxtb	r1, r3
 80012d2:	4a17      	ldr	r2, [pc, #92]	; (8001330 <readall_inputs+0x164>)
 80012d4:	7813      	ldrb	r3, [r2, #0]
 80012d6:	f361 0300 	bfi	r3, r1, #0, #1
 80012da:	7013      	strb	r3, [r2, #0]
	komfort_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 80012dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012e0:	4810      	ldr	r0, [pc, #64]	; (8001324 <readall_inputs+0x158>)
 80012e2:	f003 f959 	bl	8004598 <HAL_GPIO_ReadPin>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	b2d9      	uxtb	r1, r3
 80012ee:	4a10      	ldr	r2, [pc, #64]	; (8001330 <readall_inputs+0x164>)
 80012f0:	7813      	ldrb	r3, [r2, #0]
 80012f2:	f361 0341 	bfi	r3, r1, #1, #1
 80012f6:	7013      	strb	r3, [r2, #0]
	komfort_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 80012f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012fc:	4809      	ldr	r0, [pc, #36]	; (8001324 <readall_inputs+0x158>)
 80012fe:	f003 f94b 	bl	8004598 <HAL_GPIO_ReadPin>
 8001302:	4603      	mov	r3, r0
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	b2d9      	uxtb	r1, r3
 800130a:	4a09      	ldr	r2, [pc, #36]	; (8001330 <readall_inputs+0x164>)
 800130c:	7813      	ldrb	r3, [r2, #0]
 800130e:	f361 0382 	bfi	r3, r1, #2, #1
 8001312:	7013      	strb	r3, [r2, #0]
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40021000 	.word	0x40021000
 800131c:	20000164 	.word	0x20000164
 8001320:	40020c00 	.word	0x40020c00
 8001324:	40020000 	.word	0x40020000
 8001328:	20000168 	.word	0x20000168
 800132c:	40021400 	.word	0x40021400
 8001330:	2000016c 	.word	0x2000016c

08001334 <millis>:
//----------------------------------------------------------------------

// Funktion millis (ms)
//----------------------------------------------------------------------
uint32_t millis(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001338:	f001 fcf8 	bl	8002d2c <HAL_GetTick>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <writeall_outputs>:
//----------------------------------------------------------------------

// Schreibe alle Ausgaenge auf default Werte
//----------------------------------------------------------------------
void writeall_outputs(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	// Schreibe System Ausgaenge
	HAL_GPIO_WritePin(AMS_LIMIT_GPIO_Port, AMS_LIMIT_Pin, system_out.AmsLimit);						// Batteriemanagement-System Strom limitiert
 8001348:	4b72      	ldr	r3, [pc, #456]	; (8001514 <writeall_outputs+0x1d0>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001350:	b2db      	uxtb	r3, r3
 8001352:	461a      	mov	r2, r3
 8001354:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001358:	486f      	ldr	r0, [pc, #444]	; (8001518 <writeall_outputs+0x1d4>)
 800135a:	f003 f935 	bl	80045c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IMD_OK_OUT_GPIO_Port, IMD_OK_OUT_Pin, system_out.ImdOK);						// Isolationswaechter OK
 800135e:	4b6d      	ldr	r3, [pc, #436]	; (8001514 <writeall_outputs+0x1d0>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001366:	b2db      	uxtb	r3, r3
 8001368:	461a      	mov	r2, r3
 800136a:	2102      	movs	r1, #2
 800136c:	486b      	ldr	r0, [pc, #428]	; (800151c <writeall_outputs+0x1d8>)
 800136e:	f003 f92b 	bl	80045c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, system_out.AmsOK);								// Batteriemanagement-System OK
 8001372:	4b68      	ldr	r3, [pc, #416]	; (8001514 <writeall_outputs+0x1d0>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800137a:	b2db      	uxtb	r3, r3
 800137c:	461a      	mov	r2, r3
 800137e:	2180      	movs	r1, #128	; 0x80
 8001380:	4867      	ldr	r0, [pc, #412]	; (8001520 <writeall_outputs+0x1dc>)
 8001382:	f003 f921 	bl	80045c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FREIGABE_GPIO_Port, FREIGABE_Pin, system_out.Freigabe);						// Freigabe, Run, Fahren möglich
 8001386:	4b63      	ldr	r3, [pc, #396]	; (8001514 <writeall_outputs+0x1d0>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800138e:	b2db      	uxtb	r3, r3
 8001390:	461a      	mov	r2, r3
 8001392:	2101      	movs	r1, #1
 8001394:	4862      	ldr	r0, [pc, #392]	; (8001520 <writeall_outputs+0x1dc>)
 8001396:	f003 f917 	bl	80045c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RECUPERATION_GPIO_Port, RECUPERATION_Pin, system_out.Recuperation);			// Rekuperation aktivieren
 800139a:	4b5e      	ldr	r3, [pc, #376]	; (8001514 <writeall_outputs+0x1d0>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	461a      	mov	r2, r3
 80013a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013aa:	485b      	ldr	r0, [pc, #364]	; (8001518 <writeall_outputs+0x1d4>)
 80013ac:	f003 f90c 	bl	80045c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HV_P_GPIO_Port, HV_P_Pin, system_out.HV_P);									// Ausgang HV-Schuetz Plus
 80013b0:	4b58      	ldr	r3, [pc, #352]	; (8001514 <writeall_outputs+0x1d0>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	461a      	mov	r2, r3
 80013bc:	2108      	movs	r1, #8
 80013be:	4856      	ldr	r0, [pc, #344]	; (8001518 <writeall_outputs+0x1d4>)
 80013c0:	f003 f902 	bl	80045c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HV_N_GPIO_Port, HV_N_Pin, system_out.HV_N);									// Ausgang HV-Schuetz Minus
 80013c4:	4b53      	ldr	r3, [pc, #332]	; (8001514 <writeall_outputs+0x1d0>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	461a      	mov	r2, r3
 80013d0:	2104      	movs	r1, #4
 80013d2:	4851      	ldr	r0, [pc, #324]	; (8001518 <writeall_outputs+0x1d4>)
 80013d4:	f003 f8f8 	bl	80045c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, system_out.Power_On);						// Selbsthaltung DCDC-Wandler Motorsteuergeraet
 80013d8:	4b4e      	ldr	r3, [pc, #312]	; (8001514 <writeall_outputs+0x1d0>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	461a      	mov	r2, r3
 80013e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013e8:	484e      	ldr	r0, [pc, #312]	; (8001524 <writeall_outputs+0x1e0>)
 80013ea:	f003 f8ed 	bl	80045c8 <HAL_GPIO_WritePin>

	// Schreibe Hochstromfaehige Ausgaenge
	HAL_GPIO_WritePin(DIGITAL1_GPIO_Port, DIGITAL1_Pin, highcurrent_out.Digital1);					// Digitaler Ausgang 1
 80013ee:	4b4e      	ldr	r3, [pc, #312]	; (8001528 <writeall_outputs+0x1e4>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	461a      	mov	r2, r3
 80013fa:	2108      	movs	r1, #8
 80013fc:	484b      	ldr	r0, [pc, #300]	; (800152c <writeall_outputs+0x1e8>)
 80013fe:	f003 f8e3 	bl	80045c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIGITAL2_GPIO_Port, DIGITAL2_Pin, highcurrent_out.Digital2);					// Digitaler Ausgang 2
 8001402:	4b49      	ldr	r3, [pc, #292]	; (8001528 <writeall_outputs+0x1e4>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800140a:	b2db      	uxtb	r3, r3
 800140c:	461a      	mov	r2, r3
 800140e:	2110      	movs	r1, #16
 8001410:	4846      	ldr	r0, [pc, #280]	; (800152c <writeall_outputs+0x1e8>)
 8001412:	f003 f8d9 	bl	80045c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PRECHARGE_OUT_GPIO_Port, PRECHARGE_OUT_Pin, highcurrent_out.PrechargeOut);	// Ausgang Precharge starten
 8001416:	4b44      	ldr	r3, [pc, #272]	; (8001528 <writeall_outputs+0x1e4>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800141e:	b2db      	uxtb	r3, r3
 8001420:	461a      	mov	r2, r3
 8001422:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001426:	4842      	ldr	r0, [pc, #264]	; (8001530 <writeall_outputs+0x1ec>)
 8001428:	f003 f8ce 	bl	80045c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HV_M_GPIO_Port, HV_M_Pin, highcurrent_out.HV_M);								// Ausgang HV-Schuetz Mitte
 800142c:	4b3e      	ldr	r3, [pc, #248]	; (8001528 <writeall_outputs+0x1e4>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001434:	b2db      	uxtb	r3, r3
 8001436:	461a      	mov	r2, r3
 8001438:	2110      	movs	r1, #16
 800143a:	4837      	ldr	r0, [pc, #220]	; (8001518 <writeall_outputs+0x1d4>)
 800143c:	f003 f8c4 	bl	80045c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HV_Charger_GPIO_Port, HV_Charger_Pin, highcurrent_out.HV_CHG);				// Ausgang HV-Schuetz Ladegeraet
 8001440:	4b39      	ldr	r3, [pc, #228]	; (8001528 <writeall_outputs+0x1e4>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001448:	b2db      	uxtb	r3, r3
 800144a:	461a      	mov	r2, r3
 800144c:	2120      	movs	r1, #32
 800144e:	4832      	ldr	r0, [pc, #200]	; (8001518 <writeall_outputs+0x1d4>)
 8001450:	f003 f8ba 	bl	80045c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HEATER1_GPIO_Port, HEATER1_Pin, highcurrent_out.Heater1);						// Ausgang Heizung 1
 8001454:	4b34      	ldr	r3, [pc, #208]	; (8001528 <writeall_outputs+0x1e4>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800145c:	b2db      	uxtb	r3, r3
 800145e:	461a      	mov	r2, r3
 8001460:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001464:	482d      	ldr	r0, [pc, #180]	; (800151c <writeall_outputs+0x1d8>)
 8001466:	f003 f8af 	bl	80045c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HEATER2_GPIO_Port, HEATER2_Pin, highcurrent_out.Heater2);						// Ausgang Heizung 2
 800146a:	4b2f      	ldr	r3, [pc, #188]	; (8001528 <writeall_outputs+0x1e4>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001472:	b2db      	uxtb	r3, r3
 8001474:	461a      	mov	r2, r3
 8001476:	f44f 7100 	mov.w	r1, #512	; 0x200
 800147a:	4828      	ldr	r0, [pc, #160]	; (800151c <writeall_outputs+0x1d8>)
 800147c:	f003 f8a4 	bl	80045c8 <HAL_GPIO_WritePin>

	// Schreibe Leuchtdioden Ausgaenge
	HAL_GPIO_WritePin(INLET_RED_GPIO_Port, INLET_RED_Pin, leuchten_out.InletRed);					// Red Inlet LED
 8001480:	4b2c      	ldr	r3, [pc, #176]	; (8001534 <writeall_outputs+0x1f0>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001488:	b2db      	uxtb	r3, r3
 800148a:	461a      	mov	r2, r3
 800148c:	2104      	movs	r1, #4
 800148e:	4824      	ldr	r0, [pc, #144]	; (8001520 <writeall_outputs+0x1dc>)
 8001490:	f003 f89a 	bl	80045c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INLET_GREEN_GPIO_Port, INLET_GREEN_Pin, leuchten_out.InletGreen);				// Green Inlet LED
 8001494:	4b27      	ldr	r3, [pc, #156]	; (8001534 <writeall_outputs+0x1f0>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800149c:	b2db      	uxtb	r3, r3
 800149e:	461a      	mov	r2, r3
 80014a0:	2102      	movs	r1, #2
 80014a2:	481f      	ldr	r0, [pc, #124]	; (8001520 <writeall_outputs+0x1dc>)
 80014a4:	f003 f890 	bl	80045c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AKKU_LED_GPIO_Port, AKKU_LED_Pin, leuchten_out.AkkuErrorLed);					// Akku LED Kombiinstrument
 80014a8:	4b22      	ldr	r3, [pc, #136]	; (8001534 <writeall_outputs+0x1f0>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	461a      	mov	r2, r3
 80014b4:	2180      	movs	r1, #128	; 0x80
 80014b6:	4818      	ldr	r0, [pc, #96]	; (8001518 <writeall_outputs+0x1d4>)
 80014b8:	f003 f886 	bl	80045c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);							// Rote LED Platine
 80014bc:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <writeall_outputs+0x1f0>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	461a      	mov	r2, r3
 80014c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014cc:	481a      	ldr	r0, [pc, #104]	; (8001538 <writeall_outputs+0x1f4>)
 80014ce:	f003 f87b 	bl	80045c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);					// Gruene LED Platine
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <writeall_outputs+0x1f0>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	461a      	mov	r2, r3
 80014de:	2104      	movs	r1, #4
 80014e0:	4815      	ldr	r0, [pc, #84]	; (8001538 <writeall_outputs+0x1f4>)
 80014e2:	f003 f871 	bl	80045c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, leuchten_out.BlueLed);						// Blaue LED Platine
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <writeall_outputs+0x1f0>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	461a      	mov	r2, r3
 80014f2:	2180      	movs	r1, #128	; 0x80
 80014f4:	4810      	ldr	r0, [pc, #64]	; (8001538 <writeall_outputs+0x1f4>)
 80014f6:	f003 f867 	bl	80045c8 <HAL_GPIO_WritePin>

	// Schreibe Komfortausgaenge
	HAL_GPIO_WritePin(TRIGGER_CURRENT_GPIO_Port, TRIGGER_CURRENT_Pin, komfort_out.TriggerOut);		// Stromsensor Triggern, mehr Infos
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <writeall_outputs+0x1f8>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001502:	b2db      	uxtb	r3, r3
 8001504:	461a      	mov	r2, r3
 8001506:	2102      	movs	r1, #2
 8001508:	4809      	ldr	r0, [pc, #36]	; (8001530 <writeall_outputs+0x1ec>)
 800150a:	f003 f85d 	bl	80045c8 <HAL_GPIO_WritePin>
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000170 	.word	0x20000170
 8001518:	40021800 	.word	0x40021800
 800151c:	40020000 	.word	0x40020000
 8001520:	40021000 	.word	0x40021000
 8001524:	40020800 	.word	0x40020800
 8001528:	20000174 	.word	0x20000174
 800152c:	40020c00 	.word	0x40020c00
 8001530:	40021400 	.word	0x40021400
 8001534:	20000178 	.word	0x20000178
 8001538:	40020400 	.word	0x40020400
 800153c:	2000017c 	.word	0x2000017c

08001540 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001546:	463b      	mov	r3, r7
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001552:	4b44      	ldr	r3, [pc, #272]	; (8001664 <MX_ADC1_Init+0x124>)
 8001554:	4a44      	ldr	r2, [pc, #272]	; (8001668 <MX_ADC1_Init+0x128>)
 8001556:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001558:	4b42      	ldr	r3, [pc, #264]	; (8001664 <MX_ADC1_Init+0x124>)
 800155a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800155e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001560:	4b40      	ldr	r3, [pc, #256]	; (8001664 <MX_ADC1_Init+0x124>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001566:	4b3f      	ldr	r3, [pc, #252]	; (8001664 <MX_ADC1_Init+0x124>)
 8001568:	2201      	movs	r2, #1
 800156a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800156c:	4b3d      	ldr	r3, [pc, #244]	; (8001664 <MX_ADC1_Init+0x124>)
 800156e:	2200      	movs	r2, #0
 8001570:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001572:	4b3c      	ldr	r3, [pc, #240]	; (8001664 <MX_ADC1_Init+0x124>)
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800157a:	4b3a      	ldr	r3, [pc, #232]	; (8001664 <MX_ADC1_Init+0x124>)
 800157c:	2200      	movs	r2, #0
 800157e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001580:	4b38      	ldr	r3, [pc, #224]	; (8001664 <MX_ADC1_Init+0x124>)
 8001582:	4a3a      	ldr	r2, [pc, #232]	; (800166c <MX_ADC1_Init+0x12c>)
 8001584:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001586:	4b37      	ldr	r3, [pc, #220]	; (8001664 <MX_ADC1_Init+0x124>)
 8001588:	2200      	movs	r2, #0
 800158a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 800158c:	4b35      	ldr	r3, [pc, #212]	; (8001664 <MX_ADC1_Init+0x124>)
 800158e:	2206      	movs	r2, #6
 8001590:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001592:	4b34      	ldr	r3, [pc, #208]	; (8001664 <MX_ADC1_Init+0x124>)
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800159a:	4b32      	ldr	r3, [pc, #200]	; (8001664 <MX_ADC1_Init+0x124>)
 800159c:	2201      	movs	r2, #1
 800159e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015a0:	4830      	ldr	r0, [pc, #192]	; (8001664 <MX_ADC1_Init+0x124>)
 80015a2:	f001 fc3b 	bl	8002e1c <HAL_ADC_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80015ac:	f000 fe28 	bl	8002200 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80015b0:	2307      	movs	r3, #7
 80015b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015b4:	2301      	movs	r3, #1
 80015b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80015b8:	2301      	movs	r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015bc:	463b      	mov	r3, r7
 80015be:	4619      	mov	r1, r3
 80015c0:	4828      	ldr	r0, [pc, #160]	; (8001664 <MX_ADC1_Init+0x124>)
 80015c2:	f001 fc6f 	bl	8002ea4 <HAL_ADC_ConfigChannel>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80015cc:	f000 fe18 	bl	8002200 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80015d0:	2303      	movs	r3, #3
 80015d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015d4:	2302      	movs	r3, #2
 80015d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d8:	463b      	mov	r3, r7
 80015da:	4619      	mov	r1, r3
 80015dc:	4821      	ldr	r0, [pc, #132]	; (8001664 <MX_ADC1_Init+0x124>)
 80015de:	f001 fc61 	bl	8002ea4 <HAL_ADC_ConfigChannel>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80015e8:	f000 fe0a 	bl	8002200 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015ec:	2304      	movs	r3, #4
 80015ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015f0:	2303      	movs	r3, #3
 80015f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f4:	463b      	mov	r3, r7
 80015f6:	4619      	mov	r1, r3
 80015f8:	481a      	ldr	r0, [pc, #104]	; (8001664 <MX_ADC1_Init+0x124>)
 80015fa:	f001 fc53 	bl	8002ea4 <HAL_ADC_ConfigChannel>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001604:	f000 fdfc 	bl	8002200 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001608:	2305      	movs	r3, #5
 800160a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800160c:	2304      	movs	r3, #4
 800160e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001610:	463b      	mov	r3, r7
 8001612:	4619      	mov	r1, r3
 8001614:	4813      	ldr	r0, [pc, #76]	; (8001664 <MX_ADC1_Init+0x124>)
 8001616:	f001 fc45 	bl	8002ea4 <HAL_ADC_ConfigChannel>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001620:	f000 fdee 	bl	8002200 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001624:	2306      	movs	r3, #6
 8001626:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001628:	2305      	movs	r3, #5
 800162a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800162c:	463b      	mov	r3, r7
 800162e:	4619      	mov	r1, r3
 8001630:	480c      	ldr	r0, [pc, #48]	; (8001664 <MX_ADC1_Init+0x124>)
 8001632:	f001 fc37 	bl	8002ea4 <HAL_ADC_ConfigChannel>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800163c:	f000 fde0 	bl	8002200 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <MX_ADC1_Init+0x130>)
 8001642:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001644:	2306      	movs	r3, #6
 8001646:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001648:	463b      	mov	r3, r7
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_ADC1_Init+0x124>)
 800164e:	f001 fc29 	bl	8002ea4 <HAL_ADC_ConfigChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001658:	f000 fdd2 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000180 	.word	0x20000180
 8001668:	40012000 	.word	0x40012000
 800166c:	0f000001 	.word	0x0f000001
 8001670:	10000012 	.word	0x10000012

08001674 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a15      	ldr	r2, [pc, #84]	; (80016e8 <HAL_ADC_MspInit+0x74>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d123      	bne.n	80016de <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <HAL_ADC_MspInit+0x78>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	4a14      	ldr	r2, [pc, #80]	; (80016ec <HAL_ADC_MspInit+0x78>)
 800169c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a0:	6453      	str	r3, [r2, #68]	; 0x44
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_ADC_MspInit+0x78>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <HAL_ADC_MspInit+0x78>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a0e      	ldr	r2, [pc, #56]	; (80016ec <HAL_ADC_MspInit+0x78>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <HAL_ADC_MspInit+0x78>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 80016c6:	23f8      	movs	r3, #248	; 0xf8
 80016c8:	617b      	str	r3, [r7, #20]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ca:	2303      	movs	r3, #3
 80016cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	4805      	ldr	r0, [pc, #20]	; (80016f0 <HAL_ADC_MspInit+0x7c>)
 80016da:	f002 fdb1 	bl	8004240 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80016de:	bf00      	nop
 80016e0:	3728      	adds	r7, #40	; 0x28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40012000 	.word	0x40012000
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020000 	.word	0x40020000

080016f4 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80016f8:	4b17      	ldr	r3, [pc, #92]	; (8001758 <MX_CAN1_Init+0x64>)
 80016fa:	4a18      	ldr	r2, [pc, #96]	; (800175c <MX_CAN1_Init+0x68>)
 80016fc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80016fe:	4b16      	ldr	r3, [pc, #88]	; (8001758 <MX_CAN1_Init+0x64>)
 8001700:	2210      	movs	r2, #16
 8001702:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_CAN1_Init+0x64>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <MX_CAN1_Init+0x64>)
 800170c:	2200      	movs	r2, #0
 800170e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_CAN1_Init+0x64>)
 8001712:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001716:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <MX_CAN1_Init+0x64>)
 800171a:	2200      	movs	r2, #0
 800171c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_CAN1_Init+0x64>)
 8001720:	2200      	movs	r2, #0
 8001722:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_CAN1_Init+0x64>)
 8001726:	2200      	movs	r2, #0
 8001728:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_CAN1_Init+0x64>)
 800172c:	2200      	movs	r2, #0
 800172e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_CAN1_Init+0x64>)
 8001732:	2200      	movs	r2, #0
 8001734:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <MX_CAN1_Init+0x64>)
 8001738:	2200      	movs	r2, #0
 800173a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_CAN1_Init+0x64>)
 800173e:	2200      	movs	r2, #0
 8001740:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_CAN1_Init+0x64>)
 8001744:	f001 fdfe 	bl	8003344 <HAL_CAN_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800174e:	f000 fd57 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200001f0 	.word	0x200001f0
 800175c:	40006400 	.word	0x40006400

08001760 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8001764:	4b33      	ldr	r3, [pc, #204]	; (8001834 <MX_CAN3_Init+0xd4>)
 8001766:	4a34      	ldr	r2, [pc, #208]	; (8001838 <MX_CAN3_Init+0xd8>)
 8001768:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 800176a:	4b32      	ldr	r3, [pc, #200]	; (8001834 <MX_CAN3_Init+0xd4>)
 800176c:	2206      	movs	r2, #6
 800176e:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001770:	4b30      	ldr	r3, [pc, #192]	; (8001834 <MX_CAN3_Init+0xd4>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001776:	4b2f      	ldr	r3, [pc, #188]	; (8001834 <MX_CAN3_Init+0xd4>)
 8001778:	2200      	movs	r2, #0
 800177a:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 800177c:	4b2d      	ldr	r3, [pc, #180]	; (8001834 <MX_CAN3_Init+0xd4>)
 800177e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001782:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001784:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <MX_CAN3_Init+0xd4>)
 8001786:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800178a:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 800178c:	4b29      	ldr	r3, [pc, #164]	; (8001834 <MX_CAN3_Init+0xd4>)
 800178e:	2200      	movs	r2, #0
 8001790:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8001792:	4b28      	ldr	r3, [pc, #160]	; (8001834 <MX_CAN3_Init+0xd4>)
 8001794:	2200      	movs	r2, #0
 8001796:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001798:	4b26      	ldr	r3, [pc, #152]	; (8001834 <MX_CAN3_Init+0xd4>)
 800179a:	2200      	movs	r2, #0
 800179c:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 800179e:	4b25      	ldr	r3, [pc, #148]	; (8001834 <MX_CAN3_Init+0xd4>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 80017a4:	4b23      	ldr	r3, [pc, #140]	; (8001834 <MX_CAN3_Init+0xd4>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 80017aa:	4b22      	ldr	r3, [pc, #136]	; (8001834 <MX_CAN3_Init+0xd4>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 80017b0:	4820      	ldr	r0, [pc, #128]	; (8001834 <MX_CAN3_Init+0xd4>)
 80017b2:	f001 fdc7 	bl	8003344 <HAL_CAN_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 80017bc:	f000 fd20 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */
	// Starte CAN Bus
	if ((HAL_CAN_Start(&hcan3)) != HAL_OK)
 80017c0:	481c      	ldr	r0, [pc, #112]	; (8001834 <MX_CAN3_Init+0xd4>)
 80017c2:	f001 ffa7 	bl	8003714 <HAL_CAN_Start>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_CAN3_Init+0x70>
	{
		// Fehler beim Starten des CAN-Busses
		Error_Handler();
 80017cc:	f000 fd18 	bl	8002200 <Error_Handler>
	}

	// Aktiviere Interrupt fuer CAN-Bus
	if ((HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_FULL)) != HAL_OK)
 80017d0:	2104      	movs	r1, #4
 80017d2:	4818      	ldr	r0, [pc, #96]	; (8001834 <MX_CAN3_Init+0xd4>)
 80017d4:	f002 f9c4 	bl	8003b60 <HAL_CAN_ActivateNotification>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_CAN3_Init+0x82>
	{
		// Fehler in der Initialisierung des CAN-Interrupts
		Error_Handler();
 80017de:	f000 fd0f 	bl	8002200 <Error_Handler>
	}

	// Filter Bank initialisieren um Daten zu empfangen
	// Akzeptiere alle CAN-Pakete
	sFilterConfig.FilterBank = 0;
 80017e2:	4b16      	ldr	r3, [pc, #88]	; (800183c <MX_CAN3_Init+0xdc>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <MX_CAN3_Init+0xdc>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80017ee:	4b13      	ldr	r3, [pc, #76]	; (800183c <MX_CAN3_Init+0xdc>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x111 << 5;
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_CAN3_Init+0xdc>)
 80017f6:	f242 2220 	movw	r2, #8736	; 0x2220
 80017fa:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <MX_CAN3_Init+0xdc>)
 80017fe:	2200      	movs	r2, #0
 8001800:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x111 << 5;
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <MX_CAN3_Init+0xdc>)
 8001804:	f242 2220 	movw	r2, #8736	; 0x2220
 8001808:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0;
 800180a:	4b0c      	ldr	r3, [pc, #48]	; (800183c <MX_CAN3_Init+0xdc>)
 800180c:	2200      	movs	r2, #0
 800180e:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = 0;
 8001810:	4b0a      	ldr	r3, [pc, #40]	; (800183c <MX_CAN3_Init+0xdc>)
 8001812:	2200      	movs	r2, #0
 8001814:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <MX_CAN3_Init+0xdc>)
 8001818:	2201      	movs	r2, #1
 800181a:	621a      	str	r2, [r3, #32]

	// Filter Bank schreiben
	if ((HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 800181c:	4907      	ldr	r1, [pc, #28]	; (800183c <MX_CAN3_Init+0xdc>)
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <MX_CAN3_Init+0xd4>)
 8001820:	f001 fe8c 	bl	800353c <HAL_CAN_ConfigFilter>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_CAN3_Init+0xce>
	{
		// Fehler beim konfigurieren der Filterbank fue den CAN-Bus
		Error_Handler();
 800182a:	f000 fce9 	bl	8002200 <Error_Handler>
	}
  /* USER CODE END CAN3_Init 2 */

}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000218 	.word	0x20000218
 8001838:	40003400 	.word	0x40003400
 800183c:	200001c8 	.word	0x200001c8

08001840 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08c      	sub	sp, #48	; 0x30
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 031c 	add.w	r3, r7, #28
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a36      	ldr	r2, [pc, #216]	; (8001938 <HAL_CAN_MspInit+0xf8>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d128      	bne.n	80018b4 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001862:	4b36      	ldr	r3, [pc, #216]	; (800193c <HAL_CAN_MspInit+0xfc>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	4a35      	ldr	r2, [pc, #212]	; (800193c <HAL_CAN_MspInit+0xfc>)
 8001868:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800186c:	6413      	str	r3, [r2, #64]	; 0x40
 800186e:	4b33      	ldr	r3, [pc, #204]	; (800193c <HAL_CAN_MspInit+0xfc>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001876:	61bb      	str	r3, [r7, #24]
 8001878:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800187a:	4b30      	ldr	r3, [pc, #192]	; (800193c <HAL_CAN_MspInit+0xfc>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a2f      	ldr	r2, [pc, #188]	; (800193c <HAL_CAN_MspInit+0xfc>)
 8001880:	f043 0308 	orr.w	r3, r3, #8
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b2d      	ldr	r3, [pc, #180]	; (800193c <HAL_CAN_MspInit+0xfc>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001892:	2303      	movs	r3, #3
 8001894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189e:	2303      	movs	r3, #3
 80018a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80018a2:	2309      	movs	r3, #9
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a6:	f107 031c 	add.w	r3, r7, #28
 80018aa:	4619      	mov	r1, r3
 80018ac:	4824      	ldr	r0, [pc, #144]	; (8001940 <HAL_CAN_MspInit+0x100>)
 80018ae:	f002 fcc7 	bl	8004240 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 80018b2:	e03d      	b.n	8001930 <HAL_CAN_MspInit+0xf0>
  else if(canHandle->Instance==CAN3)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a22      	ldr	r2, [pc, #136]	; (8001944 <HAL_CAN_MspInit+0x104>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d138      	bne.n	8001930 <HAL_CAN_MspInit+0xf0>
    __HAL_RCC_CAN3_CLK_ENABLE();
 80018be:	4b1f      	ldr	r3, [pc, #124]	; (800193c <HAL_CAN_MspInit+0xfc>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	4a1e      	ldr	r2, [pc, #120]	; (800193c <HAL_CAN_MspInit+0xfc>)
 80018c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018c8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ca:	4b1c      	ldr	r3, [pc, #112]	; (800193c <HAL_CAN_MspInit+0xfc>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	4b19      	ldr	r3, [pc, #100]	; (800193c <HAL_CAN_MspInit+0xfc>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a18      	ldr	r2, [pc, #96]	; (800193c <HAL_CAN_MspInit+0xfc>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b16      	ldr	r3, [pc, #88]	; (800193c <HAL_CAN_MspInit+0xfc>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 80018ee:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80018f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fc:	2303      	movs	r3, #3
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001900:	230b      	movs	r3, #11
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001904:	f107 031c 	add.w	r3, r7, #28
 8001908:	4619      	mov	r1, r3
 800190a:	480f      	ldr	r0, [pc, #60]	; (8001948 <HAL_CAN_MspInit+0x108>)
 800190c:	f002 fc98 	bl	8004240 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN3_TX_IRQn, 0, 0);
 8001910:	2200      	movs	r2, #0
 8001912:	2100      	movs	r1, #0
 8001914:	2068      	movs	r0, #104	; 0x68
 8001916:	f002 fc5c 	bl	80041d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_TX_IRQn);
 800191a:	2068      	movs	r0, #104	; 0x68
 800191c:	f002 fc75 	bl	800420a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 8001920:	2200      	movs	r2, #0
 8001922:	2100      	movs	r1, #0
 8001924:	2069      	movs	r0, #105	; 0x69
 8001926:	f002 fc54 	bl	80041d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 800192a:	2069      	movs	r0, #105	; 0x69
 800192c:	f002 fc6d 	bl	800420a <HAL_NVIC_EnableIRQ>
}
 8001930:	bf00      	nop
 8001932:	3730      	adds	r7, #48	; 0x30
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40006400 	.word	0x40006400
 800193c:	40023800 	.word	0x40023800
 8001940:	40020c00 	.word	0x40020c00
 8001944:	40003400 	.word	0x40003400
 8001948:	40020000 	.word	0x40020000

0800194c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08e      	sub	sp, #56	; 0x38
 8001950:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
 8001960:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001962:	4bb4      	ldr	r3, [pc, #720]	; (8001c34 <MX_GPIO_Init+0x2e8>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4ab3      	ldr	r2, [pc, #716]	; (8001c34 <MX_GPIO_Init+0x2e8>)
 8001968:	f043 0310 	orr.w	r3, r3, #16
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4bb1      	ldr	r3, [pc, #708]	; (8001c34 <MX_GPIO_Init+0x2e8>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0310 	and.w	r3, r3, #16
 8001976:	623b      	str	r3, [r7, #32]
 8001978:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800197a:	4bae      	ldr	r3, [pc, #696]	; (8001c34 <MX_GPIO_Init+0x2e8>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4aad      	ldr	r2, [pc, #692]	; (8001c34 <MX_GPIO_Init+0x2e8>)
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4bab      	ldr	r3, [pc, #684]	; (8001c34 <MX_GPIO_Init+0x2e8>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001992:	4ba8      	ldr	r3, [pc, #672]	; (8001c34 <MX_GPIO_Init+0x2e8>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4aa7      	ldr	r2, [pc, #668]	; (8001c34 <MX_GPIO_Init+0x2e8>)
 8001998:	f043 0320 	orr.w	r3, r3, #32
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4ba5      	ldr	r3, [pc, #660]	; (8001c34 <MX_GPIO_Init+0x2e8>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0320 	and.w	r3, r3, #32
 80019a6:	61bb      	str	r3, [r7, #24]
 80019a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019aa:	4ba2      	ldr	r3, [pc, #648]	; (8001c34 <MX_GPIO_Init+0x2e8>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4aa1      	ldr	r2, [pc, #644]	; (8001c34 <MX_GPIO_Init+0x2e8>)
 80019b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b9f      	ldr	r3, [pc, #636]	; (8001c34 <MX_GPIO_Init+0x2e8>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	4b9c      	ldr	r3, [pc, #624]	; (8001c34 <MX_GPIO_Init+0x2e8>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a9b      	ldr	r2, [pc, #620]	; (8001c34 <MX_GPIO_Init+0x2e8>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b99      	ldr	r3, [pc, #612]	; (8001c34 <MX_GPIO_Init+0x2e8>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019da:	4b96      	ldr	r3, [pc, #600]	; (8001c34 <MX_GPIO_Init+0x2e8>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a95      	ldr	r2, [pc, #596]	; (8001c34 <MX_GPIO_Init+0x2e8>)
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b93      	ldr	r3, [pc, #588]	; (8001c34 <MX_GPIO_Init+0x2e8>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019f2:	4b90      	ldr	r3, [pc, #576]	; (8001c34 <MX_GPIO_Init+0x2e8>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a8f      	ldr	r2, [pc, #572]	; (8001c34 <MX_GPIO_Init+0x2e8>)
 80019f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b8d      	ldr	r3, [pc, #564]	; (8001c34 <MX_GPIO_Init+0x2e8>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a0a:	4b8a      	ldr	r3, [pc, #552]	; (8001c34 <MX_GPIO_Init+0x2e8>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a89      	ldr	r2, [pc, #548]	; (8001c34 <MX_GPIO_Init+0x2e8>)
 8001a10:	f043 0308 	orr.w	r3, r3, #8
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
 8001a16:	4b87      	ldr	r3, [pc, #540]	; (8001c34 <MX_GPIO_Init+0x2e8>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 8001a22:	2200      	movs	r2, #0
 8001a24:	f248 0187 	movw	r1, #32903	; 0x8087
 8001a28:	4883      	ldr	r0, [pc, #524]	; (8001c38 <MX_GPIO_Init+0x2ec>)
 8001a2a:	f002 fdcd 	bl	80045c8 <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin, GPIO_PIN_RESET);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f242 0102 	movw	r1, #8194	; 0x2002
 8001a34:	4881      	ldr	r0, [pc, #516]	; (8001c3c <MX_GPIO_Init+0x2f0>)
 8001a36:	f002 fdc7 	bl	80045c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f240 6102 	movw	r1, #1538	; 0x602
 8001a40:	487f      	ldr	r0, [pc, #508]	; (8001c40 <MX_GPIO_Init+0x2f4>)
 8001a42:	f002 fdc1 	bl	80045c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8001a46:	2200      	movs	r2, #0
 8001a48:	f244 0184 	movw	r1, #16516	; 0x4084
 8001a4c:	487d      	ldr	r0, [pc, #500]	; (8001c44 <MX_GPIO_Init+0x2f8>)
 8001a4e:	f002 fdbb 	bl	80045c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISOSPI_CS_GPIO_Port, ISOSPI_CS_Pin, GPIO_PIN_SET);
 8001a52:	2201      	movs	r2, #1
 8001a54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a58:	4877      	ldr	r0, [pc, #476]	; (8001c38 <MX_GPIO_Init+0x2ec>)
 8001a5a:	f002 fdb5 	bl	80045c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 8001a64:	4878      	ldr	r0, [pc, #480]	; (8001c48 <MX_GPIO_Init+0x2fc>)
 8001a66:	f002 fdaf 	bl	80045c8 <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2118      	movs	r1, #24
 8001a6e:	4877      	ldr	r0, [pc, #476]	; (8001c4c <MX_GPIO_Init+0x300>)
 8001a70:	f002 fdaa 	bl	80045c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_CS_Pin|ISOSPI_EN_Pin
 8001a74:	f648 0387 	movw	r3, #34951	; 0x8887
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
                          |FREIGABE_Pin|INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a82:	2300      	movs	r3, #0
 8001a84:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	486a      	ldr	r0, [pc, #424]	; (8001c38 <MX_GPIO_Init+0x2ec>)
 8001a8e:	f002 fbd7 	bl	8004240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 8001a92:	f44f 739c 	mov.w	r3, #312	; 0x138
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4864      	ldr	r0, [pc, #400]	; (8001c38 <MX_GPIO_Init+0x2ec>)
 8001aa8:	f002 fbca 	bl	8004240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8001aac:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001abe:	4619      	mov	r1, r3
 8001ac0:	485d      	ldr	r0, [pc, #372]	; (8001c38 <MX_GPIO_Init+0x2ec>)
 8001ac2:	f002 fbbd 	bl	8004240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PCPin PC7 PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001ac6:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |SD_SW_Pin|GPIO_PIN_7|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001acc:	2303      	movs	r3, #3
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad8:	4619      	mov	r1, r3
 8001ada:	485d      	ldr	r0, [pc, #372]	; (8001c50 <MX_GPIO_Init+0x304>)
 8001adc:	f002 fbb0 	bl	8004240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF3 PF4 PF5
                           PFPin PFPin PFPin PFPin
                           PF10 PF11 PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001ae0:	f645 73f9 	movw	r3, #24569	; 0x5ff9
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af2:	4619      	mov	r1, r3
 8001af4:	4851      	ldr	r0, [pc, #324]	; (8001c3c <MX_GPIO_Init+0x2f0>)
 8001af6:	f002 fba3 	bl	8004240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin;
 8001afa:	f242 0302 	movw	r3, #8194	; 0x2002
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b00:	2301      	movs	r3, #1
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b10:	4619      	mov	r1, r3
 8001b12:	484a      	ldr	r0, [pc, #296]	; (8001c3c <MX_GPIO_Init+0x2f0>)
 8001b14:	f002 fb94 	bl	8004240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin|PRECHARGE_IN_Pin;
 8001b18:	f248 0304 	movw	r3, #32772	; 0x8004
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4843      	ldr	r0, [pc, #268]	; (8001c3c <MX_GPIO_Init+0x2f0>)
 8001b2e:	f002 fb87 	bl	8004240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|HW_WAKE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 8001b32:	f641 0305 	movw	r3, #6149	; 0x1805
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b44:	4619      	mov	r1, r3
 8001b46:	483e      	ldr	r0, [pc, #248]	; (8001c40 <MX_GPIO_Init+0x2f4>)
 8001b48:	f002 fb7a 	bl	8004240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 8001b4c:	f240 6302 	movw	r3, #1538	; 0x602
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b52:	2301      	movs	r3, #1
 8001b54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b62:	4619      	mov	r1, r3
 8001b64:	4836      	ldr	r0, [pc, #216]	; (8001c40 <MX_GPIO_Init+0x2f4>)
 8001b66:	f002 fb6b 	bl	8004240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8001b6a:	f64b 7373 	movw	r3, #49011	; 0xbf73
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|I2C_SCL_Pin|I2C_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b70:	2303      	movs	r3, #3
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4831      	ldr	r0, [pc, #196]	; (8001c44 <MX_GPIO_Init+0x2f8>)
 8001b80:	f002 fb5e 	bl	8004240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 8001b84:	f244 0384 	movw	r3, #16516	; 0x4084
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4829      	ldr	r0, [pc, #164]	; (8001c44 <MX_GPIO_Init+0x2f8>)
 8001b9e:	f002 fb4f 	bl	8004240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG6 PG8
                           PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8
 8001ba2:	f240 3343 	movw	r3, #835	; 0x343
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
                          |POTI_MISO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4824      	ldr	r0, [pc, #144]	; (8001c48 <MX_GPIO_Init+0x2fc>)
 8001bb8:	f002 fb42 	bl	8004240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|SD_CMD_Pin;
 8001bbc:	f240 7304 	movw	r3, #1796	; 0x704
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bce:	4619      	mov	r1, r3
 8001bd0:	481e      	ldr	r0, [pc, #120]	; (8001c4c <MX_GPIO_Init+0x300>)
 8001bd2:	f002 fb35 	bl	8004240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 8001bd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 8001be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be8:	4619      	mov	r1, r3
 8001bea:	4818      	ldr	r0, [pc, #96]	; (8001c4c <MX_GPIO_Init+0x300>)
 8001bec:	f002 fb28 	bl	8004240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8001bf0:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c06:	4619      	mov	r1, r3
 8001c08:	480f      	ldr	r0, [pc, #60]	; (8001c48 <MX_GPIO_Init+0x2fc>)
 8001c0a:	f002 fb19 	bl	8004240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|DIGITAL2_Pin;
 8001c0e:	2318      	movs	r3, #24
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c12:	2301      	movs	r3, #1
 8001c14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c22:	4619      	mov	r1, r3
 8001c24:	4809      	ldr	r0, [pc, #36]	; (8001c4c <MX_GPIO_Init+0x300>)
 8001c26:	f002 fb0b 	bl	8004240 <HAL_GPIO_Init>

}
 8001c2a:	bf00      	nop
 8001c2c:	3738      	adds	r7, #56	; 0x38
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40021400 	.word	0x40021400
 8001c40:	40020000 	.word	0x40020000
 8001c44:	40020400 	.word	0x40020400
 8001c48:	40021800 	.word	0x40021800
 8001c4c:	40020c00 	.word	0x40020c00
 8001c50:	40020800 	.word	0x40020800

08001c54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08c      	sub	sp, #48	; 0x30
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// BMS Statevariable
	BMS_states BMS_state = {Start, true, false, false, false};
 8001c5a:	7d3b      	ldrb	r3, [r7, #20]
 8001c5c:	f36f 0303 	bfc	r3, #0, #4
 8001c60:	753b      	strb	r3, [r7, #20]
 8001c62:	7d3b      	ldrb	r3, [r7, #20]
 8001c64:	f043 0310 	orr.w	r3, r3, #16
 8001c68:	753b      	strb	r3, [r7, #20]
 8001c6a:	7d3b      	ldrb	r3, [r7, #20]
 8001c6c:	f36f 1345 	bfc	r3, #5, #1
 8001c70:	753b      	strb	r3, [r7, #20]
 8001c72:	7d3b      	ldrb	r3, [r7, #20]
 8001c74:	f36f 1386 	bfc	r3, #6, #1
 8001c78:	753b      	strb	r3, [r7, #20]
 8001c7a:	7d3b      	ldrb	r3, [r7, #20]
 8001c7c:	f36f 13c7 	bfc	r3, #7, #1
 8001c80:	753b      	strb	r3, [r7, #20]

	// BMS Statemaschine Zeitvariablen
	uint32_t timeStandby = 0, timeError = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c86:	2300      	movs	r3, #0
 8001c88:	62bb      	str	r3, [r7, #40]	; 0x28

	// BMS CAN-Bus Zeitvariable, Errorvariable
	uint8_t can_online = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t timeBAMO = 0, timeMOTOR = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	623b      	str	r3, [r7, #32]
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]

	// CAN-Bus Receive Message
	CAN_message_t RxMessage;

	// Backup Data, stored in RTC_Backup Register
	uint32_t Backup = 0xFFFF;
 8001c98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c9c:	61bb      	str	r3, [r7, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c9e:	f000 fff4 	bl	8002c8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ca2:	f000 fa3b 	bl	800211c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_USART2_UART_Init();
 8001ca6:	f000 ff39 	bl	8002b1c <MX_USART2_UART_Init>

#ifdef DEBUG
	app_info();
 8001caa:	f7ff fa63 	bl	8001174 <app_info>
	HAL_Delay(3000);
 8001cae:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001cb2:	f001 f847 	bl	8002d44 <HAL_Delay>
#endif

	uartTransmit("Start\n", 6);
 8001cb6:	2106      	movs	r1, #6
 8001cb8:	48c2      	ldr	r0, [pc, #776]	; (8001fc4 <main+0x370>)
 8001cba:	f7fe fc43 	bl	8000544 <uartTransmit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cbe:	f7ff fe45 	bl	800194c <MX_GPIO_Init>
  MX_CAN1_Init();
 8001cc2:	f7ff fd17 	bl	80016f4 <MX_CAN1_Init>
  MX_SPI4_Init();
 8001cc6:	f000 fb8d 	bl	80023e4 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 8001cca:	f000 ff27 	bl	8002b1c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001cce:	f7ff fc37 	bl	8001540 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001cd2:	f000 fd0d 	bl	80026f0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001cd6:	f000 fdaf 	bl	8002838 <MX_TIM4_Init>
  MX_SPI1_Init();
 8001cda:	f000 fb45 	bl	8002368 <MX_SPI1_Init>
  MX_CAN3_Init();
 8001cde:	f7ff fd3f 	bl	8001760 <MX_CAN3_Init>
  MX_TIM6_Init();
 8001ce2:	f000 fe25 	bl	8002930 <MX_TIM6_Init>
  MX_RTC_Init();
 8001ce6:	f000 fab9 	bl	800225c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

#ifdef DEBUG
	#define MAINWHILE			"\nStarte While Schleife\n"
	uartTransmit(MAINWHILE, sizeof(MAINWHILE));
 8001cea:	2118      	movs	r1, #24
 8001cec:	48b6      	ldr	r0, [pc, #728]	; (8001fc8 <main+0x374>)
 8001cee:	f7fe fc29 	bl	8000544 <uartTransmit>

	uartTransmit("Ready\n", 6);
 8001cf2:	2106      	movs	r1, #6
 8001cf4:	48b5      	ldr	r0, [pc, #724]	; (8001fcc <main+0x378>)
 8001cf6:	f7fe fc25 	bl	8000544 <uartTransmit>
#endif

	HAL_PWR_EnableBkUpAccess();
 8001cfa:	f002 fc7f 	bl	80045fc <HAL_PWR_EnableBkUpAccess>
	Backup = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1);
 8001cfe:	2101      	movs	r1, #1
 8001d00:	48b3      	ldr	r0, [pc, #716]	; (8001fd0 <main+0x37c>)
 8001d02:	f003 ff3c 	bl	8005b7e <HAL_RTCEx_BKUPRead>
 8001d06:	61b8      	str	r0, [r7, #24]

	CANinit(RX_SIZE_16, TX_SIZE_16);
 8001d08:	2110      	movs	r1, #16
 8001d0a:	2010      	movs	r0, #16
 8001d0c:	f7fe fc4e 	bl	80005ac <CANinit>
	CAN_config();
 8001d10:	f7fe ff24 	bl	8000b5c <CAN_config>
	// system_out.Power_On = true;
	BMS_state.States = Ready;
 8001d14:	7d3b      	ldrb	r3, [r7, #20]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f362 0303 	bfi	r3, r2, #0, #4
 8001d1c:	753b      	strb	r3, [r7, #20]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Alle Eingaenge einlesen
	  readall_inputs();
 8001d1e:	f7ff fa55 	bl	80011cc <readall_inputs>
	  // TODO: ADCs

	  // Shutdown-Circuit checken
	  // checkSDC();

	  if (CAN_available() >= 1)
 8001d22:	f7fe fcb9 	bl	8000698 <CAN_available>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d01e      	beq.n	8001d6a <main+0x116>
	  {
		  CANread(&RxMessage);
 8001d2c:	463b      	mov	r3, r7
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fcde 	bl	80006f0 <CANread>

		  switch (RxMessage.id)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	f240 1239 	movw	r2, #313	; 0x139
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d00c      	beq.n	8001d58 <main+0x104>
 8001d3e:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8001d42:	d112      	bne.n	8001d6a <main+0x116>
		  {
			  // Bamocar ID
			  case 0x210:
			  {
				  can_online |= (1 << 0);
 8001d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				  timeBAMO = millis();
 8001d50:	f7ff faf0 	bl	8001334 <millis>
 8001d54:	6238      	str	r0, [r7, #32]
				  break;
 8001d56:	e008      	b.n	8001d6a <main+0x116>
			  }

			  // Motorsteuergeraet Safety ID
			  case MOTOR_CAN_SAFETY:
			  {
				  timeMOTOR = millis();
 8001d58:	f7ff faec 	bl	8001334 <millis>
 8001d5c:	61f8      	str	r0, [r7, #28]
				  can_online |= (1 << 1);
 8001d5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d62:	f043 0302 	orr.w	r3, r3, #2
 8001d66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  }
		  }
	  }

	  if (millis() > (timeBAMO + CAN_TIMEOUT))
 8001d6a:	f7ff fae3 	bl	8001334 <millis>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d905      	bls.n	8001d86 <main+0x132>
	  {
		  can_online &= ~(1 << 0);
 8001d7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d7e:	f023 0301 	bic.w	r3, r3, #1
 8001d82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  }
	  if (millis() > (timeMOTOR + CAN_TIMEOUT))
 8001d86:	f7ff fad5 	bl	8001334 <millis>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d905      	bls.n	8001da2 <main+0x14e>
	  {
		  can_online &= ~(1 << 1);
 8001d96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d9a:	f023 0302 	bic.w	r3, r3, #2
 8001d9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  }

	  // Crash Ausgeloest
	  if (system_in.Crash != 1)
 8001da2:	4b8c      	ldr	r3, [pc, #560]	; (8001fd4 <main+0x380>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d107      	bne.n	8001dc0 <main+0x16c>
	  {
		  BMS_state.CriticalError = true;
 8001db0:	7d3b      	ldrb	r3, [r7, #20]
 8001db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db6:	753b      	strb	r3, [r7, #20]
		  BMS_state.Normal = false;
 8001db8:	7d3b      	ldrb	r3, [r7, #20]
 8001dba:	f36f 1304 	bfc	r3, #4, #1
 8001dbe:	753b      	strb	r3, [r7, #20]
	  }

	  // Wenn Statemaschine nicht im Standby ist
	  if (BMS_state.States != Standby)
 8001dc0:	7d3b      	ldrb	r3, [r7, #20]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b07      	cmp	r3, #7
 8001dca:	d001      	beq.n	8001dd0 <main+0x17c>
	  {
		  // Schreibe alle CAN-Nachrichten auf BUS, wenn nicht im Standby
		  CANwork();
 8001dcc:	f7fe fcac 	bl	8000728 <CANwork>
	  }

	  // Statemaschine keine Fehler
	  if (BMS_state.Normal)
 8001dd0:	7d3b      	ldrb	r3, [r7, #20]
 8001dd2:	f003 0310 	and.w	r3, r3, #16
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d009      	beq.n	8001df0 <main+0x19c>
	  {
		  leuchten_out.RedLed = false;
 8001ddc:	4a7e      	ldr	r2, [pc, #504]	; (8001fd8 <main+0x384>)
 8001dde:	7813      	ldrb	r3, [r2, #0]
 8001de0:	f36f 1345 	bfc	r3, #5, #1
 8001de4:	7013      	strb	r3, [r2, #0]
		  leuchten_out.GreenLed = true;
 8001de6:	4a7c      	ldr	r2, [pc, #496]	; (8001fd8 <main+0x384>)
 8001de8:	7813      	ldrb	r3, [r2, #0]
 8001dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dee:	7013      	strb	r3, [r2, #0]
	  }

	  // Statemaschine hat Warnungen
	  if (BMS_state.Warning)
 8001df0:	7d3b      	ldrb	r3, [r7, #20]
 8001df2:	f003 0320 	and.w	r3, r3, #32
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d01e      	beq.n	8001e3a <main+0x1e6>
	  {
		  if (millis() - timeError > 1000)
 8001dfc:	f7ff fa9a 	bl	8001334 <millis>
 8001e00:	4602      	mov	r2, r0
 8001e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e0a:	d911      	bls.n	8001e30 <main+0x1dc>
		  {
			  leuchten_out.RedLed = !leuchten_out.RedLed;
 8001e0c:	4b72      	ldr	r3, [pc, #456]	; (8001fd8 <main+0x384>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	f003 0320 	and.w	r3, r3, #32
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	bf0c      	ite	eq
 8001e1a:	2301      	moveq	r3, #1
 8001e1c:	2300      	movne	r3, #0
 8001e1e:	b2d9      	uxtb	r1, r3
 8001e20:	4a6d      	ldr	r2, [pc, #436]	; (8001fd8 <main+0x384>)
 8001e22:	7813      	ldrb	r3, [r2, #0]
 8001e24:	f361 1345 	bfi	r3, r1, #5, #1
 8001e28:	7013      	strb	r3, [r2, #0]
			  timeError = millis();
 8001e2a:	f7ff fa83 	bl	8001334 <millis>
 8001e2e:	62b8      	str	r0, [r7, #40]	; 0x28
		  }

		  leuchten_out.GreenLed = true;
 8001e30:	4a69      	ldr	r2, [pc, #420]	; (8001fd8 <main+0x384>)
 8001e32:	7813      	ldrb	r3, [r2, #0]
 8001e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e38:	7013      	strb	r3, [r2, #0]
	  }

	  // Statemaschine hat Error
	  if (BMS_state.Error)
 8001e3a:	7d3b      	ldrb	r3, [r7, #20]
 8001e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d01e      	beq.n	8001e84 <main+0x230>
	  {
		  if (millis() - timeError > 1000)
 8001e46:	f7ff fa75 	bl	8001334 <millis>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e54:	d911      	bls.n	8001e7a <main+0x226>
		  {
			  leuchten_out.RedLed = !leuchten_out.RedLed;
 8001e56:	4b60      	ldr	r3, [pc, #384]	; (8001fd8 <main+0x384>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	f003 0320 	and.w	r3, r3, #32
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	bf0c      	ite	eq
 8001e64:	2301      	moveq	r3, #1
 8001e66:	2300      	movne	r3, #0
 8001e68:	b2d9      	uxtb	r1, r3
 8001e6a:	4a5b      	ldr	r2, [pc, #364]	; (8001fd8 <main+0x384>)
 8001e6c:	7813      	ldrb	r3, [r2, #0]
 8001e6e:	f361 1345 	bfi	r3, r1, #5, #1
 8001e72:	7013      	strb	r3, [r2, #0]
			  timeError = millis();
 8001e74:	f7ff fa5e 	bl	8001334 <millis>
 8001e78:	62b8      	str	r0, [r7, #40]	; 0x28
		  }

		  leuchten_out.GreenLed = false;
 8001e7a:	4a57      	ldr	r2, [pc, #348]	; (8001fd8 <main+0x384>)
 8001e7c:	7813      	ldrb	r3, [r2, #0]
 8001e7e:	f36f 1386 	bfc	r3, #6, #1
 8001e82:	7013      	strb	r3, [r2, #0]
	  }

	  // Statemaschine hat Kritische Fehler
	  if (BMS_state.CriticalError)
 8001e84:	7d3b      	ldrb	r3, [r7, #20]
 8001e86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d009      	beq.n	8001ea4 <main+0x250>
	  {
		  leuchten_out.RedLed = true;
 8001e90:	4a51      	ldr	r2, [pc, #324]	; (8001fd8 <main+0x384>)
 8001e92:	7813      	ldrb	r3, [r2, #0]
 8001e94:	f043 0320 	orr.w	r3, r3, #32
 8001e98:	7013      	strb	r3, [r2, #0]
		  leuchten_out.GreenLed = false;
 8001e9a:	4a4f      	ldr	r2, [pc, #316]	; (8001fd8 <main+0x384>)
 8001e9c:	7813      	ldrb	r3, [r2, #0]
 8001e9e:	f36f 1386 	bfc	r3, #6, #1
 8001ea2:	7013      	strb	r3, [r2, #0]
	  }

	  // Statemaschine vom Batteriemanagement-System
	  switch(BMS_state.States)
 8001ea4:	7d3b      	ldrb	r3, [r7, #20]
 8001ea6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	3b01      	subs	r3, #1
 8001eae:	2b07      	cmp	r3, #7
 8001eb0:	f200 8103 	bhi.w	80020ba <main+0x466>
 8001eb4:	a201      	add	r2, pc, #4	; (adr r2, 8001ebc <main+0x268>)
 8001eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eba:	bf00      	nop
 8001ebc:	08001edd 	.word	0x08001edd
 8001ec0:	08001ef1 	.word	0x08001ef1
 8001ec4:	08001f4d 	.word	0x08001f4d
 8001ec8:	08001f89 	.word	0x08001f89
 8001ecc:	08001ff9 	.word	0x08001ff9
 8001ed0:	08002033 	.word	0x08002033
 8001ed4:	0800205b 	.word	0x0800205b
 8001ed8:	080020a1 	.word	0x080020a1
	  {
		  // State Ready, Vorbereiten des Batteriemanagement
		  case Ready:
		  {
			  uartTransmit("KL15\n", 5);
 8001edc:	2105      	movs	r1, #5
 8001ede:	483f      	ldr	r0, [pc, #252]	; (8001fdc <main+0x388>)
 8001ee0:	f7fe fb30 	bl	8000544 <uartTransmit>
			  BMS_state.States = KL15;
 8001ee4:	7d3b      	ldrb	r3, [r7, #20]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	f362 0303 	bfi	r3, r2, #0, #4
 8001eec:	753b      	strb	r3, [r7, #20]

			  break;
 8001eee:	e0fc      	b.n	80020ea <main+0x496>
		  }

		  // State KL15, wenn Schluessel auf Position 2, KL15 eingeschaltet
		  case KL15:
		  {
			  if (!(BMS_state.CriticalError))
 8001ef0:	7d3b      	ldrb	r3, [r7, #20]
 8001ef2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d112      	bne.n	8001f22 <main+0x2ce>
			  {
				  uartTransmit("Anlassen\n", 9);
 8001efc:	2109      	movs	r1, #9
 8001efe:	4838      	ldr	r0, [pc, #224]	; (8001fe0 <main+0x38c>)
 8001f00:	f7fe fb20 	bl	8000544 <uartTransmit>
				  BMS_state.States = Anlassen;
 8001f04:	7d3b      	ldrb	r3, [r7, #20]
 8001f06:	2203      	movs	r2, #3
 8001f08:	f362 0303 	bfi	r3, r2, #0, #4
 8001f0c:	753b      	strb	r3, [r7, #20]

				  sdc_in.Anlassen = true;
 8001f0e:	4a35      	ldr	r2, [pc, #212]	; (8001fe4 <main+0x390>)
 8001f10:	7813      	ldrb	r3, [r2, #0]
 8001f12:	f043 0320 	orr.w	r3, r3, #32
 8001f16:	7013      	strb	r3, [r2, #0]

				  system_out.AmsOK = true;
 8001f18:	4a33      	ldr	r2, [pc, #204]	; (8001fe8 <main+0x394>)
 8001f1a:	7813      	ldrb	r3, [r2, #0]
 8001f1c:	f043 0304 	orr.w	r3, r3, #4
 8001f20:	7013      	strb	r3, [r2, #0]
			  }

			  if (system_in.KL15 == 1)
 8001f22:	4b2c      	ldr	r3, [pc, #176]	; (8001fd4 <main+0x380>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 80d1 	beq.w	80020d4 <main+0x480>
			  {
				  uartTransmit("Standby\n", 8);
 8001f32:	2108      	movs	r1, #8
 8001f34:	482d      	ldr	r0, [pc, #180]	; (8001fec <main+0x398>)
 8001f36:	f7fe fb05 	bl	8000544 <uartTransmit>
				  BMS_state.States = Standby;
 8001f3a:	7d3b      	ldrb	r3, [r7, #20]
 8001f3c:	2207      	movs	r2, #7
 8001f3e:	f362 0303 	bfi	r3, r2, #0, #4
 8001f42:	753b      	strb	r3, [r7, #20]
				  timeStandby = millis();
 8001f44:	f7ff f9f6 	bl	8001334 <millis>
 8001f48:	62f8      	str	r0, [r7, #44]	; 0x2c
			  }

			  break;
 8001f4a:	e0c3      	b.n	80020d4 <main+0x480>
		  // State Anlassen, wenn Schluessel auf Position 3 und keine kritischen Fehler, Anlasser einschalten
		  case Anlassen:
		  {
			  if (1)
			  {
				  uartTransmit("Precharge\n", 10);
 8001f4c:	210a      	movs	r1, #10
 8001f4e:	4828      	ldr	r0, [pc, #160]	; (8001ff0 <main+0x39c>)
 8001f50:	f7fe faf8 	bl	8000544 <uartTransmit>
				  BMS_state.States = Precharge;
 8001f54:	7d3b      	ldrb	r3, [r7, #20]
 8001f56:	2204      	movs	r2, #4
 8001f58:	f362 0303 	bfi	r3, r2, #0, #4
 8001f5c:	753b      	strb	r3, [r7, #20]
			  }

			  if (system_in.KL15 == 1)
 8001f5e:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <main+0x380>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 80b5 	beq.w	80020d8 <main+0x484>
			  {
				  uartTransmit("Standby\n", 8);
 8001f6e:	2108      	movs	r1, #8
 8001f70:	481e      	ldr	r0, [pc, #120]	; (8001fec <main+0x398>)
 8001f72:	f7fe fae7 	bl	8000544 <uartTransmit>
				  BMS_state.States = Standby;
 8001f76:	7d3b      	ldrb	r3, [r7, #20]
 8001f78:	2207      	movs	r2, #7
 8001f7a:	f362 0303 	bfi	r3, r2, #0, #4
 8001f7e:	753b      	strb	r3, [r7, #20]
				  timeStandby = millis();
 8001f80:	f7ff f9d8 	bl	8001334 <millis>
 8001f84:	62f8      	str	r0, [r7, #44]	; 0x2c
			  }

			  break;
 8001f86:	e0a7      	b.n	80020d8 <main+0x484>
		  // State Precharge,
		  case Precharge:
		  {
			  if (1)
			  {
				  uartTransmit("ReadyToDrive\n", 13);
 8001f88:	210d      	movs	r1, #13
 8001f8a:	481a      	ldr	r0, [pc, #104]	; (8001ff4 <main+0x3a0>)
 8001f8c:	f7fe fada 	bl	8000544 <uartTransmit>
				  BMS_state.States = ReadyToDrive;
 8001f90:	7d3b      	ldrb	r3, [r7, #20]
 8001f92:	2205      	movs	r2, #5
 8001f94:	f362 0303 	bfi	r3, r2, #0, #4
 8001f98:	753b      	strb	r3, [r7, #20]
			  }

			  if (system_in.KL15 == 1)
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <main+0x380>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 8099 	beq.w	80020dc <main+0x488>
			  {
				  uartTransmit("Standby\n", 8);
 8001faa:	2108      	movs	r1, #8
 8001fac:	480f      	ldr	r0, [pc, #60]	; (8001fec <main+0x398>)
 8001fae:	f7fe fac9 	bl	8000544 <uartTransmit>
				  BMS_state.States = Standby;
 8001fb2:	7d3b      	ldrb	r3, [r7, #20]
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	f362 0303 	bfi	r3, r2, #0, #4
 8001fba:	753b      	strb	r3, [r7, #20]
				  timeStandby = millis();
 8001fbc:	f7ff f9ba 	bl	8001334 <millis>
 8001fc0:	62f8      	str	r0, [r7, #44]	; 0x2c
			  }

			  break;
 8001fc2:	e08b      	b.n	80020dc <main+0x488>
 8001fc4:	08008300 	.word	0x08008300
 8001fc8:	08008308 	.word	0x08008308
 8001fcc:	08008320 	.word	0x08008320
 8001fd0:	20000240 	.word	0x20000240
 8001fd4:	20000164 	.word	0x20000164
 8001fd8:	20000178 	.word	0x20000178
 8001fdc:	08008328 	.word	0x08008328
 8001fe0:	08008330 	.word	0x08008330
 8001fe4:	20000168 	.word	0x20000168
 8001fe8:	20000170 	.word	0x20000170
 8001fec:	0800833c 	.word	0x0800833c
 8001ff0:	08008348 	.word	0x08008348
 8001ff4:	08008354 	.word	0x08008354
		  // State ReadyToDrive, wenn SDC OK ist
		  case ReadyToDrive:
		  {
			  if (1)
			  {
				  uartTransmit("Drive\n", 6);
 8001ff8:	2106      	movs	r1, #6
 8001ffa:	483d      	ldr	r0, [pc, #244]	; (80020f0 <main+0x49c>)
 8001ffc:	f7fe faa2 	bl	8000544 <uartTransmit>
				  BMS_state.States = Drive;
 8002000:	7d3b      	ldrb	r3, [r7, #20]
 8002002:	2206      	movs	r2, #6
 8002004:	f362 0303 	bfi	r3, r2, #0, #4
 8002008:	753b      	strb	r3, [r7, #20]
			  }

			  if (system_in.KL15 == 1)
 800200a:	4b3a      	ldr	r3, [pc, #232]	; (80020f4 <main+0x4a0>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d063      	beq.n	80020e0 <main+0x48c>
			  {
				  uartTransmit("Standby\n", 8);
 8002018:	2108      	movs	r1, #8
 800201a:	4837      	ldr	r0, [pc, #220]	; (80020f8 <main+0x4a4>)
 800201c:	f7fe fa92 	bl	8000544 <uartTransmit>
				  BMS_state.States = Standby;
 8002020:	7d3b      	ldrb	r3, [r7, #20]
 8002022:	2207      	movs	r2, #7
 8002024:	f362 0303 	bfi	r3, r2, #0, #4
 8002028:	753b      	strb	r3, [r7, #20]
				  timeStandby = millis();
 800202a:	f7ff f983 	bl	8001334 <millis>
 800202e:	62f8      	str	r0, [r7, #44]	; 0x2c
			  }

			  break;
 8002030:	e056      	b.n	80020e0 <main+0x48c>
		  }

		  // State Drive, wenn Fahrmodus manuell aktiviert wird
		  case Drive:
		  {
			  if (system_in.KL15 == 1)
 8002032:	4b30      	ldr	r3, [pc, #192]	; (80020f4 <main+0x4a0>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	d051      	beq.n	80020e4 <main+0x490>
			  {
				  uartTransmit("Standby\n", 8);
 8002040:	2108      	movs	r1, #8
 8002042:	482d      	ldr	r0, [pc, #180]	; (80020f8 <main+0x4a4>)
 8002044:	f7fe fa7e 	bl	8000544 <uartTransmit>
				  BMS_state.States = Standby;
 8002048:	7d3b      	ldrb	r3, [r7, #20]
 800204a:	2207      	movs	r2, #7
 800204c:	f362 0303 	bfi	r3, r2, #0, #4
 8002050:	753b      	strb	r3, [r7, #20]
				  timeStandby = millis();
 8002052:	f7ff f96f 	bl	8001334 <millis>
 8002056:	62f8      	str	r0, [r7, #44]	; 0x2c
			  }

			  break;
 8002058:	e044      	b.n	80020e4 <main+0x490>
		  }

		  // State Standby, wenn Schluessel gezogen wird, KL15 ausgeschaltet
		  case Standby:
		  {
			  if (millis() - timeStandby > BMSTIME)
 800205a:	f7ff f96b 	bl	8001334 <millis>
 800205e:	4602      	mov	r2, r0
 8002060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	4a25      	ldr	r2, [pc, #148]	; (80020fc <main+0x4a8>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d909      	bls.n	800207e <main+0x42a>
			  {
				  uartTransmit("Ausschalten\n", 12);
 800206a:	210c      	movs	r1, #12
 800206c:	4824      	ldr	r0, [pc, #144]	; (8002100 <main+0x4ac>)
 800206e:	f7fe fa69 	bl	8000544 <uartTransmit>
				  BMS_state.States = Ausschalten;
 8002072:	7d3b      	ldrb	r3, [r7, #20]
 8002074:	2208      	movs	r2, #8
 8002076:	f362 0303 	bfi	r3, r2, #0, #4
 800207a:	753b      	strb	r3, [r7, #20]
			  {
				  uartTransmit("Ready\n", 6);
				  BMS_state.States = Ready;
			  }

			  break;
 800207c:	e034      	b.n	80020e8 <main+0x494>
			  else if (system_in.KL15 != 1)
 800207e:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <main+0x4a0>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d12d      	bne.n	80020e8 <main+0x494>
				  uartTransmit("Ready\n", 6);
 800208c:	2106      	movs	r1, #6
 800208e:	481d      	ldr	r0, [pc, #116]	; (8002104 <main+0x4b0>)
 8002090:	f7fe fa58 	bl	8000544 <uartTransmit>
				  BMS_state.States = Ready;
 8002094:	7d3b      	ldrb	r3, [r7, #20]
 8002096:	2201      	movs	r2, #1
 8002098:	f362 0303 	bfi	r3, r2, #0, #4
 800209c:	753b      	strb	r3, [r7, #20]
			  break;
 800209e:	e023      	b.n	80020e8 <main+0x494>
		  }

		  // State Ausschalten, wenn Standby State laenger als 5min dauert
		  case Ausschalten:
		  {
			  system_out.systemoutput = 0;
 80020a0:	4b19      	ldr	r3, [pc, #100]	; (8002108 <main+0x4b4>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	701a      	strb	r2, [r3, #0]
			  highcurrent_out.high_out = 0;
 80020a6:	4b19      	ldr	r3, [pc, #100]	; (800210c <main+0x4b8>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]
			  leuchten_out.ledoutput = 0;
 80020ac:	4b18      	ldr	r3, [pc, #96]	; (8002110 <main+0x4bc>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	701a      	strb	r2, [r3, #0]
			  sdc_in.sdcinput = 0;
 80020b2:	4b18      	ldr	r3, [pc, #96]	; (8002114 <main+0x4c0>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	701a      	strb	r2, [r3, #0]

			  break;
 80020b8:	e017      	b.n	80020ea <main+0x496>
		  }

		  // Falls kein State zutrifft, dann kritischer Fehler
		  default:
		  {
			  uartTransmit("BMS Kritischer Fehler\n!", 24);
 80020ba:	2118      	movs	r1, #24
 80020bc:	4816      	ldr	r0, [pc, #88]	; (8002118 <main+0x4c4>)
 80020be:	f7fe fa41 	bl	8000544 <uartTransmit>
			  BMS_state.CriticalError = true;
 80020c2:	7d3b      	ldrb	r3, [r7, #20]
 80020c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c8:	753b      	strb	r3, [r7, #20]
			  BMS_state.Normal = false;
 80020ca:	7d3b      	ldrb	r3, [r7, #20]
 80020cc:	f36f 1304 	bfc	r3, #4, #1
 80020d0:	753b      	strb	r3, [r7, #20]

			  break;
 80020d2:	e00a      	b.n	80020ea <main+0x496>
			  break;
 80020d4:	bf00      	nop
 80020d6:	e008      	b.n	80020ea <main+0x496>
			  break;
 80020d8:	bf00      	nop
 80020da:	e006      	b.n	80020ea <main+0x496>
			  break;
 80020dc:	bf00      	nop
 80020de:	e004      	b.n	80020ea <main+0x496>
			  break;
 80020e0:	bf00      	nop
 80020e2:	e002      	b.n	80020ea <main+0x496>
			  break;
 80020e4:	bf00      	nop
 80020e6:	e000      	b.n	80020ea <main+0x496>
			  break;
 80020e8:	bf00      	nop
		  }
	  }

	  // Alle Ausgaenge schreiben
	  writeall_outputs();
 80020ea:	f7ff f92b 	bl	8001344 <writeall_outputs>
	  readall_inputs();
 80020ee:	e616      	b.n	8001d1e <main+0xca>
 80020f0:	08008364 	.word	0x08008364
 80020f4:	20000164 	.word	0x20000164
 80020f8:	0800833c 	.word	0x0800833c
 80020fc:	000493e0 	.word	0x000493e0
 8002100:	0800836c 	.word	0x0800836c
 8002104:	08008320 	.word	0x08008320
 8002108:	20000170 	.word	0x20000170
 800210c:	20000174 	.word	0x20000174
 8002110:	20000178 	.word	0x20000178
 8002114:	20000168 	.word	0x20000168
 8002118:	0800837c 	.word	0x0800837c

0800211c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b094      	sub	sp, #80	; 0x50
 8002120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002122:	f107 031c 	add.w	r3, r7, #28
 8002126:	2234      	movs	r2, #52	; 0x34
 8002128:	2100      	movs	r1, #0
 800212a:	4618      	mov	r0, r3
 800212c:	f005 feec 	bl	8007f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002130:	f107 0308 	add.w	r3, r7, #8
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002140:	4b2d      	ldr	r3, [pc, #180]	; (80021f8 <SystemClock_Config+0xdc>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	4a2c      	ldr	r2, [pc, #176]	; (80021f8 <SystemClock_Config+0xdc>)
 8002146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214a:	6413      	str	r3, [r2, #64]	; 0x40
 800214c:	4b2a      	ldr	r3, [pc, #168]	; (80021f8 <SystemClock_Config+0xdc>)
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002154:	607b      	str	r3, [r7, #4]
 8002156:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002158:	4b28      	ldr	r3, [pc, #160]	; (80021fc <SystemClock_Config+0xe0>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a27      	ldr	r2, [pc, #156]	; (80021fc <SystemClock_Config+0xe0>)
 800215e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	4b25      	ldr	r3, [pc, #148]	; (80021fc <SystemClock_Config+0xe0>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800216c:	603b      	str	r3, [r7, #0]
 800216e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002170:	2309      	movs	r3, #9
 8002172:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002174:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002178:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800217a:	2301      	movs	r3, #1
 800217c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800217e:	2302      	movs	r3, #2
 8002180:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002182:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002186:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002188:	2319      	movs	r3, #25
 800218a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 800218c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002190:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002192:	2302      	movs	r3, #2
 8002194:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002196:	2308      	movs	r3, #8
 8002198:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800219a:	2302      	movs	r3, #2
 800219c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800219e:	f107 031c 	add.w	r3, r7, #28
 80021a2:	4618      	mov	r0, r3
 80021a4:	f002 fa8a 	bl	80046bc <HAL_RCC_OscConfig>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80021ae:	f000 f827 	bl	8002200 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80021b2:	f002 fa33 	bl	800461c <HAL_PWREx_EnableOverDrive>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80021bc:	f000 f820 	bl	8002200 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021c0:	230f      	movs	r3, #15
 80021c2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021c4:	2302      	movs	r3, #2
 80021c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021d6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80021d8:	f107 0308 	add.w	r3, r7, #8
 80021dc:	2107      	movs	r1, #7
 80021de:	4618      	mov	r0, r3
 80021e0:	f002 fd1a 	bl	8004c18 <HAL_RCC_ClockConfig>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80021ea:	f000 f809 	bl	8002200 <Error_Handler>
  }
}
 80021ee:	bf00      	nop
 80021f0:	3750      	adds	r7, #80	; 0x50
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40007000 	.word	0x40007000

08002200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002204:	b672      	cpsid	i
}
 8002206:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 8002208:	4a11      	ldr	r2, [pc, #68]	; (8002250 <Error_Handler+0x50>)
 800220a:	7813      	ldrb	r3, [r2, #0]
 800220c:	f043 0320 	orr.w	r3, r3, #32
 8002210:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8002212:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <Error_Handler+0x50>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800221a:	b2db      	uxtb	r3, r3
 800221c:	461a      	mov	r2, r3
 800221e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002222:	480c      	ldr	r0, [pc, #48]	; (8002254 <Error_Handler+0x54>)
 8002224:	f002 f9d0 	bl	80045c8 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8002228:	4a09      	ldr	r2, [pc, #36]	; (8002250 <Error_Handler+0x50>)
 800222a:	7813      	ldrb	r3, [r2, #0]
 800222c:	f36f 1386 	bfc	r3, #6, #1
 8002230:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 8002232:	4b07      	ldr	r3, [pc, #28]	; (8002250 <Error_Handler+0x50>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800223a:	b2db      	uxtb	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	2104      	movs	r1, #4
 8002240:	4804      	ldr	r0, [pc, #16]	; (8002254 <Error_Handler+0x54>)
 8002242:	f002 f9c1 	bl	80045c8 <HAL_GPIO_WritePin>

	// Sende Nachricht auf Uart-Interface
#ifdef DEBUG
#define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
	uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 8002246:	2122      	movs	r1, #34	; 0x22
 8002248:	4803      	ldr	r0, [pc, #12]	; (8002258 <Error_Handler+0x58>)
 800224a:	f7fe f97b 	bl	8000544 <uartTransmit>
#endif
	// Beginne Endlosschleife nachdem Fehler aufgetreten ist
	while (1)
 800224e:	e7fe      	b.n	800224e <Error_Handler+0x4e>
 8002250:	20000178 	.word	0x20000178
 8002254:	40020400 	.word	0x40020400
 8002258:	08008394 	.word	0x08008394

0800225c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002260:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <MX_RTC_Init+0x58>)
 8002262:	4a15      	ldr	r2, [pc, #84]	; (80022b8 <MX_RTC_Init+0x5c>)
 8002264:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002266:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <MX_RTC_Init+0x58>)
 8002268:	2200      	movs	r2, #0
 800226a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <MX_RTC_Init+0x58>)
 800226e:	227f      	movs	r2, #127	; 0x7f
 8002270:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <MX_RTC_Init+0x58>)
 8002274:	22ff      	movs	r2, #255	; 0xff
 8002276:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_WAKEUP;
 8002278:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <MX_RTC_Init+0x58>)
 800227a:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 800227e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <MX_RTC_Init+0x58>)
 8002282:	2200      	movs	r2, #0
 8002284:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002286:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <MX_RTC_Init+0x58>)
 8002288:	2200      	movs	r2, #0
 800228a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800228c:	4809      	ldr	r0, [pc, #36]	; (80022b4 <MX_RTC_Init+0x58>)
 800228e:	f003 fad1 	bl	8005834 <HAL_RTC_Init>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8002298:	f7ff ffb2 	bl	8002200 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800229c:	2200      	movs	r2, #0
 800229e:	2100      	movs	r1, #0
 80022a0:	4804      	ldr	r0, [pc, #16]	; (80022b4 <MX_RTC_Init+0x58>)
 80022a2:	f003 fbcf 	bl	8005a44 <HAL_RTCEx_SetWakeUpTimer>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80022ac:	f7ff ffa8 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80022b0:	bf00      	nop
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20000240 	.word	0x20000240
 80022b8:	40002800 	.word	0x40002800

080022bc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b0ac      	sub	sp, #176	; 0xb0
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022d4:	f107 030c 	add.w	r3, r7, #12
 80022d8:	2290      	movs	r2, #144	; 0x90
 80022da:	2100      	movs	r1, #0
 80022dc:	4618      	mov	r0, r3
 80022de:	f005 fe13 	bl	8007f08 <memset>
  if(rtcHandle->Instance==RTC)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a1d      	ldr	r2, [pc, #116]	; (800235c <HAL_RTC_MspInit+0xa0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d133      	bne.n	8002354 <HAL_RTC_MspInit+0x98>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022ec:	2320      	movs	r3, #32
 80022ee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80022f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022f6:	f107 030c 	add.w	r3, r7, #12
 80022fa:	4618      	mov	r0, r3
 80022fc:	f002 fe72 	bl	8004fe4 <HAL_RCCEx_PeriphCLKConfig>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_RTC_MspInit+0x4e>
    {
      Error_Handler();
 8002306:	f7ff ff7b 	bl	8002200 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800230a:	4b15      	ldr	r3, [pc, #84]	; (8002360 <HAL_RTC_MspInit+0xa4>)
 800230c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230e:	4a14      	ldr	r2, [pc, #80]	; (8002360 <HAL_RTC_MspInit+0xa4>)
 8002310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002314:	6713      	str	r3, [r2, #112]	; 0x70

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002316:	4b12      	ldr	r3, [pc, #72]	; (8002360 <HAL_RTC_MspInit+0xa4>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	4a11      	ldr	r2, [pc, #68]	; (8002360 <HAL_RTC_MspInit+0xa4>)
 800231c:	f043 0304 	orr.w	r3, r3, #4
 8002320:	6313      	str	r3, [r2, #48]	; 0x30
 8002322:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <HAL_RTC_MspInit+0xa4>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration
    PC13     ------> RTC_OUT
    */
    GPIO_InitStruct.Pin = POWER_ON_Pin;
 800232e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002332:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002336:	2302      	movs	r3, #2
 8002338:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002342:	2300      	movs	r3, #0
 8002344:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8002348:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800234c:	4619      	mov	r1, r3
 800234e:	4805      	ldr	r0, [pc, #20]	; (8002364 <HAL_RTC_MspInit+0xa8>)
 8002350:	f001 ff76 	bl	8004240 <HAL_GPIO_Init>

  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002354:	bf00      	nop
 8002356:	37b0      	adds	r7, #176	; 0xb0
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40002800 	.word	0x40002800
 8002360:	40023800 	.word	0x40023800
 8002364:	40020800 	.word	0x40020800

08002368 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800236c:	4b1b      	ldr	r3, [pc, #108]	; (80023dc <MX_SPI1_Init+0x74>)
 800236e:	4a1c      	ldr	r2, [pc, #112]	; (80023e0 <MX_SPI1_Init+0x78>)
 8002370:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002372:	4b1a      	ldr	r3, [pc, #104]	; (80023dc <MX_SPI1_Init+0x74>)
 8002374:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002378:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800237a:	4b18      	ldr	r3, [pc, #96]	; (80023dc <MX_SPI1_Init+0x74>)
 800237c:	2200      	movs	r2, #0
 800237e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002380:	4b16      	ldr	r3, [pc, #88]	; (80023dc <MX_SPI1_Init+0x74>)
 8002382:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002386:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002388:	4b14      	ldr	r3, [pc, #80]	; (80023dc <MX_SPI1_Init+0x74>)
 800238a:	2200      	movs	r2, #0
 800238c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800238e:	4b13      	ldr	r3, [pc, #76]	; (80023dc <MX_SPI1_Init+0x74>)
 8002390:	2200      	movs	r2, #0
 8002392:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <MX_SPI1_Init+0x74>)
 8002396:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800239a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800239c:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <MX_SPI1_Init+0x74>)
 800239e:	2230      	movs	r2, #48	; 0x30
 80023a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <MX_SPI1_Init+0x74>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <MX_SPI1_Init+0x74>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023ae:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <MX_SPI1_Init+0x74>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <MX_SPI1_Init+0x74>)
 80023b6:	2207      	movs	r2, #7
 80023b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <MX_SPI1_Init+0x74>)
 80023bc:	2200      	movs	r2, #0
 80023be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <MX_SPI1_Init+0x74>)
 80023c2:	2208      	movs	r2, #8
 80023c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023c6:	4805      	ldr	r0, [pc, #20]	; (80023dc <MX_SPI1_Init+0x74>)
 80023c8:	f003 fbf1 	bl	8005bae <HAL_SPI_Init>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80023d2:	f7ff ff15 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000260 	.word	0x20000260
 80023e0:	40013000 	.word	0x40013000

080023e4 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80023e8:	4b1b      	ldr	r3, [pc, #108]	; (8002458 <MX_SPI4_Init+0x74>)
 80023ea:	4a1c      	ldr	r2, [pc, #112]	; (800245c <MX_SPI4_Init+0x78>)
 80023ec:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80023ee:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <MX_SPI4_Init+0x74>)
 80023f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023f4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80023f6:	4b18      	ldr	r3, [pc, #96]	; (8002458 <MX_SPI4_Init+0x74>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80023fc:	4b16      	ldr	r3, [pc, #88]	; (8002458 <MX_SPI4_Init+0x74>)
 80023fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002402:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002404:	4b14      	ldr	r3, [pc, #80]	; (8002458 <MX_SPI4_Init+0x74>)
 8002406:	2202      	movs	r2, #2
 8002408:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 800240a:	4b13      	ldr	r3, [pc, #76]	; (8002458 <MX_SPI4_Init+0x74>)
 800240c:	2201      	movs	r2, #1
 800240e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <MX_SPI4_Init+0x74>)
 8002412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002416:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002418:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <MX_SPI4_Init+0x74>)
 800241a:	2230      	movs	r2, #48	; 0x30
 800241c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800241e:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <MX_SPI4_Init+0x74>)
 8002420:	2200      	movs	r2, #0
 8002422:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <MX_SPI4_Init+0x74>)
 8002426:	2200      	movs	r2, #0
 8002428:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800242a:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <MX_SPI4_Init+0x74>)
 800242c:	2200      	movs	r2, #0
 800242e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002430:	4b09      	ldr	r3, [pc, #36]	; (8002458 <MX_SPI4_Init+0x74>)
 8002432:	2207      	movs	r2, #7
 8002434:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002436:	4b08      	ldr	r3, [pc, #32]	; (8002458 <MX_SPI4_Init+0x74>)
 8002438:	2200      	movs	r2, #0
 800243a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <MX_SPI4_Init+0x74>)
 800243e:	2200      	movs	r2, #0
 8002440:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002442:	4805      	ldr	r0, [pc, #20]	; (8002458 <MX_SPI4_Init+0x74>)
 8002444:	f003 fbb3 	bl	8005bae <HAL_SPI_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800244e:	f7ff fed7 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	200002c4 	.word	0x200002c4
 800245c:	40013400 	.word	0x40013400

08002460 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08c      	sub	sp, #48	; 0x30
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002468:	f107 031c 	add.w	r3, r7, #28
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a3d      	ldr	r2, [pc, #244]	; (8002574 <HAL_SPI_MspInit+0x114>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d145      	bne.n	800250e <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002482:	4b3d      	ldr	r3, [pc, #244]	; (8002578 <HAL_SPI_MspInit+0x118>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	4a3c      	ldr	r2, [pc, #240]	; (8002578 <HAL_SPI_MspInit+0x118>)
 8002488:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800248c:	6453      	str	r3, [r2, #68]	; 0x44
 800248e:	4b3a      	ldr	r3, [pc, #232]	; (8002578 <HAL_SPI_MspInit+0x118>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002496:	61bb      	str	r3, [r7, #24]
 8002498:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800249a:	4b37      	ldr	r3, [pc, #220]	; (8002578 <HAL_SPI_MspInit+0x118>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	4a36      	ldr	r2, [pc, #216]	; (8002578 <HAL_SPI_MspInit+0x118>)
 80024a0:	f043 0308 	orr.w	r3, r3, #8
 80024a4:	6313      	str	r3, [r2, #48]	; 0x30
 80024a6:	4b34      	ldr	r3, [pc, #208]	; (8002578 <HAL_SPI_MspInit+0x118>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80024b2:	4b31      	ldr	r3, [pc, #196]	; (8002578 <HAL_SPI_MspInit+0x118>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4a30      	ldr	r2, [pc, #192]	; (8002578 <HAL_SPI_MspInit+0x118>)
 80024b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024bc:	6313      	str	r3, [r2, #48]	; 0x30
 80024be:	4b2e      	ldr	r3, [pc, #184]	; (8002578 <HAL_SPI_MspInit+0x118>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c6:	613b      	str	r3, [r7, #16]
 80024c8:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ce:	2302      	movs	r3, #2
 80024d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d6:	2303      	movs	r3, #3
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024da:	2305      	movs	r3, #5
 80024dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 80024de:	f107 031c 	add.w	r3, r7, #28
 80024e2:	4619      	mov	r1, r3
 80024e4:	4825      	ldr	r0, [pc, #148]	; (800257c <HAL_SPI_MspInit+0x11c>)
 80024e6:	f001 feab 	bl	8004240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTI_CS_Pin|POTI_SCK_Pin;
 80024ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f0:	2302      	movs	r3, #2
 80024f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f8:	2303      	movs	r3, #3
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024fc:	2305      	movs	r3, #5
 80024fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002500:	f107 031c 	add.w	r3, r7, #28
 8002504:	4619      	mov	r1, r3
 8002506:	481e      	ldr	r0, [pc, #120]	; (8002580 <HAL_SPI_MspInit+0x120>)
 8002508:	f001 fe9a 	bl	8004240 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800250c:	e02d      	b.n	800256a <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI4)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a1c      	ldr	r2, [pc, #112]	; (8002584 <HAL_SPI_MspInit+0x124>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d128      	bne.n	800256a <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002518:	4b17      	ldr	r3, [pc, #92]	; (8002578 <HAL_SPI_MspInit+0x118>)
 800251a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251c:	4a16      	ldr	r2, [pc, #88]	; (8002578 <HAL_SPI_MspInit+0x118>)
 800251e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002522:	6453      	str	r3, [r2, #68]	; 0x44
 8002524:	4b14      	ldr	r3, [pc, #80]	; (8002578 <HAL_SPI_MspInit+0x118>)
 8002526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002530:	4b11      	ldr	r3, [pc, #68]	; (8002578 <HAL_SPI_MspInit+0x118>)
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	4a10      	ldr	r2, [pc, #64]	; (8002578 <HAL_SPI_MspInit+0x118>)
 8002536:	f043 0310 	orr.w	r3, r3, #16
 800253a:	6313      	str	r3, [r2, #48]	; 0x30
 800253c:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <HAL_SPI_MspInit+0x118>)
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002540:	f003 0310 	and.w	r3, r3, #16
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 8002548:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800254c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254e:	2302      	movs	r3, #2
 8002550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2300      	movs	r3, #0
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002556:	2303      	movs	r3, #3
 8002558:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800255a:	2305      	movs	r3, #5
 800255c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800255e:	f107 031c 	add.w	r3, r7, #28
 8002562:	4619      	mov	r1, r3
 8002564:	4808      	ldr	r0, [pc, #32]	; (8002588 <HAL_SPI_MspInit+0x128>)
 8002566:	f001 fe6b 	bl	8004240 <HAL_GPIO_Init>
}
 800256a:	bf00      	nop
 800256c:	3730      	adds	r7, #48	; 0x30
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40013000 	.word	0x40013000
 8002578:	40023800 	.word	0x40023800
 800257c:	40020c00 	.word	0x40020c00
 8002580:	40021800 	.word	0x40021800
 8002584:	40013400 	.word	0x40013400
 8002588:	40021000 	.word	0x40021000

0800258c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002592:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <HAL_MspInit+0x44>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <HAL_MspInit+0x44>)
 8002598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259c:	6413      	str	r3, [r2, #64]	; 0x40
 800259e:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <HAL_MspInit+0x44>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a6:	607b      	str	r3, [r7, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <HAL_MspInit+0x44>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	4a08      	ldr	r2, [pc, #32]	; (80025d0 <HAL_MspInit+0x44>)
 80025b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b4:	6453      	str	r3, [r2, #68]	; 0x44
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_MspInit+0x44>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025be:	603b      	str	r3, [r7, #0]
 80025c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800

080025d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025e2:	b480      	push	{r7}
 80025e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025e6:	e7fe      	b.n	80025e6 <HardFault_Handler+0x4>

080025e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025ec:	e7fe      	b.n	80025ec <MemManage_Handler+0x4>

080025ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025f2:	e7fe      	b.n	80025f2 <BusFault_Handler+0x4>

080025f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025f8:	e7fe      	b.n	80025f8 <UsageFault_Handler+0x4>

080025fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002628:	f000 fb6c 	bl	8002d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800262c:	bf00      	nop
 800262e:	bd80      	pop	{r7, pc}

08002630 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002634:	4802      	ldr	r0, [pc, #8]	; (8002640 <TIM1_CC_IRQHandler+0x10>)
 8002636:	f003 fc74 	bl	8005f22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	2000032c 	.word	0x2000032c

08002644 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002648:	4802      	ldr	r0, [pc, #8]	; (8002654 <TIM6_DAC_IRQHandler+0x10>)
 800264a:	f003 fc6a 	bl	8005f22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	200003c4 	.word	0x200003c4

08002658 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002660:	4a14      	ldr	r2, [pc, #80]	; (80026b4 <_sbrk+0x5c>)
 8002662:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <_sbrk+0x60>)
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800266c:	4b13      	ldr	r3, [pc, #76]	; (80026bc <_sbrk+0x64>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d102      	bne.n	800267a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002674:	4b11      	ldr	r3, [pc, #68]	; (80026bc <_sbrk+0x64>)
 8002676:	4a12      	ldr	r2, [pc, #72]	; (80026c0 <_sbrk+0x68>)
 8002678:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800267a:	4b10      	ldr	r3, [pc, #64]	; (80026bc <_sbrk+0x64>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4413      	add	r3, r2
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	429a      	cmp	r2, r3
 8002686:	d207      	bcs.n	8002698 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002688:	f005 fc56 	bl	8007f38 <__errno>
 800268c:	4603      	mov	r3, r0
 800268e:	220c      	movs	r2, #12
 8002690:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002692:	f04f 33ff 	mov.w	r3, #4294967295
 8002696:	e009      	b.n	80026ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002698:	4b08      	ldr	r3, [pc, #32]	; (80026bc <_sbrk+0x64>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800269e:	4b07      	ldr	r3, [pc, #28]	; (80026bc <_sbrk+0x64>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4413      	add	r3, r2
 80026a6:	4a05      	ldr	r2, [pc, #20]	; (80026bc <_sbrk+0x64>)
 80026a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026aa:	68fb      	ldr	r3, [r7, #12]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20080000 	.word	0x20080000
 80026b8:	00000400 	.word	0x00000400
 80026bc:	20000328 	.word	0x20000328
 80026c0:	200005e8 	.word	0x200005e8

080026c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026c8:	4b08      	ldr	r3, [pc, #32]	; (80026ec <SystemInit+0x28>)
 80026ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ce:	4a07      	ldr	r2, [pc, #28]	; (80026ec <SystemInit+0x28>)
 80026d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <SystemInit+0x28>)
 80026da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026de:	609a      	str	r2, [r3, #8]
#endif
}
 80026e0:	bf00      	nop
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b090      	sub	sp, #64	; 0x40
 80026f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	605a      	str	r2, [r3, #4]
 8002700:	609a      	str	r2, [r3, #8]
 8002702:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002704:	f107 031c 	add.w	r3, r7, #28
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002714:	f107 030c 	add.w	r3, r7, #12
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	605a      	str	r2, [r3, #4]
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002722:	463b      	mov	r3, r7
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800272c:	4b40      	ldr	r3, [pc, #256]	; (8002830 <MX_TIM1_Init+0x140>)
 800272e:	4a41      	ldr	r2, [pc, #260]	; (8002834 <MX_TIM1_Init+0x144>)
 8002730:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 675 - 1;
 8002732:	4b3f      	ldr	r3, [pc, #252]	; (8002830 <MX_TIM1_Init+0x140>)
 8002734:	f240 22a2 	movw	r2, #674	; 0x2a2
 8002738:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800273a:	4b3d      	ldr	r3, [pc, #244]	; (8002830 <MX_TIM1_Init+0x140>)
 800273c:	2200      	movs	r2, #0
 800273e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002740:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <MX_TIM1_Init+0x140>)
 8002742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002746:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002748:	4b39      	ldr	r3, [pc, #228]	; (8002830 <MX_TIM1_Init+0x140>)
 800274a:	2200      	movs	r2, #0
 800274c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800274e:	4b38      	ldr	r3, [pc, #224]	; (8002830 <MX_TIM1_Init+0x140>)
 8002750:	2200      	movs	r2, #0
 8002752:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002754:	4b36      	ldr	r3, [pc, #216]	; (8002830 <MX_TIM1_Init+0x140>)
 8002756:	2200      	movs	r2, #0
 8002758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800275a:	4835      	ldr	r0, [pc, #212]	; (8002830 <MX_TIM1_Init+0x140>)
 800275c:	f003 fad2 	bl	8005d04 <HAL_TIM_Base_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002766:	f7ff fd4b 	bl	8002200 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800276a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800276e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002770:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002774:	4619      	mov	r1, r3
 8002776:	482e      	ldr	r0, [pc, #184]	; (8002830 <MX_TIM1_Init+0x140>)
 8002778:	f003 fea2 	bl	80064c0 <HAL_TIM_ConfigClockSource>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002782:	f7ff fd3d 	bl	8002200 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002786:	482a      	ldr	r0, [pc, #168]	; (8002830 <MX_TIM1_Init+0x140>)
 8002788:	f003 fb6a 	bl	8005e60 <HAL_TIM_IC_Init>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002792:	f7ff fd35 	bl	8002200 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002796:	2304      	movs	r3, #4
 8002798:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800279a:	2350      	movs	r3, #80	; 0x50
 800279c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800279e:	2300      	movs	r3, #0
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80027a2:	2300      	movs	r3, #0
 80027a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80027aa:	f107 031c 	add.w	r3, r7, #28
 80027ae:	4619      	mov	r1, r3
 80027b0:	481f      	ldr	r0, [pc, #124]	; (8002830 <MX_TIM1_Init+0x140>)
 80027b2:	f003 ff4f 	bl	8006654 <HAL_TIM_SlaveConfigSynchro>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80027bc:	f7ff fd20 	bl	8002200 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80027c0:	2300      	movs	r3, #0
 80027c2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80027c4:	2301      	movs	r3, #1
 80027c6:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80027d0:	f107 030c 	add.w	r3, r7, #12
 80027d4:	2200      	movs	r2, #0
 80027d6:	4619      	mov	r1, r3
 80027d8:	4815      	ldr	r0, [pc, #84]	; (8002830 <MX_TIM1_Init+0x140>)
 80027da:	f003 fcc1 	bl	8006160 <HAL_TIM_IC_ConfigChannel>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80027e4:	f7ff fd0c 	bl	8002200 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80027e8:	2302      	movs	r3, #2
 80027ea:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80027ec:	2302      	movs	r3, #2
 80027ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80027f0:	f107 030c 	add.w	r3, r7, #12
 80027f4:	2204      	movs	r2, #4
 80027f6:	4619      	mov	r1, r3
 80027f8:	480d      	ldr	r0, [pc, #52]	; (8002830 <MX_TIM1_Init+0x140>)
 80027fa:	f003 fcb1 	bl	8006160 <HAL_TIM_IC_ConfigChannel>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8002804:	f7ff fcfc 	bl	8002200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002808:	2300      	movs	r3, #0
 800280a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800280c:	2300      	movs	r3, #0
 800280e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002810:	2300      	movs	r3, #0
 8002812:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002814:	463b      	mov	r3, r7
 8002816:	4619      	mov	r1, r3
 8002818:	4805      	ldr	r0, [pc, #20]	; (8002830 <MX_TIM1_Init+0x140>)
 800281a:	f004 fce5 	bl	80071e8 <HAL_TIMEx_MasterConfigSynchronization>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8002824:	f7ff fcec 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002828:	bf00      	nop
 800282a:	3740      	adds	r7, #64	; 0x40
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	2000032c 	.word	0x2000032c
 8002834:	40010000 	.word	0x40010000

08002838 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	; 0x28
 800283c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800283e:	f107 031c 	add.w	r3, r7, #28
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	605a      	str	r2, [r3, #4]
 8002848:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800284a:	463b      	mov	r3, r7
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]
 8002856:	611a      	str	r2, [r3, #16]
 8002858:	615a      	str	r2, [r3, #20]
 800285a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800285c:	4b32      	ldr	r3, [pc, #200]	; (8002928 <MX_TIM4_Init+0xf0>)
 800285e:	4a33      	ldr	r2, [pc, #204]	; (800292c <MX_TIM4_Init+0xf4>)
 8002860:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002862:	4b31      	ldr	r3, [pc, #196]	; (8002928 <MX_TIM4_Init+0xf0>)
 8002864:	2200      	movs	r2, #0
 8002866:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002868:	4b2f      	ldr	r3, [pc, #188]	; (8002928 <MX_TIM4_Init+0xf0>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800286e:	4b2e      	ldr	r3, [pc, #184]	; (8002928 <MX_TIM4_Init+0xf0>)
 8002870:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002874:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002876:	4b2c      	ldr	r3, [pc, #176]	; (8002928 <MX_TIM4_Init+0xf0>)
 8002878:	2200      	movs	r2, #0
 800287a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800287c:	4b2a      	ldr	r3, [pc, #168]	; (8002928 <MX_TIM4_Init+0xf0>)
 800287e:	2200      	movs	r2, #0
 8002880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002882:	4829      	ldr	r0, [pc, #164]	; (8002928 <MX_TIM4_Init+0xf0>)
 8002884:	f003 fa95 	bl	8005db2 <HAL_TIM_PWM_Init>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800288e:	f7ff fcb7 	bl	8002200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002896:	2300      	movs	r3, #0
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800289a:	f107 031c 	add.w	r3, r7, #28
 800289e:	4619      	mov	r1, r3
 80028a0:	4821      	ldr	r0, [pc, #132]	; (8002928 <MX_TIM4_Init+0xf0>)
 80028a2:	f004 fca1 	bl	80071e8 <HAL_TIMEx_MasterConfigSynchronization>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80028ac:	f7ff fca8 	bl	8002200 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028b0:	2360      	movs	r3, #96	; 0x60
 80028b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028b8:	2300      	movs	r3, #0
 80028ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028bc:	2300      	movs	r3, #0
 80028be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028c0:	463b      	mov	r3, r7
 80028c2:	2200      	movs	r2, #0
 80028c4:	4619      	mov	r1, r3
 80028c6:	4818      	ldr	r0, [pc, #96]	; (8002928 <MX_TIM4_Init+0xf0>)
 80028c8:	f003 fce6 	bl	8006298 <HAL_TIM_PWM_ConfigChannel>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80028d2:	f7ff fc95 	bl	8002200 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028d6:	463b      	mov	r3, r7
 80028d8:	2204      	movs	r2, #4
 80028da:	4619      	mov	r1, r3
 80028dc:	4812      	ldr	r0, [pc, #72]	; (8002928 <MX_TIM4_Init+0xf0>)
 80028de:	f003 fcdb 	bl	8006298 <HAL_TIM_PWM_ConfigChannel>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80028e8:	f7ff fc8a 	bl	8002200 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028ec:	463b      	mov	r3, r7
 80028ee:	2208      	movs	r2, #8
 80028f0:	4619      	mov	r1, r3
 80028f2:	480d      	ldr	r0, [pc, #52]	; (8002928 <MX_TIM4_Init+0xf0>)
 80028f4:	f003 fcd0 	bl	8006298 <HAL_TIM_PWM_ConfigChannel>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80028fe:	f7ff fc7f 	bl	8002200 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002902:	463b      	mov	r3, r7
 8002904:	220c      	movs	r2, #12
 8002906:	4619      	mov	r1, r3
 8002908:	4807      	ldr	r0, [pc, #28]	; (8002928 <MX_TIM4_Init+0xf0>)
 800290a:	f003 fcc5 	bl	8006298 <HAL_TIM_PWM_ConfigChannel>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002914:	f7ff fc74 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002918:	4803      	ldr	r0, [pc, #12]	; (8002928 <MX_TIM4_Init+0xf0>)
 800291a:	f000 f8c7 	bl	8002aac <HAL_TIM_MspPostInit>

}
 800291e:	bf00      	nop
 8002920:	3728      	adds	r7, #40	; 0x28
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20000378 	.word	0x20000378
 800292c:	40000800 	.word	0x40000800

08002930 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002936:	1d3b      	adds	r3, r7, #4
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002940:	4b14      	ldr	r3, [pc, #80]	; (8002994 <MX_TIM6_Init+0x64>)
 8002942:	4a15      	ldr	r2, [pc, #84]	; (8002998 <MX_TIM6_Init+0x68>)
 8002944:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 27;
 8002946:	4b13      	ldr	r3, [pc, #76]	; (8002994 <MX_TIM6_Init+0x64>)
 8002948:	221b      	movs	r2, #27
 800294a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800294c:	4b11      	ldr	r3, [pc, #68]	; (8002994 <MX_TIM6_Init+0x64>)
 800294e:	2200      	movs	r2, #0
 8002950:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000;
 8002952:	4b10      	ldr	r3, [pc, #64]	; (8002994 <MX_TIM6_Init+0x64>)
 8002954:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002958:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <MX_TIM6_Init+0x64>)
 800295c:	2200      	movs	r2, #0
 800295e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002960:	480c      	ldr	r0, [pc, #48]	; (8002994 <MX_TIM6_Init+0x64>)
 8002962:	f003 f9cf 	bl	8005d04 <HAL_TIM_Base_Init>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800296c:	f7ff fc48 	bl	8002200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002970:	2300      	movs	r3, #0
 8002972:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002974:	2300      	movs	r3, #0
 8002976:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002978:	1d3b      	adds	r3, r7, #4
 800297a:	4619      	mov	r1, r3
 800297c:	4805      	ldr	r0, [pc, #20]	; (8002994 <MX_TIM6_Init+0x64>)
 800297e:	f004 fc33 	bl	80071e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002988:	f7ff fc3a 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800298c:	bf00      	nop
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	200003c4 	.word	0x200003c4
 8002998:	40001000 	.word	0x40001000

0800299c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08a      	sub	sp, #40	; 0x28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	f107 0314 	add.w	r3, r7, #20
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a28      	ldr	r2, [pc, #160]	; (8002a5c <HAL_TIM_Base_MspInit+0xc0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d131      	bne.n	8002a22 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029be:	4b28      	ldr	r3, [pc, #160]	; (8002a60 <HAL_TIM_Base_MspInit+0xc4>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	4a27      	ldr	r2, [pc, #156]	; (8002a60 <HAL_TIM_Base_MspInit+0xc4>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ca:	4b25      	ldr	r3, [pc, #148]	; (8002a60 <HAL_TIM_Base_MspInit+0xc4>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	613b      	str	r3, [r7, #16]
 80029d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029d6:	4b22      	ldr	r3, [pc, #136]	; (8002a60 <HAL_TIM_Base_MspInit+0xc4>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	4a21      	ldr	r2, [pc, #132]	; (8002a60 <HAL_TIM_Base_MspInit+0xc4>)
 80029dc:	f043 0310 	orr.w	r3, r3, #16
 80029e0:	6313      	str	r3, [r2, #48]	; 0x30
 80029e2:	4b1f      	ldr	r3, [pc, #124]	; (8002a60 <HAL_TIM_Base_MspInit+0xc4>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 80029ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f4:	2302      	movs	r3, #2
 80029f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fc:	2300      	movs	r3, #0
 80029fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a00:	2301      	movs	r3, #1
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4816      	ldr	r0, [pc, #88]	; (8002a64 <HAL_TIM_Base_MspInit+0xc8>)
 8002a0c:	f001 fc18 	bl	8004240 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002a10:	2200      	movs	r2, #0
 8002a12:	2100      	movs	r1, #0
 8002a14:	201b      	movs	r0, #27
 8002a16:	f001 fbdc 	bl	80041d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002a1a:	201b      	movs	r0, #27
 8002a1c:	f001 fbf5 	bl	800420a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002a20:	e018      	b.n	8002a54 <HAL_TIM_Base_MspInit+0xb8>
  else if(tim_baseHandle->Instance==TIM6)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a10      	ldr	r2, [pc, #64]	; (8002a68 <HAL_TIM_Base_MspInit+0xcc>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d113      	bne.n	8002a54 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <HAL_TIM_Base_MspInit+0xc4>)
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	4a0b      	ldr	r2, [pc, #44]	; (8002a60 <HAL_TIM_Base_MspInit+0xc4>)
 8002a32:	f043 0310 	orr.w	r3, r3, #16
 8002a36:	6413      	str	r3, [r2, #64]	; 0x40
 8002a38:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <HAL_TIM_Base_MspInit+0xc4>)
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002a44:	2200      	movs	r2, #0
 8002a46:	2100      	movs	r1, #0
 8002a48:	2036      	movs	r0, #54	; 0x36
 8002a4a:	f001 fbc2 	bl	80041d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a4e:	2036      	movs	r0, #54	; 0x36
 8002a50:	f001 fbdb 	bl	800420a <HAL_NVIC_EnableIRQ>
}
 8002a54:	bf00      	nop
 8002a56:	3728      	adds	r7, #40	; 0x28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40010000 	.word	0x40010000
 8002a60:	40023800 	.word	0x40023800
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40001000 	.word	0x40001000

08002a6c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <HAL_TIM_PWM_MspInit+0x38>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d10b      	bne.n	8002a96 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	4a09      	ldr	r2, [pc, #36]	; (8002aa8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a84:	f043 0304 	orr.w	r3, r3, #4
 8002a88:	6413      	str	r3, [r2, #64]	; 0x40
 8002a8a:	4b07      	ldr	r3, [pc, #28]	; (8002aa8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002a96:	bf00      	nop
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40000800 	.word	0x40000800
 8002aa8:	40023800 	.word	0x40023800

08002aac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab4:	f107 030c 	add.w	r3, r7, #12
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	60da      	str	r2, [r3, #12]
 8002ac2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a11      	ldr	r2, [pc, #68]	; (8002b10 <HAL_TIM_MspPostInit+0x64>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d11c      	bne.n	8002b08 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ace:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <HAL_TIM_MspPostInit+0x68>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	4a10      	ldr	r2, [pc, #64]	; (8002b14 <HAL_TIM_MspPostInit+0x68>)
 8002ad4:	f043 0308 	orr.w	r3, r3, #8
 8002ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ada:	4b0e      	ldr	r3, [pc, #56]	; (8002b14 <HAL_TIM_MspPostInit+0x68>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin|PWM_HV_Charger_Pin;
 8002ae6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002aea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aec:	2302      	movs	r3, #2
 8002aee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002af8:	2302      	movs	r3, #2
 8002afa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002afc:	f107 030c 	add.w	r3, r7, #12
 8002b00:	4619      	mov	r1, r3
 8002b02:	4805      	ldr	r0, [pc, #20]	; (8002b18 <HAL_TIM_MspPostInit+0x6c>)
 8002b04:	f001 fb9c 	bl	8004240 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002b08:	bf00      	nop
 8002b0a:	3720      	adds	r7, #32
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40000800 	.word	0x40000800
 8002b14:	40023800 	.word	0x40023800
 8002b18:	40020c00 	.word	0x40020c00

08002b1c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b20:	4b14      	ldr	r3, [pc, #80]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b22:	4a15      	ldr	r2, [pc, #84]	; (8002b78 <MX_USART2_UART_Init+0x5c>)
 8002b24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002b26:	4b13      	ldr	r3, [pc, #76]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b28:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b2e:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b34:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b42:	220c      	movs	r2, #12
 8002b44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b46:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b4c:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b52:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b58:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b5e:	4805      	ldr	r0, [pc, #20]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b60:	f004 fbee 	bl	8007340 <HAL_UART_Init>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002b6a:	f7ff fb49 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20000410 	.word	0x20000410
 8002b78:	40004400 	.word	0x40004400

08002b7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b0ae      	sub	sp, #184	; 0xb8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	60da      	str	r2, [r3, #12]
 8002b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b94:	f107 0314 	add.w	r3, r7, #20
 8002b98:	2290      	movs	r2, #144	; 0x90
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f005 f9b3 	bl	8007f08 <memset>
  if(uartHandle->Instance==USART2)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a21      	ldr	r2, [pc, #132]	; (8002c2c <HAL_UART_MspInit+0xb0>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d13a      	bne.n	8002c22 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bb4:	f107 0314 	add.w	r3, r7, #20
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f002 fa13 	bl	8004fe4 <HAL_RCCEx_PeriphCLKConfig>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002bc4:	f7ff fb1c 	bl	8002200 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bc8:	4b19      	ldr	r3, [pc, #100]	; (8002c30 <HAL_UART_MspInit+0xb4>)
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	4a18      	ldr	r2, [pc, #96]	; (8002c30 <HAL_UART_MspInit+0xb4>)
 8002bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd4:	4b16      	ldr	r3, [pc, #88]	; (8002c30 <HAL_UART_MspInit+0xb4>)
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bdc:	613b      	str	r3, [r7, #16]
 8002bde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002be0:	4b13      	ldr	r3, [pc, #76]	; (8002c30 <HAL_UART_MspInit+0xb4>)
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	4a12      	ldr	r2, [pc, #72]	; (8002c30 <HAL_UART_MspInit+0xb4>)
 8002be6:	f043 0308 	orr.w	r3, r3, #8
 8002bea:	6313      	str	r3, [r2, #48]	; 0x30
 8002bec:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <HAL_UART_MspInit+0xb4>)
 8002bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf0:	f003 0308 	and.w	r3, r3, #8
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002bf8:	2360      	movs	r3, #96	; 0x60
 8002bfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c10:	2307      	movs	r3, #7
 8002c12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c16:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4805      	ldr	r0, [pc, #20]	; (8002c34 <HAL_UART_MspInit+0xb8>)
 8002c1e:	f001 fb0f 	bl	8004240 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002c22:	bf00      	nop
 8002c24:	37b8      	adds	r7, #184	; 0xb8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40004400 	.word	0x40004400
 8002c30:	40023800 	.word	0x40023800
 8002c34:	40020c00 	.word	0x40020c00

08002c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c3e:	e003      	b.n	8002c48 <LoopCopyDataInit>

08002c40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c40:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c46:	3104      	adds	r1, #4

08002c48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c48:	480b      	ldr	r0, [pc, #44]	; (8002c78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c4a:	4b0c      	ldr	r3, [pc, #48]	; (8002c7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c50:	d3f6      	bcc.n	8002c40 <CopyDataInit>
  ldr  r2, =_sbss
 8002c52:	4a0b      	ldr	r2, [pc, #44]	; (8002c80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c54:	e002      	b.n	8002c5c <LoopFillZerobss>

08002c56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c58:	f842 3b04 	str.w	r3, [r2], #4

08002c5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c5c:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c60:	d3f9      	bcc.n	8002c56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c62:	f7ff fd2f 	bl	80026c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c66:	f005 f96d 	bl	8007f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c6a:	f7fe fff3 	bl	8001c54 <main>
  bx  lr    
 8002c6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c70:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002c74:	08008408 	.word	0x08008408
  ldr  r0, =_sdata
 8002c78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c7c:	2000005c 	.word	0x2000005c
  ldr  r2, =_sbss
 8002c80:	2000005c 	.word	0x2000005c
  ldr  r3, = _ebss
 8002c84:	200005e4 	.word	0x200005e4

08002c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c88:	e7fe      	b.n	8002c88 <ADC_IRQHandler>

08002c8a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c8e:	2003      	movs	r0, #3
 8002c90:	f001 fa94 	bl	80041bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c94:	2000      	movs	r0, #0
 8002c96:	f000 f805 	bl	8002ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c9a:	f7ff fc77 	bl	800258c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cac:	4b12      	ldr	r3, [pc, #72]	; (8002cf8 <HAL_InitTick+0x54>)
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	4b12      	ldr	r3, [pc, #72]	; (8002cfc <HAL_InitTick+0x58>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f001 faaf 	bl	8004226 <HAL_SYSTICK_Config>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e00e      	b.n	8002cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b0f      	cmp	r3, #15
 8002cd6:	d80a      	bhi.n	8002cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cd8:	2200      	movs	r2, #0
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce0:	f001 fa77 	bl	80041d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ce4:	4a06      	ldr	r2, [pc, #24]	; (8002d00 <HAL_InitTick+0x5c>)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
 8002cec:	e000      	b.n	8002cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20000000 	.word	0x20000000
 8002cfc:	20000008 	.word	0x20000008
 8002d00:	20000004 	.word	0x20000004

08002d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <HAL_IncTick+0x20>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <HAL_IncTick+0x24>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4413      	add	r3, r2
 8002d14:	4a04      	ldr	r2, [pc, #16]	; (8002d28 <HAL_IncTick+0x24>)
 8002d16:	6013      	str	r3, [r2, #0]
}
 8002d18:	bf00      	nop
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	20000008 	.word	0x20000008
 8002d28:	20000498 	.word	0x20000498

08002d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d30:	4b03      	ldr	r3, [pc, #12]	; (8002d40 <HAL_GetTick+0x14>)
 8002d32:	681b      	ldr	r3, [r3, #0]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	20000498 	.word	0x20000498

08002d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d4c:	f7ff ffee 	bl	8002d2c <HAL_GetTick>
 8002d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5c:	d005      	beq.n	8002d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <HAL_Delay+0x44>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4413      	add	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d6a:	bf00      	nop
 8002d6c:	f7ff ffde 	bl	8002d2c <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d8f7      	bhi.n	8002d6c <HAL_Delay+0x28>
  {
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	bf00      	nop
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20000008 	.word	0x20000008

08002d8c <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 8002d90:	4b02      	ldr	r3, [pc, #8]	; (8002d9c <HAL_GetHalVersion+0x10>)
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	01030000 	.word	0x01030000

08002da0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8002da4:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <HAL_GetREVID+0x14>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	0c1b      	lsrs	r3, r3, #16
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	e0042000 	.word	0xe0042000

08002db8 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8002dbc:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <HAL_GetDEVID+0x18>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	e0042000 	.word	0xe0042000

08002dd4 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8002dd8:	4b03      	ldr	r3, [pc, #12]	; (8002de8 <HAL_GetUIDw0+0x14>)
 8002dda:	681b      	ldr	r3, [r3, #0]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	1ff0f420 	.word	0x1ff0f420

08002dec <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002df0:	4b03      	ldr	r3, [pc, #12]	; (8002e00 <HAL_GetUIDw1+0x14>)
 8002df2:	681b      	ldr	r3, [r3, #0]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	1ff0f424 	.word	0x1ff0f424

08002e04 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002e08:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <HAL_GetUIDw2+0x14>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	1ff0f428 	.word	0x1ff0f428

08002e1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e031      	b.n	8002e96 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d109      	bne.n	8002e4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7fe fc1a 	bl	8001674 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d116      	bne.n	8002e88 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e5e:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <HAL_ADC_Init+0x84>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	f043 0202 	orr.w	r2, r3, #2
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f970 	bl	8003150 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f023 0303 	bic.w	r3, r3, #3
 8002e7e:	f043 0201 	orr.w	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40
 8002e86:	e001      	b.n	8002e8c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	ffffeefd 	.word	0xffffeefd

08002ea4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x1c>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e136      	b.n	800312e <HAL_ADC_ConfigChannel+0x28a>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b09      	cmp	r3, #9
 8002ece:	d93a      	bls.n	8002f46 <HAL_ADC_ConfigChannel+0xa2>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ed8:	d035      	beq.n	8002f46 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68d9      	ldr	r1, [r3, #12]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	4613      	mov	r3, r2
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	4413      	add	r3, r2
 8002eee:	3b1e      	subs	r3, #30
 8002ef0:	2207      	movs	r2, #7
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43da      	mvns	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	400a      	ands	r2, r1
 8002efe:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a8d      	ldr	r2, [pc, #564]	; (800313c <HAL_ADC_ConfigChannel+0x298>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d10a      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68d9      	ldr	r1, [r3, #12]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	061a      	lsls	r2, r3, #24
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f1e:	e035      	b.n	8002f8c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68d9      	ldr	r1, [r3, #12]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	4618      	mov	r0, r3
 8002f32:	4603      	mov	r3, r0
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4403      	add	r3, r0
 8002f38:	3b1e      	subs	r3, #30
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f44:	e022      	b.n	8002f8c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6919      	ldr	r1, [r3, #16]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	461a      	mov	r2, r3
 8002f54:	4613      	mov	r3, r2
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	4413      	add	r3, r2
 8002f5a:	2207      	movs	r2, #7
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	43da      	mvns	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	400a      	ands	r2, r1
 8002f68:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6919      	ldr	r1, [r3, #16]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4403      	add	r3, r0
 8002f82:	409a      	lsls	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b06      	cmp	r3, #6
 8002f92:	d824      	bhi.n	8002fde <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3b05      	subs	r3, #5
 8002fa6:	221f      	movs	r2, #31
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43da      	mvns	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	400a      	ands	r2, r1
 8002fb4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	3b05      	subs	r3, #5
 8002fd0:	fa00 f203 	lsl.w	r2, r0, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	635a      	str	r2, [r3, #52]	; 0x34
 8002fdc:	e04c      	b.n	8003078 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b0c      	cmp	r3, #12
 8002fe4:	d824      	bhi.n	8003030 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3b23      	subs	r3, #35	; 0x23
 8002ff8:	221f      	movs	r2, #31
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	43da      	mvns	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	400a      	ands	r2, r1
 8003006:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	b29b      	uxth	r3, r3
 8003014:	4618      	mov	r0, r3
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	3b23      	subs	r3, #35	; 0x23
 8003022:	fa00 f203 	lsl.w	r2, r0, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	631a      	str	r2, [r3, #48]	; 0x30
 800302e:	e023      	b.n	8003078 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	3b41      	subs	r3, #65	; 0x41
 8003042:	221f      	movs	r2, #31
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43da      	mvns	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	400a      	ands	r2, r1
 8003050:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	b29b      	uxth	r3, r3
 800305e:	4618      	mov	r0, r3
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	3b41      	subs	r3, #65	; 0x41
 800306c:	fa00 f203 	lsl.w	r2, r0, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a30      	ldr	r2, [pc, #192]	; (8003140 <HAL_ADC_ConfigChannel+0x29c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d10a      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x1f4>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800308a:	d105      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800308c:	4b2d      	ldr	r3, [pc, #180]	; (8003144 <HAL_ADC_ConfigChannel+0x2a0>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4a2c      	ldr	r2, [pc, #176]	; (8003144 <HAL_ADC_ConfigChannel+0x2a0>)
 8003092:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003096:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a28      	ldr	r2, [pc, #160]	; (8003140 <HAL_ADC_ConfigChannel+0x29c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d10f      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x21e>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b12      	cmp	r3, #18
 80030a8:	d10b      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80030aa:	4b26      	ldr	r3, [pc, #152]	; (8003144 <HAL_ADC_ConfigChannel+0x2a0>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	4a25      	ldr	r2, [pc, #148]	; (8003144 <HAL_ADC_ConfigChannel+0x2a0>)
 80030b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030b4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80030b6:	4b23      	ldr	r3, [pc, #140]	; (8003144 <HAL_ADC_ConfigChannel+0x2a0>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	4a22      	ldr	r2, [pc, #136]	; (8003144 <HAL_ADC_ConfigChannel+0x2a0>)
 80030bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030c0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a1e      	ldr	r2, [pc, #120]	; (8003140 <HAL_ADC_ConfigChannel+0x29c>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d12b      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x280>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a1a      	ldr	r2, [pc, #104]	; (800313c <HAL_ADC_ConfigChannel+0x298>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d003      	beq.n	80030de <HAL_ADC_ConfigChannel+0x23a>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b11      	cmp	r3, #17
 80030dc:	d122      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80030de:	4b19      	ldr	r3, [pc, #100]	; (8003144 <HAL_ADC_ConfigChannel+0x2a0>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	4a18      	ldr	r2, [pc, #96]	; (8003144 <HAL_ADC_ConfigChannel+0x2a0>)
 80030e4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80030e8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80030ea:	4b16      	ldr	r3, [pc, #88]	; (8003144 <HAL_ADC_ConfigChannel+0x2a0>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	4a15      	ldr	r2, [pc, #84]	; (8003144 <HAL_ADC_ConfigChannel+0x2a0>)
 80030f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030f4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a10      	ldr	r2, [pc, #64]	; (800313c <HAL_ADC_ConfigChannel+0x298>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d111      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003100:	4b11      	ldr	r3, [pc, #68]	; (8003148 <HAL_ADC_ConfigChannel+0x2a4>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a11      	ldr	r2, [pc, #68]	; (800314c <HAL_ADC_ConfigChannel+0x2a8>)
 8003106:	fba2 2303 	umull	r2, r3, r2, r3
 800310a:	0c9a      	lsrs	r2, r3, #18
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003116:	e002      	b.n	800311e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	3b01      	subs	r3, #1
 800311c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1f9      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	10000012 	.word	0x10000012
 8003140:	40012000 	.word	0x40012000
 8003144:	40012300 	.word	0x40012300
 8003148:	20000000 	.word	0x20000000
 800314c:	431bde83 	.word	0x431bde83

08003150 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003158:	4b78      	ldr	r3, [pc, #480]	; (800333c <ADC_Init+0x1ec>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4a77      	ldr	r2, [pc, #476]	; (800333c <ADC_Init+0x1ec>)
 800315e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003162:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003164:	4b75      	ldr	r3, [pc, #468]	; (800333c <ADC_Init+0x1ec>)
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	4973      	ldr	r1, [pc, #460]	; (800333c <ADC_Init+0x1ec>)
 800316e:	4313      	orrs	r3, r2
 8003170:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003180:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6859      	ldr	r1, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	021a      	lsls	r2, r3, #8
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6859      	ldr	r1, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6899      	ldr	r1, [r3, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031de:	4a58      	ldr	r2, [pc, #352]	; (8003340 <ADC_Init+0x1f0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d022      	beq.n	800322a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6899      	ldr	r1, [r3, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003214:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6899      	ldr	r1, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	e00f      	b.n	800324a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003238:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003248:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0202 	bic.w	r2, r2, #2
 8003258:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6899      	ldr	r1, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	005a      	lsls	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d01b      	beq.n	80032b0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003286:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003296:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6859      	ldr	r1, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	3b01      	subs	r3, #1
 80032a4:	035a      	lsls	r2, r3, #13
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	e007      	b.n	80032c0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80032ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	3b01      	subs	r3, #1
 80032dc:	051a      	lsls	r2, r3, #20
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6899      	ldr	r1, [r3, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003302:	025a      	lsls	r2, r3, #9
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800331a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6899      	ldr	r1, [r3, #8]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	029a      	lsls	r2, r3, #10
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	609a      	str	r2, [r3, #8]
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	40012300 	.word	0x40012300
 8003340:	0f000001 	.word	0x0f000001

08003344 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e0ed      	b.n	8003532 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 3020 	ldrb.w	r3, [r3, #32]
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d102      	bne.n	8003368 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fe fa6c 	bl	8001840 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0201 	orr.w	r2, r2, #1
 8003376:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003378:	f7ff fcd8 	bl	8002d2c <HAL_GetTick>
 800337c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800337e:	e012      	b.n	80033a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003380:	f7ff fcd4 	bl	8002d2c <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b0a      	cmp	r3, #10
 800338c:	d90b      	bls.n	80033a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2205      	movs	r2, #5
 800339e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e0c5      	b.n	8003532 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0e5      	beq.n	8003380 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0202 	bic.w	r2, r2, #2
 80033c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033c4:	f7ff fcb2 	bl	8002d2c <HAL_GetTick>
 80033c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80033ca:	e012      	b.n	80033f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80033cc:	f7ff fcae 	bl	8002d2c <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b0a      	cmp	r3, #10
 80033d8:	d90b      	bls.n	80033f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2205      	movs	r2, #5
 80033ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e09f      	b.n	8003532 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1e5      	bne.n	80033cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	7e1b      	ldrb	r3, [r3, #24]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d108      	bne.n	800341a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	e007      	b.n	800342a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003428:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	7e5b      	ldrb	r3, [r3, #25]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d108      	bne.n	8003444 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	e007      	b.n	8003454 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003452:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	7e9b      	ldrb	r3, [r3, #26]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d108      	bne.n	800346e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0220 	orr.w	r2, r2, #32
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	e007      	b.n	800347e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0220 	bic.w	r2, r2, #32
 800347c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	7edb      	ldrb	r3, [r3, #27]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d108      	bne.n	8003498 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0210 	bic.w	r2, r2, #16
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	e007      	b.n	80034a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0210 	orr.w	r2, r2, #16
 80034a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	7f1b      	ldrb	r3, [r3, #28]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d108      	bne.n	80034c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0208 	orr.w	r2, r2, #8
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	e007      	b.n	80034d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0208 	bic.w	r2, r2, #8
 80034d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	7f5b      	ldrb	r3, [r3, #29]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d108      	bne.n	80034ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f042 0204 	orr.w	r2, r2, #4
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	e007      	b.n	80034fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0204 	bic.w	r2, r2, #4
 80034fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	431a      	orrs	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	ea42 0103 	orr.w	r1, r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	1e5a      	subs	r2, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
	...

0800353c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003552:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003554:	7cfb      	ldrb	r3, [r7, #19]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d003      	beq.n	8003562 <HAL_CAN_ConfigFilter+0x26>
 800355a:	7cfb      	ldrb	r3, [r7, #19]
 800355c:	2b02      	cmp	r3, #2
 800355e:	f040 80c7 	bne.w	80036f0 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a69      	ldr	r2, [pc, #420]	; (800370c <HAL_CAN_ConfigFilter+0x1d0>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d001      	beq.n	8003570 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 800356c:	4b68      	ldr	r3, [pc, #416]	; (8003710 <HAL_CAN_ConfigFilter+0x1d4>)
 800356e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003576:	f043 0201 	orr.w	r2, r3, #1
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	4a63      	ldr	r2, [pc, #396]	; (8003710 <HAL_CAN_ConfigFilter+0x1d4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d111      	bne.n	80035ac <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800358e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	021b      	lsls	r3, r3, #8
 80035a4:	431a      	orrs	r2, r3
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	f003 031f 	and.w	r3, r3, #31
 80035b4:	2201      	movs	r2, #1
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	43db      	mvns	r3, r3
 80035c6:	401a      	ands	r2, r3
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d123      	bne.n	800361e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	43db      	mvns	r3, r3
 80035e0:	401a      	ands	r2, r3
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80035f8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	3248      	adds	r2, #72	; 0x48
 80035fe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003612:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003614:	6979      	ldr	r1, [r7, #20]
 8003616:	3348      	adds	r3, #72	; 0x48
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	440b      	add	r3, r1
 800361c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d122      	bne.n	800366c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	431a      	orrs	r2, r3
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003646:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	3248      	adds	r2, #72	; 0x48
 800364c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003660:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003662:	6979      	ldr	r1, [r7, #20]
 8003664:	3348      	adds	r3, #72	; 0x48
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	440b      	add	r3, r1
 800366a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d109      	bne.n	8003688 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	43db      	mvns	r3, r3
 800367e:	401a      	ands	r2, r3
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003686:	e007      	b.n	8003698 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	431a      	orrs	r2, r3
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d109      	bne.n	80036b4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	43db      	mvns	r3, r3
 80036aa:	401a      	ands	r2, r3
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80036b2:	e007      	b.n	80036c4 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	431a      	orrs	r2, r3
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d107      	bne.n	80036dc <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	431a      	orrs	r2, r3
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80036e2:	f023 0201 	bic.w	r2, r3, #1
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	e006      	b.n	80036fe <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
  }
}
 80036fe:	4618      	mov	r0, r3
 8003700:	371c      	adds	r7, #28
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40003400 	.word	0x40003400
 8003710:	40006400 	.word	0x40006400

08003714 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b01      	cmp	r3, #1
 8003726:	d12e      	bne.n	8003786 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003740:	f7ff faf4 	bl	8002d2c <HAL_GetTick>
 8003744:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003746:	e012      	b.n	800376e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003748:	f7ff faf0 	bl	8002d2c <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b0a      	cmp	r3, #10
 8003754:	d90b      	bls.n	800376e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2205      	movs	r2, #5
 8003766:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e012      	b.n	8003794 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1e5      	bne.n	8003748 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	e006      	b.n	8003794 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
  }
}
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800379c:	b480      	push	{r7}
 800379e:	b089      	sub	sp, #36	; 0x24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
 80037a8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037b0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80037ba:	7ffb      	ldrb	r3, [r7, #31]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d003      	beq.n	80037c8 <HAL_CAN_AddTxMessage+0x2c>
 80037c0:	7ffb      	ldrb	r3, [r7, #31]
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	f040 80ad 	bne.w	8003922 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10a      	bne.n	80037e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d105      	bne.n	80037e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 8095 	beq.w	8003912 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	0e1b      	lsrs	r3, r3, #24
 80037ec:	f003 0303 	and.w	r3, r3, #3
 80037f0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80037f2:	2201      	movs	r2, #1
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	409a      	lsls	r2, r3
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10d      	bne.n	8003820 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800380e:	68f9      	ldr	r1, [r7, #12]
 8003810:	6809      	ldr	r1, [r1, #0]
 8003812:	431a      	orrs	r2, r3
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	3318      	adds	r3, #24
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	440b      	add	r3, r1
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	e00f      	b.n	8003840 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800382a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003830:	68f9      	ldr	r1, [r7, #12]
 8003832:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003834:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	3318      	adds	r3, #24
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	440b      	add	r3, r1
 800383e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6819      	ldr	r1, [r3, #0]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	691a      	ldr	r2, [r3, #16]
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	3318      	adds	r3, #24
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	440b      	add	r3, r1
 8003850:	3304      	adds	r3, #4
 8003852:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	7d1b      	ldrb	r3, [r3, #20]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d111      	bne.n	8003880 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	3318      	adds	r3, #24
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	4413      	add	r3, r2
 8003868:	3304      	adds	r3, #4
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	6811      	ldr	r1, [r2, #0]
 8003870:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	3318      	adds	r3, #24
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	440b      	add	r3, r1
 800387c:	3304      	adds	r3, #4
 800387e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3307      	adds	r3, #7
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	061a      	lsls	r2, r3, #24
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3306      	adds	r3, #6
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	041b      	lsls	r3, r3, #16
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3305      	adds	r3, #5
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	021b      	lsls	r3, r3, #8
 800389a:	4313      	orrs	r3, r2
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	3204      	adds	r2, #4
 80038a0:	7812      	ldrb	r2, [r2, #0]
 80038a2:	4610      	mov	r0, r2
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	6811      	ldr	r1, [r2, #0]
 80038a8:	ea43 0200 	orr.w	r2, r3, r0
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	440b      	add	r3, r1
 80038b2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80038b6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3303      	adds	r3, #3
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	061a      	lsls	r2, r3, #24
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3302      	adds	r3, #2
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	041b      	lsls	r3, r3, #16
 80038c8:	431a      	orrs	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3301      	adds	r3, #1
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	021b      	lsls	r3, r3, #8
 80038d2:	4313      	orrs	r3, r2
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	7812      	ldrb	r2, [r2, #0]
 80038d8:	4610      	mov	r0, r2
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	6811      	ldr	r1, [r2, #0]
 80038de:	ea43 0200 	orr.w	r2, r3, r0
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	440b      	add	r3, r1
 80038e8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80038ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	3318      	adds	r3, #24
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	4413      	add	r3, r2
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	6811      	ldr	r1, [r2, #0]
 8003900:	f043 0201 	orr.w	r2, r3, #1
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	3318      	adds	r3, #24
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	440b      	add	r3, r1
 800390c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	e00e      	b.n	8003930 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e006      	b.n	8003930 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
  }
}
 8003930:	4618      	mov	r0, r3
 8003932:	3724      	adds	r7, #36	; 0x24
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003950:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003952:	7dfb      	ldrb	r3, [r7, #23]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d003      	beq.n	8003960 <HAL_CAN_GetRxMessage+0x24>
 8003958:	7dfb      	ldrb	r3, [r7, #23]
 800395a:	2b02      	cmp	r3, #2
 800395c:	f040 80f3 	bne.w	8003b46 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10e      	bne.n	8003984 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 0303 	and.w	r3, r3, #3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d116      	bne.n	80039a2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e0e7      	b.n	8003b54 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d107      	bne.n	80039a2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e0d8      	b.n	8003b54 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	331b      	adds	r3, #27
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	4413      	add	r3, r2
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0204 	and.w	r2, r3, #4
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10c      	bne.n	80039da <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	331b      	adds	r3, #27
 80039c8:	011b      	lsls	r3, r3, #4
 80039ca:	4413      	add	r3, r2
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	0d5b      	lsrs	r3, r3, #21
 80039d0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	e00b      	b.n	80039f2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	331b      	adds	r3, #27
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	4413      	add	r3, r2
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	08db      	lsrs	r3, r3, #3
 80039ea:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	331b      	adds	r3, #27
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	4413      	add	r3, r2
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0202 	and.w	r2, r3, #2
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	331b      	adds	r3, #27
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	4413      	add	r3, r2
 8003a14:	3304      	adds	r3, #4
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 020f 	and.w	r2, r3, #15
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	331b      	adds	r3, #27
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	4413      	add	r3, r2
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	0a1b      	lsrs	r3, r3, #8
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	331b      	adds	r3, #27
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	4413      	add	r3, r2
 8003a44:	3304      	adds	r3, #4
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	0c1b      	lsrs	r3, r3, #16
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	0a1a      	lsrs	r2, r3, #8
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	0c1a      	lsrs	r2, r3, #16
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	3302      	adds	r3, #2
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	0e1a      	lsrs	r2, r3, #24
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	3303      	adds	r3, #3
 8003ab0:	b2d2      	uxtb	r2, r2
 8003ab2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	4413      	add	r3, r2
 8003abe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	0a1a      	lsrs	r2, r3, #8
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	3305      	adds	r3, #5
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	0c1a      	lsrs	r2, r3, #16
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	3306      	adds	r3, #6
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	0e1a      	lsrs	r2, r3, #24
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	3307      	adds	r3, #7
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d108      	bne.n	8003b32 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0220 	orr.w	r2, r2, #32
 8003b2e:	60da      	str	r2, [r3, #12]
 8003b30:	e007      	b.n	8003b42 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	691a      	ldr	r2, [r3, #16]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 0220 	orr.w	r2, r2, #32
 8003b40:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	e006      	b.n	8003b54 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
  }
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	371c      	adds	r7, #28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b70:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d002      	beq.n	8003b7e <HAL_CAN_ActivateNotification+0x1e>
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d109      	bne.n	8003b92 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6959      	ldr	r1, [r3, #20]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	e006      	b.n	8003ba0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
  }
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bbc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d002      	beq.n	8003bca <HAL_CAN_DeactivateNotification+0x1e>
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d10a      	bne.n	8003be0 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6959      	ldr	r1, [r3, #20]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	43da      	mvns	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	400a      	ands	r2, r1
 8003bda:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	e006      	b.n	8003bee <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
  }
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b08a      	sub	sp, #40	; 0x28
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003c02:	2300      	movs	r3, #0
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d07c      	beq.n	8003d3a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d023      	beq.n	8003c92 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7fc feb9 	bl	80009d4 <HAL_CAN_TxMailbox0CompleteCallback>
 8003c62:	e016      	b.n	8003c92 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	f003 0304 	and.w	r3, r3, #4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d004      	beq.n	8003c78 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
 8003c76:	e00c      	b.n	8003c92 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d004      	beq.n	8003c8c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8a:	e002      	b.n	8003c92 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 f96b 	bl	8003f68 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d024      	beq.n	8003ce6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ca4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7fc feaf 	bl	8000a14 <HAL_CAN_TxMailbox1CompleteCallback>
 8003cb6:	e016      	b.n	8003ce6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d004      	beq.n	8003ccc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cca:	e00c      	b.n	8003ce6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d004      	beq.n	8003ce0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cde:	e002      	b.n	8003ce6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f94b 	bl	8003f7c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d024      	beq.n	8003d3a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003cf8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7fc fea5 	bl	8000a54 <HAL_CAN_TxMailbox2CompleteCallback>
 8003d0a:	e016      	b.n	8003d3a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d004      	beq.n	8003d20 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1e:	e00c      	b.n	8003d3a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d004      	beq.n	8003d34 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
 8003d32:	e002      	b.n	8003d3a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f92b 	bl	8003f90 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00c      	beq.n	8003d5e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f003 0310 	and.w	r3, r3, #16
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d007      	beq.n	8003d5e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2210      	movs	r2, #16
 8003d5c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00b      	beq.n	8003d80 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d006      	beq.n	8003d80 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2208      	movs	r2, #8
 8003d78:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f912 	bl	8003fa4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d009      	beq.n	8003d9e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7fc fe7b 	bl	8000a94 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00c      	beq.n	8003dc2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	f003 0310 	and.w	r3, r3, #16
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d007      	beq.n	8003dc2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003db8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2210      	movs	r2, #16
 8003dc0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00b      	beq.n	8003de4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d006      	beq.n	8003de4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2208      	movs	r2, #8
 8003ddc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f8f4 	bl	8003fcc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	f003 0310 	and.w	r3, r3, #16
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d009      	beq.n	8003e02 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	f003 0303 	and.w	r3, r3, #3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f8db 	bl	8003fb8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00b      	beq.n	8003e24 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	f003 0310 	and.w	r3, r3, #16
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d006      	beq.n	8003e24 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2210      	movs	r2, #16
 8003e1c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f8de 	bl	8003fe0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003e24:	6a3b      	ldr	r3, [r7, #32]
 8003e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00b      	beq.n	8003e46 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d006      	beq.n	8003e46 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2208      	movs	r2, #8
 8003e3e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f8d7 	bl	8003ff4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d07b      	beq.n	8003f48 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f003 0304 	and.w	r3, r3, #4
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d072      	beq.n	8003f40 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	f043 0301 	orr.w	r3, r3, #1
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	f043 0302 	orr.w	r3, r3, #2
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d008      	beq.n	8003eae <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	f043 0304 	orr.w	r3, r3, #4
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003eae:	6a3b      	ldr	r3, [r7, #32]
 8003eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d043      	beq.n	8003f40 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d03e      	beq.n	8003f40 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ec8:	2b60      	cmp	r3, #96	; 0x60
 8003eca:	d02b      	beq.n	8003f24 <HAL_CAN_IRQHandler+0x32a>
 8003ecc:	2b60      	cmp	r3, #96	; 0x60
 8003ece:	d82e      	bhi.n	8003f2e <HAL_CAN_IRQHandler+0x334>
 8003ed0:	2b50      	cmp	r3, #80	; 0x50
 8003ed2:	d022      	beq.n	8003f1a <HAL_CAN_IRQHandler+0x320>
 8003ed4:	2b50      	cmp	r3, #80	; 0x50
 8003ed6:	d82a      	bhi.n	8003f2e <HAL_CAN_IRQHandler+0x334>
 8003ed8:	2b40      	cmp	r3, #64	; 0x40
 8003eda:	d019      	beq.n	8003f10 <HAL_CAN_IRQHandler+0x316>
 8003edc:	2b40      	cmp	r3, #64	; 0x40
 8003ede:	d826      	bhi.n	8003f2e <HAL_CAN_IRQHandler+0x334>
 8003ee0:	2b30      	cmp	r3, #48	; 0x30
 8003ee2:	d010      	beq.n	8003f06 <HAL_CAN_IRQHandler+0x30c>
 8003ee4:	2b30      	cmp	r3, #48	; 0x30
 8003ee6:	d822      	bhi.n	8003f2e <HAL_CAN_IRQHandler+0x334>
 8003ee8:	2b10      	cmp	r3, #16
 8003eea:	d002      	beq.n	8003ef2 <HAL_CAN_IRQHandler+0x2f8>
 8003eec:	2b20      	cmp	r3, #32
 8003eee:	d005      	beq.n	8003efc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003ef0:	e01d      	b.n	8003f2e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	f043 0308 	orr.w	r3, r3, #8
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003efa:	e019      	b.n	8003f30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	f043 0310 	orr.w	r3, r3, #16
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f04:	e014      	b.n	8003f30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	f043 0320 	orr.w	r3, r3, #32
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f0e:	e00f      	b.n	8003f30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f18:	e00a      	b.n	8003f30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f22:	e005      	b.n	8003f30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f2c:	e000      	b.n	8003f30 <HAL_CAN_IRQHandler+0x336>
            break;
 8003f2e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	699a      	ldr	r2, [r3, #24]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f3e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2204      	movs	r2, #4
 8003f46:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d008      	beq.n	8003f60 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f854 	bl	8004008 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003f60:	bf00      	nop
 8003f62:	3728      	adds	r7, #40	; 0x28
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800402c:	4b0b      	ldr	r3, [pc, #44]	; (800405c <__NVIC_SetPriorityGrouping+0x40>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004038:	4013      	ands	r3, r2
 800403a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004044:	4b06      	ldr	r3, [pc, #24]	; (8004060 <__NVIC_SetPriorityGrouping+0x44>)
 8004046:	4313      	orrs	r3, r2
 8004048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800404a:	4a04      	ldr	r2, [pc, #16]	; (800405c <__NVIC_SetPriorityGrouping+0x40>)
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	60d3      	str	r3, [r2, #12]
}
 8004050:	bf00      	nop
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	e000ed00 	.word	0xe000ed00
 8004060:	05fa0000 	.word	0x05fa0000

08004064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004068:	4b04      	ldr	r3, [pc, #16]	; (800407c <__NVIC_GetPriorityGrouping+0x18>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	0a1b      	lsrs	r3, r3, #8
 800406e:	f003 0307 	and.w	r3, r3, #7
}
 8004072:	4618      	mov	r0, r3
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	e000ed00 	.word	0xe000ed00

08004080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	4603      	mov	r3, r0
 8004088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800408a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408e:	2b00      	cmp	r3, #0
 8004090:	db0b      	blt.n	80040aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004092:	79fb      	ldrb	r3, [r7, #7]
 8004094:	f003 021f 	and.w	r2, r3, #31
 8004098:	4907      	ldr	r1, [pc, #28]	; (80040b8 <__NVIC_EnableIRQ+0x38>)
 800409a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	2001      	movs	r0, #1
 80040a2:	fa00 f202 	lsl.w	r2, r0, r2
 80040a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	e000e100 	.word	0xe000e100

080040bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	4603      	mov	r3, r0
 80040c4:	6039      	str	r1, [r7, #0]
 80040c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	db0a      	blt.n	80040e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	490c      	ldr	r1, [pc, #48]	; (8004108 <__NVIC_SetPriority+0x4c>)
 80040d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040da:	0112      	lsls	r2, r2, #4
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	440b      	add	r3, r1
 80040e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040e4:	e00a      	b.n	80040fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	4908      	ldr	r1, [pc, #32]	; (800410c <__NVIC_SetPriority+0x50>)
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	3b04      	subs	r3, #4
 80040f4:	0112      	lsls	r2, r2, #4
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	440b      	add	r3, r1
 80040fa:	761a      	strb	r2, [r3, #24]
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	e000e100 	.word	0xe000e100
 800410c:	e000ed00 	.word	0xe000ed00

08004110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004110:	b480      	push	{r7}
 8004112:	b089      	sub	sp, #36	; 0x24
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	f1c3 0307 	rsb	r3, r3, #7
 800412a:	2b04      	cmp	r3, #4
 800412c:	bf28      	it	cs
 800412e:	2304      	movcs	r3, #4
 8004130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	3304      	adds	r3, #4
 8004136:	2b06      	cmp	r3, #6
 8004138:	d902      	bls.n	8004140 <NVIC_EncodePriority+0x30>
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	3b03      	subs	r3, #3
 800413e:	e000      	b.n	8004142 <NVIC_EncodePriority+0x32>
 8004140:	2300      	movs	r3, #0
 8004142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004144:	f04f 32ff 	mov.w	r2, #4294967295
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	43da      	mvns	r2, r3
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	401a      	ands	r2, r3
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004158:	f04f 31ff 	mov.w	r1, #4294967295
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	fa01 f303 	lsl.w	r3, r1, r3
 8004162:	43d9      	mvns	r1, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004168:	4313      	orrs	r3, r2
         );
}
 800416a:	4618      	mov	r0, r3
 800416c:	3724      	adds	r7, #36	; 0x24
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
	...

08004178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3b01      	subs	r3, #1
 8004184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004188:	d301      	bcc.n	800418e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800418a:	2301      	movs	r3, #1
 800418c:	e00f      	b.n	80041ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800418e:	4a0a      	ldr	r2, [pc, #40]	; (80041b8 <SysTick_Config+0x40>)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3b01      	subs	r3, #1
 8004194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004196:	210f      	movs	r1, #15
 8004198:	f04f 30ff 	mov.w	r0, #4294967295
 800419c:	f7ff ff8e 	bl	80040bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041a0:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <SysTick_Config+0x40>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041a6:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <SysTick_Config+0x40>)
 80041a8:	2207      	movs	r2, #7
 80041aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	e000e010 	.word	0xe000e010

080041bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff ff29 	bl	800401c <__NVIC_SetPriorityGrouping>
}
 80041ca:	bf00      	nop
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b086      	sub	sp, #24
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	4603      	mov	r3, r0
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	607a      	str	r2, [r7, #4]
 80041de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80041e0:	2300      	movs	r3, #0
 80041e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041e4:	f7ff ff3e 	bl	8004064 <__NVIC_GetPriorityGrouping>
 80041e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	68b9      	ldr	r1, [r7, #8]
 80041ee:	6978      	ldr	r0, [r7, #20]
 80041f0:	f7ff ff8e 	bl	8004110 <NVIC_EncodePriority>
 80041f4:	4602      	mov	r2, r0
 80041f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041fa:	4611      	mov	r1, r2
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff ff5d 	bl	80040bc <__NVIC_SetPriority>
}
 8004202:	bf00      	nop
 8004204:	3718      	adds	r7, #24
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b082      	sub	sp, #8
 800420e:	af00      	add	r7, sp, #0
 8004210:	4603      	mov	r3, r0
 8004212:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff ff31 	bl	8004080 <__NVIC_EnableIRQ>
}
 800421e:	bf00      	nop
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b082      	sub	sp, #8
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7ff ffa2 	bl	8004178 <SysTick_Config>
 8004234:	4603      	mov	r3, r0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004240:	b480      	push	{r7}
 8004242:	b089      	sub	sp, #36	; 0x24
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800424a:	2300      	movs	r3, #0
 800424c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800424e:	2300      	movs	r3, #0
 8004250:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004252:	2300      	movs	r3, #0
 8004254:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004256:	2300      	movs	r3, #0
 8004258:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800425a:	2300      	movs	r3, #0
 800425c:	61fb      	str	r3, [r7, #28]
 800425e:	e175      	b.n	800454c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004260:	2201      	movs	r2, #1
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	4013      	ands	r3, r2
 8004272:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	429a      	cmp	r2, r3
 800427a:	f040 8164 	bne.w	8004546 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	2b01      	cmp	r3, #1
 8004288:	d005      	beq.n	8004296 <HAL_GPIO_Init+0x56>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d130      	bne.n	80042f8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	2203      	movs	r2, #3
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	43db      	mvns	r3, r3
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	4013      	ands	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	68da      	ldr	r2, [r3, #12]
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	4313      	orrs	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042cc:	2201      	movs	r2, #1
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	43db      	mvns	r3, r3
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	4013      	ands	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	091b      	lsrs	r3, r3, #4
 80042e2:	f003 0201 	and.w	r2, r3, #1
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f003 0303 	and.w	r3, r3, #3
 8004300:	2b03      	cmp	r3, #3
 8004302:	d017      	beq.n	8004334 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	2203      	movs	r2, #3
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	43db      	mvns	r3, r3
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	4013      	ands	r3, r2
 800431a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	4313      	orrs	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f003 0303 	and.w	r3, r3, #3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d123      	bne.n	8004388 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	08da      	lsrs	r2, r3, #3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3208      	adds	r2, #8
 8004348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800434c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	220f      	movs	r2, #15
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	43db      	mvns	r3, r3
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	4013      	ands	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	691a      	ldr	r2, [r3, #16]
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	4313      	orrs	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	08da      	lsrs	r2, r3, #3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3208      	adds	r2, #8
 8004382:	69b9      	ldr	r1, [r7, #24]
 8004384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	2203      	movs	r2, #3
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	43db      	mvns	r3, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	4013      	ands	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f003 0203 	and.w	r2, r3, #3
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 80be 	beq.w	8004546 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ca:	4b66      	ldr	r3, [pc, #408]	; (8004564 <HAL_GPIO_Init+0x324>)
 80043cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ce:	4a65      	ldr	r2, [pc, #404]	; (8004564 <HAL_GPIO_Init+0x324>)
 80043d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043d4:	6453      	str	r3, [r2, #68]	; 0x44
 80043d6:	4b63      	ldr	r3, [pc, #396]	; (8004564 <HAL_GPIO_Init+0x324>)
 80043d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80043e2:	4a61      	ldr	r2, [pc, #388]	; (8004568 <HAL_GPIO_Init+0x328>)
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	089b      	lsrs	r3, r3, #2
 80043e8:	3302      	adds	r3, #2
 80043ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	220f      	movs	r2, #15
 80043fa:	fa02 f303 	lsl.w	r3, r2, r3
 80043fe:	43db      	mvns	r3, r3
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	4013      	ands	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a58      	ldr	r2, [pc, #352]	; (800456c <HAL_GPIO_Init+0x32c>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d037      	beq.n	800447e <HAL_GPIO_Init+0x23e>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a57      	ldr	r2, [pc, #348]	; (8004570 <HAL_GPIO_Init+0x330>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d031      	beq.n	800447a <HAL_GPIO_Init+0x23a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a56      	ldr	r2, [pc, #344]	; (8004574 <HAL_GPIO_Init+0x334>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d02b      	beq.n	8004476 <HAL_GPIO_Init+0x236>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a55      	ldr	r2, [pc, #340]	; (8004578 <HAL_GPIO_Init+0x338>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d025      	beq.n	8004472 <HAL_GPIO_Init+0x232>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a54      	ldr	r2, [pc, #336]	; (800457c <HAL_GPIO_Init+0x33c>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d01f      	beq.n	800446e <HAL_GPIO_Init+0x22e>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a53      	ldr	r2, [pc, #332]	; (8004580 <HAL_GPIO_Init+0x340>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d019      	beq.n	800446a <HAL_GPIO_Init+0x22a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a52      	ldr	r2, [pc, #328]	; (8004584 <HAL_GPIO_Init+0x344>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d013      	beq.n	8004466 <HAL_GPIO_Init+0x226>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a51      	ldr	r2, [pc, #324]	; (8004588 <HAL_GPIO_Init+0x348>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d00d      	beq.n	8004462 <HAL_GPIO_Init+0x222>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a50      	ldr	r2, [pc, #320]	; (800458c <HAL_GPIO_Init+0x34c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d007      	beq.n	800445e <HAL_GPIO_Init+0x21e>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a4f      	ldr	r2, [pc, #316]	; (8004590 <HAL_GPIO_Init+0x350>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d101      	bne.n	800445a <HAL_GPIO_Init+0x21a>
 8004456:	2309      	movs	r3, #9
 8004458:	e012      	b.n	8004480 <HAL_GPIO_Init+0x240>
 800445a:	230a      	movs	r3, #10
 800445c:	e010      	b.n	8004480 <HAL_GPIO_Init+0x240>
 800445e:	2308      	movs	r3, #8
 8004460:	e00e      	b.n	8004480 <HAL_GPIO_Init+0x240>
 8004462:	2307      	movs	r3, #7
 8004464:	e00c      	b.n	8004480 <HAL_GPIO_Init+0x240>
 8004466:	2306      	movs	r3, #6
 8004468:	e00a      	b.n	8004480 <HAL_GPIO_Init+0x240>
 800446a:	2305      	movs	r3, #5
 800446c:	e008      	b.n	8004480 <HAL_GPIO_Init+0x240>
 800446e:	2304      	movs	r3, #4
 8004470:	e006      	b.n	8004480 <HAL_GPIO_Init+0x240>
 8004472:	2303      	movs	r3, #3
 8004474:	e004      	b.n	8004480 <HAL_GPIO_Init+0x240>
 8004476:	2302      	movs	r3, #2
 8004478:	e002      	b.n	8004480 <HAL_GPIO_Init+0x240>
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <HAL_GPIO_Init+0x240>
 800447e:	2300      	movs	r3, #0
 8004480:	69fa      	ldr	r2, [r7, #28]
 8004482:	f002 0203 	and.w	r2, r2, #3
 8004486:	0092      	lsls	r2, r2, #2
 8004488:	4093      	lsls	r3, r2
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	4313      	orrs	r3, r2
 800448e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004490:	4935      	ldr	r1, [pc, #212]	; (8004568 <HAL_GPIO_Init+0x328>)
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	089b      	lsrs	r3, r3, #2
 8004496:	3302      	adds	r3, #2
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800449e:	4b3d      	ldr	r3, [pc, #244]	; (8004594 <HAL_GPIO_Init+0x354>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	43db      	mvns	r3, r3
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	4013      	ands	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	4313      	orrs	r3, r2
 80044c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044c2:	4a34      	ldr	r2, [pc, #208]	; (8004594 <HAL_GPIO_Init+0x354>)
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044c8:	4b32      	ldr	r3, [pc, #200]	; (8004594 <HAL_GPIO_Init+0x354>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	43db      	mvns	r3, r3
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	4013      	ands	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044ec:	4a29      	ldr	r2, [pc, #164]	; (8004594 <HAL_GPIO_Init+0x354>)
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044f2:	4b28      	ldr	r3, [pc, #160]	; (8004594 <HAL_GPIO_Init+0x354>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	43db      	mvns	r3, r3
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	4013      	ands	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	4313      	orrs	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004516:	4a1f      	ldr	r2, [pc, #124]	; (8004594 <HAL_GPIO_Init+0x354>)
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800451c:	4b1d      	ldr	r3, [pc, #116]	; (8004594 <HAL_GPIO_Init+0x354>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	43db      	mvns	r3, r3
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	4013      	ands	r3, r2
 800452a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004540:	4a14      	ldr	r2, [pc, #80]	; (8004594 <HAL_GPIO_Init+0x354>)
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	3301      	adds	r3, #1
 800454a:	61fb      	str	r3, [r7, #28]
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	2b0f      	cmp	r3, #15
 8004550:	f67f ae86 	bls.w	8004260 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004554:	bf00      	nop
 8004556:	bf00      	nop
 8004558:	3724      	adds	r7, #36	; 0x24
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	40023800 	.word	0x40023800
 8004568:	40013800 	.word	0x40013800
 800456c:	40020000 	.word	0x40020000
 8004570:	40020400 	.word	0x40020400
 8004574:	40020800 	.word	0x40020800
 8004578:	40020c00 	.word	0x40020c00
 800457c:	40021000 	.word	0x40021000
 8004580:	40021400 	.word	0x40021400
 8004584:	40021800 	.word	0x40021800
 8004588:	40021c00 	.word	0x40021c00
 800458c:	40022000 	.word	0x40022000
 8004590:	40022400 	.word	0x40022400
 8004594:	40013c00 	.word	0x40013c00

08004598 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	887b      	ldrh	r3, [r7, #2]
 80045aa:	4013      	ands	r3, r2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d002      	beq.n	80045b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045b0:	2301      	movs	r3, #1
 80045b2:	73fb      	strb	r3, [r7, #15]
 80045b4:	e001      	b.n	80045ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045b6:	2300      	movs	r3, #0
 80045b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	460b      	mov	r3, r1
 80045d2:	807b      	strh	r3, [r7, #2]
 80045d4:	4613      	mov	r3, r2
 80045d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045d8:	787b      	ldrb	r3, [r7, #1]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045de:	887a      	ldrh	r2, [r7, #2]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80045e4:	e003      	b.n	80045ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80045e6:	887b      	ldrh	r3, [r7, #2]
 80045e8:	041a      	lsls	r2, r3, #16
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	619a      	str	r2, [r3, #24]
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
	...

080045fc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004600:	4b05      	ldr	r3, [pc, #20]	; (8004618 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a04      	ldr	r2, [pc, #16]	; (8004618 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800460a:	6013      	str	r3, [r2, #0]
}
 800460c:	bf00      	nop
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40007000 	.word	0x40007000

0800461c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004622:	2300      	movs	r3, #0
 8004624:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004626:	4b23      	ldr	r3, [pc, #140]	; (80046b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	4a22      	ldr	r2, [pc, #136]	; (80046b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800462c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004630:	6413      	str	r3, [r2, #64]	; 0x40
 8004632:	4b20      	ldr	r3, [pc, #128]	; (80046b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800463a:	603b      	str	r3, [r7, #0]
 800463c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800463e:	4b1e      	ldr	r3, [pc, #120]	; (80046b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a1d      	ldr	r2, [pc, #116]	; (80046b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004648:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800464a:	f7fe fb6f 	bl	8002d2c <HAL_GetTick>
 800464e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004650:	e009      	b.n	8004666 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004652:	f7fe fb6b 	bl	8002d2c <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004660:	d901      	bls.n	8004666 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e022      	b.n	80046ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004666:	4b14      	ldr	r3, [pc, #80]	; (80046b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800466e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004672:	d1ee      	bne.n	8004652 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004674:	4b10      	ldr	r3, [pc, #64]	; (80046b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a0f      	ldr	r2, [pc, #60]	; (80046b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800467a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800467e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004680:	f7fe fb54 	bl	8002d2c <HAL_GetTick>
 8004684:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004686:	e009      	b.n	800469c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004688:	f7fe fb50 	bl	8002d2c <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004696:	d901      	bls.n	800469c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e007      	b.n	80046ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800469c:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046a8:	d1ee      	bne.n	8004688 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	40023800 	.word	0x40023800
 80046b8:	40007000 	.word	0x40007000

080046bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80046c4:	2300      	movs	r3, #0
 80046c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e29b      	b.n	8004c0a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 8087 	beq.w	80047ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046e0:	4b96      	ldr	r3, [pc, #600]	; (800493c <HAL_RCC_OscConfig+0x280>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 030c 	and.w	r3, r3, #12
 80046e8:	2b04      	cmp	r3, #4
 80046ea:	d00c      	beq.n	8004706 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ec:	4b93      	ldr	r3, [pc, #588]	; (800493c <HAL_RCC_OscConfig+0x280>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 030c 	and.w	r3, r3, #12
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d112      	bne.n	800471e <HAL_RCC_OscConfig+0x62>
 80046f8:	4b90      	ldr	r3, [pc, #576]	; (800493c <HAL_RCC_OscConfig+0x280>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004700:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004704:	d10b      	bne.n	800471e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004706:	4b8d      	ldr	r3, [pc, #564]	; (800493c <HAL_RCC_OscConfig+0x280>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d06c      	beq.n	80047ec <HAL_RCC_OscConfig+0x130>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d168      	bne.n	80047ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e275      	b.n	8004c0a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004726:	d106      	bne.n	8004736 <HAL_RCC_OscConfig+0x7a>
 8004728:	4b84      	ldr	r3, [pc, #528]	; (800493c <HAL_RCC_OscConfig+0x280>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a83      	ldr	r2, [pc, #524]	; (800493c <HAL_RCC_OscConfig+0x280>)
 800472e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	e02e      	b.n	8004794 <HAL_RCC_OscConfig+0xd8>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10c      	bne.n	8004758 <HAL_RCC_OscConfig+0x9c>
 800473e:	4b7f      	ldr	r3, [pc, #508]	; (800493c <HAL_RCC_OscConfig+0x280>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a7e      	ldr	r2, [pc, #504]	; (800493c <HAL_RCC_OscConfig+0x280>)
 8004744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	4b7c      	ldr	r3, [pc, #496]	; (800493c <HAL_RCC_OscConfig+0x280>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a7b      	ldr	r2, [pc, #492]	; (800493c <HAL_RCC_OscConfig+0x280>)
 8004750:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	e01d      	b.n	8004794 <HAL_RCC_OscConfig+0xd8>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004760:	d10c      	bne.n	800477c <HAL_RCC_OscConfig+0xc0>
 8004762:	4b76      	ldr	r3, [pc, #472]	; (800493c <HAL_RCC_OscConfig+0x280>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a75      	ldr	r2, [pc, #468]	; (800493c <HAL_RCC_OscConfig+0x280>)
 8004768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	4b73      	ldr	r3, [pc, #460]	; (800493c <HAL_RCC_OscConfig+0x280>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a72      	ldr	r2, [pc, #456]	; (800493c <HAL_RCC_OscConfig+0x280>)
 8004774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	e00b      	b.n	8004794 <HAL_RCC_OscConfig+0xd8>
 800477c:	4b6f      	ldr	r3, [pc, #444]	; (800493c <HAL_RCC_OscConfig+0x280>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a6e      	ldr	r2, [pc, #440]	; (800493c <HAL_RCC_OscConfig+0x280>)
 8004782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004786:	6013      	str	r3, [r2, #0]
 8004788:	4b6c      	ldr	r3, [pc, #432]	; (800493c <HAL_RCC_OscConfig+0x280>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a6b      	ldr	r2, [pc, #428]	; (800493c <HAL_RCC_OscConfig+0x280>)
 800478e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004792:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d013      	beq.n	80047c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479c:	f7fe fac6 	bl	8002d2c <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047a4:	f7fe fac2 	bl	8002d2c <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b64      	cmp	r3, #100	; 0x64
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e229      	b.n	8004c0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b6:	4b61      	ldr	r3, [pc, #388]	; (800493c <HAL_RCC_OscConfig+0x280>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0f0      	beq.n	80047a4 <HAL_RCC_OscConfig+0xe8>
 80047c2:	e014      	b.n	80047ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c4:	f7fe fab2 	bl	8002d2c <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047cc:	f7fe faae 	bl	8002d2c <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b64      	cmp	r3, #100	; 0x64
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e215      	b.n	8004c0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047de:	4b57      	ldr	r3, [pc, #348]	; (800493c <HAL_RCC_OscConfig+0x280>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1f0      	bne.n	80047cc <HAL_RCC_OscConfig+0x110>
 80047ea:	e000      	b.n	80047ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d069      	beq.n	80048ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047fa:	4b50      	ldr	r3, [pc, #320]	; (800493c <HAL_RCC_OscConfig+0x280>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 030c 	and.w	r3, r3, #12
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00b      	beq.n	800481e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004806:	4b4d      	ldr	r3, [pc, #308]	; (800493c <HAL_RCC_OscConfig+0x280>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f003 030c 	and.w	r3, r3, #12
 800480e:	2b08      	cmp	r3, #8
 8004810:	d11c      	bne.n	800484c <HAL_RCC_OscConfig+0x190>
 8004812:	4b4a      	ldr	r3, [pc, #296]	; (800493c <HAL_RCC_OscConfig+0x280>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d116      	bne.n	800484c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800481e:	4b47      	ldr	r3, [pc, #284]	; (800493c <HAL_RCC_OscConfig+0x280>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d005      	beq.n	8004836 <HAL_RCC_OscConfig+0x17a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d001      	beq.n	8004836 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e1e9      	b.n	8004c0a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004836:	4b41      	ldr	r3, [pc, #260]	; (800493c <HAL_RCC_OscConfig+0x280>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	493d      	ldr	r1, [pc, #244]	; (800493c <HAL_RCC_OscConfig+0x280>)
 8004846:	4313      	orrs	r3, r2
 8004848:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800484a:	e040      	b.n	80048ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d023      	beq.n	800489c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004854:	4b39      	ldr	r3, [pc, #228]	; (800493c <HAL_RCC_OscConfig+0x280>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a38      	ldr	r2, [pc, #224]	; (800493c <HAL_RCC_OscConfig+0x280>)
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004860:	f7fe fa64 	bl	8002d2c <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004868:	f7fe fa60 	bl	8002d2c <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e1c7      	b.n	8004c0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487a:	4b30      	ldr	r3, [pc, #192]	; (800493c <HAL_RCC_OscConfig+0x280>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f0      	beq.n	8004868 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004886:	4b2d      	ldr	r3, [pc, #180]	; (800493c <HAL_RCC_OscConfig+0x280>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	4929      	ldr	r1, [pc, #164]	; (800493c <HAL_RCC_OscConfig+0x280>)
 8004896:	4313      	orrs	r3, r2
 8004898:	600b      	str	r3, [r1, #0]
 800489a:	e018      	b.n	80048ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800489c:	4b27      	ldr	r3, [pc, #156]	; (800493c <HAL_RCC_OscConfig+0x280>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a26      	ldr	r2, [pc, #152]	; (800493c <HAL_RCC_OscConfig+0x280>)
 80048a2:	f023 0301 	bic.w	r3, r3, #1
 80048a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a8:	f7fe fa40 	bl	8002d2c <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048b0:	f7fe fa3c 	bl	8002d2c <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e1a3      	b.n	8004c0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048c2:	4b1e      	ldr	r3, [pc, #120]	; (800493c <HAL_RCC_OscConfig+0x280>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d038      	beq.n	800494c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d019      	beq.n	8004916 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048e2:	4b16      	ldr	r3, [pc, #88]	; (800493c <HAL_RCC_OscConfig+0x280>)
 80048e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e6:	4a15      	ldr	r2, [pc, #84]	; (800493c <HAL_RCC_OscConfig+0x280>)
 80048e8:	f043 0301 	orr.w	r3, r3, #1
 80048ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ee:	f7fe fa1d 	bl	8002d2c <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048f4:	e008      	b.n	8004908 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048f6:	f7fe fa19 	bl	8002d2c <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e180      	b.n	8004c0a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004908:	4b0c      	ldr	r3, [pc, #48]	; (800493c <HAL_RCC_OscConfig+0x280>)
 800490a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f0      	beq.n	80048f6 <HAL_RCC_OscConfig+0x23a>
 8004914:	e01a      	b.n	800494c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004916:	4b09      	ldr	r3, [pc, #36]	; (800493c <HAL_RCC_OscConfig+0x280>)
 8004918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800491a:	4a08      	ldr	r2, [pc, #32]	; (800493c <HAL_RCC_OscConfig+0x280>)
 800491c:	f023 0301 	bic.w	r3, r3, #1
 8004920:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004922:	f7fe fa03 	bl	8002d2c <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004928:	e00a      	b.n	8004940 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800492a:	f7fe f9ff 	bl	8002d2c <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d903      	bls.n	8004940 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e166      	b.n	8004c0a <HAL_RCC_OscConfig+0x54e>
 800493c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004940:	4b92      	ldr	r3, [pc, #584]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 8004942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1ee      	bne.n	800492a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 80a4 	beq.w	8004aa2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800495a:	4b8c      	ldr	r3, [pc, #560]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10d      	bne.n	8004982 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004966:	4b89      	ldr	r3, [pc, #548]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	4a88      	ldr	r2, [pc, #544]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 800496c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004970:	6413      	str	r3, [r2, #64]	; 0x40
 8004972:	4b86      	ldr	r3, [pc, #536]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800497a:	60bb      	str	r3, [r7, #8]
 800497c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800497e:	2301      	movs	r3, #1
 8004980:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004982:	4b83      	ldr	r3, [pc, #524]	; (8004b90 <HAL_RCC_OscConfig+0x4d4>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498a:	2b00      	cmp	r3, #0
 800498c:	d118      	bne.n	80049c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800498e:	4b80      	ldr	r3, [pc, #512]	; (8004b90 <HAL_RCC_OscConfig+0x4d4>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a7f      	ldr	r2, [pc, #508]	; (8004b90 <HAL_RCC_OscConfig+0x4d4>)
 8004994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004998:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800499a:	f7fe f9c7 	bl	8002d2c <HAL_GetTick>
 800499e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049a2:	f7fe f9c3 	bl	8002d2c <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b64      	cmp	r3, #100	; 0x64
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e12a      	b.n	8004c0a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049b4:	4b76      	ldr	r3, [pc, #472]	; (8004b90 <HAL_RCC_OscConfig+0x4d4>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0f0      	beq.n	80049a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d106      	bne.n	80049d6 <HAL_RCC_OscConfig+0x31a>
 80049c8:	4b70      	ldr	r3, [pc, #448]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 80049ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049cc:	4a6f      	ldr	r2, [pc, #444]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 80049ce:	f043 0301 	orr.w	r3, r3, #1
 80049d2:	6713      	str	r3, [r2, #112]	; 0x70
 80049d4:	e02d      	b.n	8004a32 <HAL_RCC_OscConfig+0x376>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10c      	bne.n	80049f8 <HAL_RCC_OscConfig+0x33c>
 80049de:	4b6b      	ldr	r3, [pc, #428]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 80049e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e2:	4a6a      	ldr	r2, [pc, #424]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 80049e4:	f023 0301 	bic.w	r3, r3, #1
 80049e8:	6713      	str	r3, [r2, #112]	; 0x70
 80049ea:	4b68      	ldr	r3, [pc, #416]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 80049ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ee:	4a67      	ldr	r2, [pc, #412]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 80049f0:	f023 0304 	bic.w	r3, r3, #4
 80049f4:	6713      	str	r3, [r2, #112]	; 0x70
 80049f6:	e01c      	b.n	8004a32 <HAL_RCC_OscConfig+0x376>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	2b05      	cmp	r3, #5
 80049fe:	d10c      	bne.n	8004a1a <HAL_RCC_OscConfig+0x35e>
 8004a00:	4b62      	ldr	r3, [pc, #392]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 8004a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a04:	4a61      	ldr	r2, [pc, #388]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 8004a06:	f043 0304 	orr.w	r3, r3, #4
 8004a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a0c:	4b5f      	ldr	r3, [pc, #380]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 8004a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a10:	4a5e      	ldr	r2, [pc, #376]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 8004a12:	f043 0301 	orr.w	r3, r3, #1
 8004a16:	6713      	str	r3, [r2, #112]	; 0x70
 8004a18:	e00b      	b.n	8004a32 <HAL_RCC_OscConfig+0x376>
 8004a1a:	4b5c      	ldr	r3, [pc, #368]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 8004a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1e:	4a5b      	ldr	r2, [pc, #364]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 8004a20:	f023 0301 	bic.w	r3, r3, #1
 8004a24:	6713      	str	r3, [r2, #112]	; 0x70
 8004a26:	4b59      	ldr	r3, [pc, #356]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 8004a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2a:	4a58      	ldr	r2, [pc, #352]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 8004a2c:	f023 0304 	bic.w	r3, r3, #4
 8004a30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d015      	beq.n	8004a66 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a3a:	f7fe f977 	bl	8002d2c <HAL_GetTick>
 8004a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a40:	e00a      	b.n	8004a58 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a42:	f7fe f973 	bl	8002d2c <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e0d8      	b.n	8004c0a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a58:	4b4c      	ldr	r3, [pc, #304]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 8004a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0ee      	beq.n	8004a42 <HAL_RCC_OscConfig+0x386>
 8004a64:	e014      	b.n	8004a90 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a66:	f7fe f961 	bl	8002d2c <HAL_GetTick>
 8004a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a6c:	e00a      	b.n	8004a84 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a6e:	f7fe f95d 	bl	8002d2c <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e0c2      	b.n	8004c0a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a84:	4b41      	ldr	r3, [pc, #260]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 8004a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1ee      	bne.n	8004a6e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a90:	7dfb      	ldrb	r3, [r7, #23]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d105      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a96:	4b3d      	ldr	r3, [pc, #244]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	4a3c      	ldr	r2, [pc, #240]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 8004a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 80ae 	beq.w	8004c08 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aac:	4b37      	ldr	r3, [pc, #220]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f003 030c 	and.w	r3, r3, #12
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d06d      	beq.n	8004b94 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d14b      	bne.n	8004b58 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac0:	4b32      	ldr	r3, [pc, #200]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a31      	ldr	r2, [pc, #196]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 8004ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004acc:	f7fe f92e 	bl	8002d2c <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad4:	f7fe f92a 	bl	8002d2c <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e091      	b.n	8004c0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae6:	4b29      	ldr	r3, [pc, #164]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f0      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	69da      	ldr	r2, [r3, #28]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	019b      	lsls	r3, r3, #6
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b08:	085b      	lsrs	r3, r3, #1
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	041b      	lsls	r3, r3, #16
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	061b      	lsls	r3, r3, #24
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1c:	071b      	lsls	r3, r3, #28
 8004b1e:	491b      	ldr	r1, [pc, #108]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b24:	4b19      	ldr	r3, [pc, #100]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a18      	ldr	r2, [pc, #96]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 8004b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b30:	f7fe f8fc 	bl	8002d2c <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b38:	f7fe f8f8 	bl	8002d2c <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e05f      	b.n	8004c0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b4a:	4b10      	ldr	r3, [pc, #64]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0f0      	beq.n	8004b38 <HAL_RCC_OscConfig+0x47c>
 8004b56:	e057      	b.n	8004c08 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b58:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a0b      	ldr	r2, [pc, #44]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 8004b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b64:	f7fe f8e2 	bl	8002d2c <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b6c:	f7fe f8de 	bl	8002d2c <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e045      	b.n	8004c0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b7e:	4b03      	ldr	r3, [pc, #12]	; (8004b8c <HAL_RCC_OscConfig+0x4d0>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1f0      	bne.n	8004b6c <HAL_RCC_OscConfig+0x4b0>
 8004b8a:	e03d      	b.n	8004c08 <HAL_RCC_OscConfig+0x54c>
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004b94:	4b1f      	ldr	r3, [pc, #124]	; (8004c14 <HAL_RCC_OscConfig+0x558>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d030      	beq.n	8004c04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d129      	bne.n	8004c04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d122      	bne.n	8004c04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d119      	bne.n	8004c04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bda:	085b      	lsrs	r3, r3, #1
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d10f      	bne.n	8004c04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d107      	bne.n	8004c04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d001      	beq.n	8004c08 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e000      	b.n	8004c0a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40023800 	.word	0x40023800

08004c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004c22:	2300      	movs	r3, #0
 8004c24:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e0d0      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c30:	4b6a      	ldr	r3, [pc, #424]	; (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 030f 	and.w	r3, r3, #15
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d910      	bls.n	8004c60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3e:	4b67      	ldr	r3, [pc, #412]	; (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f023 020f 	bic.w	r2, r3, #15
 8004c46:	4965      	ldr	r1, [pc, #404]	; (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c4e:	4b63      	ldr	r3, [pc, #396]	; (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d001      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e0b8      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d020      	beq.n	8004cae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c78:	4b59      	ldr	r3, [pc, #356]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	4a58      	ldr	r2, [pc, #352]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004c7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0308 	and.w	r3, r3, #8
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d005      	beq.n	8004c9c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c90:	4b53      	ldr	r3, [pc, #332]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	4a52      	ldr	r2, [pc, #328]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004c96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c9c:	4b50      	ldr	r3, [pc, #320]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	494d      	ldr	r1, [pc, #308]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d040      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d107      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc2:	4b47      	ldr	r3, [pc, #284]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d115      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e07f      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d107      	bne.n	8004cea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cda:	4b41      	ldr	r3, [pc, #260]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d109      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e073      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cea:	4b3d      	ldr	r3, [pc, #244]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e06b      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cfa:	4b39      	ldr	r3, [pc, #228]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f023 0203 	bic.w	r2, r3, #3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	4936      	ldr	r1, [pc, #216]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d0c:	f7fe f80e 	bl	8002d2c <HAL_GetTick>
 8004d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d12:	e00a      	b.n	8004d2a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d14:	f7fe f80a 	bl	8002d2c <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e053      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d2a:	4b2d      	ldr	r3, [pc, #180]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 020c 	and.w	r2, r3, #12
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d1eb      	bne.n	8004d14 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d3c:	4b27      	ldr	r3, [pc, #156]	; (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 030f 	and.w	r3, r3, #15
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d210      	bcs.n	8004d6c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d4a:	4b24      	ldr	r3, [pc, #144]	; (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f023 020f 	bic.w	r2, r3, #15
 8004d52:	4922      	ldr	r1, [pc, #136]	; (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d5a:	4b20      	ldr	r3, [pc, #128]	; (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 030f 	and.w	r3, r3, #15
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d001      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e032      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0304 	and.w	r3, r3, #4
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d008      	beq.n	8004d8a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d78:	4b19      	ldr	r3, [pc, #100]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	4916      	ldr	r1, [pc, #88]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0308 	and.w	r3, r3, #8
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d009      	beq.n	8004daa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d96:	4b12      	ldr	r3, [pc, #72]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	490e      	ldr	r1, [pc, #56]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004daa:	f000 f821 	bl	8004df0 <HAL_RCC_GetSysClockFreq>
 8004dae:	4602      	mov	r2, r0
 8004db0:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	091b      	lsrs	r3, r3, #4
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	490a      	ldr	r1, [pc, #40]	; (8004de4 <HAL_RCC_ClockConfig+0x1cc>)
 8004dbc:	5ccb      	ldrb	r3, [r1, r3]
 8004dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc2:	4a09      	ldr	r2, [pc, #36]	; (8004de8 <HAL_RCC_ClockConfig+0x1d0>)
 8004dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004dc6:	4b09      	ldr	r3, [pc, #36]	; (8004dec <HAL_RCC_ClockConfig+0x1d4>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fd ff6a 	bl	8002ca4 <HAL_InitTick>

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	40023c00 	.word	0x40023c00
 8004de0:	40023800 	.word	0x40023800
 8004de4:	080083b8 	.word	0x080083b8
 8004de8:	20000000 	.word	0x20000000
 8004dec:	20000004 	.word	0x20000004

08004df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004df4:	b090      	sub	sp, #64	; 0x40
 8004df6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e00:	2300      	movs	r3, #0
 8004e02:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004e04:	2300      	movs	r3, #0
 8004e06:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e08:	4b59      	ldr	r3, [pc, #356]	; (8004f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f003 030c 	and.w	r3, r3, #12
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d00d      	beq.n	8004e30 <HAL_RCC_GetSysClockFreq+0x40>
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	f200 80a1 	bhi.w	8004f5c <HAL_RCC_GetSysClockFreq+0x16c>
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <HAL_RCC_GetSysClockFreq+0x34>
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d003      	beq.n	8004e2a <HAL_RCC_GetSysClockFreq+0x3a>
 8004e22:	e09b      	b.n	8004f5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e24:	4b53      	ldr	r3, [pc, #332]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e26:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e28:	e09b      	b.n	8004f62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e2a:	4b53      	ldr	r3, [pc, #332]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e2e:	e098      	b.n	8004f62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e30:	4b4f      	ldr	r3, [pc, #316]	; (8004f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e38:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004e3a:	4b4d      	ldr	r3, [pc, #308]	; (8004f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d028      	beq.n	8004e98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e46:	4b4a      	ldr	r3, [pc, #296]	; (8004f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	099b      	lsrs	r3, r3, #6
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	623b      	str	r3, [r7, #32]
 8004e50:	627a      	str	r2, [r7, #36]	; 0x24
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004e58:	2100      	movs	r1, #0
 8004e5a:	4b47      	ldr	r3, [pc, #284]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e5c:	fb03 f201 	mul.w	r2, r3, r1
 8004e60:	2300      	movs	r3, #0
 8004e62:	fb00 f303 	mul.w	r3, r0, r3
 8004e66:	4413      	add	r3, r2
 8004e68:	4a43      	ldr	r2, [pc, #268]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e6a:	fba0 1202 	umull	r1, r2, r0, r2
 8004e6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e70:	460a      	mov	r2, r1
 8004e72:	62ba      	str	r2, [r7, #40]	; 0x28
 8004e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e76:	4413      	add	r3, r2
 8004e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	61bb      	str	r3, [r7, #24]
 8004e80:	61fa      	str	r2, [r7, #28]
 8004e82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004e8a:	f7fb f9dd 	bl	8000248 <__aeabi_uldivmod>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4613      	mov	r3, r2
 8004e94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e96:	e053      	b.n	8004f40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e98:	4b35      	ldr	r3, [pc, #212]	; (8004f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	099b      	lsrs	r3, r3, #6
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	613b      	str	r3, [r7, #16]
 8004ea2:	617a      	str	r2, [r7, #20]
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004eaa:	f04f 0b00 	mov.w	fp, #0
 8004eae:	4652      	mov	r2, sl
 8004eb0:	465b      	mov	r3, fp
 8004eb2:	f04f 0000 	mov.w	r0, #0
 8004eb6:	f04f 0100 	mov.w	r1, #0
 8004eba:	0159      	lsls	r1, r3, #5
 8004ebc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ec0:	0150      	lsls	r0, r2, #5
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	ebb2 080a 	subs.w	r8, r2, sl
 8004eca:	eb63 090b 	sbc.w	r9, r3, fp
 8004ece:	f04f 0200 	mov.w	r2, #0
 8004ed2:	f04f 0300 	mov.w	r3, #0
 8004ed6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004eda:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004ede:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004ee2:	ebb2 0408 	subs.w	r4, r2, r8
 8004ee6:	eb63 0509 	sbc.w	r5, r3, r9
 8004eea:	f04f 0200 	mov.w	r2, #0
 8004eee:	f04f 0300 	mov.w	r3, #0
 8004ef2:	00eb      	lsls	r3, r5, #3
 8004ef4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ef8:	00e2      	lsls	r2, r4, #3
 8004efa:	4614      	mov	r4, r2
 8004efc:	461d      	mov	r5, r3
 8004efe:	eb14 030a 	adds.w	r3, r4, sl
 8004f02:	603b      	str	r3, [r7, #0]
 8004f04:	eb45 030b 	adc.w	r3, r5, fp
 8004f08:	607b      	str	r3, [r7, #4]
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f16:	4629      	mov	r1, r5
 8004f18:	028b      	lsls	r3, r1, #10
 8004f1a:	4621      	mov	r1, r4
 8004f1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f20:	4621      	mov	r1, r4
 8004f22:	028a      	lsls	r2, r1, #10
 8004f24:	4610      	mov	r0, r2
 8004f26:	4619      	mov	r1, r3
 8004f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	60bb      	str	r3, [r7, #8]
 8004f2e:	60fa      	str	r2, [r7, #12]
 8004f30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f34:	f7fb f988 	bl	8000248 <__aeabi_uldivmod>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004f40:	4b0b      	ldr	r3, [pc, #44]	; (8004f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	0c1b      	lsrs	r3, r3, #16
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004f50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f5a:	e002      	b.n	8004f62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f5c:	4b05      	ldr	r3, [pc, #20]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3740      	adds	r7, #64	; 0x40
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f6e:	bf00      	nop
 8004f70:	40023800 	.word	0x40023800
 8004f74:	00f42400 	.word	0x00f42400
 8004f78:	017d7840 	.word	0x017d7840

08004f7c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f80:	4b03      	ldr	r3, [pc, #12]	; (8004f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f82:	681b      	ldr	r3, [r3, #0]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	20000000 	.word	0x20000000

08004f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f98:	f7ff fff0 	bl	8004f7c <HAL_RCC_GetHCLKFreq>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	4b05      	ldr	r3, [pc, #20]	; (8004fb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	0a9b      	lsrs	r3, r3, #10
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	4903      	ldr	r1, [pc, #12]	; (8004fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004faa:	5ccb      	ldrb	r3, [r1, r3]
 8004fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	40023800 	.word	0x40023800
 8004fb8:	080083c8 	.word	0x080083c8

08004fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fc0:	f7ff ffdc 	bl	8004f7c <HAL_RCC_GetHCLKFreq>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	0b5b      	lsrs	r3, r3, #13
 8004fcc:	f003 0307 	and.w	r3, r3, #7
 8004fd0:	4903      	ldr	r1, [pc, #12]	; (8004fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fd2:	5ccb      	ldrb	r3, [r1, r3]
 8004fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	40023800 	.word	0x40023800
 8004fe0:	080083c8 	.word	0x080083c8

08004fe4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004fec:	2300      	movs	r3, #0
 8004fee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d012      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800500c:	4b69      	ldr	r3, [pc, #420]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	4a68      	ldr	r2, [pc, #416]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005012:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005016:	6093      	str	r3, [r2, #8]
 8005018:	4b66      	ldr	r3, [pc, #408]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005020:	4964      	ldr	r1, [pc, #400]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005022:	4313      	orrs	r3, r2
 8005024:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800502e:	2301      	movs	r3, #1
 8005030:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d017      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800503e:	4b5d      	ldr	r3, [pc, #372]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005044:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504c:	4959      	ldr	r1, [pc, #356]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800504e:	4313      	orrs	r3, r2
 8005050:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005058:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800505c:	d101      	bne.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800505e:	2301      	movs	r3, #1
 8005060:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800506a:	2301      	movs	r3, #1
 800506c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d017      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800507a:	4b4e      	ldr	r3, [pc, #312]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800507c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005080:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005088:	494a      	ldr	r1, [pc, #296]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800508a:	4313      	orrs	r3, r2
 800508c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005094:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005098:	d101      	bne.n	800509e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800509a:	2301      	movs	r3, #1
 800509c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80050a6:	2301      	movs	r3, #1
 80050a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80050b6:	2301      	movs	r3, #1
 80050b8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 808b 	beq.w	80051de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80050c8:	4b3a      	ldr	r3, [pc, #232]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	4a39      	ldr	r2, [pc, #228]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050d2:	6413      	str	r3, [r2, #64]	; 0x40
 80050d4:	4b37      	ldr	r3, [pc, #220]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050dc:	60bb      	str	r3, [r7, #8]
 80050de:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80050e0:	4b35      	ldr	r3, [pc, #212]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a34      	ldr	r2, [pc, #208]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80050e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ec:	f7fd fe1e 	bl	8002d2c <HAL_GetTick>
 80050f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80050f2:	e008      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f4:	f7fd fe1a 	bl	8002d2c <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b64      	cmp	r3, #100	; 0x64
 8005100:	d901      	bls.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e38f      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005106:	4b2c      	ldr	r3, [pc, #176]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0f0      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005112:	4b28      	ldr	r3, [pc, #160]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800511a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d035      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	429a      	cmp	r2, r3
 800512e:	d02e      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005130:	4b20      	ldr	r3, [pc, #128]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005138:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800513a:	4b1e      	ldr	r3, [pc, #120]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800513c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513e:	4a1d      	ldr	r2, [pc, #116]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005144:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005146:	4b1b      	ldr	r3, [pc, #108]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514a:	4a1a      	ldr	r2, [pc, #104]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800514c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005150:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005152:	4a18      	ldr	r2, [pc, #96]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005158:	4b16      	ldr	r3, [pc, #88]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800515a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b01      	cmp	r3, #1
 8005162:	d114      	bne.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005164:	f7fd fde2 	bl	8002d2c <HAL_GetTick>
 8005168:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800516a:	e00a      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800516c:	f7fd fdde 	bl	8002d2c <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	f241 3288 	movw	r2, #5000	; 0x1388
 800517a:	4293      	cmp	r3, r2
 800517c:	d901      	bls.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e351      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005182:	4b0c      	ldr	r3, [pc, #48]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d0ee      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005196:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800519a:	d111      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800519c:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80051a8:	4b04      	ldr	r3, [pc, #16]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80051aa:	400b      	ands	r3, r1
 80051ac:	4901      	ldr	r1, [pc, #4]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	608b      	str	r3, [r1, #8]
 80051b2:	e00b      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80051b4:	40023800 	.word	0x40023800
 80051b8:	40007000 	.word	0x40007000
 80051bc:	0ffffcff 	.word	0x0ffffcff
 80051c0:	4bac      	ldr	r3, [pc, #688]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	4aab      	ldr	r2, [pc, #684]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80051ca:	6093      	str	r3, [r2, #8]
 80051cc:	4ba9      	ldr	r3, [pc, #676]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051d8:	49a6      	ldr	r1, [pc, #664]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0310 	and.w	r3, r3, #16
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d010      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051ea:	4ba2      	ldr	r3, [pc, #648]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051f0:	4aa0      	ldr	r2, [pc, #640]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80051fa:	4b9e      	ldr	r3, [pc, #632]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	499b      	ldr	r1, [pc, #620]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00a      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005218:	4b96      	ldr	r3, [pc, #600]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800521a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005226:	4993      	ldr	r1, [pc, #588]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00a      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800523a:	4b8e      	ldr	r3, [pc, #568]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800523c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005240:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005248:	498a      	ldr	r1, [pc, #552]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800524a:	4313      	orrs	r3, r2
 800524c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00a      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800525c:	4b85      	ldr	r3, [pc, #532]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800525e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005262:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800526a:	4982      	ldr	r1, [pc, #520]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800526c:	4313      	orrs	r3, r2
 800526e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00a      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800527e:	4b7d      	ldr	r3, [pc, #500]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005284:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528c:	4979      	ldr	r1, [pc, #484]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800528e:	4313      	orrs	r3, r2
 8005290:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00a      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052a0:	4b74      	ldr	r3, [pc, #464]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a6:	f023 0203 	bic.w	r2, r3, #3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ae:	4971      	ldr	r1, [pc, #452]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00a      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052c2:	4b6c      	ldr	r3, [pc, #432]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c8:	f023 020c 	bic.w	r2, r3, #12
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052d0:	4968      	ldr	r1, [pc, #416]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00a      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052e4:	4b63      	ldr	r3, [pc, #396]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f2:	4960      	ldr	r1, [pc, #384]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00a      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005306:	4b5b      	ldr	r3, [pc, #364]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005314:	4957      	ldr	r1, [pc, #348]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00a      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005328:	4b52      	ldr	r3, [pc, #328]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800532a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005336:	494f      	ldr	r1, [pc, #316]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005338:	4313      	orrs	r3, r2
 800533a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00a      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800534a:	4b4a      	ldr	r3, [pc, #296]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800534c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005350:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005358:	4946      	ldr	r1, [pc, #280]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800536c:	4b41      	ldr	r3, [pc, #260]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800536e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005372:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800537a:	493e      	ldr	r1, [pc, #248]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800537c:	4313      	orrs	r3, r2
 800537e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00a      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800538e:	4b39      	ldr	r3, [pc, #228]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005394:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800539c:	4935      	ldr	r1, [pc, #212]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00a      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053b0:	4b30      	ldr	r3, [pc, #192]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053be:	492d      	ldr	r1, [pc, #180]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d011      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80053d2:	4b28      	ldr	r3, [pc, #160]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053e0:	4924      	ldr	r1, [pc, #144]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053f0:	d101      	bne.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80053f2:	2301      	movs	r3, #1
 80053f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005402:	2301      	movs	r3, #1
 8005404:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005412:	4b18      	ldr	r3, [pc, #96]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005418:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005420:	4914      	ldr	r1, [pc, #80]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005422:	4313      	orrs	r3, r2
 8005424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00b      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005434:	4b0f      	ldr	r3, [pc, #60]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005444:	490b      	ldr	r1, [pc, #44]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005446:	4313      	orrs	r3, r2
 8005448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00f      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005458:	4b06      	ldr	r3, [pc, #24]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800545a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005468:	4902      	ldr	r1, [pc, #8]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800546a:	4313      	orrs	r3, r2
 800546c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005470:	e002      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005472:	bf00      	nop
 8005474:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00b      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005484:	4b8a      	ldr	r3, [pc, #552]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005486:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800548a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005494:	4986      	ldr	r1, [pc, #536]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00b      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80054a8:	4b81      	ldr	r3, [pc, #516]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054b8:	497d      	ldr	r1, [pc, #500]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d006      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f000 80d6 	beq.w	8005680 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80054d4:	4b76      	ldr	r3, [pc, #472]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a75      	ldr	r2, [pc, #468]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054e0:	f7fd fc24 	bl	8002d2c <HAL_GetTick>
 80054e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054e6:	e008      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054e8:	f7fd fc20 	bl	8002d2c <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b64      	cmp	r3, #100	; 0x64
 80054f4:	d901      	bls.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e195      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054fa:	4b6d      	ldr	r3, [pc, #436]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1f0      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d021      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005516:	2b00      	cmp	r3, #0
 8005518:	d11d      	bne.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800551a:	4b65      	ldr	r3, [pc, #404]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800551c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005520:	0c1b      	lsrs	r3, r3, #16
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005528:	4b61      	ldr	r3, [pc, #388]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800552a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800552e:	0e1b      	lsrs	r3, r3, #24
 8005530:	f003 030f 	and.w	r3, r3, #15
 8005534:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	019a      	lsls	r2, r3, #6
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	041b      	lsls	r3, r3, #16
 8005540:	431a      	orrs	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	061b      	lsls	r3, r3, #24
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	071b      	lsls	r3, r3, #28
 800554e:	4958      	ldr	r1, [pc, #352]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d004      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005566:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800556a:	d00a      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005574:	2b00      	cmp	r3, #0
 8005576:	d02e      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005580:	d129      	bne.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005582:	4b4b      	ldr	r3, [pc, #300]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005588:	0c1b      	lsrs	r3, r3, #16
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005590:	4b47      	ldr	r3, [pc, #284]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005596:	0f1b      	lsrs	r3, r3, #28
 8005598:	f003 0307 	and.w	r3, r3, #7
 800559c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	019a      	lsls	r2, r3, #6
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	041b      	lsls	r3, r3, #16
 80055a8:	431a      	orrs	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	061b      	lsls	r3, r3, #24
 80055b0:	431a      	orrs	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	071b      	lsls	r3, r3, #28
 80055b6:	493e      	ldr	r1, [pc, #248]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80055be:	4b3c      	ldr	r3, [pc, #240]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055c4:	f023 021f 	bic.w	r2, r3, #31
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	3b01      	subs	r3, #1
 80055ce:	4938      	ldr	r1, [pc, #224]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d01d      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80055e2:	4b33      	ldr	r3, [pc, #204]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055e8:	0e1b      	lsrs	r3, r3, #24
 80055ea:	f003 030f 	and.w	r3, r3, #15
 80055ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80055f0:	4b2f      	ldr	r3, [pc, #188]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055f6:	0f1b      	lsrs	r3, r3, #28
 80055f8:	f003 0307 	and.w	r3, r3, #7
 80055fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	019a      	lsls	r2, r3, #6
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	041b      	lsls	r3, r3, #16
 800560a:	431a      	orrs	r2, r3
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	061b      	lsls	r3, r3, #24
 8005610:	431a      	orrs	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	071b      	lsls	r3, r3, #28
 8005616:	4926      	ldr	r1, [pc, #152]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005618:	4313      	orrs	r3, r2
 800561a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d011      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	019a      	lsls	r2, r3, #6
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	041b      	lsls	r3, r3, #16
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	061b      	lsls	r3, r3, #24
 800563e:	431a      	orrs	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	071b      	lsls	r3, r3, #28
 8005646:	491a      	ldr	r1, [pc, #104]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005648:	4313      	orrs	r3, r2
 800564a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800564e:	4b18      	ldr	r3, [pc, #96]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a17      	ldr	r2, [pc, #92]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005654:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005658:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800565a:	f7fd fb67 	bl	8002d2c <HAL_GetTick>
 800565e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005660:	e008      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005662:	f7fd fb63 	bl	8002d2c <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b64      	cmp	r3, #100	; 0x64
 800566e:	d901      	bls.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e0d8      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005674:	4b0e      	ldr	r3, [pc, #56]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d0f0      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	2b01      	cmp	r3, #1
 8005684:	f040 80ce 	bne.w	8005824 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005688:	4b09      	ldr	r3, [pc, #36]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a08      	ldr	r2, [pc, #32]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800568e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005694:	f7fd fb4a 	bl	8002d2c <HAL_GetTick>
 8005698:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800569a:	e00b      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800569c:	f7fd fb46 	bl	8002d2c <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	2b64      	cmp	r3, #100	; 0x64
 80056a8:	d904      	bls.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e0bb      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80056ae:	bf00      	nop
 80056b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80056b4:	4b5e      	ldr	r3, [pc, #376]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056c0:	d0ec      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d009      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d02e      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d12a      	bne.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80056ea:	4b51      	ldr	r3, [pc, #324]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f0:	0c1b      	lsrs	r3, r3, #16
 80056f2:	f003 0303 	and.w	r3, r3, #3
 80056f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80056f8:	4b4d      	ldr	r3, [pc, #308]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056fe:	0f1b      	lsrs	r3, r3, #28
 8005700:	f003 0307 	and.w	r3, r3, #7
 8005704:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	019a      	lsls	r2, r3, #6
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	041b      	lsls	r3, r3, #16
 8005710:	431a      	orrs	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	061b      	lsls	r3, r3, #24
 8005718:	431a      	orrs	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	071b      	lsls	r3, r3, #28
 800571e:	4944      	ldr	r1, [pc, #272]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005720:	4313      	orrs	r3, r2
 8005722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005726:	4b42      	ldr	r3, [pc, #264]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800572c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005734:	3b01      	subs	r3, #1
 8005736:	021b      	lsls	r3, r3, #8
 8005738:	493d      	ldr	r1, [pc, #244]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800573a:	4313      	orrs	r3, r2
 800573c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d022      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005754:	d11d      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005756:	4b36      	ldr	r3, [pc, #216]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575c:	0e1b      	lsrs	r3, r3, #24
 800575e:	f003 030f 	and.w	r3, r3, #15
 8005762:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005764:	4b32      	ldr	r3, [pc, #200]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576a:	0f1b      	lsrs	r3, r3, #28
 800576c:	f003 0307 	and.w	r3, r3, #7
 8005770:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	019a      	lsls	r2, r3, #6
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	041b      	lsls	r3, r3, #16
 800577e:	431a      	orrs	r2, r3
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	061b      	lsls	r3, r3, #24
 8005784:	431a      	orrs	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	071b      	lsls	r3, r3, #28
 800578a:	4929      	ldr	r1, [pc, #164]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800578c:	4313      	orrs	r3, r2
 800578e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0308 	and.w	r3, r3, #8
 800579a:	2b00      	cmp	r3, #0
 800579c:	d028      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800579e:	4b24      	ldr	r3, [pc, #144]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a4:	0e1b      	lsrs	r3, r3, #24
 80057a6:	f003 030f 	and.w	r3, r3, #15
 80057aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80057ac:	4b20      	ldr	r3, [pc, #128]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b2:	0c1b      	lsrs	r3, r3, #16
 80057b4:	f003 0303 	and.w	r3, r3, #3
 80057b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	019a      	lsls	r2, r3, #6
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	041b      	lsls	r3, r3, #16
 80057c4:	431a      	orrs	r2, r3
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	061b      	lsls	r3, r3, #24
 80057ca:	431a      	orrs	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	071b      	lsls	r3, r3, #28
 80057d2:	4917      	ldr	r1, [pc, #92]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80057da:	4b15      	ldr	r3, [pc, #84]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e8:	4911      	ldr	r1, [pc, #68]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80057f0:	4b0f      	ldr	r3, [pc, #60]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a0e      	ldr	r2, [pc, #56]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057fc:	f7fd fa96 	bl	8002d2c <HAL_GetTick>
 8005800:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005802:	e008      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005804:	f7fd fa92 	bl	8002d2c <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b64      	cmp	r3, #100	; 0x64
 8005810:	d901      	bls.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e007      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005816:	4b06      	ldr	r3, [pc, #24]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800581e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005822:	d1ef      	bne.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3720      	adds	r7, #32
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	40023800 	.word	0x40023800

08005834 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e071      	b.n	800592e <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	7f5b      	ldrb	r3, [r3, #29]
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b00      	cmp	r3, #0
 8005852:	d105      	bne.n	8005860 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7fc fd2e 	bl	80022bc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2202      	movs	r2, #2
 8005864:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f003 0310 	and.w	r3, r3, #16
 8005870:	2b10      	cmp	r3, #16
 8005872:	d053      	beq.n	800591c <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	22ca      	movs	r2, #202	; 0xca
 800587a:	625a      	str	r2, [r3, #36]	; 0x24
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2253      	movs	r2, #83	; 0x53
 8005882:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f881 	bl	800598c <RTC_EnterInitMode>
 800588a:	4603      	mov	r3, r0
 800588c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800588e:	7bfb      	ldrb	r3, [r7, #15]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d12a      	bne.n	80058ea <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6899      	ldr	r1, [r3, #8]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	4b26      	ldr	r3, [pc, #152]	; (8005938 <HAL_RTC_Init+0x104>)
 80058a0:	400b      	ands	r3, r1
 80058a2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6899      	ldr	r1, [r3, #8]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	431a      	orrs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	431a      	orrs	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	68d2      	ldr	r2, [r2, #12]
 80058ca:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6919      	ldr	r1, [r3, #16]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	041a      	lsls	r2, r3, #16
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	430a      	orrs	r2, r1
 80058de:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f88a 	bl	80059fa <RTC_ExitInitMode>
 80058e6:	4603      	mov	r3, r0
 80058e8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d110      	bne.n	8005912 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f022 0208 	bic.w	r2, r2, #8
 80058fe:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	699a      	ldr	r2, [r3, #24]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	22ff      	movs	r2, #255	; 0xff
 8005918:	625a      	str	r2, [r3, #36]	; 0x24
 800591a:	e001      	b.n	8005920 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800591c:	2300      	movs	r3, #0
 800591e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005920:	7bfb      	ldrb	r3, [r7, #15]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d102      	bne.n	800592c <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800592c:	7bfb      	ldrb	r3, [r7, #15]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	ff8fffbf 	.word	0xff8fffbf

0800593c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005944:	2300      	movs	r3, #0
 8005946:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005956:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005958:	f7fd f9e8 	bl	8002d2c <HAL_GetTick>
 800595c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800595e:	e009      	b.n	8005974 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005960:	f7fd f9e4 	bl	8002d2c <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800596e:	d901      	bls.n	8005974 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e007      	b.n	8005984 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f003 0320 	and.w	r3, r3, #32
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0ee      	beq.n	8005960 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005994:	2300      	movs	r3, #0
 8005996:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005998:	2300      	movs	r3, #0
 800599a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d122      	bne.n	80059f0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68da      	ldr	r2, [r3, #12]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80059b8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059ba:	f7fd f9b7 	bl	8002d2c <HAL_GetTick>
 80059be:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80059c0:	e00c      	b.n	80059dc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80059c2:	f7fd f9b3 	bl	8002d2c <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059d0:	d904      	bls.n	80059dc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2204      	movs	r2, #4
 80059d6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d102      	bne.n	80059f0 <RTC_EnterInitMode+0x64>
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d1e8      	bne.n	80059c2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b084      	sub	sp, #16
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a02:	2300      	movs	r3, #0
 8005a04:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68da      	ldr	r2, [r3, #12]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a14:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f003 0320 	and.w	r3, r3, #32
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10a      	bne.n	8005a3a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f7ff ff89 	bl	800593c <HAL_RTC_WaitForSynchro>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d004      	beq.n	8005a3a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2204      	movs	r2, #4
 8005a34:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	7f1b      	ldrb	r3, [r3, #28]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d101      	bne.n	8005a60 <HAL_RTCEx_SetWakeUpTimer+0x1c>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	e08a      	b.n	8005b76 <HAL_RTCEx_SetWakeUpTimer+0x132>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2201      	movs	r2, #1
 8005a64:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2202      	movs	r2, #2
 8005a6a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	22ca      	movs	r2, #202	; 0xca
 8005a72:	625a      	str	r2, [r3, #36]	; 0x24
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2253      	movs	r2, #83	; 0x53
 8005a7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d01e      	beq.n	8005ac8 <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 8005a8a:	f7fd f94f 	bl	8002d2c <HAL_GetTick>
 8005a8e:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8005a90:	e013      	b.n	8005aba <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a92:	f7fd f94b 	bl	8002d2c <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005aa0:	d90b      	bls.n	8005aba <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	22ff      	movs	r2, #255	; 0xff
 8005aa8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2203      	movs	r2, #3
 8005aae:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e05d      	b.n	8005b76 <HAL_RTCEx_SetWakeUpTimer+0x132>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1e4      	bne.n	8005a92 <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689a      	ldr	r2, [r3, #8]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ad6:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005ae8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005aea:	f7fd f91f 	bl	8002d2c <HAL_GetTick>
 8005aee:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005af0:	e013      	b.n	8005b1a <HAL_RTCEx_SetWakeUpTimer+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005af2:	f7fd f91b 	bl	8002d2c <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b00:	d90b      	bls.n	8005b1a <HAL_RTCEx_SetWakeUpTimer+0xd6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	22ff      	movs	r2, #255	; 0xff
 8005b08:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2203      	movs	r2, #3
 8005b0e:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e02d      	b.n	8005b76 <HAL_RTCEx_SetWakeUpTimer+0x132>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d0e4      	beq.n	8005af2 <HAL_RTCEx_SetWakeUpTimer+0xae>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689a      	ldr	r2, [r3, #8]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 0207 	bic.w	r2, r2, #7
 8005b36:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6899      	ldr	r1, [r3, #8]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689a      	ldr	r2, [r3, #8]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b5e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	22ff      	movs	r2, #255	; 0xff
 8005b66:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3718      	adds	r7, #24
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 31)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b085      	sub	sp, #20
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
 8005b86:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3350      	adds	r3, #80	; 0x50
 8005b92:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3714      	adds	r7, #20
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b084      	sub	sp, #16
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e09d      	b.n	8005cfc <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d108      	bne.n	8005bda <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bd0:	d009      	beq.n	8005be6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	61da      	str	r2, [r3, #28]
 8005bd8:	e005      	b.n	8005be6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d106      	bne.n	8005c06 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f7fc fc2d 	bl	8002460 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2202      	movs	r2, #2
 8005c0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c1c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c26:	d902      	bls.n	8005c2e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	e002      	b.n	8005c34 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c32:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005c3c:	d007      	beq.n	8005c4e <HAL_SPI_Init+0xa0>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c46:	d002      	beq.n	8005c4e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	431a      	orrs	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	431a      	orrs	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c7c:	431a      	orrs	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c86:	431a      	orrs	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c90:	ea42 0103 	orr.w	r1, r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	0c1b      	lsrs	r3, r3, #16
 8005caa:	f003 0204 	and.w	r2, r3, #4
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	f003 0310 	and.w	r3, r3, #16
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cbc:	f003 0308 	and.w	r3, r3, #8
 8005cc0:	431a      	orrs	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005cca:	ea42 0103 	orr.w	r1, r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	69da      	ldr	r2, [r3, #28]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e049      	b.n	8005daa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d106      	bne.n	8005d30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7fc fe36 	bl	800299c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	3304      	adds	r3, #4
 8005d40:	4619      	mov	r1, r3
 8005d42:	4610      	mov	r0, r2
 8005d44:	f000 fcfa 	bl	800673c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b082      	sub	sp, #8
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e049      	b.n	8005e58 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d106      	bne.n	8005dde <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f7fc fe47 	bl	8002a6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2202      	movs	r2, #2
 8005de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	3304      	adds	r3, #4
 8005dee:	4619      	mov	r1, r3
 8005df0:	4610      	mov	r0, r2
 8005df2:	f000 fca3 	bl	800673c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e049      	b.n	8005f06 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d106      	bne.n	8005e8c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f841 	bl	8005f0e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4610      	mov	r0, r2
 8005ea0:	f000 fc4c 	bl	800673c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b083      	sub	sp, #12
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b082      	sub	sp, #8
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d122      	bne.n	8005f7e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d11b      	bne.n	8005f7e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f06f 0202 	mvn.w	r2, #2
 8005f4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	f003 0303 	and.w	r3, r3, #3
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d003      	beq.n	8005f6c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 fbcb 	bl	8006700 <HAL_TIM_IC_CaptureCallback>
 8005f6a:	e005      	b.n	8005f78 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fbbd 	bl	80066ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 fbce 	bl	8006714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	f003 0304 	and.w	r3, r3, #4
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d122      	bne.n	8005fd2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f003 0304 	and.w	r3, r3, #4
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	d11b      	bne.n	8005fd2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f06f 0204 	mvn.w	r2, #4
 8005fa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d003      	beq.n	8005fc0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fba1 	bl	8006700 <HAL_TIM_IC_CaptureCallback>
 8005fbe:	e005      	b.n	8005fcc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 fb93 	bl	80066ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fba4 	bl	8006714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	f003 0308 	and.w	r3, r3, #8
 8005fdc:	2b08      	cmp	r3, #8
 8005fde:	d122      	bne.n	8006026 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	f003 0308 	and.w	r3, r3, #8
 8005fea:	2b08      	cmp	r3, #8
 8005fec:	d11b      	bne.n	8006026 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f06f 0208 	mvn.w	r2, #8
 8005ff6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2204      	movs	r2, #4
 8005ffc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	69db      	ldr	r3, [r3, #28]
 8006004:	f003 0303 	and.w	r3, r3, #3
 8006008:	2b00      	cmp	r3, #0
 800600a:	d003      	beq.n	8006014 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 fb77 	bl	8006700 <HAL_TIM_IC_CaptureCallback>
 8006012:	e005      	b.n	8006020 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fb69 	bl	80066ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fb7a 	bl	8006714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	f003 0310 	and.w	r3, r3, #16
 8006030:	2b10      	cmp	r3, #16
 8006032:	d122      	bne.n	800607a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	f003 0310 	and.w	r3, r3, #16
 800603e:	2b10      	cmp	r3, #16
 8006040:	d11b      	bne.n	800607a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f06f 0210 	mvn.w	r2, #16
 800604a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2208      	movs	r2, #8
 8006050:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800605c:	2b00      	cmp	r3, #0
 800605e:	d003      	beq.n	8006068 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 fb4d 	bl	8006700 <HAL_TIM_IC_CaptureCallback>
 8006066:	e005      	b.n	8006074 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fb3f 	bl	80066ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fb50 	bl	8006714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b01      	cmp	r3, #1
 8006086:	d10e      	bne.n	80060a6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	2b01      	cmp	r3, #1
 8006094:	d107      	bne.n	80060a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f06f 0201 	mvn.w	r2, #1
 800609e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 fb19 	bl	80066d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b0:	2b80      	cmp	r3, #128	; 0x80
 80060b2:	d10e      	bne.n	80060d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060be:	2b80      	cmp	r3, #128	; 0x80
 80060c0:	d107      	bne.n	80060d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f001 f923 	bl	8007318 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060e0:	d10e      	bne.n	8006100 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ec:	2b80      	cmp	r3, #128	; 0x80
 80060ee:	d107      	bne.n	8006100 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80060f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f001 f916 	bl	800732c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610a:	2b40      	cmp	r3, #64	; 0x40
 800610c:	d10e      	bne.n	800612c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006118:	2b40      	cmp	r3, #64	; 0x40
 800611a:	d107      	bne.n	800612c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 fafe 	bl	8006728 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f003 0320 	and.w	r3, r3, #32
 8006136:	2b20      	cmp	r3, #32
 8006138:	d10e      	bne.n	8006158 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f003 0320 	and.w	r3, r3, #32
 8006144:	2b20      	cmp	r3, #32
 8006146:	d107      	bne.n	8006158 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f06f 0220 	mvn.w	r2, #32
 8006150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f001 f8d6 	bl	8007304 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006158:	bf00      	nop
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800616c:	2300      	movs	r3, #0
 800616e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006176:	2b01      	cmp	r3, #1
 8006178:	d101      	bne.n	800617e <HAL_TIM_IC_ConfigChannel+0x1e>
 800617a:	2302      	movs	r3, #2
 800617c:	e088      	b.n	8006290 <HAL_TIM_IC_ConfigChannel+0x130>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d11b      	bne.n	80061c4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800619c:	f000 fe60 	bl	8006e60 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699a      	ldr	r2, [r3, #24]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 020c 	bic.w	r2, r2, #12
 80061ae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6999      	ldr	r1, [r3, #24]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	689a      	ldr	r2, [r3, #8]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	619a      	str	r2, [r3, #24]
 80061c2:	e060      	b.n	8006286 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b04      	cmp	r3, #4
 80061c8:	d11c      	bne.n	8006204 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80061da:	f000 fee4 	bl	8006fa6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	699a      	ldr	r2, [r3, #24]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80061ec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	6999      	ldr	r1, [r3, #24]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	021a      	lsls	r2, r3, #8
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	430a      	orrs	r2, r1
 8006200:	619a      	str	r2, [r3, #24]
 8006202:	e040      	b.n	8006286 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b08      	cmp	r3, #8
 8006208:	d11b      	bne.n	8006242 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800621a:	f000 ff31 	bl	8007080 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	69da      	ldr	r2, [r3, #28]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f022 020c 	bic.w	r2, r2, #12
 800622c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	69d9      	ldr	r1, [r3, #28]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	430a      	orrs	r2, r1
 800623e:	61da      	str	r2, [r3, #28]
 8006240:	e021      	b.n	8006286 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b0c      	cmp	r3, #12
 8006246:	d11c      	bne.n	8006282 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006258:	f000 ff4e 	bl	80070f8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	69da      	ldr	r2, [r3, #28]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800626a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	69d9      	ldr	r1, [r3, #28]
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	021a      	lsls	r2, r3, #8
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	430a      	orrs	r2, r1
 800627e:	61da      	str	r2, [r3, #28]
 8006280:	e001      	b.n	8006286 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800628e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006290:	4618      	mov	r0, r3
 8006292:	3718      	adds	r7, #24
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062a4:	2300      	movs	r3, #0
 80062a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d101      	bne.n	80062b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062b2:	2302      	movs	r3, #2
 80062b4:	e0ff      	b.n	80064b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b14      	cmp	r3, #20
 80062c2:	f200 80f0 	bhi.w	80064a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80062c6:	a201      	add	r2, pc, #4	; (adr r2, 80062cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80062c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062cc:	08006321 	.word	0x08006321
 80062d0:	080064a7 	.word	0x080064a7
 80062d4:	080064a7 	.word	0x080064a7
 80062d8:	080064a7 	.word	0x080064a7
 80062dc:	08006361 	.word	0x08006361
 80062e0:	080064a7 	.word	0x080064a7
 80062e4:	080064a7 	.word	0x080064a7
 80062e8:	080064a7 	.word	0x080064a7
 80062ec:	080063a3 	.word	0x080063a3
 80062f0:	080064a7 	.word	0x080064a7
 80062f4:	080064a7 	.word	0x080064a7
 80062f8:	080064a7 	.word	0x080064a7
 80062fc:	080063e3 	.word	0x080063e3
 8006300:	080064a7 	.word	0x080064a7
 8006304:	080064a7 	.word	0x080064a7
 8006308:	080064a7 	.word	0x080064a7
 800630c:	08006425 	.word	0x08006425
 8006310:	080064a7 	.word	0x080064a7
 8006314:	080064a7 	.word	0x080064a7
 8006318:	080064a7 	.word	0x080064a7
 800631c:	08006465 	.word	0x08006465
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68b9      	ldr	r1, [r7, #8]
 8006326:	4618      	mov	r0, r3
 8006328:	f000 faa8 	bl	800687c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	699a      	ldr	r2, [r3, #24]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f042 0208 	orr.w	r2, r2, #8
 800633a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	699a      	ldr	r2, [r3, #24]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 0204 	bic.w	r2, r2, #4
 800634a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6999      	ldr	r1, [r3, #24]
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	691a      	ldr	r2, [r3, #16]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	619a      	str	r2, [r3, #24]
      break;
 800635e:	e0a5      	b.n	80064ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68b9      	ldr	r1, [r7, #8]
 8006366:	4618      	mov	r0, r3
 8006368:	f000 fafa 	bl	8006960 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	699a      	ldr	r2, [r3, #24]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800637a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	699a      	ldr	r2, [r3, #24]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800638a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6999      	ldr	r1, [r3, #24]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	021a      	lsls	r2, r3, #8
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	430a      	orrs	r2, r1
 800639e:	619a      	str	r2, [r3, #24]
      break;
 80063a0:	e084      	b.n	80064ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68b9      	ldr	r1, [r7, #8]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 fb51 	bl	8006a50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	69da      	ldr	r2, [r3, #28]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f042 0208 	orr.w	r2, r2, #8
 80063bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	69da      	ldr	r2, [r3, #28]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f022 0204 	bic.w	r2, r2, #4
 80063cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	69d9      	ldr	r1, [r3, #28]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	691a      	ldr	r2, [r3, #16]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	430a      	orrs	r2, r1
 80063de:	61da      	str	r2, [r3, #28]
      break;
 80063e0:	e064      	b.n	80064ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68b9      	ldr	r1, [r7, #8]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f000 fba7 	bl	8006b3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	69da      	ldr	r2, [r3, #28]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	69da      	ldr	r2, [r3, #28]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800640c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	69d9      	ldr	r1, [r3, #28]
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	021a      	lsls	r2, r3, #8
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	430a      	orrs	r2, r1
 8006420:	61da      	str	r2, [r3, #28]
      break;
 8006422:	e043      	b.n	80064ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68b9      	ldr	r1, [r7, #8]
 800642a:	4618      	mov	r0, r3
 800642c:	f000 fbde 	bl	8006bec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f042 0208 	orr.w	r2, r2, #8
 800643e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 0204 	bic.w	r2, r2, #4
 800644e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	691a      	ldr	r2, [r3, #16]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006462:	e023      	b.n	80064ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68b9      	ldr	r1, [r7, #8]
 800646a:	4618      	mov	r0, r3
 800646c:	f000 fc10 	bl	8006c90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800647e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800648e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	021a      	lsls	r2, r3, #8
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	430a      	orrs	r2, r1
 80064a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80064a4:	e002      	b.n	80064ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	75fb      	strb	r3, [r7, #23]
      break;
 80064aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3718      	adds	r7, #24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop

080064c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d101      	bne.n	80064dc <HAL_TIM_ConfigClockSource+0x1c>
 80064d8:	2302      	movs	r3, #2
 80064da:	e0b4      	b.n	8006646 <HAL_TIM_ConfigClockSource+0x186>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	4b56      	ldr	r3, [pc, #344]	; (8006650 <HAL_TIM_ConfigClockSource+0x190>)
 80064f8:	4013      	ands	r3, r2
 80064fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006502:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006514:	d03e      	beq.n	8006594 <HAL_TIM_ConfigClockSource+0xd4>
 8006516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800651a:	f200 8087 	bhi.w	800662c <HAL_TIM_ConfigClockSource+0x16c>
 800651e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006522:	f000 8086 	beq.w	8006632 <HAL_TIM_ConfigClockSource+0x172>
 8006526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800652a:	d87f      	bhi.n	800662c <HAL_TIM_ConfigClockSource+0x16c>
 800652c:	2b70      	cmp	r3, #112	; 0x70
 800652e:	d01a      	beq.n	8006566 <HAL_TIM_ConfigClockSource+0xa6>
 8006530:	2b70      	cmp	r3, #112	; 0x70
 8006532:	d87b      	bhi.n	800662c <HAL_TIM_ConfigClockSource+0x16c>
 8006534:	2b60      	cmp	r3, #96	; 0x60
 8006536:	d050      	beq.n	80065da <HAL_TIM_ConfigClockSource+0x11a>
 8006538:	2b60      	cmp	r3, #96	; 0x60
 800653a:	d877      	bhi.n	800662c <HAL_TIM_ConfigClockSource+0x16c>
 800653c:	2b50      	cmp	r3, #80	; 0x50
 800653e:	d03c      	beq.n	80065ba <HAL_TIM_ConfigClockSource+0xfa>
 8006540:	2b50      	cmp	r3, #80	; 0x50
 8006542:	d873      	bhi.n	800662c <HAL_TIM_ConfigClockSource+0x16c>
 8006544:	2b40      	cmp	r3, #64	; 0x40
 8006546:	d058      	beq.n	80065fa <HAL_TIM_ConfigClockSource+0x13a>
 8006548:	2b40      	cmp	r3, #64	; 0x40
 800654a:	d86f      	bhi.n	800662c <HAL_TIM_ConfigClockSource+0x16c>
 800654c:	2b30      	cmp	r3, #48	; 0x30
 800654e:	d064      	beq.n	800661a <HAL_TIM_ConfigClockSource+0x15a>
 8006550:	2b30      	cmp	r3, #48	; 0x30
 8006552:	d86b      	bhi.n	800662c <HAL_TIM_ConfigClockSource+0x16c>
 8006554:	2b20      	cmp	r3, #32
 8006556:	d060      	beq.n	800661a <HAL_TIM_ConfigClockSource+0x15a>
 8006558:	2b20      	cmp	r3, #32
 800655a:	d867      	bhi.n	800662c <HAL_TIM_ConfigClockSource+0x16c>
 800655c:	2b00      	cmp	r3, #0
 800655e:	d05c      	beq.n	800661a <HAL_TIM_ConfigClockSource+0x15a>
 8006560:	2b10      	cmp	r3, #16
 8006562:	d05a      	beq.n	800661a <HAL_TIM_ConfigClockSource+0x15a>
 8006564:	e062      	b.n	800662c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006576:	f000 fe17 	bl	80071a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006588:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	609a      	str	r2, [r3, #8]
      break;
 8006592:	e04f      	b.n	8006634 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065a4:	f000 fe00 	bl	80071a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689a      	ldr	r2, [r3, #8]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065b6:	609a      	str	r2, [r3, #8]
      break;
 80065b8:	e03c      	b.n	8006634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065c6:	461a      	mov	r2, r3
 80065c8:	f000 fcbe 	bl	8006f48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2150      	movs	r1, #80	; 0x50
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 fdcd 	bl	8007172 <TIM_ITRx_SetConfig>
      break;
 80065d8:	e02c      	b.n	8006634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065e6:	461a      	mov	r2, r3
 80065e8:	f000 fd1a 	bl	8007020 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2160      	movs	r1, #96	; 0x60
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 fdbd 	bl	8007172 <TIM_ITRx_SetConfig>
      break;
 80065f8:	e01c      	b.n	8006634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006606:	461a      	mov	r2, r3
 8006608:	f000 fc9e 	bl	8006f48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2140      	movs	r1, #64	; 0x40
 8006612:	4618      	mov	r0, r3
 8006614:	f000 fdad 	bl	8007172 <TIM_ITRx_SetConfig>
      break;
 8006618:	e00c      	b.n	8006634 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4619      	mov	r1, r3
 8006624:	4610      	mov	r0, r2
 8006626:	f000 fda4 	bl	8007172 <TIM_ITRx_SetConfig>
      break;
 800662a:	e003      	b.n	8006634 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	73fb      	strb	r3, [r7, #15]
      break;
 8006630:	e000      	b.n	8006634 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006632:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006644:	7bfb      	ldrb	r3, [r7, #15]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	fffeff88 	.word	0xfffeff88

08006654 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006664:	2b01      	cmp	r3, #1
 8006666:	d101      	bne.n	800666c <HAL_TIM_SlaveConfigSynchro+0x18>
 8006668:	2302      	movs	r3, #2
 800666a:	e031      	b.n	80066d0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2202      	movs	r2, #2
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800667c:	6839      	ldr	r1, [r7, #0]
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fb5a 	bl	8006d38 <TIM_SlaveTimer_SetConfig>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d009      	beq.n	800669e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e018      	b.n	80066d0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68da      	ldr	r2, [r3, #12]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ac:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68da      	ldr	r2, [r3, #12]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80066bc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a40      	ldr	r2, [pc, #256]	; (8006850 <TIM_Base_SetConfig+0x114>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d013      	beq.n	800677c <TIM_Base_SetConfig+0x40>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800675a:	d00f      	beq.n	800677c <TIM_Base_SetConfig+0x40>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a3d      	ldr	r2, [pc, #244]	; (8006854 <TIM_Base_SetConfig+0x118>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d00b      	beq.n	800677c <TIM_Base_SetConfig+0x40>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a3c      	ldr	r2, [pc, #240]	; (8006858 <TIM_Base_SetConfig+0x11c>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d007      	beq.n	800677c <TIM_Base_SetConfig+0x40>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a3b      	ldr	r2, [pc, #236]	; (800685c <TIM_Base_SetConfig+0x120>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d003      	beq.n	800677c <TIM_Base_SetConfig+0x40>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a3a      	ldr	r2, [pc, #232]	; (8006860 <TIM_Base_SetConfig+0x124>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d108      	bne.n	800678e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	4313      	orrs	r3, r2
 800678c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a2f      	ldr	r2, [pc, #188]	; (8006850 <TIM_Base_SetConfig+0x114>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d02b      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800679c:	d027      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a2c      	ldr	r2, [pc, #176]	; (8006854 <TIM_Base_SetConfig+0x118>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d023      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a2b      	ldr	r2, [pc, #172]	; (8006858 <TIM_Base_SetConfig+0x11c>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d01f      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a2a      	ldr	r2, [pc, #168]	; (800685c <TIM_Base_SetConfig+0x120>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d01b      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a29      	ldr	r2, [pc, #164]	; (8006860 <TIM_Base_SetConfig+0x124>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d017      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a28      	ldr	r2, [pc, #160]	; (8006864 <TIM_Base_SetConfig+0x128>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d013      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a27      	ldr	r2, [pc, #156]	; (8006868 <TIM_Base_SetConfig+0x12c>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d00f      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a26      	ldr	r2, [pc, #152]	; (800686c <TIM_Base_SetConfig+0x130>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d00b      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a25      	ldr	r2, [pc, #148]	; (8006870 <TIM_Base_SetConfig+0x134>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d007      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a24      	ldr	r2, [pc, #144]	; (8006874 <TIM_Base_SetConfig+0x138>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d003      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a23      	ldr	r2, [pc, #140]	; (8006878 <TIM_Base_SetConfig+0x13c>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d108      	bne.n	8006800 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	4313      	orrs	r3, r2
 800680c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a0a      	ldr	r2, [pc, #40]	; (8006850 <TIM_Base_SetConfig+0x114>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d003      	beq.n	8006834 <TIM_Base_SetConfig+0xf8>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a0c      	ldr	r2, [pc, #48]	; (8006860 <TIM_Base_SetConfig+0x124>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d103      	bne.n	800683c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	691a      	ldr	r2, [r3, #16]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	615a      	str	r2, [r3, #20]
}
 8006842:	bf00      	nop
 8006844:	3714      	adds	r7, #20
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	40010000 	.word	0x40010000
 8006854:	40000400 	.word	0x40000400
 8006858:	40000800 	.word	0x40000800
 800685c:	40000c00 	.word	0x40000c00
 8006860:	40010400 	.word	0x40010400
 8006864:	40014000 	.word	0x40014000
 8006868:	40014400 	.word	0x40014400
 800686c:	40014800 	.word	0x40014800
 8006870:	40001800 	.word	0x40001800
 8006874:	40001c00 	.word	0x40001c00
 8006878:	40002000 	.word	0x40002000

0800687c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800687c:	b480      	push	{r7}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	f023 0201 	bic.w	r2, r3, #1
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	4b2b      	ldr	r3, [pc, #172]	; (8006954 <TIM_OC1_SetConfig+0xd8>)
 80068a8:	4013      	ands	r3, r2
 80068aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f023 0303 	bic.w	r3, r3, #3
 80068b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f023 0302 	bic.w	r3, r3, #2
 80068c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a21      	ldr	r2, [pc, #132]	; (8006958 <TIM_OC1_SetConfig+0xdc>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d003      	beq.n	80068e0 <TIM_OC1_SetConfig+0x64>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a20      	ldr	r2, [pc, #128]	; (800695c <TIM_OC1_SetConfig+0xe0>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d10c      	bne.n	80068fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f023 0308 	bic.w	r3, r3, #8
 80068e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f023 0304 	bic.w	r3, r3, #4
 80068f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a16      	ldr	r2, [pc, #88]	; (8006958 <TIM_OC1_SetConfig+0xdc>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d003      	beq.n	800690a <TIM_OC1_SetConfig+0x8e>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a15      	ldr	r2, [pc, #84]	; (800695c <TIM_OC1_SetConfig+0xe0>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d111      	bne.n	800692e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	4313      	orrs	r3, r2
 8006922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	4313      	orrs	r3, r2
 800692c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	621a      	str	r2, [r3, #32]
}
 8006948:	bf00      	nop
 800694a:	371c      	adds	r7, #28
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr
 8006954:	fffeff8f 	.word	0xfffeff8f
 8006958:	40010000 	.word	0x40010000
 800695c:	40010400 	.word	0x40010400

08006960 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006960:	b480      	push	{r7}
 8006962:	b087      	sub	sp, #28
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	f023 0210 	bic.w	r2, r3, #16
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	4b2e      	ldr	r3, [pc, #184]	; (8006a44 <TIM_OC2_SetConfig+0xe4>)
 800698c:	4013      	ands	r3, r2
 800698e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	021b      	lsls	r3, r3, #8
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f023 0320 	bic.w	r3, r3, #32
 80069aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	011b      	lsls	r3, r3, #4
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a23      	ldr	r2, [pc, #140]	; (8006a48 <TIM_OC2_SetConfig+0xe8>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d003      	beq.n	80069c8 <TIM_OC2_SetConfig+0x68>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a22      	ldr	r2, [pc, #136]	; (8006a4c <TIM_OC2_SetConfig+0xec>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d10d      	bne.n	80069e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	011b      	lsls	r3, r3, #4
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	4313      	orrs	r3, r2
 80069da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a18      	ldr	r2, [pc, #96]	; (8006a48 <TIM_OC2_SetConfig+0xe8>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d003      	beq.n	80069f4 <TIM_OC2_SetConfig+0x94>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a17      	ldr	r2, [pc, #92]	; (8006a4c <TIM_OC2_SetConfig+0xec>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d113      	bne.n	8006a1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	621a      	str	r2, [r3, #32]
}
 8006a36:	bf00      	nop
 8006a38:	371c      	adds	r7, #28
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	feff8fff 	.word	0xfeff8fff
 8006a48:	40010000 	.word	0x40010000
 8006a4c:	40010400 	.word	0x40010400

08006a50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	4b2d      	ldr	r3, [pc, #180]	; (8006b30 <TIM_OC3_SetConfig+0xe0>)
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f023 0303 	bic.w	r3, r3, #3
 8006a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	021b      	lsls	r3, r3, #8
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a22      	ldr	r2, [pc, #136]	; (8006b34 <TIM_OC3_SetConfig+0xe4>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d003      	beq.n	8006ab6 <TIM_OC3_SetConfig+0x66>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a21      	ldr	r2, [pc, #132]	; (8006b38 <TIM_OC3_SetConfig+0xe8>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d10d      	bne.n	8006ad2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006abc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	021b      	lsls	r3, r3, #8
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a17      	ldr	r2, [pc, #92]	; (8006b34 <TIM_OC3_SetConfig+0xe4>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d003      	beq.n	8006ae2 <TIM_OC3_SetConfig+0x92>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a16      	ldr	r2, [pc, #88]	; (8006b38 <TIM_OC3_SetConfig+0xe8>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d113      	bne.n	8006b0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006af0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	011b      	lsls	r3, r3, #4
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	011b      	lsls	r3, r3, #4
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	685a      	ldr	r2, [r3, #4]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	621a      	str	r2, [r3, #32]
}
 8006b24:	bf00      	nop
 8006b26:	371c      	adds	r7, #28
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	fffeff8f 	.word	0xfffeff8f
 8006b34:	40010000 	.word	0x40010000
 8006b38:	40010400 	.word	0x40010400

08006b3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	4b1e      	ldr	r3, [pc, #120]	; (8006be0 <TIM_OC4_SetConfig+0xa4>)
 8006b68:	4013      	ands	r3, r2
 8006b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	021b      	lsls	r3, r3, #8
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	031b      	lsls	r3, r3, #12
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a13      	ldr	r2, [pc, #76]	; (8006be4 <TIM_OC4_SetConfig+0xa8>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d003      	beq.n	8006ba4 <TIM_OC4_SetConfig+0x68>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a12      	ldr	r2, [pc, #72]	; (8006be8 <TIM_OC4_SetConfig+0xac>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d109      	bne.n	8006bb8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006baa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	019b      	lsls	r3, r3, #6
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685a      	ldr	r2, [r3, #4]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	621a      	str	r2, [r3, #32]
}
 8006bd2:	bf00      	nop
 8006bd4:	371c      	adds	r7, #28
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	feff8fff 	.word	0xfeff8fff
 8006be4:	40010000 	.word	0x40010000
 8006be8:	40010400 	.word	0x40010400

08006bec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b087      	sub	sp, #28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	4b1b      	ldr	r3, [pc, #108]	; (8006c84 <TIM_OC5_SetConfig+0x98>)
 8006c18:	4013      	ands	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	041b      	lsls	r3, r3, #16
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a12      	ldr	r2, [pc, #72]	; (8006c88 <TIM_OC5_SetConfig+0x9c>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d003      	beq.n	8006c4a <TIM_OC5_SetConfig+0x5e>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a11      	ldr	r2, [pc, #68]	; (8006c8c <TIM_OC5_SetConfig+0xa0>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d109      	bne.n	8006c5e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	021b      	lsls	r3, r3, #8
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	685a      	ldr	r2, [r3, #4]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	621a      	str	r2, [r3, #32]
}
 8006c78:	bf00      	nop
 8006c7a:	371c      	adds	r7, #28
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr
 8006c84:	fffeff8f 	.word	0xfffeff8f
 8006c88:	40010000 	.word	0x40010000
 8006c8c:	40010400 	.word	0x40010400

08006c90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b087      	sub	sp, #28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	4b1c      	ldr	r3, [pc, #112]	; (8006d2c <TIM_OC6_SetConfig+0x9c>)
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	021b      	lsls	r3, r3, #8
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	051b      	lsls	r3, r3, #20
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a13      	ldr	r2, [pc, #76]	; (8006d30 <TIM_OC6_SetConfig+0xa0>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d003      	beq.n	8006cf0 <TIM_OC6_SetConfig+0x60>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a12      	ldr	r2, [pc, #72]	; (8006d34 <TIM_OC6_SetConfig+0xa4>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d109      	bne.n	8006d04 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	029b      	lsls	r3, r3, #10
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	621a      	str	r2, [r3, #32]
}
 8006d1e:	bf00      	nop
 8006d20:	371c      	adds	r7, #28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	feff8fff 	.word	0xfeff8fff
 8006d30:	40010000 	.word	0x40010000
 8006d34:	40010400 	.word	0x40010400

08006d38 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d42:	2300      	movs	r3, #0
 8006d44:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d54:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	4b3e      	ldr	r3, [pc, #248]	; (8006e5c <TIM_SlaveTimer_SetConfig+0x124>)
 8006d64:	4013      	ands	r3, r2
 8006d66:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2b70      	cmp	r3, #112	; 0x70
 8006d80:	d01a      	beq.n	8006db8 <TIM_SlaveTimer_SetConfig+0x80>
 8006d82:	2b70      	cmp	r3, #112	; 0x70
 8006d84:	d860      	bhi.n	8006e48 <TIM_SlaveTimer_SetConfig+0x110>
 8006d86:	2b60      	cmp	r3, #96	; 0x60
 8006d88:	d054      	beq.n	8006e34 <TIM_SlaveTimer_SetConfig+0xfc>
 8006d8a:	2b60      	cmp	r3, #96	; 0x60
 8006d8c:	d85c      	bhi.n	8006e48 <TIM_SlaveTimer_SetConfig+0x110>
 8006d8e:	2b50      	cmp	r3, #80	; 0x50
 8006d90:	d046      	beq.n	8006e20 <TIM_SlaveTimer_SetConfig+0xe8>
 8006d92:	2b50      	cmp	r3, #80	; 0x50
 8006d94:	d858      	bhi.n	8006e48 <TIM_SlaveTimer_SetConfig+0x110>
 8006d96:	2b40      	cmp	r3, #64	; 0x40
 8006d98:	d019      	beq.n	8006dce <TIM_SlaveTimer_SetConfig+0x96>
 8006d9a:	2b40      	cmp	r3, #64	; 0x40
 8006d9c:	d854      	bhi.n	8006e48 <TIM_SlaveTimer_SetConfig+0x110>
 8006d9e:	2b30      	cmp	r3, #48	; 0x30
 8006da0:	d055      	beq.n	8006e4e <TIM_SlaveTimer_SetConfig+0x116>
 8006da2:	2b30      	cmp	r3, #48	; 0x30
 8006da4:	d850      	bhi.n	8006e48 <TIM_SlaveTimer_SetConfig+0x110>
 8006da6:	2b20      	cmp	r3, #32
 8006da8:	d051      	beq.n	8006e4e <TIM_SlaveTimer_SetConfig+0x116>
 8006daa:	2b20      	cmp	r3, #32
 8006dac:	d84c      	bhi.n	8006e48 <TIM_SlaveTimer_SetConfig+0x110>
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d04d      	beq.n	8006e4e <TIM_SlaveTimer_SetConfig+0x116>
 8006db2:	2b10      	cmp	r3, #16
 8006db4:	d04b      	beq.n	8006e4e <TIM_SlaveTimer_SetConfig+0x116>
 8006db6:	e047      	b.n	8006e48 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006dc8:	f000 f9ee 	bl	80071a8 <TIM_ETR_SetConfig>
      break;
 8006dcc:	e040      	b.n	8006e50 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b05      	cmp	r3, #5
 8006dd4:	d101      	bne.n	8006dda <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e03b      	b.n	8006e52 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6a1b      	ldr	r3, [r3, #32]
 8006de0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	6a1a      	ldr	r2, [r3, #32]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 0201 	bic.w	r2, r2, #1
 8006df0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e00:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	011b      	lsls	r3, r3, #4
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	621a      	str	r2, [r3, #32]
      break;
 8006e1e:	e017      	b.n	8006e50 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	f000 f88b 	bl	8006f48 <TIM_TI1_ConfigInputStage>
      break;
 8006e32:	e00d      	b.n	8006e50 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e40:	461a      	mov	r2, r3
 8006e42:	f000 f8ed 	bl	8007020 <TIM_TI2_ConfigInputStage>
      break;
 8006e46:	e003      	b.n	8006e50 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e4c:	e000      	b.n	8006e50 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006e4e:	bf00      	nop
  }

  return status;
 8006e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3718      	adds	r7, #24
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	fffefff8 	.word	0xfffefff8

08006e60 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
 8006e6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	f023 0201 	bic.w	r2, r3, #1
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6a1b      	ldr	r3, [r3, #32]
 8006e84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	4a28      	ldr	r2, [pc, #160]	; (8006f2c <TIM_TI1_SetConfig+0xcc>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d01b      	beq.n	8006ec6 <TIM_TI1_SetConfig+0x66>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e94:	d017      	beq.n	8006ec6 <TIM_TI1_SetConfig+0x66>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	4a25      	ldr	r2, [pc, #148]	; (8006f30 <TIM_TI1_SetConfig+0xd0>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d013      	beq.n	8006ec6 <TIM_TI1_SetConfig+0x66>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	4a24      	ldr	r2, [pc, #144]	; (8006f34 <TIM_TI1_SetConfig+0xd4>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d00f      	beq.n	8006ec6 <TIM_TI1_SetConfig+0x66>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	4a23      	ldr	r2, [pc, #140]	; (8006f38 <TIM_TI1_SetConfig+0xd8>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d00b      	beq.n	8006ec6 <TIM_TI1_SetConfig+0x66>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	4a22      	ldr	r2, [pc, #136]	; (8006f3c <TIM_TI1_SetConfig+0xdc>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d007      	beq.n	8006ec6 <TIM_TI1_SetConfig+0x66>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	4a21      	ldr	r2, [pc, #132]	; (8006f40 <TIM_TI1_SetConfig+0xe0>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d003      	beq.n	8006ec6 <TIM_TI1_SetConfig+0x66>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	4a20      	ldr	r2, [pc, #128]	; (8006f44 <TIM_TI1_SetConfig+0xe4>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d101      	bne.n	8006eca <TIM_TI1_SetConfig+0x6a>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e000      	b.n	8006ecc <TIM_TI1_SetConfig+0x6c>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d008      	beq.n	8006ee2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	f023 0303 	bic.w	r3, r3, #3
 8006ed6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	617b      	str	r3, [r7, #20]
 8006ee0:	e003      	b.n	8006eea <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f043 0301 	orr.w	r3, r3, #1
 8006ee8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ef0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	011b      	lsls	r3, r3, #4
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	f023 030a 	bic.w	r3, r3, #10
 8006f04:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	f003 030a 	and.w	r3, r3, #10
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	621a      	str	r2, [r3, #32]
}
 8006f1e:	bf00      	nop
 8006f20:	371c      	adds	r7, #28
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	40010000 	.word	0x40010000
 8006f30:	40000400 	.word	0x40000400
 8006f34:	40000800 	.word	0x40000800
 8006f38:	40000c00 	.word	0x40000c00
 8006f3c:	40010400 	.word	0x40010400
 8006f40:	40014000 	.word	0x40014000
 8006f44:	40001800 	.word	0x40001800

08006f48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b087      	sub	sp, #28
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6a1b      	ldr	r3, [r3, #32]
 8006f58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	f023 0201 	bic.w	r2, r3, #1
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	011b      	lsls	r3, r3, #4
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	f023 030a 	bic.w	r3, r3, #10
 8006f84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	621a      	str	r2, [r3, #32]
}
 8006f9a:	bf00      	nop
 8006f9c:	371c      	adds	r7, #28
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b087      	sub	sp, #28
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	60f8      	str	r0, [r7, #12]
 8006fae:	60b9      	str	r1, [r7, #8]
 8006fb0:	607a      	str	r2, [r7, #4]
 8006fb2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	f023 0210 	bic.w	r2, r3, #16
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fd2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	021b      	lsls	r3, r3, #8
 8006fd8:	697a      	ldr	r2, [r7, #20]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fe4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	031b      	lsls	r3, r3, #12
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ff8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	011b      	lsls	r3, r3, #4
 8006ffe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	4313      	orrs	r3, r2
 8007006:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	621a      	str	r2, [r3, #32]
}
 8007014:	bf00      	nop
 8007016:	371c      	adds	r7, #28
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007020:	b480      	push	{r7}
 8007022:	b087      	sub	sp, #28
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6a1b      	ldr	r3, [r3, #32]
 8007030:	f023 0210 	bic.w	r2, r3, #16
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800704a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	031b      	lsls	r3, r3, #12
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	4313      	orrs	r3, r2
 8007054:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800705c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	011b      	lsls	r3, r3, #4
 8007062:	693a      	ldr	r2, [r7, #16]
 8007064:	4313      	orrs	r3, r2
 8007066:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	621a      	str	r2, [r3, #32]
}
 8007074:	bf00      	nop
 8007076:	371c      	adds	r7, #28
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007080:	b480      	push	{r7}
 8007082:	b087      	sub	sp, #28
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
 800708c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6a1b      	ldr	r3, [r3, #32]
 80070a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f023 0303 	bic.w	r3, r3, #3
 80070ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	011b      	lsls	r3, r3, #4
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80070d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	021b      	lsls	r3, r3, #8
 80070d6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	4313      	orrs	r3, r2
 80070de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	621a      	str	r2, [r3, #32]
}
 80070ec:	bf00      	nop
 80070ee:	371c      	adds	r7, #28
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
 8007104:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	69db      	ldr	r3, [r3, #28]
 8007116:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6a1b      	ldr	r3, [r3, #32]
 800711c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007124:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	021b      	lsls	r3, r3, #8
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	4313      	orrs	r3, r2
 800712e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007136:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	031b      	lsls	r3, r3, #12
 800713c:	b29b      	uxth	r3, r3
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	4313      	orrs	r3, r2
 8007142:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800714a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	031b      	lsls	r3, r3, #12
 8007150:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	4313      	orrs	r3, r2
 8007158:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	621a      	str	r2, [r3, #32]
}
 8007166:	bf00      	nop
 8007168:	371c      	adds	r7, #28
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007172:	b480      	push	{r7}
 8007174:	b085      	sub	sp, #20
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
 800717a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007188:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	4313      	orrs	r3, r2
 8007190:	f043 0307 	orr.w	r3, r3, #7
 8007194:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	609a      	str	r2, [r3, #8]
}
 800719c:	bf00      	nop
 800719e:	3714      	adds	r7, #20
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b087      	sub	sp, #28
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
 80071b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	021a      	lsls	r2, r3, #8
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	431a      	orrs	r2, r3
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	697a      	ldr	r2, [r7, #20]
 80071da:	609a      	str	r2, [r3, #8]
}
 80071dc:	bf00      	nop
 80071de:	371c      	adds	r7, #28
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d101      	bne.n	8007200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071fc:	2302      	movs	r3, #2
 80071fe:	e06d      	b.n	80072dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2202      	movs	r2, #2
 800720c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a30      	ldr	r2, [pc, #192]	; (80072e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d004      	beq.n	8007234 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a2f      	ldr	r2, [pc, #188]	; (80072ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d108      	bne.n	8007246 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800723a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	4313      	orrs	r3, r2
 8007244:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800724c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	4313      	orrs	r3, r2
 8007256:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a20      	ldr	r2, [pc, #128]	; (80072e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d022      	beq.n	80072b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007272:	d01d      	beq.n	80072b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a1d      	ldr	r2, [pc, #116]	; (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d018      	beq.n	80072b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a1c      	ldr	r2, [pc, #112]	; (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d013      	beq.n	80072b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a1a      	ldr	r2, [pc, #104]	; (80072f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d00e      	beq.n	80072b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a15      	ldr	r2, [pc, #84]	; (80072ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d009      	beq.n	80072b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a16      	ldr	r2, [pc, #88]	; (80072fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d004      	beq.n	80072b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a15      	ldr	r2, [pc, #84]	; (8007300 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d10c      	bne.n	80072ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	4313      	orrs	r3, r2
 80072c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	40010000 	.word	0x40010000
 80072ec:	40010400 	.word	0x40010400
 80072f0:	40000400 	.word	0x40000400
 80072f4:	40000800 	.word	0x40000800
 80072f8:	40000c00 	.word	0x40000c00
 80072fc:	40014000 	.word	0x40014000
 8007300:	40001800 	.word	0x40001800

08007304 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007334:	bf00      	nop
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e040      	b.n	80073d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007356:	2b00      	cmp	r3, #0
 8007358:	d106      	bne.n	8007368 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7fb fc0a 	bl	8002b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2224      	movs	r2, #36	; 0x24
 800736c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f022 0201 	bic.w	r2, r2, #1
 800737c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f8b0 	bl	80074e4 <UART_SetConfig>
 8007384:	4603      	mov	r3, r0
 8007386:	2b01      	cmp	r3, #1
 8007388:	d101      	bne.n	800738e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e022      	b.n	80073d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007392:	2b00      	cmp	r3, #0
 8007394:	d002      	beq.n	800739c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fb08 	bl	80079ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	685a      	ldr	r2, [r3, #4]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	689a      	ldr	r2, [r3, #8]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f042 0201 	orr.w	r2, r2, #1
 80073ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fb8f 	bl	8007af0 <UART_CheckIdleState>
 80073d2:	4603      	mov	r3, r0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b08a      	sub	sp, #40	; 0x28
 80073e0:	af02      	add	r7, sp, #8
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	603b      	str	r3, [r7, #0]
 80073e8:	4613      	mov	r3, r2
 80073ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073f0:	2b20      	cmp	r3, #32
 80073f2:	d171      	bne.n	80074d8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d002      	beq.n	8007400 <HAL_UART_Transmit+0x24>
 80073fa:	88fb      	ldrh	r3, [r7, #6]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d101      	bne.n	8007404 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e06a      	b.n	80074da <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2221      	movs	r2, #33	; 0x21
 8007410:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007412:	f7fb fc8b 	bl	8002d2c <HAL_GetTick>
 8007416:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	88fa      	ldrh	r2, [r7, #6]
 800741c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	88fa      	ldrh	r2, [r7, #6]
 8007424:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007430:	d108      	bne.n	8007444 <HAL_UART_Transmit+0x68>
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d104      	bne.n	8007444 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800743a:	2300      	movs	r3, #0
 800743c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	61bb      	str	r3, [r7, #24]
 8007442:	e003      	b.n	800744c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007448:	2300      	movs	r3, #0
 800744a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800744c:	e02c      	b.n	80074a8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	2200      	movs	r2, #0
 8007456:	2180      	movs	r1, #128	; 0x80
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f000 fb96 	bl	8007b8a <UART_WaitOnFlagUntilTimeout>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d001      	beq.n	8007468 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007464:	2303      	movs	r3, #3
 8007466:	e038      	b.n	80074da <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10b      	bne.n	8007486 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	881b      	ldrh	r3, [r3, #0]
 8007472:	461a      	mov	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800747c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	3302      	adds	r3, #2
 8007482:	61bb      	str	r3, [r7, #24]
 8007484:	e007      	b.n	8007496 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	781a      	ldrb	r2, [r3, #0]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	3301      	adds	r3, #1
 8007494:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800749c:	b29b      	uxth	r3, r3
 800749e:	3b01      	subs	r3, #1
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1cc      	bne.n	800744e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	2200      	movs	r2, #0
 80074bc:	2140      	movs	r1, #64	; 0x40
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 fb63 	bl	8007b8a <UART_WaitOnFlagUntilTimeout>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e005      	b.n	80074da <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2220      	movs	r2, #32
 80074d2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80074d4:	2300      	movs	r3, #0
 80074d6:	e000      	b.n	80074da <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80074d8:	2302      	movs	r3, #2
  }
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3720      	adds	r7, #32
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
	...

080074e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b088      	sub	sp, #32
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074ec:	2300      	movs	r3, #0
 80074ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	689a      	ldr	r2, [r3, #8]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	431a      	orrs	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	695b      	ldr	r3, [r3, #20]
 80074fe:	431a      	orrs	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	4313      	orrs	r3, r2
 8007506:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	4ba6      	ldr	r3, [pc, #664]	; (80077a8 <UART_SetConfig+0x2c4>)
 8007510:	4013      	ands	r3, r2
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	6812      	ldr	r2, [r2, #0]
 8007516:	6979      	ldr	r1, [r7, #20]
 8007518:	430b      	orrs	r3, r1
 800751a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	68da      	ldr	r2, [r3, #12]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	430a      	orrs	r2, r1
 8007530:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a1b      	ldr	r3, [r3, #32]
 800753c:	697a      	ldr	r2, [r7, #20]
 800753e:	4313      	orrs	r3, r2
 8007540:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	430a      	orrs	r2, r1
 8007554:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a94      	ldr	r2, [pc, #592]	; (80077ac <UART_SetConfig+0x2c8>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d120      	bne.n	80075a2 <UART_SetConfig+0xbe>
 8007560:	4b93      	ldr	r3, [pc, #588]	; (80077b0 <UART_SetConfig+0x2cc>)
 8007562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007566:	f003 0303 	and.w	r3, r3, #3
 800756a:	2b03      	cmp	r3, #3
 800756c:	d816      	bhi.n	800759c <UART_SetConfig+0xb8>
 800756e:	a201      	add	r2, pc, #4	; (adr r2, 8007574 <UART_SetConfig+0x90>)
 8007570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007574:	08007585 	.word	0x08007585
 8007578:	08007591 	.word	0x08007591
 800757c:	0800758b 	.word	0x0800758b
 8007580:	08007597 	.word	0x08007597
 8007584:	2301      	movs	r3, #1
 8007586:	77fb      	strb	r3, [r7, #31]
 8007588:	e150      	b.n	800782c <UART_SetConfig+0x348>
 800758a:	2302      	movs	r3, #2
 800758c:	77fb      	strb	r3, [r7, #31]
 800758e:	e14d      	b.n	800782c <UART_SetConfig+0x348>
 8007590:	2304      	movs	r3, #4
 8007592:	77fb      	strb	r3, [r7, #31]
 8007594:	e14a      	b.n	800782c <UART_SetConfig+0x348>
 8007596:	2308      	movs	r3, #8
 8007598:	77fb      	strb	r3, [r7, #31]
 800759a:	e147      	b.n	800782c <UART_SetConfig+0x348>
 800759c:	2310      	movs	r3, #16
 800759e:	77fb      	strb	r3, [r7, #31]
 80075a0:	e144      	b.n	800782c <UART_SetConfig+0x348>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a83      	ldr	r2, [pc, #524]	; (80077b4 <UART_SetConfig+0x2d0>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d132      	bne.n	8007612 <UART_SetConfig+0x12e>
 80075ac:	4b80      	ldr	r3, [pc, #512]	; (80077b0 <UART_SetConfig+0x2cc>)
 80075ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b2:	f003 030c 	and.w	r3, r3, #12
 80075b6:	2b0c      	cmp	r3, #12
 80075b8:	d828      	bhi.n	800760c <UART_SetConfig+0x128>
 80075ba:	a201      	add	r2, pc, #4	; (adr r2, 80075c0 <UART_SetConfig+0xdc>)
 80075bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c0:	080075f5 	.word	0x080075f5
 80075c4:	0800760d 	.word	0x0800760d
 80075c8:	0800760d 	.word	0x0800760d
 80075cc:	0800760d 	.word	0x0800760d
 80075d0:	08007601 	.word	0x08007601
 80075d4:	0800760d 	.word	0x0800760d
 80075d8:	0800760d 	.word	0x0800760d
 80075dc:	0800760d 	.word	0x0800760d
 80075e0:	080075fb 	.word	0x080075fb
 80075e4:	0800760d 	.word	0x0800760d
 80075e8:	0800760d 	.word	0x0800760d
 80075ec:	0800760d 	.word	0x0800760d
 80075f0:	08007607 	.word	0x08007607
 80075f4:	2300      	movs	r3, #0
 80075f6:	77fb      	strb	r3, [r7, #31]
 80075f8:	e118      	b.n	800782c <UART_SetConfig+0x348>
 80075fa:	2302      	movs	r3, #2
 80075fc:	77fb      	strb	r3, [r7, #31]
 80075fe:	e115      	b.n	800782c <UART_SetConfig+0x348>
 8007600:	2304      	movs	r3, #4
 8007602:	77fb      	strb	r3, [r7, #31]
 8007604:	e112      	b.n	800782c <UART_SetConfig+0x348>
 8007606:	2308      	movs	r3, #8
 8007608:	77fb      	strb	r3, [r7, #31]
 800760a:	e10f      	b.n	800782c <UART_SetConfig+0x348>
 800760c:	2310      	movs	r3, #16
 800760e:	77fb      	strb	r3, [r7, #31]
 8007610:	e10c      	b.n	800782c <UART_SetConfig+0x348>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a68      	ldr	r2, [pc, #416]	; (80077b8 <UART_SetConfig+0x2d4>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d120      	bne.n	800765e <UART_SetConfig+0x17a>
 800761c:	4b64      	ldr	r3, [pc, #400]	; (80077b0 <UART_SetConfig+0x2cc>)
 800761e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007622:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007626:	2b30      	cmp	r3, #48	; 0x30
 8007628:	d013      	beq.n	8007652 <UART_SetConfig+0x16e>
 800762a:	2b30      	cmp	r3, #48	; 0x30
 800762c:	d814      	bhi.n	8007658 <UART_SetConfig+0x174>
 800762e:	2b20      	cmp	r3, #32
 8007630:	d009      	beq.n	8007646 <UART_SetConfig+0x162>
 8007632:	2b20      	cmp	r3, #32
 8007634:	d810      	bhi.n	8007658 <UART_SetConfig+0x174>
 8007636:	2b00      	cmp	r3, #0
 8007638:	d002      	beq.n	8007640 <UART_SetConfig+0x15c>
 800763a:	2b10      	cmp	r3, #16
 800763c:	d006      	beq.n	800764c <UART_SetConfig+0x168>
 800763e:	e00b      	b.n	8007658 <UART_SetConfig+0x174>
 8007640:	2300      	movs	r3, #0
 8007642:	77fb      	strb	r3, [r7, #31]
 8007644:	e0f2      	b.n	800782c <UART_SetConfig+0x348>
 8007646:	2302      	movs	r3, #2
 8007648:	77fb      	strb	r3, [r7, #31]
 800764a:	e0ef      	b.n	800782c <UART_SetConfig+0x348>
 800764c:	2304      	movs	r3, #4
 800764e:	77fb      	strb	r3, [r7, #31]
 8007650:	e0ec      	b.n	800782c <UART_SetConfig+0x348>
 8007652:	2308      	movs	r3, #8
 8007654:	77fb      	strb	r3, [r7, #31]
 8007656:	e0e9      	b.n	800782c <UART_SetConfig+0x348>
 8007658:	2310      	movs	r3, #16
 800765a:	77fb      	strb	r3, [r7, #31]
 800765c:	e0e6      	b.n	800782c <UART_SetConfig+0x348>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a56      	ldr	r2, [pc, #344]	; (80077bc <UART_SetConfig+0x2d8>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d120      	bne.n	80076aa <UART_SetConfig+0x1c6>
 8007668:	4b51      	ldr	r3, [pc, #324]	; (80077b0 <UART_SetConfig+0x2cc>)
 800766a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800766e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007672:	2bc0      	cmp	r3, #192	; 0xc0
 8007674:	d013      	beq.n	800769e <UART_SetConfig+0x1ba>
 8007676:	2bc0      	cmp	r3, #192	; 0xc0
 8007678:	d814      	bhi.n	80076a4 <UART_SetConfig+0x1c0>
 800767a:	2b80      	cmp	r3, #128	; 0x80
 800767c:	d009      	beq.n	8007692 <UART_SetConfig+0x1ae>
 800767e:	2b80      	cmp	r3, #128	; 0x80
 8007680:	d810      	bhi.n	80076a4 <UART_SetConfig+0x1c0>
 8007682:	2b00      	cmp	r3, #0
 8007684:	d002      	beq.n	800768c <UART_SetConfig+0x1a8>
 8007686:	2b40      	cmp	r3, #64	; 0x40
 8007688:	d006      	beq.n	8007698 <UART_SetConfig+0x1b4>
 800768a:	e00b      	b.n	80076a4 <UART_SetConfig+0x1c0>
 800768c:	2300      	movs	r3, #0
 800768e:	77fb      	strb	r3, [r7, #31]
 8007690:	e0cc      	b.n	800782c <UART_SetConfig+0x348>
 8007692:	2302      	movs	r3, #2
 8007694:	77fb      	strb	r3, [r7, #31]
 8007696:	e0c9      	b.n	800782c <UART_SetConfig+0x348>
 8007698:	2304      	movs	r3, #4
 800769a:	77fb      	strb	r3, [r7, #31]
 800769c:	e0c6      	b.n	800782c <UART_SetConfig+0x348>
 800769e:	2308      	movs	r3, #8
 80076a0:	77fb      	strb	r3, [r7, #31]
 80076a2:	e0c3      	b.n	800782c <UART_SetConfig+0x348>
 80076a4:	2310      	movs	r3, #16
 80076a6:	77fb      	strb	r3, [r7, #31]
 80076a8:	e0c0      	b.n	800782c <UART_SetConfig+0x348>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a44      	ldr	r2, [pc, #272]	; (80077c0 <UART_SetConfig+0x2dc>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d125      	bne.n	8007700 <UART_SetConfig+0x21c>
 80076b4:	4b3e      	ldr	r3, [pc, #248]	; (80077b0 <UART_SetConfig+0x2cc>)
 80076b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076c2:	d017      	beq.n	80076f4 <UART_SetConfig+0x210>
 80076c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076c8:	d817      	bhi.n	80076fa <UART_SetConfig+0x216>
 80076ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076ce:	d00b      	beq.n	80076e8 <UART_SetConfig+0x204>
 80076d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076d4:	d811      	bhi.n	80076fa <UART_SetConfig+0x216>
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d003      	beq.n	80076e2 <UART_SetConfig+0x1fe>
 80076da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076de:	d006      	beq.n	80076ee <UART_SetConfig+0x20a>
 80076e0:	e00b      	b.n	80076fa <UART_SetConfig+0x216>
 80076e2:	2300      	movs	r3, #0
 80076e4:	77fb      	strb	r3, [r7, #31]
 80076e6:	e0a1      	b.n	800782c <UART_SetConfig+0x348>
 80076e8:	2302      	movs	r3, #2
 80076ea:	77fb      	strb	r3, [r7, #31]
 80076ec:	e09e      	b.n	800782c <UART_SetConfig+0x348>
 80076ee:	2304      	movs	r3, #4
 80076f0:	77fb      	strb	r3, [r7, #31]
 80076f2:	e09b      	b.n	800782c <UART_SetConfig+0x348>
 80076f4:	2308      	movs	r3, #8
 80076f6:	77fb      	strb	r3, [r7, #31]
 80076f8:	e098      	b.n	800782c <UART_SetConfig+0x348>
 80076fa:	2310      	movs	r3, #16
 80076fc:	77fb      	strb	r3, [r7, #31]
 80076fe:	e095      	b.n	800782c <UART_SetConfig+0x348>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a2f      	ldr	r2, [pc, #188]	; (80077c4 <UART_SetConfig+0x2e0>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d125      	bne.n	8007756 <UART_SetConfig+0x272>
 800770a:	4b29      	ldr	r3, [pc, #164]	; (80077b0 <UART_SetConfig+0x2cc>)
 800770c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007710:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007714:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007718:	d017      	beq.n	800774a <UART_SetConfig+0x266>
 800771a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800771e:	d817      	bhi.n	8007750 <UART_SetConfig+0x26c>
 8007720:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007724:	d00b      	beq.n	800773e <UART_SetConfig+0x25a>
 8007726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800772a:	d811      	bhi.n	8007750 <UART_SetConfig+0x26c>
 800772c:	2b00      	cmp	r3, #0
 800772e:	d003      	beq.n	8007738 <UART_SetConfig+0x254>
 8007730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007734:	d006      	beq.n	8007744 <UART_SetConfig+0x260>
 8007736:	e00b      	b.n	8007750 <UART_SetConfig+0x26c>
 8007738:	2301      	movs	r3, #1
 800773a:	77fb      	strb	r3, [r7, #31]
 800773c:	e076      	b.n	800782c <UART_SetConfig+0x348>
 800773e:	2302      	movs	r3, #2
 8007740:	77fb      	strb	r3, [r7, #31]
 8007742:	e073      	b.n	800782c <UART_SetConfig+0x348>
 8007744:	2304      	movs	r3, #4
 8007746:	77fb      	strb	r3, [r7, #31]
 8007748:	e070      	b.n	800782c <UART_SetConfig+0x348>
 800774a:	2308      	movs	r3, #8
 800774c:	77fb      	strb	r3, [r7, #31]
 800774e:	e06d      	b.n	800782c <UART_SetConfig+0x348>
 8007750:	2310      	movs	r3, #16
 8007752:	77fb      	strb	r3, [r7, #31]
 8007754:	e06a      	b.n	800782c <UART_SetConfig+0x348>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a1b      	ldr	r2, [pc, #108]	; (80077c8 <UART_SetConfig+0x2e4>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d138      	bne.n	80077d2 <UART_SetConfig+0x2ee>
 8007760:	4b13      	ldr	r3, [pc, #76]	; (80077b0 <UART_SetConfig+0x2cc>)
 8007762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007766:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800776a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800776e:	d017      	beq.n	80077a0 <UART_SetConfig+0x2bc>
 8007770:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007774:	d82a      	bhi.n	80077cc <UART_SetConfig+0x2e8>
 8007776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800777a:	d00b      	beq.n	8007794 <UART_SetConfig+0x2b0>
 800777c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007780:	d824      	bhi.n	80077cc <UART_SetConfig+0x2e8>
 8007782:	2b00      	cmp	r3, #0
 8007784:	d003      	beq.n	800778e <UART_SetConfig+0x2aa>
 8007786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800778a:	d006      	beq.n	800779a <UART_SetConfig+0x2b6>
 800778c:	e01e      	b.n	80077cc <UART_SetConfig+0x2e8>
 800778e:	2300      	movs	r3, #0
 8007790:	77fb      	strb	r3, [r7, #31]
 8007792:	e04b      	b.n	800782c <UART_SetConfig+0x348>
 8007794:	2302      	movs	r3, #2
 8007796:	77fb      	strb	r3, [r7, #31]
 8007798:	e048      	b.n	800782c <UART_SetConfig+0x348>
 800779a:	2304      	movs	r3, #4
 800779c:	77fb      	strb	r3, [r7, #31]
 800779e:	e045      	b.n	800782c <UART_SetConfig+0x348>
 80077a0:	2308      	movs	r3, #8
 80077a2:	77fb      	strb	r3, [r7, #31]
 80077a4:	e042      	b.n	800782c <UART_SetConfig+0x348>
 80077a6:	bf00      	nop
 80077a8:	efff69f3 	.word	0xefff69f3
 80077ac:	40011000 	.word	0x40011000
 80077b0:	40023800 	.word	0x40023800
 80077b4:	40004400 	.word	0x40004400
 80077b8:	40004800 	.word	0x40004800
 80077bc:	40004c00 	.word	0x40004c00
 80077c0:	40005000 	.word	0x40005000
 80077c4:	40011400 	.word	0x40011400
 80077c8:	40007800 	.word	0x40007800
 80077cc:	2310      	movs	r3, #16
 80077ce:	77fb      	strb	r3, [r7, #31]
 80077d0:	e02c      	b.n	800782c <UART_SetConfig+0x348>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a72      	ldr	r2, [pc, #456]	; (80079a0 <UART_SetConfig+0x4bc>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d125      	bne.n	8007828 <UART_SetConfig+0x344>
 80077dc:	4b71      	ldr	r3, [pc, #452]	; (80079a4 <UART_SetConfig+0x4c0>)
 80077de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80077e6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80077ea:	d017      	beq.n	800781c <UART_SetConfig+0x338>
 80077ec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80077f0:	d817      	bhi.n	8007822 <UART_SetConfig+0x33e>
 80077f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077f6:	d00b      	beq.n	8007810 <UART_SetConfig+0x32c>
 80077f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077fc:	d811      	bhi.n	8007822 <UART_SetConfig+0x33e>
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d003      	beq.n	800780a <UART_SetConfig+0x326>
 8007802:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007806:	d006      	beq.n	8007816 <UART_SetConfig+0x332>
 8007808:	e00b      	b.n	8007822 <UART_SetConfig+0x33e>
 800780a:	2300      	movs	r3, #0
 800780c:	77fb      	strb	r3, [r7, #31]
 800780e:	e00d      	b.n	800782c <UART_SetConfig+0x348>
 8007810:	2302      	movs	r3, #2
 8007812:	77fb      	strb	r3, [r7, #31]
 8007814:	e00a      	b.n	800782c <UART_SetConfig+0x348>
 8007816:	2304      	movs	r3, #4
 8007818:	77fb      	strb	r3, [r7, #31]
 800781a:	e007      	b.n	800782c <UART_SetConfig+0x348>
 800781c:	2308      	movs	r3, #8
 800781e:	77fb      	strb	r3, [r7, #31]
 8007820:	e004      	b.n	800782c <UART_SetConfig+0x348>
 8007822:	2310      	movs	r3, #16
 8007824:	77fb      	strb	r3, [r7, #31]
 8007826:	e001      	b.n	800782c <UART_SetConfig+0x348>
 8007828:	2310      	movs	r3, #16
 800782a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	69db      	ldr	r3, [r3, #28]
 8007830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007834:	d15b      	bne.n	80078ee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007836:	7ffb      	ldrb	r3, [r7, #31]
 8007838:	2b08      	cmp	r3, #8
 800783a:	d828      	bhi.n	800788e <UART_SetConfig+0x3aa>
 800783c:	a201      	add	r2, pc, #4	; (adr r2, 8007844 <UART_SetConfig+0x360>)
 800783e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007842:	bf00      	nop
 8007844:	08007869 	.word	0x08007869
 8007848:	08007871 	.word	0x08007871
 800784c:	08007879 	.word	0x08007879
 8007850:	0800788f 	.word	0x0800788f
 8007854:	0800787f 	.word	0x0800787f
 8007858:	0800788f 	.word	0x0800788f
 800785c:	0800788f 	.word	0x0800788f
 8007860:	0800788f 	.word	0x0800788f
 8007864:	08007887 	.word	0x08007887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007868:	f7fd fb94 	bl	8004f94 <HAL_RCC_GetPCLK1Freq>
 800786c:	61b8      	str	r0, [r7, #24]
        break;
 800786e:	e013      	b.n	8007898 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007870:	f7fd fba4 	bl	8004fbc <HAL_RCC_GetPCLK2Freq>
 8007874:	61b8      	str	r0, [r7, #24]
        break;
 8007876:	e00f      	b.n	8007898 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007878:	4b4b      	ldr	r3, [pc, #300]	; (80079a8 <UART_SetConfig+0x4c4>)
 800787a:	61bb      	str	r3, [r7, #24]
        break;
 800787c:	e00c      	b.n	8007898 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800787e:	f7fd fab7 	bl	8004df0 <HAL_RCC_GetSysClockFreq>
 8007882:	61b8      	str	r0, [r7, #24]
        break;
 8007884:	e008      	b.n	8007898 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800788a:	61bb      	str	r3, [r7, #24]
        break;
 800788c:	e004      	b.n	8007898 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800788e:	2300      	movs	r3, #0
 8007890:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	77bb      	strb	r3, [r7, #30]
        break;
 8007896:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d074      	beq.n	8007988 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	005a      	lsls	r2, r3, #1
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	085b      	lsrs	r3, r3, #1
 80078a8:	441a      	add	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	2b0f      	cmp	r3, #15
 80078b8:	d916      	bls.n	80078e8 <UART_SetConfig+0x404>
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078c0:	d212      	bcs.n	80078e8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	f023 030f 	bic.w	r3, r3, #15
 80078ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	085b      	lsrs	r3, r3, #1
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	f003 0307 	and.w	r3, r3, #7
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	89fb      	ldrh	r3, [r7, #14]
 80078da:	4313      	orrs	r3, r2
 80078dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	89fa      	ldrh	r2, [r7, #14]
 80078e4:	60da      	str	r2, [r3, #12]
 80078e6:	e04f      	b.n	8007988 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	77bb      	strb	r3, [r7, #30]
 80078ec:	e04c      	b.n	8007988 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078ee:	7ffb      	ldrb	r3, [r7, #31]
 80078f0:	2b08      	cmp	r3, #8
 80078f2:	d828      	bhi.n	8007946 <UART_SetConfig+0x462>
 80078f4:	a201      	add	r2, pc, #4	; (adr r2, 80078fc <UART_SetConfig+0x418>)
 80078f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fa:	bf00      	nop
 80078fc:	08007921 	.word	0x08007921
 8007900:	08007929 	.word	0x08007929
 8007904:	08007931 	.word	0x08007931
 8007908:	08007947 	.word	0x08007947
 800790c:	08007937 	.word	0x08007937
 8007910:	08007947 	.word	0x08007947
 8007914:	08007947 	.word	0x08007947
 8007918:	08007947 	.word	0x08007947
 800791c:	0800793f 	.word	0x0800793f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007920:	f7fd fb38 	bl	8004f94 <HAL_RCC_GetPCLK1Freq>
 8007924:	61b8      	str	r0, [r7, #24]
        break;
 8007926:	e013      	b.n	8007950 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007928:	f7fd fb48 	bl	8004fbc <HAL_RCC_GetPCLK2Freq>
 800792c:	61b8      	str	r0, [r7, #24]
        break;
 800792e:	e00f      	b.n	8007950 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007930:	4b1d      	ldr	r3, [pc, #116]	; (80079a8 <UART_SetConfig+0x4c4>)
 8007932:	61bb      	str	r3, [r7, #24]
        break;
 8007934:	e00c      	b.n	8007950 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007936:	f7fd fa5b 	bl	8004df0 <HAL_RCC_GetSysClockFreq>
 800793a:	61b8      	str	r0, [r7, #24]
        break;
 800793c:	e008      	b.n	8007950 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800793e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007942:	61bb      	str	r3, [r7, #24]
        break;
 8007944:	e004      	b.n	8007950 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007946:	2300      	movs	r3, #0
 8007948:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	77bb      	strb	r3, [r7, #30]
        break;
 800794e:	bf00      	nop
    }

    if (pclk != 0U)
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d018      	beq.n	8007988 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	085a      	lsrs	r2, r3, #1
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	441a      	add	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	fbb2 f3f3 	udiv	r3, r2, r3
 8007968:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	2b0f      	cmp	r3, #15
 800796e:	d909      	bls.n	8007984 <UART_SetConfig+0x4a0>
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007976:	d205      	bcs.n	8007984 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	b29a      	uxth	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	60da      	str	r2, [r3, #12]
 8007982:	e001      	b.n	8007988 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007994:	7fbb      	ldrb	r3, [r7, #30]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3720      	adds	r7, #32
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	40007c00 	.word	0x40007c00
 80079a4:	40023800 	.word	0x40023800
 80079a8:	00f42400 	.word	0x00f42400

080079ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b8:	f003 0301 	and.w	r3, r3, #1
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00a      	beq.n	80079d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	430a      	orrs	r2, r1
 80079d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079da:	f003 0302 	and.w	r3, r3, #2
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00a      	beq.n	80079f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	430a      	orrs	r2, r1
 80079f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fc:	f003 0304 	and.w	r3, r3, #4
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00a      	beq.n	8007a1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	430a      	orrs	r2, r1
 8007a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1e:	f003 0308 	and.w	r3, r3, #8
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00a      	beq.n	8007a3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a40:	f003 0310 	and.w	r3, r3, #16
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00a      	beq.n	8007a5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a62:	f003 0320 	and.w	r3, r3, #32
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00a      	beq.n	8007a80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d01a      	beq.n	8007ac2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007aaa:	d10a      	bne.n	8007ac2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00a      	beq.n	8007ae4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	605a      	str	r2, [r3, #4]
  }
}
 8007ae4:	bf00      	nop
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af02      	add	r7, sp, #8
 8007af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b00:	f7fb f914 	bl	8002d2c <HAL_GetTick>
 8007b04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0308 	and.w	r3, r3, #8
 8007b10:	2b08      	cmp	r3, #8
 8007b12:	d10e      	bne.n	8007b32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b18:	9300      	str	r3, [sp, #0]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f831 	bl	8007b8a <UART_WaitOnFlagUntilTimeout>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d001      	beq.n	8007b32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e027      	b.n	8007b82 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 0304 	and.w	r3, r3, #4
 8007b3c:	2b04      	cmp	r3, #4
 8007b3e:	d10e      	bne.n	8007b5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f81b 	bl	8007b8a <UART_WaitOnFlagUntilTimeout>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d001      	beq.n	8007b5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e011      	b.n	8007b82 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2220      	movs	r2, #32
 8007b62:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2220      	movs	r2, #32
 8007b68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b09c      	sub	sp, #112	; 0x70
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	60f8      	str	r0, [r7, #12]
 8007b92:	60b9      	str	r1, [r7, #8]
 8007b94:	603b      	str	r3, [r7, #0]
 8007b96:	4613      	mov	r3, r2
 8007b98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b9a:	e0a7      	b.n	8007cec <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba2:	f000 80a3 	beq.w	8007cec <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ba6:	f7fb f8c1 	bl	8002d2c <HAL_GetTick>
 8007baa:	4602      	mov	r2, r0
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d302      	bcc.n	8007bbc <UART_WaitOnFlagUntilTimeout+0x32>
 8007bb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d13f      	bne.n	8007c3c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bc4:	e853 3f00 	ldrex	r3, [r3]
 8007bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007bd0:	667b      	str	r3, [r7, #100]	; 0x64
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bdc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007be0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007be2:	e841 2300 	strex	r3, r2, [r1]
 8007be6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1e6      	bne.n	8007bbc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	3308      	adds	r3, #8
 8007bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bf8:	e853 3f00 	ldrex	r3, [r3]
 8007bfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c00:	f023 0301 	bic.w	r3, r3, #1
 8007c04:	663b      	str	r3, [r7, #96]	; 0x60
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	3308      	adds	r3, #8
 8007c0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007c0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007c10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c16:	e841 2300 	strex	r3, r2, [r1]
 8007c1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1e5      	bne.n	8007bee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2220      	movs	r2, #32
 8007c26:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2220      	movs	r2, #32
 8007c2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e068      	b.n	8007d0e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 0304 	and.w	r3, r3, #4
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d050      	beq.n	8007cec <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	69db      	ldr	r3, [r3, #28]
 8007c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c58:	d148      	bne.n	8007cec <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c62:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	e853 3f00 	ldrex	r3, [r3]
 8007c70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	461a      	mov	r2, r3
 8007c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c82:	637b      	str	r3, [r7, #52]	; 0x34
 8007c84:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c8a:	e841 2300 	strex	r3, r2, [r1]
 8007c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1e6      	bne.n	8007c64 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	3308      	adds	r3, #8
 8007c9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	e853 3f00 	ldrex	r3, [r3]
 8007ca4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	f023 0301 	bic.w	r3, r3, #1
 8007cac:	66bb      	str	r3, [r7, #104]	; 0x68
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	3308      	adds	r3, #8
 8007cb4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007cb6:	623a      	str	r2, [r7, #32]
 8007cb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cba:	69f9      	ldr	r1, [r7, #28]
 8007cbc:	6a3a      	ldr	r2, [r7, #32]
 8007cbe:	e841 2300 	strex	r3, r2, [r1]
 8007cc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1e5      	bne.n	8007c96 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2220      	movs	r2, #32
 8007cd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2220      	movs	r2, #32
 8007cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007ce8:	2303      	movs	r3, #3
 8007cea:	e010      	b.n	8007d0e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	69da      	ldr	r2, [r3, #28]
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	bf0c      	ite	eq
 8007cfc:	2301      	moveq	r3, #1
 8007cfe:	2300      	movne	r3, #0
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	461a      	mov	r2, r3
 8007d04:	79fb      	ldrb	r3, [r7, #7]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	f43f af48 	beq.w	8007b9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3770      	adds	r7, #112	; 0x70
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
	...

08007d18 <malloc>:
 8007d18:	4b02      	ldr	r3, [pc, #8]	; (8007d24 <malloc+0xc>)
 8007d1a:	4601      	mov	r1, r0
 8007d1c:	6818      	ldr	r0, [r3, #0]
 8007d1e:	f000 b823 	b.w	8007d68 <_malloc_r>
 8007d22:	bf00      	nop
 8007d24:	20000058 	.word	0x20000058

08007d28 <sbrk_aligned>:
 8007d28:	b570      	push	{r4, r5, r6, lr}
 8007d2a:	4e0e      	ldr	r6, [pc, #56]	; (8007d64 <sbrk_aligned+0x3c>)
 8007d2c:	460c      	mov	r4, r1
 8007d2e:	6831      	ldr	r1, [r6, #0]
 8007d30:	4605      	mov	r5, r0
 8007d32:	b911      	cbnz	r1, 8007d3a <sbrk_aligned+0x12>
 8007d34:	f000 f8f0 	bl	8007f18 <_sbrk_r>
 8007d38:	6030      	str	r0, [r6, #0]
 8007d3a:	4621      	mov	r1, r4
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	f000 f8eb 	bl	8007f18 <_sbrk_r>
 8007d42:	1c43      	adds	r3, r0, #1
 8007d44:	d00a      	beq.n	8007d5c <sbrk_aligned+0x34>
 8007d46:	1cc4      	adds	r4, r0, #3
 8007d48:	f024 0403 	bic.w	r4, r4, #3
 8007d4c:	42a0      	cmp	r0, r4
 8007d4e:	d007      	beq.n	8007d60 <sbrk_aligned+0x38>
 8007d50:	1a21      	subs	r1, r4, r0
 8007d52:	4628      	mov	r0, r5
 8007d54:	f000 f8e0 	bl	8007f18 <_sbrk_r>
 8007d58:	3001      	adds	r0, #1
 8007d5a:	d101      	bne.n	8007d60 <sbrk_aligned+0x38>
 8007d5c:	f04f 34ff 	mov.w	r4, #4294967295
 8007d60:	4620      	mov	r0, r4
 8007d62:	bd70      	pop	{r4, r5, r6, pc}
 8007d64:	200004a0 	.word	0x200004a0

08007d68 <_malloc_r>:
 8007d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d6c:	1ccd      	adds	r5, r1, #3
 8007d6e:	f025 0503 	bic.w	r5, r5, #3
 8007d72:	3508      	adds	r5, #8
 8007d74:	2d0c      	cmp	r5, #12
 8007d76:	bf38      	it	cc
 8007d78:	250c      	movcc	r5, #12
 8007d7a:	2d00      	cmp	r5, #0
 8007d7c:	4607      	mov	r7, r0
 8007d7e:	db01      	blt.n	8007d84 <_malloc_r+0x1c>
 8007d80:	42a9      	cmp	r1, r5
 8007d82:	d905      	bls.n	8007d90 <_malloc_r+0x28>
 8007d84:	230c      	movs	r3, #12
 8007d86:	603b      	str	r3, [r7, #0]
 8007d88:	2600      	movs	r6, #0
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007e64 <_malloc_r+0xfc>
 8007d94:	f000 f868 	bl	8007e68 <__malloc_lock>
 8007d98:	f8d8 3000 	ldr.w	r3, [r8]
 8007d9c:	461c      	mov	r4, r3
 8007d9e:	bb5c      	cbnz	r4, 8007df8 <_malloc_r+0x90>
 8007da0:	4629      	mov	r1, r5
 8007da2:	4638      	mov	r0, r7
 8007da4:	f7ff ffc0 	bl	8007d28 <sbrk_aligned>
 8007da8:	1c43      	adds	r3, r0, #1
 8007daa:	4604      	mov	r4, r0
 8007dac:	d155      	bne.n	8007e5a <_malloc_r+0xf2>
 8007dae:	f8d8 4000 	ldr.w	r4, [r8]
 8007db2:	4626      	mov	r6, r4
 8007db4:	2e00      	cmp	r6, #0
 8007db6:	d145      	bne.n	8007e44 <_malloc_r+0xdc>
 8007db8:	2c00      	cmp	r4, #0
 8007dba:	d048      	beq.n	8007e4e <_malloc_r+0xe6>
 8007dbc:	6823      	ldr	r3, [r4, #0]
 8007dbe:	4631      	mov	r1, r6
 8007dc0:	4638      	mov	r0, r7
 8007dc2:	eb04 0903 	add.w	r9, r4, r3
 8007dc6:	f000 f8a7 	bl	8007f18 <_sbrk_r>
 8007dca:	4581      	cmp	r9, r0
 8007dcc:	d13f      	bne.n	8007e4e <_malloc_r+0xe6>
 8007dce:	6821      	ldr	r1, [r4, #0]
 8007dd0:	1a6d      	subs	r5, r5, r1
 8007dd2:	4629      	mov	r1, r5
 8007dd4:	4638      	mov	r0, r7
 8007dd6:	f7ff ffa7 	bl	8007d28 <sbrk_aligned>
 8007dda:	3001      	adds	r0, #1
 8007ddc:	d037      	beq.n	8007e4e <_malloc_r+0xe6>
 8007dde:	6823      	ldr	r3, [r4, #0]
 8007de0:	442b      	add	r3, r5
 8007de2:	6023      	str	r3, [r4, #0]
 8007de4:	f8d8 3000 	ldr.w	r3, [r8]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d038      	beq.n	8007e5e <_malloc_r+0xf6>
 8007dec:	685a      	ldr	r2, [r3, #4]
 8007dee:	42a2      	cmp	r2, r4
 8007df0:	d12b      	bne.n	8007e4a <_malloc_r+0xe2>
 8007df2:	2200      	movs	r2, #0
 8007df4:	605a      	str	r2, [r3, #4]
 8007df6:	e00f      	b.n	8007e18 <_malloc_r+0xb0>
 8007df8:	6822      	ldr	r2, [r4, #0]
 8007dfa:	1b52      	subs	r2, r2, r5
 8007dfc:	d41f      	bmi.n	8007e3e <_malloc_r+0xd6>
 8007dfe:	2a0b      	cmp	r2, #11
 8007e00:	d917      	bls.n	8007e32 <_malloc_r+0xca>
 8007e02:	1961      	adds	r1, r4, r5
 8007e04:	42a3      	cmp	r3, r4
 8007e06:	6025      	str	r5, [r4, #0]
 8007e08:	bf18      	it	ne
 8007e0a:	6059      	strne	r1, [r3, #4]
 8007e0c:	6863      	ldr	r3, [r4, #4]
 8007e0e:	bf08      	it	eq
 8007e10:	f8c8 1000 	streq.w	r1, [r8]
 8007e14:	5162      	str	r2, [r4, r5]
 8007e16:	604b      	str	r3, [r1, #4]
 8007e18:	4638      	mov	r0, r7
 8007e1a:	f104 060b 	add.w	r6, r4, #11
 8007e1e:	f000 f829 	bl	8007e74 <__malloc_unlock>
 8007e22:	f026 0607 	bic.w	r6, r6, #7
 8007e26:	1d23      	adds	r3, r4, #4
 8007e28:	1af2      	subs	r2, r6, r3
 8007e2a:	d0ae      	beq.n	8007d8a <_malloc_r+0x22>
 8007e2c:	1b9b      	subs	r3, r3, r6
 8007e2e:	50a3      	str	r3, [r4, r2]
 8007e30:	e7ab      	b.n	8007d8a <_malloc_r+0x22>
 8007e32:	42a3      	cmp	r3, r4
 8007e34:	6862      	ldr	r2, [r4, #4]
 8007e36:	d1dd      	bne.n	8007df4 <_malloc_r+0x8c>
 8007e38:	f8c8 2000 	str.w	r2, [r8]
 8007e3c:	e7ec      	b.n	8007e18 <_malloc_r+0xb0>
 8007e3e:	4623      	mov	r3, r4
 8007e40:	6864      	ldr	r4, [r4, #4]
 8007e42:	e7ac      	b.n	8007d9e <_malloc_r+0x36>
 8007e44:	4634      	mov	r4, r6
 8007e46:	6876      	ldr	r6, [r6, #4]
 8007e48:	e7b4      	b.n	8007db4 <_malloc_r+0x4c>
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	e7cc      	b.n	8007de8 <_malloc_r+0x80>
 8007e4e:	230c      	movs	r3, #12
 8007e50:	603b      	str	r3, [r7, #0]
 8007e52:	4638      	mov	r0, r7
 8007e54:	f000 f80e 	bl	8007e74 <__malloc_unlock>
 8007e58:	e797      	b.n	8007d8a <_malloc_r+0x22>
 8007e5a:	6025      	str	r5, [r4, #0]
 8007e5c:	e7dc      	b.n	8007e18 <_malloc_r+0xb0>
 8007e5e:	605b      	str	r3, [r3, #4]
 8007e60:	deff      	udf	#255	; 0xff
 8007e62:	bf00      	nop
 8007e64:	2000049c 	.word	0x2000049c

08007e68 <__malloc_lock>:
 8007e68:	4801      	ldr	r0, [pc, #4]	; (8007e70 <__malloc_lock+0x8>)
 8007e6a:	f000 b88f 	b.w	8007f8c <__retarget_lock_acquire_recursive>
 8007e6e:	bf00      	nop
 8007e70:	200005e0 	.word	0x200005e0

08007e74 <__malloc_unlock>:
 8007e74:	4801      	ldr	r0, [pc, #4]	; (8007e7c <__malloc_unlock+0x8>)
 8007e76:	f000 b88a 	b.w	8007f8e <__retarget_lock_release_recursive>
 8007e7a:	bf00      	nop
 8007e7c:	200005e0 	.word	0x200005e0

08007e80 <__utoa>:
 8007e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e82:	4c1f      	ldr	r4, [pc, #124]	; (8007f00 <__utoa+0x80>)
 8007e84:	b08b      	sub	sp, #44	; 0x2c
 8007e86:	4605      	mov	r5, r0
 8007e88:	460b      	mov	r3, r1
 8007e8a:	466e      	mov	r6, sp
 8007e8c:	f104 0c20 	add.w	ip, r4, #32
 8007e90:	6820      	ldr	r0, [r4, #0]
 8007e92:	6861      	ldr	r1, [r4, #4]
 8007e94:	4637      	mov	r7, r6
 8007e96:	c703      	stmia	r7!, {r0, r1}
 8007e98:	3408      	adds	r4, #8
 8007e9a:	4564      	cmp	r4, ip
 8007e9c:	463e      	mov	r6, r7
 8007e9e:	d1f7      	bne.n	8007e90 <__utoa+0x10>
 8007ea0:	7921      	ldrb	r1, [r4, #4]
 8007ea2:	7139      	strb	r1, [r7, #4]
 8007ea4:	1e91      	subs	r1, r2, #2
 8007ea6:	6820      	ldr	r0, [r4, #0]
 8007ea8:	6038      	str	r0, [r7, #0]
 8007eaa:	2922      	cmp	r1, #34	; 0x22
 8007eac:	f04f 0100 	mov.w	r1, #0
 8007eb0:	d904      	bls.n	8007ebc <__utoa+0x3c>
 8007eb2:	7019      	strb	r1, [r3, #0]
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	b00b      	add	sp, #44	; 0x2c
 8007eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ebc:	1e58      	subs	r0, r3, #1
 8007ebe:	4684      	mov	ip, r0
 8007ec0:	fbb5 f7f2 	udiv	r7, r5, r2
 8007ec4:	fb02 5617 	mls	r6, r2, r7, r5
 8007ec8:	3628      	adds	r6, #40	; 0x28
 8007eca:	446e      	add	r6, sp
 8007ecc:	460c      	mov	r4, r1
 8007ece:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007ed2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007ed6:	462e      	mov	r6, r5
 8007ed8:	42b2      	cmp	r2, r6
 8007eda:	f101 0101 	add.w	r1, r1, #1
 8007ede:	463d      	mov	r5, r7
 8007ee0:	d9ee      	bls.n	8007ec0 <__utoa+0x40>
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	545a      	strb	r2, [r3, r1]
 8007ee6:	1919      	adds	r1, r3, r4
 8007ee8:	1aa5      	subs	r5, r4, r2
 8007eea:	42aa      	cmp	r2, r5
 8007eec:	dae3      	bge.n	8007eb6 <__utoa+0x36>
 8007eee:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007ef2:	780e      	ldrb	r6, [r1, #0]
 8007ef4:	7006      	strb	r6, [r0, #0]
 8007ef6:	3201      	adds	r2, #1
 8007ef8:	f801 5901 	strb.w	r5, [r1], #-1
 8007efc:	e7f4      	b.n	8007ee8 <__utoa+0x68>
 8007efe:	bf00      	nop
 8007f00:	080083d0 	.word	0x080083d0

08007f04 <utoa>:
 8007f04:	f7ff bfbc 	b.w	8007e80 <__utoa>

08007f08 <memset>:
 8007f08:	4402      	add	r2, r0
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d100      	bne.n	8007f12 <memset+0xa>
 8007f10:	4770      	bx	lr
 8007f12:	f803 1b01 	strb.w	r1, [r3], #1
 8007f16:	e7f9      	b.n	8007f0c <memset+0x4>

08007f18 <_sbrk_r>:
 8007f18:	b538      	push	{r3, r4, r5, lr}
 8007f1a:	4d06      	ldr	r5, [pc, #24]	; (8007f34 <_sbrk_r+0x1c>)
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	4604      	mov	r4, r0
 8007f20:	4608      	mov	r0, r1
 8007f22:	602b      	str	r3, [r5, #0]
 8007f24:	f7fa fb98 	bl	8002658 <_sbrk>
 8007f28:	1c43      	adds	r3, r0, #1
 8007f2a:	d102      	bne.n	8007f32 <_sbrk_r+0x1a>
 8007f2c:	682b      	ldr	r3, [r5, #0]
 8007f2e:	b103      	cbz	r3, 8007f32 <_sbrk_r+0x1a>
 8007f30:	6023      	str	r3, [r4, #0]
 8007f32:	bd38      	pop	{r3, r4, r5, pc}
 8007f34:	200005dc 	.word	0x200005dc

08007f38 <__errno>:
 8007f38:	4b01      	ldr	r3, [pc, #4]	; (8007f40 <__errno+0x8>)
 8007f3a:	6818      	ldr	r0, [r3, #0]
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	20000058 	.word	0x20000058

08007f44 <__libc_init_array>:
 8007f44:	b570      	push	{r4, r5, r6, lr}
 8007f46:	4d0d      	ldr	r5, [pc, #52]	; (8007f7c <__libc_init_array+0x38>)
 8007f48:	4c0d      	ldr	r4, [pc, #52]	; (8007f80 <__libc_init_array+0x3c>)
 8007f4a:	1b64      	subs	r4, r4, r5
 8007f4c:	10a4      	asrs	r4, r4, #2
 8007f4e:	2600      	movs	r6, #0
 8007f50:	42a6      	cmp	r6, r4
 8007f52:	d109      	bne.n	8007f68 <__libc_init_array+0x24>
 8007f54:	4d0b      	ldr	r5, [pc, #44]	; (8007f84 <__libc_init_array+0x40>)
 8007f56:	4c0c      	ldr	r4, [pc, #48]	; (8007f88 <__libc_init_array+0x44>)
 8007f58:	f000 f828 	bl	8007fac <_init>
 8007f5c:	1b64      	subs	r4, r4, r5
 8007f5e:	10a4      	asrs	r4, r4, #2
 8007f60:	2600      	movs	r6, #0
 8007f62:	42a6      	cmp	r6, r4
 8007f64:	d105      	bne.n	8007f72 <__libc_init_array+0x2e>
 8007f66:	bd70      	pop	{r4, r5, r6, pc}
 8007f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f6c:	4798      	blx	r3
 8007f6e:	3601      	adds	r6, #1
 8007f70:	e7ee      	b.n	8007f50 <__libc_init_array+0xc>
 8007f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f76:	4798      	blx	r3
 8007f78:	3601      	adds	r6, #1
 8007f7a:	e7f2      	b.n	8007f62 <__libc_init_array+0x1e>
 8007f7c:	08008400 	.word	0x08008400
 8007f80:	08008400 	.word	0x08008400
 8007f84:	08008400 	.word	0x08008400
 8007f88:	08008404 	.word	0x08008404

08007f8c <__retarget_lock_acquire_recursive>:
 8007f8c:	4770      	bx	lr

08007f8e <__retarget_lock_release_recursive>:
 8007f8e:	4770      	bx	lr

08007f90 <memcpy>:
 8007f90:	440a      	add	r2, r1
 8007f92:	4291      	cmp	r1, r2
 8007f94:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f98:	d100      	bne.n	8007f9c <memcpy+0xc>
 8007f9a:	4770      	bx	lr
 8007f9c:	b510      	push	{r4, lr}
 8007f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fa6:	4291      	cmp	r1, r2
 8007fa8:	d1f9      	bne.n	8007f9e <memcpy+0xe>
 8007faa:	bd10      	pop	{r4, pc}

08007fac <_init>:
 8007fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fae:	bf00      	nop
 8007fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fb2:	bc08      	pop	{r3}
 8007fb4:	469e      	mov	lr, r3
 8007fb6:	4770      	bx	lr

08007fb8 <_fini>:
 8007fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fba:	bf00      	nop
 8007fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fbe:	bc08      	pop	{r3}
 8007fc0:	469e      	mov	lr, r3
 8007fc2:	4770      	bx	lr
