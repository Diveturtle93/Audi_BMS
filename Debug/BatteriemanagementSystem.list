
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f64  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  0800715c  0800715c  0001715c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075bc  080075bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080075bc  080075bc  000175bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075c4  080075c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075c4  080075c4  000175c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075c8  080075c8  000175c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080075cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  2000000c  080075d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  080075d8  00020324  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000197d7  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038e9  00000000  00000000  00039811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  0003d100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  0003e420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c303  00000000  00000000  0003f5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000197df  00000000  00000000  0006b8ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108594  00000000  00000000  0008508a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018d61e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e30  00000000  00000000  0018d674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08007144 	.word	0x08007144

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08007144 	.word	0x08007144

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	b29a      	uxth	r2, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <uartTransmit+0x24>)
 8000556:	f006 f8e1 	bl	800671c <HAL_UART_Transmit>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	2000029c 	.word	0x2000029c

08000568 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 8000572:	683a      	ldr	r2, [r7, #0]
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	4619      	mov	r1, r3
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f006 fd9a 	bl	80070b4 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff fe57 	bl	8000238 <strlen>
 800058a:	4603      	mov	r3, r0
 800058c:	b29a      	uxth	r2, r3
 800058e:	f107 010c 	add.w	r1, r7, #12
 8000592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <uartTransmitNumber+0x3c>)
 8000598:	f006 f8c0 	bl	800671c <HAL_UART_Transmit>
}
 800059c:	bf00      	nop
 800059e:	3718      	adds	r7, #24
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	2000029c 	.word	0x2000029c

080005a8 <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 80005ae:	2113      	movs	r1, #19
 80005b0:	483b      	ldr	r0, [pc, #236]	; (80006a0 <collectHardwareInfo+0xf8>)
 80005b2:	f7ff ffc5 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 80005b6:	f002 f9a3 	bl	8002900 <HAL_GetDEVID>
 80005ba:	4603      	mov	r3, r0
 80005bc:	210a      	movs	r1, #10
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff ffd2 	bl	8000568 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 80005c4:	2115      	movs	r1, #21
 80005c6:	4837      	ldr	r0, [pc, #220]	; (80006a4 <collectHardwareInfo+0xfc>)
 80005c8:	f7ff ffba 	bl	8000540 <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 80005cc:	f002 f98c 	bl	80028e8 <HAL_GetREVID>
 80005d0:	4603      	mov	r3, r0
 80005d2:	f242 0201 	movw	r2, #8193	; 0x2001
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d016      	beq.n	8000608 <collectHardwareInfo+0x60>
 80005da:	f242 0201 	movw	r2, #8193	; 0x2001
 80005de:	4293      	cmp	r3, r2
 80005e0:	d817      	bhi.n	8000612 <collectHardwareInfo+0x6a>
 80005e2:	f241 0201 	movw	r2, #4097	; 0x1001
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d004      	beq.n	80005f4 <collectHardwareInfo+0x4c>
 80005ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d005      	beq.n	80005fe <collectHardwareInfo+0x56>
 80005f2:	e00e      	b.n	8000612 <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 80005f4:	2101      	movs	r1, #1
 80005f6:	482c      	ldr	r0, [pc, #176]	; (80006a8 <collectHardwareInfo+0x100>)
 80005f8:	f7ff ffa2 	bl	8000540 <uartTransmit>
			break;
 80005fc:	e011      	b.n	8000622 <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 80005fe:	2101      	movs	r1, #1
 8000600:	482a      	ldr	r0, [pc, #168]	; (80006ac <collectHardwareInfo+0x104>)
 8000602:	f7ff ff9d 	bl	8000540 <uartTransmit>
			break;
 8000606:	e00c      	b.n	8000622 <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8000608:	2101      	movs	r1, #1
 800060a:	4829      	ldr	r0, [pc, #164]	; (80006b0 <collectHardwareInfo+0x108>)
 800060c:	f7ff ff98 	bl	8000540 <uartTransmit>
			break;
 8000610:	e007      	b.n	8000622 <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 8000612:	f002 f969 	bl	80028e8 <HAL_GetREVID>
 8000616:	4603      	mov	r3, r0
 8000618:	210a      	movs	r1, #10
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ffa4 	bl	8000568 <uartTransmitNumber>
			break;
 8000620:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 8000622:	2113      	movs	r1, #19
 8000624:	4823      	ldr	r0, [pc, #140]	; (80006b4 <collectHardwareInfo+0x10c>)
 8000626:	f7ff ff8b 	bl	8000540 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 800062a:	f003 fe2b 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 800062e:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <collectHardwareInfo+0x110>)
 8000634:	fba2 2303 	umull	r2, r3, r2, r3
 8000638:	0c9b      	lsrs	r3, r3, #18
 800063a:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 800063c:	210a      	movs	r1, #10
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f7ff ff92 	bl	8000568 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 8000644:	2104      	movs	r1, #4
 8000646:	481d      	ldr	r0, [pc, #116]	; (80006bc <collectHardwareInfo+0x114>)
 8000648:	f7ff ff7a 	bl	8000540 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 800064c:	210f      	movs	r1, #15
 800064e:	481c      	ldr	r0, [pc, #112]	; (80006c0 <collectHardwareInfo+0x118>)
 8000650:	f7ff ff76 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 8000654:	f002 f962 	bl	800291c <HAL_GetUIDw0>
 8000658:	4603      	mov	r3, r0
 800065a:	2110      	movs	r1, #16
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ff83 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000662:	2101      	movs	r1, #1
 8000664:	4817      	ldr	r0, [pc, #92]	; (80006c4 <collectHardwareInfo+0x11c>)
 8000666:	f7ff ff6b 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 800066a:	f002 f963 	bl	8002934 <HAL_GetUIDw1>
 800066e:	4603      	mov	r3, r0
 8000670:	2110      	movs	r1, #16
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ff78 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000678:	2101      	movs	r1, #1
 800067a:	4812      	ldr	r0, [pc, #72]	; (80006c4 <collectHardwareInfo+0x11c>)
 800067c:	f7ff ff60 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8000680:	f002 f964 	bl	800294c <HAL_GetUIDw2>
 8000684:	4603      	mov	r3, r0
 8000686:	2110      	movs	r1, #16
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff6d 	bl	8000568 <uartTransmitNumber>

	uartTransmit("\n", 1);
 800068e:	2101      	movs	r1, #1
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <collectHardwareInfo+0x120>)
 8000692:	f7ff ff55 	bl	8000540 <uartTransmit>
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	0800715c 	.word	0x0800715c
 80006a4:	08007170 	.word	0x08007170
 80006a8:	08007188 	.word	0x08007188
 80006ac:	0800718c 	.word	0x0800718c
 80006b0:	08007190 	.word	0x08007190
 80006b4:	08007194 	.word	0x08007194
 80006b8:	431bde83 	.word	0x431bde83
 80006bc:	080071a8 	.word	0x080071a8
 80006c0:	080071b0 	.word	0x080071b0
 80006c4:	080071c0 	.word	0x080071c0
 80006c8:	080071c4 	.word	0x080071c4

080006cc <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 80006d0:	2112      	movs	r1, #18
 80006d2:	4824      	ldr	r0, [pc, #144]	; (8000764 <collectMiddlewareInfo+0x98>)
 80006d4:	f7ff ff34 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 80006d8:	210a      	movs	r1, #10
 80006da:	2005      	movs	r0, #5
 80006dc:	f7ff ff44 	bl	8000568 <uartTransmitNumber>
	uartTransmit(".", 1);
 80006e0:	2101      	movs	r1, #1
 80006e2:	4821      	ldr	r0, [pc, #132]	; (8000768 <collectMiddlewareInfo+0x9c>)
 80006e4:	f7ff ff2c 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 80006e8:	210a      	movs	r1, #10
 80006ea:	2001      	movs	r0, #1
 80006ec:	f7ff ff3c 	bl	8000568 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 80006f0:	2110      	movs	r1, #16
 80006f2:	481e      	ldr	r0, [pc, #120]	; (800076c <collectMiddlewareInfo+0xa0>)
 80006f4:	f7ff ff24 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 80006f8:	f002 f8ec 	bl	80028d4 <HAL_GetHalVersion>
 80006fc:	4603      	mov	r3, r0
 80006fe:	0e1b      	lsrs	r3, r3, #24
 8000700:	b2db      	uxtb	r3, r3
 8000702:	210a      	movs	r1, #10
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff2f 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 800070a:	2101      	movs	r1, #1
 800070c:	4816      	ldr	r0, [pc, #88]	; (8000768 <collectMiddlewareInfo+0x9c>)
 800070e:	f7ff ff17 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 8000712:	f002 f8df 	bl	80028d4 <HAL_GetHalVersion>
 8000716:	4603      	mov	r3, r0
 8000718:	0c1b      	lsrs	r3, r3, #16
 800071a:	b2db      	uxtb	r3, r3
 800071c:	210a      	movs	r1, #10
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff22 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000724:	2101      	movs	r1, #1
 8000726:	4810      	ldr	r0, [pc, #64]	; (8000768 <collectMiddlewareInfo+0x9c>)
 8000728:	f7ff ff0a 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 800072c:	f002 f8d2 	bl	80028d4 <HAL_GetHalVersion>
 8000730:	4603      	mov	r3, r0
 8000732:	0a1b      	lsrs	r3, r3, #8
 8000734:	b2db      	uxtb	r3, r3
 8000736:	210a      	movs	r1, #10
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff15 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 800073e:	2101      	movs	r1, #1
 8000740:	4809      	ldr	r0, [pc, #36]	; (8000768 <collectMiddlewareInfo+0x9c>)
 8000742:	f7ff fefd 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000746:	f002 f8c5 	bl	80028d4 <HAL_GetHalVersion>
 800074a:	4603      	mov	r3, r0
 800074c:	b2db      	uxtb	r3, r3
 800074e:	210a      	movs	r1, #10
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff09 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 8000756:	2101      	movs	r1, #1
 8000758:	4805      	ldr	r0, [pc, #20]	; (8000770 <collectMiddlewareInfo+0xa4>)
 800075a:	f7ff fef1 	bl	8000540 <uartTransmit>
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	080071c8 	.word	0x080071c8
 8000768:	080071dc 	.word	0x080071dc
 800076c:	080071e0 	.word	0x080071e0
 8000770:	080071c4 	.word	0x080071c4

08000774 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 8000778:	210f      	movs	r1, #15
 800077a:	4826      	ldr	r0, [pc, #152]	; (8000814 <collectSoftwareInfo+0xa0>)
 800077c:	f7ff fee0 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8000780:	2108      	movs	r1, #8
 8000782:	4825      	ldr	r0, [pc, #148]	; (8000818 <collectSoftwareInfo+0xa4>)
 8000784:	f7ff fedc 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8000788:	210f      	movs	r1, #15
 800078a:	4824      	ldr	r0, [pc, #144]	; (800081c <collectSoftwareInfo+0xa8>)
 800078c:	f7ff fed8 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8000790:	2104      	movs	r1, #4
 8000792:	4823      	ldr	r0, [pc, #140]	; (8000820 <collectSoftwareInfo+0xac>)
 8000794:	f7ff fed4 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8000798:	210d      	movs	r1, #13
 800079a:	4822      	ldr	r0, [pc, #136]	; (8000824 <collectSoftwareInfo+0xb0>)
 800079c:	f7ff fed0 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 80007a0:	2129      	movs	r1, #41	; 0x29
 80007a2:	4821      	ldr	r0, [pc, #132]	; (8000828 <collectSoftwareInfo+0xb4>)
 80007a4:	f7ff fecc 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80007a8:	2101      	movs	r1, #1
 80007aa:	4820      	ldr	r0, [pc, #128]	; (800082c <collectSoftwareInfo+0xb8>)
 80007ac:	f7ff fec8 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 80007b0:	2115      	movs	r1, #21
 80007b2:	481f      	ldr	r0, [pc, #124]	; (8000830 <collectSoftwareInfo+0xbc>)
 80007b4:	f7ff fec4 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 80007b8:	2105      	movs	r1, #5
 80007ba:	481e      	ldr	r0, [pc, #120]	; (8000834 <collectSoftwareInfo+0xc0>)
 80007bc:	f7ff fec0 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 80007c0:	2114      	movs	r1, #20
 80007c2:	481d      	ldr	r0, [pc, #116]	; (8000838 <collectSoftwareInfo+0xc4>)
 80007c4:	f7ff febc 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 80007c8:	2108      	movs	r1, #8
 80007ca:	481c      	ldr	r0, [pc, #112]	; (800083c <collectSoftwareInfo+0xc8>)
 80007cc:	f7ff feb8 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 80007d0:	2115      	movs	r1, #21
 80007d2:	481b      	ldr	r0, [pc, #108]	; (8000840 <collectSoftwareInfo+0xcc>)
 80007d4:	f7ff feb4 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 80007d8:	2111      	movs	r1, #17
 80007da:	481a      	ldr	r0, [pc, #104]	; (8000844 <collectSoftwareInfo+0xd0>)
 80007dc:	f7ff feb0 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80007e0:	2101      	movs	r1, #1
 80007e2:	4812      	ldr	r0, [pc, #72]	; (800082c <collectSoftwareInfo+0xb8>)
 80007e4:	f7ff feac 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 80007e8:	210f      	movs	r1, #15
 80007ea:	4817      	ldr	r0, [pc, #92]	; (8000848 <collectSoftwareInfo+0xd4>)
 80007ec:	f7ff fea8 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 80007f0:	210b      	movs	r1, #11
 80007f2:	4816      	ldr	r0, [pc, #88]	; (800084c <collectSoftwareInfo+0xd8>)
 80007f4:	f7ff fea4 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 80007f8:	210f      	movs	r1, #15
 80007fa:	4815      	ldr	r0, [pc, #84]	; (8000850 <collectSoftwareInfo+0xdc>)
 80007fc:	f7ff fea0 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 8000800:	2109      	movs	r1, #9
 8000802:	4814      	ldr	r0, [pc, #80]	; (8000854 <collectSoftwareInfo+0xe0>)
 8000804:	f7ff fe9c 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000808:	2101      	movs	r1, #1
 800080a:	4808      	ldr	r0, [pc, #32]	; (800082c <collectSoftwareInfo+0xb8>)
 800080c:	f7ff fe98 	bl	8000540 <uartTransmit>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	080071f0 	.word	0x080071f0
 8000818:	08007200 	.word	0x08007200
 800081c:	08007208 	.word	0x08007208
 8000820:	08007218 	.word	0x08007218
 8000824:	0800721c 	.word	0x0800721c
 8000828:	0800722c 	.word	0x0800722c
 800082c:	080071c4 	.word	0x080071c4
 8000830:	08007258 	.word	0x08007258
 8000834:	08007270 	.word	0x08007270
 8000838:	08007278 	.word	0x08007278
 800083c:	0800728c 	.word	0x0800728c
 8000840:	08007294 	.word	0x08007294
 8000844:	080072ac 	.word	0x080072ac
 8000848:	080072c0 	.word	0x080072c0
 800084c:	080072d0 	.word	0x080072d0
 8000850:	080072dc 	.word	0x080072dc
 8000854:	080072ec 	.word	0x080072ec

08000858 <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 800085c:	2114      	movs	r1, #20
 800085e:	4814      	ldr	r0, [pc, #80]	; (80008b0 <collectGitcounts+0x58>)
 8000860:	f7ff fe6e 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 8000864:	2103      	movs	r1, #3
 8000866:	4813      	ldr	r0, [pc, #76]	; (80008b4 <collectGitcounts+0x5c>)
 8000868:	f7ff fe6a 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 800086c:	2116      	movs	r1, #22
 800086e:	4812      	ldr	r0, [pc, #72]	; (80008b8 <collectGitcounts+0x60>)
 8000870:	f7ff fe66 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 8000874:	2103      	movs	r1, #3
 8000876:	4811      	ldr	r0, [pc, #68]	; (80008bc <collectGitcounts+0x64>)
 8000878:	f7ff fe62 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 800087c:	211c      	movs	r1, #28
 800087e:	4810      	ldr	r0, [pc, #64]	; (80008c0 <collectGitcounts+0x68>)
 8000880:	f7ff fe5e 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 8000884:	2103      	movs	r1, #3
 8000886:	480f      	ldr	r0, [pc, #60]	; (80008c4 <collectGitcounts+0x6c>)
 8000888:	f7ff fe5a 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 800088c:	2115      	movs	r1, #21
 800088e:	480e      	ldr	r0, [pc, #56]	; (80008c8 <collectGitcounts+0x70>)
 8000890:	f7ff fe56 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8000894:	2102      	movs	r1, #2
 8000896:	480d      	ldr	r0, [pc, #52]	; (80008cc <collectGitcounts+0x74>)
 8000898:	f7ff fe52 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 800089c:	2114      	movs	r1, #20
 800089e:	480c      	ldr	r0, [pc, #48]	; (80008d0 <collectGitcounts+0x78>)
 80008a0:	f7ff fe4e 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 80008a4:	2102      	movs	r1, #2
 80008a6:	480b      	ldr	r0, [pc, #44]	; (80008d4 <collectGitcounts+0x7c>)
 80008a8:	f7ff fe4a 	bl	8000540 <uartTransmit>
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	080072f8 	.word	0x080072f8
 80008b4:	0800730c 	.word	0x0800730c
 80008b8:	08007310 	.word	0x08007310
 80008bc:	08007328 	.word	0x08007328
 80008c0:	0800732c 	.word	0x0800732c
 80008c4:	08007348 	.word	0x08007348
 80008c8:	08007258 	.word	0x08007258
 80008cc:	0800734c 	.word	0x0800734c
 80008d0:	08007278 	.word	0x08007278
 80008d4:	08007350 	.word	0x08007350

080008d8 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 80008dc:	2111      	movs	r1, #17
 80008de:	480e      	ldr	r0, [pc, #56]	; (8000918 <collectSystemInfo+0x40>)
 80008e0:	f7ff fe2e 	bl	8000540 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 80008e4:	f7ff fe60 	bl	80005a8 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 80008e8:	2111      	movs	r1, #17
 80008ea:	480c      	ldr	r0, [pc, #48]	; (800091c <collectSystemInfo+0x44>)
 80008ec:	f7ff fe28 	bl	8000540 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 80008f0:	f7ff ff40 	bl	8000774 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 80008f4:	2113      	movs	r1, #19
 80008f6:	480a      	ldr	r0, [pc, #40]	; (8000920 <collectSystemInfo+0x48>)
 80008f8:	f7ff fe22 	bl	8000540 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 80008fc:	f7ff fee6 	bl	80006cc <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 8000900:	2113      	movs	r1, #19
 8000902:	4808      	ldr	r0, [pc, #32]	; (8000924 <collectSystemInfo+0x4c>)
 8000904:	f7ff fe1c 	bl	8000540 <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 8000908:	f7ff ffa6 	bl	8000858 <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 800090c:	2103      	movs	r1, #3
 800090e:	4806      	ldr	r0, [pc, #24]	; (8000928 <collectSystemInfo+0x50>)
 8000910:	f7ff fe16 	bl	8000540 <uartTransmit>
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	08007354 	.word	0x08007354
 800091c:	08007368 	.word	0x08007368
 8000920:	0800737c 	.word	0x0800737c
 8000924:	08007390 	.word	0x08007390
 8000928:	080073a4 	.word	0x080073a4

0800092c <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 8000932:	2300      	movs	r3, #0
 8000934:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8000936:	4b25      	ldr	r3, [pc, #148]	; (80009cc <readResetSource+0xa0>)
 8000938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800093a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800093e:	2b00      	cmp	r3, #0
 8000940:	d002      	beq.n	8000948 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	3301      	adds	r3, #1
 8000946:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8000948:	4b20      	ldr	r3, [pc, #128]	; (80009cc <readResetSource+0xa0>)
 800094a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800094c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000950:	2b00      	cmp	r3, #0
 8000952:	d002      	beq.n	800095a <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	3302      	adds	r3, #2
 8000958:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <readResetSource+0xa0>)
 800095c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800095e:	2b00      	cmp	r3, #0
 8000960:	da02      	bge.n	8000968 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	3304      	adds	r3, #4
 8000966:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <readResetSource+0xa0>)
 800096a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800096c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000970:	2b00      	cmp	r3, #0
 8000972:	d002      	beq.n	800097a <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	3308      	adds	r3, #8
 8000978:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <readResetSource+0xa0>)
 800097c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800097e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000982:	2b00      	cmp	r3, #0
 8000984:	d002      	beq.n	800098c <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	3310      	adds	r3, #16
 800098a:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <readResetSource+0xa0>)
 800098e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000994:	2b00      	cmp	r3, #0
 8000996:	d002      	beq.n	800099e <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	3320      	adds	r3, #32
 800099c:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <readResetSource+0xa0>)
 80009a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d002      	beq.n	80009b0 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	3340      	adds	r3, #64	; 0x40
 80009ae:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <readResetSource+0xa0>)
 80009b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009b4:	4a05      	ldr	r2, [pc, #20]	; (80009cc <readResetSource+0xa0>)
 80009b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009ba:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 80009bc:	79fb      	ldrb	r3, [r7, #7]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800

080009d0 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 80009da:	2106      	movs	r1, #6
 80009dc:	482a      	ldr	r0, [pc, #168]	; (8000a88 <printResetSource+0xb8>)
 80009de:	f7ff fdaf 	bl	8000540 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d104      	bne.n	80009f2 <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 80009e8:	210f      	movs	r1, #15
 80009ea:	4828      	ldr	r0, [pc, #160]	; (8000a8c <printResetSource+0xbc>)
 80009ec:	f7ff fda8 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 80009f0:	e046      	b.n	8000a80 <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d003      	beq.n	8000a04 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 80009fc:	2118      	movs	r1, #24
 80009fe:	4824      	ldr	r0, [pc, #144]	; (8000a90 <printResetSource+0xc0>)
 8000a00:	f7ff fd9e 	bl	8000540 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d003      	beq.n	8000a16 <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8000a0e:	2116      	movs	r1, #22
 8000a10:	4820      	ldr	r0, [pc, #128]	; (8000a94 <printResetSource+0xc4>)
 8000a12:	f7ff fd95 	bl	8000540 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	f003 0304 	and.w	r3, r3, #4
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d003      	beq.n	8000a28 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8000a20:	210a      	movs	r1, #10
 8000a22:	481d      	ldr	r0, [pc, #116]	; (8000a98 <printResetSource+0xc8>)
 8000a24:	f7ff fd8c 	bl	8000540 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	f003 0308 	and.w	r3, r3, #8
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d003      	beq.n	8000a3a <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 8000a32:	2110      	movs	r1, #16
 8000a34:	4819      	ldr	r0, [pc, #100]	; (8000a9c <printResetSource+0xcc>)
 8000a36:	f7ff fd83 	bl	8000540 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	f003 0310 	and.w	r3, r3, #16
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d003      	beq.n	8000a4c <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 8000a44:	210f      	movs	r1, #15
 8000a46:	4816      	ldr	r0, [pc, #88]	; (8000aa0 <printResetSource+0xd0>)
 8000a48:	f7ff fd7a 	bl	8000540 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	f003 0320 	and.w	r3, r3, #32
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d003      	beq.n	8000a5e <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 8000a56:	210f      	movs	r1, #15
 8000a58:	4812      	ldr	r0, [pc, #72]	; (8000aa4 <printResetSource+0xd4>)
 8000a5a:	f7ff fd71 	bl	8000540 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d003      	beq.n	8000a70 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8000a68:	210a      	movs	r1, #10
 8000a6a:	480f      	ldr	r0, [pc, #60]	; (8000aa8 <printResetSource+0xd8>)
 8000a6c:	f7ff fd68 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8000a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	da03      	bge.n	8000a80 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8000a78:	2105      	movs	r1, #5
 8000a7a:	480c      	ldr	r0, [pc, #48]	; (8000aac <printResetSource+0xdc>)
 8000a7c:	f7ff fd60 	bl	8000540 <uartTransmit>
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	080073a8 	.word	0x080073a8
 8000a8c:	080073b0 	.word	0x080073b0
 8000a90:	080073c0 	.word	0x080073c0
 8000a94:	080073dc 	.word	0x080073dc
 8000a98:	080073f4 	.word	0x080073f4
 8000a9c:	08007400 	.word	0x08007400
 8000aa0:	08007414 	.word	0x08007414
 8000aa4:	08007424 	.word	0x08007424
 8000aa8:	08007434 	.word	0x08007434
 8000aac:	08007440 	.word	0x08007440

08000ab0 <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (status == HAL_OK) {													// HAL OK
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d104      	bne.n	8000aca <hal_error+0x1a>
		uartTransmit("HAL OK\n", 7);
 8000ac0:	2107      	movs	r1, #7
 8000ac2:	480f      	ldr	r0, [pc, #60]	; (8000b00 <hal_error+0x50>)
 8000ac4:	f7ff fd3c 	bl	8000540 <uartTransmit>
	}
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 8000ac8:	e016      	b.n	8000af8 <hal_error+0x48>
	else if (status == HAL_ERROR) {											// HAL Error
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d104      	bne.n	8000ada <hal_error+0x2a>
		uartTransmit("HAL ERROR\n", 10);
 8000ad0:	210a      	movs	r1, #10
 8000ad2:	480c      	ldr	r0, [pc, #48]	; (8000b04 <hal_error+0x54>)
 8000ad4:	f7ff fd34 	bl	8000540 <uartTransmit>
}
 8000ad8:	e00e      	b.n	8000af8 <hal_error+0x48>
	else if (status == HAL_BUSY) {											// HAL Beschaeftigt
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d104      	bne.n	8000aea <hal_error+0x3a>
		uartTransmit("HAL BUSY\n", 9);
 8000ae0:	2109      	movs	r1, #9
 8000ae2:	4809      	ldr	r0, [pc, #36]	; (8000b08 <hal_error+0x58>)
 8000ae4:	f7ff fd2c 	bl	8000540 <uartTransmit>
}
 8000ae8:	e006      	b.n	8000af8 <hal_error+0x48>
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	2b03      	cmp	r3, #3
 8000aee:	d103      	bne.n	8000af8 <hal_error+0x48>
		uartTransmit("HAL TIMEOUT\n", 12);
 8000af0:	210c      	movs	r1, #12
 8000af2:	4806      	ldr	r0, [pc, #24]	; (8000b0c <hal_error+0x5c>)
 8000af4:	f7ff fd24 	bl	8000540 <uartTransmit>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	08007448 	.word	0x08007448
 8000b04:	08007450 	.word	0x08007450
 8000b08:	0800745c 	.word	0x0800745c
 8000b0c:	08007468 	.word	0x08007468

08000b10 <imd_status>:
//----------------------------------------------------------------------

// IMD Status einlesen
//----------------------------------------------------------------------
void imd_status(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	// Einlesen von IMD Ok Pin
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);		// IMD OK einlesen
 8000b14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b18:	48ba      	ldr	r0, [pc, #744]	; (8000e04 <imd_status+0x2f4>)
 8000b1a:	f002 ff97 	bl	8003a4c <HAL_GPIO_ReadPin>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	b2d9      	uxtb	r1, r3
 8000b26:	4ab8      	ldr	r2, [pc, #736]	; (8000e08 <imd_status+0x2f8>)
 8000b28:	7813      	ldrb	r3, [r2, #0]
 8000b2a:	f361 0300 	bfi	r3, r1, #0, #1
 8000b2e:	7013      	strb	r3, [r2, #0]

	// Abfrage ob IMD Ok ist
	if(sdc_in.IMD_OK_IN == 1)
 8000b30:	4bb5      	ldr	r3, [pc, #724]	; (8000e08 <imd_status+0x2f8>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d00e      	beq.n	8000b5c <imd_status+0x4c>
	{
		// Ausgabe IMD OK kommend BMS
		system_out.ImdOK = 1;
 8000b3e:	4ab3      	ldr	r2, [pc, #716]	; (8000e0c <imd_status+0x2fc>)
 8000b40:	7813      	ldrb	r3, [r2, #0]
 8000b42:	f043 0302 	orr.w	r3, r3, #2
 8000b46:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(IMD_OK_OUT_GPIO_Port, IMD_OK_OUT_Pin, system_out.ImdOK);	// IMD Status von BMS ausgeben
 8000b48:	4bb0      	ldr	r3, [pc, #704]	; (8000e0c <imd_status+0x2fc>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	461a      	mov	r2, r3
 8000b54:	2102      	movs	r1, #2
 8000b56:	48ae      	ldr	r0, [pc, #696]	; (8000e10 <imd_status+0x300>)
 8000b58:	f002 ff90 	bl	8003a7c <HAL_GPIO_WritePin>
	}

	// IMD ist nicht OK
	if (sdc_in.IMD_OK_IN != 1)
 8000b5c:	4baa      	ldr	r3, [pc, #680]	; (8000e08 <imd_status+0x2f8>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 81b7 	bne.w	8000eda <imd_status+0x3ca>
	{
#ifdef DEBUG_IMD
		// Ausgabe Frequenz
		uartTransmit("Frequenz: \t", 11);
 8000b6c:	210b      	movs	r1, #11
 8000b6e:	48a9      	ldr	r0, [pc, #676]	; (8000e14 <imd_status+0x304>)
 8000b70:	f7ff fce6 	bl	8000540 <uartTransmit>
		uartTransmitNumber(imd.Frequency, 10);
 8000b74:	4ba8      	ldr	r3, [pc, #672]	; (8000e18 <imd_status+0x308>)
 8000b76:	785b      	ldrb	r3, [r3, #1]
 8000b78:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	210a      	movs	r1, #10
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fcf1 	bl	8000568 <uartTransmitNumber>
		uartTransmit("\n", 1);
 8000b86:	2101      	movs	r1, #1
 8000b88:	48a4      	ldr	r0, [pc, #656]	; (8000e1c <imd_status+0x30c>)
 8000b8a:	f7ff fcd9 	bl	8000540 <uartTransmit>

		// Ausgabe DutyCycle
		uartTransmit("DutyCycle: \t", 12);
 8000b8e:	210c      	movs	r1, #12
 8000b90:	48a3      	ldr	r0, [pc, #652]	; (8000e20 <imd_status+0x310>)
 8000b92:	f7ff fcd5 	bl	8000540 <uartTransmit>
		uartTransmitNumber(imd.DutyCycle, 10);
 8000b96:	4ba0      	ldr	r3, [pc, #640]	; (8000e18 <imd_status+0x308>)
 8000b98:	789b      	ldrb	r3, [r3, #2]
 8000b9a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	210a      	movs	r1, #10
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fce0 	bl	8000568 <uartTransmitNumber>
		uartTransmit("\n", 1);
 8000ba8:	2101      	movs	r1, #1
 8000baa:	489c      	ldr	r0, [pc, #624]	; (8000e1c <imd_status+0x30c>)
 8000bac:	f7ff fcc8 	bl	8000540 <uartTransmit>
#endif

		// IMD PWM abfragen
		switch (imd.Frequency)
 8000bb0:	4b99      	ldr	r3, [pc, #612]	; (8000e18 <imd_status+0x308>)
 8000bb2:	785b      	ldrb	r3, [r3, #1]
 8000bb4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	2b32      	cmp	r3, #50	; 0x32
 8000bbc:	f300 8182 	bgt.w	8000ec4 <imd_status+0x3b4>
 8000bc0:	2b14      	cmp	r3, #20
 8000bc2:	da04      	bge.n	8000bce <imd_status+0xbe>
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d047      	beq.n	8000c58 <imd_status+0x148>
 8000bc8:	2b0a      	cmp	r3, #10
 8000bca:	d072      	beq.n	8000cb2 <imd_status+0x1a2>
 8000bcc:	e17a      	b.n	8000ec4 <imd_status+0x3b4>
 8000bce:	3b14      	subs	r3, #20
 8000bd0:	2b1e      	cmp	r3, #30
 8000bd2:	f200 8177 	bhi.w	8000ec4 <imd_status+0x3b4>
 8000bd6:	a201      	add	r2, pc, #4	; (adr r2, 8000bdc <imd_status+0xcc>)
 8000bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bdc:	08000d33 	.word	0x08000d33
 8000be0:	08000ec5 	.word	0x08000ec5
 8000be4:	08000ec5 	.word	0x08000ec5
 8000be8:	08000ec5 	.word	0x08000ec5
 8000bec:	08000ec5 	.word	0x08000ec5
 8000bf0:	08000ec5 	.word	0x08000ec5
 8000bf4:	08000ec5 	.word	0x08000ec5
 8000bf8:	08000ec5 	.word	0x08000ec5
 8000bfc:	08000ec5 	.word	0x08000ec5
 8000c00:	08000ec5 	.word	0x08000ec5
 8000c04:	08000d9b 	.word	0x08000d9b
 8000c08:	08000ec5 	.word	0x08000ec5
 8000c0c:	08000ec5 	.word	0x08000ec5
 8000c10:	08000ec5 	.word	0x08000ec5
 8000c14:	08000ec5 	.word	0x08000ec5
 8000c18:	08000ec5 	.word	0x08000ec5
 8000c1c:	08000ec5 	.word	0x08000ec5
 8000c20:	08000ec5 	.word	0x08000ec5
 8000c24:	08000ec5 	.word	0x08000ec5
 8000c28:	08000ec5 	.word	0x08000ec5
 8000c2c:	08000e2d 	.word	0x08000e2d
 8000c30:	08000ec5 	.word	0x08000ec5
 8000c34:	08000ec5 	.word	0x08000ec5
 8000c38:	08000ec5 	.word	0x08000ec5
 8000c3c:	08000ec5 	.word	0x08000ec5
 8000c40:	08000ec5 	.word	0x08000ec5
 8000c44:	08000ec5 	.word	0x08000ec5
 8000c48:	08000ec5 	.word	0x08000ec5
 8000c4c:	08000ec5 	.word	0x08000ec5
 8000c50:	08000ec5 	.word	0x08000ec5
 8000c54:	08000e79 	.word	0x08000e79
		{
			case 0:																	// Case 0 Hz
				// PWM Pin einlesen
				system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);
 8000c58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c5c:	4869      	ldr	r0, [pc, #420]	; (8000e04 <imd_status+0x2f4>)
 8000c5e:	f002 fef5 	bl	8003a4c <HAL_GPIO_ReadPin>
 8000c62:	4603      	mov	r3, r0
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	b2d9      	uxtb	r1, r3
 8000c6a:	4a6e      	ldr	r2, [pc, #440]	; (8000e24 <imd_status+0x314>)
 8000c6c:	7813      	ldrb	r3, [r2, #0]
 8000c6e:	f361 03c3 	bfi	r3, r1, #3, #1
 8000c72:	7013      	strb	r3, [r2, #0]

				// Wenn IMD 1 ist
				if (system_in.IMD_PWM == 1)
 8000c74:	4b6b      	ldr	r3, [pc, #428]	; (8000e24 <imd_status+0x314>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	f003 0308 	and.w	r3, r3, #8
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d00c      	beq.n	8000c9c <imd_status+0x18c>
				{
					// IMD Status speichern
					system_in.IMD_PWM_STATUS = IMD_KURZSCHLUSS_KL15;				// Kurzschluss von HV nach Pluspol
 8000c82:	4a68      	ldr	r2, [pc, #416]	; (8000e24 <imd_status+0x314>)
 8000c84:	7813      	ldrb	r3, [r2, #0]
 8000c86:	2106      	movs	r1, #6
 8000c88:	f361 0302 	bfi	r3, r1, #0, #3
 8000c8c:	7013      	strb	r3, [r2, #0]
					imd.PWM_STATUS = IMD_KURZSCHLUSS_KL15;							// Kurzschluss von HV nach Pluspol
 8000c8e:	4a62      	ldr	r2, [pc, #392]	; (8000e18 <imd_status+0x308>)
 8000c90:	7813      	ldrb	r3, [r2, #0]
 8000c92:	2106      	movs	r1, #6
 8000c94:	f361 0302 	bfi	r3, r1, #0, #3
 8000c98:	7013      	strb	r3, [r2, #0]
				{
					// IMD Status speichern
					system_in.IMD_PWM_STATUS = IMD_KURZSCHLUSS_GND;					// Kurzschluss von HV nach Masse
					imd.PWM_STATUS = IMD_KURZSCHLUSS_GND;							// Kurzschluss von HV nach Masse
				}
				break;
 8000c9a:	e1c3      	b.n	8001024 <imd_status+0x514>
					system_in.IMD_PWM_STATUS = IMD_KURZSCHLUSS_GND;					// Kurzschluss von HV nach Masse
 8000c9c:	4a61      	ldr	r2, [pc, #388]	; (8000e24 <imd_status+0x314>)
 8000c9e:	7813      	ldrb	r3, [r2, #0]
 8000ca0:	f36f 0302 	bfc	r3, #0, #3
 8000ca4:	7013      	strb	r3, [r2, #0]
					imd.PWM_STATUS = IMD_KURZSCHLUSS_GND;							// Kurzschluss von HV nach Masse
 8000ca6:	4a5c      	ldr	r2, [pc, #368]	; (8000e18 <imd_status+0x308>)
 8000ca8:	7813      	ldrb	r3, [r2, #0]
 8000caa:	f36f 0302 	bfc	r3, #0, #3
 8000cae:	7013      	strb	r3, [r2, #0]
				break;
 8000cb0:	e1b8      	b.n	8001024 <imd_status+0x514>

			case 10:																// Case 10 Hz
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_NORMAL;								// IMD funktioniert normal
 8000cb2:	4a5c      	ldr	r2, [pc, #368]	; (8000e24 <imd_status+0x314>)
 8000cb4:	7813      	ldrb	r3, [r2, #0]
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	f361 0302 	bfi	r3, r1, #0, #3
 8000cbc:	7013      	strb	r3, [r2, #0]
				imd.PWM_STATUS = IMD_NORMAL;										// IMD funktioniert normal
 8000cbe:	4a56      	ldr	r2, [pc, #344]	; (8000e18 <imd_status+0x308>)
 8000cc0:	7813      	ldrb	r3, [r2, #0]
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	f361 0302 	bfi	r3, r1, #0, #3
 8000cc8:	7013      	strb	r3, [r2, #0]

				// DutyCycle abfragen
				if (imd.DutyCycle > 5 && imd.DutyCycle < 95)						// IMD PWM
 8000cca:	4b53      	ldr	r3, [pc, #332]	; (8000e18 <imd_status+0x308>)
 8000ccc:	789b      	ldrb	r3, [r3, #2]
 8000cce:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2b05      	cmp	r3, #5
 8000cd6:	d921      	bls.n	8000d1c <imd_status+0x20c>
 8000cd8:	4b4f      	ldr	r3, [pc, #316]	; (8000e18 <imd_status+0x308>)
 8000cda:	789b      	ldrb	r3, [r3, #2]
 8000cdc:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b5e      	cmp	r3, #94	; 0x5e
 8000ce4:	d81a      	bhi.n	8000d1c <imd_status+0x20c>
				{
					// Widerstand berechnen
					imd.Resistanc = 90 * 1200 / (imd.DutyCycle - 5) - 1200;			// Angabe in kOhm
 8000ce6:	4b4c      	ldr	r3, [pc, #304]	; (8000e18 <imd_status+0x308>)
 8000ce8:	789b      	ldrb	r3, [r3, #2]
 8000cea:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	3b05      	subs	r3, #5
 8000cf2:	4a4d      	ldr	r2, [pc, #308]	; (8000e28 <imd_status+0x318>)
 8000cf4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cf8:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8000cfc:	f3c3 0111 	ubfx	r1, r3, #0, #18
 8000d00:	4a45      	ldr	r2, [pc, #276]	; (8000e18 <imd_status+0x308>)
 8000d02:	6853      	ldr	r3, [r2, #4]
 8000d04:	f361 0311 	bfi	r3, r1, #0, #18
 8000d08:	6053      	str	r3, [r2, #4]

#ifdef DEBUG_IMD
					// Ausgabe Widerstandswert
					uartTransmitNumber(imd.Resistanc, 10);
 8000d0a:	4b43      	ldr	r3, [pc, #268]	; (8000e18 <imd_status+0x308>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8000d12:	210a      	movs	r1, #10
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fc27 	bl	8000568 <uartTransmitNumber>
				{
					// IMD Status speichern
					system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;						// Fehlerausgabe
					imd.PWM_STATUS = IMD_FREQ_ERROR;								// Fehlerausgabe
				}
				break;
 8000d1a:	e183      	b.n	8001024 <imd_status+0x514>
					system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;						// Fehlerausgabe
 8000d1c:	4a41      	ldr	r2, [pc, #260]	; (8000e24 <imd_status+0x314>)
 8000d1e:	7813      	ldrb	r3, [r2, #0]
 8000d20:	f043 0307 	orr.w	r3, r3, #7
 8000d24:	7013      	strb	r3, [r2, #0]
					imd.PWM_STATUS = IMD_FREQ_ERROR;								// Fehlerausgabe
 8000d26:	4a3c      	ldr	r2, [pc, #240]	; (8000e18 <imd_status+0x308>)
 8000d28:	7813      	ldrb	r3, [r2, #0]
 8000d2a:	f043 0307 	orr.w	r3, r3, #7
 8000d2e:	7013      	strb	r3, [r2, #0]
				break;
 8000d30:	e178      	b.n	8001024 <imd_status+0x514>

			case 20:																// Case 20 Hz
				// DutyCycle abfragen
				if (imd.DutyCycle > 5 && imd.DutyCycle < 95)						// IMD PWM
 8000d32:	4b39      	ldr	r3, [pc, #228]	; (8000e18 <imd_status+0x308>)
 8000d34:	789b      	ldrb	r3, [r3, #2]
 8000d36:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b05      	cmp	r3, #5
 8000d3e:	d921      	bls.n	8000d84 <imd_status+0x274>
 8000d40:	4b35      	ldr	r3, [pc, #212]	; (8000e18 <imd_status+0x308>)
 8000d42:	789b      	ldrb	r3, [r3, #2]
 8000d44:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b5e      	cmp	r3, #94	; 0x5e
 8000d4c:	d81a      	bhi.n	8000d84 <imd_status+0x274>
				{
					// Widerstand berechnen
					imd.Resistanc = 90 * 1200 / (imd.DutyCycle - 5) - 1200;			// Angabe in kOhm
 8000d4e:	4b32      	ldr	r3, [pc, #200]	; (8000e18 <imd_status+0x308>)
 8000d50:	789b      	ldrb	r3, [r3, #2]
 8000d52:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	3b05      	subs	r3, #5
 8000d5a:	4a33      	ldr	r2, [pc, #204]	; (8000e28 <imd_status+0x318>)
 8000d5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d60:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8000d64:	f3c3 0111 	ubfx	r1, r3, #0, #18
 8000d68:	4a2b      	ldr	r2, [pc, #172]	; (8000e18 <imd_status+0x308>)
 8000d6a:	6853      	ldr	r3, [r2, #4]
 8000d6c:	f361 0311 	bfi	r3, r1, #0, #18
 8000d70:	6053      	str	r3, [r2, #4]

#ifdef DEBUG_IMD
					// Ausgabe Widerstandswert
					uartTransmitNumber(imd.Resistanc, 10);
 8000d72:	4b29      	ldr	r3, [pc, #164]	; (8000e18 <imd_status+0x308>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8000d7a:	210a      	movs	r1, #10
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fbf3 	bl	8000568 <uartTransmitNumber>
				{
					// IMD Status speichern
					system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;						// Fehlerausgabe
					imd.PWM_STATUS = IMD_FREQ_ERROR;								// Fehlerausgabe
				}
				break;
 8000d82:	e14f      	b.n	8001024 <imd_status+0x514>
					system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;						// Fehlerausgabe
 8000d84:	4a27      	ldr	r2, [pc, #156]	; (8000e24 <imd_status+0x314>)
 8000d86:	7813      	ldrb	r3, [r2, #0]
 8000d88:	f043 0307 	orr.w	r3, r3, #7
 8000d8c:	7013      	strb	r3, [r2, #0]
					imd.PWM_STATUS = IMD_FREQ_ERROR;								// Fehlerausgabe
 8000d8e:	4a22      	ldr	r2, [pc, #136]	; (8000e18 <imd_status+0x308>)
 8000d90:	7813      	ldrb	r3, [r2, #0]
 8000d92:	f043 0307 	orr.w	r3, r3, #7
 8000d96:	7013      	strb	r3, [r2, #0]
				break;
 8000d98:	e144      	b.n	8001024 <imd_status+0x514>

			case 30:																// Case 30 Hz
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_SCHNELLSTART;						// Schnellstartmessung
 8000d9a:	4a22      	ldr	r2, [pc, #136]	; (8000e24 <imd_status+0x314>)
 8000d9c:	7813      	ldrb	r3, [r2, #0]
 8000d9e:	2103      	movs	r1, #3
 8000da0:	f361 0302 	bfi	r3, r1, #0, #3
 8000da4:	7013      	strb	r3, [r2, #0]
				imd.PWM_STATUS = IMD_SCHNELLSTART;									// Schnellstartmessung
 8000da6:	4a1c      	ldr	r2, [pc, #112]	; (8000e18 <imd_status+0x308>)
 8000da8:	7813      	ldrb	r3, [r2, #0]
 8000daa:	2103      	movs	r1, #3
 8000dac:	f361 0302 	bfi	r3, r1, #0, #3
 8000db0:	7013      	strb	r3, [r2, #0]

				// DutyCycle abfragen
				if (imd.DutyCycle > 5 && imd.DutyCycle < 11)						// IMD Gut
 8000db2:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <imd_status+0x308>)
 8000db4:	789b      	ldrb	r3, [r3, #2]
 8000db6:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	2b05      	cmp	r3, #5
 8000dbe:	d906      	bls.n	8000dce <imd_status+0x2be>
 8000dc0:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <imd_status+0x308>)
 8000dc2:	789b      	ldrb	r3, [r3, #2]
 8000dc4:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b0a      	cmp	r3, #10
 8000dcc:	d918      	bls.n	8000e00 <imd_status+0x2f0>
				{

				}
				else if (imd.DutyCycle > 89 && imd.DutyCycle < 95)					// IMD Schlecht
 8000dce:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <imd_status+0x308>)
 8000dd0:	789b      	ldrb	r3, [r3, #2]
 8000dd2:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b59      	cmp	r3, #89	; 0x59
 8000dda:	d906      	bls.n	8000dea <imd_status+0x2da>
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <imd_status+0x308>)
 8000dde:	789b      	ldrb	r3, [r3, #2]
 8000de0:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b5e      	cmp	r3, #94	; 0x5e
 8000de8:	d90a      	bls.n	8000e00 <imd_status+0x2f0>
				}
				// Falls DutyCycle nicht im Wertebereich ist
				else																// IMD Invalid
				{
					// IMD Status speichern
					system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;						// Fehlerausgabe
 8000dea:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <imd_status+0x314>)
 8000dec:	7813      	ldrb	r3, [r2, #0]
 8000dee:	f043 0307 	orr.w	r3, r3, #7
 8000df2:	7013      	strb	r3, [r2, #0]
					imd.PWM_STATUS = IMD_FREQ_ERROR;								// Fehlerausgabe
 8000df4:	4a08      	ldr	r2, [pc, #32]	; (8000e18 <imd_status+0x308>)
 8000df6:	7813      	ldrb	r3, [r2, #0]
 8000df8:	f043 0307 	orr.w	r3, r3, #7
 8000dfc:	7013      	strb	r3, [r2, #0]
				}
				break;
 8000dfe:	e111      	b.n	8001024 <imd_status+0x514>
 8000e00:	e110      	b.n	8001024 <imd_status+0x514>
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000
 8000e08:	20000054 	.word	0x20000054
 8000e0c:	20000040 	.word	0x20000040
 8000e10:	40020000 	.word	0x40020000
 8000e14:	080074a4 	.word	0x080074a4
 8000e18:	20000038 	.word	0x20000038
 8000e1c:	080074b0 	.word	0x080074b0
 8000e20:	080074b4 	.word	0x080074b4
 8000e24:	20000044 	.word	0x20000044
 8000e28:	0001a5e0 	.word	0x0001a5e0

			case 40:																// Case 40 Hz
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_GERAETEFEHLER;						// Geraetefehler
 8000e2c:	4a7e      	ldr	r2, [pc, #504]	; (8001028 <imd_status+0x518>)
 8000e2e:	7813      	ldrb	r3, [r2, #0]
 8000e30:	2104      	movs	r1, #4
 8000e32:	f361 0302 	bfi	r3, r1, #0, #3
 8000e36:	7013      	strb	r3, [r2, #0]
				imd.PWM_STATUS = IMD_GERAETEFEHLER;									// Geraetefehler
 8000e38:	4a7c      	ldr	r2, [pc, #496]	; (800102c <imd_status+0x51c>)
 8000e3a:	7813      	ldrb	r3, [r2, #0]
 8000e3c:	2104      	movs	r1, #4
 8000e3e:	f361 0302 	bfi	r3, r1, #0, #3
 8000e42:	7013      	strb	r3, [r2, #0]

				// DutyCyle abfragen
				if (imd.DutyCycle > 47 && imd.DutyCycle < 53)						// IMD PWM
 8000e44:	4b79      	ldr	r3, [pc, #484]	; (800102c <imd_status+0x51c>)
 8000e46:	789b      	ldrb	r3, [r3, #2]
 8000e48:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b2f      	cmp	r3, #47	; 0x2f
 8000e50:	d906      	bls.n	8000e60 <imd_status+0x350>
 8000e52:	4b76      	ldr	r3, [pc, #472]	; (800102c <imd_status+0x51c>)
 8000e54:	789b      	ldrb	r3, [r3, #2]
 8000e56:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b34      	cmp	r3, #52	; 0x34
 8000e5e:	d90a      	bls.n	8000e76 <imd_status+0x366>
				}
				// Falls DutyCycle nicht im Wertebereich ist
				else																// IMD Invalid
				{
					// IMD Status speichern
					system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;						// Fehlerausgabe
 8000e60:	4a71      	ldr	r2, [pc, #452]	; (8001028 <imd_status+0x518>)
 8000e62:	7813      	ldrb	r3, [r2, #0]
 8000e64:	f043 0307 	orr.w	r3, r3, #7
 8000e68:	7013      	strb	r3, [r2, #0]
					imd.PWM_STATUS = IMD_FREQ_ERROR;								// Fehlerausgabe
 8000e6a:	4a70      	ldr	r2, [pc, #448]	; (800102c <imd_status+0x51c>)
 8000e6c:	7813      	ldrb	r3, [r2, #0]
 8000e6e:	f043 0307 	orr.w	r3, r3, #7
 8000e72:	7013      	strb	r3, [r2, #0]
				}
				break;
 8000e74:	e0d6      	b.n	8001024 <imd_status+0x514>
 8000e76:	e0d5      	b.n	8001024 <imd_status+0x514>

			case 50:																// Case 50 Hz
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_ANSCHLUSSFEHLER_ERDE;				// Anschluss an Erde festgestellt
 8000e78:	4a6b      	ldr	r2, [pc, #428]	; (8001028 <imd_status+0x518>)
 8000e7a:	7813      	ldrb	r3, [r2, #0]
 8000e7c:	2105      	movs	r1, #5
 8000e7e:	f361 0302 	bfi	r3, r1, #0, #3
 8000e82:	7013      	strb	r3, [r2, #0]
				imd.PWM_STATUS = IMD_ANSCHLUSSFEHLER_ERDE;							// Anschluss an Erde festgestellt
 8000e84:	4a69      	ldr	r2, [pc, #420]	; (800102c <imd_status+0x51c>)
 8000e86:	7813      	ldrb	r3, [r2, #0]
 8000e88:	2105      	movs	r1, #5
 8000e8a:	f361 0302 	bfi	r3, r1, #0, #3
 8000e8e:	7013      	strb	r3, [r2, #0]

				// DutyCycle abfragen
				if (imd.DutyCycle > 47 && imd.DutyCycle < 53)						// IMD PWM
 8000e90:	4b66      	ldr	r3, [pc, #408]	; (800102c <imd_status+0x51c>)
 8000e92:	789b      	ldrb	r3, [r3, #2]
 8000e94:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b2f      	cmp	r3, #47	; 0x2f
 8000e9c:	d906      	bls.n	8000eac <imd_status+0x39c>
 8000e9e:	4b63      	ldr	r3, [pc, #396]	; (800102c <imd_status+0x51c>)
 8000ea0:	789b      	ldrb	r3, [r3, #2]
 8000ea2:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b34      	cmp	r3, #52	; 0x34
 8000eaa:	d90a      	bls.n	8000ec2 <imd_status+0x3b2>
				}
				// Fall DutyCycle nicht im Wertebereich ist
				else																// IMD Invalid
				{
					// IMD Status speichern
					system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;						// Fehlerausgabe
 8000eac:	4a5e      	ldr	r2, [pc, #376]	; (8001028 <imd_status+0x518>)
 8000eae:	7813      	ldrb	r3, [r2, #0]
 8000eb0:	f043 0307 	orr.w	r3, r3, #7
 8000eb4:	7013      	strb	r3, [r2, #0]
					imd.PWM_STATUS = IMD_FREQ_ERROR;								// Fehlerausgabe
 8000eb6:	4a5d      	ldr	r2, [pc, #372]	; (800102c <imd_status+0x51c>)
 8000eb8:	7813      	ldrb	r3, [r2, #0]
 8000eba:	f043 0307 	orr.w	r3, r3, #7
 8000ebe:	7013      	strb	r3, [r2, #0]
				}
				break;
 8000ec0:	e0b0      	b.n	8001024 <imd_status+0x514>
 8000ec2:	e0af      	b.n	8001024 <imd_status+0x514>

			default:																// Case Default Fehler
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;							// Fehlerausgabe
 8000ec4:	4a58      	ldr	r2, [pc, #352]	; (8001028 <imd_status+0x518>)
 8000ec6:	7813      	ldrb	r3, [r2, #0]
 8000ec8:	f043 0307 	orr.w	r3, r3, #7
 8000ecc:	7013      	strb	r3, [r2, #0]
				imd.PWM_STATUS = IMD_FREQ_ERROR;									// Fehlerausgabe
 8000ece:	4a57      	ldr	r2, [pc, #348]	; (800102c <imd_status+0x51c>)
 8000ed0:	7813      	ldrb	r3, [r2, #0]
 8000ed2:	f043 0307 	orr.w	r3, r3, #7
 8000ed6:	7013      	strb	r3, [r2, #0]
				break;
 8000ed8:	e0a4      	b.n	8001024 <imd_status+0x514>
		}
	}
	else
	{
		switch (imd.Frequency)
 8000eda:	4b54      	ldr	r3, [pc, #336]	; (800102c <imd_status+0x51c>)
 8000edc:	785b      	ldrb	r3, [r3, #1]
 8000ede:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b0a      	cmp	r3, #10
 8000ee6:	d002      	beq.n	8000eee <imd_status+0x3de>
 8000ee8:	2b14      	cmp	r3, #20
 8000eea:	d040      	beq.n	8000f6e <imd_status+0x45e>
 8000eec:	e07f      	b.n	8000fee <imd_status+0x4de>
		{
			case 10:																// Case 10 Hz
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_NORMAL;								// IMD funktioniert normal
 8000eee:	4a4e      	ldr	r2, [pc, #312]	; (8001028 <imd_status+0x518>)
 8000ef0:	7813      	ldrb	r3, [r2, #0]
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	f361 0302 	bfi	r3, r1, #0, #3
 8000ef8:	7013      	strb	r3, [r2, #0]
				imd.PWM_STATUS = IMD_NORMAL;										// IMD funktioniert normal
 8000efa:	4a4c      	ldr	r2, [pc, #304]	; (800102c <imd_status+0x51c>)
 8000efc:	7813      	ldrb	r3, [r2, #0]
 8000efe:	2101      	movs	r1, #1
 8000f00:	f361 0302 	bfi	r3, r1, #0, #3
 8000f04:	7013      	strb	r3, [r2, #0]

				// DutyCycle abfragen
				if (imd.DutyCycle > 5 && imd.DutyCycle < 95)						// IMD PWM
 8000f06:	4b49      	ldr	r3, [pc, #292]	; (800102c <imd_status+0x51c>)
 8000f08:	789b      	ldrb	r3, [r3, #2]
 8000f0a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2b05      	cmp	r3, #5
 8000f12:	d921      	bls.n	8000f58 <imd_status+0x448>
 8000f14:	4b45      	ldr	r3, [pc, #276]	; (800102c <imd_status+0x51c>)
 8000f16:	789b      	ldrb	r3, [r3, #2]
 8000f18:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b5e      	cmp	r3, #94	; 0x5e
 8000f20:	d81a      	bhi.n	8000f58 <imd_status+0x448>
				{
					// Widerstand berechnen
					imd.Resistanc = 90 * 1200 / (imd.DutyCycle - 5) - 1200;			// Angabe in kOhm
 8000f22:	4b42      	ldr	r3, [pc, #264]	; (800102c <imd_status+0x51c>)
 8000f24:	789b      	ldrb	r3, [r3, #2]
 8000f26:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	3b05      	subs	r3, #5
 8000f2e:	4a40      	ldr	r2, [pc, #256]	; (8001030 <imd_status+0x520>)
 8000f30:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f34:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8000f38:	f3c3 0111 	ubfx	r1, r3, #0, #18
 8000f3c:	4a3b      	ldr	r2, [pc, #236]	; (800102c <imd_status+0x51c>)
 8000f3e:	6853      	ldr	r3, [r2, #4]
 8000f40:	f361 0311 	bfi	r3, r1, #0, #18
 8000f44:	6053      	str	r3, [r2, #4]

#ifdef DEBUG_IMD
					// Ausgabe Widerstandswert
					uartTransmitNumber(imd.Resistanc, 10);
 8000f46:	4b39      	ldr	r3, [pc, #228]	; (800102c <imd_status+0x51c>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8000f4e:	210a      	movs	r1, #10
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fb09 	bl	8000568 <uartTransmitNumber>
				{
					// IMD Status speichern
					system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;						// Fehlerausgabe
					imd.PWM_STATUS = IMD_FREQ_ERROR;								// Fehlerausgabe
				}
				break;
 8000f56:	e055      	b.n	8001004 <imd_status+0x4f4>
					system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;						// Fehlerausgabe
 8000f58:	4a33      	ldr	r2, [pc, #204]	; (8001028 <imd_status+0x518>)
 8000f5a:	7813      	ldrb	r3, [r2, #0]
 8000f5c:	f043 0307 	orr.w	r3, r3, #7
 8000f60:	7013      	strb	r3, [r2, #0]
					imd.PWM_STATUS = IMD_FREQ_ERROR;								// Fehlerausgabe
 8000f62:	4a32      	ldr	r2, [pc, #200]	; (800102c <imd_status+0x51c>)
 8000f64:	7813      	ldrb	r3, [r2, #0]
 8000f66:	f043 0307 	orr.w	r3, r3, #7
 8000f6a:	7013      	strb	r3, [r2, #0]
				break;
 8000f6c:	e04a      	b.n	8001004 <imd_status+0x4f4>

			case 20:
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_UNTERSPANNUNG;						// Unterspannung an HV erkannt
 8000f6e:	4a2e      	ldr	r2, [pc, #184]	; (8001028 <imd_status+0x518>)
 8000f70:	7813      	ldrb	r3, [r2, #0]
 8000f72:	2102      	movs	r1, #2
 8000f74:	f361 0302 	bfi	r3, r1, #0, #3
 8000f78:	7013      	strb	r3, [r2, #0]
				imd.PWM_STATUS = IMD_UNTERSPANNUNG;									// Unterspannung an HV erkannt
 8000f7a:	4a2c      	ldr	r2, [pc, #176]	; (800102c <imd_status+0x51c>)
 8000f7c:	7813      	ldrb	r3, [r2, #0]
 8000f7e:	2102      	movs	r1, #2
 8000f80:	f361 0302 	bfi	r3, r1, #0, #3
 8000f84:	7013      	strb	r3, [r2, #0]

				// DutyCycle abfragen
				if (imd.DutyCycle > 5 && imd.DutyCycle < 95)						// IMD PWM
 8000f86:	4b29      	ldr	r3, [pc, #164]	; (800102c <imd_status+0x51c>)
 8000f88:	789b      	ldrb	r3, [r3, #2]
 8000f8a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b05      	cmp	r3, #5
 8000f92:	d921      	bls.n	8000fd8 <imd_status+0x4c8>
 8000f94:	4b25      	ldr	r3, [pc, #148]	; (800102c <imd_status+0x51c>)
 8000f96:	789b      	ldrb	r3, [r3, #2]
 8000f98:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b5e      	cmp	r3, #94	; 0x5e
 8000fa0:	d81a      	bhi.n	8000fd8 <imd_status+0x4c8>
				{
					// Widerstand berechnen
					imd.Resistanc = 90 * 1200 / (imd.DutyCycle - 5) - 1200;			// Angabe in kOhm
 8000fa2:	4b22      	ldr	r3, [pc, #136]	; (800102c <imd_status+0x51c>)
 8000fa4:	789b      	ldrb	r3, [r3, #2]
 8000fa6:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	3b05      	subs	r3, #5
 8000fae:	4a20      	ldr	r2, [pc, #128]	; (8001030 <imd_status+0x520>)
 8000fb0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fb4:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8000fb8:	f3c3 0111 	ubfx	r1, r3, #0, #18
 8000fbc:	4a1b      	ldr	r2, [pc, #108]	; (800102c <imd_status+0x51c>)
 8000fbe:	6853      	ldr	r3, [r2, #4]
 8000fc0:	f361 0311 	bfi	r3, r1, #0, #18
 8000fc4:	6053      	str	r3, [r2, #4]

#ifdef DEBUG_IMD
					// Ausgabe Widerstandswert
					uartTransmitNumber(imd.Resistanc, 10);
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <imd_status+0x51c>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8000fce:	210a      	movs	r1, #10
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fac9 	bl	8000568 <uartTransmitNumber>
				{
					// IMD Status speichern
					system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;						// Fehlerausgabe
					imd.PWM_STATUS = IMD_FREQ_ERROR;								// Fehlerausgabe
				}
				break;
 8000fd6:	e015      	b.n	8001004 <imd_status+0x4f4>
					system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;						// Fehlerausgabe
 8000fd8:	4a13      	ldr	r2, [pc, #76]	; (8001028 <imd_status+0x518>)
 8000fda:	7813      	ldrb	r3, [r2, #0]
 8000fdc:	f043 0307 	orr.w	r3, r3, #7
 8000fe0:	7013      	strb	r3, [r2, #0]
					imd.PWM_STATUS = IMD_FREQ_ERROR;								// Fehlerausgabe
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <imd_status+0x51c>)
 8000fe4:	7813      	ldrb	r3, [r2, #0]
 8000fe6:	f043 0307 	orr.w	r3, r3, #7
 8000fea:	7013      	strb	r3, [r2, #0]
				break;
 8000fec:	e00a      	b.n	8001004 <imd_status+0x4f4>

			default:																// Case Default Fehler
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;							// Fehlerausgabe
 8000fee:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <imd_status+0x518>)
 8000ff0:	7813      	ldrb	r3, [r2, #0]
 8000ff2:	f043 0307 	orr.w	r3, r3, #7
 8000ff6:	7013      	strb	r3, [r2, #0]
				imd.PWM_STATUS = IMD_FREQ_ERROR;									// Fehlerausgabe
 8000ff8:	4a0c      	ldr	r2, [pc, #48]	; (800102c <imd_status+0x51c>)
 8000ffa:	7813      	ldrb	r3, [r2, #0]
 8000ffc:	f043 0307 	orr.w	r3, r3, #7
 8001000:	7013      	strb	r3, [r2, #0]
				break;
 8001002:	bf00      	nop
		}

		// Ausgabe IMD nicht OK kommend BMS
		system_out.ImdOK = 0;
 8001004:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <imd_status+0x524>)
 8001006:	7813      	ldrb	r3, [r2, #0]
 8001008:	f36f 0341 	bfc	r3, #1, #1
 800100c:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(IMD_OK_OUT_GPIO_Port, IMD_OK_OUT_Pin, system_out.ImdOK);	// IMD Status von BMS ausgeben
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <imd_status+0x524>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001016:	b2db      	uxtb	r3, r3
 8001018:	461a      	mov	r2, r3
 800101a:	2102      	movs	r1, #2
 800101c:	4806      	ldr	r0, [pc, #24]	; (8001038 <imd_status+0x528>)
 800101e:	f002 fd2d 	bl	8003a7c <HAL_GPIO_WritePin>
	}
}
 8001022:	bf00      	nop
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000044 	.word	0x20000044
 800102c:	20000038 	.word	0x20000038
 8001030:	0001a5e0 	.word	0x0001a5e0
 8001034:	20000040 	.word	0x20000040
 8001038:	40020000 	.word	0x40020000

0800103c <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 8001040:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001044:	4850      	ldr	r0, [pc, #320]	; (8001188 <readall_inputs+0x14c>)
 8001046:	f002 fd01 	bl	8003a4c <HAL_GPIO_ReadPin>
 800104a:	4603      	mov	r3, r0
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	b2d9      	uxtb	r1, r3
 8001052:	4a4e      	ldr	r2, [pc, #312]	; (800118c <readall_inputs+0x150>)
 8001054:	7813      	ldrb	r3, [r2, #0]
 8001056:	f361 03c3 	bfi	r3, r1, #3, #1
 800105a:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 800105c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001060:	484b      	ldr	r0, [pc, #300]	; (8001190 <readall_inputs+0x154>)
 8001062:	f002 fcf3 	bl	8003a4c <HAL_GPIO_ReadPin>
 8001066:	4603      	mov	r3, r0
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	b2d9      	uxtb	r1, r3
 800106e:	4a47      	ldr	r2, [pc, #284]	; (800118c <readall_inputs+0x150>)
 8001070:	7813      	ldrb	r3, [r2, #0]
 8001072:	f361 1345 	bfi	r3, r1, #5, #1
 8001076:	7013      	strb	r3, [r2, #0]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 8001078:	2101      	movs	r1, #1
 800107a:	4846      	ldr	r0, [pc, #280]	; (8001194 <readall_inputs+0x158>)
 800107c:	f002 fce6 	bl	8003a4c <HAL_GPIO_ReadPin>
 8001080:	4603      	mov	r3, r0
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	b2d9      	uxtb	r1, r3
 8001088:	4a40      	ldr	r2, [pc, #256]	; (800118c <readall_inputs+0x150>)
 800108a:	7813      	ldrb	r3, [r2, #0]
 800108c:	f361 1386 	bfi	r3, r1, #6, #1
 8001090:	7013      	strb	r3, [r2, #0]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8001092:	2104      	movs	r1, #4
 8001094:	483f      	ldr	r0, [pc, #252]	; (8001194 <readall_inputs+0x158>)
 8001096:	f002 fcd9 	bl	8003a4c <HAL_GPIO_ReadPin>
 800109a:	4603      	mov	r3, r0
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	b2d9      	uxtb	r1, r3
 80010a2:	4a3a      	ldr	r2, [pc, #232]	; (800118c <readall_inputs+0x150>)
 80010a4:	7813      	ldrb	r3, [r2, #0]
 80010a6:	f361 13c7 	bfi	r3, r1, #7, #1
 80010aa:	7013      	strb	r3, [r2, #0]

	// SDC-Eingaenge einlesen
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);					// IMD OK, Akku
 80010ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b0:	4835      	ldr	r0, [pc, #212]	; (8001188 <readall_inputs+0x14c>)
 80010b2:	f002 fccb 	bl	8003a4c <HAL_GPIO_ReadPin>
 80010b6:	4603      	mov	r3, r0
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	b2d9      	uxtb	r1, r3
 80010be:	4a36      	ldr	r2, [pc, #216]	; (8001198 <readall_inputs+0x15c>)
 80010c0:	7813      	ldrb	r3, [r2, #0]
 80010c2:	f361 0300 	bfi	r3, r1, #0, #1
 80010c6:	7013      	strb	r3, [r2, #0]
	sdc_in.HVIL = HAL_GPIO_ReadPin(SENSE_SDC_HVIL_GPIO_Port, SENSE_SDC_HVIL_Pin);				// Shutdown-Circuit HVIL, OK
 80010c8:	2108      	movs	r1, #8
 80010ca:	482f      	ldr	r0, [pc, #188]	; (8001188 <readall_inputs+0x14c>)
 80010cc:	f002 fcbe 	bl	8003a4c <HAL_GPIO_ReadPin>
 80010d0:	4603      	mov	r3, r0
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	b2d9      	uxtb	r1, r3
 80010d8:	4a2f      	ldr	r2, [pc, #188]	; (8001198 <readall_inputs+0x15c>)
 80010da:	7813      	ldrb	r3, [r2, #0]
 80010dc:	f361 0341 	bfi	r3, r1, #1, #1
 80010e0:	7013      	strb	r3, [r2, #0]
	sdc_in.MotorSDC = HAL_GPIO_ReadPin(SENSE_SDC_MOTOR_GPIO_Port, SENSE_SDC_MOTOR_Pin);			// Shutdown-Circuit Akku, OK
 80010e2:	2120      	movs	r1, #32
 80010e4:	4828      	ldr	r0, [pc, #160]	; (8001188 <readall_inputs+0x14c>)
 80010e6:	f002 fcb1 	bl	8003a4c <HAL_GPIO_ReadPin>
 80010ea:	4603      	mov	r3, r0
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	b2d9      	uxtb	r1, r3
 80010f2:	4a29      	ldr	r2, [pc, #164]	; (8001198 <readall_inputs+0x15c>)
 80010f4:	7813      	ldrb	r3, [r2, #0]
 80010f6:	f361 0382 	bfi	r3, r1, #2, #1
 80010fa:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 80010fc:	2110      	movs	r1, #16
 80010fe:	4822      	ldr	r0, [pc, #136]	; (8001188 <readall_inputs+0x14c>)
 8001100:	f002 fca4 	bl	8003a4c <HAL_GPIO_ReadPin>
 8001104:	4603      	mov	r3, r0
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	b2d9      	uxtb	r1, r3
 800110c:	4a22      	ldr	r2, [pc, #136]	; (8001198 <readall_inputs+0x15c>)
 800110e:	7813      	ldrb	r3, [r2, #0]
 8001110:	f361 03c3 	bfi	r3, r1, #3, #1
 8001114:	7013      	strb	r3, [r2, #0]
	sdc_in.PrechargeIn = HAL_GPIO_ReadPin(PRECHARGE_IN_GPIO_Port, PRECHARGE_IN_Pin);			// Eingang Precharge abgeschlossen
 8001116:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800111a:	4820      	ldr	r0, [pc, #128]	; (800119c <readall_inputs+0x160>)
 800111c:	f002 fc96 	bl	8003a4c <HAL_GPIO_ReadPin>
 8001120:	4603      	mov	r3, r0
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	b2d9      	uxtb	r1, r3
 8001128:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <readall_inputs+0x15c>)
 800112a:	7813      	ldrb	r3, [r2, #0]
 800112c:	f361 1304 	bfi	r3, r1, #4, #1
 8001130:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.OVC = HAL_GPIO_ReadPin(OVC_SENSE_GPIO_Port, OVC_SENSE_Pin);						// Eingang Overcurrent erkannt
 8001132:	2104      	movs	r1, #4
 8001134:	4819      	ldr	r0, [pc, #100]	; (800119c <readall_inputs+0x160>)
 8001136:	f002 fc89 	bl	8003a4c <HAL_GPIO_ReadPin>
 800113a:	4603      	mov	r3, r0
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	b2d9      	uxtb	r1, r3
 8001142:	4a17      	ldr	r2, [pc, #92]	; (80011a0 <readall_inputs+0x164>)
 8001144:	7813      	ldrb	r3, [r2, #0]
 8001146:	f361 0300 	bfi	r3, r1, #0, #1
 800114a:	7013      	strb	r3, [r2, #0]
	komfort_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 800114c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001150:	4810      	ldr	r0, [pc, #64]	; (8001194 <readall_inputs+0x158>)
 8001152:	f002 fc7b 	bl	8003a4c <HAL_GPIO_ReadPin>
 8001156:	4603      	mov	r3, r0
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	b2d9      	uxtb	r1, r3
 800115e:	4a10      	ldr	r2, [pc, #64]	; (80011a0 <readall_inputs+0x164>)
 8001160:	7813      	ldrb	r3, [r2, #0]
 8001162:	f361 0341 	bfi	r3, r1, #1, #1
 8001166:	7013      	strb	r3, [r2, #0]
	komfort_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8001168:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800116c:	4809      	ldr	r0, [pc, #36]	; (8001194 <readall_inputs+0x158>)
 800116e:	f002 fc6d 	bl	8003a4c <HAL_GPIO_ReadPin>
 8001172:	4603      	mov	r3, r0
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	b2d9      	uxtb	r1, r3
 800117a:	4a09      	ldr	r2, [pc, #36]	; (80011a0 <readall_inputs+0x164>)
 800117c:	7813      	ldrb	r3, [r2, #0]
 800117e:	f361 0382 	bfi	r3, r1, #2, #1
 8001182:	7013      	strb	r3, [r2, #0]
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40021000 	.word	0x40021000
 800118c:	20000044 	.word	0x20000044
 8001190:	40020c00 	.word	0x40020c00
 8001194:	40020000 	.word	0x40020000
 8001198:	20000054 	.word	0x20000054
 800119c:	40021400 	.word	0x40021400
 80011a0:	2000004c 	.word	0x2000004c

080011a4 <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);								// Blaue LED Platine setzen
 80011a8:	2201      	movs	r2, #1
 80011aa:	2180      	movs	r1, #128	; 0x80
 80011ac:	481b      	ldr	r0, [pc, #108]	; (800121c <testPCB_Leds+0x78>)
 80011ae:	f002 fc65 	bl	8003a7c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80011b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011b6:	f001 fb69 	bl	800288c <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);							// Blaue LED Platine zuruecksetzen
 80011ba:	2200      	movs	r2, #0
 80011bc:	2180      	movs	r1, #128	; 0x80
 80011be:	4817      	ldr	r0, [pc, #92]	; (800121c <testPCB_Leds+0x78>)
 80011c0:	f002 fc5c 	bl	8003a7c <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80011c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011c8:	f001 fb60 	bl	800288c <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);							// Gruene LED Platine setzen
 80011cc:	2201      	movs	r2, #1
 80011ce:	2104      	movs	r1, #4
 80011d0:	4812      	ldr	r0, [pc, #72]	; (800121c <testPCB_Leds+0x78>)
 80011d2:	f002 fc53 	bl	8003a7c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80011d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011da:	f001 fb57 	bl	800288c <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);							// Gruene LED Platine zuruecksetzen
 80011de:	2200      	movs	r2, #0
 80011e0:	2104      	movs	r1, #4
 80011e2:	480e      	ldr	r0, [pc, #56]	; (800121c <testPCB_Leds+0x78>)
 80011e4:	f002 fc4a 	bl	8003a7c <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80011e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011ec:	f001 fb4e 	bl	800288c <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);								// Rote LED Platine setzen
 80011f0:	2201      	movs	r2, #1
 80011f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011f6:	4809      	ldr	r0, [pc, #36]	; (800121c <testPCB_Leds+0x78>)
 80011f8:	f002 fc40 	bl	8003a7c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80011fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001200:	f001 fb44 	bl	800288c <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);								// Rote LED Platine zuruecksetzen
 8001204:	2200      	movs	r2, #0
 8001206:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800120a:	4804      	ldr	r0, [pc, #16]	; (800121c <testPCB_Leds+0x78>)
 800120c:	f002 fc36 	bl	8003a7c <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001210:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001214:	f001 fb3a 	bl	800288c <HAL_Delay>
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40020400 	.word	0x40020400

08001220 <testLeds>:
//----------------------------------------------------------------------

// Teste alle externen LEDs
//----------------------------------------------------------------------
void testLeds(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	// Leds Testen
	HAL_GPIO_WritePin(AKKU_LED_GPIO_Port, AKKU_LED_Pin, GPIO_PIN_SET);								// Akku LED Kombiinstrument setzen
 8001224:	2201      	movs	r2, #1
 8001226:	2180      	movs	r1, #128	; 0x80
 8001228:	481a      	ldr	r0, [pc, #104]	; (8001294 <testLeds+0x74>)
 800122a:	f002 fc27 	bl	8003a7c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800122e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001232:	f001 fb2b 	bl	800288c <HAL_Delay>
	HAL_GPIO_WritePin(AKKU_LED_GPIO_Port, AKKU_LED_Pin, GPIO_PIN_RESET);							// Akku LED Kombiinstrument zuruecksetzen
 8001236:	2200      	movs	r2, #0
 8001238:	2180      	movs	r1, #128	; 0x80
 800123a:	4816      	ldr	r0, [pc, #88]	; (8001294 <testLeds+0x74>)
 800123c:	f002 fc1e 	bl	8003a7c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001240:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001244:	f001 fb22 	bl	800288c <HAL_Delay>
	HAL_GPIO_WritePin(INLET_RED_GPIO_Port, INLET_RED_Pin, GPIO_PIN_SET);							// Red Inlet LED setzen
 8001248:	2201      	movs	r2, #1
 800124a:	2104      	movs	r1, #4
 800124c:	4812      	ldr	r0, [pc, #72]	; (8001298 <testLeds+0x78>)
 800124e:	f002 fc15 	bl	8003a7c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001252:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001256:	f001 fb19 	bl	800288c <HAL_Delay>
	HAL_GPIO_WritePin(INLET_RED_GPIO_Port, INLET_RED_Pin, GPIO_PIN_RESET);							// Red Inlet LED zuruecksetzen
 800125a:	2200      	movs	r2, #0
 800125c:	2104      	movs	r1, #4
 800125e:	480e      	ldr	r0, [pc, #56]	; (8001298 <testLeds+0x78>)
 8001260:	f002 fc0c 	bl	8003a7c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001264:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001268:	f001 fb10 	bl	800288c <HAL_Delay>
	HAL_GPIO_WritePin(INLET_GREEN_GPIO_Port, INLET_GREEN_Pin, GPIO_PIN_SET);						// Green Inlet LED setzen
 800126c:	2201      	movs	r2, #1
 800126e:	2102      	movs	r1, #2
 8001270:	4809      	ldr	r0, [pc, #36]	; (8001298 <testLeds+0x78>)
 8001272:	f002 fc03 	bl	8003a7c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001276:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800127a:	f001 fb07 	bl	800288c <HAL_Delay>
	HAL_GPIO_WritePin(INLET_GREEN_GPIO_Port, INLET_GREEN_Pin, GPIO_PIN_RESET);						// Green Inlet LED zuruecksetzen
 800127e:	2200      	movs	r2, #0
 8001280:	2102      	movs	r1, #2
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <testLeds+0x78>)
 8001284:	f002 fbfa 	bl	8003a7c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001288:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800128c:	f001 fafe 	bl	800288c <HAL_Delay>
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40021800 	.word	0x40021800
 8001298:	40021000 	.word	0x40021000

0800129c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012a2:	463b      	mov	r3, r7
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012ae:	4b44      	ldr	r3, [pc, #272]	; (80013c0 <MX_ADC1_Init+0x124>)
 80012b0:	4a44      	ldr	r2, [pc, #272]	; (80013c4 <MX_ADC1_Init+0x128>)
 80012b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012b4:	4b42      	ldr	r3, [pc, #264]	; (80013c0 <MX_ADC1_Init+0x124>)
 80012b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012bc:	4b40      	ldr	r3, [pc, #256]	; (80013c0 <MX_ADC1_Init+0x124>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012c2:	4b3f      	ldr	r3, [pc, #252]	; (80013c0 <MX_ADC1_Init+0x124>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012c8:	4b3d      	ldr	r3, [pc, #244]	; (80013c0 <MX_ADC1_Init+0x124>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ce:	4b3c      	ldr	r3, [pc, #240]	; (80013c0 <MX_ADC1_Init+0x124>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012d6:	4b3a      	ldr	r3, [pc, #232]	; (80013c0 <MX_ADC1_Init+0x124>)
 80012d8:	2200      	movs	r2, #0
 80012da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012dc:	4b38      	ldr	r3, [pc, #224]	; (80013c0 <MX_ADC1_Init+0x124>)
 80012de:	4a3a      	ldr	r2, [pc, #232]	; (80013c8 <MX_ADC1_Init+0x12c>)
 80012e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012e2:	4b37      	ldr	r3, [pc, #220]	; (80013c0 <MX_ADC1_Init+0x124>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 80012e8:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <MX_ADC1_Init+0x124>)
 80012ea:	2206      	movs	r2, #6
 80012ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012ee:	4b34      	ldr	r3, [pc, #208]	; (80013c0 <MX_ADC1_Init+0x124>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012f6:	4b32      	ldr	r3, [pc, #200]	; (80013c0 <MX_ADC1_Init+0x124>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012fc:	4830      	ldr	r0, [pc, #192]	; (80013c0 <MX_ADC1_Init+0x124>)
 80012fe:	f001 fb31 	bl	8002964 <HAL_ADC_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001308:	f000 fe40 	bl	8001f8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800130c:	2307      	movs	r3, #7
 800130e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001310:	2301      	movs	r3, #1
 8001312:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001314:	2301      	movs	r3, #1
 8001316:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001318:	463b      	mov	r3, r7
 800131a:	4619      	mov	r1, r3
 800131c:	4828      	ldr	r0, [pc, #160]	; (80013c0 <MX_ADC1_Init+0x124>)
 800131e:	f001 fb65 	bl	80029ec <HAL_ADC_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001328:	f000 fe30 	bl	8001f8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800132c:	2303      	movs	r3, #3
 800132e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001330:	2302      	movs	r3, #2
 8001332:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001334:	463b      	mov	r3, r7
 8001336:	4619      	mov	r1, r3
 8001338:	4821      	ldr	r0, [pc, #132]	; (80013c0 <MX_ADC1_Init+0x124>)
 800133a:	f001 fb57 	bl	80029ec <HAL_ADC_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001344:	f000 fe22 	bl	8001f8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001348:	2304      	movs	r3, #4
 800134a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800134c:	2303      	movs	r3, #3
 800134e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001350:	463b      	mov	r3, r7
 8001352:	4619      	mov	r1, r3
 8001354:	481a      	ldr	r0, [pc, #104]	; (80013c0 <MX_ADC1_Init+0x124>)
 8001356:	f001 fb49 	bl	80029ec <HAL_ADC_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001360:	f000 fe14 	bl	8001f8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001364:	2305      	movs	r3, #5
 8001366:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001368:	2304      	movs	r3, #4
 800136a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136c:	463b      	mov	r3, r7
 800136e:	4619      	mov	r1, r3
 8001370:	4813      	ldr	r0, [pc, #76]	; (80013c0 <MX_ADC1_Init+0x124>)
 8001372:	f001 fb3b 	bl	80029ec <HAL_ADC_ConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800137c:	f000 fe06 	bl	8001f8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001380:	2306      	movs	r3, #6
 8001382:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001384:	2305      	movs	r3, #5
 8001386:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001388:	463b      	mov	r3, r7
 800138a:	4619      	mov	r1, r3
 800138c:	480c      	ldr	r0, [pc, #48]	; (80013c0 <MX_ADC1_Init+0x124>)
 800138e:	f001 fb2d 	bl	80029ec <HAL_ADC_ConfigChannel>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001398:	f000 fdf8 	bl	8001f8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <MX_ADC1_Init+0x130>)
 800139e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80013a0:	2306      	movs	r3, #6
 80013a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a4:	463b      	mov	r3, r7
 80013a6:	4619      	mov	r1, r3
 80013a8:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_ADC1_Init+0x124>)
 80013aa:	f001 fb1f 	bl	80029ec <HAL_ADC_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80013b4:	f000 fdea 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000058 	.word	0x20000058
 80013c4:	40012000 	.word	0x40012000
 80013c8:	0f000001 	.word	0x0f000001
 80013cc:	10000012 	.word	0x10000012

080013d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a15      	ldr	r2, [pc, #84]	; (8001444 <HAL_ADC_MspInit+0x74>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d123      	bne.n	800143a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_ADC_MspInit+0x78>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	4a14      	ldr	r2, [pc, #80]	; (8001448 <HAL_ADC_MspInit+0x78>)
 80013f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fc:	6453      	str	r3, [r2, #68]	; 0x44
 80013fe:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_ADC_MspInit+0x78>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <HAL_ADC_MspInit+0x78>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a0e      	ldr	r2, [pc, #56]	; (8001448 <HAL_ADC_MspInit+0x78>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <HAL_ADC_MspInit+0x78>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 8001422:	23f8      	movs	r3, #248	; 0xf8
 8001424:	617b      	str	r3, [r7, #20]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001426:	2303      	movs	r3, #3
 8001428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	4619      	mov	r1, r3
 8001434:	4805      	ldr	r0, [pc, #20]	; (800144c <HAL_ADC_MspInit+0x7c>)
 8001436:	f002 f95d 	bl	80036f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800143a:	bf00      	nop
 800143c:	3728      	adds	r7, #40	; 0x28
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40012000 	.word	0x40012000
 8001448:	40023800 	.word	0x40023800
 800144c:	40020000 	.word	0x40020000

08001450 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <MX_CAN1_Init+0x64>)
 8001456:	4a18      	ldr	r2, [pc, #96]	; (80014b8 <MX_CAN1_Init+0x68>)
 8001458:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <MX_CAN1_Init+0x64>)
 800145c:	2210      	movs	r2, #16
 800145e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <MX_CAN1_Init+0x64>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <MX_CAN1_Init+0x64>)
 8001468:	2200      	movs	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <MX_CAN1_Init+0x64>)
 800146e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001472:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <MX_CAN1_Init+0x64>)
 8001476:	2200      	movs	r2, #0
 8001478:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <MX_CAN1_Init+0x64>)
 800147c:	2200      	movs	r2, #0
 800147e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <MX_CAN1_Init+0x64>)
 8001482:	2200      	movs	r2, #0
 8001484:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <MX_CAN1_Init+0x64>)
 8001488:	2200      	movs	r2, #0
 800148a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800148c:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <MX_CAN1_Init+0x64>)
 800148e:	2200      	movs	r2, #0
 8001490:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001492:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <MX_CAN1_Init+0x64>)
 8001494:	2200      	movs	r2, #0
 8001496:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <MX_CAN1_Init+0x64>)
 800149a:	2200      	movs	r2, #0
 800149c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800149e:	4805      	ldr	r0, [pc, #20]	; (80014b4 <MX_CAN1_Init+0x64>)
 80014a0:	f001 fce8 	bl	8002e74 <HAL_CAN_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80014aa:	f000 fd6f 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200000c8 	.word	0x200000c8
 80014b8:	40006400 	.word	0x40006400

080014bc <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 80014c0:	4b17      	ldr	r3, [pc, #92]	; (8001520 <MX_CAN3_Init+0x64>)
 80014c2:	4a18      	ldr	r2, [pc, #96]	; (8001524 <MX_CAN3_Init+0x68>)
 80014c4:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 80014c6:	4b16      	ldr	r3, [pc, #88]	; (8001520 <MX_CAN3_Init+0x64>)
 80014c8:	2206      	movs	r2, #6
 80014ca:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <MX_CAN3_Init+0x64>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80014d2:	4b13      	ldr	r3, [pc, #76]	; (8001520 <MX_CAN3_Init+0x64>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <MX_CAN3_Init+0x64>)
 80014da:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80014de:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <MX_CAN3_Init+0x64>)
 80014e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014e6:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 80014e8:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <MX_CAN3_Init+0x64>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <MX_CAN3_Init+0x64>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 80014f4:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <MX_CAN3_Init+0x64>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <MX_CAN3_Init+0x64>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001500:	4b07      	ldr	r3, [pc, #28]	; (8001520 <MX_CAN3_Init+0x64>)
 8001502:	2200      	movs	r2, #0
 8001504:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <MX_CAN3_Init+0x64>)
 8001508:	2200      	movs	r2, #0
 800150a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 800150c:	4804      	ldr	r0, [pc, #16]	; (8001520 <MX_CAN3_Init+0x64>)
 800150e:	f001 fcb1 	bl	8002e74 <HAL_CAN_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001518:	f000 fd38 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200000a0 	.word	0x200000a0
 8001524:	40003400 	.word	0x40003400

08001528 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08e      	sub	sp, #56	; 0x38
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a43      	ldr	r2, [pc, #268]	; (8001654 <HAL_CAN_MspInit+0x12c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d131      	bne.n	80015ae <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800154a:	4b43      	ldr	r3, [pc, #268]	; (8001658 <HAL_CAN_MspInit+0x130>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	3301      	adds	r3, #1
 8001550:	4a41      	ldr	r2, [pc, #260]	; (8001658 <HAL_CAN_MspInit+0x130>)
 8001552:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001554:	4b40      	ldr	r3, [pc, #256]	; (8001658 <HAL_CAN_MspInit+0x130>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d10b      	bne.n	8001574 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800155c:	4b3f      	ldr	r3, [pc, #252]	; (800165c <HAL_CAN_MspInit+0x134>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	4a3e      	ldr	r2, [pc, #248]	; (800165c <HAL_CAN_MspInit+0x134>)
 8001562:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001566:	6413      	str	r3, [r2, #64]	; 0x40
 8001568:	4b3c      	ldr	r3, [pc, #240]	; (800165c <HAL_CAN_MspInit+0x134>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001570:	623b      	str	r3, [r7, #32]
 8001572:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001574:	4b39      	ldr	r3, [pc, #228]	; (800165c <HAL_CAN_MspInit+0x134>)
 8001576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001578:	4a38      	ldr	r2, [pc, #224]	; (800165c <HAL_CAN_MspInit+0x134>)
 800157a:	f043 0308 	orr.w	r3, r3, #8
 800157e:	6313      	str	r3, [r2, #48]	; 0x30
 8001580:	4b36      	ldr	r3, [pc, #216]	; (800165c <HAL_CAN_MspInit+0x134>)
 8001582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	61fb      	str	r3, [r7, #28]
 800158a:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800158c:	2303      	movs	r3, #3
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800159c:	2309      	movs	r3, #9
 800159e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a4:	4619      	mov	r1, r3
 80015a6:	482e      	ldr	r0, [pc, #184]	; (8001660 <HAL_CAN_MspInit+0x138>)
 80015a8:	f002 f8a4 	bl	80036f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 80015ac:	e04e      	b.n	800164c <HAL_CAN_MspInit+0x124>
  else if(canHandle->Instance==CAN3)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a2c      	ldr	r2, [pc, #176]	; (8001664 <HAL_CAN_MspInit+0x13c>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d149      	bne.n	800164c <HAL_CAN_MspInit+0x124>
    __HAL_RCC_CAN3_CLK_ENABLE();
 80015b8:	4b28      	ldr	r3, [pc, #160]	; (800165c <HAL_CAN_MspInit+0x134>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	4a27      	ldr	r2, [pc, #156]	; (800165c <HAL_CAN_MspInit+0x134>)
 80015be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015c2:	6413      	str	r3, [r2, #64]	; 0x40
 80015c4:	4b25      	ldr	r3, [pc, #148]	; (800165c <HAL_CAN_MspInit+0x134>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015cc:	61bb      	str	r3, [r7, #24]
 80015ce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 80015d0:	4b22      	ldr	r3, [pc, #136]	; (800165c <HAL_CAN_MspInit+0x134>)
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	4a21      	ldr	r2, [pc, #132]	; (800165c <HAL_CAN_MspInit+0x134>)
 80015d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015da:	6413      	str	r3, [r2, #64]	; 0x40
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <HAL_CAN_MspInit+0x134>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80015e8:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <HAL_CAN_MspInit+0x130>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	3301      	adds	r3, #1
 80015ee:	4a1a      	ldr	r2, [pc, #104]	; (8001658 <HAL_CAN_MspInit+0x130>)
 80015f0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80015f2:	4b19      	ldr	r3, [pc, #100]	; (8001658 <HAL_CAN_MspInit+0x130>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d10b      	bne.n	8001612 <HAL_CAN_MspInit+0xea>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_CAN_MspInit+0x134>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	4a17      	ldr	r2, [pc, #92]	; (800165c <HAL_CAN_MspInit+0x134>)
 8001600:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001604:	6413      	str	r3, [r2, #64]	; 0x40
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_CAN_MspInit+0x134>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_CAN_MspInit+0x134>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a11      	ldr	r2, [pc, #68]	; (800165c <HAL_CAN_MspInit+0x134>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b0f      	ldr	r3, [pc, #60]	; (800165c <HAL_CAN_MspInit+0x134>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 800162a:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 800163c:	230b      	movs	r3, #11
 800163e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001644:	4619      	mov	r1, r3
 8001646:	4808      	ldr	r0, [pc, #32]	; (8001668 <HAL_CAN_MspInit+0x140>)
 8001648:	f002 f854 	bl	80036f4 <HAL_GPIO_Init>
}
 800164c:	bf00      	nop
 800164e:	3738      	adds	r7, #56	; 0x38
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40006400 	.word	0x40006400
 8001658:	20000028 	.word	0x20000028
 800165c:	40023800 	.word	0x40023800
 8001660:	40020c00 	.word	0x40020c00
 8001664:	40003400 	.word	0x40003400
 8001668:	40020000 	.word	0x40020000

0800166c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08e      	sub	sp, #56	; 0x38
 8001670:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001682:	4bb6      	ldr	r3, [pc, #728]	; (800195c <MX_GPIO_Init+0x2f0>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4ab5      	ldr	r2, [pc, #724]	; (800195c <MX_GPIO_Init+0x2f0>)
 8001688:	f043 0310 	orr.w	r3, r3, #16
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4bb3      	ldr	r3, [pc, #716]	; (800195c <MX_GPIO_Init+0x2f0>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0310 	and.w	r3, r3, #16
 8001696:	623b      	str	r3, [r7, #32]
 8001698:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800169a:	4bb0      	ldr	r3, [pc, #704]	; (800195c <MX_GPIO_Init+0x2f0>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4aaf      	ldr	r2, [pc, #700]	; (800195c <MX_GPIO_Init+0x2f0>)
 80016a0:	f043 0304 	orr.w	r3, r3, #4
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4bad      	ldr	r3, [pc, #692]	; (800195c <MX_GPIO_Init+0x2f0>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	61fb      	str	r3, [r7, #28]
 80016b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016b2:	4baa      	ldr	r3, [pc, #680]	; (800195c <MX_GPIO_Init+0x2f0>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4aa9      	ldr	r2, [pc, #676]	; (800195c <MX_GPIO_Init+0x2f0>)
 80016b8:	f043 0320 	orr.w	r3, r3, #32
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4ba7      	ldr	r3, [pc, #668]	; (800195c <MX_GPIO_Init+0x2f0>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0320 	and.w	r3, r3, #32
 80016c6:	61bb      	str	r3, [r7, #24]
 80016c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ca:	4ba4      	ldr	r3, [pc, #656]	; (800195c <MX_GPIO_Init+0x2f0>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4aa3      	ldr	r2, [pc, #652]	; (800195c <MX_GPIO_Init+0x2f0>)
 80016d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4ba1      	ldr	r3, [pc, #644]	; (800195c <MX_GPIO_Init+0x2f0>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	4b9e      	ldr	r3, [pc, #632]	; (800195c <MX_GPIO_Init+0x2f0>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a9d      	ldr	r2, [pc, #628]	; (800195c <MX_GPIO_Init+0x2f0>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b9b      	ldr	r3, [pc, #620]	; (800195c <MX_GPIO_Init+0x2f0>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	4b98      	ldr	r3, [pc, #608]	; (800195c <MX_GPIO_Init+0x2f0>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a97      	ldr	r2, [pc, #604]	; (800195c <MX_GPIO_Init+0x2f0>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b95      	ldr	r3, [pc, #596]	; (800195c <MX_GPIO_Init+0x2f0>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001712:	4b92      	ldr	r3, [pc, #584]	; (800195c <MX_GPIO_Init+0x2f0>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a91      	ldr	r2, [pc, #580]	; (800195c <MX_GPIO_Init+0x2f0>)
 8001718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b8f      	ldr	r3, [pc, #572]	; (800195c <MX_GPIO_Init+0x2f0>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800172a:	4b8c      	ldr	r3, [pc, #560]	; (800195c <MX_GPIO_Init+0x2f0>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a8b      	ldr	r2, [pc, #556]	; (800195c <MX_GPIO_Init+0x2f0>)
 8001730:	f043 0308 	orr.w	r3, r3, #8
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b89      	ldr	r3, [pc, #548]	; (800195c <MX_GPIO_Init+0x2f0>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 8001742:	2200      	movs	r2, #0
 8001744:	f248 0187 	movw	r1, #32903	; 0x8087
 8001748:	4885      	ldr	r0, [pc, #532]	; (8001960 <MX_GPIO_Init+0x2f4>)
 800174a:	f002 f997 	bl	8003a7c <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001754:	4883      	ldr	r0, [pc, #524]	; (8001964 <MX_GPIO_Init+0x2f8>)
 8001756:	f002 f991 	bl	8003a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	f242 0102 	movw	r1, #8194	; 0x2002
 8001760:	4881      	ldr	r0, [pc, #516]	; (8001968 <MX_GPIO_Init+0x2fc>)
 8001762:	f002 f98b 	bl	8003a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 8001766:	2200      	movs	r2, #0
 8001768:	f240 6102 	movw	r1, #1538	; 0x602
 800176c:	487f      	ldr	r0, [pc, #508]	; (800196c <MX_GPIO_Init+0x300>)
 800176e:	f002 f985 	bl	8003a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8001772:	2200      	movs	r2, #0
 8001774:	f244 0184 	movw	r1, #16516	; 0x4084
 8001778:	487d      	ldr	r0, [pc, #500]	; (8001970 <MX_GPIO_Init+0x304>)
 800177a:	f002 f97f 	bl	8003a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 800177e:	2200      	movs	r2, #0
 8001780:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 8001784:	487b      	ldr	r0, [pc, #492]	; (8001974 <MX_GPIO_Init+0x308>)
 8001786:	f002 f979 	bl	8003a7c <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	2118      	movs	r1, #24
 800178e:	487a      	ldr	r0, [pc, #488]	; (8001978 <MX_GPIO_Init+0x30c>)
 8001790:	f002 f974 	bl	8003a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 8001794:	f248 0387 	movw	r3, #32903	; 0x8087
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
                          |INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179a:	2301      	movs	r3, #1
 800179c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2300      	movs	r3, #0
 80017a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017aa:	4619      	mov	r1, r3
 80017ac:	486c      	ldr	r0, [pc, #432]	; (8001960 <MX_GPIO_Init+0x2f4>)
 80017ae:	f001 ffa1 	bl	80036f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 80017b2:	f44f 739c 	mov.w	r3, #312	; 0x138
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c4:	4619      	mov	r1, r3
 80017c6:	4866      	ldr	r0, [pc, #408]	; (8001960 <MX_GPIO_Init+0x2f4>)
 80017c8:	f001 ff94 	bl	80036f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 80017cc:	f44f 6388 	mov.w	r3, #1088	; 0x440
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d2:	2303      	movs	r3, #3
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017de:	4619      	mov	r1, r3
 80017e0:	485f      	ldr	r0, [pc, #380]	; (8001960 <MX_GPIO_Init+0x2f4>)
 80017e2:	f001 ff87 	bl	80036f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 80017e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ec:	2301      	movs	r3, #1
 80017ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 80017f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fc:	4619      	mov	r1, r3
 80017fe:	4859      	ldr	r0, [pc, #356]	; (8001964 <MX_GPIO_Init+0x2f8>)
 8001800:	f001 ff78 	bl	80036f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PCPin PC7 PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001804:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |SD_SW_Pin|GPIO_PIN_7|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800180a:	2303      	movs	r3, #3
 800180c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001816:	4619      	mov	r1, r3
 8001818:	4852      	ldr	r0, [pc, #328]	; (8001964 <MX_GPIO_Init+0x2f8>)
 800181a:	f001 ff6b 	bl	80036f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF3 PF4 PF5
                           PFPin PFPin PFPin PFPin
                           PF10 PF11 PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800181e:	f645 73f9 	movw	r3, #24569	; 0x5ff9
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001824:	2303      	movs	r3, #3
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800182c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001830:	4619      	mov	r1, r3
 8001832:	484d      	ldr	r0, [pc, #308]	; (8001968 <MX_GPIO_Init+0x2fc>)
 8001834:	f001 ff5e 	bl	80036f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin;
 8001838:	f242 0302 	movw	r3, #8194	; 0x2002
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183e:	2301      	movs	r3, #1
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800184a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184e:	4619      	mov	r1, r3
 8001850:	4845      	ldr	r0, [pc, #276]	; (8001968 <MX_GPIO_Init+0x2fc>)
 8001852:	f001 ff4f 	bl	80036f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin|PRECHARGE_IN_Pin;
 8001856:	f248 0304 	movw	r3, #32772	; 0x8004
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800185c:	2300      	movs	r3, #0
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001868:	4619      	mov	r1, r3
 800186a:	483f      	ldr	r0, [pc, #252]	; (8001968 <MX_GPIO_Init+0x2fc>)
 800186c:	f001 ff42 	bl	80036f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|HW_WAKE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 8001870:	f641 0305 	movw	r3, #6149	; 0x1805
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001876:	2300      	movs	r3, #0
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001882:	4619      	mov	r1, r3
 8001884:	4839      	ldr	r0, [pc, #228]	; (800196c <MX_GPIO_Init+0x300>)
 8001886:	f001 ff35 	bl	80036f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 800188a:	f240 6302 	movw	r3, #1538	; 0x602
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001890:	2301      	movs	r3, #1
 8001892:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a0:	4619      	mov	r1, r3
 80018a2:	4832      	ldr	r0, [pc, #200]	; (800196c <MX_GPIO_Init+0x300>)
 80018a4:	f001 ff26 	bl	80036f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80018a8:	f64b 7373 	movw	r3, #49011	; 0xbf73
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|I2C_SCL_Pin|I2C_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ae:	2303      	movs	r3, #3
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ba:	4619      	mov	r1, r3
 80018bc:	482c      	ldr	r0, [pc, #176]	; (8001970 <MX_GPIO_Init+0x304>)
 80018be:	f001 ff19 	bl	80036f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 80018c2:	f244 0384 	movw	r3, #16516	; 0x4084
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c8:	2301      	movs	r3, #1
 80018ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d0:	2300      	movs	r3, #0
 80018d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d8:	4619      	mov	r1, r3
 80018da:	4825      	ldr	r0, [pc, #148]	; (8001970 <MX_GPIO_Init+0x304>)
 80018dc:	f001 ff0a 	bl	80036f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8;
 80018e0:	f240 1343 	movw	r3, #323	; 0x143
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e6:	2303      	movs	r3, #3
 80018e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f2:	4619      	mov	r1, r3
 80018f4:	481f      	ldr	r0, [pc, #124]	; (8001974 <MX_GPIO_Init+0x308>)
 80018f6:	f001 fefd 	bl	80036f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|SD_CMD_Pin;
 80018fa:	f240 7304 	movw	r3, #1796	; 0x704
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001900:	2303      	movs	r3, #3
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190c:	4619      	mov	r1, r3
 800190e:	481a      	ldr	r0, [pc, #104]	; (8001978 <MX_GPIO_Init+0x30c>)
 8001910:	f001 fef0 	bl	80036f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 8001914:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191a:	2300      	movs	r3, #0
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 8001922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001926:	4619      	mov	r1, r3
 8001928:	4813      	ldr	r0, [pc, #76]	; (8001978 <MX_GPIO_Init+0x30c>)
 800192a:	f001 fee3 	bl	80036f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 800192e:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001934:	2301      	movs	r3, #1
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001944:	4619      	mov	r1, r3
 8001946:	480b      	ldr	r0, [pc, #44]	; (8001974 <MX_GPIO_Init+0x308>)
 8001948:	f001 fed4 	bl	80036f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|DIGITAL2_Pin;
 800194c:	2318      	movs	r3, #24
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001950:	2301      	movs	r3, #1
 8001952:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	e00f      	b.n	800197c <MX_GPIO_Init+0x310>
 800195c:	40023800 	.word	0x40023800
 8001960:	40021000 	.word	0x40021000
 8001964:	40020800 	.word	0x40020800
 8001968:	40021400 	.word	0x40021400
 800196c:	40020000 	.word	0x40020000
 8001970:	40020400 	.word	0x40020400
 8001974:	40021800 	.word	0x40021800
 8001978:	40020c00 	.word	0x40020c00
 800197c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800197e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001982:	4619      	mov	r1, r3
 8001984:	4803      	ldr	r0, [pc, #12]	; (8001994 <MX_GPIO_Init+0x328>)
 8001986:	f001 feb5 	bl	80036f4 <HAL_GPIO_Init>

}
 800198a:	bf00      	nop
 800198c:	3738      	adds	r7, #56	; 0x38
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40020c00 	.word	0x40020c00

08001998 <calculateMovingAverage>:
static uint16_t getDifference(uint16_t a, uint16_t b);

// Gleitenden Mittelwert berechnen, sehr Speicher arm
//----------------------------------------------------------------------
static int calculateMovingAverage(int oldValue, int newValue, int n)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
	return (oldValue + ((newValue - oldValue) / n));						// MovingAverage Calculation x_n  = x_{n-1} + ((x_n+x_{n-1})/n)
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	1ad2      	subs	r2, r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	fb92 f2f3 	sdiv	r2, r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4413      	add	r3, r2
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <getDifference>:
//----------------------------------------------------------------------

// Differenz Berechnen, Betrag
//----------------------------------------------------------------------
static uint16_t getDifference(uint16_t a, uint16_t b)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	460a      	mov	r2, r1
 80019ca:	80fb      	strh	r3, [r7, #6]
 80019cc:	4613      	mov	r3, r2
 80019ce:	80bb      	strh	r3, [r7, #4]
	// A ist groesser B
	if (a > b)
 80019d0:	88fa      	ldrh	r2, [r7, #6]
 80019d2:	88bb      	ldrh	r3, [r7, #4]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d904      	bls.n	80019e2 <getDifference+0x22>
	{
		// B von A abziehen
		return (a - b);
 80019d8:	88fa      	ldrh	r2, [r7, #6]
 80019da:	88bb      	ldrh	r3, [r7, #4]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	b29b      	uxth	r3, r3
 80019e0:	e009      	b.n	80019f6 <getDifference+0x36>
	}
	// B ist groesser A
	else if (a < b)
 80019e2:	88fa      	ldrh	r2, [r7, #6]
 80019e4:	88bb      	ldrh	r3, [r7, #4]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d204      	bcs.n	80019f4 <getDifference+0x34>
	{
		// A von B abziehen
		return (b - a);
 80019ea:	88ba      	ldrh	r2, [r7, #4]
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	e000      	b.n	80019f6 <getDifference+0x36>
	}
	// A ist gleich B
	else
	{
		// Differenz ist 0
		return 0;
 80019f4:	2300      	movs	r3, #0
	}
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a04:	b5b0      	push	{r4, r5, r7, lr}
 8001a06:	b0ac      	sub	sp, #176	; 0xb0
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a0a:	f000 fee2 	bl	80027d2 <HAL_Init>

  /* USER CODE BEGIN Init */
	// Definiere Variablen fuer Main-Funktion
	uint16_t timerPeriod, count = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

	// Definiere Variablen fuer Main-Funktion
	uint8_t TxData[8], OutData[4], InData[3], status, task_start = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
  	CAN_FilterTypeDef sFilterConfig;

  	// Erstelle Can-Nachrichten
  	CAN_TxHeaderTypeDef TxMessage = {0x124, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8001a1a:	4bc9      	ldr	r3, [pc, #804]	; (8001d40 <main+0x33c>)
 8001a1c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001a20:	461d      	mov	r5, r3
 8001a22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a26:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a2a:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxOutput = {BMS_CAN_DIGITAL_OUT, 0, CAN_RTR_DATA, CAN_ID_STD, 4, DISABLE};
 8001a2e:	4bc5      	ldr	r3, [pc, #788]	; (8001d44 <main+0x340>)
 8001a30:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001a34:	461d      	mov	r5, r3
 8001a36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a3a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a3e:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxInput = {BMS_CAN_DIGITAL_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 3, DISABLE};
 8001a42:	4bc1      	ldr	r3, [pc, #772]	; (8001d48 <main+0x344>)
 8001a44:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001a48:	461d      	mov	r5, r3
 8001a4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a52:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxIMD = {BMS_CAN_SAFETY, 0, CAN_RTR_DATA, CAN_ID_STD, 5, DISABLE};
 8001a56:	4bbd      	ldr	r3, [pc, #756]	; (8001d4c <main+0x348>)
 8001a58:	f107 040c 	add.w	r4, r7, #12
 8001a5c:	461d      	mov	r5, r3
 8001a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a62:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a66:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a6a:	f000 f9b3 	bl	8001dd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a6e:	f7ff fdfd 	bl	800166c <MX_GPIO_Init>
  MX_CAN1_Init();
 8001a72:	f7ff fced 	bl	8001450 <MX_CAN1_Init>
  MX_SPI4_Init();
 8001a76:	f000 facf 	bl	8002018 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 8001a7a:	f000 fe0d 	bl	8002698 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001a7e:	f7ff fc0d 	bl	800129c <MX_ADC1_Init>
  MX_TIM1_Init();
 8001a82:	f000 fc0f 	bl	80022a4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001a86:	f000 fc93 	bl	80023b0 <MX_TIM4_Init>
  MX_SPI1_Init();
 8001a8a:	f000 fa87 	bl	8001f9c <MX_SPI1_Init>
  MX_CAN3_Init();
 8001a8e:	f7ff fd15 	bl	80014bc <MX_CAN3_Init>
  MX_TIM6_Init();
 8001a92:	f000 fd09 	bl	80024a8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 8001a96:	f7fe ff49 	bl	800092c <readResetSource>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe ff97 	bl	80009d0 <printResetSource>

	/* Teste serielle Schnittstelle*/
	#define TEST_STRING_UART		"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 8001aa2:	213a      	movs	r1, #58	; 0x3a
 8001aa4:	48aa      	ldr	r0, [pc, #680]	; (8001d50 <main+0x34c>)
 8001aa6:	f7fe fd4b 	bl	8000540 <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 8001aaa:	f7fe ff15 	bl	80008d8 <collectSystemInfo>
#endif

	timerPeriod = (HAL_RCC_GetPCLK2Freq() / htim1.Init.Prescaler);
 8001aae:	f002 fcbf 	bl	8004430 <HAL_RCC_GetPCLK2Freq>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	4ba7      	ldr	r3, [pc, #668]	; (8001d54 <main+0x350>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  	// Start timer
	if (HAL_TIM_Base_Start_IT(&htim1) != HAL_OK);
 8001ac0:	48a4      	ldr	r0, [pc, #656]	; (8001d54 <main+0x350>)
 8001ac2:	f003 f9f3 	bl	8004eac <HAL_TIM_Base_Start_IT>
	if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1) != HAL_OK);
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	48a2      	ldr	r0, [pc, #648]	; (8001d54 <main+0x350>)
 8001aca:	f003 fb15 	bl	80050f8 <HAL_TIM_IC_Start_IT>
	if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2) != HAL_OK);
 8001ace:	2104      	movs	r1, #4
 8001ad0:	48a0      	ldr	r0, [pc, #640]	; (8001d54 <main+0x350>)
 8001ad2:	f003 fb11 	bl	80050f8 <HAL_TIM_IC_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim6);
 8001ad6:	48a0      	ldr	r0, [pc, #640]	; (8001d58 <main+0x354>)
 8001ad8:	f003 f9e8 	bl	8004eac <HAL_TIM_Base_Start_IT>

	// Leds Testen
	testPCB_Leds();
 8001adc:	f7ff fb62 	bl	80011a4 <testPCB_Leds>
	testLeds();
 8001ae0:	f7ff fb9e 	bl	8001220 <testLeds>

	// Lese alle Eingaenge
	readall_inputs();
 8001ae4:	f7ff faaa 	bl	800103c <readall_inputs>

  	// Starte CAN Bus
  	if((status = HAL_CAN_Start(&hcan3)) != HAL_OK)
 8001ae8:	489c      	ldr	r0, [pc, #624]	; (8001d5c <main+0x358>)
 8001aea:	f001 fbab 	bl	8003244 <HAL_CAN_Start>
 8001aee:	4603      	mov	r3, r0
 8001af0:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
 8001af4:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d006      	beq.n	8001b0a <main+0x106>
  	{
  		/* Start Error */
  		hal_error(status);
 8001afc:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7fe ffd5 	bl	8000ab0 <hal_error>
  		Error_Handler();
 8001b06:	f000 fa41 	bl	8001f8c <Error_Handler>
  	}
  	uartTransmit("CAN START\n", 10);
 8001b0a:	210a      	movs	r1, #10
 8001b0c:	4894      	ldr	r0, [pc, #592]	; (8001d60 <main+0x35c>)
 8001b0e:	f7fe fd17 	bl	8000540 <uartTransmit>

  	// Aktiviere Interrupts für CAN Bus
  	if((status = HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING)) != HAL_OK)
 8001b12:	2102      	movs	r1, #2
 8001b14:	4891      	ldr	r0, [pc, #580]	; (8001d5c <main+0x358>)
 8001b16:	f001 fcb4 	bl	8003482 <HAL_CAN_ActivateNotification>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
 8001b20:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d006      	beq.n	8001b36 <main+0x132>
  	{
  		/* Notification Error */
  		hal_error(status);
 8001b28:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe ffbf 	bl	8000ab0 <hal_error>
  		Error_Handler();
 8001b32:	f000 fa2b 	bl	8001f8c <Error_Handler>
  	}
  	uartTransmit("Send Message\n", 13);
 8001b36:	210d      	movs	r1, #13
 8001b38:	488a      	ldr	r0, [pc, #552]	; (8001d64 <main+0x360>)
 8001b3a:	f7fe fd01 	bl	8000540 <uartTransmit>

  	// Filter Bank initialisieren um Daten zu empfangen
    sFilterConfig.FilterBank = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    sFilterConfig.FilterIdHigh = 0x0000;
 8001b50:	2300      	movs	r3, #0
 8001b52:	66fb      	str	r3, [r7, #108]	; 0x6c
    sFilterConfig.FilterIdLow = 0x0000;
 8001b54:	2300      	movs	r3, #0
 8001b56:	673b      	str	r3, [r7, #112]	; 0x70
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	677b      	str	r3, [r7, #116]	; 0x74
    sFilterConfig.FilterMaskIdLow = 0x0000;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	67bb      	str	r3, [r7, #120]	; 0x78
    sFilterConfig.FilterFIFOAssignment = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	67fb      	str	r3, [r7, #124]	; 0x7c
    sFilterConfig.FilterActivation = ENABLE;
 8001b64:	2301      	movs	r3, #1
 8001b66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    // Filter Bank schreiben
    if((status = HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 8001b6a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b6e:	4619      	mov	r1, r3
 8001b70:	487a      	ldr	r0, [pc, #488]	; (8001d5c <main+0x358>)
 8001b72:	f001 fa7b 	bl	800306c <HAL_CAN_ConfigFilter>
 8001b76:	4603      	mov	r3, r0
 8001b78:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
 8001b7c:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d006      	beq.n	8001b92 <main+0x18e>
    {
    	/* Filter configuration Error */
  		hal_error(status);
 8001b84:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe ff91 	bl	8000ab0 <hal_error>
  		Error_Handler();
 8001b8e:	f000 f9fd 	bl	8001f8c <Error_Handler>
    }

    // Test CAN Nachricht beschreiben
    for (uint8_t j = 0; j < 8; j++)
 8001b92:	2300      	movs	r3, #0
 8001b94:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 8001b98:	e00f      	b.n	8001bba <main+0x1b6>
    {
    	TxData[j] = (j + 1);
 8001b9a:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001b9e:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8001ba2:	3201      	adds	r2, #1
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8001baa:	440b      	add	r3, r1
 8001bac:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (uint8_t j = 0; j < 8; j++)
 8001bb0:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 8001bba:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001bbe:	2b07      	cmp	r3, #7
 8001bc0:	d9eb      	bls.n	8001b9a <main+0x196>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// Task wird jede Millisekunde ausgefuehrt
		if (millisekunden_flag_1 == 1)
 8001bc2:	4b69      	ldr	r3, [pc, #420]	; (8001d68 <main+0x364>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d10a      	bne.n	8001be2 <main+0x1de>
		{
			count++;													// Zaehler count hochzaehlen
 8001bcc:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
			millisekunden_flag_1 = 0;									// Setze Millisekunden-Flag zurueck
 8001bd6:	4b64      	ldr	r3, [pc, #400]	; (8001d68 <main+0x364>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]

			task_start = 1;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
		}
		
		if (((count % 250) == 0) && (task_start == 1))
 8001be2:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001be6:	4a61      	ldr	r2, [pc, #388]	; (8001d6c <main+0x368>)
 8001be8:	fba2 1203 	umull	r1, r2, r2, r3
 8001bec:	0912      	lsrs	r2, r2, #4
 8001bee:	21fa      	movs	r1, #250	; 0xfa
 8001bf0:	fb01 f202 	mul.w	r2, r1, r2
 8001bf4:	1a9b      	subs	r3, r3, r2
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d140      	bne.n	8001c7e <main+0x27a>
 8001bfc:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d13c      	bne.n	8001c7e <main+0x27a>
		{
			// Daten fuer Ausgaenge zusammenfuehren
			OutData[0] = system_out.systemoutput;
 8001c04:	4b5a      	ldr	r3, [pc, #360]	; (8001d70 <main+0x36c>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
			OutData[1] = highcurrent_out.high_out;
 8001c0c:	4b59      	ldr	r3, [pc, #356]	; (8001d74 <main+0x370>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			OutData[2] = leuchten_out.ledoutput;
 8001c14:	4b58      	ldr	r3, [pc, #352]	; (8001d78 <main+0x374>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
			OutData[3] = komfort_out.komfortoutput;
 8001c1c:	4b57      	ldr	r3, [pc, #348]	; (8001d7c <main+0x378>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
	
			// Sende Nachricht digitale Ausgaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxOutput, OutData, (uint32_t *)CAN_TX_MAILBOX0);
 8001c24:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001c28:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	484b      	ldr	r0, [pc, #300]	; (8001d5c <main+0x358>)
 8001c30:	f001 fb4c 	bl	80032cc <HAL_CAN_AddTxMessage>
 8001c34:	4603      	mov	r3, r0
 8001c36:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
			//hal_error(status);

			// Daten fuer Eingaenge zusammenfuehren
			InData[0] = system_in.systeminput;
 8001c3a:	4b51      	ldr	r3, [pc, #324]	; (8001d80 <main+0x37c>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			InData[1] = sdc_in.sdcinput;
 8001c42:	4b50      	ldr	r3, [pc, #320]	; (8001d84 <main+0x380>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
			InData[2] = komfort_in.komfortinput;
 8001c4a:	4b4f      	ldr	r3, [pc, #316]	; (8001d88 <main+0x384>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
	
			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxInput, InData, (uint32_t *)CAN_TX_MAILBOX0);
 8001c52:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8001c56:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	483f      	ldr	r0, [pc, #252]	; (8001d5c <main+0x358>)
 8001c5e:	f001 fb35 	bl	80032cc <HAL_CAN_AddTxMessage>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
			//hal_error(status);
	
			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX0);
 8001c68:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8001c6c:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001c70:	2301      	movs	r3, #1
 8001c72:	483a      	ldr	r0, [pc, #232]	; (8001d5c <main+0x358>)
 8001c74:	f001 fb2a 	bl	80032cc <HAL_CAN_AddTxMessage>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
			//hal_error(status);
		}

		// Task wird alle 500 Millisekunden ausgefuehrt
		if (((count % 500) == 0) && (task_start == 1))
 8001c7e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001c82:	4a3a      	ldr	r2, [pc, #232]	; (8001d6c <main+0x368>)
 8001c84:	fba2 1203 	umull	r1, r2, r2, r3
 8001c88:	0952      	lsrs	r2, r2, #5
 8001c8a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001c8e:	fb01 f202 	mul.w	r2, r1, r2
 8001c92:	1a9b      	subs	r3, r3, r2
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f040 8094 	bne.w	8001dc4 <main+0x3c0>
 8001c9c:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	f040 808f 	bne.w	8001dc4 <main+0x3c0>
		{
			if (rising != 0 && falling != 0)
 8001ca6:	4b39      	ldr	r3, [pc, #228]	; (8001d8c <main+0x388>)
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d073      	beq.n	8001d98 <main+0x394>
 8001cb0:	4b37      	ldr	r3, [pc, #220]	; (8001d90 <main+0x38c>)
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d06e      	beq.n	8001d98 <main+0x394>
			{
				int diff = getDifference(rising, falling);
 8001cba:	4b34      	ldr	r3, [pc, #208]	; (8001d8c <main+0x388>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	4a33      	ldr	r2, [pc, #204]	; (8001d90 <main+0x38c>)
 8001cc2:	8812      	ldrh	r2, [r2, #0]
 8001cc4:	b292      	uxth	r2, r2
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fe79 	bl	80019c0 <getDifference>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
				imd.DutyCycle = round((float)(diff * 100) / (float)rising);	// (width / period ) * 100
 8001cd4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cd8:	2264      	movs	r2, #100	; 0x64
 8001cda:	fb02 f303 	mul.w	r3, r2, r3
 8001cde:	ee07 3a90 	vmov	s15, r3
 8001ce2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ce6:	4b29      	ldr	r3, [pc, #164]	; (8001d8c <main+0x388>)
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	ee07 3a90 	vmov	s15, r3
 8001cf0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cf8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cfc:	eeb0 0b47 	vmov.f64	d0, d7
 8001d00:	f005 f9da 	bl	80070b8 <round>
 8001d04:	eeb0 7b40 	vmov.f64	d7, d0
 8001d08:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d0c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001d10:	793b      	ldrb	r3, [r7, #4]
 8001d12:	b2d9      	uxtb	r1, r3
 8001d14:	4a1f      	ldr	r2, [pc, #124]	; (8001d94 <main+0x390>)
 8001d16:	7893      	ldrb	r3, [r2, #2]
 8001d18:	f361 0306 	bfi	r3, r1, #0, #7
 8001d1c:	7093      	strb	r3, [r2, #2]
				imd.Frequency = timerPeriod / rising;						// timer restarts after rising edge so time between two rising edge is whatever is measured
 8001d1e:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <main+0x388>)
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8001d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d32:	b2d9      	uxtb	r1, r3
 8001d34:	4a17      	ldr	r2, [pc, #92]	; (8001d94 <main+0x390>)
 8001d36:	7853      	ldrb	r3, [r2, #1]
 8001d38:	f361 0305 	bfi	r3, r1, #0, #6
 8001d3c:	7053      	strb	r3, [r2, #1]
			{
 8001d3e:	e035      	b.n	8001dac <main+0x3a8>
 8001d40:	0800751c 	.word	0x0800751c
 8001d44:	08007534 	.word	0x08007534
 8001d48:	0800754c 	.word	0x0800754c
 8001d4c:	08007564 	.word	0x08007564
 8001d50:	080074c4 	.word	0x080074c4
 8001d54:	20000250 	.word	0x20000250
 8001d58:	20000204 	.word	0x20000204
 8001d5c:	200000a0 	.word	0x200000a0
 8001d60:	08007500 	.word	0x08007500
 8001d64:	0800750c 	.word	0x0800750c
 8001d68:	20000030 	.word	0x20000030
 8001d6c:	10624dd3 	.word	0x10624dd3
 8001d70:	20000040 	.word	0x20000040
 8001d74:	20000048 	.word	0x20000048
 8001d78:	20000050 	.word	0x20000050
 8001d7c:	20000034 	.word	0x20000034
 8001d80:	20000044 	.word	0x20000044
 8001d84:	20000054 	.word	0x20000054
 8001d88:	2000004c 	.word	0x2000004c
 8001d8c:	2000002c 	.word	0x2000002c
 8001d90:	2000002e 	.word	0x2000002e
 8001d94:	20000038 	.word	0x20000038
			}
			else
			{
				imd.DutyCycle = 0;
 8001d98:	4a0c      	ldr	r2, [pc, #48]	; (8001dcc <main+0x3c8>)
 8001d9a:	7893      	ldrb	r3, [r2, #2]
 8001d9c:	f36f 0306 	bfc	r3, #0, #7
 8001da0:	7093      	strb	r3, [r2, #2]
				imd.Frequency = 0;
 8001da2:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <main+0x3c8>)
 8001da4:	7853      	ldrb	r3, [r2, #1]
 8001da6:	f36f 0305 	bfc	r3, #0, #6
 8001daa:	7053      	strb	r3, [r2, #1]
			}

			imd_status();
 8001dac:	f7fe feb0 	bl	8000b10 <imd_status>

			HAL_CAN_AddTxMessage(&hcan3, &TxIMD, imd.status, (uint32_t *)CAN_TX_MAILBOX0);
 8001db0:	f107 010c 	add.w	r1, r7, #12
 8001db4:	2301      	movs	r3, #1
 8001db6:	4a05      	ldr	r2, [pc, #20]	; (8001dcc <main+0x3c8>)
 8001db8:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <main+0x3cc>)
 8001dba:	f001 fa87 	bl	80032cc <HAL_CAN_AddTxMessage>

			count = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
		}

		task_start = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
		if (millisekunden_flag_1 == 1)
 8001dca:	e6fa      	b.n	8001bc2 <main+0x1be>
 8001dcc:	20000038 	.word	0x20000038
 8001dd0:	200000a0 	.word	0x200000a0

08001dd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b0b8      	sub	sp, #224	; 0xe0
 8001dd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dda:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001dde:	2234      	movs	r2, #52	; 0x34
 8001de0:	2100      	movs	r1, #0
 8001de2:	4618      	mov	r0, r3
 8001de4:	f005 f91c 	bl	8007020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001de8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001df8:	f107 0308 	add.w	r3, r7, #8
 8001dfc:	2290      	movs	r2, #144	; 0x90
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4618      	mov	r0, r3
 8001e02:	f005 f90d 	bl	8007020 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e06:	4b3a      	ldr	r3, [pc, #232]	; (8001ef0 <SystemClock_Config+0x11c>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	4a39      	ldr	r2, [pc, #228]	; (8001ef0 <SystemClock_Config+0x11c>)
 8001e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e10:	6413      	str	r3, [r2, #64]	; 0x40
 8001e12:	4b37      	ldr	r3, [pc, #220]	; (8001ef0 <SystemClock_Config+0x11c>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e1e:	4b35      	ldr	r3, [pc, #212]	; (8001ef4 <SystemClock_Config+0x120>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a34      	ldr	r2, [pc, #208]	; (8001ef4 <SystemClock_Config+0x120>)
 8001e24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	4b32      	ldr	r3, [pc, #200]	; (8001ef4 <SystemClock_Config+0x120>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e36:	2301      	movs	r3, #1
 8001e38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e44:	2302      	movs	r3, #2
 8001e46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e52:	2319      	movs	r3, #25
 8001e54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001e58:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e60:	2302      	movs	r3, #2
 8001e62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001e66:	2308      	movs	r3, #8
 8001e68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e72:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e76:	4618      	mov	r0, r3
 8001e78:	f001 fe6a 	bl	8003b50 <HAL_RCC_OscConfig>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001e82:	f000 f883 	bl	8001f8c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e86:	f001 fe13 	bl	8003ab0 <HAL_PWREx_EnableOverDrive>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001e90:	f000 f87c 	bl	8001f8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e94:	230f      	movs	r3, #15
 8001e96:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ea6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001eae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001eb6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001eba:	2107      	movs	r1, #7
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f002 f8f5 	bl	80040ac <HAL_RCC_ClockConfig>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001ec8:	f000 f860 	bl	8001f8c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ed4:	f107 0308 	add.w	r3, r7, #8
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f002 fabd 	bl	8004458 <HAL_RCCEx_PeriphCLKConfig>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8001ee4:	f000 f852 	bl	8001f8c <Error_Handler>
  }
}
 8001ee8:	bf00      	nop
 8001eea:	37e0      	adds	r7, #224	; 0xe0
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40007000 	.word	0x40007000

08001ef8 <HAL_TIM_PeriodElapsedCallback>:
	can_change = 1;
}

// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ef8:	b590      	push	{r4, r7, lr}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	// Kontrolliere welcher Timer den Ueberlauf ausgeloest hat
	if (htim == &htim6)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a1d      	ldr	r2, [pc, #116]	; (8001f78 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d102      	bne.n	8001f0e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		millisekunden_flag_1 = 1;
 8001f08:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	701a      	strb	r2, [r3, #0]
	}

	// Timer IMD
	if (htim == &htim1)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a1b      	ldr	r2, [pc, #108]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d12c      	bne.n	8001f70 <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	7f1b      	ldrb	r3, [r3, #28]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d112      	bne.n	8001f44 <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			rising = calculateMovingAverage(rising, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1), 64);
 8001f1e:	4b19      	ldr	r3, [pc, #100]	; (8001f84 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	461c      	mov	r4, r3
 8001f26:	2100      	movs	r1, #0
 8001f28:	4815      	ldr	r0, [pc, #84]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001f2a:	f003 fd35 	bl	8005998 <HAL_TIM_ReadCapturedValue>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2240      	movs	r2, #64	; 0x40
 8001f32:	4619      	mov	r1, r3
 8001f34:	4620      	mov	r0, r4
 8001f36:	f7ff fd2f 	bl	8001998 <calculateMovingAverage>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001f40:	801a      	strh	r2, [r3, #0]
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
		{
			falling = calculateMovingAverage(falling, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2), 64);
		}
	}
}
 8001f42:	e015      	b.n	8001f70 <HAL_TIM_PeriodElapsedCallback+0x78>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7f1b      	ldrb	r3, [r3, #28]
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d111      	bne.n	8001f70 <HAL_TIM_PeriodElapsedCallback+0x78>
			falling = calculateMovingAverage(falling, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2), 64);
 8001f4c:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	461c      	mov	r4, r3
 8001f54:	2104      	movs	r1, #4
 8001f56:	480a      	ldr	r0, [pc, #40]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001f58:	f003 fd1e 	bl	8005998 <HAL_TIM_ReadCapturedValue>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2240      	movs	r2, #64	; 0x40
 8001f60:	4619      	mov	r1, r3
 8001f62:	4620      	mov	r0, r4
 8001f64:	f7ff fd18 	bl	8001998 <calculateMovingAverage>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001f6e:	801a      	strh	r2, [r3, #0]
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd90      	pop	{r4, r7, pc}
 8001f78:	20000204 	.word	0x20000204
 8001f7c:	20000030 	.word	0x20000030
 8001f80:	20000250 	.word	0x20000250
 8001f84:	2000002c 	.word	0x2000002c
 8001f88:	2000002e 	.word	0x2000002e

08001f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001fa0:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <MX_SPI1_Init+0x74>)
 8001fa2:	4a1c      	ldr	r2, [pc, #112]	; (8002014 <MX_SPI1_Init+0x78>)
 8001fa4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fa6:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <MX_SPI1_Init+0x74>)
 8001fa8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fae:	4b18      	ldr	r3, [pc, #96]	; (8002010 <MX_SPI1_Init+0x74>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001fb4:	4b16      	ldr	r3, [pc, #88]	; (8002010 <MX_SPI1_Init+0x74>)
 8001fb6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001fba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fbc:	4b14      	ldr	r3, [pc, #80]	; (8002010 <MX_SPI1_Init+0x74>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fc2:	4b13      	ldr	r3, [pc, #76]	; (8002010 <MX_SPI1_Init+0x74>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <MX_SPI1_Init+0x74>)
 8001fca:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001fce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fd0:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <MX_SPI1_Init+0x74>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <MX_SPI1_Init+0x74>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <MX_SPI1_Init+0x74>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <MX_SPI1_Init+0x74>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001fe8:	4b09      	ldr	r3, [pc, #36]	; (8002010 <MX_SPI1_Init+0x74>)
 8001fea:	2207      	movs	r2, #7
 8001fec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <MX_SPI1_Init+0x74>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <MX_SPI1_Init+0x74>)
 8001ff6:	2208      	movs	r2, #8
 8001ff8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ffa:	4805      	ldr	r0, [pc, #20]	; (8002010 <MX_SPI1_Init+0x74>)
 8001ffc:	f002 fe54 	bl	8004ca8 <HAL_SPI_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002006:	f7ff ffc1 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000154 	.word	0x20000154
 8002014:	40013000 	.word	0x40013000

08002018 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800201c:	4b1b      	ldr	r3, [pc, #108]	; (800208c <MX_SPI4_Init+0x74>)
 800201e:	4a1c      	ldr	r2, [pc, #112]	; (8002090 <MX_SPI4_Init+0x78>)
 8002020:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002022:	4b1a      	ldr	r3, [pc, #104]	; (800208c <MX_SPI4_Init+0x74>)
 8002024:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002028:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800202a:	4b18      	ldr	r3, [pc, #96]	; (800208c <MX_SPI4_Init+0x74>)
 800202c:	2200      	movs	r2, #0
 800202e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8002030:	4b16      	ldr	r3, [pc, #88]	; (800208c <MX_SPI4_Init+0x74>)
 8002032:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002036:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002038:	4b14      	ldr	r3, [pc, #80]	; (800208c <MX_SPI4_Init+0x74>)
 800203a:	2200      	movs	r2, #0
 800203c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800203e:	4b13      	ldr	r3, [pc, #76]	; (800208c <MX_SPI4_Init+0x74>)
 8002040:	2200      	movs	r2, #0
 8002042:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <MX_SPI4_Init+0x74>)
 8002046:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800204a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800204c:	4b0f      	ldr	r3, [pc, #60]	; (800208c <MX_SPI4_Init+0x74>)
 800204e:	2200      	movs	r2, #0
 8002050:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002052:	4b0e      	ldr	r3, [pc, #56]	; (800208c <MX_SPI4_Init+0x74>)
 8002054:	2200      	movs	r2, #0
 8002056:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <MX_SPI4_Init+0x74>)
 800205a:	2200      	movs	r2, #0
 800205c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800205e:	4b0b      	ldr	r3, [pc, #44]	; (800208c <MX_SPI4_Init+0x74>)
 8002060:	2200      	movs	r2, #0
 8002062:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002064:	4b09      	ldr	r3, [pc, #36]	; (800208c <MX_SPI4_Init+0x74>)
 8002066:	2207      	movs	r2, #7
 8002068:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800206a:	4b08      	ldr	r3, [pc, #32]	; (800208c <MX_SPI4_Init+0x74>)
 800206c:	2200      	movs	r2, #0
 800206e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <MX_SPI4_Init+0x74>)
 8002072:	2208      	movs	r2, #8
 8002074:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002076:	4805      	ldr	r0, [pc, #20]	; (800208c <MX_SPI4_Init+0x74>)
 8002078:	f002 fe16 	bl	8004ca8 <HAL_SPI_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002082:	f7ff ff83 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	200000f0 	.word	0x200000f0
 8002090:	40013400 	.word	0x40013400

08002094 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08c      	sub	sp, #48	; 0x30
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209c:	f107 031c 	add.w	r3, r7, #28
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a3d      	ldr	r2, [pc, #244]	; (80021a8 <HAL_SPI_MspInit+0x114>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d145      	bne.n	8002142 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020b6:	4b3d      	ldr	r3, [pc, #244]	; (80021ac <HAL_SPI_MspInit+0x118>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	4a3c      	ldr	r2, [pc, #240]	; (80021ac <HAL_SPI_MspInit+0x118>)
 80020bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020c0:	6453      	str	r3, [r2, #68]	; 0x44
 80020c2:	4b3a      	ldr	r3, [pc, #232]	; (80021ac <HAL_SPI_MspInit+0x118>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ca:	61bb      	str	r3, [r7, #24]
 80020cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ce:	4b37      	ldr	r3, [pc, #220]	; (80021ac <HAL_SPI_MspInit+0x118>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	4a36      	ldr	r2, [pc, #216]	; (80021ac <HAL_SPI_MspInit+0x118>)
 80020d4:	f043 0308 	orr.w	r3, r3, #8
 80020d8:	6313      	str	r3, [r2, #48]	; 0x30
 80020da:	4b34      	ldr	r3, [pc, #208]	; (80021ac <HAL_SPI_MspInit+0x118>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020e6:	4b31      	ldr	r3, [pc, #196]	; (80021ac <HAL_SPI_MspInit+0x118>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a30      	ldr	r2, [pc, #192]	; (80021ac <HAL_SPI_MspInit+0x118>)
 80020ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b2e      	ldr	r3, [pc, #184]	; (80021ac <HAL_SPI_MspInit+0x118>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 80020fe:	2380      	movs	r3, #128	; 0x80
 8002100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210a:	2303      	movs	r3, #3
 800210c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800210e:	2305      	movs	r3, #5
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002112:	f107 031c 	add.w	r3, r7, #28
 8002116:	4619      	mov	r1, r3
 8002118:	4825      	ldr	r0, [pc, #148]	; (80021b0 <HAL_SPI_MspInit+0x11c>)
 800211a:	f001 faeb 	bl	80036f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTI_MISO_Pin|POTI_CS_Pin|POTI_SCK_Pin;
 800211e:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8002122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212c:	2303      	movs	r3, #3
 800212e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002130:	2305      	movs	r3, #5
 8002132:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002134:	f107 031c 	add.w	r3, r7, #28
 8002138:	4619      	mov	r1, r3
 800213a:	481e      	ldr	r0, [pc, #120]	; (80021b4 <HAL_SPI_MspInit+0x120>)
 800213c:	f001 fada 	bl	80036f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002140:	e02d      	b.n	800219e <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI4)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a1c      	ldr	r2, [pc, #112]	; (80021b8 <HAL_SPI_MspInit+0x124>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d128      	bne.n	800219e <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800214c:	4b17      	ldr	r3, [pc, #92]	; (80021ac <HAL_SPI_MspInit+0x118>)
 800214e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002150:	4a16      	ldr	r2, [pc, #88]	; (80021ac <HAL_SPI_MspInit+0x118>)
 8002152:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002156:	6453      	str	r3, [r2, #68]	; 0x44
 8002158:	4b14      	ldr	r3, [pc, #80]	; (80021ac <HAL_SPI_MspInit+0x118>)
 800215a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <HAL_SPI_MspInit+0x118>)
 8002166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002168:	4a10      	ldr	r2, [pc, #64]	; (80021ac <HAL_SPI_MspInit+0x118>)
 800216a:	f043 0310 	orr.w	r3, r3, #16
 800216e:	6313      	str	r3, [r2, #48]	; 0x30
 8002170:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <HAL_SPI_MspInit+0x118>)
 8002172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002174:	f003 0310 	and.w	r3, r3, #16
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ISOSPI_CS_Pin|ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 800217c:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8002180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	2302      	movs	r3, #2
 8002184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218a:	2303      	movs	r3, #3
 800218c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800218e:	2305      	movs	r3, #5
 8002190:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002192:	f107 031c 	add.w	r3, r7, #28
 8002196:	4619      	mov	r1, r3
 8002198:	4808      	ldr	r0, [pc, #32]	; (80021bc <HAL_SPI_MspInit+0x128>)
 800219a:	f001 faab 	bl	80036f4 <HAL_GPIO_Init>
}
 800219e:	bf00      	nop
 80021a0:	3730      	adds	r7, #48	; 0x30
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40013000 	.word	0x40013000
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40020c00 	.word	0x40020c00
 80021b4:	40021800 	.word	0x40021800
 80021b8:	40013400 	.word	0x40013400
 80021bc:	40021000 	.word	0x40021000

080021c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80021c6:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <HAL_MspInit+0x44>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	4a0e      	ldr	r2, [pc, #56]	; (8002204 <HAL_MspInit+0x44>)
 80021cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d0:	6413      	str	r3, [r2, #64]	; 0x40
 80021d2:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <HAL_MspInit+0x44>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <HAL_MspInit+0x44>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	4a08      	ldr	r2, [pc, #32]	; (8002204 <HAL_MspInit+0x44>)
 80021e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_MspInit+0x44>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40023800 	.word	0x40023800

08002208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800221a:	e7fe      	b.n	800221a <HardFault_Handler+0x4>

0800221c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002220:	e7fe      	b.n	8002220 <MemManage_Handler+0x4>

08002222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002226:	e7fe      	b.n	8002226 <BusFault_Handler+0x4>

08002228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800222c:	e7fe      	b.n	800222c <UsageFault_Handler+0x4>

0800222e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800225c:	f000 faf6 	bl	800284c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002260:	bf00      	nop
 8002262:	bd80      	pop	{r7, pc}

08002264 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002268:	4802      	ldr	r0, [pc, #8]	; (8002274 <TIM6_DAC_IRQHandler+0x10>)
 800226a:	f003 f88f 	bl	800538c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000204 	.word	0x20000204

08002278 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800227c:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <SystemInit+0x28>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002282:	4a07      	ldr	r2, [pc, #28]	; (80022a0 <SystemInit+0x28>)
 8002284:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <SystemInit+0x28>)
 800228e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002292:	609a      	str	r2, [r3, #8]
#endif
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08c      	sub	sp, #48	; 0x30
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80022aa:	f107 031c 	add.w	r3, r7, #28
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	60da      	str	r2, [r3, #12]
 80022b8:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80022ba:	f107 030c 	add.w	r3, r7, #12
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c8:	463b      	mov	r3, r7
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022d2:	4b35      	ldr	r3, [pc, #212]	; (80023a8 <MX_TIM1_Init+0x104>)
 80022d4:	4a35      	ldr	r2, [pc, #212]	; (80023ac <MX_TIM1_Init+0x108>)
 80022d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80022d8:	4b33      	ldr	r3, [pc, #204]	; (80023a8 <MX_TIM1_Init+0x104>)
 80022da:	2200      	movs	r2, #0
 80022dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022de:	4b32      	ldr	r3, [pc, #200]	; (80023a8 <MX_TIM1_Init+0x104>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80022e4:	4b30      	ldr	r3, [pc, #192]	; (80023a8 <MX_TIM1_Init+0x104>)
 80022e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ec:	4b2e      	ldr	r3, [pc, #184]	; (80023a8 <MX_TIM1_Init+0x104>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022f2:	4b2d      	ldr	r3, [pc, #180]	; (80023a8 <MX_TIM1_Init+0x104>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022f8:	4b2b      	ldr	r3, [pc, #172]	; (80023a8 <MX_TIM1_Init+0x104>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80022fe:	482a      	ldr	r0, [pc, #168]	; (80023a8 <MX_TIM1_Init+0x104>)
 8002300:	f002 fea3 	bl	800504a <HAL_TIM_IC_Init>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800230a:	f7ff fe3f 	bl	8001f8c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800230e:	2304      	movs	r3, #4
 8002310:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002312:	2350      	movs	r3, #80	; 0x50
 8002314:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002316:	2300      	movs	r3, #0
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800231a:	2300      	movs	r3, #0
 800231c:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002322:	f107 031c 	add.w	r3, r7, #28
 8002326:	4619      	mov	r1, r3
 8002328:	481f      	ldr	r0, [pc, #124]	; (80023a8 <MX_TIM1_Init+0x104>)
 800232a:	f003 faf3 	bl	8005914 <HAL_TIM_SlaveConfigSynchro>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002334:	f7ff fe2a 	bl	8001f8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800233c:	2301      	movs	r3, #1
 800233e:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002348:	f107 030c 	add.w	r3, r7, #12
 800234c:	2200      	movs	r2, #0
 800234e:	4619      	mov	r1, r3
 8002350:	4815      	ldr	r0, [pc, #84]	; (80023a8 <MX_TIM1_Init+0x104>)
 8002352:	f003 f93a 	bl	80055ca <HAL_TIM_IC_ConfigChannel>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800235c:	f7ff fe16 	bl	8001f8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002360:	2302      	movs	r3, #2
 8002362:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002364:	2302      	movs	r3, #2
 8002366:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002368:	f107 030c 	add.w	r3, r7, #12
 800236c:	2204      	movs	r2, #4
 800236e:	4619      	mov	r1, r3
 8002370:	480d      	ldr	r0, [pc, #52]	; (80023a8 <MX_TIM1_Init+0x104>)
 8002372:	f003 f92a 	bl	80055ca <HAL_TIM_IC_ConfigChannel>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800237c:	f7ff fe06 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002380:	2300      	movs	r3, #0
 8002382:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002384:	2300      	movs	r3, #0
 8002386:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002388:	2300      	movs	r3, #0
 800238a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800238c:	463b      	mov	r3, r7
 800238e:	4619      	mov	r1, r3
 8002390:	4805      	ldr	r0, [pc, #20]	; (80023a8 <MX_TIM1_Init+0x104>)
 8002392:	f004 f8c9 	bl	8006528 <HAL_TIMEx_MasterConfigSynchronization>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800239c:	f7ff fdf6 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023a0:	bf00      	nop
 80023a2:	3730      	adds	r7, #48	; 0x30
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20000250 	.word	0x20000250
 80023ac:	40010000 	.word	0x40010000

080023b0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	; 0x28
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b6:	f107 031c 	add.w	r3, r7, #28
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	605a      	str	r2, [r3, #4]
 80023c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023c2:	463b      	mov	r3, r7
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]
 80023d0:	615a      	str	r2, [r3, #20]
 80023d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023d4:	4b32      	ldr	r3, [pc, #200]	; (80024a0 <MX_TIM4_Init+0xf0>)
 80023d6:	4a33      	ldr	r2, [pc, #204]	; (80024a4 <MX_TIM4_Init+0xf4>)
 80023d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80023da:	4b31      	ldr	r3, [pc, #196]	; (80024a0 <MX_TIM4_Init+0xf0>)
 80023dc:	2200      	movs	r2, #0
 80023de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e0:	4b2f      	ldr	r3, [pc, #188]	; (80024a0 <MX_TIM4_Init+0xf0>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80023e6:	4b2e      	ldr	r3, [pc, #184]	; (80024a0 <MX_TIM4_Init+0xf0>)
 80023e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023ec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ee:	4b2c      	ldr	r3, [pc, #176]	; (80024a0 <MX_TIM4_Init+0xf0>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f4:	4b2a      	ldr	r3, [pc, #168]	; (80024a0 <MX_TIM4_Init+0xf0>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80023fa:	4829      	ldr	r0, [pc, #164]	; (80024a0 <MX_TIM4_Init+0xf0>)
 80023fc:	f002 fdce 	bl	8004f9c <HAL_TIM_PWM_Init>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002406:	f7ff fdc1 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800240e:	2300      	movs	r3, #0
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002412:	f107 031c 	add.w	r3, r7, #28
 8002416:	4619      	mov	r1, r3
 8002418:	4821      	ldr	r0, [pc, #132]	; (80024a0 <MX_TIM4_Init+0xf0>)
 800241a:	f004 f885 	bl	8006528 <HAL_TIMEx_MasterConfigSynchronization>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002424:	f7ff fdb2 	bl	8001f8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002428:	2360      	movs	r3, #96	; 0x60
 800242a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002430:	2300      	movs	r3, #0
 8002432:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002434:	2300      	movs	r3, #0
 8002436:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002438:	463b      	mov	r3, r7
 800243a:	2200      	movs	r2, #0
 800243c:	4619      	mov	r1, r3
 800243e:	4818      	ldr	r0, [pc, #96]	; (80024a0 <MX_TIM4_Init+0xf0>)
 8002440:	f003 f958 	bl	80056f4 <HAL_TIM_PWM_ConfigChannel>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800244a:	f7ff fd9f 	bl	8001f8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800244e:	463b      	mov	r3, r7
 8002450:	2204      	movs	r2, #4
 8002452:	4619      	mov	r1, r3
 8002454:	4812      	ldr	r0, [pc, #72]	; (80024a0 <MX_TIM4_Init+0xf0>)
 8002456:	f003 f94d 	bl	80056f4 <HAL_TIM_PWM_ConfigChannel>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002460:	f7ff fd94 	bl	8001f8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002464:	463b      	mov	r3, r7
 8002466:	2208      	movs	r2, #8
 8002468:	4619      	mov	r1, r3
 800246a:	480d      	ldr	r0, [pc, #52]	; (80024a0 <MX_TIM4_Init+0xf0>)
 800246c:	f003 f942 	bl	80056f4 <HAL_TIM_PWM_ConfigChannel>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8002476:	f7ff fd89 	bl	8001f8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800247a:	463b      	mov	r3, r7
 800247c:	220c      	movs	r2, #12
 800247e:	4619      	mov	r1, r3
 8002480:	4807      	ldr	r0, [pc, #28]	; (80024a0 <MX_TIM4_Init+0xf0>)
 8002482:	f003 f937 	bl	80056f4 <HAL_TIM_PWM_ConfigChannel>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 800248c:	f7ff fd7e 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002490:	4803      	ldr	r0, [pc, #12]	; (80024a0 <MX_TIM4_Init+0xf0>)
 8002492:	f000 f8c9 	bl	8002628 <HAL_TIM_MspPostInit>

}
 8002496:	bf00      	nop
 8002498:	3728      	adds	r7, #40	; 0x28
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200001b8 	.word	0x200001b8
 80024a4:	40000800 	.word	0x40000800

080024a8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80024b8:	4b14      	ldr	r3, [pc, #80]	; (800250c <MX_TIM6_Init+0x64>)
 80024ba:	4a15      	ldr	r2, [pc, #84]	; (8002510 <MX_TIM6_Init+0x68>)
 80024bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 27;
 80024be:	4b13      	ldr	r3, [pc, #76]	; (800250c <MX_TIM6_Init+0x64>)
 80024c0:	221b      	movs	r2, #27
 80024c2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <MX_TIM6_Init+0x64>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000;
 80024ca:	4b10      	ldr	r3, [pc, #64]	; (800250c <MX_TIM6_Init+0x64>)
 80024cc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80024d0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024d2:	4b0e      	ldr	r3, [pc, #56]	; (800250c <MX_TIM6_Init+0x64>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80024d8:	480c      	ldr	r0, [pc, #48]	; (800250c <MX_TIM6_Init+0x64>)
 80024da:	f002 fc90 	bl	8004dfe <HAL_TIM_Base_Init>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80024e4:	f7ff fd52 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024e8:	2300      	movs	r3, #0
 80024ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80024f0:	1d3b      	adds	r3, r7, #4
 80024f2:	4619      	mov	r1, r3
 80024f4:	4805      	ldr	r0, [pc, #20]	; (800250c <MX_TIM6_Init+0x64>)
 80024f6:	f004 f817 	bl	8006528 <HAL_TIMEx_MasterConfigSynchronization>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002500:	f7ff fd44 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002504:	bf00      	nop
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20000204 	.word	0x20000204
 8002510:	40001000 	.word	0x40001000

08002514 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	; 0x28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251c:	f107 0314 	add.w	r3, r7, #20
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a17      	ldr	r2, [pc, #92]	; (8002590 <HAL_TIM_IC_MspInit+0x7c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d128      	bne.n	8002588 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002536:	4b17      	ldr	r3, [pc, #92]	; (8002594 <HAL_TIM_IC_MspInit+0x80>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	4a16      	ldr	r2, [pc, #88]	; (8002594 <HAL_TIM_IC_MspInit+0x80>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	6453      	str	r3, [r2, #68]	; 0x44
 8002542:	4b14      	ldr	r3, [pc, #80]	; (8002594 <HAL_TIM_IC_MspInit+0x80>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800254e:	4b11      	ldr	r3, [pc, #68]	; (8002594 <HAL_TIM_IC_MspInit+0x80>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	4a10      	ldr	r2, [pc, #64]	; (8002594 <HAL_TIM_IC_MspInit+0x80>)
 8002554:	f043 0310 	orr.w	r3, r3, #16
 8002558:	6313      	str	r3, [r2, #48]	; 0x30
 800255a:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <HAL_TIM_IC_MspInit+0x80>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f003 0310 	and.w	r3, r3, #16
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 8002566:	f44f 7300 	mov.w	r3, #512	; 0x200
 800256a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256c:	2302      	movs	r3, #2
 800256e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002574:	2300      	movs	r3, #0
 8002576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002578:	2301      	movs	r3, #1
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	4619      	mov	r1, r3
 8002582:	4805      	ldr	r0, [pc, #20]	; (8002598 <HAL_TIM_IC_MspInit+0x84>)
 8002584:	f001 f8b6 	bl	80036f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002588:	bf00      	nop
 800258a:	3728      	adds	r7, #40	; 0x28
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40010000 	.word	0x40010000
 8002594:	40023800 	.word	0x40023800
 8002598:	40021000 	.word	0x40021000

0800259c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <HAL_TIM_PWM_MspInit+0x38>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d10b      	bne.n	80025c6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80025ae:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	4a09      	ldr	r2, [pc, #36]	; (80025d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80025b4:	f043 0304 	orr.w	r3, r3, #4
 80025b8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ba:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80025c6:	bf00      	nop
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40000800 	.word	0x40000800
 80025d8:	40023800 	.word	0x40023800

080025dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a0d      	ldr	r2, [pc, #52]	; (8002620 <HAL_TIM_Base_MspInit+0x44>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d113      	bne.n	8002616 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80025ee:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <HAL_TIM_Base_MspInit+0x48>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	4a0c      	ldr	r2, [pc, #48]	; (8002624 <HAL_TIM_Base_MspInit+0x48>)
 80025f4:	f043 0310 	orr.w	r3, r3, #16
 80025f8:	6413      	str	r3, [r2, #64]	; 0x40
 80025fa:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <HAL_TIM_Base_MspInit+0x48>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f003 0310 	and.w	r3, r3, #16
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002606:	2200      	movs	r2, #0
 8002608:	2100      	movs	r1, #0
 800260a:	2036      	movs	r0, #54	; 0x36
 800260c:	f001 f83b 	bl	8003686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002610:	2036      	movs	r0, #54	; 0x36
 8002612:	f001 f854 	bl	80036be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002616:	bf00      	nop
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40001000 	.word	0x40001000
 8002624:	40023800 	.word	0x40023800

08002628 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002630:	f107 030c 	add.w	r3, r7, #12
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a11      	ldr	r2, [pc, #68]	; (800268c <HAL_TIM_MspPostInit+0x64>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d11c      	bne.n	8002684 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800264a:	4b11      	ldr	r3, [pc, #68]	; (8002690 <HAL_TIM_MspPostInit+0x68>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4a10      	ldr	r2, [pc, #64]	; (8002690 <HAL_TIM_MspPostInit+0x68>)
 8002650:	f043 0308 	orr.w	r3, r3, #8
 8002654:	6313      	str	r3, [r2, #48]	; 0x30
 8002656:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <HAL_TIM_MspPostInit+0x68>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin|PWM_HV_Charger_Pin;
 8002662:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002666:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002668:	2302      	movs	r3, #2
 800266a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002674:	2302      	movs	r3, #2
 8002676:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002678:	f107 030c 	add.w	r3, r7, #12
 800267c:	4619      	mov	r1, r3
 800267e:	4805      	ldr	r0, [pc, #20]	; (8002694 <HAL_TIM_MspPostInit+0x6c>)
 8002680:	f001 f838 	bl	80036f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002684:	bf00      	nop
 8002686:	3720      	adds	r7, #32
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40000800 	.word	0x40000800
 8002690:	40023800 	.word	0x40023800
 8002694:	40020c00 	.word	0x40020c00

08002698 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800269c:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <MX_USART2_UART_Init+0x58>)
 800269e:	4a15      	ldr	r2, [pc, #84]	; (80026f4 <MX_USART2_UART_Init+0x5c>)
 80026a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80026a2:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <MX_USART2_UART_Init+0x58>)
 80026a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80026a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026aa:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <MX_USART2_UART_Init+0x58>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026b0:	4b0f      	ldr	r3, [pc, #60]	; (80026f0 <MX_USART2_UART_Init+0x58>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026b6:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <MX_USART2_UART_Init+0x58>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026bc:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <MX_USART2_UART_Init+0x58>)
 80026be:	220c      	movs	r2, #12
 80026c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026c2:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <MX_USART2_UART_Init+0x58>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c8:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <MX_USART2_UART_Init+0x58>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026ce:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <MX_USART2_UART_Init+0x58>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <MX_USART2_UART_Init+0x58>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026da:	4805      	ldr	r0, [pc, #20]	; (80026f0 <MX_USART2_UART_Init+0x58>)
 80026dc:	f003 ffd0 	bl	8006680 <HAL_UART_Init>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80026e6:	f7ff fc51 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	2000029c 	.word	0x2000029c
 80026f4:	40004400 	.word	0x40004400

080026f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08a      	sub	sp, #40	; 0x28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002700:	f107 0314 	add.w	r3, r7, #20
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]
 800270e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a17      	ldr	r2, [pc, #92]	; (8002774 <HAL_UART_MspInit+0x7c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d127      	bne.n	800276a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800271a:	4b17      	ldr	r3, [pc, #92]	; (8002778 <HAL_UART_MspInit+0x80>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	4a16      	ldr	r2, [pc, #88]	; (8002778 <HAL_UART_MspInit+0x80>)
 8002720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002724:	6413      	str	r3, [r2, #64]	; 0x40
 8002726:	4b14      	ldr	r3, [pc, #80]	; (8002778 <HAL_UART_MspInit+0x80>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002732:	4b11      	ldr	r3, [pc, #68]	; (8002778 <HAL_UART_MspInit+0x80>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	4a10      	ldr	r2, [pc, #64]	; (8002778 <HAL_UART_MspInit+0x80>)
 8002738:	f043 0308 	orr.w	r3, r3, #8
 800273c:	6313      	str	r3, [r2, #48]	; 0x30
 800273e:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <HAL_UART_MspInit+0x80>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800274a:	2360      	movs	r3, #96	; 0x60
 800274c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274e:	2302      	movs	r3, #2
 8002750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002756:	2303      	movs	r3, #3
 8002758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800275a:	2307      	movs	r3, #7
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800275e:	f107 0314 	add.w	r3, r7, #20
 8002762:	4619      	mov	r1, r3
 8002764:	4805      	ldr	r0, [pc, #20]	; (800277c <HAL_UART_MspInit+0x84>)
 8002766:	f000 ffc5 	bl	80036f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800276a:	bf00      	nop
 800276c:	3728      	adds	r7, #40	; 0x28
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40004400 	.word	0x40004400
 8002778:	40023800 	.word	0x40023800
 800277c:	40020c00 	.word	0x40020c00

08002780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002784:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002786:	e003      	b.n	8002790 <LoopCopyDataInit>

08002788 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800278a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800278c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800278e:	3104      	adds	r1, #4

08002790 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002790:	480b      	ldr	r0, [pc, #44]	; (80027c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002792:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002794:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002796:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002798:	d3f6      	bcc.n	8002788 <CopyDataInit>
  ldr  r2, =_sbss
 800279a:	4a0b      	ldr	r2, [pc, #44]	; (80027c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800279c:	e002      	b.n	80027a4 <LoopFillZerobss>

0800279e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800279e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80027a0:	f842 3b04 	str.w	r3, [r2], #4

080027a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80027a4:	4b09      	ldr	r3, [pc, #36]	; (80027cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80027a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80027a8:	d3f9      	bcc.n	800279e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027aa:	f7ff fd65 	bl	8002278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027ae:	f004 fc13 	bl	8006fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027b2:	f7ff f927 	bl	8001a04 <main>
  bx  lr    
 80027b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027b8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80027bc:	080075cc 	.word	0x080075cc
  ldr  r0, =_sdata
 80027c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80027c4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80027c8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80027cc:	20000324 	.word	0x20000324

080027d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027d0:	e7fe      	b.n	80027d0 <ADC_IRQHandler>

080027d2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d6:	2003      	movs	r0, #3
 80027d8:	f000 ff4a 	bl	8003670 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027dc:	2000      	movs	r0, #0
 80027de:	f000 f805 	bl	80027ec <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80027e2:	f7ff fced 	bl	80021c0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027f4:	4b12      	ldr	r3, [pc, #72]	; (8002840 <HAL_InitTick+0x54>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_InitTick+0x58>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	4619      	mov	r1, r3
 80027fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002802:	fbb3 f3f1 	udiv	r3, r3, r1
 8002806:	fbb2 f3f3 	udiv	r3, r2, r3
 800280a:	4618      	mov	r0, r3
 800280c:	f000 ff65 	bl	80036da <HAL_SYSTICK_Config>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e00e      	b.n	8002838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b0f      	cmp	r3, #15
 800281e:	d80a      	bhi.n	8002836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002820:	2200      	movs	r2, #0
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	f04f 30ff 	mov.w	r0, #4294967295
 8002828:	f000 ff2d 	bl	8003686 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800282c:	4a06      	ldr	r2, [pc, #24]	; (8002848 <HAL_InitTick+0x5c>)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	e000      	b.n	8002838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	20000000 	.word	0x20000000
 8002844:	20000008 	.word	0x20000008
 8002848:	20000004 	.word	0x20000004

0800284c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <HAL_IncTick+0x20>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	461a      	mov	r2, r3
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_IncTick+0x24>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4413      	add	r3, r2
 800285c:	4a04      	ldr	r2, [pc, #16]	; (8002870 <HAL_IncTick+0x24>)
 800285e:	6013      	str	r3, [r2, #0]
}
 8002860:	bf00      	nop
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20000008 	.word	0x20000008
 8002870:	20000320 	.word	0x20000320

08002874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return uwTick;
 8002878:	4b03      	ldr	r3, [pc, #12]	; (8002888 <HAL_GetTick+0x14>)
 800287a:	681b      	ldr	r3, [r3, #0]
}
 800287c:	4618      	mov	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	20000320 	.word	0x20000320

0800288c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002894:	f7ff ffee 	bl	8002874 <HAL_GetTick>
 8002898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a4:	d005      	beq.n	80028b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028a6:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <HAL_Delay+0x44>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4413      	add	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028b2:	bf00      	nop
 80028b4:	f7ff ffde 	bl	8002874 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d8f7      	bhi.n	80028b4 <HAL_Delay+0x28>
  {
  }
}
 80028c4:	bf00      	nop
 80028c6:	bf00      	nop
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20000008 	.word	0x20000008

080028d4 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
 return __STM32F7xx_HAL_VERSION;
 80028d8:	4b02      	ldr	r3, [pc, #8]	; (80028e4 <HAL_GetHalVersion+0x10>)
}
 80028da:	4618      	mov	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	01020900 	.word	0x01020900

080028e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 80028ec:	4b03      	ldr	r3, [pc, #12]	; (80028fc <HAL_GetREVID+0x14>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	0c1b      	lsrs	r3, r3, #16
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	e0042000 	.word	0xe0042000

08002900 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8002904:	4b04      	ldr	r3, [pc, #16]	; (8002918 <HAL_GetDEVID+0x18>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800290c:	4618      	mov	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	e0042000 	.word	0xe0042000

0800291c <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <HAL_GetUIDw0+0x14>)
 8002922:	681b      	ldr	r3, [r3, #0]
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	1ff0f420 	.word	0x1ff0f420

08002934 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002938:	4b03      	ldr	r3, [pc, #12]	; (8002948 <HAL_GetUIDw1+0x14>)
 800293a:	681b      	ldr	r3, [r3, #0]
}
 800293c:	4618      	mov	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	1ff0f424 	.word	0x1ff0f424

0800294c <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002950:	4b03      	ldr	r3, [pc, #12]	; (8002960 <HAL_GetUIDw2+0x14>)
 8002952:	681b      	ldr	r3, [r3, #0]
}
 8002954:	4618      	mov	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	1ff0f428 	.word	0x1ff0f428

08002964 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e031      	b.n	80029de <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	2b00      	cmp	r3, #0
 8002980:	d109      	bne.n	8002996 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7fe fd24 	bl	80013d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f003 0310 	and.w	r3, r3, #16
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d116      	bne.n	80029d0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029a6:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <HAL_ADC_Init+0x84>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	f043 0202 	orr.w	r2, r3, #2
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f964 	bl	8002c80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f023 0303 	bic.w	r3, r3, #3
 80029c6:	f043 0201 	orr.w	r2, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40
 80029ce:	e001      	b.n	80029d4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	ffffeefd 	.word	0xffffeefd

080029ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x1c>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e12a      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x272>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b09      	cmp	r3, #9
 8002a16:	d93a      	bls.n	8002a8e <HAL_ADC_ConfigChannel+0xa2>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a20:	d035      	beq.n	8002a8e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68d9      	ldr	r1, [r3, #12]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	461a      	mov	r2, r3
 8002a30:	4613      	mov	r3, r2
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	4413      	add	r3, r2
 8002a36:	3b1e      	subs	r3, #30
 8002a38:	2207      	movs	r2, #7
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	400a      	ands	r2, r1
 8002a46:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a87      	ldr	r2, [pc, #540]	; (8002c6c <HAL_ADC_ConfigChannel+0x280>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d10a      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68d9      	ldr	r1, [r3, #12]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	061a      	lsls	r2, r3, #24
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a66:	e035      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68d9      	ldr	r1, [r3, #12]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	4618      	mov	r0, r3
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	4403      	add	r3, r0
 8002a80:	3b1e      	subs	r3, #30
 8002a82:	409a      	lsls	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a8c:	e022      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6919      	ldr	r1, [r3, #16]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	4413      	add	r3, r2
 8002aa2:	2207      	movs	r2, #7
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43da      	mvns	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	400a      	ands	r2, r1
 8002ab0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6919      	ldr	r1, [r3, #16]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	4403      	add	r3, r0
 8002aca:	409a      	lsls	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b06      	cmp	r3, #6
 8002ada:	d824      	bhi.n	8002b26 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	3b05      	subs	r3, #5
 8002aee:	221f      	movs	r2, #31
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43da      	mvns	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	400a      	ands	r2, r1
 8002afc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	3b05      	subs	r3, #5
 8002b18:	fa00 f203 	lsl.w	r2, r0, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	635a      	str	r2, [r3, #52]	; 0x34
 8002b24:	e04c      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b0c      	cmp	r3, #12
 8002b2c:	d824      	bhi.n	8002b78 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3b23      	subs	r3, #35	; 0x23
 8002b40:	221f      	movs	r2, #31
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43da      	mvns	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	400a      	ands	r2, r1
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	3b23      	subs	r3, #35	; 0x23
 8002b6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	631a      	str	r2, [r3, #48]	; 0x30
 8002b76:	e023      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	3b41      	subs	r3, #65	; 0x41
 8002b8a:	221f      	movs	r2, #31
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43da      	mvns	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	400a      	ands	r2, r1
 8002b98:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3b41      	subs	r3, #65	; 0x41
 8002bb4:	fa00 f203 	lsl.w	r2, r0, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a2a      	ldr	r2, [pc, #168]	; (8002c70 <HAL_ADC_ConfigChannel+0x284>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d10a      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x1f4>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bd2:	d105      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002bd4:	4b27      	ldr	r3, [pc, #156]	; (8002c74 <HAL_ADC_ConfigChannel+0x288>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	4a26      	ldr	r2, [pc, #152]	; (8002c74 <HAL_ADC_ConfigChannel+0x288>)
 8002bda:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002bde:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a22      	ldr	r2, [pc, #136]	; (8002c70 <HAL_ADC_ConfigChannel+0x284>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d109      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x212>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b12      	cmp	r3, #18
 8002bf0:	d105      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002bf2:	4b20      	ldr	r3, [pc, #128]	; (8002c74 <HAL_ADC_ConfigChannel+0x288>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	4a1f      	ldr	r2, [pc, #124]	; (8002c74 <HAL_ADC_ConfigChannel+0x288>)
 8002bf8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bfc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a1b      	ldr	r2, [pc, #108]	; (8002c70 <HAL_ADC_ConfigChannel+0x284>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d125      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x268>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a17      	ldr	r2, [pc, #92]	; (8002c6c <HAL_ADC_ConfigChannel+0x280>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d003      	beq.n	8002c1a <HAL_ADC_ConfigChannel+0x22e>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b11      	cmp	r3, #17
 8002c18:	d11c      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002c1a:	4b16      	ldr	r3, [pc, #88]	; (8002c74 <HAL_ADC_ConfigChannel+0x288>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	4a15      	ldr	r2, [pc, #84]	; (8002c74 <HAL_ADC_ConfigChannel+0x288>)
 8002c20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c24:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a10      	ldr	r2, [pc, #64]	; (8002c6c <HAL_ADC_ConfigChannel+0x280>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d111      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002c30:	4b11      	ldr	r3, [pc, #68]	; (8002c78 <HAL_ADC_ConfigChannel+0x28c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a11      	ldr	r2, [pc, #68]	; (8002c7c <HAL_ADC_ConfigChannel+0x290>)
 8002c36:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3a:	0c9a      	lsrs	r2, r3, #18
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002c46:	e002      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1f9      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	10000012 	.word	0x10000012
 8002c70:	40012000 	.word	0x40012000
 8002c74:	40012300 	.word	0x40012300
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	431bde83 	.word	0x431bde83

08002c80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002c88:	4b78      	ldr	r3, [pc, #480]	; (8002e6c <ADC_Init+0x1ec>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	4a77      	ldr	r2, [pc, #476]	; (8002e6c <ADC_Init+0x1ec>)
 8002c8e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002c92:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002c94:	4b75      	ldr	r3, [pc, #468]	; (8002e6c <ADC_Init+0x1ec>)
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	4973      	ldr	r1, [pc, #460]	; (8002e6c <ADC_Init+0x1ec>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6859      	ldr	r1, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	021a      	lsls	r2, r3, #8
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002cd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6859      	ldr	r1, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6899      	ldr	r1, [r3, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0e:	4a58      	ldr	r2, [pc, #352]	; (8002e70 <ADC_Init+0x1f0>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d022      	beq.n	8002d5a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6899      	ldr	r1, [r3, #8]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6899      	ldr	r1, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	e00f      	b.n	8002d7a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0202 	bic.w	r2, r2, #2
 8002d88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6899      	ldr	r1, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	005a      	lsls	r2, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d01b      	beq.n	8002de0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002db6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002dc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6859      	ldr	r1, [r3, #4]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	035a      	lsls	r2, r3, #13
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	e007      	b.n	8002df0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002dfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	051a      	lsls	r2, r3, #20
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6899      	ldr	r1, [r3, #8]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e32:	025a      	lsls	r2, r3, #9
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6899      	ldr	r1, [r3, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	029a      	lsls	r2, r3, #10
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	609a      	str	r2, [r3, #8]
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	40012300 	.word	0x40012300
 8002e70:	0f000001 	.word	0x0f000001

08002e74 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e0ed      	b.n	8003062 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d102      	bne.n	8002e98 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fe fb48 	bl	8001528 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0202 	bic.w	r2, r2, #2
 8002ea6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ea8:	f7ff fce4 	bl	8002874 <HAL_GetTick>
 8002eac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002eae:	e012      	b.n	8002ed6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002eb0:	f7ff fce0 	bl	8002874 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b0a      	cmp	r3, #10
 8002ebc:	d90b      	bls.n	8002ed6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2205      	movs	r2, #5
 8002ece:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e0c5      	b.n	8003062 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1e5      	bne.n	8002eb0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ef4:	f7ff fcbe 	bl	8002874 <HAL_GetTick>
 8002ef8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002efa:	e012      	b.n	8002f22 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002efc:	f7ff fcba 	bl	8002874 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b0a      	cmp	r3, #10
 8002f08:	d90b      	bls.n	8002f22 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2205      	movs	r2, #5
 8002f1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e09f      	b.n	8003062 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0e5      	beq.n	8002efc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	7e1b      	ldrb	r3, [r3, #24]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d108      	bne.n	8002f4a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	e007      	b.n	8002f5a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	7e5b      	ldrb	r3, [r3, #25]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d108      	bne.n	8002f74 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	e007      	b.n	8002f84 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f82:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	7e9b      	ldrb	r3, [r3, #26]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d108      	bne.n	8002f9e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0220 	orr.w	r2, r2, #32
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	e007      	b.n	8002fae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0220 	bic.w	r2, r2, #32
 8002fac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	7edb      	ldrb	r3, [r3, #27]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d108      	bne.n	8002fc8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0210 	bic.w	r2, r2, #16
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	e007      	b.n	8002fd8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0210 	orr.w	r2, r2, #16
 8002fd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	7f1b      	ldrb	r3, [r3, #28]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d108      	bne.n	8002ff2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0208 	orr.w	r2, r2, #8
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	e007      	b.n	8003002 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0208 	bic.w	r2, r2, #8
 8003000:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	7f5b      	ldrb	r3, [r3, #29]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d108      	bne.n	800301c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0204 	orr.w	r2, r2, #4
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	e007      	b.n	800302c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0204 	bic.w	r2, r2, #4
 800302a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	ea42 0103 	orr.w	r1, r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	1e5a      	subs	r2, r3, #1
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003082:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003084:	7cfb      	ldrb	r3, [r7, #19]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d003      	beq.n	8003092 <HAL_CAN_ConfigFilter+0x26>
 800308a:	7cfb      	ldrb	r3, [r7, #19]
 800308c:	2b02      	cmp	r3, #2
 800308e:	f040 80c7 	bne.w	8003220 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a69      	ldr	r2, [pc, #420]	; (800323c <HAL_CAN_ConfigFilter+0x1d0>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d001      	beq.n	80030a0 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 800309c:	4b68      	ldr	r3, [pc, #416]	; (8003240 <HAL_CAN_ConfigFilter+0x1d4>)
 800309e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80030a6:	f043 0201 	orr.w	r2, r3, #1
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	4a63      	ldr	r2, [pc, #396]	; (8003240 <HAL_CAN_ConfigFilter+0x1d4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d111      	bne.n	80030dc <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80030be:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	021b      	lsls	r3, r3, #8
 80030d4:	431a      	orrs	r2, r3
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	f003 031f 	and.w	r3, r3, #31
 80030e4:	2201      	movs	r2, #1
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	43db      	mvns	r3, r3
 80030f6:	401a      	ands	r2, r3
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d123      	bne.n	800314e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	43db      	mvns	r3, r3
 8003110:	401a      	ands	r2, r3
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003128:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	3248      	adds	r2, #72	; 0x48
 800312e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003142:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003144:	6979      	ldr	r1, [r7, #20]
 8003146:	3348      	adds	r3, #72	; 0x48
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	440b      	add	r3, r1
 800314c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d122      	bne.n	800319c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	431a      	orrs	r2, r3
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003176:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	3248      	adds	r2, #72	; 0x48
 800317c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003190:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003192:	6979      	ldr	r1, [r7, #20]
 8003194:	3348      	adds	r3, #72	; 0x48
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	440b      	add	r3, r1
 800319a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d109      	bne.n	80031b8 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	43db      	mvns	r3, r3
 80031ae:	401a      	ands	r2, r3
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80031b6:	e007      	b.n	80031c8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	431a      	orrs	r2, r3
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d109      	bne.n	80031e4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	43db      	mvns	r3, r3
 80031da:	401a      	ands	r2, r3
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80031e2:	e007      	b.n	80031f4 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	431a      	orrs	r2, r3
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d107      	bne.n	800320c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	431a      	orrs	r2, r3
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003212:	f023 0201 	bic.w	r2, r3, #1
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	e006      	b.n	800322e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
  }
}
 800322e:	4618      	mov	r0, r3
 8003230:	371c      	adds	r7, #28
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40003400 	.word	0x40003400
 8003240:	40006400 	.word	0x40006400

08003244 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b01      	cmp	r3, #1
 8003256:	d12e      	bne.n	80032b6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2202      	movs	r2, #2
 800325c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0201 	bic.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003270:	f7ff fb00 	bl	8002874 <HAL_GetTick>
 8003274:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003276:	e012      	b.n	800329e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003278:	f7ff fafc 	bl	8002874 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b0a      	cmp	r3, #10
 8003284:	d90b      	bls.n	800329e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2205      	movs	r2, #5
 8003296:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e012      	b.n	80032c4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1e5      	bne.n	8003278 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	e006      	b.n	80032c4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
  }
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b089      	sub	sp, #36	; 0x24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032e0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80032ea:	7ffb      	ldrb	r3, [r7, #31]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d003      	beq.n	80032f8 <HAL_CAN_AddTxMessage+0x2c>
 80032f0:	7ffb      	ldrb	r3, [r7, #31]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	f040 80b8 	bne.w	8003468 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10a      	bne.n	8003318 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003308:	2b00      	cmp	r3, #0
 800330a:	d105      	bne.n	8003318 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 80a0 	beq.w	8003458 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	0e1b      	lsrs	r3, r3, #24
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	2b02      	cmp	r3, #2
 8003326:	d907      	bls.n	8003338 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e09e      	b.n	8003476 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003338:	2201      	movs	r2, #1
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	409a      	lsls	r2, r3
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10d      	bne.n	8003366 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003354:	68f9      	ldr	r1, [r7, #12]
 8003356:	6809      	ldr	r1, [r1, #0]
 8003358:	431a      	orrs	r2, r3
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	3318      	adds	r3, #24
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	440b      	add	r3, r1
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	e00f      	b.n	8003386 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003370:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003376:	68f9      	ldr	r1, [r7, #12]
 8003378:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800337a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	3318      	adds	r3, #24
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	440b      	add	r3, r1
 8003384:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6819      	ldr	r1, [r3, #0]
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	3318      	adds	r3, #24
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	440b      	add	r3, r1
 8003396:	3304      	adds	r3, #4
 8003398:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	7d1b      	ldrb	r3, [r3, #20]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d111      	bne.n	80033c6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	3318      	adds	r3, #24
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	4413      	add	r3, r2
 80033ae:	3304      	adds	r3, #4
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	6811      	ldr	r1, [r2, #0]
 80033b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	3318      	adds	r3, #24
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	440b      	add	r3, r1
 80033c2:	3304      	adds	r3, #4
 80033c4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3307      	adds	r3, #7
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	061a      	lsls	r2, r3, #24
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3306      	adds	r3, #6
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	041b      	lsls	r3, r3, #16
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3305      	adds	r3, #5
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	021b      	lsls	r3, r3, #8
 80033e0:	4313      	orrs	r3, r2
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	3204      	adds	r2, #4
 80033e6:	7812      	ldrb	r2, [r2, #0]
 80033e8:	4610      	mov	r0, r2
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	6811      	ldr	r1, [r2, #0]
 80033ee:	ea43 0200 	orr.w	r2, r3, r0
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	440b      	add	r3, r1
 80033f8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80033fc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3303      	adds	r3, #3
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	061a      	lsls	r2, r3, #24
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3302      	adds	r3, #2
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	041b      	lsls	r3, r3, #16
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3301      	adds	r3, #1
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	021b      	lsls	r3, r3, #8
 8003418:	4313      	orrs	r3, r2
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	7812      	ldrb	r2, [r2, #0]
 800341e:	4610      	mov	r0, r2
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	6811      	ldr	r1, [r2, #0]
 8003424:	ea43 0200 	orr.w	r2, r3, r0
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	440b      	add	r3, r1
 800342e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003432:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	3318      	adds	r3, #24
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	4413      	add	r3, r2
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	6811      	ldr	r1, [r2, #0]
 8003446:	f043 0201 	orr.w	r2, r3, #1
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	3318      	adds	r3, #24
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	440b      	add	r3, r1
 8003452:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	e00e      	b.n	8003476 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e006      	b.n	8003476 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
  }
}
 8003476:	4618      	mov	r0, r3
 8003478:	3724      	adds	r7, #36	; 0x24
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003482:	b480      	push	{r7}
 8003484:	b085      	sub	sp, #20
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003492:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d002      	beq.n	80034a0 <HAL_CAN_ActivateNotification+0x1e>
 800349a:	7bfb      	ldrb	r3, [r7, #15]
 800349c:	2b02      	cmp	r3, #2
 800349e:	d109      	bne.n	80034b4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6959      	ldr	r1, [r3, #20]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	e006      	b.n	80034c2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
  }
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034e0:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <__NVIC_SetPriorityGrouping+0x40>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034ec:	4013      	ands	r3, r2
 80034ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80034f8:	4b06      	ldr	r3, [pc, #24]	; (8003514 <__NVIC_SetPriorityGrouping+0x44>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034fe:	4a04      	ldr	r2, [pc, #16]	; (8003510 <__NVIC_SetPriorityGrouping+0x40>)
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	60d3      	str	r3, [r2, #12]
}
 8003504:	bf00      	nop
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	e000ed00 	.word	0xe000ed00
 8003514:	05fa0000 	.word	0x05fa0000

08003518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800351c:	4b04      	ldr	r3, [pc, #16]	; (8003530 <__NVIC_GetPriorityGrouping+0x18>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	0a1b      	lsrs	r3, r3, #8
 8003522:	f003 0307 	and.w	r3, r3, #7
}
 8003526:	4618      	mov	r0, r3
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	e000ed00 	.word	0xe000ed00

08003534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800353e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003542:	2b00      	cmp	r3, #0
 8003544:	db0b      	blt.n	800355e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	f003 021f 	and.w	r2, r3, #31
 800354c:	4907      	ldr	r1, [pc, #28]	; (800356c <__NVIC_EnableIRQ+0x38>)
 800354e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	2001      	movs	r0, #1
 8003556:	fa00 f202 	lsl.w	r2, r0, r2
 800355a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	e000e100 	.word	0xe000e100

08003570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	6039      	str	r1, [r7, #0]
 800357a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800357c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003580:	2b00      	cmp	r3, #0
 8003582:	db0a      	blt.n	800359a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	b2da      	uxtb	r2, r3
 8003588:	490c      	ldr	r1, [pc, #48]	; (80035bc <__NVIC_SetPriority+0x4c>)
 800358a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358e:	0112      	lsls	r2, r2, #4
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	440b      	add	r3, r1
 8003594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003598:	e00a      	b.n	80035b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	b2da      	uxtb	r2, r3
 800359e:	4908      	ldr	r1, [pc, #32]	; (80035c0 <__NVIC_SetPriority+0x50>)
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	3b04      	subs	r3, #4
 80035a8:	0112      	lsls	r2, r2, #4
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	440b      	add	r3, r1
 80035ae:	761a      	strb	r2, [r3, #24]
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	e000e100 	.word	0xe000e100
 80035c0:	e000ed00 	.word	0xe000ed00

080035c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b089      	sub	sp, #36	; 0x24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f1c3 0307 	rsb	r3, r3, #7
 80035de:	2b04      	cmp	r3, #4
 80035e0:	bf28      	it	cs
 80035e2:	2304      	movcs	r3, #4
 80035e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	3304      	adds	r3, #4
 80035ea:	2b06      	cmp	r3, #6
 80035ec:	d902      	bls.n	80035f4 <NVIC_EncodePriority+0x30>
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	3b03      	subs	r3, #3
 80035f2:	e000      	b.n	80035f6 <NVIC_EncodePriority+0x32>
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f8:	f04f 32ff 	mov.w	r2, #4294967295
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	43da      	mvns	r2, r3
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	401a      	ands	r2, r3
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800360c:	f04f 31ff 	mov.w	r1, #4294967295
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	fa01 f303 	lsl.w	r3, r1, r3
 8003616:	43d9      	mvns	r1, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800361c:	4313      	orrs	r3, r2
         );
}
 800361e:	4618      	mov	r0, r3
 8003620:	3724      	adds	r7, #36	; 0x24
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
	...

0800362c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3b01      	subs	r3, #1
 8003638:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800363c:	d301      	bcc.n	8003642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800363e:	2301      	movs	r3, #1
 8003640:	e00f      	b.n	8003662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003642:	4a0a      	ldr	r2, [pc, #40]	; (800366c <SysTick_Config+0x40>)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3b01      	subs	r3, #1
 8003648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800364a:	210f      	movs	r1, #15
 800364c:	f04f 30ff 	mov.w	r0, #4294967295
 8003650:	f7ff ff8e 	bl	8003570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003654:	4b05      	ldr	r3, [pc, #20]	; (800366c <SysTick_Config+0x40>)
 8003656:	2200      	movs	r2, #0
 8003658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800365a:	4b04      	ldr	r3, [pc, #16]	; (800366c <SysTick_Config+0x40>)
 800365c:	2207      	movs	r2, #7
 800365e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	e000e010 	.word	0xe000e010

08003670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff ff29 	bl	80034d0 <__NVIC_SetPriorityGrouping>
}
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003686:	b580      	push	{r7, lr}
 8003688:	b086      	sub	sp, #24
 800368a:	af00      	add	r7, sp, #0
 800368c:	4603      	mov	r3, r0
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003698:	f7ff ff3e 	bl	8003518 <__NVIC_GetPriorityGrouping>
 800369c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	68b9      	ldr	r1, [r7, #8]
 80036a2:	6978      	ldr	r0, [r7, #20]
 80036a4:	f7ff ff8e 	bl	80035c4 <NVIC_EncodePriority>
 80036a8:	4602      	mov	r2, r0
 80036aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ae:	4611      	mov	r1, r2
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff ff5d 	bl	8003570 <__NVIC_SetPriority>
}
 80036b6:	bf00      	nop
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b082      	sub	sp, #8
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	4603      	mov	r3, r0
 80036c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff ff31 	bl	8003534 <__NVIC_EnableIRQ>
}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b082      	sub	sp, #8
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff ffa2 	bl	800362c <SysTick_Config>
 80036e8:	4603      	mov	r3, r0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b089      	sub	sp, #36	; 0x24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003706:	2300      	movs	r3, #0
 8003708:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800370a:	2300      	movs	r3, #0
 800370c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
 8003712:	e175      	b.n	8003a00 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003714:	2201      	movs	r2, #1
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	4013      	ands	r3, r2
 8003726:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	429a      	cmp	r2, r3
 800372e:	f040 8164 	bne.w	80039fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d00b      	beq.n	8003752 <HAL_GPIO_Init+0x5e>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d007      	beq.n	8003752 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003746:	2b11      	cmp	r3, #17
 8003748:	d003      	beq.n	8003752 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b12      	cmp	r3, #18
 8003750:	d130      	bne.n	80037b4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	2203      	movs	r2, #3
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43db      	mvns	r3, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4013      	ands	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4313      	orrs	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003788:	2201      	movs	r2, #1
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	43db      	mvns	r3, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4013      	ands	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	f003 0201 	and.w	r2, r3, #1
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	2203      	movs	r2, #3
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4013      	ands	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4313      	orrs	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d003      	beq.n	80037f4 <HAL_GPIO_Init+0x100>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2b12      	cmp	r3, #18
 80037f2:	d123      	bne.n	800383c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	08da      	lsrs	r2, r3, #3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3208      	adds	r2, #8
 80037fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	220f      	movs	r2, #15
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4013      	ands	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4313      	orrs	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	08da      	lsrs	r2, r3, #3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	3208      	adds	r2, #8
 8003836:	69b9      	ldr	r1, [r7, #24]
 8003838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	2203      	movs	r2, #3
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	43db      	mvns	r3, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4013      	ands	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 0203 	and.w	r2, r3, #3
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4313      	orrs	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 80be 	beq.w	80039fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800387e:	4b66      	ldr	r3, [pc, #408]	; (8003a18 <HAL_GPIO_Init+0x324>)
 8003880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003882:	4a65      	ldr	r2, [pc, #404]	; (8003a18 <HAL_GPIO_Init+0x324>)
 8003884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003888:	6453      	str	r3, [r2, #68]	; 0x44
 800388a:	4b63      	ldr	r3, [pc, #396]	; (8003a18 <HAL_GPIO_Init+0x324>)
 800388c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003896:	4a61      	ldr	r2, [pc, #388]	; (8003a1c <HAL_GPIO_Init+0x328>)
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	089b      	lsrs	r3, r3, #2
 800389c:	3302      	adds	r3, #2
 800389e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	220f      	movs	r2, #15
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	43db      	mvns	r3, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4013      	ands	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a58      	ldr	r2, [pc, #352]	; (8003a20 <HAL_GPIO_Init+0x32c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d037      	beq.n	8003932 <HAL_GPIO_Init+0x23e>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a57      	ldr	r2, [pc, #348]	; (8003a24 <HAL_GPIO_Init+0x330>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d031      	beq.n	800392e <HAL_GPIO_Init+0x23a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a56      	ldr	r2, [pc, #344]	; (8003a28 <HAL_GPIO_Init+0x334>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d02b      	beq.n	800392a <HAL_GPIO_Init+0x236>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a55      	ldr	r2, [pc, #340]	; (8003a2c <HAL_GPIO_Init+0x338>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d025      	beq.n	8003926 <HAL_GPIO_Init+0x232>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a54      	ldr	r2, [pc, #336]	; (8003a30 <HAL_GPIO_Init+0x33c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d01f      	beq.n	8003922 <HAL_GPIO_Init+0x22e>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a53      	ldr	r2, [pc, #332]	; (8003a34 <HAL_GPIO_Init+0x340>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d019      	beq.n	800391e <HAL_GPIO_Init+0x22a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a52      	ldr	r2, [pc, #328]	; (8003a38 <HAL_GPIO_Init+0x344>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d013      	beq.n	800391a <HAL_GPIO_Init+0x226>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a51      	ldr	r2, [pc, #324]	; (8003a3c <HAL_GPIO_Init+0x348>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00d      	beq.n	8003916 <HAL_GPIO_Init+0x222>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a50      	ldr	r2, [pc, #320]	; (8003a40 <HAL_GPIO_Init+0x34c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d007      	beq.n	8003912 <HAL_GPIO_Init+0x21e>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a4f      	ldr	r2, [pc, #316]	; (8003a44 <HAL_GPIO_Init+0x350>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d101      	bne.n	800390e <HAL_GPIO_Init+0x21a>
 800390a:	2309      	movs	r3, #9
 800390c:	e012      	b.n	8003934 <HAL_GPIO_Init+0x240>
 800390e:	230a      	movs	r3, #10
 8003910:	e010      	b.n	8003934 <HAL_GPIO_Init+0x240>
 8003912:	2308      	movs	r3, #8
 8003914:	e00e      	b.n	8003934 <HAL_GPIO_Init+0x240>
 8003916:	2307      	movs	r3, #7
 8003918:	e00c      	b.n	8003934 <HAL_GPIO_Init+0x240>
 800391a:	2306      	movs	r3, #6
 800391c:	e00a      	b.n	8003934 <HAL_GPIO_Init+0x240>
 800391e:	2305      	movs	r3, #5
 8003920:	e008      	b.n	8003934 <HAL_GPIO_Init+0x240>
 8003922:	2304      	movs	r3, #4
 8003924:	e006      	b.n	8003934 <HAL_GPIO_Init+0x240>
 8003926:	2303      	movs	r3, #3
 8003928:	e004      	b.n	8003934 <HAL_GPIO_Init+0x240>
 800392a:	2302      	movs	r3, #2
 800392c:	e002      	b.n	8003934 <HAL_GPIO_Init+0x240>
 800392e:	2301      	movs	r3, #1
 8003930:	e000      	b.n	8003934 <HAL_GPIO_Init+0x240>
 8003932:	2300      	movs	r3, #0
 8003934:	69fa      	ldr	r2, [r7, #28]
 8003936:	f002 0203 	and.w	r2, r2, #3
 800393a:	0092      	lsls	r2, r2, #2
 800393c:	4093      	lsls	r3, r2
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	4313      	orrs	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003944:	4935      	ldr	r1, [pc, #212]	; (8003a1c <HAL_GPIO_Init+0x328>)
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	089b      	lsrs	r3, r3, #2
 800394a:	3302      	adds	r3, #2
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003952:	4b3d      	ldr	r3, [pc, #244]	; (8003a48 <HAL_GPIO_Init+0x354>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	43db      	mvns	r3, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4013      	ands	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4313      	orrs	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003976:	4a34      	ldr	r2, [pc, #208]	; (8003a48 <HAL_GPIO_Init+0x354>)
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800397c:	4b32      	ldr	r3, [pc, #200]	; (8003a48 <HAL_GPIO_Init+0x354>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	43db      	mvns	r3, r3
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	4013      	ands	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	4313      	orrs	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039a0:	4a29      	ldr	r2, [pc, #164]	; (8003a48 <HAL_GPIO_Init+0x354>)
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039a6:	4b28      	ldr	r3, [pc, #160]	; (8003a48 <HAL_GPIO_Init+0x354>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	43db      	mvns	r3, r3
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	4013      	ands	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039ca:	4a1f      	ldr	r2, [pc, #124]	; (8003a48 <HAL_GPIO_Init+0x354>)
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039d0:	4b1d      	ldr	r3, [pc, #116]	; (8003a48 <HAL_GPIO_Init+0x354>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	43db      	mvns	r3, r3
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4013      	ands	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039f4:	4a14      	ldr	r2, [pc, #80]	; (8003a48 <HAL_GPIO_Init+0x354>)
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	3301      	adds	r3, #1
 80039fe:	61fb      	str	r3, [r7, #28]
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	2b0f      	cmp	r3, #15
 8003a04:	f67f ae86 	bls.w	8003714 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003a08:	bf00      	nop
 8003a0a:	bf00      	nop
 8003a0c:	3724      	adds	r7, #36	; 0x24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	40013800 	.word	0x40013800
 8003a20:	40020000 	.word	0x40020000
 8003a24:	40020400 	.word	0x40020400
 8003a28:	40020800 	.word	0x40020800
 8003a2c:	40020c00 	.word	0x40020c00
 8003a30:	40021000 	.word	0x40021000
 8003a34:	40021400 	.word	0x40021400
 8003a38:	40021800 	.word	0x40021800
 8003a3c:	40021c00 	.word	0x40021c00
 8003a40:	40022000 	.word	0x40022000
 8003a44:	40022400 	.word	0x40022400
 8003a48:	40013c00 	.word	0x40013c00

08003a4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	887b      	ldrh	r3, [r7, #2]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a64:	2301      	movs	r3, #1
 8003a66:	73fb      	strb	r3, [r7, #15]
 8003a68:	e001      	b.n	8003a6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	460b      	mov	r3, r1
 8003a86:	807b      	strh	r3, [r7, #2]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a8c:	787b      	ldrb	r3, [r7, #1]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a92:	887a      	ldrh	r2, [r7, #2]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003a98:	e003      	b.n	8003aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003a9a:	887b      	ldrh	r3, [r7, #2]
 8003a9c:	041a      	lsls	r2, r3, #16
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	619a      	str	r2, [r3, #24]
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
	...

08003ab0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003aba:	4b23      	ldr	r3, [pc, #140]	; (8003b48 <HAL_PWREx_EnableOverDrive+0x98>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	4a22      	ldr	r2, [pc, #136]	; (8003b48 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ac6:	4b20      	ldr	r3, [pc, #128]	; (8003b48 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003ad2:	4b1e      	ldr	r3, [pc, #120]	; (8003b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a1d      	ldr	r2, [pc, #116]	; (8003b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003adc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ade:	f7fe fec9 	bl	8002874 <HAL_GetTick>
 8003ae2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ae4:	e009      	b.n	8003afa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ae6:	f7fe fec5 	bl	8002874 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003af4:	d901      	bls.n	8003afa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e022      	b.n	8003b40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003afa:	4b14      	ldr	r3, [pc, #80]	; (8003b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b06:	d1ee      	bne.n	8003ae6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b08:	4b10      	ldr	r3, [pc, #64]	; (8003b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a0f      	ldr	r2, [pc, #60]	; (8003b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b12:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b14:	f7fe feae 	bl	8002874 <HAL_GetTick>
 8003b18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b1a:	e009      	b.n	8003b30 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b1c:	f7fe feaa 	bl	8002874 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b2a:	d901      	bls.n	8003b30 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e007      	b.n	8003b40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b30:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b3c:	d1ee      	bne.n	8003b1c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	40007000 	.word	0x40007000

08003b50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e29b      	b.n	800409e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 8087 	beq.w	8003c82 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b74:	4b96      	ldr	r3, [pc, #600]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 030c 	and.w	r3, r3, #12
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d00c      	beq.n	8003b9a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b80:	4b93      	ldr	r3, [pc, #588]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 030c 	and.w	r3, r3, #12
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d112      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x62>
 8003b8c:	4b90      	ldr	r3, [pc, #576]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b98:	d10b      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b9a:	4b8d      	ldr	r3, [pc, #564]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d06c      	beq.n	8003c80 <HAL_RCC_OscConfig+0x130>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d168      	bne.n	8003c80 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e275      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bba:	d106      	bne.n	8003bca <HAL_RCC_OscConfig+0x7a>
 8003bbc:	4b84      	ldr	r3, [pc, #528]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a83      	ldr	r2, [pc, #524]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc6:	6013      	str	r3, [r2, #0]
 8003bc8:	e02e      	b.n	8003c28 <HAL_RCC_OscConfig+0xd8>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10c      	bne.n	8003bec <HAL_RCC_OscConfig+0x9c>
 8003bd2:	4b7f      	ldr	r3, [pc, #508]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a7e      	ldr	r2, [pc, #504]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	4b7c      	ldr	r3, [pc, #496]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a7b      	ldr	r2, [pc, #492]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003be4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	e01d      	b.n	8003c28 <HAL_RCC_OscConfig+0xd8>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf4:	d10c      	bne.n	8003c10 <HAL_RCC_OscConfig+0xc0>
 8003bf6:	4b76      	ldr	r3, [pc, #472]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a75      	ldr	r2, [pc, #468]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	4b73      	ldr	r3, [pc, #460]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a72      	ldr	r2, [pc, #456]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	e00b      	b.n	8003c28 <HAL_RCC_OscConfig+0xd8>
 8003c10:	4b6f      	ldr	r3, [pc, #444]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a6e      	ldr	r2, [pc, #440]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1a:	6013      	str	r3, [r2, #0]
 8003c1c:	4b6c      	ldr	r3, [pc, #432]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a6b      	ldr	r2, [pc, #428]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d013      	beq.n	8003c58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c30:	f7fe fe20 	bl	8002874 <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c38:	f7fe fe1c 	bl	8002874 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b64      	cmp	r3, #100	; 0x64
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e229      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4a:	4b61      	ldr	r3, [pc, #388]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0f0      	beq.n	8003c38 <HAL_RCC_OscConfig+0xe8>
 8003c56:	e014      	b.n	8003c82 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c58:	f7fe fe0c 	bl	8002874 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c60:	f7fe fe08 	bl	8002874 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b64      	cmp	r3, #100	; 0x64
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e215      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c72:	4b57      	ldr	r3, [pc, #348]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f0      	bne.n	8003c60 <HAL_RCC_OscConfig+0x110>
 8003c7e:	e000      	b.n	8003c82 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d069      	beq.n	8003d62 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c8e:	4b50      	ldr	r3, [pc, #320]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 030c 	and.w	r3, r3, #12
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00b      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c9a:	4b4d      	ldr	r3, [pc, #308]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d11c      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x190>
 8003ca6:	4b4a      	ldr	r3, [pc, #296]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d116      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cb2:	4b47      	ldr	r3, [pc, #284]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d005      	beq.n	8003cca <HAL_RCC_OscConfig+0x17a>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d001      	beq.n	8003cca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e1e9      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cca:	4b41      	ldr	r3, [pc, #260]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	493d      	ldr	r1, [pc, #244]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cde:	e040      	b.n	8003d62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d023      	beq.n	8003d30 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ce8:	4b39      	ldr	r3, [pc, #228]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a38      	ldr	r2, [pc, #224]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003cee:	f043 0301 	orr.w	r3, r3, #1
 8003cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf4:	f7fe fdbe 	bl	8002874 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cfc:	f7fe fdba 	bl	8002874 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e1c7      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d0e:	4b30      	ldr	r3, [pc, #192]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0f0      	beq.n	8003cfc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d1a:	4b2d      	ldr	r3, [pc, #180]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	4929      	ldr	r1, [pc, #164]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	600b      	str	r3, [r1, #0]
 8003d2e:	e018      	b.n	8003d62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d30:	4b27      	ldr	r3, [pc, #156]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a26      	ldr	r2, [pc, #152]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003d36:	f023 0301 	bic.w	r3, r3, #1
 8003d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3c:	f7fe fd9a 	bl	8002874 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d44:	f7fe fd96 	bl	8002874 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e1a3      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d56:	4b1e      	ldr	r3, [pc, #120]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f0      	bne.n	8003d44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d038      	beq.n	8003de0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d019      	beq.n	8003daa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d76:	4b16      	ldr	r3, [pc, #88]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d7a:	4a15      	ldr	r2, [pc, #84]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003d7c:	f043 0301 	orr.w	r3, r3, #1
 8003d80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d82:	f7fe fd77 	bl	8002874 <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d8a:	f7fe fd73 	bl	8002874 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e180      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0f0      	beq.n	8003d8a <HAL_RCC_OscConfig+0x23a>
 8003da8:	e01a      	b.n	8003de0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003daa:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dae:	4a08      	ldr	r2, [pc, #32]	; (8003dd0 <HAL_RCC_OscConfig+0x280>)
 8003db0:	f023 0301 	bic.w	r3, r3, #1
 8003db4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db6:	f7fe fd5d 	bl	8002874 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dbc:	e00a      	b.n	8003dd4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dbe:	f7fe fd59 	bl	8002874 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d903      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e166      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
 8003dd0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd4:	4b92      	ldr	r3, [pc, #584]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1ee      	bne.n	8003dbe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 80a4 	beq.w	8003f36 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dee:	4b8c      	ldr	r3, [pc, #560]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10d      	bne.n	8003e16 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dfa:	4b89      	ldr	r3, [pc, #548]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	4a88      	ldr	r2, [pc, #544]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e04:	6413      	str	r3, [r2, #64]	; 0x40
 8003e06:	4b86      	ldr	r3, [pc, #536]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0e:	60bb      	str	r3, [r7, #8]
 8003e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e12:	2301      	movs	r3, #1
 8003e14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e16:	4b83      	ldr	r3, [pc, #524]	; (8004024 <HAL_RCC_OscConfig+0x4d4>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d118      	bne.n	8003e54 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e22:	4b80      	ldr	r3, [pc, #512]	; (8004024 <HAL_RCC_OscConfig+0x4d4>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a7f      	ldr	r2, [pc, #508]	; (8004024 <HAL_RCC_OscConfig+0x4d4>)
 8003e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e2e:	f7fe fd21 	bl	8002874 <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e36:	f7fe fd1d 	bl	8002874 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b64      	cmp	r3, #100	; 0x64
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e12a      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e48:	4b76      	ldr	r3, [pc, #472]	; (8004024 <HAL_RCC_OscConfig+0x4d4>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0f0      	beq.n	8003e36 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d106      	bne.n	8003e6a <HAL_RCC_OscConfig+0x31a>
 8003e5c:	4b70      	ldr	r3, [pc, #448]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e60:	4a6f      	ldr	r2, [pc, #444]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003e62:	f043 0301 	orr.w	r3, r3, #1
 8003e66:	6713      	str	r3, [r2, #112]	; 0x70
 8003e68:	e02d      	b.n	8003ec6 <HAL_RCC_OscConfig+0x376>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10c      	bne.n	8003e8c <HAL_RCC_OscConfig+0x33c>
 8003e72:	4b6b      	ldr	r3, [pc, #428]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e76:	4a6a      	ldr	r2, [pc, #424]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003e78:	f023 0301 	bic.w	r3, r3, #1
 8003e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7e:	4b68      	ldr	r3, [pc, #416]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e82:	4a67      	ldr	r2, [pc, #412]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003e84:	f023 0304 	bic.w	r3, r3, #4
 8003e88:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8a:	e01c      	b.n	8003ec6 <HAL_RCC_OscConfig+0x376>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2b05      	cmp	r3, #5
 8003e92:	d10c      	bne.n	8003eae <HAL_RCC_OscConfig+0x35e>
 8003e94:	4b62      	ldr	r3, [pc, #392]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e98:	4a61      	ldr	r2, [pc, #388]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003e9a:	f043 0304 	orr.w	r3, r3, #4
 8003e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea0:	4b5f      	ldr	r3, [pc, #380]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea4:	4a5e      	ldr	r2, [pc, #376]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8003eac:	e00b      	b.n	8003ec6 <HAL_RCC_OscConfig+0x376>
 8003eae:	4b5c      	ldr	r3, [pc, #368]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb2:	4a5b      	ldr	r2, [pc, #364]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003eb4:	f023 0301 	bic.w	r3, r3, #1
 8003eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eba:	4b59      	ldr	r3, [pc, #356]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	4a58      	ldr	r2, [pc, #352]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003ec0:	f023 0304 	bic.w	r3, r3, #4
 8003ec4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d015      	beq.n	8003efa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ece:	f7fe fcd1 	bl	8002874 <HAL_GetTick>
 8003ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed4:	e00a      	b.n	8003eec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ed6:	f7fe fccd 	bl	8002874 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e0d8      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eec:	4b4c      	ldr	r3, [pc, #304]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0ee      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x386>
 8003ef8:	e014      	b.n	8003f24 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efa:	f7fe fcbb 	bl	8002874 <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f00:	e00a      	b.n	8003f18 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f02:	f7fe fcb7 	bl	8002874 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e0c2      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f18:	4b41      	ldr	r3, [pc, #260]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1ee      	bne.n	8003f02 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f24:	7dfb      	ldrb	r3, [r7, #23]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d105      	bne.n	8003f36 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f2a:	4b3d      	ldr	r3, [pc, #244]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	4a3c      	ldr	r2, [pc, #240]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 80ae 	beq.w	800409c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f40:	4b37      	ldr	r3, [pc, #220]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 030c 	and.w	r3, r3, #12
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d06d      	beq.n	8004028 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d14b      	bne.n	8003fec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f54:	4b32      	ldr	r3, [pc, #200]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a31      	ldr	r2, [pc, #196]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f60:	f7fe fc88 	bl	8002874 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f68:	f7fe fc84 	bl	8002874 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e091      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7a:	4b29      	ldr	r3, [pc, #164]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f0      	bne.n	8003f68 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69da      	ldr	r2, [r3, #28]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	019b      	lsls	r3, r3, #6
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9c:	085b      	lsrs	r3, r3, #1
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	041b      	lsls	r3, r3, #16
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa8:	061b      	lsls	r3, r3, #24
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb0:	071b      	lsls	r3, r3, #28
 8003fb2:	491b      	ldr	r1, [pc, #108]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fb8:	4b19      	ldr	r3, [pc, #100]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a18      	ldr	r2, [pc, #96]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc4:	f7fe fc56 	bl	8002874 <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fcc:	f7fe fc52 	bl	8002874 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e05f      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fde:	4b10      	ldr	r3, [pc, #64]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0f0      	beq.n	8003fcc <HAL_RCC_OscConfig+0x47c>
 8003fea:	e057      	b.n	800409c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fec:	4b0c      	ldr	r3, [pc, #48]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a0b      	ldr	r2, [pc, #44]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8003ff2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff8:	f7fe fc3c 	bl	8002874 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004000:	f7fe fc38 	bl	8002874 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e045      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004012:	4b03      	ldr	r3, [pc, #12]	; (8004020 <HAL_RCC_OscConfig+0x4d0>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f0      	bne.n	8004000 <HAL_RCC_OscConfig+0x4b0>
 800401e:	e03d      	b.n	800409c <HAL_RCC_OscConfig+0x54c>
 8004020:	40023800 	.word	0x40023800
 8004024:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004028:	4b1f      	ldr	r3, [pc, #124]	; (80040a8 <HAL_RCC_OscConfig+0x558>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d030      	beq.n	8004098 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004040:	429a      	cmp	r2, r3
 8004042:	d129      	bne.n	8004098 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800404e:	429a      	cmp	r2, r3
 8004050:	d122      	bne.n	8004098 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004058:	4013      	ands	r3, r2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800405e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004060:	4293      	cmp	r3, r2
 8004062:	d119      	bne.n	8004098 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406e:	085b      	lsrs	r3, r3, #1
 8004070:	3b01      	subs	r3, #1
 8004072:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004074:	429a      	cmp	r2, r3
 8004076:	d10f      	bne.n	8004098 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004082:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004084:	429a      	cmp	r2, r3
 8004086:	d107      	bne.n	8004098 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004094:	429a      	cmp	r2, r3
 8004096:	d001      	beq.n	800409c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e000      	b.n	800409e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40023800 	.word	0x40023800

080040ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e0d0      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040c4:	4b6a      	ldr	r3, [pc, #424]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d910      	bls.n	80040f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d2:	4b67      	ldr	r3, [pc, #412]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 020f 	bic.w	r2, r3, #15
 80040da:	4965      	ldr	r1, [pc, #404]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	4313      	orrs	r3, r2
 80040e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e2:	4b63      	ldr	r3, [pc, #396]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d001      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e0b8      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d020      	beq.n	8004142 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800410c:	4b59      	ldr	r3, [pc, #356]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	4a58      	ldr	r2, [pc, #352]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004112:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004116:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004124:	4b53      	ldr	r3, [pc, #332]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	4a52      	ldr	r2, [pc, #328]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 800412a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800412e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004130:	4b50      	ldr	r3, [pc, #320]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	494d      	ldr	r1, [pc, #308]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 800413e:	4313      	orrs	r3, r2
 8004140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d040      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d107      	bne.n	8004166 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004156:	4b47      	ldr	r3, [pc, #284]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d115      	bne.n	800418e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e07f      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b02      	cmp	r3, #2
 800416c:	d107      	bne.n	800417e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416e:	4b41      	ldr	r3, [pc, #260]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d109      	bne.n	800418e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e073      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800417e:	4b3d      	ldr	r3, [pc, #244]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e06b      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800418e:	4b39      	ldr	r3, [pc, #228]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f023 0203 	bic.w	r2, r3, #3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	4936      	ldr	r1, [pc, #216]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 800419c:	4313      	orrs	r3, r2
 800419e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a0:	f7fe fb68 	bl	8002874 <HAL_GetTick>
 80041a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a6:	e00a      	b.n	80041be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a8:	f7fe fb64 	bl	8002874 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e053      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041be:	4b2d      	ldr	r3, [pc, #180]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 020c 	and.w	r2, r3, #12
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d1eb      	bne.n	80041a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041d0:	4b27      	ldr	r3, [pc, #156]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 030f 	and.w	r3, r3, #15
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d210      	bcs.n	8004200 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041de:	4b24      	ldr	r3, [pc, #144]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f023 020f 	bic.w	r2, r3, #15
 80041e6:	4922      	ldr	r1, [pc, #136]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ee:	4b20      	ldr	r3, [pc, #128]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d001      	beq.n	8004200 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e032      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	d008      	beq.n	800421e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800420c:	4b19      	ldr	r3, [pc, #100]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	4916      	ldr	r1, [pc, #88]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 800421a:	4313      	orrs	r3, r2
 800421c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	2b00      	cmp	r3, #0
 8004228:	d009      	beq.n	800423e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800422a:	4b12      	ldr	r3, [pc, #72]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	490e      	ldr	r1, [pc, #56]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 800423a:	4313      	orrs	r3, r2
 800423c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800423e:	f000 f821 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 8004242:	4602      	mov	r2, r0
 8004244:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	091b      	lsrs	r3, r3, #4
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	490a      	ldr	r1, [pc, #40]	; (8004278 <HAL_RCC_ClockConfig+0x1cc>)
 8004250:	5ccb      	ldrb	r3, [r1, r3]
 8004252:	fa22 f303 	lsr.w	r3, r2, r3
 8004256:	4a09      	ldr	r2, [pc, #36]	; (800427c <HAL_RCC_ClockConfig+0x1d0>)
 8004258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800425a:	4b09      	ldr	r3, [pc, #36]	; (8004280 <HAL_RCC_ClockConfig+0x1d4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f7fe fac4 	bl	80027ec <HAL_InitTick>

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	40023c00 	.word	0x40023c00
 8004274:	40023800 	.word	0x40023800
 8004278:	0800757c 	.word	0x0800757c
 800427c:	20000000 	.word	0x20000000
 8004280:	20000004 	.word	0x20000004

08004284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004284:	b5b0      	push	{r4, r5, r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800428a:	2100      	movs	r1, #0
 800428c:	6079      	str	r1, [r7, #4]
 800428e:	2100      	movs	r1, #0
 8004290:	60f9      	str	r1, [r7, #12]
 8004292:	2100      	movs	r1, #0
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004296:	2100      	movs	r1, #0
 8004298:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800429a:	4952      	ldr	r1, [pc, #328]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x160>)
 800429c:	6889      	ldr	r1, [r1, #8]
 800429e:	f001 010c 	and.w	r1, r1, #12
 80042a2:	2908      	cmp	r1, #8
 80042a4:	d00d      	beq.n	80042c2 <HAL_RCC_GetSysClockFreq+0x3e>
 80042a6:	2908      	cmp	r1, #8
 80042a8:	f200 8094 	bhi.w	80043d4 <HAL_RCC_GetSysClockFreq+0x150>
 80042ac:	2900      	cmp	r1, #0
 80042ae:	d002      	beq.n	80042b6 <HAL_RCC_GetSysClockFreq+0x32>
 80042b0:	2904      	cmp	r1, #4
 80042b2:	d003      	beq.n	80042bc <HAL_RCC_GetSysClockFreq+0x38>
 80042b4:	e08e      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042b6:	4b4c      	ldr	r3, [pc, #304]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x164>)
 80042b8:	60bb      	str	r3, [r7, #8]
      break;
 80042ba:	e08e      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042bc:	4b4b      	ldr	r3, [pc, #300]	; (80043ec <HAL_RCC_GetSysClockFreq+0x168>)
 80042be:	60bb      	str	r3, [r7, #8]
      break;
 80042c0:	e08b      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042c2:	4948      	ldr	r1, [pc, #288]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80042c4:	6849      	ldr	r1, [r1, #4]
 80042c6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80042ca:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80042cc:	4945      	ldr	r1, [pc, #276]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80042ce:	6849      	ldr	r1, [r1, #4]
 80042d0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80042d4:	2900      	cmp	r1, #0
 80042d6:	d024      	beq.n	8004322 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042d8:	4942      	ldr	r1, [pc, #264]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80042da:	6849      	ldr	r1, [r1, #4]
 80042dc:	0989      	lsrs	r1, r1, #6
 80042de:	4608      	mov	r0, r1
 80042e0:	f04f 0100 	mov.w	r1, #0
 80042e4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80042e8:	f04f 0500 	mov.w	r5, #0
 80042ec:	ea00 0204 	and.w	r2, r0, r4
 80042f0:	ea01 0305 	and.w	r3, r1, r5
 80042f4:	493d      	ldr	r1, [pc, #244]	; (80043ec <HAL_RCC_GetSysClockFreq+0x168>)
 80042f6:	fb01 f003 	mul.w	r0, r1, r3
 80042fa:	2100      	movs	r1, #0
 80042fc:	fb01 f102 	mul.w	r1, r1, r2
 8004300:	1844      	adds	r4, r0, r1
 8004302:	493a      	ldr	r1, [pc, #232]	; (80043ec <HAL_RCC_GetSysClockFreq+0x168>)
 8004304:	fba2 0101 	umull	r0, r1, r2, r1
 8004308:	1863      	adds	r3, r4, r1
 800430a:	4619      	mov	r1, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	461a      	mov	r2, r3
 8004310:	f04f 0300 	mov.w	r3, #0
 8004314:	f7fb ff98 	bl	8000248 <__aeabi_uldivmod>
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4613      	mov	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	e04a      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004322:	4b30      	ldr	r3, [pc, #192]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	099b      	lsrs	r3, r3, #6
 8004328:	461a      	mov	r2, r3
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004332:	f04f 0100 	mov.w	r1, #0
 8004336:	ea02 0400 	and.w	r4, r2, r0
 800433a:	ea03 0501 	and.w	r5, r3, r1
 800433e:	4620      	mov	r0, r4
 8004340:	4629      	mov	r1, r5
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	014b      	lsls	r3, r1, #5
 800434c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004350:	0142      	lsls	r2, r0, #5
 8004352:	4610      	mov	r0, r2
 8004354:	4619      	mov	r1, r3
 8004356:	1b00      	subs	r0, r0, r4
 8004358:	eb61 0105 	sbc.w	r1, r1, r5
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	018b      	lsls	r3, r1, #6
 8004366:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800436a:	0182      	lsls	r2, r0, #6
 800436c:	1a12      	subs	r2, r2, r0
 800436e:	eb63 0301 	sbc.w	r3, r3, r1
 8004372:	f04f 0000 	mov.w	r0, #0
 8004376:	f04f 0100 	mov.w	r1, #0
 800437a:	00d9      	lsls	r1, r3, #3
 800437c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004380:	00d0      	lsls	r0, r2, #3
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	1912      	adds	r2, r2, r4
 8004388:	eb45 0303 	adc.w	r3, r5, r3
 800438c:	f04f 0000 	mov.w	r0, #0
 8004390:	f04f 0100 	mov.w	r1, #0
 8004394:	0299      	lsls	r1, r3, #10
 8004396:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800439a:	0290      	lsls	r0, r2, #10
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	4610      	mov	r0, r2
 80043a2:	4619      	mov	r1, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	461a      	mov	r2, r3
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	f7fb ff4c 	bl	8000248 <__aeabi_uldivmod>
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4613      	mov	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80043b8:	4b0a      	ldr	r3, [pc, #40]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	0c1b      	lsrs	r3, r3, #16
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	3301      	adds	r3, #1
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d0:	60bb      	str	r3, [r7, #8]
      break;
 80043d2:	e002      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043d4:	4b04      	ldr	r3, [pc, #16]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x164>)
 80043d6:	60bb      	str	r3, [r7, #8]
      break;
 80043d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043da:	68bb      	ldr	r3, [r7, #8]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bdb0      	pop	{r4, r5, r7, pc}
 80043e4:	40023800 	.word	0x40023800
 80043e8:	00f42400 	.word	0x00f42400
 80043ec:	017d7840 	.word	0x017d7840

080043f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043f4:	4b03      	ldr	r3, [pc, #12]	; (8004404 <HAL_RCC_GetHCLKFreq+0x14>)
 80043f6:	681b      	ldr	r3, [r3, #0]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	20000000 	.word	0x20000000

08004408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800440c:	f7ff fff0 	bl	80043f0 <HAL_RCC_GetHCLKFreq>
 8004410:	4602      	mov	r2, r0
 8004412:	4b05      	ldr	r3, [pc, #20]	; (8004428 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	0a9b      	lsrs	r3, r3, #10
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	4903      	ldr	r1, [pc, #12]	; (800442c <HAL_RCC_GetPCLK1Freq+0x24>)
 800441e:	5ccb      	ldrb	r3, [r1, r3]
 8004420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004424:	4618      	mov	r0, r3
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40023800 	.word	0x40023800
 800442c:	0800758c 	.word	0x0800758c

08004430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004434:	f7ff ffdc 	bl	80043f0 <HAL_RCC_GetHCLKFreq>
 8004438:	4602      	mov	r2, r0
 800443a:	4b05      	ldr	r3, [pc, #20]	; (8004450 <HAL_RCC_GetPCLK2Freq+0x20>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	0b5b      	lsrs	r3, r3, #13
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	4903      	ldr	r1, [pc, #12]	; (8004454 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004446:	5ccb      	ldrb	r3, [r1, r3]
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800444c:	4618      	mov	r0, r3
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40023800 	.word	0x40023800
 8004454:	0800758c 	.word	0x0800758c

08004458 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b088      	sub	sp, #32
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004460:	2300      	movs	r3, #0
 8004462:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004464:	2300      	movs	r3, #0
 8004466:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800446c:	2300      	movs	r3, #0
 800446e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004470:	2300      	movs	r3, #0
 8004472:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d012      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004480:	4b69      	ldr	r3, [pc, #420]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	4a68      	ldr	r2, [pc, #416]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004486:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800448a:	6093      	str	r3, [r2, #8]
 800448c:	4b66      	ldr	r3, [pc, #408]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004494:	4964      	ldr	r1, [pc, #400]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004496:	4313      	orrs	r3, r2
 8004498:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80044a2:	2301      	movs	r3, #1
 80044a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d017      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044b2:	4b5d      	ldr	r3, [pc, #372]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c0:	4959      	ldr	r1, [pc, #356]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044d0:	d101      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80044d2:	2301      	movs	r3, #1
 80044d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80044de:	2301      	movs	r3, #1
 80044e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d017      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044ee:	4b4e      	ldr	r3, [pc, #312]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	494a      	ldr	r1, [pc, #296]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004508:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800450c:	d101      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800450e:	2301      	movs	r3, #1
 8004510:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800451a:	2301      	movs	r3, #1
 800451c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800452a:	2301      	movs	r3, #1
 800452c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 808b 	beq.w	8004652 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800453c:	4b3a      	ldr	r3, [pc, #232]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	4a39      	ldr	r2, [pc, #228]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004546:	6413      	str	r3, [r2, #64]	; 0x40
 8004548:	4b37      	ldr	r3, [pc, #220]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004550:	60bb      	str	r3, [r7, #8]
 8004552:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004554:	4b35      	ldr	r3, [pc, #212]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a34      	ldr	r2, [pc, #208]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800455a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800455e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004560:	f7fe f988 	bl	8002874 <HAL_GetTick>
 8004564:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004566:	e008      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004568:	f7fe f984 	bl	8002874 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b64      	cmp	r3, #100	; 0x64
 8004574:	d901      	bls.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e38f      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800457a:	4b2c      	ldr	r3, [pc, #176]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0f0      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004586:	4b28      	ldr	r3, [pc, #160]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800458e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d035      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d02e      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045a4:	4b20      	ldr	r3, [pc, #128]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045ae:	4b1e      	ldr	r3, [pc, #120]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b2:	4a1d      	ldr	r2, [pc, #116]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045ba:	4b1b      	ldr	r3, [pc, #108]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045be:	4a1a      	ldr	r2, [pc, #104]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80045c6:	4a18      	ldr	r2, [pc, #96]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045cc:	4b16      	ldr	r3, [pc, #88]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d114      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d8:	f7fe f94c 	bl	8002874 <HAL_GetTick>
 80045dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045de:	e00a      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045e0:	f7fe f948 	bl	8002874 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e351      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f6:	4b0c      	ldr	r3, [pc, #48]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0ee      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800460a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800460e:	d111      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004610:	4b05      	ldr	r3, [pc, #20]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800461c:	4b04      	ldr	r3, [pc, #16]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800461e:	400b      	ands	r3, r1
 8004620:	4901      	ldr	r1, [pc, #4]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004622:	4313      	orrs	r3, r2
 8004624:	608b      	str	r3, [r1, #8]
 8004626:	e00b      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004628:	40023800 	.word	0x40023800
 800462c:	40007000 	.word	0x40007000
 8004630:	0ffffcff 	.word	0x0ffffcff
 8004634:	4bb3      	ldr	r3, [pc, #716]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	4ab2      	ldr	r2, [pc, #712]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800463a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800463e:	6093      	str	r3, [r2, #8]
 8004640:	4bb0      	ldr	r3, [pc, #704]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004642:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800464c:	49ad      	ldr	r1, [pc, #692]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800464e:	4313      	orrs	r3, r2
 8004650:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0310 	and.w	r3, r3, #16
 800465a:	2b00      	cmp	r3, #0
 800465c:	d010      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800465e:	4ba9      	ldr	r3, [pc, #676]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004664:	4aa7      	ldr	r2, [pc, #668]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004666:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800466a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800466e:	4ba5      	ldr	r3, [pc, #660]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004670:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	49a2      	ldr	r1, [pc, #648]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00a      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800468c:	4b9d      	ldr	r3, [pc, #628]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800468e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004692:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800469a:	499a      	ldr	r1, [pc, #616]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800469c:	4313      	orrs	r3, r2
 800469e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046ae:	4b95      	ldr	r3, [pc, #596]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046bc:	4991      	ldr	r1, [pc, #580]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046d0:	4b8c      	ldr	r3, [pc, #560]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046de:	4989      	ldr	r1, [pc, #548]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046f2:	4b84      	ldr	r3, [pc, #528]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004700:	4980      	ldr	r1, [pc, #512]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004714:	4b7b      	ldr	r3, [pc, #492]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471a:	f023 0203 	bic.w	r2, r3, #3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004722:	4978      	ldr	r1, [pc, #480]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004724:	4313      	orrs	r3, r2
 8004726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004736:	4b73      	ldr	r3, [pc, #460]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473c:	f023 020c 	bic.w	r2, r3, #12
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004744:	496f      	ldr	r1, [pc, #444]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004746:	4313      	orrs	r3, r2
 8004748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004758:	4b6a      	ldr	r3, [pc, #424]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800475a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004766:	4967      	ldr	r1, [pc, #412]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800477a:	4b62      	ldr	r3, [pc, #392]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800477c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004780:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004788:	495e      	ldr	r1, [pc, #376]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00a      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800479c:	4b59      	ldr	r3, [pc, #356]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800479e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047aa:	4956      	ldr	r1, [pc, #344]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80047be:	4b51      	ldr	r3, [pc, #324]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047cc:	494d      	ldr	r1, [pc, #308]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80047e0:	4b48      	ldr	r3, [pc, #288]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ee:	4945      	ldr	r1, [pc, #276]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004802:	4b40      	ldr	r3, [pc, #256]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004808:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004810:	493c      	ldr	r1, [pc, #240]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00a      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004824:	4b37      	ldr	r3, [pc, #220]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004832:	4934      	ldr	r1, [pc, #208]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d011      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004846:	4b2f      	ldr	r3, [pc, #188]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004854:	492b      	ldr	r1, [pc, #172]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004860:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004864:	d101      	bne.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004866:	2301      	movs	r3, #1
 8004868:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0308 	and.w	r3, r3, #8
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004876:	2301      	movs	r3, #1
 8004878:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004886:	4b1f      	ldr	r3, [pc, #124]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004894:	491b      	ldr	r1, [pc, #108]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00b      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048a8:	4b16      	ldr	r3, [pc, #88]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048b8:	4912      	ldr	r1, [pc, #72]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00b      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80048cc:	4b0d      	ldr	r3, [pc, #52]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048dc:	4909      	ldr	r1, [pc, #36]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00f      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048f0:	4b04      	ldr	r3, [pc, #16]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004900:	e002      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004902:	bf00      	nop
 8004904:	40023800 	.word	0x40023800
 8004908:	4986      	ldr	r1, [pc, #536]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00b      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800491c:	4b81      	ldr	r3, [pc, #516]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800491e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004922:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800492c:	497d      	ldr	r1, [pc, #500]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800492e:	4313      	orrs	r3, r2
 8004930:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d006      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 80d6 	beq.w	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004948:	4b76      	ldr	r3, [pc, #472]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a75      	ldr	r2, [pc, #468]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800494e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004952:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004954:	f7fd ff8e 	bl	8002874 <HAL_GetTick>
 8004958:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800495a:	e008      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800495c:	f7fd ff8a 	bl	8002874 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b64      	cmp	r3, #100	; 0x64
 8004968:	d901      	bls.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e195      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800496e:	4b6d      	ldr	r3, [pc, #436]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1f0      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d021      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498a:	2b00      	cmp	r3, #0
 800498c:	d11d      	bne.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800498e:	4b65      	ldr	r3, [pc, #404]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004994:	0c1b      	lsrs	r3, r3, #16
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800499c:	4b61      	ldr	r3, [pc, #388]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800499e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049a2:	0e1b      	lsrs	r3, r3, #24
 80049a4:	f003 030f 	and.w	r3, r3, #15
 80049a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	019a      	lsls	r2, r3, #6
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	041b      	lsls	r3, r3, #16
 80049b4:	431a      	orrs	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	061b      	lsls	r3, r3, #24
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	071b      	lsls	r3, r3, #28
 80049c2:	4958      	ldr	r1, [pc, #352]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d004      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049de:	d00a      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d02e      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049f4:	d129      	bne.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049f6:	4b4b      	ldr	r3, [pc, #300]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049fc:	0c1b      	lsrs	r3, r3, #16
 80049fe:	f003 0303 	and.w	r3, r3, #3
 8004a02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a04:	4b47      	ldr	r3, [pc, #284]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a0a:	0f1b      	lsrs	r3, r3, #28
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	019a      	lsls	r2, r3, #6
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	041b      	lsls	r3, r3, #16
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	061b      	lsls	r3, r3, #24
 8004a24:	431a      	orrs	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	071b      	lsls	r3, r3, #28
 8004a2a:	493e      	ldr	r1, [pc, #248]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a32:	4b3c      	ldr	r3, [pc, #240]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a38:	f023 021f 	bic.w	r2, r3, #31
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	3b01      	subs	r3, #1
 8004a42:	4938      	ldr	r1, [pc, #224]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d01d      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a56:	4b33      	ldr	r3, [pc, #204]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a5c:	0e1b      	lsrs	r3, r3, #24
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a64:	4b2f      	ldr	r3, [pc, #188]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a6a:	0f1b      	lsrs	r3, r3, #28
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	019a      	lsls	r2, r3, #6
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	041b      	lsls	r3, r3, #16
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	061b      	lsls	r3, r3, #24
 8004a84:	431a      	orrs	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	071b      	lsls	r3, r3, #28
 8004a8a:	4926      	ldr	r1, [pc, #152]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d011      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	019a      	lsls	r2, r3, #6
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	041b      	lsls	r3, r3, #16
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	061b      	lsls	r3, r3, #24
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	071b      	lsls	r3, r3, #28
 8004aba:	491a      	ldr	r1, [pc, #104]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ac2:	4b18      	ldr	r3, [pc, #96]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a17      	ldr	r2, [pc, #92]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ac8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004acc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ace:	f7fd fed1 	bl	8002874 <HAL_GetTick>
 8004ad2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ad6:	f7fd fecd 	bl	8002874 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b64      	cmp	r3, #100	; 0x64
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e0d8      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ae8:	4b0e      	ldr	r3, [pc, #56]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0f0      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	f040 80ce 	bne.w	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004afc:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a08      	ldr	r2, [pc, #32]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b08:	f7fd feb4 	bl	8002874 <HAL_GetTick>
 8004b0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b0e:	e00b      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b10:	f7fd feb0 	bl	8002874 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b64      	cmp	r3, #100	; 0x64
 8004b1c:	d904      	bls.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e0bb      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004b22:	bf00      	nop
 8004b24:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b28:	4b5e      	ldr	r3, [pc, #376]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b34:	d0ec      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d009      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d02e      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d12a      	bne.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b5e:	4b51      	ldr	r3, [pc, #324]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b64:	0c1b      	lsrs	r3, r3, #16
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b6c:	4b4d      	ldr	r3, [pc, #308]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b72:	0f1b      	lsrs	r3, r3, #28
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	019a      	lsls	r2, r3, #6
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	041b      	lsls	r3, r3, #16
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	061b      	lsls	r3, r3, #24
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	071b      	lsls	r3, r3, #28
 8004b92:	4944      	ldr	r1, [pc, #272]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b9a:	4b42      	ldr	r3, [pc, #264]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ba0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	021b      	lsls	r3, r3, #8
 8004bac:	493d      	ldr	r1, [pc, #244]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d022      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bc8:	d11d      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bca:	4b36      	ldr	r3, [pc, #216]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd0:	0e1b      	lsrs	r3, r3, #24
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bd8:	4b32      	ldr	r3, [pc, #200]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bde:	0f1b      	lsrs	r3, r3, #28
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	019a      	lsls	r2, r3, #6
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	041b      	lsls	r3, r3, #16
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	061b      	lsls	r3, r3, #24
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	071b      	lsls	r3, r3, #28
 8004bfe:	4929      	ldr	r1, [pc, #164]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d028      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c12:	4b24      	ldr	r3, [pc, #144]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c18:	0e1b      	lsrs	r3, r3, #24
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c20:	4b20      	ldr	r3, [pc, #128]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c26:	0c1b      	lsrs	r3, r3, #16
 8004c28:	f003 0303 	and.w	r3, r3, #3
 8004c2c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	019a      	lsls	r2, r3, #6
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	041b      	lsls	r3, r3, #16
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	061b      	lsls	r3, r3, #24
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	071b      	lsls	r3, r3, #28
 8004c46:	4917      	ldr	r1, [pc, #92]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c4e:	4b15      	ldr	r3, [pc, #84]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5c:	4911      	ldr	r1, [pc, #68]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c64:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a0e      	ldr	r2, [pc, #56]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c70:	f7fd fe00 	bl	8002874 <HAL_GetTick>
 8004c74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c76:	e008      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c78:	f7fd fdfc 	bl	8002874 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b64      	cmp	r3, #100	; 0x64
 8004c84:	d901      	bls.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e007      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c8a:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c96:	d1ef      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3720      	adds	r7, #32
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40023800 	.word	0x40023800

08004ca8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e09d      	b.n	8004df6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d108      	bne.n	8004cd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cca:	d009      	beq.n	8004ce0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	61da      	str	r2, [r3, #28]
 8004cd2:	e005      	b.n	8004ce0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d106      	bne.n	8004d00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7fd f9ca 	bl	8002094 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d20:	d902      	bls.n	8004d28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d22:	2300      	movs	r3, #0
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	e002      	b.n	8004d2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d36:	d007      	beq.n	8004d48 <HAL_SPI_Init+0xa0>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d40:	d002      	beq.n	8004d48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	431a      	orrs	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d80:	431a      	orrs	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8a:	ea42 0103 	orr.w	r1, r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d92:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	0c1b      	lsrs	r3, r3, #16
 8004da4:	f003 0204 	and.w	r2, r3, #4
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	f003 0310 	and.w	r3, r3, #16
 8004db0:	431a      	orrs	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db6:	f003 0308 	and.w	r3, r3, #8
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004dc4:	ea42 0103 	orr.w	r1, r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	69da      	ldr	r2, [r3, #28]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004de4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b082      	sub	sp, #8
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e049      	b.n	8004ea4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d106      	bne.n	8004e2a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7fd fbd9 	bl	80025dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	3304      	adds	r3, #4
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	4610      	mov	r0, r2
 8004e3e:	f000 fe17 	bl	8005a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d001      	beq.n	8004ec4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e054      	b.n	8004f6e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0201 	orr.w	r2, r2, #1
 8004eda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a26      	ldr	r2, [pc, #152]	; (8004f7c <HAL_TIM_Base_Start_IT+0xd0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d022      	beq.n	8004f2c <HAL_TIM_Base_Start_IT+0x80>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eee:	d01d      	beq.n	8004f2c <HAL_TIM_Base_Start_IT+0x80>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a22      	ldr	r2, [pc, #136]	; (8004f80 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d018      	beq.n	8004f2c <HAL_TIM_Base_Start_IT+0x80>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a21      	ldr	r2, [pc, #132]	; (8004f84 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d013      	beq.n	8004f2c <HAL_TIM_Base_Start_IT+0x80>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a1f      	ldr	r2, [pc, #124]	; (8004f88 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d00e      	beq.n	8004f2c <HAL_TIM_Base_Start_IT+0x80>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a1e      	ldr	r2, [pc, #120]	; (8004f8c <HAL_TIM_Base_Start_IT+0xe0>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d009      	beq.n	8004f2c <HAL_TIM_Base_Start_IT+0x80>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a1c      	ldr	r2, [pc, #112]	; (8004f90 <HAL_TIM_Base_Start_IT+0xe4>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d004      	beq.n	8004f2c <HAL_TIM_Base_Start_IT+0x80>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a1b      	ldr	r2, [pc, #108]	; (8004f94 <HAL_TIM_Base_Start_IT+0xe8>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d115      	bne.n	8004f58 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689a      	ldr	r2, [r3, #8]
 8004f32:	4b19      	ldr	r3, [pc, #100]	; (8004f98 <HAL_TIM_Base_Start_IT+0xec>)
 8004f34:	4013      	ands	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2b06      	cmp	r3, #6
 8004f3c:	d015      	beq.n	8004f6a <HAL_TIM_Base_Start_IT+0xbe>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f44:	d011      	beq.n	8004f6a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f042 0201 	orr.w	r2, r2, #1
 8004f54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f56:	e008      	b.n	8004f6a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f042 0201 	orr.w	r2, r2, #1
 8004f66:	601a      	str	r2, [r3, #0]
 8004f68:	e000      	b.n	8004f6c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40010000 	.word	0x40010000
 8004f80:	40000400 	.word	0x40000400
 8004f84:	40000800 	.word	0x40000800
 8004f88:	40000c00 	.word	0x40000c00
 8004f8c:	40010400 	.word	0x40010400
 8004f90:	40014000 	.word	0x40014000
 8004f94:	40001800 	.word	0x40001800
 8004f98:	00010007 	.word	0x00010007

08004f9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e049      	b.n	8005042 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d106      	bne.n	8004fc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7fd faea 	bl	800259c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4610      	mov	r0, r2
 8004fdc:	f000 fd48 	bl	8005a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b082      	sub	sp, #8
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e049      	b.n	80050f0 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	d106      	bne.n	8005076 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7fd fa4f 	bl	8002514 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2202      	movs	r2, #2
 800507a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	3304      	adds	r3, #4
 8005086:	4619      	mov	r1, r3
 8005088:	4610      	mov	r0, r2
 800508a:	f000 fcf1 	bl	8005a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d104      	bne.n	8005112 <HAL_TIM_IC_Start_IT+0x1a>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800510e:	b2db      	uxtb	r3, r3
 8005110:	e023      	b.n	800515a <HAL_TIM_IC_Start_IT+0x62>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b04      	cmp	r3, #4
 8005116:	d104      	bne.n	8005122 <HAL_TIM_IC_Start_IT+0x2a>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800511e:	b2db      	uxtb	r3, r3
 8005120:	e01b      	b.n	800515a <HAL_TIM_IC_Start_IT+0x62>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b08      	cmp	r3, #8
 8005126:	d104      	bne.n	8005132 <HAL_TIM_IC_Start_IT+0x3a>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800512e:	b2db      	uxtb	r3, r3
 8005130:	e013      	b.n	800515a <HAL_TIM_IC_Start_IT+0x62>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b0c      	cmp	r3, #12
 8005136:	d104      	bne.n	8005142 <HAL_TIM_IC_Start_IT+0x4a>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800513e:	b2db      	uxtb	r3, r3
 8005140:	e00b      	b.n	800515a <HAL_TIM_IC_Start_IT+0x62>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b10      	cmp	r3, #16
 8005146:	d104      	bne.n	8005152 <HAL_TIM_IC_Start_IT+0x5a>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800514e:	b2db      	uxtb	r3, r3
 8005150:	e003      	b.n	800515a <HAL_TIM_IC_Start_IT+0x62>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005158:	b2db      	uxtb	r3, r3
 800515a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d104      	bne.n	800516c <HAL_TIM_IC_Start_IT+0x74>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005168:	b2db      	uxtb	r3, r3
 800516a:	e013      	b.n	8005194 <HAL_TIM_IC_Start_IT+0x9c>
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	2b04      	cmp	r3, #4
 8005170:	d104      	bne.n	800517c <HAL_TIM_IC_Start_IT+0x84>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005178:	b2db      	uxtb	r3, r3
 800517a:	e00b      	b.n	8005194 <HAL_TIM_IC_Start_IT+0x9c>
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	2b08      	cmp	r3, #8
 8005180:	d104      	bne.n	800518c <HAL_TIM_IC_Start_IT+0x94>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005188:	b2db      	uxtb	r3, r3
 800518a:	e003      	b.n	8005194 <HAL_TIM_IC_Start_IT+0x9c>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005192:	b2db      	uxtb	r3, r3
 8005194:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005196:	7bfb      	ldrb	r3, [r7, #15]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d102      	bne.n	80051a2 <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800519c:	7bbb      	ldrb	r3, [r7, #14]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d001      	beq.n	80051a6 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e0dd      	b.n	8005362 <HAL_TIM_IC_Start_IT+0x26a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d104      	bne.n	80051b6 <HAL_TIM_IC_Start_IT+0xbe>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051b4:	e023      	b.n	80051fe <HAL_TIM_IC_Start_IT+0x106>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b04      	cmp	r3, #4
 80051ba:	d104      	bne.n	80051c6 <HAL_TIM_IC_Start_IT+0xce>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051c4:	e01b      	b.n	80051fe <HAL_TIM_IC_Start_IT+0x106>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d104      	bne.n	80051d6 <HAL_TIM_IC_Start_IT+0xde>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051d4:	e013      	b.n	80051fe <HAL_TIM_IC_Start_IT+0x106>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b0c      	cmp	r3, #12
 80051da:	d104      	bne.n	80051e6 <HAL_TIM_IC_Start_IT+0xee>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051e4:	e00b      	b.n	80051fe <HAL_TIM_IC_Start_IT+0x106>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b10      	cmp	r3, #16
 80051ea:	d104      	bne.n	80051f6 <HAL_TIM_IC_Start_IT+0xfe>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051f4:	e003      	b.n	80051fe <HAL_TIM_IC_Start_IT+0x106>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2202      	movs	r2, #2
 80051fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d104      	bne.n	800520e <HAL_TIM_IC_Start_IT+0x116>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800520c:	e013      	b.n	8005236 <HAL_TIM_IC_Start_IT+0x13e>
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2b04      	cmp	r3, #4
 8005212:	d104      	bne.n	800521e <HAL_TIM_IC_Start_IT+0x126>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800521c:	e00b      	b.n	8005236 <HAL_TIM_IC_Start_IT+0x13e>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2b08      	cmp	r3, #8
 8005222:	d104      	bne.n	800522e <HAL_TIM_IC_Start_IT+0x136>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800522c:	e003      	b.n	8005236 <HAL_TIM_IC_Start_IT+0x13e>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2202      	movs	r2, #2
 8005232:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b0c      	cmp	r3, #12
 800523a:	d841      	bhi.n	80052c0 <HAL_TIM_IC_Start_IT+0x1c8>
 800523c:	a201      	add	r2, pc, #4	; (adr r2, 8005244 <HAL_TIM_IC_Start_IT+0x14c>)
 800523e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005242:	bf00      	nop
 8005244:	08005279 	.word	0x08005279
 8005248:	080052c1 	.word	0x080052c1
 800524c:	080052c1 	.word	0x080052c1
 8005250:	080052c1 	.word	0x080052c1
 8005254:	0800528b 	.word	0x0800528b
 8005258:	080052c1 	.word	0x080052c1
 800525c:	080052c1 	.word	0x080052c1
 8005260:	080052c1 	.word	0x080052c1
 8005264:	0800529d 	.word	0x0800529d
 8005268:	080052c1 	.word	0x080052c1
 800526c:	080052c1 	.word	0x080052c1
 8005270:	080052c1 	.word	0x080052c1
 8005274:	080052af 	.word	0x080052af
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68da      	ldr	r2, [r3, #12]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0202 	orr.w	r2, r2, #2
 8005286:	60da      	str	r2, [r3, #12]
      break;
 8005288:	e01b      	b.n	80052c2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f042 0204 	orr.w	r2, r2, #4
 8005298:	60da      	str	r2, [r3, #12]
      break;
 800529a:	e012      	b.n	80052c2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0208 	orr.w	r2, r2, #8
 80052aa:	60da      	str	r2, [r3, #12]
      break;
 80052ac:	e009      	b.n	80052c2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68da      	ldr	r2, [r3, #12]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 0210 	orr.w	r2, r2, #16
 80052bc:	60da      	str	r2, [r3, #12]
      break;
 80052be:	e000      	b.n	80052c2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 80052c0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2201      	movs	r2, #1
 80052c8:	6839      	ldr	r1, [r7, #0]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f001 f907 	bl	80064de <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a25      	ldr	r2, [pc, #148]	; (800536c <HAL_TIM_IC_Start_IT+0x274>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d022      	beq.n	8005320 <HAL_TIM_IC_Start_IT+0x228>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e2:	d01d      	beq.n	8005320 <HAL_TIM_IC_Start_IT+0x228>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a21      	ldr	r2, [pc, #132]	; (8005370 <HAL_TIM_IC_Start_IT+0x278>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d018      	beq.n	8005320 <HAL_TIM_IC_Start_IT+0x228>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a20      	ldr	r2, [pc, #128]	; (8005374 <HAL_TIM_IC_Start_IT+0x27c>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d013      	beq.n	8005320 <HAL_TIM_IC_Start_IT+0x228>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a1e      	ldr	r2, [pc, #120]	; (8005378 <HAL_TIM_IC_Start_IT+0x280>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d00e      	beq.n	8005320 <HAL_TIM_IC_Start_IT+0x228>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a1d      	ldr	r2, [pc, #116]	; (800537c <HAL_TIM_IC_Start_IT+0x284>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d009      	beq.n	8005320 <HAL_TIM_IC_Start_IT+0x228>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a1b      	ldr	r2, [pc, #108]	; (8005380 <HAL_TIM_IC_Start_IT+0x288>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d004      	beq.n	8005320 <HAL_TIM_IC_Start_IT+0x228>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a1a      	ldr	r2, [pc, #104]	; (8005384 <HAL_TIM_IC_Start_IT+0x28c>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d115      	bne.n	800534c <HAL_TIM_IC_Start_IT+0x254>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689a      	ldr	r2, [r3, #8]
 8005326:	4b18      	ldr	r3, [pc, #96]	; (8005388 <HAL_TIM_IC_Start_IT+0x290>)
 8005328:	4013      	ands	r3, r2
 800532a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	2b06      	cmp	r3, #6
 8005330:	d015      	beq.n	800535e <HAL_TIM_IC_Start_IT+0x266>
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005338:	d011      	beq.n	800535e <HAL_TIM_IC_Start_IT+0x266>
    {
      __HAL_TIM_ENABLE(htim);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f042 0201 	orr.w	r2, r2, #1
 8005348:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800534a:	e008      	b.n	800535e <HAL_TIM_IC_Start_IT+0x266>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f042 0201 	orr.w	r2, r2, #1
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	e000      	b.n	8005360 <HAL_TIM_IC_Start_IT+0x268>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800535e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	40010000 	.word	0x40010000
 8005370:	40000400 	.word	0x40000400
 8005374:	40000800 	.word	0x40000800
 8005378:	40000c00 	.word	0x40000c00
 800537c:	40010400 	.word	0x40010400
 8005380:	40014000 	.word	0x40014000
 8005384:	40001800 	.word	0x40001800
 8005388:	00010007 	.word	0x00010007

0800538c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d122      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d11b      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f06f 0202 	mvn.w	r2, #2
 80053b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fb30 	bl	8005a34 <HAL_TIM_IC_CaptureCallback>
 80053d4:	e005      	b.n	80053e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fb22 	bl	8005a20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 fb33 	bl	8005a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	f003 0304 	and.w	r3, r3, #4
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	d122      	bne.n	800543c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b04      	cmp	r3, #4
 8005402:	d11b      	bne.n	800543c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f06f 0204 	mvn.w	r2, #4
 800540c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2202      	movs	r2, #2
 8005412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 fb06 	bl	8005a34 <HAL_TIM_IC_CaptureCallback>
 8005428:	e005      	b.n	8005436 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 faf8 	bl	8005a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 fb09 	bl	8005a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	f003 0308 	and.w	r3, r3, #8
 8005446:	2b08      	cmp	r3, #8
 8005448:	d122      	bne.n	8005490 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f003 0308 	and.w	r3, r3, #8
 8005454:	2b08      	cmp	r3, #8
 8005456:	d11b      	bne.n	8005490 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f06f 0208 	mvn.w	r2, #8
 8005460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2204      	movs	r2, #4
 8005466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	69db      	ldr	r3, [r3, #28]
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 fadc 	bl	8005a34 <HAL_TIM_IC_CaptureCallback>
 800547c:	e005      	b.n	800548a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 face 	bl	8005a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 fadf 	bl	8005a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f003 0310 	and.w	r3, r3, #16
 800549a:	2b10      	cmp	r3, #16
 800549c:	d122      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f003 0310 	and.w	r3, r3, #16
 80054a8:	2b10      	cmp	r3, #16
 80054aa:	d11b      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f06f 0210 	mvn.w	r2, #16
 80054b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2208      	movs	r2, #8
 80054ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fab2 	bl	8005a34 <HAL_TIM_IC_CaptureCallback>
 80054d0:	e005      	b.n	80054de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 faa4 	bl	8005a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fab5 	bl	8005a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d10e      	bne.n	8005510 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d107      	bne.n	8005510 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f06f 0201 	mvn.w	r2, #1
 8005508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7fc fcf4 	bl	8001ef8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800551a:	2b80      	cmp	r3, #128	; 0x80
 800551c:	d10e      	bne.n	800553c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005528:	2b80      	cmp	r3, #128	; 0x80
 800552a:	d107      	bne.n	800553c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f001 f88e 	bl	8006658 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800554a:	d10e      	bne.n	800556a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005556:	2b80      	cmp	r3, #128	; 0x80
 8005558:	d107      	bne.n	800556a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f001 f881 	bl	800666c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005574:	2b40      	cmp	r3, #64	; 0x40
 8005576:	d10e      	bne.n	8005596 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005582:	2b40      	cmp	r3, #64	; 0x40
 8005584:	d107      	bne.n	8005596 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800558e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 fa63 	bl	8005a5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	f003 0320 	and.w	r3, r3, #32
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	d10e      	bne.n	80055c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f003 0320 	and.w	r3, r3, #32
 80055ae:	2b20      	cmp	r3, #32
 80055b0:	d107      	bne.n	80055c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f06f 0220 	mvn.w	r2, #32
 80055ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f001 f841 	bl	8006644 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055c2:	bf00      	nop
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b084      	sub	sp, #16
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	60f8      	str	r0, [r7, #12]
 80055d2:	60b9      	str	r1, [r7, #8]
 80055d4:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <HAL_TIM_IC_ConfigChannel+0x1a>
 80055e0:	2302      	movs	r3, #2
 80055e2:	e082      	b.n	80056ea <HAL_TIM_IC_ConfigChannel+0x120>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d11b      	bne.n	800562a <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6818      	ldr	r0, [r3, #0]
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	6819      	ldr	r1, [r3, #0]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f000 fdc3 	bl	800618c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	699a      	ldr	r2, [r3, #24]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 020c 	bic.w	r2, r2, #12
 8005614:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6999      	ldr	r1, [r3, #24]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	619a      	str	r2, [r3, #24]
 8005628:	e05a      	b.n	80056e0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b04      	cmp	r3, #4
 800562e:	d11c      	bne.n	800566a <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6818      	ldr	r0, [r3, #0]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	6819      	ldr	r1, [r3, #0]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f000 fe47 	bl	80062d2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699a      	ldr	r2, [r3, #24]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005652:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6999      	ldr	r1, [r3, #24]
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	021a      	lsls	r2, r3, #8
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	619a      	str	r2, [r3, #24]
 8005668:	e03a      	b.n	80056e0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b08      	cmp	r3, #8
 800566e:	d11b      	bne.n	80056a8 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6818      	ldr	r0, [r3, #0]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	6819      	ldr	r1, [r3, #0]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f000 fe94 	bl	80063ac <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	69da      	ldr	r2, [r3, #28]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 020c 	bic.w	r2, r2, #12
 8005692:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	69d9      	ldr	r1, [r3, #28]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	689a      	ldr	r2, [r3, #8]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	61da      	str	r2, [r3, #28]
 80056a6:	e01b      	b.n	80056e0 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6818      	ldr	r0, [r3, #0]
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	6819      	ldr	r1, [r3, #0]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f000 feb4 	bl	8006424 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	69da      	ldr	r2, [r3, #28]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80056ca:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	69d9      	ldr	r1, [r3, #28]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	021a      	lsls	r2, r3, #8
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
	...

080056f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005706:	2b01      	cmp	r3, #1
 8005708:	d101      	bne.n	800570e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800570a:	2302      	movs	r3, #2
 800570c:	e0fd      	b.n	800590a <HAL_TIM_PWM_ConfigChannel+0x216>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b14      	cmp	r3, #20
 800571a:	f200 80f0 	bhi.w	80058fe <HAL_TIM_PWM_ConfigChannel+0x20a>
 800571e:	a201      	add	r2, pc, #4	; (adr r2, 8005724 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005724:	08005779 	.word	0x08005779
 8005728:	080058ff 	.word	0x080058ff
 800572c:	080058ff 	.word	0x080058ff
 8005730:	080058ff 	.word	0x080058ff
 8005734:	080057b9 	.word	0x080057b9
 8005738:	080058ff 	.word	0x080058ff
 800573c:	080058ff 	.word	0x080058ff
 8005740:	080058ff 	.word	0x080058ff
 8005744:	080057fb 	.word	0x080057fb
 8005748:	080058ff 	.word	0x080058ff
 800574c:	080058ff 	.word	0x080058ff
 8005750:	080058ff 	.word	0x080058ff
 8005754:	0800583b 	.word	0x0800583b
 8005758:	080058ff 	.word	0x080058ff
 800575c:	080058ff 	.word	0x080058ff
 8005760:	080058ff 	.word	0x080058ff
 8005764:	0800587d 	.word	0x0800587d
 8005768:	080058ff 	.word	0x080058ff
 800576c:	080058ff 	.word	0x080058ff
 8005770:	080058ff 	.word	0x080058ff
 8005774:	080058bd 	.word	0x080058bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68b9      	ldr	r1, [r7, #8]
 800577e:	4618      	mov	r0, r3
 8005780:	f000 fa16 	bl	8005bb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699a      	ldr	r2, [r3, #24]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0208 	orr.w	r2, r2, #8
 8005792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	699a      	ldr	r2, [r3, #24]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0204 	bic.w	r2, r2, #4
 80057a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6999      	ldr	r1, [r3, #24]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	691a      	ldr	r2, [r3, #16]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	619a      	str	r2, [r3, #24]
      break;
 80057b6:	e0a3      	b.n	8005900 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68b9      	ldr	r1, [r7, #8]
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fa68 	bl	8005c94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699a      	ldr	r2, [r3, #24]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	699a      	ldr	r2, [r3, #24]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6999      	ldr	r1, [r3, #24]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	021a      	lsls	r2, r3, #8
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	430a      	orrs	r2, r1
 80057f6:	619a      	str	r2, [r3, #24]
      break;
 80057f8:	e082      	b.n	8005900 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68b9      	ldr	r1, [r7, #8]
 8005800:	4618      	mov	r0, r3
 8005802:	f000 fabf 	bl	8005d84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	69da      	ldr	r2, [r3, #28]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f042 0208 	orr.w	r2, r2, #8
 8005814:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	69da      	ldr	r2, [r3, #28]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0204 	bic.w	r2, r2, #4
 8005824:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	69d9      	ldr	r1, [r3, #28]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	691a      	ldr	r2, [r3, #16]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	61da      	str	r2, [r3, #28]
      break;
 8005838:	e062      	b.n	8005900 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68b9      	ldr	r1, [r7, #8]
 8005840:	4618      	mov	r0, r3
 8005842:	f000 fb15 	bl	8005e70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	69da      	ldr	r2, [r3, #28]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	69da      	ldr	r2, [r3, #28]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69d9      	ldr	r1, [r3, #28]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	021a      	lsls	r2, r3, #8
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	61da      	str	r2, [r3, #28]
      break;
 800587a:	e041      	b.n	8005900 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68b9      	ldr	r1, [r7, #8]
 8005882:	4618      	mov	r0, r3
 8005884:	f000 fb4c 	bl	8005f20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f042 0208 	orr.w	r2, r2, #8
 8005896:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0204 	bic.w	r2, r2, #4
 80058a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	691a      	ldr	r2, [r3, #16]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80058ba:	e021      	b.n	8005900 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68b9      	ldr	r1, [r7, #8]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 fb7e 	bl	8005fc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	021a      	lsls	r2, r3, #8
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80058fc:	e000      	b.n	8005900 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80058fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop

08005914 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005924:	2b01      	cmp	r3, #1
 8005926:	d101      	bne.n	800592c <HAL_TIM_SlaveConfigSynchro+0x18>
 8005928:	2302      	movs	r3, #2
 800592a:	e031      	b.n	8005990 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800593c:	6839      	ldr	r1, [r7, #0]
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fb94 	bl	800606c <TIM_SlaveTimer_SetConfig>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d009      	beq.n	800595e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e018      	b.n	8005990 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800596c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68da      	ldr	r2, [r3, #12]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800597c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b0c      	cmp	r3, #12
 80059aa:	d831      	bhi.n	8005a10 <HAL_TIM_ReadCapturedValue+0x78>
 80059ac:	a201      	add	r2, pc, #4	; (adr r2, 80059b4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80059ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b2:	bf00      	nop
 80059b4:	080059e9 	.word	0x080059e9
 80059b8:	08005a11 	.word	0x08005a11
 80059bc:	08005a11 	.word	0x08005a11
 80059c0:	08005a11 	.word	0x08005a11
 80059c4:	080059f3 	.word	0x080059f3
 80059c8:	08005a11 	.word	0x08005a11
 80059cc:	08005a11 	.word	0x08005a11
 80059d0:	08005a11 	.word	0x08005a11
 80059d4:	080059fd 	.word	0x080059fd
 80059d8:	08005a11 	.word	0x08005a11
 80059dc:	08005a11 	.word	0x08005a11
 80059e0:	08005a11 	.word	0x08005a11
 80059e4:	08005a07 	.word	0x08005a07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ee:	60fb      	str	r3, [r7, #12]

      break;
 80059f0:	e00f      	b.n	8005a12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f8:	60fb      	str	r3, [r7, #12]

      break;
 80059fa:	e00a      	b.n	8005a12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a02:	60fb      	str	r3, [r7, #12]

      break;
 8005a04:	e005      	b.n	8005a12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0c:	60fb      	str	r3, [r7, #12]

      break;
 8005a0e:	e000      	b.n	8005a12 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005a10:	bf00      	nop
  }

  return tmpreg;
 8005a12:	68fb      	ldr	r3, [r7, #12]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a40      	ldr	r2, [pc, #256]	; (8005b84 <TIM_Base_SetConfig+0x114>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d013      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a8e:	d00f      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a3d      	ldr	r2, [pc, #244]	; (8005b88 <TIM_Base_SetConfig+0x118>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d00b      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a3c      	ldr	r2, [pc, #240]	; (8005b8c <TIM_Base_SetConfig+0x11c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d007      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a3b      	ldr	r2, [pc, #236]	; (8005b90 <TIM_Base_SetConfig+0x120>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d003      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a3a      	ldr	r2, [pc, #232]	; (8005b94 <TIM_Base_SetConfig+0x124>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d108      	bne.n	8005ac2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a2f      	ldr	r2, [pc, #188]	; (8005b84 <TIM_Base_SetConfig+0x114>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d02b      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad0:	d027      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a2c      	ldr	r2, [pc, #176]	; (8005b88 <TIM_Base_SetConfig+0x118>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d023      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a2b      	ldr	r2, [pc, #172]	; (8005b8c <TIM_Base_SetConfig+0x11c>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d01f      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a2a      	ldr	r2, [pc, #168]	; (8005b90 <TIM_Base_SetConfig+0x120>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d01b      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a29      	ldr	r2, [pc, #164]	; (8005b94 <TIM_Base_SetConfig+0x124>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d017      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a28      	ldr	r2, [pc, #160]	; (8005b98 <TIM_Base_SetConfig+0x128>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d013      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a27      	ldr	r2, [pc, #156]	; (8005b9c <TIM_Base_SetConfig+0x12c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d00f      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a26      	ldr	r2, [pc, #152]	; (8005ba0 <TIM_Base_SetConfig+0x130>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d00b      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a25      	ldr	r2, [pc, #148]	; (8005ba4 <TIM_Base_SetConfig+0x134>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d007      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a24      	ldr	r2, [pc, #144]	; (8005ba8 <TIM_Base_SetConfig+0x138>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d003      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a23      	ldr	r2, [pc, #140]	; (8005bac <TIM_Base_SetConfig+0x13c>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d108      	bne.n	8005b34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a0a      	ldr	r2, [pc, #40]	; (8005b84 <TIM_Base_SetConfig+0x114>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d003      	beq.n	8005b68 <TIM_Base_SetConfig+0xf8>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a0c      	ldr	r2, [pc, #48]	; (8005b94 <TIM_Base_SetConfig+0x124>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d103      	bne.n	8005b70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	691a      	ldr	r2, [r3, #16]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	615a      	str	r2, [r3, #20]
}
 8005b76:	bf00      	nop
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	40010000 	.word	0x40010000
 8005b88:	40000400 	.word	0x40000400
 8005b8c:	40000800 	.word	0x40000800
 8005b90:	40000c00 	.word	0x40000c00
 8005b94:	40010400 	.word	0x40010400
 8005b98:	40014000 	.word	0x40014000
 8005b9c:	40014400 	.word	0x40014400
 8005ba0:	40014800 	.word	0x40014800
 8005ba4:	40001800 	.word	0x40001800
 8005ba8:	40001c00 	.word	0x40001c00
 8005bac:	40002000 	.word	0x40002000

08005bb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	f023 0201 	bic.w	r2, r3, #1
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	4b2b      	ldr	r3, [pc, #172]	; (8005c88 <TIM_OC1_SetConfig+0xd8>)
 8005bdc:	4013      	ands	r3, r2
 8005bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f023 0303 	bic.w	r3, r3, #3
 8005be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f023 0302 	bic.w	r3, r3, #2
 8005bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a21      	ldr	r2, [pc, #132]	; (8005c8c <TIM_OC1_SetConfig+0xdc>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d003      	beq.n	8005c14 <TIM_OC1_SetConfig+0x64>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a20      	ldr	r2, [pc, #128]	; (8005c90 <TIM_OC1_SetConfig+0xe0>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d10c      	bne.n	8005c2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f023 0308 	bic.w	r3, r3, #8
 8005c1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f023 0304 	bic.w	r3, r3, #4
 8005c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a16      	ldr	r2, [pc, #88]	; (8005c8c <TIM_OC1_SetConfig+0xdc>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d003      	beq.n	8005c3e <TIM_OC1_SetConfig+0x8e>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a15      	ldr	r2, [pc, #84]	; (8005c90 <TIM_OC1_SetConfig+0xe0>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d111      	bne.n	8005c62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	621a      	str	r2, [r3, #32]
}
 8005c7c:	bf00      	nop
 8005c7e:	371c      	adds	r7, #28
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	fffeff8f 	.word	0xfffeff8f
 8005c8c:	40010000 	.word	0x40010000
 8005c90:	40010400 	.word	0x40010400

08005c94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	f023 0210 	bic.w	r2, r3, #16
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	4b2e      	ldr	r3, [pc, #184]	; (8005d78 <TIM_OC2_SetConfig+0xe4>)
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	021b      	lsls	r3, r3, #8
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	f023 0320 	bic.w	r3, r3, #32
 8005cde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	011b      	lsls	r3, r3, #4
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a23      	ldr	r2, [pc, #140]	; (8005d7c <TIM_OC2_SetConfig+0xe8>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d003      	beq.n	8005cfc <TIM_OC2_SetConfig+0x68>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a22      	ldr	r2, [pc, #136]	; (8005d80 <TIM_OC2_SetConfig+0xec>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d10d      	bne.n	8005d18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a18      	ldr	r2, [pc, #96]	; (8005d7c <TIM_OC2_SetConfig+0xe8>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d003      	beq.n	8005d28 <TIM_OC2_SetConfig+0x94>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a17      	ldr	r2, [pc, #92]	; (8005d80 <TIM_OC2_SetConfig+0xec>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d113      	bne.n	8005d50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	621a      	str	r2, [r3, #32]
}
 8005d6a:	bf00      	nop
 8005d6c:	371c      	adds	r7, #28
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	feff8fff 	.word	0xfeff8fff
 8005d7c:	40010000 	.word	0x40010000
 8005d80:	40010400 	.word	0x40010400

08005d84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b087      	sub	sp, #28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	69db      	ldr	r3, [r3, #28]
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	4b2d      	ldr	r3, [pc, #180]	; (8005e64 <TIM_OC3_SetConfig+0xe0>)
 8005db0:	4013      	ands	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0303 	bic.w	r3, r3, #3
 8005dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005dcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	021b      	lsls	r3, r3, #8
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a22      	ldr	r2, [pc, #136]	; (8005e68 <TIM_OC3_SetConfig+0xe4>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d003      	beq.n	8005dea <TIM_OC3_SetConfig+0x66>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a21      	ldr	r2, [pc, #132]	; (8005e6c <TIM_OC3_SetConfig+0xe8>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d10d      	bne.n	8005e06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005df0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	021b      	lsls	r3, r3, #8
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a17      	ldr	r2, [pc, #92]	; (8005e68 <TIM_OC3_SetConfig+0xe4>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d003      	beq.n	8005e16 <TIM_OC3_SetConfig+0x92>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a16      	ldr	r2, [pc, #88]	; (8005e6c <TIM_OC3_SetConfig+0xe8>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d113      	bne.n	8005e3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	011b      	lsls	r3, r3, #4
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	011b      	lsls	r3, r3, #4
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	621a      	str	r2, [r3, #32]
}
 8005e58:	bf00      	nop
 8005e5a:	371c      	adds	r7, #28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	fffeff8f 	.word	0xfffeff8f
 8005e68:	40010000 	.word	0x40010000
 8005e6c:	40010400 	.word	0x40010400

08005e70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	69db      	ldr	r3, [r3, #28]
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	4b1e      	ldr	r3, [pc, #120]	; (8005f14 <TIM_OC4_SetConfig+0xa4>)
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	021b      	lsls	r3, r3, #8
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005eba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	031b      	lsls	r3, r3, #12
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a13      	ldr	r2, [pc, #76]	; (8005f18 <TIM_OC4_SetConfig+0xa8>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d003      	beq.n	8005ed8 <TIM_OC4_SetConfig+0x68>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a12      	ldr	r2, [pc, #72]	; (8005f1c <TIM_OC4_SetConfig+0xac>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d109      	bne.n	8005eec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ede:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	019b      	lsls	r3, r3, #6
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	621a      	str	r2, [r3, #32]
}
 8005f06:	bf00      	nop
 8005f08:	371c      	adds	r7, #28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	feff8fff 	.word	0xfeff8fff
 8005f18:	40010000 	.word	0x40010000
 8005f1c:	40010400 	.word	0x40010400

08005f20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b087      	sub	sp, #28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	4b1b      	ldr	r3, [pc, #108]	; (8005fb8 <TIM_OC5_SetConfig+0x98>)
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	041b      	lsls	r3, r3, #16
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a12      	ldr	r2, [pc, #72]	; (8005fbc <TIM_OC5_SetConfig+0x9c>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d003      	beq.n	8005f7e <TIM_OC5_SetConfig+0x5e>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a11      	ldr	r2, [pc, #68]	; (8005fc0 <TIM_OC5_SetConfig+0xa0>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d109      	bne.n	8005f92 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	021b      	lsls	r3, r3, #8
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	621a      	str	r2, [r3, #32]
}
 8005fac:	bf00      	nop
 8005fae:	371c      	adds	r7, #28
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	fffeff8f 	.word	0xfffeff8f
 8005fbc:	40010000 	.word	0x40010000
 8005fc0:	40010400 	.word	0x40010400

08005fc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	4b1c      	ldr	r3, [pc, #112]	; (8006060 <TIM_OC6_SetConfig+0x9c>)
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	021b      	lsls	r3, r3, #8
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006006:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	051b      	lsls	r3, r3, #20
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	4313      	orrs	r3, r2
 8006012:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a13      	ldr	r2, [pc, #76]	; (8006064 <TIM_OC6_SetConfig+0xa0>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d003      	beq.n	8006024 <TIM_OC6_SetConfig+0x60>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a12      	ldr	r2, [pc, #72]	; (8006068 <TIM_OC6_SetConfig+0xa4>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d109      	bne.n	8006038 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800602a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	029b      	lsls	r3, r3, #10
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	4313      	orrs	r3, r2
 8006036:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	621a      	str	r2, [r3, #32]
}
 8006052:	bf00      	nop
 8006054:	371c      	adds	r7, #28
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	feff8fff 	.word	0xfeff8fff
 8006064:	40010000 	.word	0x40010000
 8006068:	40010400 	.word	0x40010400

0800606c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006084:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	4313      	orrs	r3, r2
 800608e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	4b3d      	ldr	r3, [pc, #244]	; (8006188 <TIM_SlaveTimer_SetConfig+0x11c>)
 8006094:	4013      	ands	r3, r2
 8006096:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	4313      	orrs	r3, r2
 80060a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	2b70      	cmp	r3, #112	; 0x70
 80060b0:	d01a      	beq.n	80060e8 <TIM_SlaveTimer_SetConfig+0x7c>
 80060b2:	2b70      	cmp	r3, #112	; 0x70
 80060b4:	d860      	bhi.n	8006178 <TIM_SlaveTimer_SetConfig+0x10c>
 80060b6:	2b60      	cmp	r3, #96	; 0x60
 80060b8:	d054      	beq.n	8006164 <TIM_SlaveTimer_SetConfig+0xf8>
 80060ba:	2b60      	cmp	r3, #96	; 0x60
 80060bc:	d85c      	bhi.n	8006178 <TIM_SlaveTimer_SetConfig+0x10c>
 80060be:	2b50      	cmp	r3, #80	; 0x50
 80060c0:	d046      	beq.n	8006150 <TIM_SlaveTimer_SetConfig+0xe4>
 80060c2:	2b50      	cmp	r3, #80	; 0x50
 80060c4:	d858      	bhi.n	8006178 <TIM_SlaveTimer_SetConfig+0x10c>
 80060c6:	2b40      	cmp	r3, #64	; 0x40
 80060c8:	d019      	beq.n	80060fe <TIM_SlaveTimer_SetConfig+0x92>
 80060ca:	2b40      	cmp	r3, #64	; 0x40
 80060cc:	d854      	bhi.n	8006178 <TIM_SlaveTimer_SetConfig+0x10c>
 80060ce:	2b30      	cmp	r3, #48	; 0x30
 80060d0:	d054      	beq.n	800617c <TIM_SlaveTimer_SetConfig+0x110>
 80060d2:	2b30      	cmp	r3, #48	; 0x30
 80060d4:	d850      	bhi.n	8006178 <TIM_SlaveTimer_SetConfig+0x10c>
 80060d6:	2b20      	cmp	r3, #32
 80060d8:	d050      	beq.n	800617c <TIM_SlaveTimer_SetConfig+0x110>
 80060da:	2b20      	cmp	r3, #32
 80060dc:	d84c      	bhi.n	8006178 <TIM_SlaveTimer_SetConfig+0x10c>
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d04c      	beq.n	800617c <TIM_SlaveTimer_SetConfig+0x110>
 80060e2:	2b10      	cmp	r3, #16
 80060e4:	d04a      	beq.n	800617c <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80060e6:	e047      	b.n	8006178 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6818      	ldr	r0, [r3, #0]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	68d9      	ldr	r1, [r3, #12]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	689a      	ldr	r2, [r3, #8]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	f000 f9d1 	bl	800649e <TIM_ETR_SetConfig>
      break;
 80060fc:	e03f      	b.n	800617e <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b05      	cmp	r3, #5
 8006104:	d101      	bne.n	800610a <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e03a      	b.n	8006180 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6a1a      	ldr	r2, [r3, #32]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0201 	bic.w	r2, r2, #1
 8006120:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006130:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	011b      	lsls	r3, r3, #4
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	621a      	str	r2, [r3, #32]
      break;
 800614e:	e016      	b.n	800617e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6818      	ldr	r0, [r3, #0]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	6899      	ldr	r1, [r3, #8]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	461a      	mov	r2, r3
 800615e:	f000 f889 	bl	8006274 <TIM_TI1_ConfigInputStage>
      break;
 8006162:	e00c      	b.n	800617e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6818      	ldr	r0, [r3, #0]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	6899      	ldr	r1, [r3, #8]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	461a      	mov	r2, r3
 8006172:	f000 f8eb 	bl	800634c <TIM_TI2_ConfigInputStage>
      break;
 8006176:	e002      	b.n	800617e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8006178:	bf00      	nop
 800617a:	e000      	b.n	800617e <TIM_SlaveTimer_SetConfig+0x112>
        break;
 800617c:	bf00      	nop
  }
  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3718      	adds	r7, #24
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	fffefff8 	.word	0xfffefff8

0800618c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
 8006198:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	f023 0201 	bic.w	r2, r3, #1
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	4a28      	ldr	r2, [pc, #160]	; (8006258 <TIM_TI1_SetConfig+0xcc>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d01b      	beq.n	80061f2 <TIM_TI1_SetConfig+0x66>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c0:	d017      	beq.n	80061f2 <TIM_TI1_SetConfig+0x66>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4a25      	ldr	r2, [pc, #148]	; (800625c <TIM_TI1_SetConfig+0xd0>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d013      	beq.n	80061f2 <TIM_TI1_SetConfig+0x66>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4a24      	ldr	r2, [pc, #144]	; (8006260 <TIM_TI1_SetConfig+0xd4>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d00f      	beq.n	80061f2 <TIM_TI1_SetConfig+0x66>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	4a23      	ldr	r2, [pc, #140]	; (8006264 <TIM_TI1_SetConfig+0xd8>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d00b      	beq.n	80061f2 <TIM_TI1_SetConfig+0x66>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	4a22      	ldr	r2, [pc, #136]	; (8006268 <TIM_TI1_SetConfig+0xdc>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d007      	beq.n	80061f2 <TIM_TI1_SetConfig+0x66>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	4a21      	ldr	r2, [pc, #132]	; (800626c <TIM_TI1_SetConfig+0xe0>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d003      	beq.n	80061f2 <TIM_TI1_SetConfig+0x66>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4a20      	ldr	r2, [pc, #128]	; (8006270 <TIM_TI1_SetConfig+0xe4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d101      	bne.n	80061f6 <TIM_TI1_SetConfig+0x6a>
 80061f2:	2301      	movs	r3, #1
 80061f4:	e000      	b.n	80061f8 <TIM_TI1_SetConfig+0x6c>
 80061f6:	2300      	movs	r3, #0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d008      	beq.n	800620e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f023 0303 	bic.w	r3, r3, #3
 8006202:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4313      	orrs	r3, r2
 800620a:	617b      	str	r3, [r7, #20]
 800620c:	e003      	b.n	8006216 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f043 0301 	orr.w	r3, r3, #1
 8006214:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800621c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	011b      	lsls	r3, r3, #4
 8006222:	b2db      	uxtb	r3, r3
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	4313      	orrs	r3, r2
 8006228:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	f023 030a 	bic.w	r3, r3, #10
 8006230:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	f003 030a 	and.w	r3, r3, #10
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	4313      	orrs	r3, r2
 800623c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	621a      	str	r2, [r3, #32]
}
 800624a:	bf00      	nop
 800624c:	371c      	adds	r7, #28
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	40010000 	.word	0x40010000
 800625c:	40000400 	.word	0x40000400
 8006260:	40000800 	.word	0x40000800
 8006264:	40000c00 	.word	0x40000c00
 8006268:	40010400 	.word	0x40010400
 800626c:	40014000 	.word	0x40014000
 8006270:	40001800 	.word	0x40001800

08006274 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006274:	b480      	push	{r7}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	f023 0201 	bic.w	r2, r3, #1
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800629e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	011b      	lsls	r3, r3, #4
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f023 030a 	bic.w	r3, r3, #10
 80062b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	621a      	str	r2, [r3, #32]
}
 80062c6:	bf00      	nop
 80062c8:	371c      	adds	r7, #28
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b087      	sub	sp, #28
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	60f8      	str	r0, [r7, #12]
 80062da:	60b9      	str	r1, [r7, #8]
 80062dc:	607a      	str	r2, [r7, #4]
 80062de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	f023 0210 	bic.w	r2, r3, #16
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	021b      	lsls	r3, r3, #8
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	4313      	orrs	r3, r2
 8006308:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006310:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	031b      	lsls	r3, r3, #12
 8006316:	b29b      	uxth	r3, r3
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	4313      	orrs	r3, r2
 800631c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006324:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	011b      	lsls	r3, r3, #4
 800632a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	4313      	orrs	r3, r2
 8006332:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	621a      	str	r2, [r3, #32]
}
 8006340:	bf00      	nop
 8006342:	371c      	adds	r7, #28
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	f023 0210 	bic.w	r2, r3, #16
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006376:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	031b      	lsls	r3, r3, #12
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	4313      	orrs	r3, r2
 8006380:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006388:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	011b      	lsls	r3, r3, #4
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	4313      	orrs	r3, r2
 8006392:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	621a      	str	r2, [r3, #32]
}
 80063a0:	bf00      	nop
 80063a2:	371c      	adds	r7, #28
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	69db      	ldr	r3, [r3, #28]
 80063ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f023 0303 	bic.w	r3, r3, #3
 80063d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4313      	orrs	r3, r2
 80063e0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	011b      	lsls	r3, r3, #4
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80063fc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	4313      	orrs	r3, r2
 800640a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	621a      	str	r2, [r3, #32]
}
 8006418:	bf00      	nop
 800641a:	371c      	adds	r7, #28
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
 8006430:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a1b      	ldr	r3, [r3, #32]
 8006448:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006450:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	021b      	lsls	r3, r3, #8
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	4313      	orrs	r3, r2
 800645a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006462:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	031b      	lsls	r3, r3, #12
 8006468:	b29b      	uxth	r3, r3
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	4313      	orrs	r3, r2
 800646e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006476:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	031b      	lsls	r3, r3, #12
 800647c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	4313      	orrs	r3, r2
 8006484:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	621a      	str	r2, [r3, #32]
}
 8006492:	bf00      	nop
 8006494:	371c      	adds	r7, #28
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800649e:	b480      	push	{r7}
 80064a0:	b087      	sub	sp, #28
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	60f8      	str	r0, [r7, #12]
 80064a6:	60b9      	str	r1, [r7, #8]
 80064a8:	607a      	str	r2, [r7, #4]
 80064aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	021a      	lsls	r2, r3, #8
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	431a      	orrs	r2, r3
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	609a      	str	r2, [r3, #8]
}
 80064d2:	bf00      	nop
 80064d4:	371c      	adds	r7, #28
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064de:	b480      	push	{r7}
 80064e0:	b087      	sub	sp, #28
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	60f8      	str	r0, [r7, #12]
 80064e6:	60b9      	str	r1, [r7, #8]
 80064e8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	f003 031f 	and.w	r3, r3, #31
 80064f0:	2201      	movs	r2, #1
 80064f2:	fa02 f303 	lsl.w	r3, r2, r3
 80064f6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6a1a      	ldr	r2, [r3, #32]
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	43db      	mvns	r3, r3
 8006500:	401a      	ands	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6a1a      	ldr	r2, [r3, #32]
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	f003 031f 	and.w	r3, r3, #31
 8006510:	6879      	ldr	r1, [r7, #4]
 8006512:	fa01 f303 	lsl.w	r3, r1, r3
 8006516:	431a      	orrs	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	621a      	str	r2, [r3, #32]
}
 800651c:	bf00      	nop
 800651e:	371c      	adds	r7, #28
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006538:	2b01      	cmp	r3, #1
 800653a:	d101      	bne.n	8006540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800653c:	2302      	movs	r3, #2
 800653e:	e06d      	b.n	800661c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2202      	movs	r2, #2
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a30      	ldr	r2, [pc, #192]	; (8006628 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d004      	beq.n	8006574 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a2f      	ldr	r2, [pc, #188]	; (800662c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d108      	bne.n	8006586 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800657a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	4313      	orrs	r3, r2
 8006584:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800658c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	4313      	orrs	r3, r2
 8006596:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a20      	ldr	r2, [pc, #128]	; (8006628 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d022      	beq.n	80065f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b2:	d01d      	beq.n	80065f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a1d      	ldr	r2, [pc, #116]	; (8006630 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d018      	beq.n	80065f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a1c      	ldr	r2, [pc, #112]	; (8006634 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d013      	beq.n	80065f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a1a      	ldr	r2, [pc, #104]	; (8006638 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d00e      	beq.n	80065f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a15      	ldr	r2, [pc, #84]	; (800662c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d009      	beq.n	80065f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a16      	ldr	r2, [pc, #88]	; (800663c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d004      	beq.n	80065f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a15      	ldr	r2, [pc, #84]	; (8006640 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d10c      	bne.n	800660a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	4313      	orrs	r3, r2
 8006600:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3714      	adds	r7, #20
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr
 8006628:	40010000 	.word	0x40010000
 800662c:	40010400 	.word	0x40010400
 8006630:	40000400 	.word	0x40000400
 8006634:	40000800 	.word	0x40000800
 8006638:	40000c00 	.word	0x40000c00
 800663c:	40014000 	.word	0x40014000
 8006640:	40001800 	.word	0x40001800

08006644 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e040      	b.n	8006714 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006696:	2b00      	cmp	r3, #0
 8006698:	d106      	bne.n	80066a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7fc f828 	bl	80026f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2224      	movs	r2, #36	; 0x24
 80066ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 0201 	bic.w	r2, r2, #1
 80066bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f8c0 	bl	8006844 <UART_SetConfig>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d101      	bne.n	80066ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e022      	b.n	8006714 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d002      	beq.n	80066dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fb16 	bl	8006d08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	685a      	ldr	r2, [r3, #4]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689a      	ldr	r2, [r3, #8]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f042 0201 	orr.w	r2, r2, #1
 800670a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fb9d 	bl	8006e4c <UART_CheckIdleState>
 8006712:	4603      	mov	r3, r0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b08a      	sub	sp, #40	; 0x28
 8006720:	af02      	add	r7, sp, #8
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	603b      	str	r3, [r7, #0]
 8006728:	4613      	mov	r3, r2
 800672a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006730:	2b20      	cmp	r3, #32
 8006732:	f040 8081 	bne.w	8006838 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <HAL_UART_Transmit+0x26>
 800673c:	88fb      	ldrh	r3, [r7, #6]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e079      	b.n	800683a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800674c:	2b01      	cmp	r3, #1
 800674e:	d101      	bne.n	8006754 <HAL_UART_Transmit+0x38>
 8006750:	2302      	movs	r3, #2
 8006752:	e072      	b.n	800683a <HAL_UART_Transmit+0x11e>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2221      	movs	r2, #33	; 0x21
 8006768:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800676a:	f7fc f883 	bl	8002874 <HAL_GetTick>
 800676e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	88fa      	ldrh	r2, [r7, #6]
 8006774:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	88fa      	ldrh	r2, [r7, #6]
 800677c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006788:	d108      	bne.n	800679c <HAL_UART_Transmit+0x80>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d104      	bne.n	800679c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006792:	2300      	movs	r3, #0
 8006794:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	61bb      	str	r3, [r7, #24]
 800679a:	e003      	b.n	80067a4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067a0:	2300      	movs	r3, #0
 80067a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80067ac:	e02c      	b.n	8006808 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2200      	movs	r2, #0
 80067b6:	2180      	movs	r1, #128	; 0x80
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f000 fb90 	bl	8006ede <UART_WaitOnFlagUntilTimeout>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e038      	b.n	800683a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10b      	bne.n	80067e6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	3302      	adds	r3, #2
 80067e2:	61bb      	str	r3, [r7, #24]
 80067e4:	e007      	b.n	80067f6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	781a      	ldrb	r2, [r3, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	3301      	adds	r3, #1
 80067f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	3b01      	subs	r3, #1
 8006800:	b29a      	uxth	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800680e:	b29b      	uxth	r3, r3
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1cc      	bne.n	80067ae <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	2200      	movs	r2, #0
 800681c:	2140      	movs	r1, #64	; 0x40
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f000 fb5d 	bl	8006ede <UART_WaitOnFlagUntilTimeout>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e005      	b.n	800683a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2220      	movs	r2, #32
 8006832:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006834:	2300      	movs	r3, #0
 8006836:	e000      	b.n	800683a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006838:	2302      	movs	r3, #2
  }
}
 800683a:	4618      	mov	r0, r3
 800683c:	3720      	adds	r7, #32
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
	...

08006844 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b088      	sub	sp, #32
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800684c:	2300      	movs	r3, #0
 800684e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	689a      	ldr	r2, [r3, #8]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	431a      	orrs	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	431a      	orrs	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	4313      	orrs	r3, r2
 8006866:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	4ba7      	ldr	r3, [pc, #668]	; (8006b0c <UART_SetConfig+0x2c8>)
 8006870:	4013      	ands	r3, r2
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	6812      	ldr	r2, [r2, #0]
 8006876:	6979      	ldr	r1, [r7, #20]
 8006878:	430b      	orrs	r3, r1
 800687a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68da      	ldr	r2, [r3, #12]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	4313      	orrs	r3, r2
 80068a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a95      	ldr	r2, [pc, #596]	; (8006b10 <UART_SetConfig+0x2cc>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d120      	bne.n	8006902 <UART_SetConfig+0xbe>
 80068c0:	4b94      	ldr	r3, [pc, #592]	; (8006b14 <UART_SetConfig+0x2d0>)
 80068c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c6:	f003 0303 	and.w	r3, r3, #3
 80068ca:	2b03      	cmp	r3, #3
 80068cc:	d816      	bhi.n	80068fc <UART_SetConfig+0xb8>
 80068ce:	a201      	add	r2, pc, #4	; (adr r2, 80068d4 <UART_SetConfig+0x90>)
 80068d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d4:	080068e5 	.word	0x080068e5
 80068d8:	080068f1 	.word	0x080068f1
 80068dc:	080068eb 	.word	0x080068eb
 80068e0:	080068f7 	.word	0x080068f7
 80068e4:	2301      	movs	r3, #1
 80068e6:	77fb      	strb	r3, [r7, #31]
 80068e8:	e14f      	b.n	8006b8a <UART_SetConfig+0x346>
 80068ea:	2302      	movs	r3, #2
 80068ec:	77fb      	strb	r3, [r7, #31]
 80068ee:	e14c      	b.n	8006b8a <UART_SetConfig+0x346>
 80068f0:	2304      	movs	r3, #4
 80068f2:	77fb      	strb	r3, [r7, #31]
 80068f4:	e149      	b.n	8006b8a <UART_SetConfig+0x346>
 80068f6:	2308      	movs	r3, #8
 80068f8:	77fb      	strb	r3, [r7, #31]
 80068fa:	e146      	b.n	8006b8a <UART_SetConfig+0x346>
 80068fc:	2310      	movs	r3, #16
 80068fe:	77fb      	strb	r3, [r7, #31]
 8006900:	e143      	b.n	8006b8a <UART_SetConfig+0x346>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a84      	ldr	r2, [pc, #528]	; (8006b18 <UART_SetConfig+0x2d4>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d132      	bne.n	8006972 <UART_SetConfig+0x12e>
 800690c:	4b81      	ldr	r3, [pc, #516]	; (8006b14 <UART_SetConfig+0x2d0>)
 800690e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006912:	f003 030c 	and.w	r3, r3, #12
 8006916:	2b0c      	cmp	r3, #12
 8006918:	d828      	bhi.n	800696c <UART_SetConfig+0x128>
 800691a:	a201      	add	r2, pc, #4	; (adr r2, 8006920 <UART_SetConfig+0xdc>)
 800691c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006920:	08006955 	.word	0x08006955
 8006924:	0800696d 	.word	0x0800696d
 8006928:	0800696d 	.word	0x0800696d
 800692c:	0800696d 	.word	0x0800696d
 8006930:	08006961 	.word	0x08006961
 8006934:	0800696d 	.word	0x0800696d
 8006938:	0800696d 	.word	0x0800696d
 800693c:	0800696d 	.word	0x0800696d
 8006940:	0800695b 	.word	0x0800695b
 8006944:	0800696d 	.word	0x0800696d
 8006948:	0800696d 	.word	0x0800696d
 800694c:	0800696d 	.word	0x0800696d
 8006950:	08006967 	.word	0x08006967
 8006954:	2300      	movs	r3, #0
 8006956:	77fb      	strb	r3, [r7, #31]
 8006958:	e117      	b.n	8006b8a <UART_SetConfig+0x346>
 800695a:	2302      	movs	r3, #2
 800695c:	77fb      	strb	r3, [r7, #31]
 800695e:	e114      	b.n	8006b8a <UART_SetConfig+0x346>
 8006960:	2304      	movs	r3, #4
 8006962:	77fb      	strb	r3, [r7, #31]
 8006964:	e111      	b.n	8006b8a <UART_SetConfig+0x346>
 8006966:	2308      	movs	r3, #8
 8006968:	77fb      	strb	r3, [r7, #31]
 800696a:	e10e      	b.n	8006b8a <UART_SetConfig+0x346>
 800696c:	2310      	movs	r3, #16
 800696e:	77fb      	strb	r3, [r7, #31]
 8006970:	e10b      	b.n	8006b8a <UART_SetConfig+0x346>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a69      	ldr	r2, [pc, #420]	; (8006b1c <UART_SetConfig+0x2d8>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d120      	bne.n	80069be <UART_SetConfig+0x17a>
 800697c:	4b65      	ldr	r3, [pc, #404]	; (8006b14 <UART_SetConfig+0x2d0>)
 800697e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006982:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006986:	2b30      	cmp	r3, #48	; 0x30
 8006988:	d013      	beq.n	80069b2 <UART_SetConfig+0x16e>
 800698a:	2b30      	cmp	r3, #48	; 0x30
 800698c:	d814      	bhi.n	80069b8 <UART_SetConfig+0x174>
 800698e:	2b20      	cmp	r3, #32
 8006990:	d009      	beq.n	80069a6 <UART_SetConfig+0x162>
 8006992:	2b20      	cmp	r3, #32
 8006994:	d810      	bhi.n	80069b8 <UART_SetConfig+0x174>
 8006996:	2b00      	cmp	r3, #0
 8006998:	d002      	beq.n	80069a0 <UART_SetConfig+0x15c>
 800699a:	2b10      	cmp	r3, #16
 800699c:	d006      	beq.n	80069ac <UART_SetConfig+0x168>
 800699e:	e00b      	b.n	80069b8 <UART_SetConfig+0x174>
 80069a0:	2300      	movs	r3, #0
 80069a2:	77fb      	strb	r3, [r7, #31]
 80069a4:	e0f1      	b.n	8006b8a <UART_SetConfig+0x346>
 80069a6:	2302      	movs	r3, #2
 80069a8:	77fb      	strb	r3, [r7, #31]
 80069aa:	e0ee      	b.n	8006b8a <UART_SetConfig+0x346>
 80069ac:	2304      	movs	r3, #4
 80069ae:	77fb      	strb	r3, [r7, #31]
 80069b0:	e0eb      	b.n	8006b8a <UART_SetConfig+0x346>
 80069b2:	2308      	movs	r3, #8
 80069b4:	77fb      	strb	r3, [r7, #31]
 80069b6:	e0e8      	b.n	8006b8a <UART_SetConfig+0x346>
 80069b8:	2310      	movs	r3, #16
 80069ba:	77fb      	strb	r3, [r7, #31]
 80069bc:	e0e5      	b.n	8006b8a <UART_SetConfig+0x346>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a57      	ldr	r2, [pc, #348]	; (8006b20 <UART_SetConfig+0x2dc>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d120      	bne.n	8006a0a <UART_SetConfig+0x1c6>
 80069c8:	4b52      	ldr	r3, [pc, #328]	; (8006b14 <UART_SetConfig+0x2d0>)
 80069ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069d2:	2bc0      	cmp	r3, #192	; 0xc0
 80069d4:	d013      	beq.n	80069fe <UART_SetConfig+0x1ba>
 80069d6:	2bc0      	cmp	r3, #192	; 0xc0
 80069d8:	d814      	bhi.n	8006a04 <UART_SetConfig+0x1c0>
 80069da:	2b80      	cmp	r3, #128	; 0x80
 80069dc:	d009      	beq.n	80069f2 <UART_SetConfig+0x1ae>
 80069de:	2b80      	cmp	r3, #128	; 0x80
 80069e0:	d810      	bhi.n	8006a04 <UART_SetConfig+0x1c0>
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d002      	beq.n	80069ec <UART_SetConfig+0x1a8>
 80069e6:	2b40      	cmp	r3, #64	; 0x40
 80069e8:	d006      	beq.n	80069f8 <UART_SetConfig+0x1b4>
 80069ea:	e00b      	b.n	8006a04 <UART_SetConfig+0x1c0>
 80069ec:	2300      	movs	r3, #0
 80069ee:	77fb      	strb	r3, [r7, #31]
 80069f0:	e0cb      	b.n	8006b8a <UART_SetConfig+0x346>
 80069f2:	2302      	movs	r3, #2
 80069f4:	77fb      	strb	r3, [r7, #31]
 80069f6:	e0c8      	b.n	8006b8a <UART_SetConfig+0x346>
 80069f8:	2304      	movs	r3, #4
 80069fa:	77fb      	strb	r3, [r7, #31]
 80069fc:	e0c5      	b.n	8006b8a <UART_SetConfig+0x346>
 80069fe:	2308      	movs	r3, #8
 8006a00:	77fb      	strb	r3, [r7, #31]
 8006a02:	e0c2      	b.n	8006b8a <UART_SetConfig+0x346>
 8006a04:	2310      	movs	r3, #16
 8006a06:	77fb      	strb	r3, [r7, #31]
 8006a08:	e0bf      	b.n	8006b8a <UART_SetConfig+0x346>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a45      	ldr	r2, [pc, #276]	; (8006b24 <UART_SetConfig+0x2e0>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d125      	bne.n	8006a60 <UART_SetConfig+0x21c>
 8006a14:	4b3f      	ldr	r3, [pc, #252]	; (8006b14 <UART_SetConfig+0x2d0>)
 8006a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a22:	d017      	beq.n	8006a54 <UART_SetConfig+0x210>
 8006a24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a28:	d817      	bhi.n	8006a5a <UART_SetConfig+0x216>
 8006a2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a2e:	d00b      	beq.n	8006a48 <UART_SetConfig+0x204>
 8006a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a34:	d811      	bhi.n	8006a5a <UART_SetConfig+0x216>
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <UART_SetConfig+0x1fe>
 8006a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a3e:	d006      	beq.n	8006a4e <UART_SetConfig+0x20a>
 8006a40:	e00b      	b.n	8006a5a <UART_SetConfig+0x216>
 8006a42:	2300      	movs	r3, #0
 8006a44:	77fb      	strb	r3, [r7, #31]
 8006a46:	e0a0      	b.n	8006b8a <UART_SetConfig+0x346>
 8006a48:	2302      	movs	r3, #2
 8006a4a:	77fb      	strb	r3, [r7, #31]
 8006a4c:	e09d      	b.n	8006b8a <UART_SetConfig+0x346>
 8006a4e:	2304      	movs	r3, #4
 8006a50:	77fb      	strb	r3, [r7, #31]
 8006a52:	e09a      	b.n	8006b8a <UART_SetConfig+0x346>
 8006a54:	2308      	movs	r3, #8
 8006a56:	77fb      	strb	r3, [r7, #31]
 8006a58:	e097      	b.n	8006b8a <UART_SetConfig+0x346>
 8006a5a:	2310      	movs	r3, #16
 8006a5c:	77fb      	strb	r3, [r7, #31]
 8006a5e:	e094      	b.n	8006b8a <UART_SetConfig+0x346>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a30      	ldr	r2, [pc, #192]	; (8006b28 <UART_SetConfig+0x2e4>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d125      	bne.n	8006ab6 <UART_SetConfig+0x272>
 8006a6a:	4b2a      	ldr	r3, [pc, #168]	; (8006b14 <UART_SetConfig+0x2d0>)
 8006a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a78:	d017      	beq.n	8006aaa <UART_SetConfig+0x266>
 8006a7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a7e:	d817      	bhi.n	8006ab0 <UART_SetConfig+0x26c>
 8006a80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a84:	d00b      	beq.n	8006a9e <UART_SetConfig+0x25a>
 8006a86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a8a:	d811      	bhi.n	8006ab0 <UART_SetConfig+0x26c>
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d003      	beq.n	8006a98 <UART_SetConfig+0x254>
 8006a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a94:	d006      	beq.n	8006aa4 <UART_SetConfig+0x260>
 8006a96:	e00b      	b.n	8006ab0 <UART_SetConfig+0x26c>
 8006a98:	2301      	movs	r3, #1
 8006a9a:	77fb      	strb	r3, [r7, #31]
 8006a9c:	e075      	b.n	8006b8a <UART_SetConfig+0x346>
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	77fb      	strb	r3, [r7, #31]
 8006aa2:	e072      	b.n	8006b8a <UART_SetConfig+0x346>
 8006aa4:	2304      	movs	r3, #4
 8006aa6:	77fb      	strb	r3, [r7, #31]
 8006aa8:	e06f      	b.n	8006b8a <UART_SetConfig+0x346>
 8006aaa:	2308      	movs	r3, #8
 8006aac:	77fb      	strb	r3, [r7, #31]
 8006aae:	e06c      	b.n	8006b8a <UART_SetConfig+0x346>
 8006ab0:	2310      	movs	r3, #16
 8006ab2:	77fb      	strb	r3, [r7, #31]
 8006ab4:	e069      	b.n	8006b8a <UART_SetConfig+0x346>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a1c      	ldr	r2, [pc, #112]	; (8006b2c <UART_SetConfig+0x2e8>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d137      	bne.n	8006b30 <UART_SetConfig+0x2ec>
 8006ac0:	4b14      	ldr	r3, [pc, #80]	; (8006b14 <UART_SetConfig+0x2d0>)
 8006ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006aca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ace:	d017      	beq.n	8006b00 <UART_SetConfig+0x2bc>
 8006ad0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ad4:	d817      	bhi.n	8006b06 <UART_SetConfig+0x2c2>
 8006ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ada:	d00b      	beq.n	8006af4 <UART_SetConfig+0x2b0>
 8006adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ae0:	d811      	bhi.n	8006b06 <UART_SetConfig+0x2c2>
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d003      	beq.n	8006aee <UART_SetConfig+0x2aa>
 8006ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aea:	d006      	beq.n	8006afa <UART_SetConfig+0x2b6>
 8006aec:	e00b      	b.n	8006b06 <UART_SetConfig+0x2c2>
 8006aee:	2300      	movs	r3, #0
 8006af0:	77fb      	strb	r3, [r7, #31]
 8006af2:	e04a      	b.n	8006b8a <UART_SetConfig+0x346>
 8006af4:	2302      	movs	r3, #2
 8006af6:	77fb      	strb	r3, [r7, #31]
 8006af8:	e047      	b.n	8006b8a <UART_SetConfig+0x346>
 8006afa:	2304      	movs	r3, #4
 8006afc:	77fb      	strb	r3, [r7, #31]
 8006afe:	e044      	b.n	8006b8a <UART_SetConfig+0x346>
 8006b00:	2308      	movs	r3, #8
 8006b02:	77fb      	strb	r3, [r7, #31]
 8006b04:	e041      	b.n	8006b8a <UART_SetConfig+0x346>
 8006b06:	2310      	movs	r3, #16
 8006b08:	77fb      	strb	r3, [r7, #31]
 8006b0a:	e03e      	b.n	8006b8a <UART_SetConfig+0x346>
 8006b0c:	efff69f3 	.word	0xefff69f3
 8006b10:	40011000 	.word	0x40011000
 8006b14:	40023800 	.word	0x40023800
 8006b18:	40004400 	.word	0x40004400
 8006b1c:	40004800 	.word	0x40004800
 8006b20:	40004c00 	.word	0x40004c00
 8006b24:	40005000 	.word	0x40005000
 8006b28:	40011400 	.word	0x40011400
 8006b2c:	40007800 	.word	0x40007800
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a71      	ldr	r2, [pc, #452]	; (8006cfc <UART_SetConfig+0x4b8>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d125      	bne.n	8006b86 <UART_SetConfig+0x342>
 8006b3a:	4b71      	ldr	r3, [pc, #452]	; (8006d00 <UART_SetConfig+0x4bc>)
 8006b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006b44:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b48:	d017      	beq.n	8006b7a <UART_SetConfig+0x336>
 8006b4a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b4e:	d817      	bhi.n	8006b80 <UART_SetConfig+0x33c>
 8006b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b54:	d00b      	beq.n	8006b6e <UART_SetConfig+0x32a>
 8006b56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b5a:	d811      	bhi.n	8006b80 <UART_SetConfig+0x33c>
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d003      	beq.n	8006b68 <UART_SetConfig+0x324>
 8006b60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b64:	d006      	beq.n	8006b74 <UART_SetConfig+0x330>
 8006b66:	e00b      	b.n	8006b80 <UART_SetConfig+0x33c>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	77fb      	strb	r3, [r7, #31]
 8006b6c:	e00d      	b.n	8006b8a <UART_SetConfig+0x346>
 8006b6e:	2302      	movs	r3, #2
 8006b70:	77fb      	strb	r3, [r7, #31]
 8006b72:	e00a      	b.n	8006b8a <UART_SetConfig+0x346>
 8006b74:	2304      	movs	r3, #4
 8006b76:	77fb      	strb	r3, [r7, #31]
 8006b78:	e007      	b.n	8006b8a <UART_SetConfig+0x346>
 8006b7a:	2308      	movs	r3, #8
 8006b7c:	77fb      	strb	r3, [r7, #31]
 8006b7e:	e004      	b.n	8006b8a <UART_SetConfig+0x346>
 8006b80:	2310      	movs	r3, #16
 8006b82:	77fb      	strb	r3, [r7, #31]
 8006b84:	e001      	b.n	8006b8a <UART_SetConfig+0x346>
 8006b86:	2310      	movs	r3, #16
 8006b88:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b92:	d15b      	bne.n	8006c4c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006b94:	7ffb      	ldrb	r3, [r7, #31]
 8006b96:	2b08      	cmp	r3, #8
 8006b98:	d827      	bhi.n	8006bea <UART_SetConfig+0x3a6>
 8006b9a:	a201      	add	r2, pc, #4	; (adr r2, 8006ba0 <UART_SetConfig+0x35c>)
 8006b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba0:	08006bc5 	.word	0x08006bc5
 8006ba4:	08006bcd 	.word	0x08006bcd
 8006ba8:	08006bd5 	.word	0x08006bd5
 8006bac:	08006beb 	.word	0x08006beb
 8006bb0:	08006bdb 	.word	0x08006bdb
 8006bb4:	08006beb 	.word	0x08006beb
 8006bb8:	08006beb 	.word	0x08006beb
 8006bbc:	08006beb 	.word	0x08006beb
 8006bc0:	08006be3 	.word	0x08006be3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bc4:	f7fd fc20 	bl	8004408 <HAL_RCC_GetPCLK1Freq>
 8006bc8:	61b8      	str	r0, [r7, #24]
        break;
 8006bca:	e013      	b.n	8006bf4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bcc:	f7fd fc30 	bl	8004430 <HAL_RCC_GetPCLK2Freq>
 8006bd0:	61b8      	str	r0, [r7, #24]
        break;
 8006bd2:	e00f      	b.n	8006bf4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bd4:	4b4b      	ldr	r3, [pc, #300]	; (8006d04 <UART_SetConfig+0x4c0>)
 8006bd6:	61bb      	str	r3, [r7, #24]
        break;
 8006bd8:	e00c      	b.n	8006bf4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bda:	f7fd fb53 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 8006bde:	61b8      	str	r0, [r7, #24]
        break;
 8006be0:	e008      	b.n	8006bf4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006be6:	61bb      	str	r3, [r7, #24]
        break;
 8006be8:	e004      	b.n	8006bf4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006bea:	2300      	movs	r3, #0
 8006bec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	77bb      	strb	r3, [r7, #30]
        break;
 8006bf2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d074      	beq.n	8006ce4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	005a      	lsls	r2, r3, #1
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	085b      	lsrs	r3, r3, #1
 8006c04:	441a      	add	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	2b0f      	cmp	r3, #15
 8006c16:	d916      	bls.n	8006c46 <UART_SetConfig+0x402>
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c1e:	d212      	bcs.n	8006c46 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	f023 030f 	bic.w	r3, r3, #15
 8006c28:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	085b      	lsrs	r3, r3, #1
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	f003 0307 	and.w	r3, r3, #7
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	89fb      	ldrh	r3, [r7, #14]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	89fa      	ldrh	r2, [r7, #14]
 8006c42:	60da      	str	r2, [r3, #12]
 8006c44:	e04e      	b.n	8006ce4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	77bb      	strb	r3, [r7, #30]
 8006c4a:	e04b      	b.n	8006ce4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c4c:	7ffb      	ldrb	r3, [r7, #31]
 8006c4e:	2b08      	cmp	r3, #8
 8006c50:	d827      	bhi.n	8006ca2 <UART_SetConfig+0x45e>
 8006c52:	a201      	add	r2, pc, #4	; (adr r2, 8006c58 <UART_SetConfig+0x414>)
 8006c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c58:	08006c7d 	.word	0x08006c7d
 8006c5c:	08006c85 	.word	0x08006c85
 8006c60:	08006c8d 	.word	0x08006c8d
 8006c64:	08006ca3 	.word	0x08006ca3
 8006c68:	08006c93 	.word	0x08006c93
 8006c6c:	08006ca3 	.word	0x08006ca3
 8006c70:	08006ca3 	.word	0x08006ca3
 8006c74:	08006ca3 	.word	0x08006ca3
 8006c78:	08006c9b 	.word	0x08006c9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c7c:	f7fd fbc4 	bl	8004408 <HAL_RCC_GetPCLK1Freq>
 8006c80:	61b8      	str	r0, [r7, #24]
        break;
 8006c82:	e013      	b.n	8006cac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c84:	f7fd fbd4 	bl	8004430 <HAL_RCC_GetPCLK2Freq>
 8006c88:	61b8      	str	r0, [r7, #24]
        break;
 8006c8a:	e00f      	b.n	8006cac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c8c:	4b1d      	ldr	r3, [pc, #116]	; (8006d04 <UART_SetConfig+0x4c0>)
 8006c8e:	61bb      	str	r3, [r7, #24]
        break;
 8006c90:	e00c      	b.n	8006cac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c92:	f7fd faf7 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 8006c96:	61b8      	str	r0, [r7, #24]
        break;
 8006c98:	e008      	b.n	8006cac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c9e:	61bb      	str	r3, [r7, #24]
        break;
 8006ca0:	e004      	b.n	8006cac <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	77bb      	strb	r3, [r7, #30]
        break;
 8006caa:	bf00      	nop
    }

    if (pclk != 0U)
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d018      	beq.n	8006ce4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	085a      	lsrs	r2, r3, #1
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	441a      	add	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	2b0f      	cmp	r3, #15
 8006ccc:	d908      	bls.n	8006ce0 <UART_SetConfig+0x49c>
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cd4:	d204      	bcs.n	8006ce0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	60da      	str	r2, [r3, #12]
 8006cde:	e001      	b.n	8006ce4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006cf0:	7fbb      	ldrb	r3, [r7, #30]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3720      	adds	r7, #32
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	40007c00 	.word	0x40007c00
 8006d00:	40023800 	.word	0x40023800
 8006d04:	00f42400 	.word	0x00f42400

08006d08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00a      	beq.n	8006d32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00a      	beq.n	8006d54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	430a      	orrs	r2, r1
 8006d52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d58:	f003 0304 	and.w	r3, r3, #4
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00a      	beq.n	8006d76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	430a      	orrs	r2, r1
 8006d74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7a:	f003 0308 	and.w	r3, r3, #8
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00a      	beq.n	8006d98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	430a      	orrs	r2, r1
 8006d96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9c:	f003 0310 	and.w	r3, r3, #16
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00a      	beq.n	8006dba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	430a      	orrs	r2, r1
 8006db8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbe:	f003 0320 	and.w	r3, r3, #32
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00a      	beq.n	8006ddc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	430a      	orrs	r2, r1
 8006dda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d01a      	beq.n	8006e1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e06:	d10a      	bne.n	8006e1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00a      	beq.n	8006e40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	605a      	str	r2, [r3, #4]
  }
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af02      	add	r7, sp, #8
 8006e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e5c:	f7fb fd0a 	bl	8002874 <HAL_GetTick>
 8006e60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0308 	and.w	r3, r3, #8
 8006e6c:	2b08      	cmp	r3, #8
 8006e6e:	d10e      	bne.n	8006e8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f82d 	bl	8006ede <UART_WaitOnFlagUntilTimeout>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d001      	beq.n	8006e8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e023      	b.n	8006ed6 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0304 	and.w	r3, r3, #4
 8006e98:	2b04      	cmp	r3, #4
 8006e9a:	d10e      	bne.n	8006eba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f817 	bl	8006ede <UART_WaitOnFlagUntilTimeout>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e00d      	b.n	8006ed6 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2220      	movs	r2, #32
 8006ebe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b084      	sub	sp, #16
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	60f8      	str	r0, [r7, #12]
 8006ee6:	60b9      	str	r1, [r7, #8]
 8006ee8:	603b      	str	r3, [r7, #0]
 8006eea:	4613      	mov	r3, r2
 8006eec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eee:	e05e      	b.n	8006fae <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef6:	d05a      	beq.n	8006fae <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ef8:	f7fb fcbc 	bl	8002874 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	69ba      	ldr	r2, [r7, #24]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d302      	bcc.n	8006f0e <UART_WaitOnFlagUntilTimeout+0x30>
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d11b      	bne.n	8006f46 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f1c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	689a      	ldr	r2, [r3, #8]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f022 0201 	bic.w	r2, r2, #1
 8006f2c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2220      	movs	r2, #32
 8006f32:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2220      	movs	r2, #32
 8006f38:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e043      	b.n	8006fce <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0304 	and.w	r3, r3, #4
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d02c      	beq.n	8006fae <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f62:	d124      	bne.n	8006fae <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f6c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f7c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f022 0201 	bic.w	r2, r2, #1
 8006f8c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2220      	movs	r2, #32
 8006f92:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2220      	movs	r2, #32
 8006f98:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e00f      	b.n	8006fce <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	69da      	ldr	r2, [r3, #28]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	bf0c      	ite	eq
 8006fbe:	2301      	moveq	r3, #1
 8006fc0:	2300      	movne	r3, #0
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	79fb      	ldrb	r3, [r7, #7]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d091      	beq.n	8006ef0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
	...

08006fd8 <__libc_init_array>:
 8006fd8:	b570      	push	{r4, r5, r6, lr}
 8006fda:	4d0d      	ldr	r5, [pc, #52]	; (8007010 <__libc_init_array+0x38>)
 8006fdc:	4c0d      	ldr	r4, [pc, #52]	; (8007014 <__libc_init_array+0x3c>)
 8006fde:	1b64      	subs	r4, r4, r5
 8006fe0:	10a4      	asrs	r4, r4, #2
 8006fe2:	2600      	movs	r6, #0
 8006fe4:	42a6      	cmp	r6, r4
 8006fe6:	d109      	bne.n	8006ffc <__libc_init_array+0x24>
 8006fe8:	4d0b      	ldr	r5, [pc, #44]	; (8007018 <__libc_init_array+0x40>)
 8006fea:	4c0c      	ldr	r4, [pc, #48]	; (800701c <__libc_init_array+0x44>)
 8006fec:	f000 f8aa 	bl	8007144 <_init>
 8006ff0:	1b64      	subs	r4, r4, r5
 8006ff2:	10a4      	asrs	r4, r4, #2
 8006ff4:	2600      	movs	r6, #0
 8006ff6:	42a6      	cmp	r6, r4
 8006ff8:	d105      	bne.n	8007006 <__libc_init_array+0x2e>
 8006ffa:	bd70      	pop	{r4, r5, r6, pc}
 8006ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007000:	4798      	blx	r3
 8007002:	3601      	adds	r6, #1
 8007004:	e7ee      	b.n	8006fe4 <__libc_init_array+0xc>
 8007006:	f855 3b04 	ldr.w	r3, [r5], #4
 800700a:	4798      	blx	r3
 800700c:	3601      	adds	r6, #1
 800700e:	e7f2      	b.n	8006ff6 <__libc_init_array+0x1e>
 8007010:	080075c4 	.word	0x080075c4
 8007014:	080075c4 	.word	0x080075c4
 8007018:	080075c4 	.word	0x080075c4
 800701c:	080075c8 	.word	0x080075c8

08007020 <memset>:
 8007020:	4402      	add	r2, r0
 8007022:	4603      	mov	r3, r0
 8007024:	4293      	cmp	r3, r2
 8007026:	d100      	bne.n	800702a <memset+0xa>
 8007028:	4770      	bx	lr
 800702a:	f803 1b01 	strb.w	r1, [r3], #1
 800702e:	e7f9      	b.n	8007024 <memset+0x4>

08007030 <__utoa>:
 8007030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007032:	4c1f      	ldr	r4, [pc, #124]	; (80070b0 <__utoa+0x80>)
 8007034:	b08b      	sub	sp, #44	; 0x2c
 8007036:	4605      	mov	r5, r0
 8007038:	460b      	mov	r3, r1
 800703a:	466e      	mov	r6, sp
 800703c:	f104 0c20 	add.w	ip, r4, #32
 8007040:	6820      	ldr	r0, [r4, #0]
 8007042:	6861      	ldr	r1, [r4, #4]
 8007044:	4637      	mov	r7, r6
 8007046:	c703      	stmia	r7!, {r0, r1}
 8007048:	3408      	adds	r4, #8
 800704a:	4564      	cmp	r4, ip
 800704c:	463e      	mov	r6, r7
 800704e:	d1f7      	bne.n	8007040 <__utoa+0x10>
 8007050:	7921      	ldrb	r1, [r4, #4]
 8007052:	7139      	strb	r1, [r7, #4]
 8007054:	1e91      	subs	r1, r2, #2
 8007056:	6820      	ldr	r0, [r4, #0]
 8007058:	6038      	str	r0, [r7, #0]
 800705a:	2922      	cmp	r1, #34	; 0x22
 800705c:	f04f 0100 	mov.w	r1, #0
 8007060:	d904      	bls.n	800706c <__utoa+0x3c>
 8007062:	7019      	strb	r1, [r3, #0]
 8007064:	460b      	mov	r3, r1
 8007066:	4618      	mov	r0, r3
 8007068:	b00b      	add	sp, #44	; 0x2c
 800706a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800706c:	1e58      	subs	r0, r3, #1
 800706e:	4684      	mov	ip, r0
 8007070:	fbb5 f7f2 	udiv	r7, r5, r2
 8007074:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8007078:	fb02 5617 	mls	r6, r2, r7, r5
 800707c:	4476      	add	r6, lr
 800707e:	460c      	mov	r4, r1
 8007080:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007084:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007088:	462e      	mov	r6, r5
 800708a:	42b2      	cmp	r2, r6
 800708c:	f101 0101 	add.w	r1, r1, #1
 8007090:	463d      	mov	r5, r7
 8007092:	d9ed      	bls.n	8007070 <__utoa+0x40>
 8007094:	2200      	movs	r2, #0
 8007096:	545a      	strb	r2, [r3, r1]
 8007098:	1919      	adds	r1, r3, r4
 800709a:	1aa5      	subs	r5, r4, r2
 800709c:	42aa      	cmp	r2, r5
 800709e:	dae2      	bge.n	8007066 <__utoa+0x36>
 80070a0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80070a4:	780e      	ldrb	r6, [r1, #0]
 80070a6:	7006      	strb	r6, [r0, #0]
 80070a8:	3201      	adds	r2, #1
 80070aa:	f801 5901 	strb.w	r5, [r1], #-1
 80070ae:	e7f4      	b.n	800709a <__utoa+0x6a>
 80070b0:	08007594 	.word	0x08007594

080070b4 <utoa>:
 80070b4:	f7ff bfbc 	b.w	8007030 <__utoa>

080070b8 <round>:
 80070b8:	ee10 1a90 	vmov	r1, s1
 80070bc:	f3c1 500a 	ubfx	r0, r1, #20, #11
 80070c0:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 80070c4:	2a13      	cmp	r2, #19
 80070c6:	b510      	push	{r4, lr}
 80070c8:	ee10 3a10 	vmov	r3, s0
 80070cc:	dc19      	bgt.n	8007102 <round+0x4a>
 80070ce:	2a00      	cmp	r2, #0
 80070d0:	da09      	bge.n	80070e6 <round+0x2e>
 80070d2:	3201      	adds	r2, #1
 80070d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80070d8:	d103      	bne.n	80070e2 <round+0x2a>
 80070da:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80070de:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80070e2:	2000      	movs	r0, #0
 80070e4:	e027      	b.n	8007136 <round+0x7e>
 80070e6:	4816      	ldr	r0, [pc, #88]	; (8007140 <round+0x88>)
 80070e8:	4110      	asrs	r0, r2
 80070ea:	ea01 0400 	and.w	r4, r1, r0
 80070ee:	4323      	orrs	r3, r4
 80070f0:	d00e      	beq.n	8007110 <round+0x58>
 80070f2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80070f6:	fa43 f202 	asr.w	r2, r3, r2
 80070fa:	4411      	add	r1, r2
 80070fc:	ea21 0100 	bic.w	r1, r1, r0
 8007100:	e7ef      	b.n	80070e2 <round+0x2a>
 8007102:	2a33      	cmp	r2, #51	; 0x33
 8007104:	dd05      	ble.n	8007112 <round+0x5a>
 8007106:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800710a:	d101      	bne.n	8007110 <round+0x58>
 800710c:	ee30 0b00 	vadd.f64	d0, d0, d0
 8007110:	bd10      	pop	{r4, pc}
 8007112:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 8007116:	f04f 30ff 	mov.w	r0, #4294967295
 800711a:	fa20 f404 	lsr.w	r4, r0, r4
 800711e:	4223      	tst	r3, r4
 8007120:	d0f6      	beq.n	8007110 <round+0x58>
 8007122:	2001      	movs	r0, #1
 8007124:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 8007128:	fa00 f202 	lsl.w	r2, r0, r2
 800712c:	189b      	adds	r3, r3, r2
 800712e:	bf28      	it	cs
 8007130:	1809      	addcs	r1, r1, r0
 8007132:	ea23 0004 	bic.w	r0, r3, r4
 8007136:	460b      	mov	r3, r1
 8007138:	4602      	mov	r2, r0
 800713a:	ec43 2b10 	vmov	d0, r2, r3
 800713e:	e7e7      	b.n	8007110 <round+0x58>
 8007140:	000fffff 	.word	0x000fffff

08007144 <_init>:
 8007144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007146:	bf00      	nop
 8007148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800714a:	bc08      	pop	{r3}
 800714c:	469e      	mov	lr, r3
 800714e:	4770      	bx	lr

08007150 <_fini>:
 8007150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007152:	bf00      	nop
 8007154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007156:	bc08      	pop	{r3}
 8007158:	469e      	mov	lr, r3
 800715a:	4770      	bx	lr
