
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093b4  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  080095ac  080095ac  000195ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ddc  08009ddc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08009ddc  08009ddc  00019ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009de4  08009de4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009de4  08009de4  00019de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009de8  08009de8  00019de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  2000000c  08009df8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08009df8  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a1c3  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e67  00000000  00000000  0003a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  0003e068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a0  00000000  00000000  0003f4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d375  00000000  00000000  00040780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d9b1  00000000  00000000  0006daf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109c23  00000000  00000000  0008b4a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001950c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052cc  00000000  00000000  0019511c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08009594 	.word	0x08009594

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08009594 	.word	0x08009594

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <initAD8403>:
//----------------------------------------------------------------------

// Initialisiere AD8403
//----------------------------------------------------------------------
void initAD8403(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	// Setze AD8403 Shutdown Pin
	AD8403_SHDN_ENABLE();
 8000550:	2201      	movs	r2, #1
 8000552:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000556:	480a      	ldr	r0, [pc, #40]	; (8000580 <initAD8403+0x34>)
 8000558:	f004 fc3c 	bl	8004dd4 <HAL_GPIO_WritePin>

	// Verzoegerung fuer einen Reset des AD8403
	HAL_Delay(20);
 800055c:	2014      	movs	r0, #20
 800055e:	f003 fb35 	bl	8003bcc <HAL_Delay>

	// Deaktiviere Chip Select
	AD8403_CS_DISABLE();
 8000562:	2201      	movs	r2, #1
 8000564:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000568:	4805      	ldr	r0, [pc, #20]	; (8000580 <initAD8403+0x34>)
 800056a:	f004 fc33 	bl	8004dd4 <HAL_GPIO_WritePin>

	// Setze AD8403 RS Pin
	AD8403_RS_ENABLE();
 800056e:	2201      	movs	r2, #1
 8000570:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000574:	4802      	ldr	r0, [pc, #8]	; (8000580 <initAD8403+0x34>)
 8000576:	f004 fc2d 	bl	8004dd4 <HAL_GPIO_WritePin>
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40021800 	.word	0x40021800

08000584 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
	// Sende String mit Laenge "Size", "Size" muss bekannt sein
	HAL_UART_Transmit(&huart2, (uint8_t*) str, size, 1000);
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	b29a      	uxth	r2, r3
 8000592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000596:	6879      	ldr	r1, [r7, #4]
 8000598:	4803      	ldr	r0, [pc, #12]	; (80005a8 <uartTransmit+0x24>)
 800059a:	f008 fa9d 	bl	8008ad8 <HAL_UART_Transmit>
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200002a4 	.word	0x200002a4

080005ac <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	char str[11];

	// Zahl umrechnen
	utoa(number, str, base);												// Zahl umrechnen anhand der Basis "base"
 80005b6:	683a      	ldr	r2, [r7, #0]
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	4619      	mov	r1, r3
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	f008 ffa0 	bl	8009504 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 1000);			// Sende Zahlen
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff fe35 	bl	8000238 <strlen>
 80005ce:	4603      	mov	r3, r0
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	f107 010c 	add.w	r1, r7, #12
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	4803      	ldr	r0, [pc, #12]	; (80005e8 <uartTransmitNumber+0x3c>)
 80005dc:	f008 fa7c 	bl	8008ad8 <HAL_UART_Transmit>
}
 80005e0:	bf00      	nop
 80005e2:	3718      	adds	r7, #24
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200002a4 	.word	0x200002a4

080005ec <ltc1380_write>:
//----------------------------------------------------------------------

// Kanal auswaehlen
//----------------------------------------------------------------------
void ltc1380_write(uint8_t Address, uint8_t Channel)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	460a      	mov	r2, r1
 80005f6:	71fb      	strb	r3, [r7, #7]
 80005f8:	4613      	mov	r3, r2
 80005fa:	71bb      	strb	r3, [r7, #6]
	ITM_SendNumber(Channel);
	ITM_SendChar('\n');
#endif

	// Definiere Array fuer Channel auswaehlen
	uint8_t off[6] = {0x69, 0x08, 0x00, 0x89, 0x7F, 0xF9};					// Daten-Bytes fuer LTC6811 mit Daten fuer LTC1380
 80005fc:	4a14      	ldr	r2, [pc, #80]	; (8000650 <ltc1380_write+0x64>)
 80005fe:	f107 0308 	add.w	r3, r7, #8
 8000602:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000606:	6018      	str	r0, [r3, #0]
 8000608:	3304      	adds	r3, #4
 800060a:	8019      	strh	r1, [r3, #0]
	
	// Addresse und Channel waehlen
	off[1] |= ((Address & 0x0F) << 4);										// Address in Array uebertragen
 800060c:	7a7b      	ldrb	r3, [r7, #9]
 800060e:	b25a      	sxtb	r2, r3
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	011b      	lsls	r3, r3, #4
 8000614:	b25b      	sxtb	r3, r3
 8000616:	4313      	orrs	r3, r2
 8000618:	b25b      	sxtb	r3, r3
 800061a:	b2db      	uxtb	r3, r3
 800061c:	727b      	strb	r3, [r7, #9]
	off[3] |= ((Channel & 0x0F) << 4);										// Channel in Array uebertragen
 800061e:	7afb      	ldrb	r3, [r7, #11]
 8000620:	b25a      	sxtb	r2, r3
 8000622:	79bb      	ldrb	r3, [r7, #6]
 8000624:	011b      	lsls	r3, r3, #4
 8000626:	b25b      	sxtb	r3, r3
 8000628:	4313      	orrs	r3, r2
 800062a:	b25b      	sxtb	r3, r3
 800062c:	b2db      	uxtb	r3, r3
 800062e:	72fb      	strb	r3, [r7, #11]
	
	// LTC6811 beschreiben und ueber I2C uebertragen
	ltc6811_write(WRCOMM, &off[0]);												// Daten in LTC6811 schreiben
 8000630:	f107 0308 	add.w	r3, r7, #8
 8000634:	4619      	mov	r1, r3
 8000636:	f240 7021 	movw	r0, #1825	; 0x721
 800063a:	f000 f8a9 	bl	8000790 <ltc6811_write>
	ltc6811(STCOMM);														// Daten von LTC6811 an LTC1380 senden
 800063e:	f240 7023 	movw	r0, #1827	; 0x723
 8000642:	f000 f851 	bl	80006e8 <ltc6811>
		ITM_SendChar(' ');
		ITM_SendNumber(off[i]);
	}
	ITM_SendChar('\n');
#endif
}
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	080095ac 	.word	0x080095ac

08000654 <getDifference>:
//----------------------------------------------------------------------

// Differenz Berechnen, Betrag
//----------------------------------------------------------------------
static uint16_t getDifference(uint16_t a, uint16_t b)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	460a      	mov	r2, r1
 800065e:	80fb      	strh	r3, [r7, #6]
 8000660:	4613      	mov	r3, r2
 8000662:	80bb      	strh	r3, [r7, #4]
	// A ist groesser B
	if (a > b)
 8000664:	88fa      	ldrh	r2, [r7, #6]
 8000666:	88bb      	ldrh	r3, [r7, #4]
 8000668:	429a      	cmp	r2, r3
 800066a:	d904      	bls.n	8000676 <getDifference+0x22>
	{
		// B von A abziehen
		return (a - b);
 800066c:	88fa      	ldrh	r2, [r7, #6]
 800066e:	88bb      	ldrh	r3, [r7, #4]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	b29b      	uxth	r3, r3
 8000674:	e009      	b.n	800068a <getDifference+0x36>
	}
	// B ist groesser A
	else if (a < b)
 8000676:	88fa      	ldrh	r2, [r7, #6]
 8000678:	88bb      	ldrh	r3, [r7, #4]
 800067a:	429a      	cmp	r2, r3
 800067c:	d204      	bcs.n	8000688 <getDifference+0x34>
	{
		// A von B abziehen
		return (b - a);
 800067e:	88ba      	ldrh	r2, [r7, #4]
 8000680:	88fb      	ldrh	r3, [r7, #6]
 8000682:	1ad3      	subs	r3, r2, r3
 8000684:	b29b      	uxth	r3, r3
 8000686:	e000      	b.n	800068a <getDifference+0x36>
	}
	// A ist gleich B
	else
	{
		// Differenz ist 0
		return 0;
 8000688:	2300      	movs	r3, #0
	}
}
 800068a:	4618      	mov	r0, r3
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
	...

08000698 <wakeup_ltc6811>:
//----------------------------------------------------------------------

// Wakeup LTC6811 idle
//----------------------------------------------------------------------
void wakeup_ltc6811(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
	// Debug Nachricht
#ifdef DEBUG_ISOSPI
	ITM_SendString("Chip wird geweckt.\n");
#endif

	for(uint8_t i = 0; i < LTC6811_DEVICES; i++)							// Wiederholen fuer Anzahl Slaves
 800069e:	2300      	movs	r3, #0
 80006a0:	71fb      	strb	r3, [r7, #7]
 80006a2:	e014      	b.n	80006ce <wakeup_ltc6811+0x36>
	{
		// ISOCS einschalten
		ISOCS_ENABLE();														// Chip-Select einschalten
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006aa:	480d      	ldr	r0, [pc, #52]	; (80006e0 <wakeup_ltc6811+0x48>)
 80006ac:	f004 fb92 	bl	8004dd4 <HAL_GPIO_WritePin>

		// Dummy Paket senden
		HAL_SPI_Transmit(&hspi4, (uint8_t*) 0xAA, 1, 100);					// Chip wecken, isoSPI braucht Zeit bis ready
 80006b0:	2364      	movs	r3, #100	; 0x64
 80006b2:	2201      	movs	r2, #1
 80006b4:	21aa      	movs	r1, #170	; 0xaa
 80006b6:	480b      	ldr	r0, [pc, #44]	; (80006e4 <wakeup_ltc6811+0x4c>)
 80006b8:	f005 fd5d 	bl	8006176 <HAL_SPI_Transmit>

		//HAL_Delay(2);														// isoSPI braucht Zeit bis ready

		// ISOCS ausschalten
		ISOCS_DISABLE();													// Chip-Select ausschalten
 80006bc:	2201      	movs	r2, #1
 80006be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c2:	4807      	ldr	r0, [pc, #28]	; (80006e0 <wakeup_ltc6811+0x48>)
 80006c4:	f004 fb86 	bl	8004dd4 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < LTC6811_DEVICES; i++)							// Wiederholen fuer Anzahl Slaves
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	3301      	adds	r3, #1
 80006cc:	71fb      	strb	r3, [r7, #7]
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d0e7      	beq.n	80006a4 <wakeup_ltc6811+0xc>
	}
}
 80006d4:	bf00      	nop
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40021000 	.word	0x40021000
 80006e4:	2000015c 	.word	0x2000015c

080006e8 <ltc6811>:
//----------------------------------------------------------------------

// Broadcast Command
//----------------------------------------------------------------------
void ltc6811(uint16_t command)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	80fb      	strh	r3, [r7, #6]
#endif

	// PEC berechnen, Anhand Command
	uint16_t pec;															// pec = Zwischenspeicher 16-Bit Command
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	pec = peccommand(command);
 80006f2:	88fb      	ldrh	r3, [r7, #6]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 f953 	bl	80009a0 <peccommand>
 80006fa:	4603      	mov	r3, r0
 80006fc:	81bb      	strh	r3, [r7, #12]
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 80006fe:	f7ff ffcb 	bl	8000698 <wakeup_ltc6811>

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 8000702:	88fb      	ldrh	r3, [r7, #6]
 8000704:	0a1b      	lsrs	r3, r3, #8
 8000706:	b29b      	uxth	r3, r3
 8000708:	b2db      	uxtb	r3, r3
 800070a:	f003 0307 	and.w	r3, r3, #7
 800070e:	b2db      	uxtb	r3, r3
 8000710:	723b      	strb	r3, [r7, #8]
	cmd[1] = (command & 0xFF);
 8000712:	88fb      	ldrh	r3, [r7, #6]
 8000714:	b2db      	uxtb	r3, r3
 8000716:	727b      	strb	r3, [r7, #9]
	cmd[2] = ((pec >> 8) & 0xFF);
 8000718:	89bb      	ldrh	r3, [r7, #12]
 800071a:	0a1b      	lsrs	r3, r3, #8
 800071c:	b29b      	uxth	r3, r3
 800071e:	b2db      	uxtb	r3, r3
 8000720:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec & 0xFE);
 8000722:	89bb      	ldrh	r3, [r7, #12]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	f023 0301 	bic.w	r3, r3, #1
 800072a:	b2db      	uxtb	r3, r3
 800072c:	72fb      	strb	r3, [r7, #11]

	// ISOCS einschalten
	ISOCS_ENABLE();
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000734:	4814      	ldr	r0, [pc, #80]	; (8000788 <ltc6811+0xa0>)
 8000736:	f004 fb4d 	bl	8004dd4 <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 800073a:	f107 0108 	add.w	r1, r7, #8
 800073e:	2364      	movs	r3, #100	; 0x64
 8000740:	2204      	movs	r2, #4
 8000742:	4812      	ldr	r0, [pc, #72]	; (800078c <ltc6811+0xa4>)
 8000744:	f005 fd17 	bl	8006176 <HAL_SPI_Transmit>

	// Wenn Command = STCOMM ist dann muessen noch 72 Takte uebertragen werden
	if (command == STCOMM)
 8000748:	88fb      	ldrh	r3, [r7, #6]
 800074a:	f240 7223 	movw	r2, #1827	; 0x723
 800074e:	4293      	cmp	r3, r2
 8000750:	d10f      	bne.n	8000772 <ltc6811+0x8a>
	{
		// 72 = 9 * 8 Bit Daten
		for (uint8_t i = 0; i < 9; i++)
 8000752:	2300      	movs	r3, #0
 8000754:	73fb      	strb	r3, [r7, #15]
 8000756:	e009      	b.n	800076c <ltc6811+0x84>
		{
			// Dummy-Byte uebertragen
			HAL_SPI_Transmit(&hspi4, (uint8_t*) 0xAA, 1, HAL_MAX_DELAY);
 8000758:	f04f 33ff 	mov.w	r3, #4294967295
 800075c:	2201      	movs	r2, #1
 800075e:	21aa      	movs	r1, #170	; 0xaa
 8000760:	480a      	ldr	r0, [pc, #40]	; (800078c <ltc6811+0xa4>)
 8000762:	f005 fd08 	bl	8006176 <HAL_SPI_Transmit>
		for (uint8_t i = 0; i < 9; i++)
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	3301      	adds	r3, #1
 800076a:	73fb      	strb	r3, [r7, #15]
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	2b08      	cmp	r3, #8
 8000770:	d9f2      	bls.n	8000758 <ltc6811+0x70>
		}
	}
	
	// ISOCS ausschalten
	ISOCS_DISABLE();
 8000772:	2201      	movs	r2, #1
 8000774:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000778:	4803      	ldr	r0, [pc, #12]	; (8000788 <ltc6811+0xa0>)
 800077a:	f004 fb2b 	bl	8004dd4 <HAL_GPIO_WritePin>
		ITM_SendChar(' ');
		ITM_SendNumber(cmd[i]);
	}
	ITM_SendChar('\n');
#endif
}
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40021000 	.word	0x40021000
 800078c:	2000015c 	.word	0x2000015c

08000790 <ltc6811_write>:


// Broadcast Write Command
//----------------------------------------------------------------------
void ltc6811_write(uint16_t command, uint8_t* data)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	6039      	str	r1, [r7, #0]
 800079a:	80fb      	strh	r3, [r7, #6]

	// PEC berechnen, fuer Data Funktion nur bei einem Device gegeben
	uint16_t pec_c, pec_d;													// pec_c = Zwischenspeicher 16-Bit Command, pec_d = Zwischenspeicher 16-Bit Data
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	uint8_t tmp_data[8*LTC6811_DEVICES];									// Zwischenspeicher Daten + Pec CRC
	pec_c = peccommand(command);											// Pec Command berechnen
 800079c:	88fb      	ldrh	r3, [r7, #6]
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f8fe 	bl	80009a0 <peccommand>
 80007a4:	4603      	mov	r3, r0
 80007a6:	83bb      	strh	r3, [r7, #28]

	// Command in cmd abspeichern
	cmd[0] = ((command  >> 8) & 0x07);
 80007a8:	88fb      	ldrh	r3, [r7, #6]
 80007aa:	0a1b      	lsrs	r3, r3, #8
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	f003 0307 	and.w	r3, r3, #7
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	753b      	strb	r3, [r7, #20]
	cmd[1] = (command & 0xFF);
 80007b8:	88fb      	ldrh	r3, [r7, #6]
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	757b      	strb	r3, [r7, #21]
	cmd[2] = ((pec_c >> 8) & 0xFF);
 80007be:	8bbb      	ldrh	r3, [r7, #28]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	75bb      	strb	r3, [r7, #22]
	cmd[3] = (pec_c & 0xFE);
 80007c8:	8bbb      	ldrh	r3, [r7, #28]
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	f023 0301 	bic.w	r3, r3, #1
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	75fb      	strb	r3, [r7, #23]

	// Daten in tmp_data abspeichern zum Senden
	for (uint8_t j = 0; j < LTC6811_DEVICES; j++)
 80007d4:	2300      	movs	r3, #0
 80007d6:	77fb      	strb	r3, [r7, #31]
 80007d8:	e035      	b.n	8000846 <ltc6811_write+0xb6>
	{
		// Schleife um Daten fuer einen IC abzuspeichern
		for (uint8_t i = 0; i < 6; i++)
 80007da:	2300      	movs	r3, #0
 80007dc:	77bb      	strb	r3, [r7, #30]
 80007de:	e016      	b.n	800080e <ltc6811_write+0x7e>
		{
			tmp_data[j*8+i] = data[j*6+i];
 80007e0:	7ffa      	ldrb	r2, [r7, #31]
 80007e2:	4613      	mov	r3, r2
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	4413      	add	r3, r2
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	461a      	mov	r2, r3
 80007ec:	7fbb      	ldrb	r3, [r7, #30]
 80007ee:	4413      	add	r3, r2
 80007f0:	461a      	mov	r2, r3
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	441a      	add	r2, r3
 80007f6:	7ffb      	ldrb	r3, [r7, #31]
 80007f8:	00d9      	lsls	r1, r3, #3
 80007fa:	7fbb      	ldrb	r3, [r7, #30]
 80007fc:	440b      	add	r3, r1
 80007fe:	7812      	ldrb	r2, [r2, #0]
 8000800:	3320      	adds	r3, #32
 8000802:	443b      	add	r3, r7
 8000804:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (uint8_t i = 0; i < 6; i++)
 8000808:	7fbb      	ldrb	r3, [r7, #30]
 800080a:	3301      	adds	r3, #1
 800080c:	77bb      	strb	r3, [r7, #30]
 800080e:	7fbb      	ldrb	r3, [r7, #30]
 8000810:	2b05      	cmp	r3, #5
 8000812:	d9e5      	bls.n	80007e0 <ltc6811_write+0x50>
		}

		// Pec berechnen pro IC einmal
		pec_d = peclookup(6, &tmp_data[j*8]);								// Pec Daten berechnen
 8000814:	7ffb      	ldrb	r3, [r7, #31]
 8000816:	00db      	lsls	r3, r3, #3
 8000818:	f107 020c 	add.w	r2, r7, #12
 800081c:	4413      	add	r3, r2
 800081e:	4619      	mov	r1, r3
 8000820:	2006      	movs	r0, #6
 8000822:	f000 f8d9 	bl	80009d8 <peclookup>
 8000826:	4603      	mov	r3, r0
 8000828:	837b      	strh	r3, [r7, #26]

		// Pec abspeichern fuer einen IC
		tmp_data[6] = ((pec_d >> 8) & 0xFF);
 800082a:	8b7b      	ldrh	r3, [r7, #26]
 800082c:	0a1b      	lsrs	r3, r3, #8
 800082e:	b29b      	uxth	r3, r3
 8000830:	b2db      	uxtb	r3, r3
 8000832:	74bb      	strb	r3, [r7, #18]
		tmp_data[7] = (pec_d & 0xFE);
 8000834:	8b7b      	ldrh	r3, [r7, #26]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	f023 0301 	bic.w	r3, r3, #1
 800083c:	b2db      	uxtb	r3, r3
 800083e:	74fb      	strb	r3, [r7, #19]
	for (uint8_t j = 0; j < LTC6811_DEVICES; j++)
 8000840:	7ffb      	ldrb	r3, [r7, #31]
 8000842:	3301      	adds	r3, #1
 8000844:	77fb      	strb	r3, [r7, #31]
 8000846:	7ffb      	ldrb	r3, [r7, #31]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d0c6      	beq.n	80007da <ltc6811_write+0x4a>
	}
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 800084c:	f7ff ff24 	bl	8000698 <wakeup_ltc6811>

	// ISOCS einschalten
	ISOCS_ENABLE();
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000856:	480d      	ldr	r0, [pc, #52]	; (800088c <ltc6811_write+0xfc>)
 8000858:	f004 fabc 	bl	8004dd4 <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 800085c:	f107 0114 	add.w	r1, r7, #20
 8000860:	2364      	movs	r3, #100	; 0x64
 8000862:	2204      	movs	r2, #4
 8000864:	480a      	ldr	r0, [pc, #40]	; (8000890 <ltc6811_write+0x100>)
 8000866:	f005 fc86 	bl	8006176 <HAL_SPI_Transmit>
	
	// Data senden
//	for (uint8_t i = 0; i < 6; i++)
//	{
		// Sende Daten fuer einen IC
		HAL_SPI_Transmit(&hspi4, tmp_data, 8, 100);
 800086a:	f107 010c 	add.w	r1, r7, #12
 800086e:	2364      	movs	r3, #100	; 0x64
 8000870:	2208      	movs	r2, #8
 8000872:	4807      	ldr	r0, [pc, #28]	; (8000890 <ltc6811_write+0x100>)
 8000874:	f005 fc7f 	bl	8006176 <HAL_SPI_Transmit>
//	}
	
	// ISOCS ausschalten
	ISOCS_DISABLE();
 8000878:	2201      	movs	r2, #1
 800087a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800087e:	4803      	ldr	r0, [pc, #12]	; (800088c <ltc6811_write+0xfc>)
 8000880:	f004 faa8 	bl	8004dd4 <HAL_GPIO_WritePin>
		ITM_SendChar(' ');
		ITM_SendNumber(data[i]);
	}
	ITM_SendChar('\n');
#endif
}
 8000884:	bf00      	nop
 8000886:	3720      	adds	r7, #32
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40021000 	.word	0x40021000
 8000890:	2000015c 	.word	0x2000015c

08000894 <ltc6811_read>:
//----------------------------------------------------------------------

// Broadcast Read Command
//----------------------------------------------------------------------
uint8_t ltc6811_read(uint16_t command, uint8_t* data)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	6039      	str	r1, [r7, #0]
 800089e:	80fb      	strh	r3, [r7, #6]

	// PEC berechnen, Anhand Command
	uint16_t pec;															// pec = Zwischenspeicher 16-Bit Command
	uint16_t tmp;															// Zwischenspeicher fuer Pruefung CRC
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	pec = peccommand(command);
 80008a0:	88fb      	ldrh	r3, [r7, #6]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f87c 	bl	80009a0 <peccommand>
 80008a8:	4603      	mov	r3, r0
 80008aa:	82bb      	strh	r3, [r7, #20]
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 80008ac:	f7ff fef4 	bl	8000698 <wakeup_ltc6811>

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 80008b0:	88fb      	ldrh	r3, [r7, #6]
 80008b2:	0a1b      	lsrs	r3, r3, #8
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	f003 0307 	and.w	r3, r3, #7
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	733b      	strb	r3, [r7, #12]
	cmd[1] = (command & 0xFF);
 80008c0:	88fb      	ldrh	r3, [r7, #6]
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	737b      	strb	r3, [r7, #13]
	cmd[2] = ((pec >> 8) & 0xFF);
 80008c6:	8abb      	ldrh	r3, [r7, #20]
 80008c8:	0a1b      	lsrs	r3, r3, #8
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	73bb      	strb	r3, [r7, #14]
	cmd[3] = (pec & 0xFE);
 80008d0:	8abb      	ldrh	r3, [r7, #20]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	f023 0301 	bic.w	r3, r3, #1
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	73fb      	strb	r3, [r7, #15]

	// ISOCS einschalten
	ISOCS_ENABLE();
 80008dc:	2200      	movs	r2, #0
 80008de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008e2:	482d      	ldr	r0, [pc, #180]	; (8000998 <ltc6811_read+0x104>)
 80008e4:	f004 fa76 	bl	8004dd4 <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 80008e8:	f107 010c 	add.w	r1, r7, #12
 80008ec:	2364      	movs	r3, #100	; 0x64
 80008ee:	2204      	movs	r2, #4
 80008f0:	482a      	ldr	r0, [pc, #168]	; (800099c <ltc6811_read+0x108>)
 80008f2:	f005 fc40 	bl	8006176 <HAL_SPI_Transmit>
	
	// Data empfangen
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 80008f6:	2300      	movs	r3, #0
 80008f8:	75fb      	strb	r3, [r7, #23]
 80008fa:	e00c      	b.n	8000916 <ltc6811_read+0x82>
	{
		// Dummy Byte senden
		HAL_SPI_Receive(&hspi4, &data[i*8], 8, 100);
 80008fc:	7dfb      	ldrb	r3, [r7, #23]
 80008fe:	00db      	lsls	r3, r3, #3
 8000900:	461a      	mov	r2, r3
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	1899      	adds	r1, r3, r2
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	2208      	movs	r2, #8
 800090a:	4824      	ldr	r0, [pc, #144]	; (800099c <ltc6811_read+0x108>)
 800090c:	f005 fda1 	bl	8006452 <HAL_SPI_Receive>
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 8000910:	7dfb      	ldrb	r3, [r7, #23]
 8000912:	3301      	adds	r3, #1
 8000914:	75fb      	strb	r3, [r7, #23]
 8000916:	7dfb      	ldrb	r3, [r7, #23]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d0ef      	beq.n	80008fc <ltc6811_read+0x68>
	}

	// Pec zuruecksetzen
	pec = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	82bb      	strh	r3, [r7, #20]

	// Pec pruefen
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 8000920:	2300      	movs	r3, #0
 8000922:	75bb      	strb	r3, [r7, #22]
 8000924:	e02a      	b.n	800097c <ltc6811_read+0xe8>
	{
		// Variante 1, Pec berechnen und pruefen, ob richtiger Pec mitgesendet wurde
		tmp = ((data[i + 6] << 8) + data[i + 7]);
 8000926:	7dbb      	ldrb	r3, [r7, #22]
 8000928:	3306      	adds	r3, #6
 800092a:	683a      	ldr	r2, [r7, #0]
 800092c:	4413      	add	r3, r2
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b29b      	uxth	r3, r3
 8000932:	021b      	lsls	r3, r3, #8
 8000934:	b29a      	uxth	r2, r3
 8000936:	7dbb      	ldrb	r3, [r7, #22]
 8000938:	3307      	adds	r3, #7
 800093a:	6839      	ldr	r1, [r7, #0]
 800093c:	440b      	add	r3, r1
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	b29b      	uxth	r3, r3
 8000942:	4413      	add	r3, r2
 8000944:	827b      	strh	r3, [r7, #18]
		pec = peclookup(6, &data[i*8]);
 8000946:	7dbb      	ldrb	r3, [r7, #22]
 8000948:	00db      	lsls	r3, r3, #3
 800094a:	461a      	mov	r2, r3
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	4413      	add	r3, r2
 8000950:	4619      	mov	r1, r3
 8000952:	2006      	movs	r0, #6
 8000954:	f000 f840 	bl	80009d8 <peclookup>
 8000958:	4603      	mov	r3, r0
 800095a:	82bb      	strh	r3, [r7, #20]
			uartTransmit("\n", 1);
		}
#endif

		// Pec zuruecksetzen
		pec = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	82bb      	strh	r3, [r7, #20]

		// Variante 2, Daten inklusive Pec mit durch Peccheck pruefen, ob Ergebnis gleich 0 ist
		pec = peccheck(8, &data[i*8]);
 8000960:	7dbb      	ldrb	r3, [r7, #22]
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	461a      	mov	r2, r3
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	4413      	add	r3, r2
 800096a:	4619      	mov	r1, r3
 800096c:	2008      	movs	r0, #8
 800096e:	f000 f867 	bl	8000a40 <peccheck>
 8000972:	4603      	mov	r3, r0
 8000974:	82bb      	strh	r3, [r7, #20]
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 8000976:	7dbb      	ldrb	r3, [r7, #22]
 8000978:	3301      	adds	r3, #1
 800097a:	75bb      	strb	r3, [r7, #22]
 800097c:	7dbb      	ldrb	r3, [r7, #22]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d0d1      	beq.n	8000926 <ltc6811_read+0x92>
#endif
	}


	// ISOCS ausschalten
	ISOCS_DISABLE();
 8000982:	2201      	movs	r2, #1
 8000984:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000988:	4803      	ldr	r0, [pc, #12]	; (8000998 <ltc6811_read+0x104>)
 800098a:	f004 fa23 	bl	8004dd4 <HAL_GPIO_WritePin>
		ITM_SendNumber(data[i]);
	}
	ITM_SendChar('\n');
#endif

	return 0;
 800098e:	2300      	movs	r3, #0
}
 8000990:	4618      	mov	r0, r3
 8000992:	3718      	adds	r7, #24
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40021000 	.word	0x40021000
 800099c:	2000015c 	.word	0x2000015c

080009a0 <peccommand>:
//----------------------------------------------------------------------

// Pec Command bauen
//----------------------------------------------------------------------
uint16_t peccommand(uint16_t command)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	80fb      	strh	r3, [r7, #6]
	// Variable definieren
	uint8_t pec[2];															// pec = Zwischenspeicher 16-Bit Command in 2x 8-Bit Bytes
	
	// 16 Bit Command in 8 Bit Array uebertragen
	pec[1] = (command & 0xFF);												// pec[1] = lower Command Byte
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	737b      	strb	r3, [r7, #13]
	pec[0] = ((command >> 8) & 0x07);										// pec[0] = upper Command Byte
 80009b0:	88fb      	ldrh	r3, [r7, #6]
 80009b2:	0a1b      	lsrs	r3, r3, #8
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	f003 0307 	and.w	r3, r3, #7
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	733b      	strb	r3, [r7, #12]
	
	// Pec zurueckgeben
	return peclookup(2, pec);
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	4619      	mov	r1, r3
 80009c6:	2002      	movs	r0, #2
 80009c8:	f000 f806 	bl	80009d8 <peclookup>
 80009cc:	4603      	mov	r3, r0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <peclookup>:
//----------------------------------------------------------------------

// Pec kalculieren (Datasheet ltc6811 Page 76, Datasheet ltc6811 Page 72)
//----------------------------------------------------------------------
uint16_t peclookup(uint8_t len,	uint8_t *data)								// len = Anzahl Byte, data = Daten fuer die Pec ausgewaehlt wird
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	6039      	str	r1, [r7, #0]
 80009e2:	71fb      	strb	r3, [r7, #7]
	// Variable definieren
	uint16_t remainder, addr;												// remainder = Zwischenspeicher Pec, addr = Zwischenspeicher Addresse
	remainder = 16;															// Initialisiere reminder mit 16 (0b0000000000010000)
 80009e4:	2310      	movs	r3, #16
 80009e6:	81fb      	strh	r3, [r7, #14]
	
	// Schleife fuer die Pec-Calculation
	for(uint8_t i = 0; i < len; i++)
 80009e8:	2300      	movs	r3, #0
 80009ea:	737b      	strb	r3, [r7, #13]
 80009ec:	e019      	b.n	8000a22 <peclookup+0x4a>
	{
		// Kalkuliere Pec Anhand der Lookuptabelle
		addr = ((remainder >> 7) ^ data[i]) & 0xFF;							// Tabellenaddresse berechnen
 80009ee:	89fb      	ldrh	r3, [r7, #14]
 80009f0:	09db      	lsrs	r3, r3, #7
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	7b7b      	ldrb	r3, [r7, #13]
 80009f6:	6839      	ldr	r1, [r7, #0]
 80009f8:	440b      	add	r3, r1
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	4053      	eors	r3, r2
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ pec15Table[addr];					// Pec berechnen
 8000a06:	89fb      	ldrh	r3, [r7, #14]
 8000a08:	021b      	lsls	r3, r3, #8
 8000a0a:	b21a      	sxth	r2, r3
 8000a0c:	897b      	ldrh	r3, [r7, #10]
 8000a0e:	490b      	ldr	r1, [pc, #44]	; (8000a3c <peclookup+0x64>)
 8000a10:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000a14:	b21b      	sxth	r3, r3
 8000a16:	4053      	eors	r3, r2
 8000a18:	b21b      	sxth	r3, r3
 8000a1a:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i < len; i++)
 8000a1c:	7b7b      	ldrb	r3, [r7, #13]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	737b      	strb	r3, [r7, #13]
 8000a22:	7b7a      	ldrb	r2, [r7, #13]
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d3e1      	bcc.n	80009ee <peclookup+0x16>
//		uartTransmitNumber(data[i], 16);
//		uartTransmit("\n", 1);
	}
	
	// Pec zurueckgeben
	return (remainder << 1);												// Der Pec hat eine 0 als LSB, remainder muss um 1 nach links geshiftet werden
 8000a2a:	89fb      	ldrh	r3, [r7, #14]
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	b29b      	uxth	r3, r3
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	08009b9c 	.word	0x08009b9c

08000a40 <peccheck>:
//----------------------------------------------------------------------*/

// Validiere Pec von Daten
//----------------------------------------------------------------------
uint8_t peccheck(uint8_t len, uint8_t *data)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	6039      	str	r1, [r7, #0]
 8000a4a:	71fb      	strb	r3, [r7, #7]
	// Variable definieren
	uint16_t pec = peclookup(len, data);
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	6839      	ldr	r1, [r7, #0]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ffc1 	bl	80009d8 <peclookup>
 8000a56:	4603      	mov	r3, r0
 8000a58:	81fb      	strh	r3, [r7, #14]

	// Wenn Ergebnis 0, ist Pec OK
	if (pec == 0)
 8000a5a:	89fb      	ldrh	r3, [r7, #14]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d101      	bne.n	8000a64 <peccheck+0x24>
	{
		return 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	e000      	b.n	8000a66 <peccheck+0x26>
	}
	// Wenn Ergebnis 1, ist Pec nicht OK
	else
	{
		return 1;
 8000a64:	2301      	movs	r3, #1
	}
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <ltc6811_check>:
//----------------------------------------------------------------------

// LTC6811 Status auslesen und auswerten
//----------------------------------------------------------------------
uint8_t ltc6811_check(void)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b092      	sub	sp, #72	; 0x48
 8000a72:	af00      	add	r7, sp, #0
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Check LTC6811.\n");
#endif

	// Variablen definieren
	uint8_t tmp_data[64] = {0}, error = 0;									// Speicher Registerwerte, Fehlerspeicher
 8000a74:	2300      	movs	r3, #0
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	223c      	movs	r2, #60	; 0x3c
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f008 fcf5 	bl	8009470 <memset>
 8000a86:	2300      	movs	r3, #0
 8000a88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000a8c:	f7ff fe04 	bl	8000698 <wakeup_ltc6811>

	// Alle Register zuruecksetzen
	ltc6811(CLRCELL);														// Register Zellspannung auf default setzen
 8000a90:	f240 7011 	movw	r0, #1809	; 0x711
 8000a94:	f7ff fe28 	bl	80006e8 <ltc6811>
	ltc6811(CLRAUX);														// Register GPIO-Spannung auf default setzen
 8000a98:	f240 7012 	movw	r0, #1810	; 0x712
 8000a9c:	f7ff fe24 	bl	80006e8 <ltc6811>
	ltc6811(CLRSTAT);														// Register Interne Messungen auf default setzen
 8000aa0:	f240 7013 	movw	r0, #1811	; 0x713
 8000aa4:	f7ff fe20 	bl	80006e8 <ltc6811>

	// Lese Register Status B aus
	ltc6811_read(RDSTATB, &tmp_data[0]);
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	4619      	mov	r1, r3
 8000aac:	2012      	movs	r0, #18
 8000aae:	f7ff fef1 	bl	8000894 <ltc6811_read>
		ITM_SendChar('\n');
#endif
	}

	// Selbsttest 1 Digitale Filter
	if (ltc6811_test(ST1 | MD73) == 1)
 8000ab2:	f44f 7090 	mov.w	r0, #288	; 0x120
 8000ab6:	f000 f83f 	bl	8000b38 <ltc6811_test>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d105      	bne.n	8000acc <ltc6811_check+0x5e>
	{
		error |= (1 << 1);													// Selbsttest 1 nicht bestanden
 8000ac0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#ifdef DEBUG_LTC6811
		ITM_SendString("Selbsttest 1 Fehler");
		ITM_SendChar('\n');
#endif
	}
	HAL_Delay(300);
 8000acc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ad0:	f003 f87c 	bl	8003bcc <HAL_Delay>

	// Selbsttest 2 Digitale Filter
	if (ltc6811_test(ST2 | MD73) == 1)
 8000ad4:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8000ad8:	f000 f82e 	bl	8000b38 <ltc6811_test>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d105      	bne.n	8000aee <ltc6811_check+0x80>
	{
		error |= (1 << 2);													// Selbsttest 2 nicht bestanden
 8000ae2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#ifdef DEBUG_LTC6811
		ITM_SendString("Selbsttest 2 Fehler");
		ITM_SendChar('\n');
#endif
	}
	HAL_Delay(300);
 8000aee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000af2:	f003 f86b 	bl	8003bcc <HAL_Delay>

	// Selbsttest Multiplexer
	if (ltc6811_diagn() == 1)
 8000af6:	f000 fa09 	bl	8000f0c <ltc6811_diagn>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d105      	bne.n	8000b0c <ltc6811_check+0x9e>
	{
		error |= (1 << 3);													// Multiplexertest nicht bestanden
 8000b00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b04:	f043 0308 	orr.w	r3, r3, #8
 8000b08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#ifdef DEBUG_LTC6811
		ITM_SendString("Multiplexer Fehler");
		ITM_SendChar('\n');
#endif
	}
	HAL_Delay(300);
 8000b0c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b10:	f003 f85c 	bl	8003bcc <HAL_Delay>

	// Open Wire Check durchfuehren
	if (ltc6811_openwire() == 1)
 8000b14:	f000 fa1c 	bl	8000f50 <ltc6811_openwire>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d105      	bne.n	8000b2a <ltc6811_check+0xbc>
	{
		error |= (1 << 4);													// Open-Wire Test nicht bestanden
 8000b1e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b22:	f043 0310 	orr.w	r3, r3, #16
 8000b26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	ITM_SendNumber(error);
	ITM_SendChar('\n');
#endif

	// Fehlercode zurueckgeben
	return error;															// Fehler 0 = alles Ok, Fehler > 0 = Selbsttest fehlerhaft
 8000b2a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3748      	adds	r7, #72	; 0x48
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <ltc6811_test>:
//----------------------------------------------------------------------

// Selbsttest Digitale Filter (Datasheet ltc6811 Page 28)
//----------------------------------------------------------------------
uint8_t ltc6811_test(uint16_t command)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b094      	sub	sp, #80	; 0x50
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	80fb      	strh	r3, [r7, #6]
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Test LTC6811.\n");
#endif

	// Variablen definieren
	uint8_t tmp_data[64] = {0};												// Speicher Registerwerte
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	f107 030c 	add.w	r3, r7, #12
 8000b4a:	223c      	movs	r2, #60	; 0x3c
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f008 fc8e 	bl	8009470 <memset>
	uint16_t tmp = 0, test_pattern = 0;										// Zwischenspeicher, Kontrollvariable Selbsttest
 8000b54:	2300      	movs	r3, #0
 8000b56:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	// Commands fuer Status senden  Test 1
	ltc6811(CVST | command);												// Digitalfilter Check Zellspannungen
 8000b60:	88fb      	ldrh	r3, [r7, #6]
 8000b62:	f443 7301 	orr.w	r3, r3, #516	; 0x204
 8000b66:	f043 0303 	orr.w	r3, r3, #3
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fdbb 	bl	80006e8 <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 8000b72:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b76:	f003 f829 	bl	8003bcc <HAL_Delay>
	ltc6811(AUXST | command);												// Digitalfilter Check GPIO-Spannungen
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b80:	f043 0307 	orr.w	r3, r3, #7
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fdae 	bl	80006e8 <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 8000b8c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b90:	f003 f81c 	bl	8003bcc <HAL_Delay>
	ltc6811(STATST | command);												// Digitalfilter Check Interne Messungen
 8000b94:	88fb      	ldrh	r3, [r7, #6]
 8000b96:	f443 6381 	orr.w	r3, r3, #1032	; 0x408
 8000b9a:	f043 0307 	orr.w	r3, r3, #7
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fda1 	bl	80006e8 <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 8000ba6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000baa:	f003 f80f 	bl	8003bcc <HAL_Delay>

	// Register auslesen Test 1
	// Spannungsregister
	ltc6811_read(RDCVA, &tmp_data[0]);										// Lese Register CVA zurueck
 8000bae:	f107 0308 	add.w	r3, r7, #8
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	2004      	movs	r0, #4
 8000bb6:	f7ff fe6d 	bl	8000894 <ltc6811_read>
	ltc6811_read(RDCVB, &tmp_data[8]);										// Lese Register CVB zurueck
 8000bba:	f107 0308 	add.w	r3, r7, #8
 8000bbe:	3308      	adds	r3, #8
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	2006      	movs	r0, #6
 8000bc4:	f7ff fe66 	bl	8000894 <ltc6811_read>
	ltc6811_read(RDCVC, &tmp_data[16]);										// Lese Register CVC zurueck
 8000bc8:	f107 0308 	add.w	r3, r7, #8
 8000bcc:	3310      	adds	r3, #16
 8000bce:	4619      	mov	r1, r3
 8000bd0:	2008      	movs	r0, #8
 8000bd2:	f7ff fe5f 	bl	8000894 <ltc6811_read>
	ltc6811_read(RDCVD, &tmp_data[24]);										// Lese Register CVD zurueck
 8000bd6:	f107 0308 	add.w	r3, r7, #8
 8000bda:	3318      	adds	r3, #24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	200a      	movs	r0, #10
 8000be0:	f7ff fe58 	bl	8000894 <ltc6811_read>

	// GPIO-Register
	ltc6811_read(RDAUXA, &tmp_data[32]);									// Lese Register AUXA zurueck
 8000be4:	f107 0308 	add.w	r3, r7, #8
 8000be8:	3320      	adds	r3, #32
 8000bea:	4619      	mov	r1, r3
 8000bec:	200c      	movs	r0, #12
 8000bee:	f7ff fe51 	bl	8000894 <ltc6811_read>
	ltc6811_read(RDAUXB, &tmp_data[40]);									// Lese Register AUXB zurueck
 8000bf2:	f107 0308 	add.w	r3, r7, #8
 8000bf6:	3328      	adds	r3, #40	; 0x28
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	200e      	movs	r0, #14
 8000bfc:	f7ff fe4a 	bl	8000894 <ltc6811_read>

	// Statusregister
	ltc6811_read(RDSTATA, &tmp_data[48]);									// Lese Register STATA zurueck
 8000c00:	f107 0308 	add.w	r3, r7, #8
 8000c04:	3330      	adds	r3, #48	; 0x30
 8000c06:	4619      	mov	r1, r3
 8000c08:	2010      	movs	r0, #16
 8000c0a:	f7ff fe43 	bl	8000894 <ltc6811_read>
	ltc6811_read(RDSTATB, &tmp_data[56]);									// Lese Register STATB zurueck
 8000c0e:	f107 0308 	add.w	r3, r7, #8
 8000c12:	3338      	adds	r3, #56	; 0x38
 8000c14:	4619      	mov	r1, r3
 8000c16:	2012      	movs	r0, #18
 8000c18:	f7ff fe3c 	bl	8000894 <ltc6811_read>

	// Lookup fuer Selbstest digitaler Filter
	// Kontrollvariable heraussuchen
	if (command & MD2714)													// Wenn Sampling Frequenz = MD2714
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d032      	beq.n	8000c8c <ltc6811_test+0x154>
	{
		// Wenn ADCOPT gesetzt
		if (Ltc6811_Conf.ADCOPT == 1)
 8000c26:	4bb8      	ldr	r3, [pc, #736]	; (8000f08 <ltc6811_test+0x3d0>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d013      	beq.n	8000c5c <ltc6811_test+0x124>
		{
			// Wenn Selbsttest 1 gewaehlt
			if (command == ST1)
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	2b20      	cmp	r3, #32
 8000c38:	d104      	bne.n	8000c44 <ltc6811_test+0x10c>
			{
				test_pattern = 0x9553;										// Registerwert bei 14kHz
 8000c3a:	f249 5353 	movw	r3, #38227	; 0x9553
 8000c3e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c42:	e03a      	b.n	8000cba <ltc6811_test+0x182>
			}
			// Wenn Selbsttest 2 gewaehlt
			else if (command == ST2)
 8000c44:	88fb      	ldrh	r3, [r7, #6]
 8000c46:	2b40      	cmp	r3, #64	; 0x40
 8000c48:	d104      	bne.n	8000c54 <ltc6811_test+0x11c>
			{
				test_pattern = 0x6AAC;										// Registerwert bei 14kHz
 8000c4a:	f646 23ac 	movw	r3, #27308	; 0x6aac
 8000c4e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c52:	e032      	b.n	8000cba <ltc6811_test+0x182>
			}
			// Bei fehlerhaften Einstellungen
			else
			{
				test_pattern = 0;											// Registerwert = 0 damit Fehler ausloest
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c5a:	e02e      	b.n	8000cba <ltc6811_test+0x182>
			}
		}
		else																// Wenn ADCOPT nicht gesetzt
		{
			// Wenn Selbsttest 1 gewaehlt
			if (command & ST1)
 8000c5c:	88fb      	ldrh	r3, [r7, #6]
 8000c5e:	f003 0320 	and.w	r3, r3, #32
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d004      	beq.n	8000c70 <ltc6811_test+0x138>
			{
				test_pattern = 0x9565;										// Registerwert bei 27kHz
 8000c66:	f249 5365 	movw	r3, #38245	; 0x9565
 8000c6a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c6e:	e024      	b.n	8000cba <ltc6811_test+0x182>
			}
			// Wenn Selbsttest 2 gewaehlt
			else if (command & ST2)
 8000c70:	88fb      	ldrh	r3, [r7, #6]
 8000c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d004      	beq.n	8000c84 <ltc6811_test+0x14c>
			{
				test_pattern = 0x6A9A;										// Registerwert bei 27kHz
 8000c7a:	f646 239a 	movw	r3, #27290	; 0x6a9a
 8000c7e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c82:	e01a      	b.n	8000cba <ltc6811_test+0x182>
			}
			// Bei fehlerhaften Einstellungen
			else
			{
				test_pattern = 0;											// Registerwert = 0 damit Fehler ausloest
 8000c84:	2300      	movs	r3, #0
 8000c86:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c8a:	e016      	b.n	8000cba <ltc6811_test+0x182>
		}
	}
	else
	{
		// Wenn Selbsttest 1 gewaehlt
		if (command & ST1)
 8000c8c:	88fb      	ldrh	r3, [r7, #6]
 8000c8e:	f003 0320 	and.w	r3, r3, #32
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d004      	beq.n	8000ca0 <ltc6811_test+0x168>
		{
			test_pattern = 0x9555;											// Registerwert bei allen anderen Sampling Frequenzen
 8000c96:	f249 5355 	movw	r3, #38229	; 0x9555
 8000c9a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c9e:	e00c      	b.n	8000cba <ltc6811_test+0x182>
		}
		// Wenn Selbsttest 2 gewaehlt
		else if (command & ST2)
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
 8000ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d004      	beq.n	8000cb4 <ltc6811_test+0x17c>
		{
			test_pattern = 0x6AAA;											// Registerwert bei allen anderen Sampling Frequenzen
 8000caa:	f646 23aa 	movw	r3, #27306	; 0x6aaa
 8000cae:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000cb2:	e002      	b.n	8000cba <ltc6811_test+0x182>
		}
		// Bei fehlerhaften Einstellungen
		else
		{
			test_pattern = 0;												// Registerwert = 0 damit Fehler ausloest
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		}
	}

	// Daten pruefen Test 1
	for (uint8_t i=0; i<22; i++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8000cc0:	e117      	b.n	8000ef2 <ltc6811_test+0x3ba>
	{
		// Auswaehlen welches Register im Array steht
		switch (i)
 8000cc2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000cc6:	2b1d      	cmp	r3, #29
 8000cc8:	f200 8105 	bhi.w	8000ed6 <ltc6811_test+0x39e>
 8000ccc:	a201      	add	r2, pc, #4	; (adr r2, 8000cd4 <ltc6811_test+0x19c>)
 8000cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd2:	bf00      	nop
 8000cd4:	08000d4d 	.word	0x08000d4d
 8000cd8:	08000d4d 	.word	0x08000d4d
 8000cdc:	08000d4d 	.word	0x08000d4d
 8000ce0:	08000d7b 	.word	0x08000d7b
 8000ce4:	08000d7b 	.word	0x08000d7b
 8000ce8:	08000d7b 	.word	0x08000d7b
 8000cec:	08000dab 	.word	0x08000dab
 8000cf0:	08000dab 	.word	0x08000dab
 8000cf4:	08000dab 	.word	0x08000dab
 8000cf8:	08000ddd 	.word	0x08000ddd
 8000cfc:	08000ddd 	.word	0x08000ddd
 8000d00:	08000ddd 	.word	0x08000ddd
 8000d04:	08000e0f 	.word	0x08000e0f
 8000d08:	08000e0f 	.word	0x08000e0f
 8000d0c:	08000e0f 	.word	0x08000e0f
 8000d10:	08000e41 	.word	0x08000e41
 8000d14:	08000e41 	.word	0x08000e41
 8000d18:	08000e41 	.word	0x08000e41
 8000d1c:	08000e73 	.word	0x08000e73
 8000d20:	08000ed7 	.word	0x08000ed7
 8000d24:	08000e73 	.word	0x08000e73
 8000d28:	08000ea5 	.word	0x08000ea5
 8000d2c:	08000ed7 	.word	0x08000ed7
 8000d30:	08000ed7 	.word	0x08000ed7
 8000d34:	08000ed7 	.word	0x08000ed7
 8000d38:	08000ed7 	.word	0x08000ed7
 8000d3c:	08000ed7 	.word	0x08000ed7
 8000d40:	08000ed7 	.word	0x08000ed7
 8000d44:	08000ed7 	.word	0x08000ed7
 8000d48:	08000e73 	.word	0x08000e73
		{
			// Register CVA
			case 0:
			case 1:
			case 2:
				tmp = ((tmp_data[i*2+1]<<8)|tmp_data[i*2]);					// Register CVA umwandeln
 8000d4c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	3301      	adds	r3, #1
 8000d54:	3350      	adds	r3, #80	; 0x50
 8000d56:	443b      	add	r3, r7
 8000d58:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d5c:	021b      	lsls	r3, r3, #8
 8000d5e:	b21a      	sxth	r2, r3
 8000d60:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	3350      	adds	r3, #80	; 0x50
 8000d68:	443b      	add	r3, r7
 8000d6a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d6e:	b21b      	sxth	r3, r3
 8000d70:	4313      	orrs	r3, r2
 8000d72:	b21b      	sxth	r3, r3
 8000d74:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000d78:	e0ae      	b.n	8000ed8 <ltc6811_test+0x3a0>
			// Register CVB
			case 3:
			case 4:
			case 5:
				tmp = ((tmp_data[i*2+3] << 8)|tmp_data[i*2+2]);				// Register CVB umwandeln
 8000d7a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	3303      	adds	r3, #3
 8000d82:	3350      	adds	r3, #80	; 0x50
 8000d84:	443b      	add	r3, r7
 8000d86:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	b21a      	sxth	r2, r3
 8000d8e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d92:	3301      	adds	r3, #1
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	3350      	adds	r3, #80	; 0x50
 8000d98:	443b      	add	r3, r7
 8000d9a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d9e:	b21b      	sxth	r3, r3
 8000da0:	4313      	orrs	r3, r2
 8000da2:	b21b      	sxth	r3, r3
 8000da4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000da8:	e096      	b.n	8000ed8 <ltc6811_test+0x3a0>
			// Register CVC
			case 6:
			case 7:
			case 8:
				tmp = ((tmp_data[(i+2)*2+1] << 8)|tmp_data[(i+2)*2]);		// Register CVC umwandeln
 8000daa:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000dae:	3302      	adds	r3, #2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	3301      	adds	r3, #1
 8000db4:	3350      	adds	r3, #80	; 0x50
 8000db6:	443b      	add	r3, r7
 8000db8:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000dbc:	021b      	lsls	r3, r3, #8
 8000dbe:	b21a      	sxth	r2, r3
 8000dc0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000dc4:	3302      	adds	r3, #2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	3350      	adds	r3, #80	; 0x50
 8000dca:	443b      	add	r3, r7
 8000dcc:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000dd0:	b21b      	sxth	r3, r3
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	b21b      	sxth	r3, r3
 8000dd6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000dda:	e07d      	b.n	8000ed8 <ltc6811_test+0x3a0>
			// Register CVD
			case 9:
			case 10:
			case 11:
				tmp = ((tmp_data[(i+2)*2+3] << 8)|tmp_data[(i+2)*2+2]);		// Register CVD umwandeln
 8000ddc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000de0:	3302      	adds	r3, #2
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	3303      	adds	r3, #3
 8000de6:	3350      	adds	r3, #80	; 0x50
 8000de8:	443b      	add	r3, r7
 8000dea:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000dee:	021b      	lsls	r3, r3, #8
 8000df0:	b21a      	sxth	r2, r3
 8000df2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000df6:	3303      	adds	r3, #3
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	3350      	adds	r3, #80	; 0x50
 8000dfc:	443b      	add	r3, r7
 8000dfe:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e02:	b21b      	sxth	r3, r3
 8000e04:	4313      	orrs	r3, r2
 8000e06:	b21b      	sxth	r3, r3
 8000e08:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000e0c:	e064      	b.n	8000ed8 <ltc6811_test+0x3a0>
			// Register AUXA
			case 12:
			case 13:
			case 14:
				tmp = ((tmp_data[(i+4)*2+1] << 8)|tmp_data[(i+4)*2]);		// Register AUXA umwandeln
 8000e0e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e12:	3304      	adds	r3, #4
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	3301      	adds	r3, #1
 8000e18:	3350      	adds	r3, #80	; 0x50
 8000e1a:	443b      	add	r3, r7
 8000e1c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	b21a      	sxth	r2, r3
 8000e24:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e28:	3304      	adds	r3, #4
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	3350      	adds	r3, #80	; 0x50
 8000e2e:	443b      	add	r3, r7
 8000e30:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e34:	b21b      	sxth	r3, r3
 8000e36:	4313      	orrs	r3, r2
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000e3e:	e04b      	b.n	8000ed8 <ltc6811_test+0x3a0>
			// Register AUXB
			case 15:
			case 16:
			case 17:
				tmp = ((tmp_data[(i+4)*2+3] << 8)|tmp_data[(i+4)*2+2]);		// Register AUXB umwandeln
 8000e40:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e44:	3304      	adds	r3, #4
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	3303      	adds	r3, #3
 8000e4a:	3350      	adds	r3, #80	; 0x50
 8000e4c:	443b      	add	r3, r7
 8000e4e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	b21a      	sxth	r2, r3
 8000e56:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e5a:	3305      	adds	r3, #5
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	3350      	adds	r3, #80	; 0x50
 8000e60:	443b      	add	r3, r7
 8000e62:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e66:	b21b      	sxth	r3, r3
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	b21b      	sxth	r3, r3
 8000e6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000e70:	e032      	b.n	8000ed8 <ltc6811_test+0x3a0>
			// Register STATA
			case 18:
			case 29:
			case 20:
				tmp = ((tmp_data[(i+6)*2+1] << 8)|tmp_data[(i+6)*2]);		// Register STATA umwandeln
 8000e72:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e76:	3306      	adds	r3, #6
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	3350      	adds	r3, #80	; 0x50
 8000e7e:	443b      	add	r3, r7
 8000e80:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e84:	021b      	lsls	r3, r3, #8
 8000e86:	b21a      	sxth	r2, r3
 8000e88:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e8c:	3306      	adds	r3, #6
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	3350      	adds	r3, #80	; 0x50
 8000e92:	443b      	add	r3, r7
 8000e94:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e98:	b21b      	sxth	r3, r3
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	b21b      	sxth	r3, r3
 8000e9e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000ea2:	e019      	b.n	8000ed8 <ltc6811_test+0x3a0>
			// Register STATB
			case 21:
				tmp = ((tmp_data[(i+6)*2+3] << 8)|tmp_data[(i+6)*2+2]);		// Register STATB umwandeln
 8000ea4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ea8:	3306      	adds	r3, #6
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	3303      	adds	r3, #3
 8000eae:	3350      	adds	r3, #80	; 0x50
 8000eb0:	443b      	add	r3, r7
 8000eb2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000eb6:	021b      	lsls	r3, r3, #8
 8000eb8:	b21a      	sxth	r2, r3
 8000eba:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ebe:	3307      	adds	r3, #7
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	3350      	adds	r3, #80	; 0x50
 8000ec4:	443b      	add	r3, r7
 8000ec6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000eca:	b21b      	sxth	r3, r3
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	b21b      	sxth	r3, r3
 8000ed0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000ed4:	e000      	b.n	8000ed8 <ltc6811_test+0x3a0>
			// Kein Register
			default:
				break;
 8000ed6:	bf00      	nop
		}

		// Vergleiche Registerwert mit Vorgabewert aus Datenblatt
		if (tmp != test_pattern)
 8000ed8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8000edc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d001      	beq.n	8000ee8 <ltc6811_test+0x3b0>
#ifdef DEBUG_LTC6811
			ITM_SendString("Test failed: ");
			ITM_SendNumber(i);
			ITM_SendChar('\n');
#endif
			return 1;														// Selbsttest 1 nicht OK
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e00a      	b.n	8000efe <ltc6811_test+0x3c6>
	for (uint8_t i=0; i<22; i++)
 8000ee8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000eec:	3301      	adds	r3, #1
 8000eee:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8000ef2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ef6:	2b15      	cmp	r3, #21
 8000ef8:	f67f aee3 	bls.w	8000cc2 <ltc6811_test+0x18a>
		}
	}
#ifdef DEBUG_LTC6811
	ITM_SendString("Test passed\n");
#endif
	return 0;																// Selbsttest 1 OK
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3750      	adds	r7, #80	; 0x50
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000028 	.word	0x20000028

08000f0c <ltc6811_diagn>:
//----------------------------------------------------------------------

// Selbstdiagnose Multiplexer (Datasheet ltc6811 Page 27)
//----------------------------------------------------------------------
uint8_t ltc6811_diagn(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Diagnostic LTC6811.\n");
#endif

	// Variablen definieren
	uint8_t tmp_data[8] = {0};												// Speicher Registerwerte
 8000f12:	2300      	movs	r3, #0
 8000f14:	603b      	str	r3, [r7, #0]
 8000f16:	2300      	movs	r3, #0
 8000f18:	607b      	str	r3, [r7, #4]

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000f1a:	f7ff fbbd 	bl	8000698 <wakeup_ltc6811>

	// Command senden
	ltc6811(DIAGN);															// Multiplexer Check
 8000f1e:	f240 7015 	movw	r0, #1813	; 0x715
 8000f22:	f7ff fbe1 	bl	80006e8 <ltc6811>

	// Verzoegerungszeit 10ms, DIAG Befehl braucht ca. 400µs bis 4ms
	HAL_Delay(10);
 8000f26:	200a      	movs	r0, #10
 8000f28:	f002 fe50 	bl	8003bcc <HAL_Delay>

	// Lese Register
	ltc6811_read(RDSTATB, &tmp_data[0]);									// Lese Status B Register fuer Multiplexer Check
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	4619      	mov	r1, r3
 8000f30:	2012      	movs	r0, #18
 8000f32:	f7ff fcaf 	bl	8000894 <ltc6811_read>

	// Multiplexer pruefen
	if (tmp_data[5] & (1 << 1))
 8000f36:	797b      	ldrb	r3, [r7, #5]
 8000f38:	f003 0302 	and.w	r3, r3, #2
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <ltc6811_diagn+0x38>
	{
		return 1;															// Multiplexertest nicht OK
 8000f40:	2301      	movs	r3, #1
 8000f42:	e000      	b.n	8000f46 <ltc6811_diagn+0x3a>
	}

	return 0;																// Multiplexertest OK
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <ltc6811_openwire>:
//----------------------------------------------------------------------

// LTC6811 Openwire check
//----------------------------------------------------------------------
uint8_t ltc6811_openwire(void)
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b09b      	sub	sp, #108	; 0x6c
 8000f54:	af00      	add	r7, sp, #0
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Openwire LTC6811.\n");
#endif

	// Arrays definieren
	uint8_t pulldown[32] = {0}, pullup[32] = {0};							// Speicher Registerwerte
 8000f56:	2300      	movs	r3, #0
 8000f58:	647b      	str	r3, [r7, #68]	; 0x44
 8000f5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]
 8000f6a:	615a      	str	r2, [r3, #20]
 8000f6c:	619a      	str	r2, [r3, #24]
 8000f6e:	2300      	movs	r3, #0
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
 8000f72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]
 8000f82:	615a      	str	r2, [r3, #20]
 8000f84:	619a      	str	r2, [r3, #24]
	uint16_t cell[1] = {0}, openwire[13] = {0};								// Speicher Zelle, Openwire vergleic Threshold
 8000f86:	2300      	movs	r3, #0
 8000f88:	843b      	strh	r3, [r7, #32]
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
 8000f98:	615a      	str	r2, [r3, #20]
 8000f9a:	831a      	strh	r2, [r3, #24]

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000f9c:	f7ff fb7c 	bl	8000698 <wakeup_ltc6811>

	// Pullup Current, drei Durchgaenge
	for (uint8_t i = 0; i < 2; i++)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000fa6:	e00c      	b.n	8000fc2 <ltc6811_openwire+0x72>
	{

		// Commands fuer Openwire Test
		ltc6811(ADOW | MD262 | PUP);										// Pullup Current
 8000fa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fac:	f7ff fb9c 	bl	80006e8 <ltc6811>
		HAL_Delay(300);
 8000fb0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000fb4:	f002 fe0a 	bl	8003bcc <HAL_Delay>
	for (uint8_t i = 0; i < 2; i++)
 8000fb8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000fc2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d9ee      	bls.n	8000fa8 <ltc6811_openwire+0x58>
	}

	// Register auslesen OpenWire
	ltc6811_read(RDCVA, &pullup[0]);
 8000fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fce:	4619      	mov	r1, r3
 8000fd0:	2004      	movs	r0, #4
 8000fd2:	f7ff fc5f 	bl	8000894 <ltc6811_read>
	ltc6811_read(RDCVB, &pullup[8]);
 8000fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fda:	3308      	adds	r3, #8
 8000fdc:	4619      	mov	r1, r3
 8000fde:	2006      	movs	r0, #6
 8000fe0:	f7ff fc58 	bl	8000894 <ltc6811_read>
	ltc6811_read(RDCVC, &pullup[16]);
 8000fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe8:	3310      	adds	r3, #16
 8000fea:	4619      	mov	r1, r3
 8000fec:	2008      	movs	r0, #8
 8000fee:	f7ff fc51 	bl	8000894 <ltc6811_read>
	ltc6811_read(RDCVD, &pullup[24]);
 8000ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff6:	3318      	adds	r3, #24
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	200a      	movs	r0, #10
 8000ffc:	f7ff fc4a 	bl	8000894 <ltc6811_read>


	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8001000:	f7ff fb4a 	bl	8000698 <wakeup_ltc6811>

	// Pulldown Current, drei Durchgaenge
	for (uint8_t i = 0; i < 2; i++)
 8001004:	2300      	movs	r3, #0
 8001006:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800100a:	e00c      	b.n	8001026 <ltc6811_openwire+0xd6>
	{

		// Commands fuer Openwire Test
		ltc6811(ADOW | MD262 | PUP);											// Pulldown Current
 800100c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001010:	f7ff fb6a 	bl	80006e8 <ltc6811>
		HAL_Delay(300);
 8001014:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001018:	f002 fdd8 	bl	8003bcc <HAL_Delay>
	for (uint8_t i = 0; i < 2; i++)
 800101c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001020:	3301      	adds	r3, #1
 8001022:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001026:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800102a:	2b01      	cmp	r3, #1
 800102c:	d9ee      	bls.n	800100c <ltc6811_openwire+0xbc>
	}

	// Register auslesen OpenWire
	ltc6811_read(RDCVA, &pulldown[0]);
 800102e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001032:	4619      	mov	r1, r3
 8001034:	2004      	movs	r0, #4
 8001036:	f7ff fc2d 	bl	8000894 <ltc6811_read>
	ltc6811_read(RDCVB, &pulldown[8]);
 800103a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800103e:	3308      	adds	r3, #8
 8001040:	4619      	mov	r1, r3
 8001042:	2006      	movs	r0, #6
 8001044:	f7ff fc26 	bl	8000894 <ltc6811_read>
	ltc6811_read(RDCVC, &pulldown[16]);
 8001048:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800104c:	3310      	adds	r3, #16
 800104e:	4619      	mov	r1, r3
 8001050:	2008      	movs	r0, #8
 8001052:	f7ff fc1f 	bl	8000894 <ltc6811_read>
	ltc6811_read(RDCVD, &pulldown[24]);
 8001056:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800105a:	3318      	adds	r3, #24
 800105c:	4619      	mov	r1, r3
 800105e:	200a      	movs	r0, #10
 8001060:	f7ff fc18 	bl	8000894 <ltc6811_read>

	// Schleife zum umformatieren der Daten
	for (uint8_t i = 0; i < 13; i++)
 8001064:	2300      	movs	r3, #0
 8001066:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 800106a:	e12d      	b.n	80012c8 <ltc6811_openwire+0x378>
	{
		// Auswahl welche Leitung
		switch (i)
 800106c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001070:	2b0c      	cmp	r3, #12
 8001072:	f200 8123 	bhi.w	80012bc <ltc6811_openwire+0x36c>
 8001076:	a201      	add	r2, pc, #4	; (adr r2, 800107c <ltc6811_openwire+0x12c>)
 8001078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107c:	080010b1 	.word	0x080010b1
 8001080:	080010d5 	.word	0x080010d5
 8001084:	080010d5 	.word	0x080010d5
 8001088:	08001143 	.word	0x08001143
 800108c:	08001143 	.word	0x08001143
 8001090:	08001143 	.word	0x08001143
 8001094:	080011b5 	.word	0x080011b5
 8001098:	080011b5 	.word	0x080011b5
 800109c:	080011b5 	.word	0x080011b5
 80010a0:	08001227 	.word	0x08001227
 80010a4:	08001227 	.word	0x08001227
 80010a8:	08001227 	.word	0x08001227
 80010ac:	08001299 	.word	0x08001299
		{
			// Leitungen Zelle 1/2 bis 3/4
			case 0:
				openwire[i] = ((pulldown[1] << 8) + pulldown[0]);
 80010b0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b299      	uxth	r1, r3
 80010ba:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80010be:	b29a      	uxth	r2, r3
 80010c0:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80010c4:	440a      	add	r2, r1
 80010c6:	b292      	uxth	r2, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	3368      	adds	r3, #104	; 0x68
 80010cc:	443b      	add	r3, r7
 80010ce:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 80010d2:	e0f4      	b.n	80012be <ltc6811_openwire+0x36e>
			case 1:
			case 2:
				openwire[i] = getDifference(((pullup[i*2+1] << 8) + pullup[i*2]), ((pulldown[i*2+1] << 8) + pulldown[i*2]));
 80010d4:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	3301      	adds	r3, #1
 80010dc:	3368      	adds	r3, #104	; 0x68
 80010de:	443b      	add	r3, r7
 80010e0:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	3368      	adds	r3, #104	; 0x68
 80010f2:	443b      	add	r3, r7
 80010f4:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	4413      	add	r3, r2
 80010fc:	b298      	uxth	r0, r3
 80010fe:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	3301      	adds	r3, #1
 8001106:	3368      	adds	r3, #104	; 0x68
 8001108:	443b      	add	r3, r7
 800110a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800110e:	b29b      	uxth	r3, r3
 8001110:	021b      	lsls	r3, r3, #8
 8001112:	b29a      	uxth	r2, r3
 8001114:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	3368      	adds	r3, #104	; 0x68
 800111c:	443b      	add	r3, r7
 800111e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001122:	b29b      	uxth	r3, r3
 8001124:	4413      	add	r3, r2
 8001126:	b29b      	uxth	r3, r3
 8001128:	f897 4065 	ldrb.w	r4, [r7, #101]	; 0x65
 800112c:	4619      	mov	r1, r3
 800112e:	f7ff fa91 	bl	8000654 <getDifference>
 8001132:	4603      	mov	r3, r0
 8001134:	461a      	mov	r2, r3
 8001136:	0063      	lsls	r3, r4, #1
 8001138:	3368      	adds	r3, #104	; 0x68
 800113a:	443b      	add	r3, r7
 800113c:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 8001140:	e0bd      	b.n	80012be <ltc6811_openwire+0x36e>
			// Leitungen Zelle 4/5 bis 6/7
			case 3:
			case 4:
			case 5:
				openwire[i] = getDifference(((pullup[i*2+3] << 8) + pullup[i*2+2]), ((pulldown[i*2+3] << 8) + pulldown[i*2+2]));
 8001142:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	3303      	adds	r3, #3
 800114a:	3368      	adds	r3, #104	; 0x68
 800114c:	443b      	add	r3, r7
 800114e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001152:	b29b      	uxth	r3, r3
 8001154:	021b      	lsls	r3, r3, #8
 8001156:	b29a      	uxth	r2, r3
 8001158:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800115c:	3301      	adds	r3, #1
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	3368      	adds	r3, #104	; 0x68
 8001162:	443b      	add	r3, r7
 8001164:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001168:	b29b      	uxth	r3, r3
 800116a:	4413      	add	r3, r2
 800116c:	b298      	uxth	r0, r3
 800116e:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	3303      	adds	r3, #3
 8001176:	3368      	adds	r3, #104	; 0x68
 8001178:	443b      	add	r3, r7
 800117a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800117e:	b29b      	uxth	r3, r3
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	b29a      	uxth	r2, r3
 8001184:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001188:	3301      	adds	r3, #1
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	3368      	adds	r3, #104	; 0x68
 800118e:	443b      	add	r3, r7
 8001190:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001194:	b29b      	uxth	r3, r3
 8001196:	4413      	add	r3, r2
 8001198:	b29b      	uxth	r3, r3
 800119a:	f897 4065 	ldrb.w	r4, [r7, #101]	; 0x65
 800119e:	4619      	mov	r1, r3
 80011a0:	f7ff fa58 	bl	8000654 <getDifference>
 80011a4:	4603      	mov	r3, r0
 80011a6:	461a      	mov	r2, r3
 80011a8:	0063      	lsls	r3, r4, #1
 80011aa:	3368      	adds	r3, #104	; 0x68
 80011ac:	443b      	add	r3, r7
 80011ae:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 80011b2:	e084      	b.n	80012be <ltc6811_openwire+0x36e>
			// Leitungen Zelle 7/8 bis 9/10
			case 6:
			case 7:
			case 8:
				openwire[i] = getDifference(((pullup[i*2+5] << 8) + pullup[i*2+4]), ((pulldown[i*2+5] << 8) + pulldown[i*2+4]));
 80011b4:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	3305      	adds	r3, #5
 80011bc:	3368      	adds	r3, #104	; 0x68
 80011be:	443b      	add	r3, r7
 80011c0:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80011ce:	3302      	adds	r3, #2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	3368      	adds	r3, #104	; 0x68
 80011d4:	443b      	add	r3, r7
 80011d6:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	4413      	add	r3, r2
 80011de:	b298      	uxth	r0, r3
 80011e0:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	3305      	adds	r3, #5
 80011e8:	3368      	adds	r3, #104	; 0x68
 80011ea:	443b      	add	r3, r7
 80011ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80011fa:	3302      	adds	r3, #2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	3368      	adds	r3, #104	; 0x68
 8001200:	443b      	add	r3, r7
 8001202:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001206:	b29b      	uxth	r3, r3
 8001208:	4413      	add	r3, r2
 800120a:	b29b      	uxth	r3, r3
 800120c:	f897 4065 	ldrb.w	r4, [r7, #101]	; 0x65
 8001210:	4619      	mov	r1, r3
 8001212:	f7ff fa1f 	bl	8000654 <getDifference>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	0063      	lsls	r3, r4, #1
 800121c:	3368      	adds	r3, #104	; 0x68
 800121e:	443b      	add	r3, r7
 8001220:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 8001224:	e04b      	b.n	80012be <ltc6811_openwire+0x36e>
			// Leitungen Zelle 10/11 und 11/12
			case 9:
			case 10:
			case 11:
				openwire[i] = getDifference(((pullup[i*2+7] << 8) + pullup[i*2+6]), ((pulldown[i*2+7] << 8) + pulldown[i*2+6]));
 8001226:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	3307      	adds	r3, #7
 800122e:	3368      	adds	r3, #104	; 0x68
 8001230:	443b      	add	r3, r7
 8001232:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001236:	b29b      	uxth	r3, r3
 8001238:	021b      	lsls	r3, r3, #8
 800123a:	b29a      	uxth	r2, r3
 800123c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001240:	3303      	adds	r3, #3
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	3368      	adds	r3, #104	; 0x68
 8001246:	443b      	add	r3, r7
 8001248:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800124c:	b29b      	uxth	r3, r3
 800124e:	4413      	add	r3, r2
 8001250:	b298      	uxth	r0, r3
 8001252:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	3307      	adds	r3, #7
 800125a:	3368      	adds	r3, #104	; 0x68
 800125c:	443b      	add	r3, r7
 800125e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001262:	b29b      	uxth	r3, r3
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b29a      	uxth	r2, r3
 8001268:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800126c:	3303      	adds	r3, #3
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	3368      	adds	r3, #104	; 0x68
 8001272:	443b      	add	r3, r7
 8001274:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001278:	b29b      	uxth	r3, r3
 800127a:	4413      	add	r3, r2
 800127c:	b29b      	uxth	r3, r3
 800127e:	f897 4065 	ldrb.w	r4, [r7, #101]	; 0x65
 8001282:	4619      	mov	r1, r3
 8001284:	f7ff f9e6 	bl	8000654 <getDifference>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	0063      	lsls	r3, r4, #1
 800128e:	3368      	adds	r3, #104	; 0x68
 8001290:	443b      	add	r3, r7
 8001292:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 8001296:	e012      	b.n	80012be <ltc6811_openwire+0x36e>
			case 12:
				openwire[i] = ((pullup[29] << 8) + pullup[28]);
 8001298:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800129c:	b29b      	uxth	r3, r3
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b299      	uxth	r1, r3
 80012a2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80012ac:	440a      	add	r2, r1
 80012ae:	b292      	uxth	r2, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	3368      	adds	r3, #104	; 0x68
 80012b4:	443b      	add	r3, r7
 80012b6:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 80012ba:	e000      	b.n	80012be <ltc6811_openwire+0x36e>
			default:
				break;
 80012bc:	bf00      	nop
	for (uint8_t i = 0; i < 13; i++)
 80012be:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80012c2:	3301      	adds	r3, #1
 80012c4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 80012c8:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80012cc:	2b0c      	cmp	r3, #12
 80012ce:	f67f aecd 	bls.w	800106c <ltc6811_openwire+0x11c>
		}
	}

	// Schleife zum Pruefen der Daten
	for (uint8_t i = 1; i < 12; i++)
 80012d2:	2301      	movs	r3, #1
 80012d4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 80012d8:	e01a      	b.n	8001310 <ltc6811_openwire+0x3c0>
	{
		// Vergleiche Messdaten mit Threshold
		if (openwire[i] > OPENWIRE_THRESHOLD)
 80012da:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	3368      	adds	r3, #104	; 0x68
 80012e2:	443b      	add	r3, r7
 80012e4:	f833 3c64 	ldrh.w	r3, [r3, #-100]
 80012e8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80012ec:	d90b      	bls.n	8001306 <ltc6811_openwire+0x3b6>
		{
			cell[0] |= (1 << i);											// Wenn Threshold ueberschritten, Offene Leitung
 80012ee:	8c3b      	ldrh	r3, [r7, #32]
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80012f6:	2101      	movs	r1, #1
 80012f8:	fa01 f303 	lsl.w	r3, r1, r3
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	4313      	orrs	r3, r2
 8001300:	b21b      	sxth	r3, r3
 8001302:	b29b      	uxth	r3, r3
 8001304:	843b      	strh	r3, [r7, #32]
	for (uint8_t i = 1; i < 12; i++)
 8001306:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800130a:	3301      	adds	r3, #1
 800130c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 8001310:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001314:	2b0b      	cmp	r3, #11
 8001316:	d9e0      	bls.n	80012da <ltc6811_openwire+0x38a>
		}
	}

	// Offene Leitung erste Zelle messen
	if (openwire[0] == 0)
 8001318:	88bb      	ldrh	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d104      	bne.n	8001328 <ltc6811_openwire+0x3d8>
	{
		cell[0] |= (1 << 0);												// Unterste Leitung Offen
 800131e:	8c3b      	ldrh	r3, [r7, #32]
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	b29b      	uxth	r3, r3
 8001326:	843b      	strh	r3, [r7, #32]
	}

	// Offene Leitung letzte Zelle messen
	if (openwire[12] == 0)
 8001328:	8bbb      	ldrh	r3, [r7, #28]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d104      	bne.n	8001338 <ltc6811_openwire+0x3e8>
	{
		cell[0] |= (1 << 12);												// Oberste Leitung offen
 800132e:	8c3b      	ldrh	r3, [r7, #32]
 8001330:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001334:	b29b      	uxth	r3, r3
 8001336:	843b      	strh	r3, [r7, #32]
	}

	// Wenn offene Leitung vorhanden
	if (cell[0] != 0)
 8001338:	8c3b      	ldrh	r3, [r7, #32]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <ltc6811_openwire+0x3f2>
	{
		return 1;															// Open Wire nicht OK
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <ltc6811_openwire+0x3f4>
	}

	return 0;																// Open Wire OK
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	376c      	adds	r7, #108	; 0x6c
 8001348:	46bd      	mov	sp, r7
 800134a:	bd90      	pop	{r4, r7, pc}

0800134c <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t\t\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t\t\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 8001352:	2115      	movs	r1, #21
 8001354:	483b      	ldr	r0, [pc, #236]	; (8001444 <collectHardwareInfo+0xf8>)
 8001356:	f7ff f915 	bl	8000584 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 800135a:	f002 fc71 	bl	8003c40 <HAL_GetDEVID>
 800135e:	4603      	mov	r3, r0
 8001360:	210a      	movs	r1, #10
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f922 	bl	80005ac <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 8001368:	2117      	movs	r1, #23
 800136a:	4837      	ldr	r0, [pc, #220]	; (8001448 <collectHardwareInfo+0xfc>)
 800136c:	f7ff f90a 	bl	8000584 <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 8001370:	f002 fc5a 	bl	8003c28 <HAL_GetREVID>
 8001374:	4603      	mov	r3, r0
 8001376:	f242 0201 	movw	r2, #8193	; 0x2001
 800137a:	4293      	cmp	r3, r2
 800137c:	d016      	beq.n	80013ac <collectHardwareInfo+0x60>
 800137e:	f242 0201 	movw	r2, #8193	; 0x2001
 8001382:	4293      	cmp	r3, r2
 8001384:	d817      	bhi.n	80013b6 <collectHardwareInfo+0x6a>
 8001386:	f241 0201 	movw	r2, #4097	; 0x1001
 800138a:	4293      	cmp	r3, r2
 800138c:	d004      	beq.n	8001398 <collectHardwareInfo+0x4c>
 800138e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001392:	4293      	cmp	r3, r2
 8001394:	d005      	beq.n	80013a2 <collectHardwareInfo+0x56>
 8001396:	e00e      	b.n	80013b6 <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 8001398:	2101      	movs	r1, #1
 800139a:	482c      	ldr	r0, [pc, #176]	; (800144c <collectHardwareInfo+0x100>)
 800139c:	f7ff f8f2 	bl	8000584 <uartTransmit>
			break;
 80013a0:	e011      	b.n	80013c6 <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 80013a2:	2101      	movs	r1, #1
 80013a4:	482a      	ldr	r0, [pc, #168]	; (8001450 <collectHardwareInfo+0x104>)
 80013a6:	f7ff f8ed 	bl	8000584 <uartTransmit>
			break;
 80013aa:	e00c      	b.n	80013c6 <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 80013ac:	2101      	movs	r1, #1
 80013ae:	4829      	ldr	r0, [pc, #164]	; (8001454 <collectHardwareInfo+0x108>)
 80013b0:	f7ff f8e8 	bl	8000584 <uartTransmit>
			break;
 80013b4:	e007      	b.n	80013c6 <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 80013b6:	f002 fc37 	bl	8003c28 <HAL_GetREVID>
 80013ba:	4603      	mov	r3, r0
 80013bc:	210a      	movs	r1, #10
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f8f4 	bl	80005ac <uartTransmitNumber>
			break;
 80013c4:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 80013c6:	2115      	movs	r1, #21
 80013c8:	4823      	ldr	r0, [pc, #140]	; (8001458 <collectHardwareInfo+0x10c>)
 80013ca:	f7ff f8db 	bl	8000584 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 80013ce:	f004 f905 	bl	80055dc <HAL_RCC_GetSysClockFreq>
 80013d2:	6078      	str	r0, [r7, #4]
		frequency = frequency / 1000000;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a21      	ldr	r2, [pc, #132]	; (800145c <collectHardwareInfo+0x110>)
 80013d8:	fba2 2303 	umull	r2, r3, r2, r3
 80013dc:	0c9b      	lsrs	r3, r3, #18
 80013de:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 80013e0:	210a      	movs	r1, #10
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff f8e2 	bl	80005ac <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 80013e8:	2104      	movs	r1, #4
 80013ea:	481d      	ldr	r0, [pc, #116]	; (8001460 <collectHardwareInfo+0x114>)
 80013ec:	f7ff f8ca 	bl	8000584 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 80013f0:	2111      	movs	r1, #17
 80013f2:	481c      	ldr	r0, [pc, #112]	; (8001464 <collectHardwareInfo+0x118>)
 80013f4:	f7ff f8c6 	bl	8000584 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 80013f8:	f002 fc30 	bl	8003c5c <HAL_GetUIDw0>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2110      	movs	r1, #16
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f8d3 	bl	80005ac <uartTransmitNumber>

	uartTransmit(" ", 1);
 8001406:	2101      	movs	r1, #1
 8001408:	4817      	ldr	r0, [pc, #92]	; (8001468 <collectHardwareInfo+0x11c>)
 800140a:	f7ff f8bb 	bl	8000584 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 800140e:	f002 fc31 	bl	8003c74 <HAL_GetUIDw1>
 8001412:	4603      	mov	r3, r0
 8001414:	2110      	movs	r1, #16
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f8c8 	bl	80005ac <uartTransmitNumber>

	uartTransmit(" ", 1);
 800141c:	2101      	movs	r1, #1
 800141e:	4812      	ldr	r0, [pc, #72]	; (8001468 <collectHardwareInfo+0x11c>)
 8001420:	f7ff f8b0 	bl	8000584 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8001424:	f002 fc32 	bl	8003c8c <HAL_GetUIDw2>
 8001428:	4603      	mov	r3, r0
 800142a:	2110      	movs	r1, #16
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f8bd 	bl	80005ac <uartTransmitNumber>

	uartTransmit("\n", 1);
 8001432:	2101      	movs	r1, #1
 8001434:	480d      	ldr	r0, [pc, #52]	; (800146c <collectHardwareInfo+0x120>)
 8001436:	f7ff f8a5 	bl	8000584 <uartTransmit>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	080095bc 	.word	0x080095bc
 8001448:	080095d4 	.word	0x080095d4
 800144c:	080095ec 	.word	0x080095ec
 8001450:	080095f0 	.word	0x080095f0
 8001454:	080095f4 	.word	0x080095f4
 8001458:	080095f8 	.word	0x080095f8
 800145c:	431bde83 	.word	0x431bde83
 8001460:	08009610 	.word	0x08009610
 8001464:	08009618 	.word	0x08009618
 8001468:	0800962c 	.word	0x0800962c
 800146c:	08009630 	.word	0x08009630

08001470 <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t\t\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 8001474:	2114      	movs	r1, #20
 8001476:	4824      	ldr	r0, [pc, #144]	; (8001508 <collectMiddlewareInfo+0x98>)
 8001478:	f7ff f884 	bl	8000584 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 800147c:	210a      	movs	r1, #10
 800147e:	2005      	movs	r0, #5
 8001480:	f7ff f894 	bl	80005ac <uartTransmitNumber>
	uartTransmit(".", 1);
 8001484:	2101      	movs	r1, #1
 8001486:	4821      	ldr	r0, [pc, #132]	; (800150c <collectMiddlewareInfo+0x9c>)
 8001488:	f7ff f87c 	bl	8000584 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 800148c:	210a      	movs	r1, #10
 800148e:	2001      	movs	r0, #1
 8001490:	f7ff f88c 	bl	80005ac <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 8001494:	2112      	movs	r1, #18
 8001496:	481e      	ldr	r0, [pc, #120]	; (8001510 <collectMiddlewareInfo+0xa0>)
 8001498:	f7ff f874 	bl	8000584 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 800149c:	f002 fbba 	bl	8003c14 <HAL_GetHalVersion>
 80014a0:	4603      	mov	r3, r0
 80014a2:	0e1b      	lsrs	r3, r3, #24
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	210a      	movs	r1, #10
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff f87f 	bl	80005ac <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 80014ae:	2101      	movs	r1, #1
 80014b0:	4816      	ldr	r0, [pc, #88]	; (800150c <collectMiddlewareInfo+0x9c>)
 80014b2:	f7ff f867 	bl	8000584 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 80014b6:	f002 fbad 	bl	8003c14 <HAL_GetHalVersion>
 80014ba:	4603      	mov	r3, r0
 80014bc:	0c1b      	lsrs	r3, r3, #16
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	210a      	movs	r1, #10
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff f872 	bl	80005ac <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 80014c8:	2101      	movs	r1, #1
 80014ca:	4810      	ldr	r0, [pc, #64]	; (800150c <collectMiddlewareInfo+0x9c>)
 80014cc:	f7ff f85a 	bl	8000584 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 80014d0:	f002 fba0 	bl	8003c14 <HAL_GetHalVersion>
 80014d4:	4603      	mov	r3, r0
 80014d6:	0a1b      	lsrs	r3, r3, #8
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	210a      	movs	r1, #10
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff f865 	bl	80005ac <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 80014e2:	2101      	movs	r1, #1
 80014e4:	4809      	ldr	r0, [pc, #36]	; (800150c <collectMiddlewareInfo+0x9c>)
 80014e6:	f7ff f84d 	bl	8000584 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 80014ea:	f002 fb93 	bl	8003c14 <HAL_GetHalVersion>
 80014ee:	4603      	mov	r3, r0
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	210a      	movs	r1, #10
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f859 	bl	80005ac <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 80014fa:	2101      	movs	r1, #1
 80014fc:	4805      	ldr	r0, [pc, #20]	; (8001514 <collectMiddlewareInfo+0xa4>)
 80014fe:	f7ff f841 	bl	8000584 <uartTransmit>
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	08009634 	.word	0x08009634
 800150c:	08009648 	.word	0x08009648
 8001510:	0800964c 	.word	0x0800964c
 8001514:	08009630 	.word	0x08009630

08001518 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 800151c:	2111      	movs	r1, #17
 800151e:	4826      	ldr	r0, [pc, #152]	; (80015b8 <collectSoftwareInfo+0xa0>)
 8001520:	f7ff f830 	bl	8000584 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8001524:	2108      	movs	r1, #8
 8001526:	4825      	ldr	r0, [pc, #148]	; (80015bc <collectSoftwareInfo+0xa4>)
 8001528:	f7ff f82c 	bl	8000584 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 800152c:	2111      	movs	r1, #17
 800152e:	4824      	ldr	r0, [pc, #144]	; (80015c0 <collectSoftwareInfo+0xa8>)
 8001530:	f7ff f828 	bl	8000584 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8001534:	2108      	movs	r1, #8
 8001536:	4823      	ldr	r0, [pc, #140]	; (80015c4 <collectSoftwareInfo+0xac>)
 8001538:	f7ff f824 	bl	8000584 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 800153c:	210f      	movs	r1, #15
 800153e:	4822      	ldr	r0, [pc, #136]	; (80015c8 <collectSoftwareInfo+0xb0>)
 8001540:	f7ff f820 	bl	8000584 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 8001544:	2129      	movs	r1, #41	; 0x29
 8001546:	4821      	ldr	r0, [pc, #132]	; (80015cc <collectSoftwareInfo+0xb4>)
 8001548:	f7ff f81c 	bl	8000584 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 800154c:	2101      	movs	r1, #1
 800154e:	4820      	ldr	r0, [pc, #128]	; (80015d0 <collectSoftwareInfo+0xb8>)
 8001550:	f7ff f818 	bl	8000584 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8001554:	2116      	movs	r1, #22
 8001556:	481f      	ldr	r0, [pc, #124]	; (80015d4 <collectSoftwareInfo+0xbc>)
 8001558:	f7ff f814 	bl	8000584 <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 800155c:	2105      	movs	r1, #5
 800155e:	481e      	ldr	r0, [pc, #120]	; (80015d8 <collectSoftwareInfo+0xc0>)
 8001560:	f7ff f810 	bl	8000584 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8001564:	2115      	movs	r1, #21
 8001566:	481d      	ldr	r0, [pc, #116]	; (80015dc <collectSoftwareInfo+0xc4>)
 8001568:	f7ff f80c 	bl	8000584 <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 800156c:	2108      	movs	r1, #8
 800156e:	481c      	ldr	r0, [pc, #112]	; (80015e0 <collectSoftwareInfo+0xc8>)
 8001570:	f7ff f808 	bl	8000584 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 8001574:	2116      	movs	r1, #22
 8001576:	481b      	ldr	r0, [pc, #108]	; (80015e4 <collectSoftwareInfo+0xcc>)
 8001578:	f7ff f804 	bl	8000584 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 800157c:	2111      	movs	r1, #17
 800157e:	481a      	ldr	r0, [pc, #104]	; (80015e8 <collectSoftwareInfo+0xd0>)
 8001580:	f7ff f800 	bl	8000584 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8001584:	2101      	movs	r1, #1
 8001586:	4812      	ldr	r0, [pc, #72]	; (80015d0 <collectSoftwareInfo+0xb8>)
 8001588:	f7fe fffc 	bl	8000584 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 800158c:	2111      	movs	r1, #17
 800158e:	4817      	ldr	r0, [pc, #92]	; (80015ec <collectSoftwareInfo+0xd4>)
 8001590:	f7fe fff8 	bl	8000584 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 8001594:	210b      	movs	r1, #11
 8001596:	4816      	ldr	r0, [pc, #88]	; (80015f0 <collectSoftwareInfo+0xd8>)
 8001598:	f7fe fff4 	bl	8000584 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 800159c:	2111      	movs	r1, #17
 800159e:	4815      	ldr	r0, [pc, #84]	; (80015f4 <collectSoftwareInfo+0xdc>)
 80015a0:	f7fe fff0 	bl	8000584 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 80015a4:	2109      	movs	r1, #9
 80015a6:	4814      	ldr	r0, [pc, #80]	; (80015f8 <collectSoftwareInfo+0xe0>)
 80015a8:	f7fe ffec 	bl	8000584 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80015ac:	2101      	movs	r1, #1
 80015ae:	4808      	ldr	r0, [pc, #32]	; (80015d0 <collectSoftwareInfo+0xb8>)
 80015b0:	f7fe ffe8 	bl	8000584 <uartTransmit>
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	08009660 	.word	0x08009660
 80015bc:	08009674 	.word	0x08009674
 80015c0:	0800967c 	.word	0x0800967c
 80015c4:	08009690 	.word	0x08009690
 80015c8:	08009698 	.word	0x08009698
 80015cc:	080096a8 	.word	0x080096a8
 80015d0:	08009630 	.word	0x08009630
 80015d4:	080096d4 	.word	0x080096d4
 80015d8:	080096ec 	.word	0x080096ec
 80015dc:	080096f4 	.word	0x080096f4
 80015e0:	0800970c 	.word	0x0800970c
 80015e4:	08009714 	.word	0x08009714
 80015e8:	0800972c 	.word	0x0800972c
 80015ec:	08009740 	.word	0x08009740
 80015f0:	08009754 	.word	0x08009754
 80015f4:	08009760 	.word	0x08009760
 80015f8:	08009774 	.word	0x08009774

080015fc <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 8001600:	2115      	movs	r1, #21
 8001602:	4814      	ldr	r0, [pc, #80]	; (8001654 <collectGitcounts+0x58>)
 8001604:	f7fe ffbe 	bl	8000584 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 8001608:	2103      	movs	r1, #3
 800160a:	4813      	ldr	r0, [pc, #76]	; (8001658 <collectGitcounts+0x5c>)
 800160c:	f7fe ffba 	bl	8000584 <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 8001610:	2117      	movs	r1, #23
 8001612:	4812      	ldr	r0, [pc, #72]	; (800165c <collectGitcounts+0x60>)
 8001614:	f7fe ffb6 	bl	8000584 <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 8001618:	2103      	movs	r1, #3
 800161a:	4811      	ldr	r0, [pc, #68]	; (8001660 <collectGitcounts+0x64>)
 800161c:	f7fe ffb2 	bl	8000584 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 8001620:	211c      	movs	r1, #28
 8001622:	4810      	ldr	r0, [pc, #64]	; (8001664 <collectGitcounts+0x68>)
 8001624:	f7fe ffae 	bl	8000584 <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 8001628:	2103      	movs	r1, #3
 800162a:	480f      	ldr	r0, [pc, #60]	; (8001668 <collectGitcounts+0x6c>)
 800162c:	f7fe ffaa 	bl	8000584 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8001630:	2116      	movs	r1, #22
 8001632:	480e      	ldr	r0, [pc, #56]	; (800166c <collectGitcounts+0x70>)
 8001634:	f7fe ffa6 	bl	8000584 <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8001638:	2102      	movs	r1, #2
 800163a:	480d      	ldr	r0, [pc, #52]	; (8001670 <collectGitcounts+0x74>)
 800163c:	f7fe ffa2 	bl	8000584 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8001640:	2115      	movs	r1, #21
 8001642:	480c      	ldr	r0, [pc, #48]	; (8001674 <collectGitcounts+0x78>)
 8001644:	f7fe ff9e 	bl	8000584 <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 8001648:	2102      	movs	r1, #2
 800164a:	480b      	ldr	r0, [pc, #44]	; (8001678 <collectGitcounts+0x7c>)
 800164c:	f7fe ff9a 	bl	8000584 <uartTransmit>
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	08009780 	.word	0x08009780
 8001658:	08009798 	.word	0x08009798
 800165c:	0800979c 	.word	0x0800979c
 8001660:	080097b4 	.word	0x080097b4
 8001664:	080097b8 	.word	0x080097b8
 8001668:	080097d4 	.word	0x080097d4
 800166c:	080096d4 	.word	0x080096d4
 8001670:	080097d8 	.word	0x080097d8
 8001674:	080096f4 	.word	0x080096f4
 8001678:	080097dc 	.word	0x080097dc

0800167c <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8001680:	2111      	movs	r1, #17
 8001682:	480e      	ldr	r0, [pc, #56]	; (80016bc <collectSystemInfo+0x40>)
 8001684:	f7fe ff7e 	bl	8000584 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8001688:	f7ff fe60 	bl	800134c <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 800168c:	2111      	movs	r1, #17
 800168e:	480c      	ldr	r0, [pc, #48]	; (80016c0 <collectSystemInfo+0x44>)
 8001690:	f7fe ff78 	bl	8000584 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 8001694:	f7ff ff40 	bl	8001518 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8001698:	2113      	movs	r1, #19
 800169a:	480a      	ldr	r0, [pc, #40]	; (80016c4 <collectSystemInfo+0x48>)
 800169c:	f7fe ff72 	bl	8000584 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 80016a0:	f7ff fee6 	bl	8001470 <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 80016a4:	2113      	movs	r1, #19
 80016a6:	4808      	ldr	r0, [pc, #32]	; (80016c8 <collectSystemInfo+0x4c>)
 80016a8:	f7fe ff6c 	bl	8000584 <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 80016ac:	f7ff ffa6 	bl	80015fc <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 80016b0:	2103      	movs	r1, #3
 80016b2:	4806      	ldr	r0, [pc, #24]	; (80016cc <collectSystemInfo+0x50>)
 80016b4:	f7fe ff66 	bl	8000584 <uartTransmit>
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	080097e0 	.word	0x080097e0
 80016c0:	080097f4 	.word	0x080097f4
 80016c4:	08009808 	.word	0x08009808
 80016c8:	0800981c 	.word	0x0800981c
 80016cc:	08009830 	.word	0x08009830

080016d0 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 80016d6:	2300      	movs	r3, #0
 80016d8:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 80016da:	4b25      	ldr	r3, [pc, #148]	; (8001770 <readResetSource+0xa0>)
 80016dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d002      	beq.n	80016ec <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	3301      	adds	r3, #1
 80016ea:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 80016ec:	4b20      	ldr	r3, [pc, #128]	; (8001770 <readResetSource+0xa0>)
 80016ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d002      	beq.n	80016fe <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	3302      	adds	r3, #2
 80016fc:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 80016fe:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <readResetSource+0xa0>)
 8001700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001702:	2b00      	cmp	r3, #0
 8001704:	da02      	bge.n	800170c <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	3304      	adds	r3, #4
 800170a:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 800170c:	4b18      	ldr	r3, [pc, #96]	; (8001770 <readResetSource+0xa0>)
 800170e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d002      	beq.n	800171e <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	3308      	adds	r3, #8
 800171c:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <readResetSource+0xa0>)
 8001720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001722:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d002      	beq.n	8001730 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	3310      	adds	r3, #16
 800172e:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8001730:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <readResetSource+0xa0>)
 8001732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d002      	beq.n	8001742 <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	3320      	adds	r3, #32
 8001740:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <readResetSource+0xa0>)
 8001744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001746:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d002      	beq.n	8001754 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	3340      	adds	r3, #64	; 0x40
 8001752:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <readResetSource+0xa0>)
 8001756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001758:	4a05      	ldr	r2, [pc, #20]	; (8001770 <readResetSource+0xa0>)
 800175a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800175e:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8001760:	79fb      	ldrb	r3, [r7, #7]
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800

08001774 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 800177e:	2106      	movs	r1, #6
 8001780:	482a      	ldr	r0, [pc, #168]	; (800182c <printResetSource+0xb8>)
 8001782:	f7fe feff 	bl	8000584 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d104      	bne.n	8001796 <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 800178c:	210f      	movs	r1, #15
 800178e:	4828      	ldr	r0, [pc, #160]	; (8001830 <printResetSource+0xbc>)
 8001790:	f7fe fef8 	bl	8000584 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 8001794:	e046      	b.n	8001824 <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 80017a0:	2118      	movs	r1, #24
 80017a2:	4824      	ldr	r0, [pc, #144]	; (8001834 <printResetSource+0xc0>)
 80017a4:	f7fe feee 	bl	8000584 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 80017b2:	2116      	movs	r1, #22
 80017b4:	4820      	ldr	r0, [pc, #128]	; (8001838 <printResetSource+0xc4>)
 80017b6:	f7fe fee5 	bl	8000584 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 80017c4:	210a      	movs	r1, #10
 80017c6:	481d      	ldr	r0, [pc, #116]	; (800183c <printResetSource+0xc8>)
 80017c8:	f7fe fedc 	bl	8000584 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 80017d6:	2110      	movs	r1, #16
 80017d8:	4819      	ldr	r0, [pc, #100]	; (8001840 <printResetSource+0xcc>)
 80017da:	f7fe fed3 	bl	8000584 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	f003 0310 	and.w	r3, r3, #16
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 80017e8:	210f      	movs	r1, #15
 80017ea:	4816      	ldr	r0, [pc, #88]	; (8001844 <printResetSource+0xd0>)
 80017ec:	f7fe feca 	bl	8000584 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	f003 0320 	and.w	r3, r3, #32
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 80017fa:	210f      	movs	r1, #15
 80017fc:	4812      	ldr	r0, [pc, #72]	; (8001848 <printResetSource+0xd4>)
 80017fe:	f7fe fec1 	bl	8000584 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 800180c:	210a      	movs	r1, #10
 800180e:	480f      	ldr	r0, [pc, #60]	; (800184c <printResetSource+0xd8>)
 8001810:	f7fe feb8 	bl	8000584 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	2b00      	cmp	r3, #0
 800181a:	da03      	bge.n	8001824 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 800181c:	2105      	movs	r1, #5
 800181e:	480c      	ldr	r0, [pc, #48]	; (8001850 <printResetSource+0xdc>)
 8001820:	f7fe feb0 	bl	8000584 <uartTransmit>
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	08009834 	.word	0x08009834
 8001830:	0800983c 	.word	0x0800983c
 8001834:	0800984c 	.word	0x0800984c
 8001838:	08009868 	.word	0x08009868
 800183c:	08009880 	.word	0x08009880
 8001840:	0800988c 	.word	0x0800988c
 8001844:	080098a0 	.word	0x080098a0
 8001848:	080098b0 	.word	0x080098b0
 800184c:	080098c0 	.word	0x080098c0
 8001850:	080098cc 	.word	0x080098cc

08001854 <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (status == HAL_OK) {													// HAL OK
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d104      	bne.n	800186e <hal_error+0x1a>
		uartTransmit("HAL OK\n", 7);
 8001864:	2107      	movs	r1, #7
 8001866:	480f      	ldr	r0, [pc, #60]	; (80018a4 <hal_error+0x50>)
 8001868:	f7fe fe8c 	bl	8000584 <uartTransmit>
	}
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 800186c:	e016      	b.n	800189c <hal_error+0x48>
	else if (status == HAL_ERROR) {											// HAL Error
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d104      	bne.n	800187e <hal_error+0x2a>
		uartTransmit("HAL ERROR\n", 10);
 8001874:	210a      	movs	r1, #10
 8001876:	480c      	ldr	r0, [pc, #48]	; (80018a8 <hal_error+0x54>)
 8001878:	f7fe fe84 	bl	8000584 <uartTransmit>
}
 800187c:	e00e      	b.n	800189c <hal_error+0x48>
	else if (status == HAL_BUSY) {											// HAL Beschaeftigt
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d104      	bne.n	800188e <hal_error+0x3a>
		uartTransmit("HAL BUSY\n", 9);
 8001884:	2109      	movs	r1, #9
 8001886:	4809      	ldr	r0, [pc, #36]	; (80018ac <hal_error+0x58>)
 8001888:	f7fe fe7c 	bl	8000584 <uartTransmit>
}
 800188c:	e006      	b.n	800189c <hal_error+0x48>
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	2b03      	cmp	r3, #3
 8001892:	d103      	bne.n	800189c <hal_error+0x48>
		uartTransmit("HAL TIMEOUT\n", 12);
 8001894:	210c      	movs	r1, #12
 8001896:	4806      	ldr	r0, [pc, #24]	; (80018b0 <hal_error+0x5c>)
 8001898:	f7fe fe74 	bl	8000584 <uartTransmit>
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	080098d4 	.word	0x080098d4
 80018a8:	080098dc 	.word	0x080098dc
 80018ac:	080098e8 	.word	0x080098e8
 80018b0:	080098f4 	.word	0x080098f4

080018b4 <imd_status>:
//----------------------------------------------------------------------

// IMD Status einlesen
//----------------------------------------------------------------------
void imd_status(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	// Einlesen von IMD Ok Pin
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);		// IMD OK einlesen
 80018b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018bc:	48c6      	ldr	r0, [pc, #792]	; (8001bd8 <imd_status+0x324>)
 80018be:	f003 fa71 	bl	8004da4 <HAL_GPIO_ReadPin>
 80018c2:	4603      	mov	r3, r0
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	b2d9      	uxtb	r1, r3
 80018ca:	4ac4      	ldr	r2, [pc, #784]	; (8001bdc <imd_status+0x328>)
 80018cc:	7813      	ldrb	r3, [r2, #0]
 80018ce:	f361 0300 	bfi	r3, r1, #0, #1
 80018d2:	7013      	strb	r3, [r2, #0]

	// Abfrage ob IMD Ok ist
	if(sdc_in.IMD_OK_IN == 1)
 80018d4:	4bc1      	ldr	r3, [pc, #772]	; (8001bdc <imd_status+0x328>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00f      	beq.n	8001902 <imd_status+0x4e>
	{
		// Ausgabe IMD OK kommend BMS
		system_out.ImdOK = 1;
 80018e2:	4abf      	ldr	r2, [pc, #764]	; (8001be0 <imd_status+0x32c>)
 80018e4:	7813      	ldrb	r3, [r2, #0]
 80018e6:	f043 0302 	orr.w	r3, r3, #2
 80018ea:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(IMD_OK_OUT_GPIO_Port, IMD_OK_OUT_Pin, system_out.ImdOK);	// IMD Status von BMS ausgeben
 80018ec:	4bbc      	ldr	r3, [pc, #752]	; (8001be0 <imd_status+0x32c>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	461a      	mov	r2, r3
 80018f8:	2102      	movs	r1, #2
 80018fa:	48ba      	ldr	r0, [pc, #744]	; (8001be4 <imd_status+0x330>)
 80018fc:	f003 fa6a 	bl	8004dd4 <HAL_GPIO_WritePin>
 8001900:	e00e      	b.n	8001920 <imd_status+0x6c>
	}
	else
	{
		// Ausgabe IMD nicht Ok kommend BMS
		system_out.ImdOK = 0;
 8001902:	4ab7      	ldr	r2, [pc, #732]	; (8001be0 <imd_status+0x32c>)
 8001904:	7813      	ldrb	r3, [r2, #0]
 8001906:	f36f 0341 	bfc	r3, #1, #1
 800190a:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(IMD_OK_OUT_GPIO_Port, IMD_OK_OUT_Pin, system_out.ImdOK);	// IMD Status von BMS ausgeben
 800190c:	4bb4      	ldr	r3, [pc, #720]	; (8001be0 <imd_status+0x32c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001914:	b2db      	uxtb	r3, r3
 8001916:	461a      	mov	r2, r3
 8001918:	2102      	movs	r1, #2
 800191a:	48b2      	ldr	r0, [pc, #712]	; (8001be4 <imd_status+0x330>)
 800191c:	f003 fa5a 	bl	8004dd4 <HAL_GPIO_WritePin>
	}

#ifdef DEBUG_IMD
	// Ausgabe Frequenz
	uartTransmit("Frequenz: \t", 11);
 8001920:	210b      	movs	r1, #11
 8001922:	48b1      	ldr	r0, [pc, #708]	; (8001be8 <imd_status+0x334>)
 8001924:	f7fe fe2e 	bl	8000584 <uartTransmit>
	uartTransmitNumber(imd.Frequency, 10);
 8001928:	4bb0      	ldr	r3, [pc, #704]	; (8001bec <imd_status+0x338>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8001930:	b2db      	uxtb	r3, r3
 8001932:	210a      	movs	r1, #10
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fe39 	bl	80005ac <uartTransmitNumber>
	uartTransmit("\n", 1);
 800193a:	2101      	movs	r1, #1
 800193c:	48ac      	ldr	r0, [pc, #688]	; (8001bf0 <imd_status+0x33c>)
 800193e:	f7fe fe21 	bl	8000584 <uartTransmit>

	// Ausgabe DutyCycle
	uartTransmit("DutyCycle: \t", 12);
 8001942:	210c      	movs	r1, #12
 8001944:	48ab      	ldr	r0, [pc, #684]	; (8001bf4 <imd_status+0x340>)
 8001946:	f7fe fe1d 	bl	8000584 <uartTransmit>
	uartTransmitNumber(imd.DutyCycle, 10);
 800194a:	4ba8      	ldr	r3, [pc, #672]	; (8001bec <imd_status+0x338>)
 800194c:	791b      	ldrb	r3, [r3, #4]
 800194e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001952:	b2db      	uxtb	r3, r3
 8001954:	210a      	movs	r1, #10
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe fe28 	bl	80005ac <uartTransmitNumber>
	uartTransmit("\n", 1);
 800195c:	2101      	movs	r1, #1
 800195e:	48a4      	ldr	r0, [pc, #656]	; (8001bf0 <imd_status+0x33c>)
 8001960:	f7fe fe10 	bl	8000584 <uartTransmit>
#endif

	// IMD PWM abfragen
	switch (imd.Frequency)
 8001964:	4ba1      	ldr	r3, [pc, #644]	; (8001bec <imd_status+0x338>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b33      	cmp	r3, #51	; 0x33
 8001970:	f200 81ce 	bhi.w	8001d10 <imd_status+0x45c>
 8001974:	a201      	add	r2, pc, #4	; (adr r2, 800197c <imd_status+0xc8>)
 8001976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197a:	bf00      	nop
 800197c:	08001a4d 	.word	0x08001a4d
 8001980:	08001a4d 	.word	0x08001a4d
 8001984:	08001d11 	.word	0x08001d11
 8001988:	08001d11 	.word	0x08001d11
 800198c:	08001d11 	.word	0x08001d11
 8001990:	08001d11 	.word	0x08001d11
 8001994:	08001d11 	.word	0x08001d11
 8001998:	08001d11 	.word	0x08001d11
 800199c:	08001d11 	.word	0x08001d11
 80019a0:	08001ab1 	.word	0x08001ab1
 80019a4:	08001ab1 	.word	0x08001ab1
 80019a8:	08001ab1 	.word	0x08001ab1
 80019ac:	08001d11 	.word	0x08001d11
 80019b0:	08001d11 	.word	0x08001d11
 80019b4:	08001d11 	.word	0x08001d11
 80019b8:	08001d11 	.word	0x08001d11
 80019bc:	08001d11 	.word	0x08001d11
 80019c0:	08001d11 	.word	0x08001d11
 80019c4:	08001d11 	.word	0x08001d11
 80019c8:	08001b45 	.word	0x08001b45
 80019cc:	08001b45 	.word	0x08001b45
 80019d0:	08001b45 	.word	0x08001b45
 80019d4:	08001d11 	.word	0x08001d11
 80019d8:	08001d11 	.word	0x08001d11
 80019dc:	08001d11 	.word	0x08001d11
 80019e0:	08001d11 	.word	0x08001d11
 80019e4:	08001d11 	.word	0x08001d11
 80019e8:	08001d11 	.word	0x08001d11
 80019ec:	08001d11 	.word	0x08001d11
 80019f0:	08001c05 	.word	0x08001c05
 80019f4:	08001c05 	.word	0x08001c05
 80019f8:	08001c05 	.word	0x08001c05
 80019fc:	08001d11 	.word	0x08001d11
 8001a00:	08001d11 	.word	0x08001d11
 8001a04:	08001d11 	.word	0x08001d11
 8001a08:	08001d11 	.word	0x08001d11
 8001a0c:	08001d11 	.word	0x08001d11
 8001a10:	08001d11 	.word	0x08001d11
 8001a14:	08001d11 	.word	0x08001d11
 8001a18:	08001c71 	.word	0x08001c71
 8001a1c:	08001c71 	.word	0x08001c71
 8001a20:	08001c71 	.word	0x08001c71
 8001a24:	08001d11 	.word	0x08001d11
 8001a28:	08001d11 	.word	0x08001d11
 8001a2c:	08001d11 	.word	0x08001d11
 8001a30:	08001d11 	.word	0x08001d11
 8001a34:	08001d11 	.word	0x08001d11
 8001a38:	08001d11 	.word	0x08001d11
 8001a3c:	08001d11 	.word	0x08001d11
 8001a40:	08001cc1 	.word	0x08001cc1
 8001a44:	08001cc1 	.word	0x08001cc1
 8001a48:	08001cc1 	.word	0x08001cc1
	{
		case 1:
		case 0:																		// Case 0 Hz
			// PWM Pin einlesen
			system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);
 8001a4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a50:	4861      	ldr	r0, [pc, #388]	; (8001bd8 <imd_status+0x324>)
 8001a52:	f003 f9a7 	bl	8004da4 <HAL_GPIO_ReadPin>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	b2d9      	uxtb	r1, r3
 8001a5e:	4a66      	ldr	r2, [pc, #408]	; (8001bf8 <imd_status+0x344>)
 8001a60:	7813      	ldrb	r3, [r2, #0]
 8001a62:	f361 1304 	bfi	r3, r1, #4, #1
 8001a66:	7013      	strb	r3, [r2, #0]

			// IMD-Widerstand auf Null setzen
			imd.Resistanc = 0;
 8001a68:	4a60      	ldr	r2, [pc, #384]	; (8001bec <imd_status+0x338>)
 8001a6a:	6813      	ldr	r3, [r2, #0]
 8001a6c:	f36f 1397 	bfc	r3, #6, #18
 8001a70:	6013      	str	r3, [r2, #0]

			// Wenn IMD 1 ist
			if (system_in.IMD_PWM == 1)
 8001a72:	4b61      	ldr	r3, [pc, #388]	; (8001bf8 <imd_status+0x344>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	f003 0310 	and.w	r3, r3, #16
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00c      	beq.n	8001a9a <imd_status+0x1e6>
			{
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_KURZSCHLUSS_KL15;					// Kurzschluss von HV nach Pluspol
 8001a80:	4a5d      	ldr	r2, [pc, #372]	; (8001bf8 <imd_status+0x344>)
 8001a82:	7813      	ldrb	r3, [r2, #0]
 8001a84:	2106      	movs	r1, #6
 8001a86:	f361 0303 	bfi	r3, r1, #0, #4
 8001a8a:	7013      	strb	r3, [r2, #0]
				imd.PWM_STATUS = IMD_KURZSCHLUSS_KL15;								// Kurzschluss von HV nach Pluspol
 8001a8c:	4a57      	ldr	r2, [pc, #348]	; (8001bec <imd_status+0x338>)
 8001a8e:	78d3      	ldrb	r3, [r2, #3]
 8001a90:	2106      	movs	r1, #6
 8001a92:	f361 0303 	bfi	r3, r1, #0, #4
 8001a96:	70d3      	strb	r3, [r2, #3]
			{
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_KURZSCHLUSS_GND;						// Kurzschluss von HV nach Masse
				imd.PWM_STATUS = IMD_KURZSCHLUSS_GND;								// Kurzschluss von HV nach Masse
			}
			break;
 8001a98:	e147      	b.n	8001d2a <imd_status+0x476>
				system_in.IMD_PWM_STATUS = IMD_KURZSCHLUSS_GND;						// Kurzschluss von HV nach Masse
 8001a9a:	4a57      	ldr	r2, [pc, #348]	; (8001bf8 <imd_status+0x344>)
 8001a9c:	7813      	ldrb	r3, [r2, #0]
 8001a9e:	f36f 0303 	bfc	r3, #0, #4
 8001aa2:	7013      	strb	r3, [r2, #0]
				imd.PWM_STATUS = IMD_KURZSCHLUSS_GND;								// Kurzschluss von HV nach Masse
 8001aa4:	4a51      	ldr	r2, [pc, #324]	; (8001bec <imd_status+0x338>)
 8001aa6:	78d3      	ldrb	r3, [r2, #3]
 8001aa8:	f36f 0303 	bfc	r3, #0, #4
 8001aac:	70d3      	strb	r3, [r2, #3]
			break;
 8001aae:	e13c      	b.n	8001d2a <imd_status+0x476>

		case 9:
		case 11:
		case 10:																	// Case 10 Hz
			// IMD Status speichern
			system_in.IMD_PWM_STATUS = IMD_NORMAL;									// IMD funktioniert normal
 8001ab0:	4a51      	ldr	r2, [pc, #324]	; (8001bf8 <imd_status+0x344>)
 8001ab2:	7813      	ldrb	r3, [r2, #0]
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	f361 0303 	bfi	r3, r1, #0, #4
 8001aba:	7013      	strb	r3, [r2, #0]
			imd.PWM_STATUS = IMD_NORMAL;											// IMD funktioniert normal
 8001abc:	4a4b      	ldr	r2, [pc, #300]	; (8001bec <imd_status+0x338>)
 8001abe:	78d3      	ldrb	r3, [r2, #3]
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	f361 0303 	bfi	r3, r1, #0, #4
 8001ac6:	70d3      	strb	r3, [r2, #3]

			// DutyCycle abfragen
			if (imd.DutyCycle > 5 && imd.DutyCycle < 95)							// IMD PWM
 8001ac8:	4b48      	ldr	r3, [pc, #288]	; (8001bec <imd_status+0x338>)
 8001aca:	791b      	ldrb	r3, [r3, #4]
 8001acc:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b05      	cmp	r3, #5
 8001ad4:	d929      	bls.n	8001b2a <imd_status+0x276>
 8001ad6:	4b45      	ldr	r3, [pc, #276]	; (8001bec <imd_status+0x338>)
 8001ad8:	791b      	ldrb	r3, [r3, #4]
 8001ada:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b5e      	cmp	r3, #94	; 0x5e
 8001ae2:	d822      	bhi.n	8001b2a <imd_status+0x276>
			{
				// Widerstand berechnen
				imd.Resistanc = 90 * 1200 / (imd.DutyCycle - 5) - 1200;				// Angabe in kOhm
 8001ae4:	4b41      	ldr	r3, [pc, #260]	; (8001bec <imd_status+0x338>)
 8001ae6:	791b      	ldrb	r3, [r3, #4]
 8001ae8:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	3b05      	subs	r3, #5
 8001af0:	4a42      	ldr	r2, [pc, #264]	; (8001bfc <imd_status+0x348>)
 8001af2:	fb92 f3f3 	sdiv	r3, r2, r3
 8001af6:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8001afa:	f3c3 0111 	ubfx	r1, r3, #0, #18
 8001afe:	4a3b      	ldr	r2, [pc, #236]	; (8001bec <imd_status+0x338>)
 8001b00:	6813      	ldr	r3, [r2, #0]
 8001b02:	f361 1397 	bfi	r3, r1, #6, #18
 8001b06:	6013      	str	r3, [r2, #0]

#ifdef DEBUG_IMD
				// Ausgabe Widerstandswert
				uartTransmit("Widerstand: \t", 13);
 8001b08:	210d      	movs	r1, #13
 8001b0a:	483d      	ldr	r0, [pc, #244]	; (8001c00 <imd_status+0x34c>)
 8001b0c:	f7fe fd3a 	bl	8000584 <uartTransmit>
				uartTransmitNumber(imd.Resistanc, 10);
 8001b10:	4b36      	ldr	r3, [pc, #216]	; (8001bec <imd_status+0x338>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f3c3 1391 	ubfx	r3, r3, #6, #18
 8001b18:	210a      	movs	r1, #10
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fd46 	bl	80005ac <uartTransmitNumber>
				uartTransmit("\n", 1);
 8001b20:	2101      	movs	r1, #1
 8001b22:	4833      	ldr	r0, [pc, #204]	; (8001bf0 <imd_status+0x33c>)
 8001b24:	f7fe fd2e 	bl	8000584 <uartTransmit>
			{
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_DUTY_ERROR;							// Fehlerausgabe
				imd.PWM_STATUS = IMD_DUTY_ERROR;									// Fehlerausgabe
			}
			break;
 8001b28:	e0ff      	b.n	8001d2a <imd_status+0x476>
				system_in.IMD_PWM_STATUS = IMD_DUTY_ERROR;							// Fehlerausgabe
 8001b2a:	4a33      	ldr	r2, [pc, #204]	; (8001bf8 <imd_status+0x344>)
 8001b2c:	7813      	ldrb	r3, [r2, #0]
 8001b2e:	2108      	movs	r1, #8
 8001b30:	f361 0303 	bfi	r3, r1, #0, #4
 8001b34:	7013      	strb	r3, [r2, #0]
				imd.PWM_STATUS = IMD_DUTY_ERROR;									// Fehlerausgabe
 8001b36:	4a2d      	ldr	r2, [pc, #180]	; (8001bec <imd_status+0x338>)
 8001b38:	78d3      	ldrb	r3, [r2, #3]
 8001b3a:	2108      	movs	r1, #8
 8001b3c:	f361 0303 	bfi	r3, r1, #0, #4
 8001b40:	70d3      	strb	r3, [r2, #3]
			break;
 8001b42:	e0f2      	b.n	8001d2a <imd_status+0x476>

		case 19:
		case 21:
		case 20:																	// Case 20 Hz
			// IMD Status speichern
			system_in.IMD_PWM_STATUS = IMD_UNTERSPANNUNG;							// Unterspannung an HV erkannt
 8001b44:	4a2c      	ldr	r2, [pc, #176]	; (8001bf8 <imd_status+0x344>)
 8001b46:	7813      	ldrb	r3, [r2, #0]
 8001b48:	2102      	movs	r1, #2
 8001b4a:	f361 0303 	bfi	r3, r1, #0, #4
 8001b4e:	7013      	strb	r3, [r2, #0]
			imd.PWM_STATUS = IMD_UNTERSPANNUNG;										// Unterspannung an HV erkannt
 8001b50:	4a26      	ldr	r2, [pc, #152]	; (8001bec <imd_status+0x338>)
 8001b52:	78d3      	ldrb	r3, [r2, #3]
 8001b54:	2102      	movs	r1, #2
 8001b56:	f361 0303 	bfi	r3, r1, #0, #4
 8001b5a:	70d3      	strb	r3, [r2, #3]

			// DutyCycle abfragen
			if (imd.DutyCycle > 5 && imd.DutyCycle < 95)							// IMD PWM
 8001b5c:	4b23      	ldr	r3, [pc, #140]	; (8001bec <imd_status+0x338>)
 8001b5e:	791b      	ldrb	r3, [r3, #4]
 8001b60:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b05      	cmp	r3, #5
 8001b68:	d929      	bls.n	8001bbe <imd_status+0x30a>
 8001b6a:	4b20      	ldr	r3, [pc, #128]	; (8001bec <imd_status+0x338>)
 8001b6c:	791b      	ldrb	r3, [r3, #4]
 8001b6e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b5e      	cmp	r3, #94	; 0x5e
 8001b76:	d822      	bhi.n	8001bbe <imd_status+0x30a>
			{
				// Widerstand berechnen
				imd.Resistanc = 90 * 1200 / (imd.DutyCycle - 5) - 1200;				// Angabe in kOhm
 8001b78:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <imd_status+0x338>)
 8001b7a:	791b      	ldrb	r3, [r3, #4]
 8001b7c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	3b05      	subs	r3, #5
 8001b84:	4a1d      	ldr	r2, [pc, #116]	; (8001bfc <imd_status+0x348>)
 8001b86:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b8a:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8001b8e:	f3c3 0111 	ubfx	r1, r3, #0, #18
 8001b92:	4a16      	ldr	r2, [pc, #88]	; (8001bec <imd_status+0x338>)
 8001b94:	6813      	ldr	r3, [r2, #0]
 8001b96:	f361 1397 	bfi	r3, r1, #6, #18
 8001b9a:	6013      	str	r3, [r2, #0]

#ifdef DEBUG_IMD
				// Ausgabe Widerstandswert
				uartTransmit("Widerstand: \t", 13);
 8001b9c:	210d      	movs	r1, #13
 8001b9e:	4818      	ldr	r0, [pc, #96]	; (8001c00 <imd_status+0x34c>)
 8001ba0:	f7fe fcf0 	bl	8000584 <uartTransmit>
				uartTransmitNumber(imd.Resistanc, 10);
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <imd_status+0x338>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f3c3 1391 	ubfx	r3, r3, #6, #18
 8001bac:	210a      	movs	r1, #10
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fcfc 	bl	80005ac <uartTransmitNumber>
				uartTransmit("\n", 1);
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	480e      	ldr	r0, [pc, #56]	; (8001bf0 <imd_status+0x33c>)
 8001bb8:	f7fe fce4 	bl	8000584 <uartTransmit>
			{
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_DUTY_ERROR;							// Fehlerausgabe
				imd.PWM_STATUS = IMD_DUTY_ERROR;									// Fehlerausgabe
			}
			break;
 8001bbc:	e0b5      	b.n	8001d2a <imd_status+0x476>
				system_in.IMD_PWM_STATUS = IMD_DUTY_ERROR;							// Fehlerausgabe
 8001bbe:	4a0e      	ldr	r2, [pc, #56]	; (8001bf8 <imd_status+0x344>)
 8001bc0:	7813      	ldrb	r3, [r2, #0]
 8001bc2:	2108      	movs	r1, #8
 8001bc4:	f361 0303 	bfi	r3, r1, #0, #4
 8001bc8:	7013      	strb	r3, [r2, #0]
				imd.PWM_STATUS = IMD_DUTY_ERROR;									// Fehlerausgabe
 8001bca:	4a08      	ldr	r2, [pc, #32]	; (8001bec <imd_status+0x338>)
 8001bcc:	78d3      	ldrb	r3, [r2, #3]
 8001bce:	2108      	movs	r1, #8
 8001bd0:	f361 0303 	bfi	r3, r1, #0, #4
 8001bd4:	70d3      	strb	r3, [r2, #3]
			break;
 8001bd6:	e0a8      	b.n	8001d2a <imd_status+0x476>
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	2000003c 	.word	0x2000003c
 8001be0:	20000044 	.word	0x20000044
 8001be4:	40020000 	.word	0x40020000
 8001be8:	08009938 	.word	0x08009938
 8001bec:	20000030 	.word	0x20000030
 8001bf0:	08009944 	.word	0x08009944
 8001bf4:	08009948 	.word	0x08009948
 8001bf8:	20000038 	.word	0x20000038
 8001bfc:	0001a5e0 	.word	0x0001a5e0
 8001c00:	08009958 	.word	0x08009958

		case 29:
		case 31:
		case 30:																	// Case 30 Hz
			// IMD Status speichern
			system_in.IMD_PWM_STATUS = IMD_SCHNELLSTART;							// Schnellstartmessung
 8001c04:	4a5c      	ldr	r2, [pc, #368]	; (8001d78 <imd_status+0x4c4>)
 8001c06:	7813      	ldrb	r3, [r2, #0]
 8001c08:	2103      	movs	r1, #3
 8001c0a:	f361 0303 	bfi	r3, r1, #0, #4
 8001c0e:	7013      	strb	r3, [r2, #0]
			imd.PWM_STATUS = IMD_SCHNELLSTART;										// Schnellstartmessung
 8001c10:	4a5a      	ldr	r2, [pc, #360]	; (8001d7c <imd_status+0x4c8>)
 8001c12:	78d3      	ldrb	r3, [r2, #3]
 8001c14:	2103      	movs	r1, #3
 8001c16:	f361 0303 	bfi	r3, r1, #0, #4
 8001c1a:	70d3      	strb	r3, [r2, #3]

			// DutyCycle abfragen
			if (imd.DutyCycle > 5 && imd.DutyCycle < 11)							// IMD Gut
 8001c1c:	4b57      	ldr	r3, [pc, #348]	; (8001d7c <imd_status+0x4c8>)
 8001c1e:	791b      	ldrb	r3, [r3, #4]
 8001c20:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b05      	cmp	r3, #5
 8001c28:	d906      	bls.n	8001c38 <imd_status+0x384>
 8001c2a:	4b54      	ldr	r3, [pc, #336]	; (8001d7c <imd_status+0x4c8>)
 8001c2c:	791b      	ldrb	r3, [r3, #4]
 8001c2e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b0a      	cmp	r3, #10
 8001c36:	d91a      	bls.n	8001c6e <imd_status+0x3ba>
			{

			}
			else if (imd.DutyCycle > 89 && imd.DutyCycle < 95)						// IMD Schlecht
 8001c38:	4b50      	ldr	r3, [pc, #320]	; (8001d7c <imd_status+0x4c8>)
 8001c3a:	791b      	ldrb	r3, [r3, #4]
 8001c3c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b59      	cmp	r3, #89	; 0x59
 8001c44:	d906      	bls.n	8001c54 <imd_status+0x3a0>
 8001c46:	4b4d      	ldr	r3, [pc, #308]	; (8001d7c <imd_status+0x4c8>)
 8001c48:	791b      	ldrb	r3, [r3, #4]
 8001c4a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b5e      	cmp	r3, #94	; 0x5e
 8001c52:	d90c      	bls.n	8001c6e <imd_status+0x3ba>
			}
			// Falls DutyCycle nicht im Wertebereich ist
			else																	// IMD Invalid
			{
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_DUTY_ERROR;							// Fehlerausgabe
 8001c54:	4a48      	ldr	r2, [pc, #288]	; (8001d78 <imd_status+0x4c4>)
 8001c56:	7813      	ldrb	r3, [r2, #0]
 8001c58:	2108      	movs	r1, #8
 8001c5a:	f361 0303 	bfi	r3, r1, #0, #4
 8001c5e:	7013      	strb	r3, [r2, #0]
				imd.PWM_STATUS = IMD_DUTY_ERROR;									// Fehlerausgabe
 8001c60:	4a46      	ldr	r2, [pc, #280]	; (8001d7c <imd_status+0x4c8>)
 8001c62:	78d3      	ldrb	r3, [r2, #3]
 8001c64:	2108      	movs	r1, #8
 8001c66:	f361 0303 	bfi	r3, r1, #0, #4
 8001c6a:	70d3      	strb	r3, [r2, #3]
			}
			break;
 8001c6c:	e05d      	b.n	8001d2a <imd_status+0x476>
 8001c6e:	e05c      	b.n	8001d2a <imd_status+0x476>

		case 39:
		case 41:
		case 40:																	// Case 40 Hz
			// IMD Status speichern
			system_in.IMD_PWM_STATUS = IMD_GERAETEFEHLER;							// Geraetefehler
 8001c70:	4a41      	ldr	r2, [pc, #260]	; (8001d78 <imd_status+0x4c4>)
 8001c72:	7813      	ldrb	r3, [r2, #0]
 8001c74:	2104      	movs	r1, #4
 8001c76:	f361 0303 	bfi	r3, r1, #0, #4
 8001c7a:	7013      	strb	r3, [r2, #0]
			imd.PWM_STATUS = IMD_GERAETEFEHLER;										// Geraetefehler
 8001c7c:	4a3f      	ldr	r2, [pc, #252]	; (8001d7c <imd_status+0x4c8>)
 8001c7e:	78d3      	ldrb	r3, [r2, #3]
 8001c80:	2104      	movs	r1, #4
 8001c82:	f361 0303 	bfi	r3, r1, #0, #4
 8001c86:	70d3      	strb	r3, [r2, #3]

			// DutyCyle abfragen
			if (imd.DutyCycle > 47 && imd.DutyCycle < 53)							// IMD PWM
 8001c88:	4b3c      	ldr	r3, [pc, #240]	; (8001d7c <imd_status+0x4c8>)
 8001c8a:	791b      	ldrb	r3, [r3, #4]
 8001c8c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b2f      	cmp	r3, #47	; 0x2f
 8001c94:	d906      	bls.n	8001ca4 <imd_status+0x3f0>
 8001c96:	4b39      	ldr	r3, [pc, #228]	; (8001d7c <imd_status+0x4c8>)
 8001c98:	791b      	ldrb	r3, [r3, #4]
 8001c9a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b34      	cmp	r3, #52	; 0x34
 8001ca2:	d90c      	bls.n	8001cbe <imd_status+0x40a>
			}
			// Falls DutyCycle nicht im Wertebereich ist
			else																	// IMD Invalid
			{
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_DUTY_ERROR;							// Fehlerausgabe
 8001ca4:	4a34      	ldr	r2, [pc, #208]	; (8001d78 <imd_status+0x4c4>)
 8001ca6:	7813      	ldrb	r3, [r2, #0]
 8001ca8:	2108      	movs	r1, #8
 8001caa:	f361 0303 	bfi	r3, r1, #0, #4
 8001cae:	7013      	strb	r3, [r2, #0]
				imd.PWM_STATUS = IMD_DUTY_ERROR;									// Fehlerausgabe
 8001cb0:	4a32      	ldr	r2, [pc, #200]	; (8001d7c <imd_status+0x4c8>)
 8001cb2:	78d3      	ldrb	r3, [r2, #3]
 8001cb4:	2108      	movs	r1, #8
 8001cb6:	f361 0303 	bfi	r3, r1, #0, #4
 8001cba:	70d3      	strb	r3, [r2, #3]
			}
			break;
 8001cbc:	e035      	b.n	8001d2a <imd_status+0x476>
 8001cbe:	e034      	b.n	8001d2a <imd_status+0x476>

		case 49:
		case 51:
		case 50:																	// Case 50 Hz
			// IMD Status speichern
			system_in.IMD_PWM_STATUS = IMD_ANSCHLUSSFEHLER_ERDE;					// Anschluss an Erde festgestellt
 8001cc0:	4a2d      	ldr	r2, [pc, #180]	; (8001d78 <imd_status+0x4c4>)
 8001cc2:	7813      	ldrb	r3, [r2, #0]
 8001cc4:	2105      	movs	r1, #5
 8001cc6:	f361 0303 	bfi	r3, r1, #0, #4
 8001cca:	7013      	strb	r3, [r2, #0]
			imd.PWM_STATUS = IMD_ANSCHLUSSFEHLER_ERDE;								// Anschluss an Erde festgestellt
 8001ccc:	4a2b      	ldr	r2, [pc, #172]	; (8001d7c <imd_status+0x4c8>)
 8001cce:	78d3      	ldrb	r3, [r2, #3]
 8001cd0:	2105      	movs	r1, #5
 8001cd2:	f361 0303 	bfi	r3, r1, #0, #4
 8001cd6:	70d3      	strb	r3, [r2, #3]

			// DutyCycle abfragen
			if (imd.DutyCycle > 47 && imd.DutyCycle < 53)							// IMD PWM
 8001cd8:	4b28      	ldr	r3, [pc, #160]	; (8001d7c <imd_status+0x4c8>)
 8001cda:	791b      	ldrb	r3, [r3, #4]
 8001cdc:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b2f      	cmp	r3, #47	; 0x2f
 8001ce4:	d906      	bls.n	8001cf4 <imd_status+0x440>
 8001ce6:	4b25      	ldr	r3, [pc, #148]	; (8001d7c <imd_status+0x4c8>)
 8001ce8:	791b      	ldrb	r3, [r3, #4]
 8001cea:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b34      	cmp	r3, #52	; 0x34
 8001cf2:	d90c      	bls.n	8001d0e <imd_status+0x45a>
			}
			// Fall DutyCycle nicht im Wertebereich ist
			else																	// IMD Invalid
			{
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_DUTY_ERROR;							// Fehlerausgabe
 8001cf4:	4a20      	ldr	r2, [pc, #128]	; (8001d78 <imd_status+0x4c4>)
 8001cf6:	7813      	ldrb	r3, [r2, #0]
 8001cf8:	2108      	movs	r1, #8
 8001cfa:	f361 0303 	bfi	r3, r1, #0, #4
 8001cfe:	7013      	strb	r3, [r2, #0]
				imd.PWM_STATUS = IMD_DUTY_ERROR;									// Fehlerausgabe
 8001d00:	4a1e      	ldr	r2, [pc, #120]	; (8001d7c <imd_status+0x4c8>)
 8001d02:	78d3      	ldrb	r3, [r2, #3]
 8001d04:	2108      	movs	r1, #8
 8001d06:	f361 0303 	bfi	r3, r1, #0, #4
 8001d0a:	70d3      	strb	r3, [r2, #3]
			}
			break;
 8001d0c:	e00d      	b.n	8001d2a <imd_status+0x476>
 8001d0e:	e00c      	b.n	8001d2a <imd_status+0x476>

		default:																	// Case Default Fehler
			// IMD Status speichern
			system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;								// Fehlerausgabe
 8001d10:	4a19      	ldr	r2, [pc, #100]	; (8001d78 <imd_status+0x4c4>)
 8001d12:	7813      	ldrb	r3, [r2, #0]
 8001d14:	2107      	movs	r1, #7
 8001d16:	f361 0303 	bfi	r3, r1, #0, #4
 8001d1a:	7013      	strb	r3, [r2, #0]
			imd.PWM_STATUS = IMD_FREQ_ERROR;										// Fehlerausgabe
 8001d1c:	4a17      	ldr	r2, [pc, #92]	; (8001d7c <imd_status+0x4c8>)
 8001d1e:	78d3      	ldrb	r3, [r2, #3]
 8001d20:	2107      	movs	r1, #7
 8001d22:	f361 0303 	bfi	r3, r1, #0, #4
 8001d26:	70d3      	strb	r3, [r2, #3]
			break;
 8001d28:	bf00      	nop
	}

	// Abfrage Plausibilitaet am IMD
	if ((sdc_in.IMD_OK_IN == 1) && (imd.PWM_STATUS != 10))
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <imd_status+0x4cc>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00c      	beq.n	8001d52 <imd_status+0x49e>
 8001d38:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <imd_status+0x4c8>)
 8001d3a:	78db      	ldrb	r3, [r3, #3]
 8001d3c:	f003 030f 	and.w	r3, r3, #15
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b0a      	cmp	r3, #10
 8001d44:	d005      	beq.n	8001d52 <imd_status+0x49e>
	{
		system_in.IMD_PWM_STATUS = IMD_PLAUS_ERROR;									// Plausibilitaetsfehler be IMD ok und falschem Status
 8001d46:	4a0c      	ldr	r2, [pc, #48]	; (8001d78 <imd_status+0x4c4>)
 8001d48:	7813      	ldrb	r3, [r2, #0]
 8001d4a:	2109      	movs	r1, #9
 8001d4c:	f361 0303 	bfi	r3, r1, #0, #4
 8001d50:	7013      	strb	r3, [r2, #0]
	}

#ifdef DEBUG_IMD
	// Ausgabe Status
	uartTransmit("Status: \t", 9);
 8001d52:	2109      	movs	r1, #9
 8001d54:	480b      	ldr	r0, [pc, #44]	; (8001d84 <imd_status+0x4d0>)
 8001d56:	f7fe fc15 	bl	8000584 <uartTransmit>
	uartTransmitNumber(imd.PWM_STATUS, 10);
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <imd_status+0x4c8>)
 8001d5c:	78db      	ldrb	r3, [r3, #3]
 8001d5e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	210a      	movs	r1, #10
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fc20 	bl	80005ac <uartTransmitNumber>
	uartTransmit("\n", 1);
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	4806      	ldr	r0, [pc, #24]	; (8001d88 <imd_status+0x4d4>)
 8001d70:	f7fe fc08 	bl	8000584 <uartTransmit>
#endif
}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000038 	.word	0x20000038
 8001d7c:	20000030 	.word	0x20000030
 8001d80:	2000003c 	.word	0x2000003c
 8001d84:	08009968 	.word	0x08009968
 8001d88:	08009944 	.word	0x08009944

08001d8c <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 8001d90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d94:	4850      	ldr	r0, [pc, #320]	; (8001ed8 <readall_inputs+0x14c>)
 8001d96:	f003 f805 	bl	8004da4 <HAL_GPIO_ReadPin>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	b2d9      	uxtb	r1, r3
 8001da2:	4a4e      	ldr	r2, [pc, #312]	; (8001edc <readall_inputs+0x150>)
 8001da4:	7813      	ldrb	r3, [r2, #0]
 8001da6:	f361 1304 	bfi	r3, r1, #4, #1
 8001daa:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 8001dac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001db0:	484b      	ldr	r0, [pc, #300]	; (8001ee0 <readall_inputs+0x154>)
 8001db2:	f002 fff7 	bl	8004da4 <HAL_GPIO_ReadPin>
 8001db6:	4603      	mov	r3, r0
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	b2d9      	uxtb	r1, r3
 8001dbe:	4a47      	ldr	r2, [pc, #284]	; (8001edc <readall_inputs+0x150>)
 8001dc0:	7813      	ldrb	r3, [r2, #0]
 8001dc2:	f361 1386 	bfi	r3, r1, #6, #1
 8001dc6:	7013      	strb	r3, [r2, #0]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 8001dc8:	2101      	movs	r1, #1
 8001dca:	4846      	ldr	r0, [pc, #280]	; (8001ee4 <readall_inputs+0x158>)
 8001dcc:	f002 ffea 	bl	8004da4 <HAL_GPIO_ReadPin>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	b2d9      	uxtb	r1, r3
 8001dd8:	4a40      	ldr	r2, [pc, #256]	; (8001edc <readall_inputs+0x150>)
 8001dda:	7813      	ldrb	r3, [r2, #0]
 8001ddc:	f361 13c7 	bfi	r3, r1, #7, #1
 8001de0:	7013      	strb	r3, [r2, #0]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8001de2:	2104      	movs	r1, #4
 8001de4:	483f      	ldr	r0, [pc, #252]	; (8001ee4 <readall_inputs+0x158>)
 8001de6:	f002 ffdd 	bl	8004da4 <HAL_GPIO_ReadPin>
 8001dea:	4603      	mov	r3, r0
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	b2d9      	uxtb	r1, r3
 8001df2:	4a3a      	ldr	r2, [pc, #232]	; (8001edc <readall_inputs+0x150>)
 8001df4:	7853      	ldrb	r3, [r2, #1]
 8001df6:	f361 0300 	bfi	r3, r1, #0, #1
 8001dfa:	7053      	strb	r3, [r2, #1]

	// SDC-Eingaenge einlesen
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);					// IMD OK, Akku
 8001dfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e00:	4835      	ldr	r0, [pc, #212]	; (8001ed8 <readall_inputs+0x14c>)
 8001e02:	f002 ffcf 	bl	8004da4 <HAL_GPIO_ReadPin>
 8001e06:	4603      	mov	r3, r0
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	b2d9      	uxtb	r1, r3
 8001e0e:	4a36      	ldr	r2, [pc, #216]	; (8001ee8 <readall_inputs+0x15c>)
 8001e10:	7813      	ldrb	r3, [r2, #0]
 8001e12:	f361 0300 	bfi	r3, r1, #0, #1
 8001e16:	7013      	strb	r3, [r2, #0]
	sdc_in.HVIL = HAL_GPIO_ReadPin(SENSE_SDC_HVIL_GPIO_Port, SENSE_SDC_HVIL_Pin);				// Shutdown-Circuit HVIL, OK
 8001e18:	2108      	movs	r1, #8
 8001e1a:	482f      	ldr	r0, [pc, #188]	; (8001ed8 <readall_inputs+0x14c>)
 8001e1c:	f002 ffc2 	bl	8004da4 <HAL_GPIO_ReadPin>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	b2d9      	uxtb	r1, r3
 8001e28:	4a2f      	ldr	r2, [pc, #188]	; (8001ee8 <readall_inputs+0x15c>)
 8001e2a:	7813      	ldrb	r3, [r2, #0]
 8001e2c:	f361 0341 	bfi	r3, r1, #1, #1
 8001e30:	7013      	strb	r3, [r2, #0]
	sdc_in.MotorSDC = HAL_GPIO_ReadPin(SENSE_SDC_MOTOR_GPIO_Port, SENSE_SDC_MOTOR_Pin);			// Shutdown-Circuit Akku, OK
 8001e32:	2120      	movs	r1, #32
 8001e34:	4828      	ldr	r0, [pc, #160]	; (8001ed8 <readall_inputs+0x14c>)
 8001e36:	f002 ffb5 	bl	8004da4 <HAL_GPIO_ReadPin>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	b2d9      	uxtb	r1, r3
 8001e42:	4a29      	ldr	r2, [pc, #164]	; (8001ee8 <readall_inputs+0x15c>)
 8001e44:	7813      	ldrb	r3, [r2, #0]
 8001e46:	f361 0382 	bfi	r3, r1, #2, #1
 8001e4a:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8001e4c:	2110      	movs	r1, #16
 8001e4e:	4822      	ldr	r0, [pc, #136]	; (8001ed8 <readall_inputs+0x14c>)
 8001e50:	f002 ffa8 	bl	8004da4 <HAL_GPIO_ReadPin>
 8001e54:	4603      	mov	r3, r0
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	b2d9      	uxtb	r1, r3
 8001e5c:	4a22      	ldr	r2, [pc, #136]	; (8001ee8 <readall_inputs+0x15c>)
 8001e5e:	7813      	ldrb	r3, [r2, #0]
 8001e60:	f361 03c3 	bfi	r3, r1, #3, #1
 8001e64:	7013      	strb	r3, [r2, #0]
	sdc_in.PrechargeIn = HAL_GPIO_ReadPin(PRECHARGE_IN_GPIO_Port, PRECHARGE_IN_Pin);			// Eingang Precharge abgeschlossen
 8001e66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e6a:	4820      	ldr	r0, [pc, #128]	; (8001eec <readall_inputs+0x160>)
 8001e6c:	f002 ff9a 	bl	8004da4 <HAL_GPIO_ReadPin>
 8001e70:	4603      	mov	r3, r0
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	b2d9      	uxtb	r1, r3
 8001e78:	4a1b      	ldr	r2, [pc, #108]	; (8001ee8 <readall_inputs+0x15c>)
 8001e7a:	7813      	ldrb	r3, [r2, #0]
 8001e7c:	f361 1304 	bfi	r3, r1, #4, #1
 8001e80:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.OVC = HAL_GPIO_ReadPin(OVC_SENSE_GPIO_Port, OVC_SENSE_Pin);						// Eingang Overcurrent erkannt
 8001e82:	2104      	movs	r1, #4
 8001e84:	4819      	ldr	r0, [pc, #100]	; (8001eec <readall_inputs+0x160>)
 8001e86:	f002 ff8d 	bl	8004da4 <HAL_GPIO_ReadPin>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	b2d9      	uxtb	r1, r3
 8001e92:	4a17      	ldr	r2, [pc, #92]	; (8001ef0 <readall_inputs+0x164>)
 8001e94:	7813      	ldrb	r3, [r2, #0]
 8001e96:	f361 0300 	bfi	r3, r1, #0, #1
 8001e9a:	7013      	strb	r3, [r2, #0]
	komfort_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8001e9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ea0:	4810      	ldr	r0, [pc, #64]	; (8001ee4 <readall_inputs+0x158>)
 8001ea2:	f002 ff7f 	bl	8004da4 <HAL_GPIO_ReadPin>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	b2d9      	uxtb	r1, r3
 8001eae:	4a10      	ldr	r2, [pc, #64]	; (8001ef0 <readall_inputs+0x164>)
 8001eb0:	7813      	ldrb	r3, [r2, #0]
 8001eb2:	f361 0341 	bfi	r3, r1, #1, #1
 8001eb6:	7013      	strb	r3, [r2, #0]
	komfort_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8001eb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ebc:	4809      	ldr	r0, [pc, #36]	; (8001ee4 <readall_inputs+0x158>)
 8001ebe:	f002 ff71 	bl	8004da4 <HAL_GPIO_ReadPin>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	b2d9      	uxtb	r1, r3
 8001eca:	4a09      	ldr	r2, [pc, #36]	; (8001ef0 <readall_inputs+0x164>)
 8001ecc:	7813      	ldrb	r3, [r2, #0]
 8001ece:	f361 0382 	bfi	r3, r1, #2, #1
 8001ed2:	7013      	strb	r3, [r2, #0]
}
 8001ed4:	bf00      	nop
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	20000038 	.word	0x20000038
 8001ee0:	40020c00 	.word	0x40020c00
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	2000003c 	.word	0x2000003c
 8001eec:	40021400 	.word	0x40021400
 8001ef0:	20000040 	.word	0x20000040

08001ef4 <millis>:
//----------------------------------------------------------------------

// Funktion millis (ms)
//----------------------------------------------------------------------
uint32_t millis(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001ef8:	f001 fe5c 	bl	8003bb4 <HAL_GetTick>
 8001efc:	4603      	mov	r3, r0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);								// Blaue LED Platine setzen
 8001f08:	2201      	movs	r2, #1
 8001f0a:	2180      	movs	r1, #128	; 0x80
 8001f0c:	481b      	ldr	r0, [pc, #108]	; (8001f7c <testPCB_Leds+0x78>)
 8001f0e:	f002 ff61 	bl	8004dd4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001f12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f16:	f001 fe59 	bl	8003bcc <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);							// Blaue LED Platine zuruecksetzen
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2180      	movs	r1, #128	; 0x80
 8001f1e:	4817      	ldr	r0, [pc, #92]	; (8001f7c <testPCB_Leds+0x78>)
 8001f20:	f002 ff58 	bl	8004dd4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001f24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f28:	f001 fe50 	bl	8003bcc <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);							// Gruene LED Platine setzen
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	2104      	movs	r1, #4
 8001f30:	4812      	ldr	r0, [pc, #72]	; (8001f7c <testPCB_Leds+0x78>)
 8001f32:	f002 ff4f 	bl	8004dd4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001f36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f3a:	f001 fe47 	bl	8003bcc <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);							// Gruene LED Platine zuruecksetzen
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2104      	movs	r1, #4
 8001f42:	480e      	ldr	r0, [pc, #56]	; (8001f7c <testPCB_Leds+0x78>)
 8001f44:	f002 ff46 	bl	8004dd4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001f48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f4c:	f001 fe3e 	bl	8003bcc <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);								// Rote LED Platine setzen
 8001f50:	2201      	movs	r2, #1
 8001f52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f56:	4809      	ldr	r0, [pc, #36]	; (8001f7c <testPCB_Leds+0x78>)
 8001f58:	f002 ff3c 	bl	8004dd4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001f5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f60:	f001 fe34 	bl	8003bcc <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);								// Rote LED Platine zuruecksetzen
 8001f64:	2200      	movs	r2, #0
 8001f66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f6a:	4804      	ldr	r0, [pc, #16]	; (8001f7c <testPCB_Leds+0x78>)
 8001f6c:	f002 ff32 	bl	8004dd4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001f70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f74:	f001 fe2a 	bl	8003bcc <HAL_Delay>
}
 8001f78:	bf00      	nop
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40020400 	.word	0x40020400

08001f80 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f86:	463b      	mov	r3, r7
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001f92:	4b44      	ldr	r3, [pc, #272]	; (80020a4 <MX_ADC1_Init+0x124>)
 8001f94:	4a44      	ldr	r2, [pc, #272]	; (80020a8 <MX_ADC1_Init+0x128>)
 8001f96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f98:	4b42      	ldr	r3, [pc, #264]	; (80020a4 <MX_ADC1_Init+0x124>)
 8001f9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f9e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fa0:	4b40      	ldr	r3, [pc, #256]	; (80020a4 <MX_ADC1_Init+0x124>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001fa6:	4b3f      	ldr	r3, [pc, #252]	; (80020a4 <MX_ADC1_Init+0x124>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001fac:	4b3d      	ldr	r3, [pc, #244]	; (80020a4 <MX_ADC1_Init+0x124>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fb2:	4b3c      	ldr	r3, [pc, #240]	; (80020a4 <MX_ADC1_Init+0x124>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fba:	4b3a      	ldr	r3, [pc, #232]	; (80020a4 <MX_ADC1_Init+0x124>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fc0:	4b38      	ldr	r3, [pc, #224]	; (80020a4 <MX_ADC1_Init+0x124>)
 8001fc2:	4a3a      	ldr	r2, [pc, #232]	; (80020ac <MX_ADC1_Init+0x12c>)
 8001fc4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fc6:	4b37      	ldr	r3, [pc, #220]	; (80020a4 <MX_ADC1_Init+0x124>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001fcc:	4b35      	ldr	r3, [pc, #212]	; (80020a4 <MX_ADC1_Init+0x124>)
 8001fce:	2206      	movs	r2, #6
 8001fd0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001fd2:	4b34      	ldr	r3, [pc, #208]	; (80020a4 <MX_ADC1_Init+0x124>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fda:	4b32      	ldr	r3, [pc, #200]	; (80020a4 <MX_ADC1_Init+0x124>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fe0:	4830      	ldr	r0, [pc, #192]	; (80020a4 <MX_ADC1_Init+0x124>)
 8001fe2:	f001 fe5f 	bl	8003ca4 <HAL_ADC_Init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001fec:	f001 f908 	bl	8003200 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001ff0:	2307      	movs	r3, #7
 8001ff2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ffc:	463b      	mov	r3, r7
 8001ffe:	4619      	mov	r1, r3
 8002000:	4828      	ldr	r0, [pc, #160]	; (80020a4 <MX_ADC1_Init+0x124>)
 8002002:	f001 fe93 	bl	8003d2c <HAL_ADC_ConfigChannel>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800200c:	f001 f8f8 	bl	8003200 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002010:	2303      	movs	r3, #3
 8002012:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002014:	2302      	movs	r3, #2
 8002016:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002018:	463b      	mov	r3, r7
 800201a:	4619      	mov	r1, r3
 800201c:	4821      	ldr	r0, [pc, #132]	; (80020a4 <MX_ADC1_Init+0x124>)
 800201e:	f001 fe85 	bl	8003d2c <HAL_ADC_ConfigChannel>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002028:	f001 f8ea 	bl	8003200 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800202c:	2304      	movs	r3, #4
 800202e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002030:	2303      	movs	r3, #3
 8002032:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002034:	463b      	mov	r3, r7
 8002036:	4619      	mov	r1, r3
 8002038:	481a      	ldr	r0, [pc, #104]	; (80020a4 <MX_ADC1_Init+0x124>)
 800203a:	f001 fe77 	bl	8003d2c <HAL_ADC_ConfigChannel>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002044:	f001 f8dc 	bl	8003200 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002048:	2305      	movs	r3, #5
 800204a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800204c:	2304      	movs	r3, #4
 800204e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002050:	463b      	mov	r3, r7
 8002052:	4619      	mov	r1, r3
 8002054:	4813      	ldr	r0, [pc, #76]	; (80020a4 <MX_ADC1_Init+0x124>)
 8002056:	f001 fe69 	bl	8003d2c <HAL_ADC_ConfigChannel>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002060:	f001 f8ce 	bl	8003200 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002064:	2306      	movs	r3, #6
 8002066:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002068:	2305      	movs	r3, #5
 800206a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800206c:	463b      	mov	r3, r7
 800206e:	4619      	mov	r1, r3
 8002070:	480c      	ldr	r0, [pc, #48]	; (80020a4 <MX_ADC1_Init+0x124>)
 8002072:	f001 fe5b 	bl	8003d2c <HAL_ADC_ConfigChannel>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800207c:	f001 f8c0 	bl	8003200 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <MX_ADC1_Init+0x130>)
 8002082:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002084:	2306      	movs	r3, #6
 8002086:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002088:	463b      	mov	r3, r7
 800208a:	4619      	mov	r1, r3
 800208c:	4805      	ldr	r0, [pc, #20]	; (80020a4 <MX_ADC1_Init+0x124>)
 800208e:	f001 fe4d 	bl	8003d2c <HAL_ADC_ConfigChannel>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002098:	f001 f8b2 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800209c:	bf00      	nop
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000054 	.word	0x20000054
 80020a8:	40012000 	.word	0x40012000
 80020ac:	0f000001 	.word	0x0f000001
 80020b0:	10000012 	.word	0x10000012

080020b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08a      	sub	sp, #40	; 0x28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a15      	ldr	r2, [pc, #84]	; (8002128 <HAL_ADC_MspInit+0x74>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d123      	bne.n	800211e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020d6:	4b15      	ldr	r3, [pc, #84]	; (800212c <HAL_ADC_MspInit+0x78>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	4a14      	ldr	r2, [pc, #80]	; (800212c <HAL_ADC_MspInit+0x78>)
 80020dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e0:	6453      	str	r3, [r2, #68]	; 0x44
 80020e2:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_ADC_MspInit+0x78>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ee:	4b0f      	ldr	r3, [pc, #60]	; (800212c <HAL_ADC_MspInit+0x78>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a0e      	ldr	r2, [pc, #56]	; (800212c <HAL_ADC_MspInit+0x78>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b0c      	ldr	r3, [pc, #48]	; (800212c <HAL_ADC_MspInit+0x78>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 8002106:	23f8      	movs	r3, #248	; 0xf8
 8002108:	617b      	str	r3, [r7, #20]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800210a:	2303      	movs	r3, #3
 800210c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002112:	f107 0314 	add.w	r3, r7, #20
 8002116:	4619      	mov	r1, r3
 8002118:	4805      	ldr	r0, [pc, #20]	; (8002130 <HAL_ADC_MspInit+0x7c>)
 800211a:	f002 fc97 	bl	8004a4c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800211e:	bf00      	nop
 8002120:	3728      	adds	r7, #40	; 0x28
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40012000 	.word	0x40012000
 800212c:	40023800 	.word	0x40023800
 8002130:	40020000 	.word	0x40020000

08002134 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002138:	4b17      	ldr	r3, [pc, #92]	; (8002198 <MX_CAN1_Init+0x64>)
 800213a:	4a18      	ldr	r2, [pc, #96]	; (800219c <MX_CAN1_Init+0x68>)
 800213c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800213e:	4b16      	ldr	r3, [pc, #88]	; (8002198 <MX_CAN1_Init+0x64>)
 8002140:	2210      	movs	r2, #16
 8002142:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002144:	4b14      	ldr	r3, [pc, #80]	; (8002198 <MX_CAN1_Init+0x64>)
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800214a:	4b13      	ldr	r3, [pc, #76]	; (8002198 <MX_CAN1_Init+0x64>)
 800214c:	2200      	movs	r2, #0
 800214e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <MX_CAN1_Init+0x64>)
 8002152:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002156:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002158:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <MX_CAN1_Init+0x64>)
 800215a:	2200      	movs	r2, #0
 800215c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800215e:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <MX_CAN1_Init+0x64>)
 8002160:	2200      	movs	r2, #0
 8002162:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <MX_CAN1_Init+0x64>)
 8002166:	2200      	movs	r2, #0
 8002168:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800216a:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <MX_CAN1_Init+0x64>)
 800216c:	2200      	movs	r2, #0
 800216e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002170:	4b09      	ldr	r3, [pc, #36]	; (8002198 <MX_CAN1_Init+0x64>)
 8002172:	2200      	movs	r2, #0
 8002174:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002176:	4b08      	ldr	r3, [pc, #32]	; (8002198 <MX_CAN1_Init+0x64>)
 8002178:	2200      	movs	r2, #0
 800217a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <MX_CAN1_Init+0x64>)
 800217e:	2200      	movs	r2, #0
 8002180:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002182:	4805      	ldr	r0, [pc, #20]	; (8002198 <MX_CAN1_Init+0x64>)
 8002184:	f002 f822 	bl	80041cc <HAL_CAN_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800218e:	f001 f837 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	2000009c 	.word	0x2000009c
 800219c:	40006400 	.word	0x40006400

080021a0 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 80021a4:	4b17      	ldr	r3, [pc, #92]	; (8002204 <MX_CAN3_Init+0x64>)
 80021a6:	4a18      	ldr	r2, [pc, #96]	; (8002208 <MX_CAN3_Init+0x68>)
 80021a8:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 80021aa:	4b16      	ldr	r3, [pc, #88]	; (8002204 <MX_CAN3_Init+0x64>)
 80021ac:	2206      	movs	r2, #6
 80021ae:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <MX_CAN3_Init+0x64>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80021b6:	4b13      	ldr	r3, [pc, #76]	; (8002204 <MX_CAN3_Init+0x64>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 80021bc:	4b11      	ldr	r3, [pc, #68]	; (8002204 <MX_CAN3_Init+0x64>)
 80021be:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80021c2:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <MX_CAN3_Init+0x64>)
 80021c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80021ca:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 80021cc:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <MX_CAN3_Init+0x64>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 80021d2:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <MX_CAN3_Init+0x64>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 80021d8:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <MX_CAN3_Init+0x64>)
 80021da:	2200      	movs	r2, #0
 80021dc:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <MX_CAN3_Init+0x64>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 80021e4:	4b07      	ldr	r3, [pc, #28]	; (8002204 <MX_CAN3_Init+0x64>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <MX_CAN3_Init+0x64>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 80021f0:	4804      	ldr	r0, [pc, #16]	; (8002204 <MX_CAN3_Init+0x64>)
 80021f2:	f001 ffeb 	bl	80041cc <HAL_CAN_Init>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 80021fc:	f001 f800 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}
 8002204:	200000c4 	.word	0x200000c4
 8002208:	40003400 	.word	0x40003400

0800220c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08c      	sub	sp, #48	; 0x30
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002214:	f107 031c 	add.w	r3, r7, #28
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a2e      	ldr	r2, [pc, #184]	; (80022e4 <HAL_CAN_MspInit+0xd8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d128      	bne.n	8002280 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800222e:	4b2e      	ldr	r3, [pc, #184]	; (80022e8 <HAL_CAN_MspInit+0xdc>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	4a2d      	ldr	r2, [pc, #180]	; (80022e8 <HAL_CAN_MspInit+0xdc>)
 8002234:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002238:	6413      	str	r3, [r2, #64]	; 0x40
 800223a:	4b2b      	ldr	r3, [pc, #172]	; (80022e8 <HAL_CAN_MspInit+0xdc>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002242:	61bb      	str	r3, [r7, #24]
 8002244:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002246:	4b28      	ldr	r3, [pc, #160]	; (80022e8 <HAL_CAN_MspInit+0xdc>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	4a27      	ldr	r2, [pc, #156]	; (80022e8 <HAL_CAN_MspInit+0xdc>)
 800224c:	f043 0308 	orr.w	r3, r3, #8
 8002250:	6313      	str	r3, [r2, #48]	; 0x30
 8002252:	4b25      	ldr	r3, [pc, #148]	; (80022e8 <HAL_CAN_MspInit+0xdc>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800225e:	2303      	movs	r3, #3
 8002260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002262:	2302      	movs	r3, #2
 8002264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226a:	2303      	movs	r3, #3
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800226e:	2309      	movs	r3, #9
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002272:	f107 031c 	add.w	r3, r7, #28
 8002276:	4619      	mov	r1, r3
 8002278:	481c      	ldr	r0, [pc, #112]	; (80022ec <HAL_CAN_MspInit+0xe0>)
 800227a:	f002 fbe7 	bl	8004a4c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 800227e:	e02d      	b.n	80022dc <HAL_CAN_MspInit+0xd0>
  else if(canHandle->Instance==CAN3)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a1a      	ldr	r2, [pc, #104]	; (80022f0 <HAL_CAN_MspInit+0xe4>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d128      	bne.n	80022dc <HAL_CAN_MspInit+0xd0>
    __HAL_RCC_CAN3_CLK_ENABLE();
 800228a:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <HAL_CAN_MspInit+0xdc>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	4a16      	ldr	r2, [pc, #88]	; (80022e8 <HAL_CAN_MspInit+0xdc>)
 8002290:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002294:	6413      	str	r3, [r2, #64]	; 0x40
 8002296:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <HAL_CAN_MspInit+0xdc>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a2:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <HAL_CAN_MspInit+0xdc>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	4a10      	ldr	r2, [pc, #64]	; (80022e8 <HAL_CAN_MspInit+0xdc>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	6313      	str	r3, [r2, #48]	; 0x30
 80022ae:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <HAL_CAN_MspInit+0xdc>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 80022ba:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80022be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c0:	2302      	movs	r3, #2
 80022c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c8:	2303      	movs	r3, #3
 80022ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 80022cc:	230b      	movs	r3, #11
 80022ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d0:	f107 031c 	add.w	r3, r7, #28
 80022d4:	4619      	mov	r1, r3
 80022d6:	4807      	ldr	r0, [pc, #28]	; (80022f4 <HAL_CAN_MspInit+0xe8>)
 80022d8:	f002 fbb8 	bl	8004a4c <HAL_GPIO_Init>
}
 80022dc:	bf00      	nop
 80022de:	3730      	adds	r7, #48	; 0x30
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40006400 	.word	0x40006400
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40020c00 	.word	0x40020c00
 80022f0:	40003400 	.word	0x40003400
 80022f4:	40020000 	.word	0x40020000

080022f8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08e      	sub	sp, #56	; 0x38
 80022fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	60da      	str	r2, [r3, #12]
 800230c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800230e:	4bb7      	ldr	r3, [pc, #732]	; (80025ec <MX_GPIO_Init+0x2f4>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4ab6      	ldr	r2, [pc, #728]	; (80025ec <MX_GPIO_Init+0x2f4>)
 8002314:	f043 0310 	orr.w	r3, r3, #16
 8002318:	6313      	str	r3, [r2, #48]	; 0x30
 800231a:	4bb4      	ldr	r3, [pc, #720]	; (80025ec <MX_GPIO_Init+0x2f4>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f003 0310 	and.w	r3, r3, #16
 8002322:	623b      	str	r3, [r7, #32]
 8002324:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002326:	4bb1      	ldr	r3, [pc, #708]	; (80025ec <MX_GPIO_Init+0x2f4>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	4ab0      	ldr	r2, [pc, #704]	; (80025ec <MX_GPIO_Init+0x2f4>)
 800232c:	f043 0304 	orr.w	r3, r3, #4
 8002330:	6313      	str	r3, [r2, #48]	; 0x30
 8002332:	4bae      	ldr	r3, [pc, #696]	; (80025ec <MX_GPIO_Init+0x2f4>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	61fb      	str	r3, [r7, #28]
 800233c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800233e:	4bab      	ldr	r3, [pc, #684]	; (80025ec <MX_GPIO_Init+0x2f4>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4aaa      	ldr	r2, [pc, #680]	; (80025ec <MX_GPIO_Init+0x2f4>)
 8002344:	f043 0320 	orr.w	r3, r3, #32
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4ba8      	ldr	r3, [pc, #672]	; (80025ec <MX_GPIO_Init+0x2f4>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0320 	and.w	r3, r3, #32
 8002352:	61bb      	str	r3, [r7, #24]
 8002354:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002356:	4ba5      	ldr	r3, [pc, #660]	; (80025ec <MX_GPIO_Init+0x2f4>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	4aa4      	ldr	r2, [pc, #656]	; (80025ec <MX_GPIO_Init+0x2f4>)
 800235c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002360:	6313      	str	r3, [r2, #48]	; 0x30
 8002362:	4ba2      	ldr	r3, [pc, #648]	; (80025ec <MX_GPIO_Init+0x2f4>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800236e:	4b9f      	ldr	r3, [pc, #636]	; (80025ec <MX_GPIO_Init+0x2f4>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	4a9e      	ldr	r2, [pc, #632]	; (80025ec <MX_GPIO_Init+0x2f4>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6313      	str	r3, [r2, #48]	; 0x30
 800237a:	4b9c      	ldr	r3, [pc, #624]	; (80025ec <MX_GPIO_Init+0x2f4>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002386:	4b99      	ldr	r3, [pc, #612]	; (80025ec <MX_GPIO_Init+0x2f4>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	4a98      	ldr	r2, [pc, #608]	; (80025ec <MX_GPIO_Init+0x2f4>)
 800238c:	f043 0302 	orr.w	r3, r3, #2
 8002390:	6313      	str	r3, [r2, #48]	; 0x30
 8002392:	4b96      	ldr	r3, [pc, #600]	; (80025ec <MX_GPIO_Init+0x2f4>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800239e:	4b93      	ldr	r3, [pc, #588]	; (80025ec <MX_GPIO_Init+0x2f4>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a92      	ldr	r2, [pc, #584]	; (80025ec <MX_GPIO_Init+0x2f4>)
 80023a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
 80023aa:	4b90      	ldr	r3, [pc, #576]	; (80025ec <MX_GPIO_Init+0x2f4>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023b6:	4b8d      	ldr	r3, [pc, #564]	; (80025ec <MX_GPIO_Init+0x2f4>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	4a8c      	ldr	r2, [pc, #560]	; (80025ec <MX_GPIO_Init+0x2f4>)
 80023bc:	f043 0308 	orr.w	r3, r3, #8
 80023c0:	6313      	str	r3, [r2, #48]	; 0x30
 80023c2:	4b8a      	ldr	r3, [pc, #552]	; (80025ec <MX_GPIO_Init+0x2f4>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	607b      	str	r3, [r7, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 80023ce:	2200      	movs	r2, #0
 80023d0:	f248 0187 	movw	r1, #32903	; 0x8087
 80023d4:	4886      	ldr	r0, [pc, #536]	; (80025f0 <MX_GPIO_Init+0x2f8>)
 80023d6:	f002 fcfd 	bl	8004dd4 <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_RESET);
 80023da:	2200      	movs	r2, #0
 80023dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023e0:	4884      	ldr	r0, [pc, #528]	; (80025f4 <MX_GPIO_Init+0x2fc>)
 80023e2:	f002 fcf7 	bl	8004dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin, GPIO_PIN_RESET);
 80023e6:	2200      	movs	r2, #0
 80023e8:	f242 0102 	movw	r1, #8194	; 0x2002
 80023ec:	4882      	ldr	r0, [pc, #520]	; (80025f8 <MX_GPIO_Init+0x300>)
 80023ee:	f002 fcf1 	bl	8004dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 80023f2:	2200      	movs	r2, #0
 80023f4:	f240 6102 	movw	r1, #1538	; 0x602
 80023f8:	4880      	ldr	r0, [pc, #512]	; (80025fc <MX_GPIO_Init+0x304>)
 80023fa:	f002 fceb 	bl	8004dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 80023fe:	2200      	movs	r2, #0
 8002400:	f244 0184 	movw	r1, #16516	; 0x4084
 8002404:	487e      	ldr	r0, [pc, #504]	; (8002600 <MX_GPIO_Init+0x308>)
 8002406:	f002 fce5 	bl	8004dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISOSPI_CS_GPIO_Port, ISOSPI_CS_Pin, GPIO_PIN_SET);
 800240a:	2201      	movs	r2, #1
 800240c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002410:	4877      	ldr	r0, [pc, #476]	; (80025f0 <MX_GPIO_Init+0x2f8>)
 8002412:	f002 fcdf 	bl	8004dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8002416:	2200      	movs	r2, #0
 8002418:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 800241c:	4879      	ldr	r0, [pc, #484]	; (8002604 <MX_GPIO_Init+0x30c>)
 800241e:	f002 fcd9 	bl	8004dd4 <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 8002422:	2200      	movs	r2, #0
 8002424:	2118      	movs	r1, #24
 8002426:	4878      	ldr	r0, [pc, #480]	; (8002608 <MX_GPIO_Init+0x310>)
 8002428:	f002 fcd4 	bl	8004dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_CS_Pin|ISOSPI_EN_Pin
 800242c:	f648 0387 	movw	r3, #34951	; 0x8887
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
                          |FREIGABE_Pin|INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002432:	2301      	movs	r3, #1
 8002434:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243a:	2300      	movs	r3, #0
 800243c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800243e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002442:	4619      	mov	r1, r3
 8002444:	486a      	ldr	r0, [pc, #424]	; (80025f0 <MX_GPIO_Init+0x2f8>)
 8002446:	f002 fb01 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 800244a:	f44f 739c 	mov.w	r3, #312	; 0x138
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002450:	2300      	movs	r3, #0
 8002452:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800245c:	4619      	mov	r1, r3
 800245e:	4864      	ldr	r0, [pc, #400]	; (80025f0 <MX_GPIO_Init+0x2f8>)
 8002460:	f002 faf4 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8002464:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800246a:	2303      	movs	r3, #3
 800246c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002476:	4619      	mov	r1, r3
 8002478:	485d      	ldr	r0, [pc, #372]	; (80025f0 <MX_GPIO_Init+0x2f8>)
 800247a:	f002 fae7 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 800247e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002484:	2301      	movs	r3, #1
 8002486:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248c:	2300      	movs	r3, #0
 800248e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8002490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002494:	4619      	mov	r1, r3
 8002496:	4857      	ldr	r0, [pc, #348]	; (80025f4 <MX_GPIO_Init+0x2fc>)
 8002498:	f002 fad8 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PCPin PC7 PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 800249c:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |SD_SW_Pin|GPIO_PIN_7|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024a2:	2303      	movs	r3, #3
 80024a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ae:	4619      	mov	r1, r3
 80024b0:	4850      	ldr	r0, [pc, #320]	; (80025f4 <MX_GPIO_Init+0x2fc>)
 80024b2:	f002 facb 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF3 PF4 PF5
                           PFPin PFPin PFPin PFPin
                           PF10 PF11 PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80024b6:	f645 73f9 	movw	r3, #24569	; 0x5ff9
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024bc:	2303      	movs	r3, #3
 80024be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c8:	4619      	mov	r1, r3
 80024ca:	484b      	ldr	r0, [pc, #300]	; (80025f8 <MX_GPIO_Init+0x300>)
 80024cc:	f002 fabe 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin;
 80024d0:	f242 0302 	movw	r3, #8194	; 0x2002
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d6:	2301      	movs	r3, #1
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024de:	2300      	movs	r3, #0
 80024e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e6:	4619      	mov	r1, r3
 80024e8:	4843      	ldr	r0, [pc, #268]	; (80025f8 <MX_GPIO_Init+0x300>)
 80024ea:	f002 faaf 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin|PRECHARGE_IN_Pin;
 80024ee:	f248 0304 	movw	r3, #32772	; 0x8004
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024f4:	2300      	movs	r3, #0
 80024f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002500:	4619      	mov	r1, r3
 8002502:	483d      	ldr	r0, [pc, #244]	; (80025f8 <MX_GPIO_Init+0x300>)
 8002504:	f002 faa2 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|HW_WAKE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 8002508:	f641 0305 	movw	r3, #6149	; 0x1805
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800250e:	2300      	movs	r3, #0
 8002510:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800251a:	4619      	mov	r1, r3
 800251c:	4837      	ldr	r0, [pc, #220]	; (80025fc <MX_GPIO_Init+0x304>)
 800251e:	f002 fa95 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 8002522:	f240 6302 	movw	r3, #1538	; 0x602
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002528:	2301      	movs	r3, #1
 800252a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002530:	2300      	movs	r3, #0
 8002532:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002538:	4619      	mov	r1, r3
 800253a:	4830      	ldr	r0, [pc, #192]	; (80025fc <MX_GPIO_Init+0x304>)
 800253c:	f002 fa86 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8002540:	f64b 7373 	movw	r3, #49011	; 0xbf73
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|I2C_SCL_Pin|I2C_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002546:	2303      	movs	r3, #3
 8002548:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254a:	2300      	movs	r3, #0
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800254e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002552:	4619      	mov	r1, r3
 8002554:	482a      	ldr	r0, [pc, #168]	; (8002600 <MX_GPIO_Init+0x308>)
 8002556:	f002 fa79 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 800255a:	f244 0384 	movw	r3, #16516	; 0x4084
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002560:	2301      	movs	r3, #1
 8002562:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002568:	2300      	movs	r3, #0
 800256a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002570:	4619      	mov	r1, r3
 8002572:	4823      	ldr	r0, [pc, #140]	; (8002600 <MX_GPIO_Init+0x308>)
 8002574:	f002 fa6a 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG6 PG8
                           PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8
 8002578:	f240 3343 	movw	r3, #835	; 0x343
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
                          |POTI_MISO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800257e:	2303      	movs	r3, #3
 8002580:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800258a:	4619      	mov	r1, r3
 800258c:	481d      	ldr	r0, [pc, #116]	; (8002604 <MX_GPIO_Init+0x30c>)
 800258e:	f002 fa5d 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|SD_CMD_Pin;
 8002592:	f240 7304 	movw	r3, #1796	; 0x704
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002598:	2303      	movs	r3, #3
 800259a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a4:	4619      	mov	r1, r3
 80025a6:	4818      	ldr	r0, [pc, #96]	; (8002608 <MX_GPIO_Init+0x310>)
 80025a8:	f002 fa50 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 80025ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b2:	2300      	movs	r3, #0
 80025b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 80025ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025be:	4619      	mov	r1, r3
 80025c0:	4811      	ldr	r0, [pc, #68]	; (8002608 <MX_GPIO_Init+0x310>)
 80025c2:	f002 fa43 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 80025c6:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025cc:	2301      	movs	r3, #1
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d4:	2300      	movs	r3, #0
 80025d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025dc:	4619      	mov	r1, r3
 80025de:	4809      	ldr	r0, [pc, #36]	; (8002604 <MX_GPIO_Init+0x30c>)
 80025e0:	f002 fa34 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|DIGITAL2_Pin;
 80025e4:	2318      	movs	r3, #24
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
 80025e8:	e010      	b.n	800260c <MX_GPIO_Init+0x314>
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40020800 	.word	0x40020800
 80025f8:	40021400 	.word	0x40021400
 80025fc:	40020000 	.word	0x40020000
 8002600:	40020400 	.word	0x40020400
 8002604:	40021800 	.word	0x40021800
 8002608:	40020c00 	.word	0x40020c00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800260c:	2301      	movs	r3, #1
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002614:	2300      	movs	r3, #0
 8002616:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800261c:	4619      	mov	r1, r3
 800261e:	4803      	ldr	r0, [pc, #12]	; (800262c <MX_GPIO_Init+0x334>)
 8002620:	f002 fa14 	bl	8004a4c <HAL_GPIO_Init>

}
 8002624:	bf00      	nop
 8002626:	3738      	adds	r7, #56	; 0x38
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40020c00 	.word	0x40020c00

08002630 <calculateMovingAverage>:
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	80fb      	strh	r3, [r7, #6]
 800263a:	460b      	mov	r3, r1
 800263c:	80bb      	strh	r3, [r7, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	807b      	strh	r3, [r7, #2]
	return (oldValue + ((newValue - oldValue) / n));						// MovingAverage Calculation x_n  = x_{n-1} + ((x_n+x_{n-1})/n)
 8002642:	88ba      	ldrh	r2, [r7, #4]
 8002644:	88fb      	ldrh	r3, [r7, #6]
 8002646:	1ad2      	subs	r2, r2, r3
 8002648:	887b      	ldrh	r3, [r7, #2]
 800264a:	fb92 f3f3 	sdiv	r3, r2, r3
 800264e:	b29a      	uxth	r2, r3
 8002650:	88fb      	ldrh	r3, [r7, #6]
 8002652:	4413      	add	r3, r2
 8002654:	b29b      	uxth	r3, r3
}
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <getDifference>:
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	4603      	mov	r3, r0
 800266a:	460a      	mov	r2, r1
 800266c:	80fb      	strh	r3, [r7, #6]
 800266e:	4613      	mov	r3, r2
 8002670:	80bb      	strh	r3, [r7, #4]
	if (a > b)
 8002672:	88fa      	ldrh	r2, [r7, #6]
 8002674:	88bb      	ldrh	r3, [r7, #4]
 8002676:	429a      	cmp	r2, r3
 8002678:	d904      	bls.n	8002684 <getDifference+0x22>
		return (a - b);
 800267a:	88fa      	ldrh	r2, [r7, #6]
 800267c:	88bb      	ldrh	r3, [r7, #4]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	b29b      	uxth	r3, r3
 8002682:	e009      	b.n	8002698 <getDifference+0x36>
	else if (a < b)
 8002684:	88fa      	ldrh	r2, [r7, #6]
 8002686:	88bb      	ldrh	r3, [r7, #4]
 8002688:	429a      	cmp	r2, r3
 800268a:	d204      	bcs.n	8002696 <getDifference+0x34>
		return (b - a);
 800268c:	88ba      	ldrh	r2, [r7, #4]
 800268e:	88fb      	ldrh	r3, [r7, #6]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	b29b      	uxth	r3, r3
 8002694:	e000      	b.n	8002698 <getDifference+0x36>
		return 0;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	0000      	movs	r0, r0
	...

080026a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026a8:	b5b0      	push	{r4, r5, r7, lr}
 80026aa:	b0c4      	sub	sp, #272	; 0x110
 80026ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026ae:	f001 fa30 	bl	8003b12 <HAL_Init>

  /* USER CODE BEGIN Init */
	// Definiere Variablen fuer Main-Funktion
	uint8_t pwm_count = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint16_t count = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
	uint32_t timerPeriod;
	uint8_t start_flag = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b

	// Definiere Variablen fuer BMS Zellen
	uint8_t data[36] = {0}, temp, CFG[6] = {0};
 80026c4:	2300      	movs	r3, #0
 80026c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026ca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026ce:	2220      	movs	r2, #32
 80026d0:	2100      	movs	r1, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f006 fecc 	bl	8009470 <memset>
 80026d8:	2300      	movs	r3, #0
 80026da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026de:	2300      	movs	r3, #0
 80026e0:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
	uint32_t tmp;
	uint16_t spannungen[12] = {0}, temperatur[2] = {0}, tmp_mean;
 80026e4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]
 80026f4:	615a      	str	r2, [r3, #20]
 80026f6:	2300      	movs	r3, #0
 80026f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	// Definiere Variablen fuer Main-Funktion
	uint8_t TxData[8], OutData[4], InData[3], status;
  	CAN_FilterTypeDef sFilterConfig;

  	// Erstelle Can-Nachrichten
  	CAN_TxHeaderTypeDef TxMessage = {0x124, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 80026fc:	4b95      	ldr	r3, [pc, #596]	; (8002954 <main+0x2ac>)
 80026fe:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8002702:	461d      	mov	r5, r3
 8002704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002708:	e895 0003 	ldmia.w	r5, {r0, r1}
 800270c:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxOutput = {BMS_CAN_DIGITAL_OUT, 0, CAN_RTR_DATA, CAN_ID_STD, 4, DISABLE};
 8002710:	4b91      	ldr	r3, [pc, #580]	; (8002958 <main+0x2b0>)
 8002712:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002716:	461d      	mov	r5, r3
 8002718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800271a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800271c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002720:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxInput = {BMS_CAN_DIGITAL_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 3, DISABLE};
 8002724:	4b8d      	ldr	r3, [pc, #564]	; (800295c <main+0x2b4>)
 8002726:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800272a:	461d      	mov	r5, r3
 800272c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800272e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002730:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002734:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxIMD = {BMS_CAN_SAFETY, 0, CAN_RTR_DATA, CAN_ID_STD, 5, DISABLE};
 8002738:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800273c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002740:	4a87      	ldr	r2, [pc, #540]	; (8002960 <main+0x2b8>)
 8002742:	461c      	mov	r4, r3
 8002744:	4615      	mov	r5, r2
 8002746:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002748:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800274a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800274e:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002752:	f000 fc8b 	bl	800306c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002756:	f7ff fdcf 	bl	80022f8 <MX_GPIO_Init>
  MX_CAN1_Init();
 800275a:	f7ff fceb 	bl	8002134 <MX_CAN1_Init>
  MX_SPI4_Init();
 800275e:	f000 fdbb 	bl	80032d8 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 8002762:	f001 f91f 	bl	80039a4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002766:	f7ff fc0b 	bl	8001f80 <MX_ADC1_Init>
  MX_TIM1_Init();
 800276a:	f000 ff05 	bl	8003578 <MX_TIM1_Init>
  MX_TIM4_Init();
 800276e:	f000 ffa7 	bl	80036c0 <MX_TIM4_Init>
  MX_SPI1_Init();
 8002772:	f000 fd73 	bl	800325c <MX_SPI1_Init>
  MX_CAN3_Init();
 8002776:	f7ff fd13 	bl	80021a0 <MX_CAN3_Init>
  MX_TIM6_Init();
 800277a:	f001 f81d 	bl	80037b8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 800277e:	f7fe ffa7 	bl	80016d0 <readResetSource>
 8002782:	4603      	mov	r3, r0
 8002784:	4618      	mov	r0, r3
 8002786:	f7fe fff5 	bl	8001774 <printResetSource>

	/* Teste serielle Schnittstelle*/
	#define TEST_STRING_UART		"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 800278a:	213a      	movs	r1, #58	; 0x3a
 800278c:	4875      	ldr	r0, [pc, #468]	; (8002964 <main+0x2bc>)
 800278e:	f7fd fef9 	bl	8000584 <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 8002792:	f7fe ff73 	bl	800167c <collectSystemInfo>
#endif

	// Leds Testen
	testPCB_Leds();
 8002796:	f7ff fbb5 	bl	8001f04 <testPCB_Leds>

  	// Lese alle Eingaenge
  	readall_inputs();
 800279a:	f7ff faf7 	bl	8001d8c <readall_inputs>

  	// IsoSPI einschalten, Isolierte Spannungsversorgung IsoSPI und HV-Precharge Messung einschalten
  	ISOSPI_ENABLE();
 800279e:	2201      	movs	r2, #1
 80027a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027a4:	4870      	ldr	r0, [pc, #448]	; (8002968 <main+0x2c0>)
 80027a6:	f002 fb15 	bl	8004dd4 <HAL_GPIO_WritePin>

  	// Warten fuer eine kurze Zeit
  	HAL_Delay(20);
 80027aa:	2014      	movs	r0, #20
 80027ac:	f001 fa0e 	bl	8003bcc <HAL_Delay>

    uartTransmit("\n", 1);
 80027b0:	2101      	movs	r1, #1
 80027b2:	486e      	ldr	r0, [pc, #440]	; (800296c <main+0x2c4>)
 80027b4:	f7fd fee6 	bl	8000584 <uartTransmit>
#define TEST_LTC6811	"Starte Batteriemanagement-System\n"
    uartTransmit(TEST_LTC6811, sizeof(TEST_LTC6811));
 80027b8:	2122      	movs	r1, #34	; 0x22
 80027ba:	486d      	ldr	r0, [pc, #436]	; (8002970 <main+0x2c8>)
 80027bc:	f7fd fee2 	bl	8000584 <uartTransmit>

	if ((temp = ltc6811_check()) != 0)									// LTC6804 Selftest durchfuehren
 80027c0:	f7fe f955 	bl	8000a6e <ltc6811_check>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
 80027ca:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d020      	beq.n	8002814 <main+0x16c>
	{
#define LTC6811_FAILED	"Selbsttest LTC6811 fehlerhaft\n"
		uartTransmit(LTC6811_FAILED, sizeof(LTC6811_FAILED));			// Ausgabe bei Fehlerhaftem Selbsttest
 80027d2:	211f      	movs	r1, #31
 80027d4:	4867      	ldr	r0, [pc, #412]	; (8002974 <main+0x2cc>)
 80027d6:	f7fd fed5 	bl	8000584 <uartTransmit>
		leuchten_out.RedLed = 1;										// Variable setzen
 80027da:	4a67      	ldr	r2, [pc, #412]	; (8002978 <main+0x2d0>)
 80027dc:	7813      	ldrb	r3, [r2, #0]
 80027de:	f043 0320 	orr.w	r3, r3, #32
 80027e2:	7013      	strb	r3, [r2, #0]
	    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);// Ausgabe auf LEDs
 80027e4:	4b64      	ldr	r3, [pc, #400]	; (8002978 <main+0x2d0>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	461a      	mov	r2, r3
 80027f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027f4:	4861      	ldr	r0, [pc, #388]	; (800297c <main+0x2d4>)
 80027f6:	f002 faed 	bl	8004dd4 <HAL_GPIO_WritePin>

	    uartTransmitNumber(temp, 10);
 80027fa:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80027fe:	210a      	movs	r1, #10
 8002800:	4618      	mov	r0, r3
 8002802:	f7fd fed3 	bl	80005ac <uartTransmitNumber>
		uartTransmit("\n", 1);
 8002806:	2101      	movs	r1, #1
 8002808:	4858      	ldr	r0, [pc, #352]	; (800296c <main+0x2c4>)
 800280a:	f7fd febb 	bl	8000584 <uartTransmit>

		return 0;														// Programm abbrechen
 800280e:	2300      	movs	r3, #0
 8002810:	f000 bc02 	b.w	8003018 <main+0x970>
	}
	else
	{
#define LTC6811_PASSED	"Selbsttest LTC6811 erfolgreich\n"
		uartTransmit(LTC6811_PASSED, sizeof(LTC6811_PASSED));			// Ausgabe bei Erfolgreichem Selbsttest
 8002814:	2120      	movs	r1, #32
 8002816:	485a      	ldr	r0, [pc, #360]	; (8002980 <main+0x2d8>)
 8002818:	f7fd feb4 	bl	8000584 <uartTransmit>
	}

    // LTC6811 initialisieren
	CFG[0] = 0xF8;
 800281c:	23f8      	movs	r3, #248	; 0xf8
 800281e:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0
	CFG[1] = 0xCF;
 8002822:	23cf      	movs	r3, #207	; 0xcf
 8002824:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1
	CFG[2] = 0x17;
 8002828:	2317      	movs	r3, #23
 800282a:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
	CFG[3] = 0xA4;
 800282e:	23a4      	movs	r3, #164	; 0xa4
 8002830:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
	CFG[4] = 0x00;
 8002834:	2300      	movs	r3, #0
 8002836:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
	CFG[5] = 0x00;
 800283a:	2300      	movs	r3, #0
 800283c:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
	ltc6811_write(WRCFG, &CFG[0]);
 8002840:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002844:	4619      	mov	r1, r3
 8002846:	2001      	movs	r0, #1
 8002848:	f7fd ffa2 	bl	8000790 <ltc6811_write>

	// Alle Register zuruecksetzen
	ltc6811(CLRCELL);
 800284c:	f240 7011 	movw	r0, #1809	; 0x711
 8002850:	f7fd ff4a 	bl	80006e8 <ltc6811>
	ltc6811(CLRSTAT);
 8002854:	f240 7013 	movw	r0, #1811	; 0x713
 8002858:	f7fd ff46 	bl	80006e8 <ltc6811>
	ltc6811(CLRAUX);
 800285c:	f240 7012 	movw	r0, #1810	; 0x712
 8002860:	f7fd ff42 	bl	80006e8 <ltc6811>

	// Erster ADC Vorgang ist ungueltig
	ltc6811(ADCVAX | MD73 | CELLALL);									// Initial Command Zellen auslesen
 8002864:	f240 506f 	movw	r0, #1391	; 0x56f
 8002868:	f7fd ff3e 	bl	80006e8 <ltc6811>

	tmp_mean = 65535;
 800286c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002870:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
	timerPeriod = (HAL_RCC_GetPCLK2Freq() / htim1.Init.Prescaler);
 8002874:	f002 ff98 	bl	80057a8 <HAL_RCC_GetPCLK2Freq>
 8002878:	4602      	mov	r2, r0
 800287a:	4b42      	ldr	r3, [pc, #264]	; (8002984 <main+0x2dc>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002882:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  	// Start timer
	if (HAL_TIM_Base_Start(&htim1) != HAL_OK);
 8002886:	483f      	ldr	r0, [pc, #252]	; (8002984 <main+0x2dc>)
 8002888:	f004 fb82 	bl	8006f90 <HAL_TIM_Base_Start>
	if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1) != HAL_OK);
 800288c:	2100      	movs	r1, #0
 800288e:	483d      	ldr	r0, [pc, #244]	; (8002984 <main+0x2dc>)
 8002890:	f004 fd1e 	bl	80072d0 <HAL_TIM_IC_Start_IT>
	if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2) != HAL_OK);
 8002894:	2104      	movs	r1, #4
 8002896:	483b      	ldr	r0, [pc, #236]	; (8002984 <main+0x2dc>)
 8002898:	f004 fd1a 	bl	80072d0 <HAL_TIM_IC_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim6);
 800289c:	483a      	ldr	r0, [pc, #232]	; (8002988 <main+0x2e0>)
 800289e:	f004 fbe7 	bl	8007070 <HAL_TIM_Base_Start_IT>

  	// Starte CAN Bus
  	if((status = HAL_CAN_Start(&hcan3)) != HAL_OK)
 80028a2:	483a      	ldr	r0, [pc, #232]	; (800298c <main+0x2e4>)
 80028a4:	f001 fe7a 	bl	800459c <HAL_CAN_Start>
 80028a8:	4603      	mov	r3, r0
 80028aa:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
 80028ae:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d006      	beq.n	80028c4 <main+0x21c>
  	{
  		// Start Error
  		hal_error(status);
 80028b6:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fe ffca 	bl	8001854 <hal_error>
  		Error_Handler();
 80028c0:	f000 fc9e 	bl	8003200 <Error_Handler>
  	}
  	uartTransmit("CAN START\n", 10);
 80028c4:	210a      	movs	r1, #10
 80028c6:	4832      	ldr	r0, [pc, #200]	; (8002990 <main+0x2e8>)
 80028c8:	f7fd fe5c 	bl	8000584 <uartTransmit>

  	// Aktiviere Interrupts fuer CAN Bus
  	if((status = HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING)) != HAL_OK)
 80028cc:	2102      	movs	r1, #2
 80028ce:	482f      	ldr	r0, [pc, #188]	; (800298c <main+0x2e4>)
 80028d0:	f001 ff83 	bl	80047da <HAL_CAN_ActivateNotification>
 80028d4:	4603      	mov	r3, r0
 80028d6:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
 80028da:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d006      	beq.n	80028f0 <main+0x248>
  	{
  		/* Notification Error */
  		hal_error(status);
 80028e2:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fe ffb4 	bl	8001854 <hal_error>
  		Error_Handler();
 80028ec:	f000 fc88 	bl	8003200 <Error_Handler>
  	}
  	uartTransmit("Send Message\n", 13);
 80028f0:	210d      	movs	r1, #13
 80028f2:	4828      	ldr	r0, [pc, #160]	; (8002994 <main+0x2ec>)
 80028f4:	f7fd fe46 	bl	8000584 <uartTransmit>

  	// Filter Bank initialisieren um Daten zu empfangen
    sFilterConfig.FilterBank = 0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80028fe:	2300      	movs	r3, #0
 8002900:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002904:	2301      	movs	r3, #1
 8002906:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    sFilterConfig.FilterIdHigh = 0x0000;
 800290a:	2300      	movs	r3, #0
 800290c:	66fb      	str	r3, [r7, #108]	; 0x6c
    sFilterConfig.FilterIdLow = 0x0000;
 800290e:	2300      	movs	r3, #0
 8002910:	673b      	str	r3, [r7, #112]	; 0x70
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 8002912:	2300      	movs	r3, #0
 8002914:	677b      	str	r3, [r7, #116]	; 0x74
    sFilterConfig.FilterMaskIdLow = 0x0000;
 8002916:	2300      	movs	r3, #0
 8002918:	67bb      	str	r3, [r7, #120]	; 0x78
    sFilterConfig.FilterFIFOAssignment = 0;
 800291a:	2300      	movs	r3, #0
 800291c:	67fb      	str	r3, [r7, #124]	; 0x7c
    sFilterConfig.FilterActivation = ENABLE;
 800291e:	2301      	movs	r3, #1
 8002920:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    // Filter Bank schreiben
    if((status = HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 8002924:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002928:	4619      	mov	r1, r3
 800292a:	4818      	ldr	r0, [pc, #96]	; (800298c <main+0x2e4>)
 800292c:	f001 fd4a 	bl	80043c4 <HAL_CAN_ConfigFilter>
 8002930:	4603      	mov	r3, r0
 8002932:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
 8002936:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d006      	beq.n	800294c <main+0x2a4>
    {
    	/* Filter configuration Error */
  		hal_error(status);
 800293e:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe ff86 	bl	8001854 <hal_error>
  		Error_Handler();
 8002948:	f000 fc5a 	bl	8003200 <Error_Handler>
    }

    // Test CAN Nachricht beschreiben
    for (uint8_t j = 0; j < 8; j++)
 800294c:	2300      	movs	r3, #0
 800294e:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
 8002952:	e033      	b.n	80029bc <main+0x314>
 8002954:	08009b18 	.word	0x08009b18
 8002958:	08009b30 	.word	0x08009b30
 800295c:	08009b48 	.word	0x08009b48
 8002960:	08009b60 	.word	0x08009b60
 8002964:	08009974 	.word	0x08009974
 8002968:	40021000 	.word	0x40021000
 800296c:	080099b0 	.word	0x080099b0
 8002970:	080099b4 	.word	0x080099b4
 8002974:	080099d8 	.word	0x080099d8
 8002978:	2000004c 	.word	0x2000004c
 800297c:	40020400 	.word	0x40020400
 8002980:	080099f8 	.word	0x080099f8
 8002984:	200001c0 	.word	0x200001c0
 8002988:	20000258 	.word	0x20000258
 800298c:	200000c4 	.word	0x200000c4
 8002990:	08009a18 	.word	0x08009a18
 8002994:	08009a24 	.word	0x08009a24
    {
    	TxData[j] = (j + 1);
 8002998:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 800299c:	f897 2101 	ldrb.w	r2, [r7, #257]	; 0x101
 80029a0:	3201      	adds	r2, #1
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80029a8:	f107 0108 	add.w	r1, r7, #8
 80029ac:	440b      	add	r3, r1
 80029ae:	f803 2c74 	strb.w	r2, [r3, #-116]
    for (uint8_t j = 0; j < 8; j++)
 80029b2:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 80029b6:	3301      	adds	r3, #1
 80029b8:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
 80029bc:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 80029c0:	2b07      	cmp	r3, #7
 80029c2:	d9e9      	bls.n	8002998 <main+0x2f0>
    }

	if ((sdc_in.sdcinput & 0x0E) && (sdc_in.IMD_OK_IN != 1))					// SDC OK; Motor, BTB, IMD und HVIL OK
 80029c4:	4bc3      	ldr	r3, [pc, #780]	; (8002cd4 <main+0x62c>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	f003 030e 	and.w	r3, r3, #14
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d065      	beq.n	8002a9c <main+0x3f4>
 80029d0:	4bc0      	ldr	r3, [pc, #768]	; (8002cd4 <main+0x62c>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d15e      	bne.n	8002a9c <main+0x3f4>
	{
		#define SDC_STRING_ERROR			"\nSDC ist nicht geschlossen"
		uartTransmit(SDC_STRING_ERROR, sizeof(SDC_STRING_ERROR));
 80029de:	211b      	movs	r1, #27
 80029e0:	48bd      	ldr	r0, [pc, #756]	; (8002cd8 <main+0x630>)
 80029e2:	f7fd fdcf 	bl	8000584 <uartTransmit>

		// LEDs setzen bei SDC Fehler
		leuchten_out.GreenLed = 0;
 80029e6:	4abd      	ldr	r2, [pc, #756]	; (8002cdc <main+0x634>)
 80029e8:	7813      	ldrb	r3, [r2, #0]
 80029ea:	f36f 1386 	bfc	r3, #6, #1
 80029ee:	7013      	strb	r3, [r2, #0]
		leuchten_out.RedLed = 1;
 80029f0:	4aba      	ldr	r2, [pc, #744]	; (8002cdc <main+0x634>)
 80029f2:	7813      	ldrb	r3, [r2, #0]
 80029f4:	f043 0320 	orr.w	r3, r3, #32
 80029f8:	7013      	strb	r3, [r2, #0]
		leuchten_out.AkkuErrorLed = 0;
 80029fa:	4ab8      	ldr	r2, [pc, #736]	; (8002cdc <main+0x634>)
 80029fc:	7813      	ldrb	r3, [r2, #0]
 80029fe:	f36f 0382 	bfc	r3, #2, #1
 8002a02:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);
 8002a04:	4bb5      	ldr	r3, [pc, #724]	; (8002cdc <main+0x634>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	461a      	mov	r2, r3
 8002a10:	2104      	movs	r1, #4
 8002a12:	48b3      	ldr	r0, [pc, #716]	; (8002ce0 <main+0x638>)
 8002a14:	f002 f9de 	bl	8004dd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);
 8002a18:	4bb0      	ldr	r3, [pc, #704]	; (8002cdc <main+0x634>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	461a      	mov	r2, r3
 8002a24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a28:	48ad      	ldr	r0, [pc, #692]	; (8002ce0 <main+0x638>)
 8002a2a:	f002 f9d3 	bl	8004dd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AKKU_LED_GPIO_Port, AKKU_LED_Pin, leuchten_out.AkkuErrorLed);
 8002a2e:	4bab      	ldr	r3, [pc, #684]	; (8002cdc <main+0x634>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2180      	movs	r1, #128	; 0x80
 8002a3c:	48a9      	ldr	r0, [pc, #676]	; (8002ce4 <main+0x63c>)
 8002a3e:	f002 f9c9 	bl	8004dd4 <HAL_GPIO_WritePin>

		// Ausgabe welcher Fehler vorhanden
		// Motorsteuergeraet Fehler
		if(sdc_in.MotorSDC == 1)
 8002a42:	4ba4      	ldr	r3, [pc, #656]	; (8002cd4 <main+0x62c>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <main+0x3b0>
		{
			#define SDC_STRING_MOTOR		"\nSDC Motor hat einen Fehler und ist offen"
			uartTransmit(SDC_STRING_MOTOR, sizeof(SDC_STRING_MOTOR));
 8002a50:	212a      	movs	r1, #42	; 0x2a
 8002a52:	48a5      	ldr	r0, [pc, #660]	; (8002ce8 <main+0x640>)
 8002a54:	f7fd fd96 	bl	8000584 <uartTransmit>
		}

		// BamoCar Fehler
		if (sdc_in.BTB_SDC == 1)
 8002a58:	4b9e      	ldr	r3, [pc, #632]	; (8002cd4 <main+0x62c>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <main+0x3c6>
		{
			#define SDC_STRING_BTB			"\nSDC BTB hat einen Fehler und ist offen"
			uartTransmit(SDC_STRING_BTB, sizeof(SDC_STRING_BTB));
 8002a66:	2128      	movs	r1, #40	; 0x28
 8002a68:	48a0      	ldr	r0, [pc, #640]	; (8002cec <main+0x644>)
 8002a6a:	f7fd fd8b 	bl	8000584 <uartTransmit>
		}

		// HVIL Fehler
		if (sdc_in.HVIL == 1)
 8002a6e:	4b99      	ldr	r3, [pc, #612]	; (8002cd4 <main+0x62c>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <main+0x3dc>
		{
			#define SDC_STRING_HVIL			"\nSDC HVIL ist nicht geschlossen"
			uartTransmit(SDC_STRING_HVIL, sizeof(SDC_STRING_HVIL));
 8002a7c:	2120      	movs	r1, #32
 8002a7e:	489c      	ldr	r0, [pc, #624]	; (8002cf0 <main+0x648>)
 8002a80:	f7fd fd80 	bl	8000584 <uartTransmit>
		}

		// IMD Fehler
		if (sdc_in.IMD_OK_IN != 1)
 8002a84:	4b93      	ldr	r3, [pc, #588]	; (8002cd4 <main+0x62c>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d126      	bne.n	8002ae0 <main+0x438>
		{
			#define SDC_STRING_IMD			"\nSDC IMD hat einen Fehler"
			uartTransmit(SDC_STRING_IMD, sizeof(SDC_STRING_IMD));
 8002a92:	211a      	movs	r1, #26
 8002a94:	4897      	ldr	r0, [pc, #604]	; (8002cf4 <main+0x64c>)
 8002a96:	f7fd fd75 	bl	8000584 <uartTransmit>
		if (sdc_in.IMD_OK_IN != 1)
 8002a9a:	e021      	b.n	8002ae0 <main+0x438>
		}
	}
	else
	{
		// Keine Fehler, LEDs fuer OK setzen
		system_out.AmsOK = 1;
 8002a9c:	4a96      	ldr	r2, [pc, #600]	; (8002cf8 <main+0x650>)
 8002a9e:	7813      	ldrb	r3, [r2, #0]
 8002aa0:	f043 0304 	orr.w	r3, r3, #4
 8002aa4:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, system_out.AmsOK);
 8002aa6:	4b94      	ldr	r3, [pc, #592]	; (8002cf8 <main+0x650>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2180      	movs	r1, #128	; 0x80
 8002ab4:	4891      	ldr	r0, [pc, #580]	; (8002cfc <main+0x654>)
 8002ab6:	f002 f98d 	bl	8004dd4 <HAL_GPIO_WritePin>
		leuchten_out.GreenLed = 1;
 8002aba:	4a88      	ldr	r2, [pc, #544]	; (8002cdc <main+0x634>)
 8002abc:	7813      	ldrb	r3, [r2, #0]
 8002abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ac2:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);
 8002ac4:	4b85      	ldr	r3, [pc, #532]	; (8002cdc <main+0x634>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	461a      	mov	r2, r3
 8002ad0:	2104      	movs	r1, #4
 8002ad2:	4883      	ldr	r0, [pc, #524]	; (8002ce0 <main+0x638>)
 8002ad4:	f002 f97e 	bl	8004dd4 <HAL_GPIO_WritePin>

		// Ausgabe SDC geschlossen
		#define SDC_STRING_OK				"\nSDC ist geschlossen"
		uartTransmit(SDC_STRING_OK, sizeof(SDC_STRING_OK));
 8002ad8:	2115      	movs	r1, #21
 8002ada:	4889      	ldr	r0, [pc, #548]	; (8002d00 <main+0x658>)
 8002adc:	f7fd fd52 	bl	8000584 <uartTransmit>
	}

	// Digitales Poti initialisieren
	initAD8403();
 8002ae0:	f7fd fd34 	bl	800054c <initAD8403>

	timemillisekunden = millis();
 8002ae4:	f7ff fa06 	bl	8001ef4 <millis>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4a86      	ldr	r2, [pc, #536]	; (8002d04 <main+0x65c>)
 8002aec:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// Task wird jede Millisekunde ausgefuehrt
		if (millisekunden_flag_1 == 1)
 8002aee:	4b86      	ldr	r3, [pc, #536]	; (8002d08 <main+0x660>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d10a      	bne.n	8002b0e <main+0x466>
		{
			count++;													// Zaehler count hochzaehlen
 8002af8:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8002afc:	3301      	adds	r3, #1
 8002afe:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			millisekunden_flag_1 = 0;									// Setze Millisekunden-Flag zurueck
 8002b02:	4b81      	ldr	r3, [pc, #516]	; (8002d08 <main+0x660>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]

			// Setzen des Start Flags,  damit Tasks nur einmal pro ms aufgerufen werden kann
			start_flag = 1;												// Setze Start Flag
 8002b08:	2301      	movs	r3, #1
 8002b0a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
		}

		// Task wird alle 100 Millisekunden ausgefuehrt
		if (((millis() - timemillisekunden) > 100) && (start_flag == 1))
 8002b0e:	f7ff f9f1 	bl	8001ef4 <millis>
 8002b12:	4602      	mov	r2, r0
 8002b14:	4b7b      	ldr	r3, [pc, #492]	; (8002d04 <main+0x65c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	; 0x64
 8002b1c:	d905      	bls.n	8002b2a <main+0x482>
 8002b1e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <main+0x482>
		{
			// Lese alle Eingaenge
			readall_inputs();
 8002b26:	f7ff f931 	bl	8001d8c <readall_inputs>
		}

		// Task wird alle 200 Millisekunden ausgefuehrt
		if (((millis() - timemillisekunden) > 200) && (start_flag == 1))
 8002b2a:	f7ff f9e3 	bl	8001ef4 <millis>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	4b74      	ldr	r3, [pc, #464]	; (8002d04 <main+0x65c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2bc8      	cmp	r3, #200	; 0xc8
 8002b38:	f240 816c 	bls.w	8002e14 <main+0x76c>
 8002b3c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	f040 8167 	bne.w	8002e14 <main+0x76c>
		{
			ltc6811(ADCVC | MD73 | CELLALL);
 8002b46:	f44f 7058 	mov.w	r0, #864	; 0x360
 8002b4a:	f7fd fdcd 	bl	80006e8 <ltc6811>
			HAL_Delay(5);
 8002b4e:	2005      	movs	r0, #5
 8002b50:	f001 f83c 	bl	8003bcc <HAL_Delay>

			ltc6811_read(RDCVA, &data[0]);
 8002b54:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002b58:	4619      	mov	r1, r3
 8002b5a:	2004      	movs	r0, #4
 8002b5c:	f7fd fe9a 	bl	8000894 <ltc6811_read>
			ltc6811_read(RDCVB, &data[6]);
 8002b60:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002b64:	3306      	adds	r3, #6
 8002b66:	4619      	mov	r1, r3
 8002b68:	2006      	movs	r0, #6
 8002b6a:	f7fd fe93 	bl	8000894 <ltc6811_read>
			ltc6811_read(RDCVC, &data[12]);
 8002b6e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002b72:	330c      	adds	r3, #12
 8002b74:	4619      	mov	r1, r3
 8002b76:	2008      	movs	r0, #8
 8002b78:	f7fd fe8c 	bl	8000894 <ltc6811_read>
			ltc6811_read(RDCVD, &data[18]);
 8002b7c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002b80:	3312      	adds	r3, #18
 8002b82:	4619      	mov	r1, r3
 8002b84:	200a      	movs	r0, #10
 8002b86:	f7fd fe85 	bl	8000894 <ltc6811_read>

			uartTransmit("Spannungen\n", 11);
 8002b8a:	210b      	movs	r1, #11
 8002b8c:	485f      	ldr	r0, [pc, #380]	; (8002d0c <main+0x664>)
 8002b8e:	f7fd fcf9 	bl	8000584 <uartTransmit>

			for (uint8_t i = 0; i < 12; i++)
 8002b92:	2300      	movs	r3, #0
 8002b94:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
 8002b98:	e029      	b.n	8002bee <main+0x546>
			{
				spannungen[i] = ((data[i*2+1]<<8) | data[i*2]);
 8002b9a:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002ba6:	f107 0208 	add.w	r2, r7, #8
 8002baa:	4413      	add	r3, r2
 8002bac:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002bb0:	021b      	lsls	r3, r3, #8
 8002bb2:	b21a      	sxth	r2, r3
 8002bb4:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002bbe:	f107 0108 	add.w	r1, r7, #8
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002bc8:	b21b      	sxth	r3, r3
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	b21a      	sxth	r2, r3
 8002bce:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8002bd2:	b292      	uxth	r2, r2
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002bda:	f107 0108 	add.w	r1, r7, #8
 8002bde:	440b      	add	r3, r1
 8002be0:	f823 2c68 	strh.w	r2, [r3, #-104]
			for (uint8_t i = 0; i < 12; i++)
 8002be4:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8002be8:	3301      	adds	r3, #1
 8002bea:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
 8002bee:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8002bf2:	2b0b      	cmp	r3, #11
 8002bf4:	d9d1      	bls.n	8002b9a <main+0x4f2>
			}

			for (uint8_t i = 0; i < 12; i++)
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 8002bfc:	e016      	b.n	8002c2c <main+0x584>
			{
				uartTransmitNumber(spannungen[i], 10);
 8002bfe:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002c08:	f107 0208 	add.w	r2, r7, #8
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 8002c12:	210a      	movs	r1, #10
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fd fcc9 	bl	80005ac <uartTransmitNumber>
				uartTransmit(";", 1);
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	483c      	ldr	r0, [pc, #240]	; (8002d10 <main+0x668>)
 8002c1e:	f7fd fcb1 	bl	8000584 <uartTransmit>
			for (uint8_t i = 0; i < 12; i++)
 8002c22:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8002c26:	3301      	adds	r3, #1
 8002c28:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 8002c2c:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8002c30:	2b0b      	cmp	r3, #11
 8002c32:	d9e4      	bls.n	8002bfe <main+0x556>
			}

			tmp = 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			for (uint8_t i = 0; i < 12; i++)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
 8002c40:	e014      	b.n	8002c6c <main+0x5c4>
			{
				tmp += spannungen[i];
 8002c42:	f897 30fe 	ldrb.w	r3, [r7, #254]	; 0xfe
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002c4c:	f107 0208 	add.w	r2, r7, #8
 8002c50:	4413      	add	r3, r2
 8002c52:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 8002c56:	461a      	mov	r2, r3
 8002c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			for (uint8_t i = 0; i < 12; i++)
 8002c62:	f897 30fe 	ldrb.w	r3, [r7, #254]	; 0xfe
 8002c66:	3301      	adds	r3, #1
 8002c68:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
 8002c6c:	f897 30fe 	ldrb.w	r3, [r7, #254]	; 0xfe
 8002c70:	2b0b      	cmp	r3, #11
 8002c72:	d9e6      	bls.n	8002c42 <main+0x59a>
			}
			tmp /= 12;
 8002c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c78:	4a26      	ldr	r2, [pc, #152]	; (8002d14 <main+0x66c>)
 8002c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7e:	08db      	lsrs	r3, r3, #3
 8002c80:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			uartTransmitNumber(tmp, 10);
 8002c84:	210a      	movs	r1, #10
 8002c86:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8002c8a:	f7fd fc8f 	bl	80005ac <uartTransmitNumber>
			uartTransmit(";", 1);
 8002c8e:	2101      	movs	r1, #1
 8002c90:	481f      	ldr	r0, [pc, #124]	; (8002d10 <main+0x668>)
 8002c92:	f7fd fc77 	bl	8000584 <uartTransmit>

			tmp_mean = calculateMovingAverage(tmp_mean, tmp, 10);
 8002c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c9a:	b299      	uxth	r1, r3
 8002c9c:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 8002ca0:	220a      	movs	r2, #10
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff fcc4 	bl	8002630 <calculateMovingAverage>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
			uartTransmitNumber(tmp_mean, 10);
 8002cae:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 8002cb2:	210a      	movs	r1, #10
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fd fc79 	bl	80005ac <uartTransmitNumber>

			uartTransmit("\n", 1);
 8002cba:	2101      	movs	r1, #1
 8002cbc:	4816      	ldr	r0, [pc, #88]	; (8002d18 <main+0x670>)
 8002cbe:	f7fd fc61 	bl	8000584 <uartTransmit>

			uartTransmit("Temperaturen\n", 13);
 8002cc2:	210d      	movs	r1, #13
 8002cc4:	4815      	ldr	r0, [pc, #84]	; (8002d1c <main+0x674>)
 8002cc6:	f7fd fc5d 	bl	8000584 <uartTransmit>

			for (uint8_t j = 0; j < 8; j++)
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 8002cd0:	e098      	b.n	8002e04 <main+0x75c>
 8002cd2:	bf00      	nop
 8002cd4:	2000003c 	.word	0x2000003c
 8002cd8:	08009a34 	.word	0x08009a34
 8002cdc:	2000004c 	.word	0x2000004c
 8002ce0:	40020400 	.word	0x40020400
 8002ce4:	40021800 	.word	0x40021800
 8002ce8:	08009a50 	.word	0x08009a50
 8002cec:	08009a7c 	.word	0x08009a7c
 8002cf0:	08009aa4 	.word	0x08009aa4
 8002cf4:	08009ac4 	.word	0x08009ac4
 8002cf8:	20000044 	.word	0x20000044
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	08009ae0 	.word	0x08009ae0
 8002d04:	200000f4 	.word	0x200000f4
 8002d08:	200000f0 	.word	0x200000f0
 8002d0c:	08009af8 	.word	0x08009af8
 8002d10:	08009b04 	.word	0x08009b04
 8002d14:	aaaaaaab 	.word	0xaaaaaaab
 8002d18:	080099b0 	.word	0x080099b0
 8002d1c:	08009b08 	.word	0x08009b08
			{
				ltc1380_write(LTC1380_MUX0, j);									// Multiplexer 0 einstellen
 8002d20:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8002d24:	4619      	mov	r1, r3
 8002d26:	2090      	movs	r0, #144	; 0x90
 8002d28:	f7fd fc60 	bl	80005ec <ltc1380_write>
				ltc1380_write(LTC1380_MUX2, j);									// Multiplexer 1 einstellen
 8002d2c:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8002d30:	4619      	mov	r1, r3
 8002d32:	2094      	movs	r0, #148	; 0x94
 8002d34:	f7fd fc5a 	bl	80005ec <ltc1380_write>
				ltc6811(ADAX | MD73 | GPIOALL);									// Initial Command Zellen auslesen
 8002d38:	f44f 60ac 	mov.w	r0, #1376	; 0x560
 8002d3c:	f7fd fcd4 	bl	80006e8 <ltc6811>
				HAL_Delay(5);
 8002d40:	2005      	movs	r0, #5
 8002d42:	f000 ff43 	bl	8003bcc <HAL_Delay>
				ltc6811_read(RDAUXA, &data[0]);
 8002d46:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	200c      	movs	r0, #12
 8002d4e:	f7fd fda1 	bl	8000894 <ltc6811_read>

				for (uint8_t i = 0; i < 3; i++)
 8002d52:	2300      	movs	r3, #0
 8002d54:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8002d58:	e029      	b.n	8002dae <main+0x706>
				{
					temperatur[i] = ((data[i*2+1]<<8) | data[i*2]);
 8002d5a:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	3301      	adds	r3, #1
 8002d62:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002d66:	f107 0208 	add.w	r2, r7, #8
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002d70:	021b      	lsls	r3, r3, #8
 8002d72:	b21a      	sxth	r2, r3
 8002d74:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002d7e:	f107 0108 	add.w	r1, r7, #8
 8002d82:	440b      	add	r3, r1
 8002d84:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002d88:	b21b      	sxth	r3, r3
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	b21a      	sxth	r2, r3
 8002d8e:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8002d92:	b292      	uxth	r2, r2
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002d9a:	f107 0108 	add.w	r1, r7, #8
 8002d9e:	440b      	add	r3, r1
 8002da0:	f823 2c6c 	strh.w	r2, [r3, #-108]
				for (uint8_t i = 0; i < 3; i++)
 8002da4:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8002da8:	3301      	adds	r3, #1
 8002daa:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8002dae:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d9d1      	bls.n	8002d5a <main+0x6b2>
				}
				uartTransmitNumber(temperatur[0], 10);
 8002db6:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002dba:	210a      	movs	r1, #10
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fd fbf5 	bl	80005ac <uartTransmitNumber>
				uartTransmit(";", 1);
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	489a      	ldr	r0, [pc, #616]	; (8003030 <main+0x988>)
 8002dc6:	f7fd fbdd 	bl	8000584 <uartTransmit>
				uartTransmitNumber(temperatur[1], 10);
 8002dca:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8002dce:	210a      	movs	r1, #10
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fd fbeb 	bl	80005ac <uartTransmitNumber>
				uartTransmit(";", 1);
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	4895      	ldr	r0, [pc, #596]	; (8003030 <main+0x988>)
 8002dda:	f7fd fbd3 	bl	8000584 <uartTransmit>

				if (j == 7)
 8002dde:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8002de2:	2b07      	cmp	r3, #7
 8002de4:	d109      	bne.n	8002dfa <main+0x752>
				{
					uartTransmitNumber(temperatur[2], 10);
 8002de6:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8002dea:	210a      	movs	r1, #10
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fd fbdd 	bl	80005ac <uartTransmitNumber>
					uartTransmit(";", 1);
 8002df2:	2101      	movs	r1, #1
 8002df4:	488e      	ldr	r0, [pc, #568]	; (8003030 <main+0x988>)
 8002df6:	f7fd fbc5 	bl	8000584 <uartTransmit>
			for (uint8_t j = 0; j < 8; j++)
 8002dfa:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8002dfe:	3301      	adds	r3, #1
 8002e00:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 8002e04:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8002e08:	2b07      	cmp	r3, #7
 8002e0a:	d989      	bls.n	8002d20 <main+0x678>
				}
			}

			uartTransmit("\n", 1);
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	4889      	ldr	r0, [pc, #548]	; (8003034 <main+0x98c>)
 8002e10:	f7fd fbb8 	bl	8000584 <uartTransmit>
		}

		// Task wird alle 250 Millisekunden ausgefuehrt
		if (((millis() - timemillisekunden) > 250) && (start_flag == 1))
 8002e14:	f7ff f86e 	bl	8001ef4 <millis>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	4b87      	ldr	r3, [pc, #540]	; (8003038 <main+0x990>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2bfa      	cmp	r3, #250	; 0xfa
 8002e22:	d940      	bls.n	8002ea6 <main+0x7fe>
 8002e24:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d13c      	bne.n	8002ea6 <main+0x7fe>
		{
			// Daten fuer Ausgaenge zusammenfuehren
			OutData[0] = system_out.systemoutput;
 8002e2c:	4b83      	ldr	r3, [pc, #524]	; (800303c <main+0x994>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
			OutData[1] = highcurrent_out.high_out;
 8002e34:	4b82      	ldr	r3, [pc, #520]	; (8003040 <main+0x998>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			OutData[2] = leuchten_out.ledoutput;
 8002e3c:	4b81      	ldr	r3, [pc, #516]	; (8003044 <main+0x99c>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
			OutData[3] = komfort_out.komfortoutput;
 8002e44:	4b80      	ldr	r3, [pc, #512]	; (8003048 <main+0x9a0>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
	
			// Sende Nachricht digitale Ausgaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxOutput, OutData, (uint32_t *)CAN_TX_MAILBOX0);
 8002e4c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002e50:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002e54:	2301      	movs	r3, #1
 8002e56:	487d      	ldr	r0, [pc, #500]	; (800304c <main+0x9a4>)
 8002e58:	f001 fbe4 	bl	8004624 <HAL_CAN_AddTxMessage>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
			//hal_error(status);

			// Daten fuer Eingaenge zusammenfuehren
			InData[0] = system_in.systeminput;
 8002e62:	4b7b      	ldr	r3, [pc, #492]	; (8003050 <main+0x9a8>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			InData[1] = sdc_in.sdcinput;
 8002e6a:	4b7a      	ldr	r3, [pc, #488]	; (8003054 <main+0x9ac>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
			InData[2] = komfort_in.komfortinput;
 8002e72:	4b79      	ldr	r3, [pc, #484]	; (8003058 <main+0x9b0>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
	
			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxInput, InData, (uint32_t *)CAN_TX_MAILBOX0);
 8002e7a:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8002e7e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002e82:	2301      	movs	r3, #1
 8002e84:	4871      	ldr	r0, [pc, #452]	; (800304c <main+0x9a4>)
 8002e86:	f001 fbcd 	bl	8004624 <HAL_CAN_AddTxMessage>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
			//hal_error(status);
	
			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX0);
 8002e90:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8002e94:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002e98:	2301      	movs	r3, #1
 8002e9a:	486c      	ldr	r0, [pc, #432]	; (800304c <main+0x9a4>)
 8002e9c:	f001 fbc2 	bl	8004624 <HAL_CAN_AddTxMessage>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
			//hal_error(status);
		}

		// Task wird alle 500 Millisekunden ausgefuehrt
		if (((millis() - timemillisekunden) > 500) && (start_flag == 1))
 8002ea6:	f7ff f825 	bl	8001ef4 <millis>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	4b62      	ldr	r3, [pc, #392]	; (8003038 <main+0x990>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002eb6:	f240 80ab 	bls.w	8003010 <main+0x968>
 8002eba:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	f040 80a6 	bne.w	8003010 <main+0x968>
		{
			timemillisekunden = millis();
 8002ec4:	f7ff f816 	bl	8001ef4 <millis>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4a5b      	ldr	r2, [pc, #364]	; (8003038 <main+0x990>)
 8002ecc:	6013      	str	r3, [r2, #0]
			
			if (pwm_change == 1)
 8002ece:	4b63      	ldr	r3, [pc, #396]	; (800305c <main+0x9b4>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d153      	bne.n	8002f80 <main+0x8d8>
			{
				if (rising != 0 && falling != 0)
 8002ed8:	4b61      	ldr	r3, [pc, #388]	; (8003060 <main+0x9b8>)
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d04a      	beq.n	8002f78 <main+0x8d0>
 8002ee2:	4b60      	ldr	r3, [pc, #384]	; (8003064 <main+0x9bc>)
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d045      	beq.n	8002f78 <main+0x8d0>
				{
					int diff = getDifference(rising, falling);
 8002eec:	4b5c      	ldr	r3, [pc, #368]	; (8003060 <main+0x9b8>)
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	4a5c      	ldr	r2, [pc, #368]	; (8003064 <main+0x9bc>)
 8002ef4:	8812      	ldrh	r2, [r2, #0]
 8002ef6:	b292      	uxth	r2, r2
 8002ef8:	4611      	mov	r1, r2
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff fbb1 	bl	8002662 <getDifference>
 8002f00:	4603      	mov	r3, r0
 8002f02:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
					imd.DutyCycle = 100 - round((float)(diff * 100) / (float)rising);	// (width / period ) * 100
 8002f06:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002f0a:	2264      	movs	r2, #100	; 0x64
 8002f0c:	fb02 f303 	mul.w	r3, r2, r3
 8002f10:	ee07 3a90 	vmov	s15, r3
 8002f14:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f18:	4b51      	ldr	r3, [pc, #324]	; (8003060 <main+0x9b8>)
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	ee07 3a90 	vmov	s15, r3
 8002f22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002f2e:	eeb0 0b47 	vmov.f64	d0, d7
 8002f32:	f006 fae9 	bl	8009508 <round>
 8002f36:	eeb0 7b40 	vmov.f64	d7, d0
 8002f3a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8003028 <main+0x980>
 8002f3e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002f42:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002f46:	edc7 7a01 	vstr	s15, [r7, #4]
 8002f4a:	793b      	ldrb	r3, [r7, #4]
 8002f4c:	b2d9      	uxtb	r1, r3
 8002f4e:	4a46      	ldr	r2, [pc, #280]	; (8003068 <main+0x9c0>)
 8002f50:	7913      	ldrb	r3, [r2, #4]
 8002f52:	f361 0306 	bfi	r3, r1, #0, #7
 8002f56:	7113      	strb	r3, [r2, #4]
					imd.Frequency = timerPeriod / rising;				// timer restarts after rising edge so time between two rising edge is whatever is measured
 8002f58:	4b41      	ldr	r3, [pc, #260]	; (8003060 <main+0x9b8>)
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	461a      	mov	r2, r3
 8002f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f64:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f6c:	b2d9      	uxtb	r1, r3
 8002f6e:	4a3e      	ldr	r2, [pc, #248]	; (8003068 <main+0x9c0>)
 8002f70:	7813      	ldrb	r3, [r2, #0]
 8002f72:	f361 0305 	bfi	r3, r1, #0, #6
 8002f76:	7013      	strb	r3, [r2, #0]
				}

				pwm_change = 0;
 8002f78:	4b38      	ldr	r3, [pc, #224]	; (800305c <main+0x9b4>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	701a      	strb	r2, [r3, #0]
 8002f7e:	e01c      	b.n	8002fba <main+0x912>
			}
			else
			{
				if (pwm_count == 1)
 8002f80:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d113      	bne.n	8002fb0 <main+0x908>
				{
					imd.DutyCycle = 0;
 8002f88:	4a37      	ldr	r2, [pc, #220]	; (8003068 <main+0x9c0>)
 8002f8a:	7913      	ldrb	r3, [r2, #4]
 8002f8c:	f36f 0306 	bfc	r3, #0, #7
 8002f90:	7113      	strb	r3, [r2, #4]
					imd.Frequency = 0;
 8002f92:	4a35      	ldr	r2, [pc, #212]	; (8003068 <main+0x9c0>)
 8002f94:	7813      	ldrb	r3, [r2, #0]
 8002f96:	f36f 0305 	bfc	r3, #0, #6
 8002f9a:	7013      	strb	r3, [r2, #0]
					rising = 0;
 8002f9c:	4b30      	ldr	r3, [pc, #192]	; (8003060 <main+0x9b8>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	801a      	strh	r2, [r3, #0]
					falling = 0;
 8002fa2:	4b30      	ldr	r3, [pc, #192]	; (8003064 <main+0x9bc>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	801a      	strh	r2, [r3, #0]
					pwm_count = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002fae:	e004      	b.n	8002fba <main+0x912>
				}
				else
				{
					pwm_count++;
 8002fb0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
				}
			}

			uartTransmitNumber(falling, 10);
 8002fba:	4b2a      	ldr	r3, [pc, #168]	; (8003064 <main+0x9bc>)
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	210a      	movs	r1, #10
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fd faf2 	bl	80005ac <uartTransmitNumber>
			uartTransmit("\n", 1);
 8002fc8:	2101      	movs	r1, #1
 8002fca:	481a      	ldr	r0, [pc, #104]	; (8003034 <main+0x98c>)
 8002fcc:	f7fd fada 	bl	8000584 <uartTransmit>
			uartTransmitNumber(rising, 10);
 8002fd0:	4b23      	ldr	r3, [pc, #140]	; (8003060 <main+0x9b8>)
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	210a      	movs	r1, #10
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fd fae7 	bl	80005ac <uartTransmitNumber>
			uartTransmit("\n", 1);
 8002fde:	2101      	movs	r1, #1
 8002fe0:	4814      	ldr	r0, [pc, #80]	; (8003034 <main+0x98c>)
 8002fe2:	f7fd facf 	bl	8000584 <uartTransmit>
			uartTransmitNumber(timerPeriod, 10);
 8002fe6:	210a      	movs	r1, #10
 8002fe8:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8002fec:	f7fd fade 	bl	80005ac <uartTransmitNumber>
			uartTransmit("\n", 1);
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	4810      	ldr	r0, [pc, #64]	; (8003034 <main+0x98c>)
 8002ff4:	f7fd fac6 	bl	8000584 <uartTransmit>

			imd_status();
 8002ff8:	f7fe fc5c 	bl	80018b4 <imd_status>

			HAL_CAN_AddTxMessage(&hcan3, &TxIMD, imd.status, (uint32_t *)CAN_TX_MAILBOX0);
 8002ffc:	f107 010c 	add.w	r1, r7, #12
 8003000:	2301      	movs	r3, #1
 8003002:	4a19      	ldr	r2, [pc, #100]	; (8003068 <main+0x9c0>)
 8003004:	4811      	ldr	r0, [pc, #68]	; (800304c <main+0x9a4>)
 8003006:	f001 fb0d 	bl	8004624 <HAL_CAN_AddTxMessage>

			count = 0;
 800300a:	2300      	movs	r3, #0
 800300c:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
		}

		// Zuruecksetzen des Start Flags, damit Tasks erst nach einer ms wieder aufgerufen werden kann
		start_flag = 0;																		// Zuruecksetzen Start Flag
 8003010:	2300      	movs	r3, #0
 8003012:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
		if (millisekunden_flag_1 == 1)
 8003016:	e56a      	b.n	8002aee <main+0x446>
  }
  /* USER CODE END 3 */
}
 8003018:	4618      	mov	r0, r3
 800301a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800301e:	46bd      	mov	sp, r7
 8003020:	bdb0      	pop	{r4, r5, r7, pc}
 8003022:	bf00      	nop
 8003024:	f3af 8000 	nop.w
 8003028:	00000000 	.word	0x00000000
 800302c:	40590000 	.word	0x40590000
 8003030:	08009b04 	.word	0x08009b04
 8003034:	080099b0 	.word	0x080099b0
 8003038:	200000f4 	.word	0x200000f4
 800303c:	20000044 	.word	0x20000044
 8003040:	20000048 	.word	0x20000048
 8003044:	2000004c 	.word	0x2000004c
 8003048:	20000050 	.word	0x20000050
 800304c:	200000c4 	.word	0x200000c4
 8003050:	20000038 	.word	0x20000038
 8003054:	2000003c 	.word	0x2000003c
 8003058:	20000040 	.word	0x20000040
 800305c:	200000f1 	.word	0x200000f1
 8003060:	200000ec 	.word	0x200000ec
 8003064:	200000ee 	.word	0x200000ee
 8003068:	20000030 	.word	0x20000030

0800306c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b094      	sub	sp, #80	; 0x50
 8003070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003072:	f107 031c 	add.w	r3, r7, #28
 8003076:	2234      	movs	r2, #52	; 0x34
 8003078:	2100      	movs	r1, #0
 800307a:	4618      	mov	r0, r3
 800307c:	f006 f9f8 	bl	8009470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003080:	f107 0308 	add.w	r3, r7, #8
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	605a      	str	r2, [r3, #4]
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	60da      	str	r2, [r3, #12]
 800308e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003090:	4b2c      	ldr	r3, [pc, #176]	; (8003144 <SystemClock_Config+0xd8>)
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	4a2b      	ldr	r2, [pc, #172]	; (8003144 <SystemClock_Config+0xd8>)
 8003096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309a:	6413      	str	r3, [r2, #64]	; 0x40
 800309c:	4b29      	ldr	r3, [pc, #164]	; (8003144 <SystemClock_Config+0xd8>)
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a4:	607b      	str	r3, [r7, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030a8:	4b27      	ldr	r3, [pc, #156]	; (8003148 <SystemClock_Config+0xdc>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a26      	ldr	r2, [pc, #152]	; (8003148 <SystemClock_Config+0xdc>)
 80030ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	4b24      	ldr	r3, [pc, #144]	; (8003148 <SystemClock_Config+0xdc>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80030c0:	2301      	movs	r3, #1
 80030c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030ca:	2302      	movs	r3, #2
 80030cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80030d4:	2319      	movs	r3, #25
 80030d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 80030d8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80030dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030de:	2302      	movs	r3, #2
 80030e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80030e2:	2308      	movs	r3, #8
 80030e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80030e6:	2302      	movs	r3, #2
 80030e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030ea:	f107 031c 	add.w	r3, r7, #28
 80030ee:	4618      	mov	r0, r3
 80030f0:	f001 feda 	bl	8004ea8 <HAL_RCC_OscConfig>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <SystemClock_Config+0x92>
  {
    Error_Handler();
 80030fa:	f000 f881 	bl	8003200 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80030fe:	f001 fe83 	bl	8004e08 <HAL_PWREx_EnableOverDrive>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8003108:	f000 f87a 	bl	8003200 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800310c:	230f      	movs	r3, #15
 800310e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003110:	2302      	movs	r3, #2
 8003112:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003114:	2300      	movs	r3, #0
 8003116:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003118:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800311c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800311e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003122:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003124:	f107 0308 	add.w	r3, r7, #8
 8003128:	2107      	movs	r1, #7
 800312a:	4618      	mov	r0, r3
 800312c:	f002 f96a 	bl	8005404 <HAL_RCC_ClockConfig>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8003136:	f000 f863 	bl	8003200 <Error_Handler>
  }
}
 800313a:	bf00      	nop
 800313c:	3750      	adds	r7, #80	; 0x50
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40023800 	.word	0x40023800
 8003148:	40007000 	.word	0x40007000

0800314c <HAL_TIM_PeriodElapsedCallback>:
	can_change = 1;
}

// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
	// Kontrolliere welcher Timer den Ueberlauf ausgeloest hat
	if (htim == &htim6)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a06      	ldr	r2, [pc, #24]	; (8003170 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d102      	bne.n	8003162 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		millisekunden_flag_1 = 1;
 800315c:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800315e:	2201      	movs	r2, #1
 8003160:	701a      	strb	r2, [r3, #0]
	}
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	20000258 	.word	0x20000258
 8003174:	200000f0 	.word	0x200000f0

08003178 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003178:	b590      	push	{r4, r7, lr}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
	// Timer IMD
	if (htim == &htim1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a1b      	ldr	r2, [pc, #108]	; (80031f0 <HAL_TIM_IC_CaptureCallback+0x78>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d12f      	bne.n	80031e8 <HAL_TIM_IC_CaptureCallback+0x70>
	{
		pwm_change = 1;
 8003188:	4b1a      	ldr	r3, [pc, #104]	; (80031f4 <HAL_TIM_IC_CaptureCallback+0x7c>)
 800318a:	2201      	movs	r2, #1
 800318c:	701a      	strb	r2, [r3, #0]
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	7f1b      	ldrb	r3, [r3, #28]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d112      	bne.n	80031bc <HAL_TIM_IC_CaptureCallback+0x44>
		{
			rising = calculateMovingAverage(rising, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1), 10);
 8003196:	4b18      	ldr	r3, [pc, #96]	; (80031f8 <HAL_TIM_IC_CaptureCallback+0x80>)
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	b29c      	uxth	r4, r3
 800319c:	2100      	movs	r1, #0
 800319e:	4814      	ldr	r0, [pc, #80]	; (80031f0 <HAL_TIM_IC_CaptureCallback+0x78>)
 80031a0:	f004 fdc2 	bl	8007d28 <HAL_TIM_ReadCapturedValue>
 80031a4:	4603      	mov	r3, r0
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	220a      	movs	r2, #10
 80031aa:	4619      	mov	r1, r3
 80031ac:	4620      	mov	r0, r4
 80031ae:	f7ff fa3f 	bl	8002630 <calculateMovingAverage>
 80031b2:	4603      	mov	r3, r0
 80031b4:	461a      	mov	r2, r3
 80031b6:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <HAL_TIM_IC_CaptureCallback+0x80>)
 80031b8:	801a      	strh	r2, [r3, #0]
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
		{
			falling = calculateMovingAverage(falling, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2), 10);
		}
	}
}
 80031ba:	e015      	b.n	80031e8 <HAL_TIM_IC_CaptureCallback+0x70>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	7f1b      	ldrb	r3, [r3, #28]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d111      	bne.n	80031e8 <HAL_TIM_IC_CaptureCallback+0x70>
			falling = calculateMovingAverage(falling, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2), 10);
 80031c4:	4b0d      	ldr	r3, [pc, #52]	; (80031fc <HAL_TIM_IC_CaptureCallback+0x84>)
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	b29c      	uxth	r4, r3
 80031ca:	2104      	movs	r1, #4
 80031cc:	4808      	ldr	r0, [pc, #32]	; (80031f0 <HAL_TIM_IC_CaptureCallback+0x78>)
 80031ce:	f004 fdab 	bl	8007d28 <HAL_TIM_ReadCapturedValue>
 80031d2:	4603      	mov	r3, r0
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	220a      	movs	r2, #10
 80031d8:	4619      	mov	r1, r3
 80031da:	4620      	mov	r0, r4
 80031dc:	f7ff fa28 	bl	8002630 <calculateMovingAverage>
 80031e0:	4603      	mov	r3, r0
 80031e2:	461a      	mov	r2, r3
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <HAL_TIM_IC_CaptureCallback+0x84>)
 80031e6:	801a      	strh	r2, [r3, #0]
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd90      	pop	{r4, r7, pc}
 80031f0:	200001c0 	.word	0x200001c0
 80031f4:	200000f1 	.word	0x200000f1
 80031f8:	200000ec 	.word	0x200000ec
 80031fc:	200000ee 	.word	0x200000ee

08003200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003204:	b672      	cpsid	i
}
 8003206:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 8003208:	4a11      	ldr	r2, [pc, #68]	; (8003250 <Error_Handler+0x50>)
 800320a:	7813      	ldrb	r3, [r2, #0]
 800320c:	f043 0320 	orr.w	r3, r3, #32
 8003210:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8003212:	4b0f      	ldr	r3, [pc, #60]	; (8003250 <Error_Handler+0x50>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800321a:	b2db      	uxtb	r3, r3
 800321c:	461a      	mov	r2, r3
 800321e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003222:	480c      	ldr	r0, [pc, #48]	; (8003254 <Error_Handler+0x54>)
 8003224:	f001 fdd6 	bl	8004dd4 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8003228:	4a09      	ldr	r2, [pc, #36]	; (8003250 <Error_Handler+0x50>)
 800322a:	7813      	ldrb	r3, [r2, #0]
 800322c:	f36f 1386 	bfc	r3, #6, #1
 8003230:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 8003232:	4b07      	ldr	r3, [pc, #28]	; (8003250 <Error_Handler+0x50>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800323a:	b2db      	uxtb	r3, r3
 800323c:	461a      	mov	r2, r3
 800323e:	2104      	movs	r1, #4
 8003240:	4804      	ldr	r0, [pc, #16]	; (8003254 <Error_Handler+0x54>)
 8003242:	f001 fdc7 	bl	8004dd4 <HAL_GPIO_WritePin>

	// Sende Nachricht auf Uart-Interface
#ifdef DEBUG
#define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
	uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 8003246:	2122      	movs	r1, #34	; 0x22
 8003248:	4803      	ldr	r0, [pc, #12]	; (8003258 <Error_Handler+0x58>)
 800324a:	f7fd f99b 	bl	8000584 <uartTransmit>
#endif
	// Beginne Endlosschleife nachdem Fehler aufgetreten ist
	while (1)
 800324e:	e7fe      	b.n	800324e <Error_Handler+0x4e>
 8003250:	2000004c 	.word	0x2000004c
 8003254:	40020400 	.word	0x40020400
 8003258:	08009b78 	.word	0x08009b78

0800325c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003260:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <MX_SPI1_Init+0x74>)
 8003262:	4a1c      	ldr	r2, [pc, #112]	; (80032d4 <MX_SPI1_Init+0x78>)
 8003264:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003266:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <MX_SPI1_Init+0x74>)
 8003268:	f44f 7282 	mov.w	r2, #260	; 0x104
 800326c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800326e:	4b18      	ldr	r3, [pc, #96]	; (80032d0 <MX_SPI1_Init+0x74>)
 8003270:	2200      	movs	r2, #0
 8003272:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8003274:	4b16      	ldr	r3, [pc, #88]	; (80032d0 <MX_SPI1_Init+0x74>)
 8003276:	f44f 7240 	mov.w	r2, #768	; 0x300
 800327a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800327c:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <MX_SPI1_Init+0x74>)
 800327e:	2200      	movs	r2, #0
 8003280:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003282:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <MX_SPI1_Init+0x74>)
 8003284:	2200      	movs	r2, #0
 8003286:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003288:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <MX_SPI1_Init+0x74>)
 800328a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800328e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003290:	4b0f      	ldr	r3, [pc, #60]	; (80032d0 <MX_SPI1_Init+0x74>)
 8003292:	2230      	movs	r2, #48	; 0x30
 8003294:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003296:	4b0e      	ldr	r3, [pc, #56]	; (80032d0 <MX_SPI1_Init+0x74>)
 8003298:	2200      	movs	r2, #0
 800329a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800329c:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <MX_SPI1_Init+0x74>)
 800329e:	2200      	movs	r2, #0
 80032a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032a2:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <MX_SPI1_Init+0x74>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80032a8:	4b09      	ldr	r3, [pc, #36]	; (80032d0 <MX_SPI1_Init+0x74>)
 80032aa:	2207      	movs	r2, #7
 80032ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80032ae:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <MX_SPI1_Init+0x74>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <MX_SPI1_Init+0x74>)
 80032b6:	2208      	movs	r2, #8
 80032b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80032ba:	4805      	ldr	r0, [pc, #20]	; (80032d0 <MX_SPI1_Init+0x74>)
 80032bc:	f002 feb0 	bl	8006020 <HAL_SPI_Init>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80032c6:	f7ff ff9b 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80032ca:	bf00      	nop
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	200000f8 	.word	0x200000f8
 80032d4:	40013000 	.word	0x40013000

080032d8 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80032dc:	4b1b      	ldr	r3, [pc, #108]	; (800334c <MX_SPI4_Init+0x74>)
 80032de:	4a1c      	ldr	r2, [pc, #112]	; (8003350 <MX_SPI4_Init+0x78>)
 80032e0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80032e2:	4b1a      	ldr	r3, [pc, #104]	; (800334c <MX_SPI4_Init+0x74>)
 80032e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032e8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80032ea:	4b18      	ldr	r3, [pc, #96]	; (800334c <MX_SPI4_Init+0x74>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80032f0:	4b16      	ldr	r3, [pc, #88]	; (800334c <MX_SPI4_Init+0x74>)
 80032f2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80032f6:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80032f8:	4b14      	ldr	r3, [pc, #80]	; (800334c <MX_SPI4_Init+0x74>)
 80032fa:	2202      	movs	r2, #2
 80032fc:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80032fe:	4b13      	ldr	r3, [pc, #76]	; (800334c <MX_SPI4_Init+0x74>)
 8003300:	2201      	movs	r2, #1
 8003302:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003304:	4b11      	ldr	r3, [pc, #68]	; (800334c <MX_SPI4_Init+0x74>)
 8003306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800330a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800330c:	4b0f      	ldr	r3, [pc, #60]	; (800334c <MX_SPI4_Init+0x74>)
 800330e:	2230      	movs	r2, #48	; 0x30
 8003310:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003312:	4b0e      	ldr	r3, [pc, #56]	; (800334c <MX_SPI4_Init+0x74>)
 8003314:	2200      	movs	r2, #0
 8003316:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003318:	4b0c      	ldr	r3, [pc, #48]	; (800334c <MX_SPI4_Init+0x74>)
 800331a:	2200      	movs	r2, #0
 800331c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800331e:	4b0b      	ldr	r3, [pc, #44]	; (800334c <MX_SPI4_Init+0x74>)
 8003320:	2200      	movs	r2, #0
 8003322:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8003324:	4b09      	ldr	r3, [pc, #36]	; (800334c <MX_SPI4_Init+0x74>)
 8003326:	2207      	movs	r2, #7
 8003328:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800332a:	4b08      	ldr	r3, [pc, #32]	; (800334c <MX_SPI4_Init+0x74>)
 800332c:	2200      	movs	r2, #0
 800332e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003330:	4b06      	ldr	r3, [pc, #24]	; (800334c <MX_SPI4_Init+0x74>)
 8003332:	2200      	movs	r2, #0
 8003334:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003336:	4805      	ldr	r0, [pc, #20]	; (800334c <MX_SPI4_Init+0x74>)
 8003338:	f002 fe72 	bl	8006020 <HAL_SPI_Init>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8003342:	f7ff ff5d 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003346:	bf00      	nop
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	2000015c 	.word	0x2000015c
 8003350:	40013400 	.word	0x40013400

08003354 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08c      	sub	sp, #48	; 0x30
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800335c:	f107 031c 	add.w	r3, r7, #28
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	605a      	str	r2, [r3, #4]
 8003366:	609a      	str	r2, [r3, #8]
 8003368:	60da      	str	r2, [r3, #12]
 800336a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a3d      	ldr	r2, [pc, #244]	; (8003468 <HAL_SPI_MspInit+0x114>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d145      	bne.n	8003402 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003376:	4b3d      	ldr	r3, [pc, #244]	; (800346c <HAL_SPI_MspInit+0x118>)
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	4a3c      	ldr	r2, [pc, #240]	; (800346c <HAL_SPI_MspInit+0x118>)
 800337c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003380:	6453      	str	r3, [r2, #68]	; 0x44
 8003382:	4b3a      	ldr	r3, [pc, #232]	; (800346c <HAL_SPI_MspInit+0x118>)
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800338a:	61bb      	str	r3, [r7, #24]
 800338c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800338e:	4b37      	ldr	r3, [pc, #220]	; (800346c <HAL_SPI_MspInit+0x118>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	4a36      	ldr	r2, [pc, #216]	; (800346c <HAL_SPI_MspInit+0x118>)
 8003394:	f043 0308 	orr.w	r3, r3, #8
 8003398:	6313      	str	r3, [r2, #48]	; 0x30
 800339a:	4b34      	ldr	r3, [pc, #208]	; (800346c <HAL_SPI_MspInit+0x118>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80033a6:	4b31      	ldr	r3, [pc, #196]	; (800346c <HAL_SPI_MspInit+0x118>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	4a30      	ldr	r2, [pc, #192]	; (800346c <HAL_SPI_MspInit+0x118>)
 80033ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033b0:	6313      	str	r3, [r2, #48]	; 0x30
 80033b2:	4b2e      	ldr	r3, [pc, #184]	; (800346c <HAL_SPI_MspInit+0x118>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 80033be:	2380      	movs	r3, #128	; 0x80
 80033c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c2:	2302      	movs	r3, #2
 80033c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ca:	2303      	movs	r3, #3
 80033cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80033ce:	2305      	movs	r3, #5
 80033d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 80033d2:	f107 031c 	add.w	r3, r7, #28
 80033d6:	4619      	mov	r1, r3
 80033d8:	4825      	ldr	r0, [pc, #148]	; (8003470 <HAL_SPI_MspInit+0x11c>)
 80033da:	f001 fb37 	bl	8004a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTI_CS_Pin|POTI_SCK_Pin;
 80033de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80033e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e4:	2302      	movs	r3, #2
 80033e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ec:	2303      	movs	r3, #3
 80033ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80033f0:	2305      	movs	r3, #5
 80033f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033f4:	f107 031c 	add.w	r3, r7, #28
 80033f8:	4619      	mov	r1, r3
 80033fa:	481e      	ldr	r0, [pc, #120]	; (8003474 <HAL_SPI_MspInit+0x120>)
 80033fc:	f001 fb26 	bl	8004a4c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8003400:	e02d      	b.n	800345e <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI4)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a1c      	ldr	r2, [pc, #112]	; (8003478 <HAL_SPI_MspInit+0x124>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d128      	bne.n	800345e <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800340c:	4b17      	ldr	r3, [pc, #92]	; (800346c <HAL_SPI_MspInit+0x118>)
 800340e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003410:	4a16      	ldr	r2, [pc, #88]	; (800346c <HAL_SPI_MspInit+0x118>)
 8003412:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003416:	6453      	str	r3, [r2, #68]	; 0x44
 8003418:	4b14      	ldr	r3, [pc, #80]	; (800346c <HAL_SPI_MspInit+0x118>)
 800341a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003424:	4b11      	ldr	r3, [pc, #68]	; (800346c <HAL_SPI_MspInit+0x118>)
 8003426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003428:	4a10      	ldr	r2, [pc, #64]	; (800346c <HAL_SPI_MspInit+0x118>)
 800342a:	f043 0310 	orr.w	r3, r3, #16
 800342e:	6313      	str	r3, [r2, #48]	; 0x30
 8003430:	4b0e      	ldr	r3, [pc, #56]	; (800346c <HAL_SPI_MspInit+0x118>)
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	f003 0310 	and.w	r3, r3, #16
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 800343c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003442:	2302      	movs	r3, #2
 8003444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003446:	2300      	movs	r3, #0
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800344a:	2303      	movs	r3, #3
 800344c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800344e:	2305      	movs	r3, #5
 8003450:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003452:	f107 031c 	add.w	r3, r7, #28
 8003456:	4619      	mov	r1, r3
 8003458:	4808      	ldr	r0, [pc, #32]	; (800347c <HAL_SPI_MspInit+0x128>)
 800345a:	f001 faf7 	bl	8004a4c <HAL_GPIO_Init>
}
 800345e:	bf00      	nop
 8003460:	3730      	adds	r7, #48	; 0x30
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40013000 	.word	0x40013000
 800346c:	40023800 	.word	0x40023800
 8003470:	40020c00 	.word	0x40020c00
 8003474:	40021800 	.word	0x40021800
 8003478:	40013400 	.word	0x40013400
 800347c:	40021000 	.word	0x40021000

08003480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003486:	4b0f      	ldr	r3, [pc, #60]	; (80034c4 <HAL_MspInit+0x44>)
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	4a0e      	ldr	r2, [pc, #56]	; (80034c4 <HAL_MspInit+0x44>)
 800348c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003490:	6413      	str	r3, [r2, #64]	; 0x40
 8003492:	4b0c      	ldr	r3, [pc, #48]	; (80034c4 <HAL_MspInit+0x44>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349a:	607b      	str	r3, [r7, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800349e:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <HAL_MspInit+0x44>)
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	4a08      	ldr	r2, [pc, #32]	; (80034c4 <HAL_MspInit+0x44>)
 80034a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034a8:	6453      	str	r3, [r2, #68]	; 0x44
 80034aa:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <HAL_MspInit+0x44>)
 80034ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40023800 	.word	0x40023800

080034c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80034cc:	bf00      	nop
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034d6:	b480      	push	{r7}
 80034d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034da:	e7fe      	b.n	80034da <HardFault_Handler+0x4>

080034dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034e0:	e7fe      	b.n	80034e0 <MemManage_Handler+0x4>

080034e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034e2:	b480      	push	{r7}
 80034e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034e6:	e7fe      	b.n	80034e6 <BusFault_Handler+0x4>

080034e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034ec:	e7fe      	b.n	80034ec <UsageFault_Handler+0x4>

080034ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034ee:	b480      	push	{r7}
 80034f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034f2:	bf00      	nop
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003500:	bf00      	nop
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800350a:	b480      	push	{r7}
 800350c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800350e:	bf00      	nop
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800351c:	f000 fb36 	bl	8003b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003520:	bf00      	nop
 8003522:	bd80      	pop	{r7, pc}

08003524 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003528:	4802      	ldr	r0, [pc, #8]	; (8003534 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800352a:	f004 f821 	bl	8007570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800352e:	bf00      	nop
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	200001c0 	.word	0x200001c0

08003538 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800353c:	4802      	ldr	r0, [pc, #8]	; (8003548 <TIM6_DAC_IRQHandler+0x10>)
 800353e:	f004 f817 	bl	8007570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003542:	bf00      	nop
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	20000258 	.word	0x20000258

0800354c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003550:	4b08      	ldr	r3, [pc, #32]	; (8003574 <SystemInit+0x28>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003556:	4a07      	ldr	r2, [pc, #28]	; (8003574 <SystemInit+0x28>)
 8003558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800355c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003560:	4b04      	ldr	r3, [pc, #16]	; (8003574 <SystemInit+0x28>)
 8003562:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003566:	609a      	str	r2, [r3, #8]
#endif
}
 8003568:	bf00      	nop
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	e000ed00 	.word	0xe000ed00

08003578 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b090      	sub	sp, #64	; 0x40
 800357c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800357e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	605a      	str	r2, [r3, #4]
 8003588:	609a      	str	r2, [r3, #8]
 800358a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800358c:	f107 031c 	add.w	r3, r7, #28
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	605a      	str	r2, [r3, #4]
 8003596:	609a      	str	r2, [r3, #8]
 8003598:	60da      	str	r2, [r3, #12]
 800359a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800359c:	f107 030c 	add.w	r3, r7, #12
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035aa:	463b      	mov	r3, r7
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	605a      	str	r2, [r3, #4]
 80035b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80035b4:	4b40      	ldr	r3, [pc, #256]	; (80036b8 <MX_TIM1_Init+0x140>)
 80035b6:	4a41      	ldr	r2, [pc, #260]	; (80036bc <MX_TIM1_Init+0x144>)
 80035b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 675 - 1;
 80035ba:	4b3f      	ldr	r3, [pc, #252]	; (80036b8 <MX_TIM1_Init+0x140>)
 80035bc:	f240 22a2 	movw	r2, #674	; 0x2a2
 80035c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035c2:	4b3d      	ldr	r3, [pc, #244]	; (80036b8 <MX_TIM1_Init+0x140>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80035c8:	4b3b      	ldr	r3, [pc, #236]	; (80036b8 <MX_TIM1_Init+0x140>)
 80035ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035d0:	4b39      	ldr	r3, [pc, #228]	; (80036b8 <MX_TIM1_Init+0x140>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80035d6:	4b38      	ldr	r3, [pc, #224]	; (80036b8 <MX_TIM1_Init+0x140>)
 80035d8:	2200      	movs	r2, #0
 80035da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035dc:	4b36      	ldr	r3, [pc, #216]	; (80036b8 <MX_TIM1_Init+0x140>)
 80035de:	2200      	movs	r2, #0
 80035e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80035e2:	4835      	ldr	r0, [pc, #212]	; (80036b8 <MX_TIM1_Init+0x140>)
 80035e4:	f003 fc7c 	bl	8006ee0 <HAL_TIM_Base_Init>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80035ee:	f7ff fe07 	bl	8003200 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035f6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80035f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035fc:	4619      	mov	r1, r3
 80035fe:	482e      	ldr	r0, [pc, #184]	; (80036b8 <MX_TIM1_Init+0x140>)
 8003600:	f004 fa86 	bl	8007b10 <HAL_TIM_ConfigClockSource>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800360a:	f7ff fdf9 	bl	8003200 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800360e:	482a      	ldr	r0, [pc, #168]	; (80036b8 <MX_TIM1_Init+0x140>)
 8003610:	f003 fdfd 	bl	800720e <HAL_TIM_IC_Init>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800361a:	f7ff fdf1 	bl	8003200 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800361e:	2304      	movs	r3, #4
 8003620:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003622:	2350      	movs	r3, #80	; 0x50
 8003624:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003626:	2300      	movs	r3, #0
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800362a:	2300      	movs	r3, #0
 800362c:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800362e:	2300      	movs	r3, #0
 8003630:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8003632:	f107 031c 	add.w	r3, r7, #28
 8003636:	4619      	mov	r1, r3
 8003638:	481f      	ldr	r0, [pc, #124]	; (80036b8 <MX_TIM1_Init+0x140>)
 800363a:	f004 fb33 	bl	8007ca4 <HAL_TIM_SlaveConfigSynchro>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8003644:	f7ff fddc 	bl	8003200 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800364c:	2301      	movs	r3, #1
 800364e:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003650:	2300      	movs	r3, #0
 8003652:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8003654:	2300      	movs	r3, #0
 8003656:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003658:	f107 030c 	add.w	r3, r7, #12
 800365c:	2200      	movs	r2, #0
 800365e:	4619      	mov	r1, r3
 8003660:	4815      	ldr	r0, [pc, #84]	; (80036b8 <MX_TIM1_Init+0x140>)
 8003662:	f004 f8a4 	bl	80077ae <HAL_TIM_IC_ConfigChannel>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800366c:	f7ff fdc8 	bl	8003200 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003670:	2302      	movs	r3, #2
 8003672:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003674:	2302      	movs	r3, #2
 8003676:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003678:	f107 030c 	add.w	r3, r7, #12
 800367c:	2204      	movs	r2, #4
 800367e:	4619      	mov	r1, r3
 8003680:	480d      	ldr	r0, [pc, #52]	; (80036b8 <MX_TIM1_Init+0x140>)
 8003682:	f004 f894 	bl	80077ae <HAL_TIM_IC_ConfigChannel>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 800368c:	f7ff fdb8 	bl	8003200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003690:	2300      	movs	r3, #0
 8003692:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003694:	2300      	movs	r3, #0
 8003696:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003698:	2300      	movs	r3, #0
 800369a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800369c:	463b      	mov	r3, r7
 800369e:	4619      	mov	r1, r3
 80036a0:	4805      	ldr	r0, [pc, #20]	; (80036b8 <MX_TIM1_Init+0x140>)
 80036a2:	f005 f91f 	bl	80088e4 <HAL_TIMEx_MasterConfigSynchronization>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80036ac:	f7ff fda8 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80036b0:	bf00      	nop
 80036b2:	3740      	adds	r7, #64	; 0x40
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	200001c0 	.word	0x200001c0
 80036bc:	40010000 	.word	0x40010000

080036c0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08a      	sub	sp, #40	; 0x28
 80036c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036c6:	f107 031c 	add.w	r3, r7, #28
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	605a      	str	r2, [r3, #4]
 80036d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036d2:	463b      	mov	r3, r7
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	605a      	str	r2, [r3, #4]
 80036da:	609a      	str	r2, [r3, #8]
 80036dc:	60da      	str	r2, [r3, #12]
 80036de:	611a      	str	r2, [r3, #16]
 80036e0:	615a      	str	r2, [r3, #20]
 80036e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80036e4:	4b32      	ldr	r3, [pc, #200]	; (80037b0 <MX_TIM4_Init+0xf0>)
 80036e6:	4a33      	ldr	r2, [pc, #204]	; (80037b4 <MX_TIM4_Init+0xf4>)
 80036e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80036ea:	4b31      	ldr	r3, [pc, #196]	; (80037b0 <MX_TIM4_Init+0xf0>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036f0:	4b2f      	ldr	r3, [pc, #188]	; (80037b0 <MX_TIM4_Init+0xf0>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80036f6:	4b2e      	ldr	r3, [pc, #184]	; (80037b0 <MX_TIM4_Init+0xf0>)
 80036f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036fe:	4b2c      	ldr	r3, [pc, #176]	; (80037b0 <MX_TIM4_Init+0xf0>)
 8003700:	2200      	movs	r2, #0
 8003702:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003704:	4b2a      	ldr	r3, [pc, #168]	; (80037b0 <MX_TIM4_Init+0xf0>)
 8003706:	2200      	movs	r2, #0
 8003708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800370a:	4829      	ldr	r0, [pc, #164]	; (80037b0 <MX_TIM4_Init+0xf0>)
 800370c:	f003 fd28 	bl	8007160 <HAL_TIM_PWM_Init>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8003716:	f7ff fd73 	bl	8003200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800371a:	2300      	movs	r3, #0
 800371c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800371e:	2300      	movs	r3, #0
 8003720:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003722:	f107 031c 	add.w	r3, r7, #28
 8003726:	4619      	mov	r1, r3
 8003728:	4821      	ldr	r0, [pc, #132]	; (80037b0 <MX_TIM4_Init+0xf0>)
 800372a:	f005 f8db 	bl	80088e4 <HAL_TIMEx_MasterConfigSynchronization>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8003734:	f7ff fd64 	bl	8003200 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003738:	2360      	movs	r3, #96	; 0x60
 800373a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800373c:	2300      	movs	r3, #0
 800373e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003740:	2300      	movs	r3, #0
 8003742:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003744:	2300      	movs	r3, #0
 8003746:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003748:	463b      	mov	r3, r7
 800374a:	2200      	movs	r2, #0
 800374c:	4619      	mov	r1, r3
 800374e:	4818      	ldr	r0, [pc, #96]	; (80037b0 <MX_TIM4_Init+0xf0>)
 8003750:	f004 f8ca 	bl	80078e8 <HAL_TIM_PWM_ConfigChannel>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800375a:	f7ff fd51 	bl	8003200 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800375e:	463b      	mov	r3, r7
 8003760:	2204      	movs	r2, #4
 8003762:	4619      	mov	r1, r3
 8003764:	4812      	ldr	r0, [pc, #72]	; (80037b0 <MX_TIM4_Init+0xf0>)
 8003766:	f004 f8bf 	bl	80078e8 <HAL_TIM_PWM_ConfigChannel>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8003770:	f7ff fd46 	bl	8003200 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003774:	463b      	mov	r3, r7
 8003776:	2208      	movs	r2, #8
 8003778:	4619      	mov	r1, r3
 800377a:	480d      	ldr	r0, [pc, #52]	; (80037b0 <MX_TIM4_Init+0xf0>)
 800377c:	f004 f8b4 	bl	80078e8 <HAL_TIM_PWM_ConfigChannel>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8003786:	f7ff fd3b 	bl	8003200 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800378a:	463b      	mov	r3, r7
 800378c:	220c      	movs	r2, #12
 800378e:	4619      	mov	r1, r3
 8003790:	4807      	ldr	r0, [pc, #28]	; (80037b0 <MX_TIM4_Init+0xf0>)
 8003792:	f004 f8a9 	bl	80078e8 <HAL_TIM_PWM_ConfigChannel>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 800379c:	f7ff fd30 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80037a0:	4803      	ldr	r0, [pc, #12]	; (80037b0 <MX_TIM4_Init+0xf0>)
 80037a2:	f000 f8c7 	bl	8003934 <HAL_TIM_MspPostInit>

}
 80037a6:	bf00      	nop
 80037a8:	3728      	adds	r7, #40	; 0x28
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	2000020c 	.word	0x2000020c
 80037b4:	40000800 	.word	0x40000800

080037b8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037be:	1d3b      	adds	r3, r7, #4
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	605a      	str	r2, [r3, #4]
 80037c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80037c8:	4b14      	ldr	r3, [pc, #80]	; (800381c <MX_TIM6_Init+0x64>)
 80037ca:	4a15      	ldr	r2, [pc, #84]	; (8003820 <MX_TIM6_Init+0x68>)
 80037cc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 27;
 80037ce:	4b13      	ldr	r3, [pc, #76]	; (800381c <MX_TIM6_Init+0x64>)
 80037d0:	221b      	movs	r2, #27
 80037d2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037d4:	4b11      	ldr	r3, [pc, #68]	; (800381c <MX_TIM6_Init+0x64>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000;
 80037da:	4b10      	ldr	r3, [pc, #64]	; (800381c <MX_TIM6_Init+0x64>)
 80037dc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80037e0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037e2:	4b0e      	ldr	r3, [pc, #56]	; (800381c <MX_TIM6_Init+0x64>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80037e8:	480c      	ldr	r0, [pc, #48]	; (800381c <MX_TIM6_Init+0x64>)
 80037ea:	f003 fb79 	bl	8006ee0 <HAL_TIM_Base_Init>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80037f4:	f7ff fd04 	bl	8003200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037f8:	2300      	movs	r3, #0
 80037fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037fc:	2300      	movs	r3, #0
 80037fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003800:	1d3b      	adds	r3, r7, #4
 8003802:	4619      	mov	r1, r3
 8003804:	4805      	ldr	r0, [pc, #20]	; (800381c <MX_TIM6_Init+0x64>)
 8003806:	f005 f86d 	bl	80088e4 <HAL_TIMEx_MasterConfigSynchronization>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003810:	f7ff fcf6 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003814:	bf00      	nop
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	20000258 	.word	0x20000258
 8003820:	40001000 	.word	0x40001000

08003824 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08a      	sub	sp, #40	; 0x28
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800382c:	f107 0314 	add.w	r3, r7, #20
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	605a      	str	r2, [r3, #4]
 8003836:	609a      	str	r2, [r3, #8]
 8003838:	60da      	str	r2, [r3, #12]
 800383a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a28      	ldr	r2, [pc, #160]	; (80038e4 <HAL_TIM_Base_MspInit+0xc0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d131      	bne.n	80038aa <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003846:	4b28      	ldr	r3, [pc, #160]	; (80038e8 <HAL_TIM_Base_MspInit+0xc4>)
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	4a27      	ldr	r2, [pc, #156]	; (80038e8 <HAL_TIM_Base_MspInit+0xc4>)
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	6453      	str	r3, [r2, #68]	; 0x44
 8003852:	4b25      	ldr	r3, [pc, #148]	; (80038e8 <HAL_TIM_Base_MspInit+0xc4>)
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	613b      	str	r3, [r7, #16]
 800385c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800385e:	4b22      	ldr	r3, [pc, #136]	; (80038e8 <HAL_TIM_Base_MspInit+0xc4>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	4a21      	ldr	r2, [pc, #132]	; (80038e8 <HAL_TIM_Base_MspInit+0xc4>)
 8003864:	f043 0310 	orr.w	r3, r3, #16
 8003868:	6313      	str	r3, [r2, #48]	; 0x30
 800386a:	4b1f      	ldr	r3, [pc, #124]	; (80038e8 <HAL_TIM_Base_MspInit+0xc4>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	f003 0310 	and.w	r3, r3, #16
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 8003876:	f44f 7300 	mov.w	r3, #512	; 0x200
 800387a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387c:	2302      	movs	r3, #2
 800387e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003880:	2300      	movs	r3, #0
 8003882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003884:	2300      	movs	r3, #0
 8003886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003888:	2301      	movs	r3, #1
 800388a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 800388c:	f107 0314 	add.w	r3, r7, #20
 8003890:	4619      	mov	r1, r3
 8003892:	4816      	ldr	r0, [pc, #88]	; (80038ec <HAL_TIM_Base_MspInit+0xc8>)
 8003894:	f001 f8da 	bl	8004a4c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003898:	2200      	movs	r2, #0
 800389a:	2100      	movs	r1, #0
 800389c:	201a      	movs	r0, #26
 800389e:	f001 f89e 	bl	80049de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80038a2:	201a      	movs	r0, #26
 80038a4:	f001 f8b7 	bl	8004a16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80038a8:	e018      	b.n	80038dc <HAL_TIM_Base_MspInit+0xb8>
  else if(tim_baseHandle->Instance==TIM6)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a10      	ldr	r2, [pc, #64]	; (80038f0 <HAL_TIM_Base_MspInit+0xcc>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d113      	bne.n	80038dc <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80038b4:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <HAL_TIM_Base_MspInit+0xc4>)
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	4a0b      	ldr	r2, [pc, #44]	; (80038e8 <HAL_TIM_Base_MspInit+0xc4>)
 80038ba:	f043 0310 	orr.w	r3, r3, #16
 80038be:	6413      	str	r3, [r2, #64]	; 0x40
 80038c0:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <HAL_TIM_Base_MspInit+0xc4>)
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	f003 0310 	and.w	r3, r3, #16
 80038c8:	60bb      	str	r3, [r7, #8]
 80038ca:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80038cc:	2200      	movs	r2, #0
 80038ce:	2100      	movs	r1, #0
 80038d0:	2036      	movs	r0, #54	; 0x36
 80038d2:	f001 f884 	bl	80049de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80038d6:	2036      	movs	r0, #54	; 0x36
 80038d8:	f001 f89d 	bl	8004a16 <HAL_NVIC_EnableIRQ>
}
 80038dc:	bf00      	nop
 80038de:	3728      	adds	r7, #40	; 0x28
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40010000 	.word	0x40010000
 80038e8:	40023800 	.word	0x40023800
 80038ec:	40021000 	.word	0x40021000
 80038f0:	40001000 	.word	0x40001000

080038f4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a0a      	ldr	r2, [pc, #40]	; (800392c <HAL_TIM_PWM_MspInit+0x38>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d10b      	bne.n	800391e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003906:	4b0a      	ldr	r3, [pc, #40]	; (8003930 <HAL_TIM_PWM_MspInit+0x3c>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	4a09      	ldr	r2, [pc, #36]	; (8003930 <HAL_TIM_PWM_MspInit+0x3c>)
 800390c:	f043 0304 	orr.w	r3, r3, #4
 8003910:	6413      	str	r3, [r2, #64]	; 0x40
 8003912:	4b07      	ldr	r3, [pc, #28]	; (8003930 <HAL_TIM_PWM_MspInit+0x3c>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800391e:	bf00      	nop
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40000800 	.word	0x40000800
 8003930:	40023800 	.word	0x40023800

08003934 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800393c:	f107 030c 	add.w	r3, r7, #12
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	605a      	str	r2, [r3, #4]
 8003946:	609a      	str	r2, [r3, #8]
 8003948:	60da      	str	r2, [r3, #12]
 800394a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a11      	ldr	r2, [pc, #68]	; (8003998 <HAL_TIM_MspPostInit+0x64>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d11c      	bne.n	8003990 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003956:	4b11      	ldr	r3, [pc, #68]	; (800399c <HAL_TIM_MspPostInit+0x68>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	4a10      	ldr	r2, [pc, #64]	; (800399c <HAL_TIM_MspPostInit+0x68>)
 800395c:	f043 0308 	orr.w	r3, r3, #8
 8003960:	6313      	str	r3, [r2, #48]	; 0x30
 8003962:	4b0e      	ldr	r3, [pc, #56]	; (800399c <HAL_TIM_MspPostInit+0x68>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	60bb      	str	r3, [r7, #8]
 800396c:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin|PWM_HV_Charger_Pin;
 800396e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003972:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003974:	2302      	movs	r3, #2
 8003976:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800397c:	2300      	movs	r3, #0
 800397e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003980:	2302      	movs	r3, #2
 8003982:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003984:	f107 030c 	add.w	r3, r7, #12
 8003988:	4619      	mov	r1, r3
 800398a:	4805      	ldr	r0, [pc, #20]	; (80039a0 <HAL_TIM_MspPostInit+0x6c>)
 800398c:	f001 f85e 	bl	8004a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003990:	bf00      	nop
 8003992:	3720      	adds	r7, #32
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40000800 	.word	0x40000800
 800399c:	40023800 	.word	0x40023800
 80039a0:	40020c00 	.word	0x40020c00

080039a4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80039a8:	4b14      	ldr	r3, [pc, #80]	; (80039fc <MX_USART2_UART_Init+0x58>)
 80039aa:	4a15      	ldr	r2, [pc, #84]	; (8003a00 <MX_USART2_UART_Init+0x5c>)
 80039ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80039ae:	4b13      	ldr	r3, [pc, #76]	; (80039fc <MX_USART2_UART_Init+0x58>)
 80039b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80039b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039b6:	4b11      	ldr	r3, [pc, #68]	; (80039fc <MX_USART2_UART_Init+0x58>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039bc:	4b0f      	ldr	r3, [pc, #60]	; (80039fc <MX_USART2_UART_Init+0x58>)
 80039be:	2200      	movs	r2, #0
 80039c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039c2:	4b0e      	ldr	r3, [pc, #56]	; (80039fc <MX_USART2_UART_Init+0x58>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039c8:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <MX_USART2_UART_Init+0x58>)
 80039ca:	220c      	movs	r2, #12
 80039cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039ce:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <MX_USART2_UART_Init+0x58>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039d4:	4b09      	ldr	r3, [pc, #36]	; (80039fc <MX_USART2_UART_Init+0x58>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039da:	4b08      	ldr	r3, [pc, #32]	; (80039fc <MX_USART2_UART_Init+0x58>)
 80039dc:	2200      	movs	r2, #0
 80039de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039e0:	4b06      	ldr	r3, [pc, #24]	; (80039fc <MX_USART2_UART_Init+0x58>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80039e6:	4805      	ldr	r0, [pc, #20]	; (80039fc <MX_USART2_UART_Init+0x58>)
 80039e8:	f005 f828 	bl	8008a3c <HAL_UART_Init>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80039f2:	f7ff fc05 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	200002a4 	.word	0x200002a4
 8003a00:	40004400 	.word	0x40004400

08003a04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b0ae      	sub	sp, #184	; 0xb8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	605a      	str	r2, [r3, #4]
 8003a16:	609a      	str	r2, [r3, #8]
 8003a18:	60da      	str	r2, [r3, #12]
 8003a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a1c:	f107 0314 	add.w	r3, r7, #20
 8003a20:	2290      	movs	r2, #144	; 0x90
 8003a22:	2100      	movs	r1, #0
 8003a24:	4618      	mov	r0, r3
 8003a26:	f005 fd23 	bl	8009470 <memset>
  if(uartHandle->Instance==USART2)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a21      	ldr	r2, [pc, #132]	; (8003ab4 <HAL_UART_MspInit+0xb0>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d13a      	bne.n	8003aaa <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003a34:	2380      	movs	r3, #128	; 0x80
 8003a36:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a3c:	f107 0314 	add.w	r3, r7, #20
 8003a40:	4618      	mov	r0, r3
 8003a42:	f001 fec5 	bl	80057d0 <HAL_RCCEx_PeriphCLKConfig>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003a4c:	f7ff fbd8 	bl	8003200 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a50:	4b19      	ldr	r3, [pc, #100]	; (8003ab8 <HAL_UART_MspInit+0xb4>)
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	4a18      	ldr	r2, [pc, #96]	; (8003ab8 <HAL_UART_MspInit+0xb4>)
 8003a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8003a5c:	4b16      	ldr	r3, [pc, #88]	; (8003ab8 <HAL_UART_MspInit+0xb4>)
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a64:	613b      	str	r3, [r7, #16]
 8003a66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a68:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <HAL_UART_MspInit+0xb4>)
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	4a12      	ldr	r2, [pc, #72]	; (8003ab8 <HAL_UART_MspInit+0xb4>)
 8003a6e:	f043 0308 	orr.w	r3, r3, #8
 8003a72:	6313      	str	r3, [r2, #48]	; 0x30
 8003a74:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <HAL_UART_MspInit+0xb4>)
 8003a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a78:	f003 0308 	and.w	r3, r3, #8
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003a80:	2360      	movs	r3, #96	; 0x60
 8003a82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a86:	2302      	movs	r3, #2
 8003a88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a92:	2303      	movs	r3, #3
 8003a94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a98:	2307      	movs	r3, #7
 8003a9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a9e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4805      	ldr	r0, [pc, #20]	; (8003abc <HAL_UART_MspInit+0xb8>)
 8003aa6:	f000 ffd1 	bl	8004a4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003aaa:	bf00      	nop
 8003aac:	37b8      	adds	r7, #184	; 0xb8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40004400 	.word	0x40004400
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	40020c00 	.word	0x40020c00

08003ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003af8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003ac4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003ac6:	e003      	b.n	8003ad0 <LoopCopyDataInit>

08003ac8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ac8:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003aca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003acc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003ace:	3104      	adds	r1, #4

08003ad0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ad0:	480b      	ldr	r0, [pc, #44]	; (8003b00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003ad2:	4b0c      	ldr	r3, [pc, #48]	; (8003b04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ad4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003ad6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ad8:	d3f6      	bcc.n	8003ac8 <CopyDataInit>
  ldr  r2, =_sbss
 8003ada:	4a0b      	ldr	r2, [pc, #44]	; (8003b08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003adc:	e002      	b.n	8003ae4 <LoopFillZerobss>

08003ade <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003ade:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003ae0:	f842 3b04 	str.w	r3, [r2], #4

08003ae4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003ae4:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003ae6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003ae8:	d3f9      	bcc.n	8003ade <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003aea:	f7ff fd2f 	bl	800354c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003aee:	f005 fc9b 	bl	8009428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003af2:	f7fe fdd9 	bl	80026a8 <main>
  bx  lr    
 8003af6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003af8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003afc:	08009dec 	.word	0x08009dec
  ldr  r0, =_sdata
 8003b00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b04:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003b08:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003b0c:	2000032c 	.word	0x2000032c

08003b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b10:	e7fe      	b.n	8003b10 <ADC_IRQHandler>

08003b12 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b16:	2003      	movs	r0, #3
 8003b18:	f000 ff56 	bl	80049c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	f000 f805 	bl	8003b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b22:	f7ff fcad 	bl	8003480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b34:	4b12      	ldr	r3, [pc, #72]	; (8003b80 <HAL_InitTick+0x54>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	4b12      	ldr	r3, [pc, #72]	; (8003b84 <HAL_InitTick+0x58>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 ff71 	bl	8004a32 <HAL_SYSTICK_Config>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e00e      	b.n	8003b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b0f      	cmp	r3, #15
 8003b5e:	d80a      	bhi.n	8003b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b60:	2200      	movs	r2, #0
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	f04f 30ff 	mov.w	r0, #4294967295
 8003b68:	f000 ff39 	bl	80049de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b6c:	4a06      	ldr	r2, [pc, #24]	; (8003b88 <HAL_InitTick+0x5c>)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
 8003b74:	e000      	b.n	8003b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20000000 	.word	0x20000000
 8003b84:	20000008 	.word	0x20000008
 8003b88:	20000004 	.word	0x20000004

08003b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b90:	4b06      	ldr	r3, [pc, #24]	; (8003bac <HAL_IncTick+0x20>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	461a      	mov	r2, r3
 8003b96:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <HAL_IncTick+0x24>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	4a04      	ldr	r2, [pc, #16]	; (8003bb0 <HAL_IncTick+0x24>)
 8003b9e:	6013      	str	r3, [r2, #0]
}
 8003ba0:	bf00      	nop
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	20000008 	.word	0x20000008
 8003bb0:	20000328 	.word	0x20000328

08003bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8003bb8:	4b03      	ldr	r3, [pc, #12]	; (8003bc8 <HAL_GetTick+0x14>)
 8003bba:	681b      	ldr	r3, [r3, #0]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	20000328 	.word	0x20000328

08003bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bd4:	f7ff ffee 	bl	8003bb4 <HAL_GetTick>
 8003bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be4:	d005      	beq.n	8003bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003be6:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <HAL_Delay+0x44>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	461a      	mov	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4413      	add	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bf2:	bf00      	nop
 8003bf4:	f7ff ffde 	bl	8003bb4 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d8f7      	bhi.n	8003bf4 <HAL_Delay+0x28>
  {
  }
}
 8003c04:	bf00      	nop
 8003c06:	bf00      	nop
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000008 	.word	0x20000008

08003c14 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 8003c18:	4b02      	ldr	r3, [pc, #8]	; (8003c24 <HAL_GetHalVersion+0x10>)
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	01020a00 	.word	0x01020a00

08003c28 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8003c2c:	4b03      	ldr	r3, [pc, #12]	; (8003c3c <HAL_GetREVID+0x14>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	0c1b      	lsrs	r3, r3, #16
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	e0042000 	.word	0xe0042000

08003c40 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8003c44:	4b04      	ldr	r3, [pc, #16]	; (8003c58 <HAL_GetDEVID+0x18>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	e0042000 	.word	0xe0042000

08003c5c <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8003c60:	4b03      	ldr	r3, [pc, #12]	; (8003c70 <HAL_GetUIDw0+0x14>)
 8003c62:	681b      	ldr	r3, [r3, #0]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	1ff0f420 	.word	0x1ff0f420

08003c74 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003c78:	4b03      	ldr	r3, [pc, #12]	; (8003c88 <HAL_GetUIDw1+0x14>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	1ff0f424 	.word	0x1ff0f424

08003c8c <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003c90:	4b03      	ldr	r3, [pc, #12]	; (8003ca0 <HAL_GetUIDw2+0x14>)
 8003c92:	681b      	ldr	r3, [r3, #0]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	1ff0f428 	.word	0x1ff0f428

08003ca4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e031      	b.n	8003d1e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d109      	bne.n	8003cd6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7fe f9f6 	bl	80020b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	f003 0310 	and.w	r3, r3, #16
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d116      	bne.n	8003d10 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ce6:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <HAL_ADC_Init+0x84>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	f043 0202 	orr.w	r2, r3, #2
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f970 	bl	8003fd8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	f023 0303 	bic.w	r3, r3, #3
 8003d06:	f043 0201 	orr.w	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	641a      	str	r2, [r3, #64]	; 0x40
 8003d0e:	e001      	b.n	8003d14 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	ffffeefd 	.word	0xffffeefd

08003d2c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d101      	bne.n	8003d48 <HAL_ADC_ConfigChannel+0x1c>
 8003d44:	2302      	movs	r3, #2
 8003d46:	e136      	b.n	8003fb6 <HAL_ADC_ConfigChannel+0x28a>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b09      	cmp	r3, #9
 8003d56:	d93a      	bls.n	8003dce <HAL_ADC_ConfigChannel+0xa2>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d60:	d035      	beq.n	8003dce <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68d9      	ldr	r1, [r3, #12]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	461a      	mov	r2, r3
 8003d70:	4613      	mov	r3, r2
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	4413      	add	r3, r2
 8003d76:	3b1e      	subs	r3, #30
 8003d78:	2207      	movs	r2, #7
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	43da      	mvns	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	400a      	ands	r2, r1
 8003d86:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a8d      	ldr	r2, [pc, #564]	; (8003fc4 <HAL_ADC_ConfigChannel+0x298>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d10a      	bne.n	8003da8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68d9      	ldr	r1, [r3, #12]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	061a      	lsls	r2, r3, #24
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003da6:	e035      	b.n	8003e14 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68d9      	ldr	r1, [r3, #12]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	4618      	mov	r0, r3
 8003dba:	4603      	mov	r3, r0
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	4403      	add	r3, r0
 8003dc0:	3b1e      	subs	r3, #30
 8003dc2:	409a      	lsls	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003dcc:	e022      	b.n	8003e14 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6919      	ldr	r1, [r3, #16]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4613      	mov	r3, r2
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	4413      	add	r3, r2
 8003de2:	2207      	movs	r2, #7
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	43da      	mvns	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	400a      	ands	r2, r1
 8003df0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6919      	ldr	r1, [r3, #16]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	4618      	mov	r0, r3
 8003e04:	4603      	mov	r3, r0
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	4403      	add	r3, r0
 8003e0a:	409a      	lsls	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b06      	cmp	r3, #6
 8003e1a:	d824      	bhi.n	8003e66 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	3b05      	subs	r3, #5
 8003e2e:	221f      	movs	r2, #31
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	43da      	mvns	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	400a      	ands	r2, r1
 8003e3c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	3b05      	subs	r3, #5
 8003e58:	fa00 f203 	lsl.w	r2, r0, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	635a      	str	r2, [r3, #52]	; 0x34
 8003e64:	e04c      	b.n	8003f00 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b0c      	cmp	r3, #12
 8003e6c:	d824      	bhi.n	8003eb8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	3b23      	subs	r3, #35	; 0x23
 8003e80:	221f      	movs	r2, #31
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	43da      	mvns	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	400a      	ands	r2, r1
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	3b23      	subs	r3, #35	; 0x23
 8003eaa:	fa00 f203 	lsl.w	r2, r0, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	631a      	str	r2, [r3, #48]	; 0x30
 8003eb6:	e023      	b.n	8003f00 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	3b41      	subs	r3, #65	; 0x41
 8003eca:	221f      	movs	r2, #31
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	43da      	mvns	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	400a      	ands	r2, r1
 8003ed8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	4613      	mov	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	3b41      	subs	r3, #65	; 0x41
 8003ef4:	fa00 f203 	lsl.w	r2, r0, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a30      	ldr	r2, [pc, #192]	; (8003fc8 <HAL_ADC_ConfigChannel+0x29c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d10a      	bne.n	8003f20 <HAL_ADC_ConfigChannel+0x1f4>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f12:	d105      	bne.n	8003f20 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003f14:	4b2d      	ldr	r3, [pc, #180]	; (8003fcc <HAL_ADC_ConfigChannel+0x2a0>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	4a2c      	ldr	r2, [pc, #176]	; (8003fcc <HAL_ADC_ConfigChannel+0x2a0>)
 8003f1a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003f1e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a28      	ldr	r2, [pc, #160]	; (8003fc8 <HAL_ADC_ConfigChannel+0x29c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d10f      	bne.n	8003f4a <HAL_ADC_ConfigChannel+0x21e>
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b12      	cmp	r3, #18
 8003f30:	d10b      	bne.n	8003f4a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003f32:	4b26      	ldr	r3, [pc, #152]	; (8003fcc <HAL_ADC_ConfigChannel+0x2a0>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	4a25      	ldr	r2, [pc, #148]	; (8003fcc <HAL_ADC_ConfigChannel+0x2a0>)
 8003f38:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f3c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003f3e:	4b23      	ldr	r3, [pc, #140]	; (8003fcc <HAL_ADC_ConfigChannel+0x2a0>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	4a22      	ldr	r2, [pc, #136]	; (8003fcc <HAL_ADC_ConfigChannel+0x2a0>)
 8003f44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f48:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a1e      	ldr	r2, [pc, #120]	; (8003fc8 <HAL_ADC_ConfigChannel+0x29c>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d12b      	bne.n	8003fac <HAL_ADC_ConfigChannel+0x280>
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a1a      	ldr	r2, [pc, #104]	; (8003fc4 <HAL_ADC_ConfigChannel+0x298>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d003      	beq.n	8003f66 <HAL_ADC_ConfigChannel+0x23a>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b11      	cmp	r3, #17
 8003f64:	d122      	bne.n	8003fac <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003f66:	4b19      	ldr	r3, [pc, #100]	; (8003fcc <HAL_ADC_ConfigChannel+0x2a0>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	4a18      	ldr	r2, [pc, #96]	; (8003fcc <HAL_ADC_ConfigChannel+0x2a0>)
 8003f6c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003f70:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003f72:	4b16      	ldr	r3, [pc, #88]	; (8003fcc <HAL_ADC_ConfigChannel+0x2a0>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	4a15      	ldr	r2, [pc, #84]	; (8003fcc <HAL_ADC_ConfigChannel+0x2a0>)
 8003f78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f7c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a10      	ldr	r2, [pc, #64]	; (8003fc4 <HAL_ADC_ConfigChannel+0x298>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d111      	bne.n	8003fac <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003f88:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <HAL_ADC_ConfigChannel+0x2a4>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a11      	ldr	r2, [pc, #68]	; (8003fd4 <HAL_ADC_ConfigChannel+0x2a8>)
 8003f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f92:	0c9a      	lsrs	r2, r3, #18
 8003f94:	4613      	mov	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003f9e:	e002      	b.n	8003fa6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1f9      	bne.n	8003fa0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	10000012 	.word	0x10000012
 8003fc8:	40012000 	.word	0x40012000
 8003fcc:	40012300 	.word	0x40012300
 8003fd0:	20000000 	.word	0x20000000
 8003fd4:	431bde83 	.word	0x431bde83

08003fd8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003fe0:	4b78      	ldr	r3, [pc, #480]	; (80041c4 <ADC_Init+0x1ec>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	4a77      	ldr	r2, [pc, #476]	; (80041c4 <ADC_Init+0x1ec>)
 8003fe6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003fea:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003fec:	4b75      	ldr	r3, [pc, #468]	; (80041c4 <ADC_Init+0x1ec>)
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	4973      	ldr	r1, [pc, #460]	; (80041c4 <ADC_Init+0x1ec>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004008:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6859      	ldr	r1, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	021a      	lsls	r2, r3, #8
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800402c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6859      	ldr	r1, [r3, #4]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800404e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6899      	ldr	r1, [r3, #8]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004066:	4a58      	ldr	r2, [pc, #352]	; (80041c8 <ADC_Init+0x1f0>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d022      	beq.n	80040b2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689a      	ldr	r2, [r3, #8]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800407a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6899      	ldr	r1, [r3, #8]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800409c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6899      	ldr	r1, [r3, #8]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	609a      	str	r2, [r3, #8]
 80040b0:	e00f      	b.n	80040d2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0202 	bic.w	r2, r2, #2
 80040e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6899      	ldr	r1, [r3, #8]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	005a      	lsls	r2, r3, #1
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d01b      	beq.n	8004138 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800410e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800411e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6859      	ldr	r1, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	3b01      	subs	r3, #1
 800412c:	035a      	lsls	r2, r3, #13
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	605a      	str	r2, [r3, #4]
 8004136:	e007      	b.n	8004148 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004146:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004156:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	3b01      	subs	r3, #1
 8004164:	051a      	lsls	r2, r3, #20
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800417c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6899      	ldr	r1, [r3, #8]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800418a:	025a      	lsls	r2, r3, #9
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6899      	ldr	r1, [r3, #8]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	029a      	lsls	r2, r3, #10
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	609a      	str	r2, [r3, #8]
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	40012300 	.word	0x40012300
 80041c8:	0f000001 	.word	0x0f000001

080041cc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e0ed      	b.n	80043ba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d102      	bne.n	80041f0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fe f80e 	bl	800220c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0201 	orr.w	r2, r2, #1
 80041fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004200:	f7ff fcd8 	bl	8003bb4 <HAL_GetTick>
 8004204:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004206:	e012      	b.n	800422e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004208:	f7ff fcd4 	bl	8003bb4 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b0a      	cmp	r3, #10
 8004214:	d90b      	bls.n	800422e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2205      	movs	r2, #5
 8004226:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e0c5      	b.n	80043ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0e5      	beq.n	8004208 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0202 	bic.w	r2, r2, #2
 800424a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800424c:	f7ff fcb2 	bl	8003bb4 <HAL_GetTick>
 8004250:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004252:	e012      	b.n	800427a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004254:	f7ff fcae 	bl	8003bb4 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b0a      	cmp	r3, #10
 8004260:	d90b      	bls.n	800427a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2205      	movs	r2, #5
 8004272:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e09f      	b.n	80043ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1e5      	bne.n	8004254 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	7e1b      	ldrb	r3, [r3, #24]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d108      	bne.n	80042a2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	e007      	b.n	80042b2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	7e5b      	ldrb	r3, [r3, #25]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d108      	bne.n	80042cc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	e007      	b.n	80042dc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	7e9b      	ldrb	r3, [r3, #26]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d108      	bne.n	80042f6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 0220 	orr.w	r2, r2, #32
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	e007      	b.n	8004306 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0220 	bic.w	r2, r2, #32
 8004304:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	7edb      	ldrb	r3, [r3, #27]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d108      	bne.n	8004320 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0210 	bic.w	r2, r2, #16
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	e007      	b.n	8004330 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0210 	orr.w	r2, r2, #16
 800432e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	7f1b      	ldrb	r3, [r3, #28]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d108      	bne.n	800434a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0208 	orr.w	r2, r2, #8
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	e007      	b.n	800435a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0208 	bic.w	r2, r2, #8
 8004358:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	7f5b      	ldrb	r3, [r3, #29]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d108      	bne.n	8004374 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f042 0204 	orr.w	r2, r2, #4
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	e007      	b.n	8004384 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0204 	bic.w	r2, r2, #4
 8004382:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	431a      	orrs	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	ea42 0103 	orr.w	r1, r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	1e5a      	subs	r2, r3, #1
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
	...

080043c4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043da:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80043dc:	7cfb      	ldrb	r3, [r7, #19]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d003      	beq.n	80043ea <HAL_CAN_ConfigFilter+0x26>
 80043e2:	7cfb      	ldrb	r3, [r7, #19]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	f040 80c7 	bne.w	8004578 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a69      	ldr	r2, [pc, #420]	; (8004594 <HAL_CAN_ConfigFilter+0x1d0>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d001      	beq.n	80043f8 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80043f4:	4b68      	ldr	r3, [pc, #416]	; (8004598 <HAL_CAN_ConfigFilter+0x1d4>)
 80043f6:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80043fe:	f043 0201 	orr.w	r2, r3, #1
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	4a63      	ldr	r2, [pc, #396]	; (8004598 <HAL_CAN_ConfigFilter+0x1d4>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d111      	bne.n	8004434 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004416:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	021b      	lsls	r3, r3, #8
 800442c:	431a      	orrs	r2, r3
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	f003 031f 	and.w	r3, r3, #31
 800443c:	2201      	movs	r2, #1
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	43db      	mvns	r3, r3
 800444e:	401a      	ands	r2, r3
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d123      	bne.n	80044a6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	43db      	mvns	r3, r3
 8004468:	401a      	ands	r2, r3
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004480:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	3248      	adds	r2, #72	; 0x48
 8004486:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800449a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800449c:	6979      	ldr	r1, [r7, #20]
 800449e:	3348      	adds	r3, #72	; 0x48
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	440b      	add	r3, r1
 80044a4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d122      	bne.n	80044f4 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80044ce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	3248      	adds	r2, #72	; 0x48
 80044d4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80044e8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80044ea:	6979      	ldr	r1, [r7, #20]
 80044ec:	3348      	adds	r3, #72	; 0x48
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	440b      	add	r3, r1
 80044f2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d109      	bne.n	8004510 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	43db      	mvns	r3, r3
 8004506:	401a      	ands	r2, r3
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800450e:	e007      	b.n	8004520 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	431a      	orrs	r2, r3
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d109      	bne.n	800453c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	43db      	mvns	r3, r3
 8004532:	401a      	ands	r2, r3
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800453a:	e007      	b.n	800454c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	431a      	orrs	r2, r3
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d107      	bne.n	8004564 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	431a      	orrs	r2, r3
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800456a:	f023 0201 	bic.w	r2, r3, #1
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	e006      	b.n	8004586 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
  }
}
 8004586:	4618      	mov	r0, r3
 8004588:	371c      	adds	r7, #28
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	40003400 	.word	0x40003400
 8004598:	40006400 	.word	0x40006400

0800459c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d12e      	bne.n	800460e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2202      	movs	r2, #2
 80045b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0201 	bic.w	r2, r2, #1
 80045c6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045c8:	f7ff faf4 	bl	8003bb4 <HAL_GetTick>
 80045cc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80045ce:	e012      	b.n	80045f6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80045d0:	f7ff faf0 	bl	8003bb4 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b0a      	cmp	r3, #10
 80045dc:	d90b      	bls.n	80045f6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2205      	movs	r2, #5
 80045ee:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e012      	b.n	800461c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1e5      	bne.n	80045d0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	e006      	b.n	800461c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
  }
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004624:	b480      	push	{r7}
 8004626:	b089      	sub	sp, #36	; 0x24
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004638:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004642:	7ffb      	ldrb	r3, [r7, #31]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d003      	beq.n	8004650 <HAL_CAN_AddTxMessage+0x2c>
 8004648:	7ffb      	ldrb	r3, [r7, #31]
 800464a:	2b02      	cmp	r3, #2
 800464c:	f040 80b8 	bne.w	80047c0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10a      	bne.n	8004670 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004660:	2b00      	cmp	r3, #0
 8004662:	d105      	bne.n	8004670 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 80a0 	beq.w	80047b0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	0e1b      	lsrs	r3, r3, #24
 8004674:	f003 0303 	and.w	r3, r3, #3
 8004678:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2b02      	cmp	r3, #2
 800467e:	d907      	bls.n	8004690 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e09e      	b.n	80047ce <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004690:	2201      	movs	r2, #1
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	409a      	lsls	r2, r3
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10d      	bne.n	80046be <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80046ac:	68f9      	ldr	r1, [r7, #12]
 80046ae:	6809      	ldr	r1, [r1, #0]
 80046b0:	431a      	orrs	r2, r3
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	3318      	adds	r3, #24
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	440b      	add	r3, r1
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	e00f      	b.n	80046de <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80046c8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80046ce:	68f9      	ldr	r1, [r7, #12]
 80046d0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80046d2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	3318      	adds	r3, #24
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	440b      	add	r3, r1
 80046dc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6819      	ldr	r1, [r3, #0]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	691a      	ldr	r2, [r3, #16]
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	3318      	adds	r3, #24
 80046ea:	011b      	lsls	r3, r3, #4
 80046ec:	440b      	add	r3, r1
 80046ee:	3304      	adds	r3, #4
 80046f0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	7d1b      	ldrb	r3, [r3, #20]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d111      	bne.n	800471e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	3318      	adds	r3, #24
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	4413      	add	r3, r2
 8004706:	3304      	adds	r3, #4
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	6811      	ldr	r1, [r2, #0]
 800470e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	3318      	adds	r3, #24
 8004716:	011b      	lsls	r3, r3, #4
 8004718:	440b      	add	r3, r1
 800471a:	3304      	adds	r3, #4
 800471c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3307      	adds	r3, #7
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	061a      	lsls	r2, r3, #24
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	3306      	adds	r3, #6
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	041b      	lsls	r3, r3, #16
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3305      	adds	r3, #5
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	021b      	lsls	r3, r3, #8
 8004738:	4313      	orrs	r3, r2
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	3204      	adds	r2, #4
 800473e:	7812      	ldrb	r2, [r2, #0]
 8004740:	4610      	mov	r0, r2
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	6811      	ldr	r1, [r2, #0]
 8004746:	ea43 0200 	orr.w	r2, r3, r0
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	440b      	add	r3, r1
 8004750:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004754:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3303      	adds	r3, #3
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	061a      	lsls	r2, r3, #24
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	3302      	adds	r3, #2
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	041b      	lsls	r3, r3, #16
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3301      	adds	r3, #1
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	021b      	lsls	r3, r3, #8
 8004770:	4313      	orrs	r3, r2
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	7812      	ldrb	r2, [r2, #0]
 8004776:	4610      	mov	r0, r2
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	6811      	ldr	r1, [r2, #0]
 800477c:	ea43 0200 	orr.w	r2, r3, r0
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	440b      	add	r3, r1
 8004786:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800478a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	3318      	adds	r3, #24
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	4413      	add	r3, r2
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	6811      	ldr	r1, [r2, #0]
 800479e:	f043 0201 	orr.w	r2, r3, #1
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	3318      	adds	r3, #24
 80047a6:	011b      	lsls	r3, r3, #4
 80047a8:	440b      	add	r3, r1
 80047aa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80047ac:	2300      	movs	r3, #0
 80047ae:	e00e      	b.n	80047ce <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e006      	b.n	80047ce <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
  }
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3724      	adds	r7, #36	; 0x24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80047da:	b480      	push	{r7}
 80047dc:	b085      	sub	sp, #20
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047ea:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d002      	beq.n	80047f8 <HAL_CAN_ActivateNotification+0x1e>
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d109      	bne.n	800480c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6959      	ldr	r1, [r3, #20]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004808:	2300      	movs	r3, #0
 800480a:	e006      	b.n	800481a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
  }
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
	...

08004828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004838:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <__NVIC_SetPriorityGrouping+0x40>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004844:	4013      	ands	r3, r2
 8004846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004850:	4b06      	ldr	r3, [pc, #24]	; (800486c <__NVIC_SetPriorityGrouping+0x44>)
 8004852:	4313      	orrs	r3, r2
 8004854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004856:	4a04      	ldr	r2, [pc, #16]	; (8004868 <__NVIC_SetPriorityGrouping+0x40>)
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	60d3      	str	r3, [r2, #12]
}
 800485c:	bf00      	nop
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	e000ed00 	.word	0xe000ed00
 800486c:	05fa0000 	.word	0x05fa0000

08004870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004874:	4b04      	ldr	r3, [pc, #16]	; (8004888 <__NVIC_GetPriorityGrouping+0x18>)
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	0a1b      	lsrs	r3, r3, #8
 800487a:	f003 0307 	and.w	r3, r3, #7
}
 800487e:	4618      	mov	r0, r3
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	e000ed00 	.word	0xe000ed00

0800488c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	4603      	mov	r3, r0
 8004894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800489a:	2b00      	cmp	r3, #0
 800489c:	db0b      	blt.n	80048b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800489e:	79fb      	ldrb	r3, [r7, #7]
 80048a0:	f003 021f 	and.w	r2, r3, #31
 80048a4:	4907      	ldr	r1, [pc, #28]	; (80048c4 <__NVIC_EnableIRQ+0x38>)
 80048a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048aa:	095b      	lsrs	r3, r3, #5
 80048ac:	2001      	movs	r0, #1
 80048ae:	fa00 f202 	lsl.w	r2, r0, r2
 80048b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	e000e100 	.word	0xe000e100

080048c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	4603      	mov	r3, r0
 80048d0:	6039      	str	r1, [r7, #0]
 80048d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	db0a      	blt.n	80048f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	490c      	ldr	r1, [pc, #48]	; (8004914 <__NVIC_SetPriority+0x4c>)
 80048e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048e6:	0112      	lsls	r2, r2, #4
 80048e8:	b2d2      	uxtb	r2, r2
 80048ea:	440b      	add	r3, r1
 80048ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048f0:	e00a      	b.n	8004908 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	4908      	ldr	r1, [pc, #32]	; (8004918 <__NVIC_SetPriority+0x50>)
 80048f8:	79fb      	ldrb	r3, [r7, #7]
 80048fa:	f003 030f 	and.w	r3, r3, #15
 80048fe:	3b04      	subs	r3, #4
 8004900:	0112      	lsls	r2, r2, #4
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	440b      	add	r3, r1
 8004906:	761a      	strb	r2, [r3, #24]
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	e000e100 	.word	0xe000e100
 8004918:	e000ed00 	.word	0xe000ed00

0800491c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800491c:	b480      	push	{r7}
 800491e:	b089      	sub	sp, #36	; 0x24
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f1c3 0307 	rsb	r3, r3, #7
 8004936:	2b04      	cmp	r3, #4
 8004938:	bf28      	it	cs
 800493a:	2304      	movcs	r3, #4
 800493c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	3304      	adds	r3, #4
 8004942:	2b06      	cmp	r3, #6
 8004944:	d902      	bls.n	800494c <NVIC_EncodePriority+0x30>
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	3b03      	subs	r3, #3
 800494a:	e000      	b.n	800494e <NVIC_EncodePriority+0x32>
 800494c:	2300      	movs	r3, #0
 800494e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004950:	f04f 32ff 	mov.w	r2, #4294967295
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	fa02 f303 	lsl.w	r3, r2, r3
 800495a:	43da      	mvns	r2, r3
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	401a      	ands	r2, r3
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004964:	f04f 31ff 	mov.w	r1, #4294967295
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	fa01 f303 	lsl.w	r3, r1, r3
 800496e:	43d9      	mvns	r1, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004974:	4313      	orrs	r3, r2
         );
}
 8004976:	4618      	mov	r0, r3
 8004978:	3724      	adds	r7, #36	; 0x24
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
	...

08004984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	3b01      	subs	r3, #1
 8004990:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004994:	d301      	bcc.n	800499a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004996:	2301      	movs	r3, #1
 8004998:	e00f      	b.n	80049ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800499a:	4a0a      	ldr	r2, [pc, #40]	; (80049c4 <SysTick_Config+0x40>)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3b01      	subs	r3, #1
 80049a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049a2:	210f      	movs	r1, #15
 80049a4:	f04f 30ff 	mov.w	r0, #4294967295
 80049a8:	f7ff ff8e 	bl	80048c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049ac:	4b05      	ldr	r3, [pc, #20]	; (80049c4 <SysTick_Config+0x40>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049b2:	4b04      	ldr	r3, [pc, #16]	; (80049c4 <SysTick_Config+0x40>)
 80049b4:	2207      	movs	r2, #7
 80049b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	e000e010 	.word	0xe000e010

080049c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7ff ff29 	bl	8004828 <__NVIC_SetPriorityGrouping>
}
 80049d6:	bf00      	nop
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049de:	b580      	push	{r7, lr}
 80049e0:	b086      	sub	sp, #24
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	4603      	mov	r3, r0
 80049e6:	60b9      	str	r1, [r7, #8]
 80049e8:	607a      	str	r2, [r7, #4]
 80049ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80049ec:	2300      	movs	r3, #0
 80049ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049f0:	f7ff ff3e 	bl	8004870 <__NVIC_GetPriorityGrouping>
 80049f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	68b9      	ldr	r1, [r7, #8]
 80049fa:	6978      	ldr	r0, [r7, #20]
 80049fc:	f7ff ff8e 	bl	800491c <NVIC_EncodePriority>
 8004a00:	4602      	mov	r2, r0
 8004a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a06:	4611      	mov	r1, r2
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7ff ff5d 	bl	80048c8 <__NVIC_SetPriority>
}
 8004a0e:	bf00      	nop
 8004a10:	3718      	adds	r7, #24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b082      	sub	sp, #8
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff ff31 	bl	800488c <__NVIC_EnableIRQ>
}
 8004a2a:	bf00      	nop
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b082      	sub	sp, #8
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7ff ffa2 	bl	8004984 <SysTick_Config>
 8004a40:	4603      	mov	r3, r0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
	...

08004a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b089      	sub	sp, #36	; 0x24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004a56:	2300      	movs	r3, #0
 8004a58:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004a62:	2300      	movs	r3, #0
 8004a64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004a66:	2300      	movs	r3, #0
 8004a68:	61fb      	str	r3, [r7, #28]
 8004a6a:	e175      	b.n	8004d58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	fa02 f303 	lsl.w	r3, r2, r3
 8004a74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	f040 8164 	bne.w	8004d52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d005      	beq.n	8004aa2 <HAL_GPIO_Init+0x56>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d130      	bne.n	8004b04 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	2203      	movs	r2, #3
 8004aae:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab2:	43db      	mvns	r3, r3
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ad8:	2201      	movs	r2, #1
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae0:	43db      	mvns	r3, r3
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	091b      	lsrs	r3, r3, #4
 8004aee:	f003 0201 	and.w	r2, r3, #1
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	fa02 f303 	lsl.w	r3, r2, r3
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f003 0303 	and.w	r3, r3, #3
 8004b0c:	2b03      	cmp	r3, #3
 8004b0e:	d017      	beq.n	8004b40 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	2203      	movs	r2, #3
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	43db      	mvns	r3, r3
 8004b22:	69ba      	ldr	r2, [r7, #24]
 8004b24:	4013      	ands	r3, r2
 8004b26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	fa02 f303 	lsl.w	r3, r2, r3
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f003 0303 	and.w	r3, r3, #3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d123      	bne.n	8004b94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	08da      	lsrs	r2, r3, #3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3208      	adds	r2, #8
 8004b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	220f      	movs	r2, #15
 8004b64:	fa02 f303 	lsl.w	r3, r2, r3
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	691a      	ldr	r2, [r3, #16]
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	08da      	lsrs	r2, r3, #3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3208      	adds	r2, #8
 8004b8e:	69b9      	ldr	r1, [r7, #24]
 8004b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	2203      	movs	r2, #3
 8004ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba4:	43db      	mvns	r3, r3
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f003 0203 	and.w	r2, r3, #3
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 80be 	beq.w	8004d52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bd6:	4b66      	ldr	r3, [pc, #408]	; (8004d70 <HAL_GPIO_Init+0x324>)
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bda:	4a65      	ldr	r2, [pc, #404]	; (8004d70 <HAL_GPIO_Init+0x324>)
 8004bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004be0:	6453      	str	r3, [r2, #68]	; 0x44
 8004be2:	4b63      	ldr	r3, [pc, #396]	; (8004d70 <HAL_GPIO_Init+0x324>)
 8004be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004bee:	4a61      	ldr	r2, [pc, #388]	; (8004d74 <HAL_GPIO_Init+0x328>)
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	089b      	lsrs	r3, r3, #2
 8004bf4:	3302      	adds	r3, #2
 8004bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	f003 0303 	and.w	r3, r3, #3
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	220f      	movs	r2, #15
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a58      	ldr	r2, [pc, #352]	; (8004d78 <HAL_GPIO_Init+0x32c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d037      	beq.n	8004c8a <HAL_GPIO_Init+0x23e>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a57      	ldr	r2, [pc, #348]	; (8004d7c <HAL_GPIO_Init+0x330>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d031      	beq.n	8004c86 <HAL_GPIO_Init+0x23a>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a56      	ldr	r2, [pc, #344]	; (8004d80 <HAL_GPIO_Init+0x334>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d02b      	beq.n	8004c82 <HAL_GPIO_Init+0x236>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a55      	ldr	r2, [pc, #340]	; (8004d84 <HAL_GPIO_Init+0x338>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d025      	beq.n	8004c7e <HAL_GPIO_Init+0x232>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a54      	ldr	r2, [pc, #336]	; (8004d88 <HAL_GPIO_Init+0x33c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d01f      	beq.n	8004c7a <HAL_GPIO_Init+0x22e>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a53      	ldr	r2, [pc, #332]	; (8004d8c <HAL_GPIO_Init+0x340>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d019      	beq.n	8004c76 <HAL_GPIO_Init+0x22a>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a52      	ldr	r2, [pc, #328]	; (8004d90 <HAL_GPIO_Init+0x344>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d013      	beq.n	8004c72 <HAL_GPIO_Init+0x226>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a51      	ldr	r2, [pc, #324]	; (8004d94 <HAL_GPIO_Init+0x348>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00d      	beq.n	8004c6e <HAL_GPIO_Init+0x222>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a50      	ldr	r2, [pc, #320]	; (8004d98 <HAL_GPIO_Init+0x34c>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d007      	beq.n	8004c6a <HAL_GPIO_Init+0x21e>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a4f      	ldr	r2, [pc, #316]	; (8004d9c <HAL_GPIO_Init+0x350>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d101      	bne.n	8004c66 <HAL_GPIO_Init+0x21a>
 8004c62:	2309      	movs	r3, #9
 8004c64:	e012      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c66:	230a      	movs	r3, #10
 8004c68:	e010      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c6a:	2308      	movs	r3, #8
 8004c6c:	e00e      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c6e:	2307      	movs	r3, #7
 8004c70:	e00c      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c72:	2306      	movs	r3, #6
 8004c74:	e00a      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c76:	2305      	movs	r3, #5
 8004c78:	e008      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c7a:	2304      	movs	r3, #4
 8004c7c:	e006      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e004      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c82:	2302      	movs	r3, #2
 8004c84:	e002      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c86:	2301      	movs	r3, #1
 8004c88:	e000      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	69fa      	ldr	r2, [r7, #28]
 8004c8e:	f002 0203 	and.w	r2, r2, #3
 8004c92:	0092      	lsls	r2, r2, #2
 8004c94:	4093      	lsls	r3, r2
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004c9c:	4935      	ldr	r1, [pc, #212]	; (8004d74 <HAL_GPIO_Init+0x328>)
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	089b      	lsrs	r3, r3, #2
 8004ca2:	3302      	adds	r3, #2
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004caa:	4b3d      	ldr	r3, [pc, #244]	; (8004da0 <HAL_GPIO_Init+0x354>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	43db      	mvns	r3, r3
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cce:	4a34      	ldr	r2, [pc, #208]	; (8004da0 <HAL_GPIO_Init+0x354>)
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004cd4:	4b32      	ldr	r3, [pc, #200]	; (8004da0 <HAL_GPIO_Init+0x354>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004cf8:	4a29      	ldr	r2, [pc, #164]	; (8004da0 <HAL_GPIO_Init+0x354>)
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004cfe:	4b28      	ldr	r3, [pc, #160]	; (8004da0 <HAL_GPIO_Init+0x354>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	43db      	mvns	r3, r3
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d22:	4a1f      	ldr	r2, [pc, #124]	; (8004da0 <HAL_GPIO_Init+0x354>)
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d28:	4b1d      	ldr	r3, [pc, #116]	; (8004da0 <HAL_GPIO_Init+0x354>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	43db      	mvns	r3, r3
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	4013      	ands	r3, r2
 8004d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d4c:	4a14      	ldr	r2, [pc, #80]	; (8004da0 <HAL_GPIO_Init+0x354>)
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	3301      	adds	r3, #1
 8004d56:	61fb      	str	r3, [r7, #28]
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	2b0f      	cmp	r3, #15
 8004d5c:	f67f ae86 	bls.w	8004a6c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004d60:	bf00      	nop
 8004d62:	bf00      	nop
 8004d64:	3724      	adds	r7, #36	; 0x24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40023800 	.word	0x40023800
 8004d74:	40013800 	.word	0x40013800
 8004d78:	40020000 	.word	0x40020000
 8004d7c:	40020400 	.word	0x40020400
 8004d80:	40020800 	.word	0x40020800
 8004d84:	40020c00 	.word	0x40020c00
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	40021400 	.word	0x40021400
 8004d90:	40021800 	.word	0x40021800
 8004d94:	40021c00 	.word	0x40021c00
 8004d98:	40022000 	.word	0x40022000
 8004d9c:	40022400 	.word	0x40022400
 8004da0:	40013c00 	.word	0x40013c00

08004da4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691a      	ldr	r2, [r3, #16]
 8004db4:	887b      	ldrh	r3, [r7, #2]
 8004db6:	4013      	ands	r3, r2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	73fb      	strb	r3, [r7, #15]
 8004dc0:	e001      	b.n	8004dc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	807b      	strh	r3, [r7, #2]
 8004de0:	4613      	mov	r3, r2
 8004de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004de4:	787b      	ldrb	r3, [r7, #1]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dea:	887a      	ldrh	r2, [r7, #2]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004df0:	e003      	b.n	8004dfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004df2:	887b      	ldrh	r3, [r7, #2]
 8004df4:	041a      	lsls	r2, r3, #16
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	619a      	str	r2, [r3, #24]
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
	...

08004e08 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004e12:	4b23      	ldr	r3, [pc, #140]	; (8004ea0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	4a22      	ldr	r2, [pc, #136]	; (8004ea0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e1e:	4b20      	ldr	r3, [pc, #128]	; (8004ea0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e26:	603b      	str	r3, [r7, #0]
 8004e28:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004e2a:	4b1e      	ldr	r3, [pc, #120]	; (8004ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a1d      	ldr	r2, [pc, #116]	; (8004ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e34:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e36:	f7fe febd 	bl	8003bb4 <HAL_GetTick>
 8004e3a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e3c:	e009      	b.n	8004e52 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e3e:	f7fe feb9 	bl	8003bb4 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e4c:	d901      	bls.n	8004e52 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e022      	b.n	8004e98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e52:	4b14      	ldr	r3, [pc, #80]	; (8004ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e5e:	d1ee      	bne.n	8004e3e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004e60:	4b10      	ldr	r3, [pc, #64]	; (8004ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a0f      	ldr	r2, [pc, #60]	; (8004ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e6a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e6c:	f7fe fea2 	bl	8003bb4 <HAL_GetTick>
 8004e70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e72:	e009      	b.n	8004e88 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e74:	f7fe fe9e 	bl	8003bb4 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e82:	d901      	bls.n	8004e88 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e007      	b.n	8004e98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e88:	4b06      	ldr	r3, [pc, #24]	; (8004ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e94:	d1ee      	bne.n	8004e74 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	40007000 	.word	0x40007000

08004ea8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e29b      	b.n	80053f6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f000 8087 	beq.w	8004fda <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ecc:	4b96      	ldr	r3, [pc, #600]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f003 030c 	and.w	r3, r3, #12
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d00c      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ed8:	4b93      	ldr	r3, [pc, #588]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f003 030c 	and.w	r3, r3, #12
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d112      	bne.n	8004f0a <HAL_RCC_OscConfig+0x62>
 8004ee4:	4b90      	ldr	r3, [pc, #576]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ef0:	d10b      	bne.n	8004f0a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ef2:	4b8d      	ldr	r3, [pc, #564]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d06c      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x130>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d168      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e275      	b.n	80053f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f12:	d106      	bne.n	8004f22 <HAL_RCC_OscConfig+0x7a>
 8004f14:	4b84      	ldr	r3, [pc, #528]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a83      	ldr	r2, [pc, #524]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8004f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f1e:	6013      	str	r3, [r2, #0]
 8004f20:	e02e      	b.n	8004f80 <HAL_RCC_OscConfig+0xd8>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10c      	bne.n	8004f44 <HAL_RCC_OscConfig+0x9c>
 8004f2a:	4b7f      	ldr	r3, [pc, #508]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a7e      	ldr	r2, [pc, #504]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8004f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f34:	6013      	str	r3, [r2, #0]
 8004f36:	4b7c      	ldr	r3, [pc, #496]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a7b      	ldr	r2, [pc, #492]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8004f3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	e01d      	b.n	8004f80 <HAL_RCC_OscConfig+0xd8>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f4c:	d10c      	bne.n	8004f68 <HAL_RCC_OscConfig+0xc0>
 8004f4e:	4b76      	ldr	r3, [pc, #472]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a75      	ldr	r2, [pc, #468]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8004f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	4b73      	ldr	r3, [pc, #460]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a72      	ldr	r2, [pc, #456]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8004f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	e00b      	b.n	8004f80 <HAL_RCC_OscConfig+0xd8>
 8004f68:	4b6f      	ldr	r3, [pc, #444]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a6e      	ldr	r2, [pc, #440]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8004f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f72:	6013      	str	r3, [r2, #0]
 8004f74:	4b6c      	ldr	r3, [pc, #432]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a6b      	ldr	r2, [pc, #428]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8004f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d013      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f88:	f7fe fe14 	bl	8003bb4 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f90:	f7fe fe10 	bl	8003bb4 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b64      	cmp	r3, #100	; 0x64
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e229      	b.n	80053f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fa2:	4b61      	ldr	r3, [pc, #388]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0f0      	beq.n	8004f90 <HAL_RCC_OscConfig+0xe8>
 8004fae:	e014      	b.n	8004fda <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb0:	f7fe fe00 	bl	8003bb4 <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fb8:	f7fe fdfc 	bl	8003bb4 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b64      	cmp	r3, #100	; 0x64
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e215      	b.n	80053f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fca:	4b57      	ldr	r3, [pc, #348]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1f0      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x110>
 8004fd6:	e000      	b.n	8004fda <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d069      	beq.n	80050ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fe6:	4b50      	ldr	r3, [pc, #320]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f003 030c 	and.w	r3, r3, #12
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00b      	beq.n	800500a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ff2:	4b4d      	ldr	r3, [pc, #308]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f003 030c 	and.w	r3, r3, #12
 8004ffa:	2b08      	cmp	r3, #8
 8004ffc:	d11c      	bne.n	8005038 <HAL_RCC_OscConfig+0x190>
 8004ffe:	4b4a      	ldr	r3, [pc, #296]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d116      	bne.n	8005038 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800500a:	4b47      	ldr	r3, [pc, #284]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d005      	beq.n	8005022 <HAL_RCC_OscConfig+0x17a>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d001      	beq.n	8005022 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e1e9      	b.n	80053f6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005022:	4b41      	ldr	r3, [pc, #260]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	493d      	ldr	r1, [pc, #244]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8005032:	4313      	orrs	r3, r2
 8005034:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005036:	e040      	b.n	80050ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d023      	beq.n	8005088 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005040:	4b39      	ldr	r3, [pc, #228]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a38      	ldr	r2, [pc, #224]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8005046:	f043 0301 	orr.w	r3, r3, #1
 800504a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504c:	f7fe fdb2 	bl	8003bb4 <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005054:	f7fe fdae 	bl	8003bb4 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e1c7      	b.n	80053f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005066:	4b30      	ldr	r3, [pc, #192]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0f0      	beq.n	8005054 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005072:	4b2d      	ldr	r3, [pc, #180]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	4929      	ldr	r1, [pc, #164]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8005082:	4313      	orrs	r3, r2
 8005084:	600b      	str	r3, [r1, #0]
 8005086:	e018      	b.n	80050ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005088:	4b27      	ldr	r3, [pc, #156]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a26      	ldr	r2, [pc, #152]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 800508e:	f023 0301 	bic.w	r3, r3, #1
 8005092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005094:	f7fe fd8e 	bl	8003bb4 <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800509a:	e008      	b.n	80050ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800509c:	f7fe fd8a 	bl	8003bb4 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e1a3      	b.n	80053f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ae:	4b1e      	ldr	r3, [pc, #120]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1f0      	bne.n	800509c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0308 	and.w	r3, r3, #8
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d038      	beq.n	8005138 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d019      	beq.n	8005102 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050ce:	4b16      	ldr	r3, [pc, #88]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 80050d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050d2:	4a15      	ldr	r2, [pc, #84]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 80050d4:	f043 0301 	orr.w	r3, r3, #1
 80050d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050da:	f7fe fd6b 	bl	8003bb4 <HAL_GetTick>
 80050de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050e0:	e008      	b.n	80050f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050e2:	f7fe fd67 	bl	8003bb4 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e180      	b.n	80053f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050f4:	4b0c      	ldr	r3, [pc, #48]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 80050f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0f0      	beq.n	80050e2 <HAL_RCC_OscConfig+0x23a>
 8005100:	e01a      	b.n	8005138 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005102:	4b09      	ldr	r3, [pc, #36]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8005104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005106:	4a08      	ldr	r2, [pc, #32]	; (8005128 <HAL_RCC_OscConfig+0x280>)
 8005108:	f023 0301 	bic.w	r3, r3, #1
 800510c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800510e:	f7fe fd51 	bl	8003bb4 <HAL_GetTick>
 8005112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005114:	e00a      	b.n	800512c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005116:	f7fe fd4d 	bl	8003bb4 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d903      	bls.n	800512c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e166      	b.n	80053f6 <HAL_RCC_OscConfig+0x54e>
 8005128:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800512c:	4b92      	ldr	r3, [pc, #584]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 800512e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1ee      	bne.n	8005116 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 80a4 	beq.w	800528e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005146:	4b8c      	ldr	r3, [pc, #560]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 8005148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10d      	bne.n	800516e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005152:	4b89      	ldr	r3, [pc, #548]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	4a88      	ldr	r2, [pc, #544]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 8005158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800515c:	6413      	str	r3, [r2, #64]	; 0x40
 800515e:	4b86      	ldr	r3, [pc, #536]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005166:	60bb      	str	r3, [r7, #8]
 8005168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800516a:	2301      	movs	r3, #1
 800516c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800516e:	4b83      	ldr	r3, [pc, #524]	; (800537c <HAL_RCC_OscConfig+0x4d4>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005176:	2b00      	cmp	r3, #0
 8005178:	d118      	bne.n	80051ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800517a:	4b80      	ldr	r3, [pc, #512]	; (800537c <HAL_RCC_OscConfig+0x4d4>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a7f      	ldr	r2, [pc, #508]	; (800537c <HAL_RCC_OscConfig+0x4d4>)
 8005180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005186:	f7fe fd15 	bl	8003bb4 <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800518c:	e008      	b.n	80051a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800518e:	f7fe fd11 	bl	8003bb4 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b64      	cmp	r3, #100	; 0x64
 800519a:	d901      	bls.n	80051a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e12a      	b.n	80053f6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051a0:	4b76      	ldr	r3, [pc, #472]	; (800537c <HAL_RCC_OscConfig+0x4d4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0f0      	beq.n	800518e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d106      	bne.n	80051c2 <HAL_RCC_OscConfig+0x31a>
 80051b4:	4b70      	ldr	r3, [pc, #448]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 80051b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b8:	4a6f      	ldr	r2, [pc, #444]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 80051ba:	f043 0301 	orr.w	r3, r3, #1
 80051be:	6713      	str	r3, [r2, #112]	; 0x70
 80051c0:	e02d      	b.n	800521e <HAL_RCC_OscConfig+0x376>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10c      	bne.n	80051e4 <HAL_RCC_OscConfig+0x33c>
 80051ca:	4b6b      	ldr	r3, [pc, #428]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 80051cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ce:	4a6a      	ldr	r2, [pc, #424]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 80051d0:	f023 0301 	bic.w	r3, r3, #1
 80051d4:	6713      	str	r3, [r2, #112]	; 0x70
 80051d6:	4b68      	ldr	r3, [pc, #416]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 80051d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051da:	4a67      	ldr	r2, [pc, #412]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 80051dc:	f023 0304 	bic.w	r3, r3, #4
 80051e0:	6713      	str	r3, [r2, #112]	; 0x70
 80051e2:	e01c      	b.n	800521e <HAL_RCC_OscConfig+0x376>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	2b05      	cmp	r3, #5
 80051ea:	d10c      	bne.n	8005206 <HAL_RCC_OscConfig+0x35e>
 80051ec:	4b62      	ldr	r3, [pc, #392]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 80051ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f0:	4a61      	ldr	r2, [pc, #388]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 80051f2:	f043 0304 	orr.w	r3, r3, #4
 80051f6:	6713      	str	r3, [r2, #112]	; 0x70
 80051f8:	4b5f      	ldr	r3, [pc, #380]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 80051fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fc:	4a5e      	ldr	r2, [pc, #376]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 80051fe:	f043 0301 	orr.w	r3, r3, #1
 8005202:	6713      	str	r3, [r2, #112]	; 0x70
 8005204:	e00b      	b.n	800521e <HAL_RCC_OscConfig+0x376>
 8005206:	4b5c      	ldr	r3, [pc, #368]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 8005208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520a:	4a5b      	ldr	r2, [pc, #364]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 800520c:	f023 0301 	bic.w	r3, r3, #1
 8005210:	6713      	str	r3, [r2, #112]	; 0x70
 8005212:	4b59      	ldr	r3, [pc, #356]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 8005214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005216:	4a58      	ldr	r2, [pc, #352]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 8005218:	f023 0304 	bic.w	r3, r3, #4
 800521c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d015      	beq.n	8005252 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005226:	f7fe fcc5 	bl	8003bb4 <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800522c:	e00a      	b.n	8005244 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800522e:	f7fe fcc1 	bl	8003bb4 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	f241 3288 	movw	r2, #5000	; 0x1388
 800523c:	4293      	cmp	r3, r2
 800523e:	d901      	bls.n	8005244 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e0d8      	b.n	80053f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005244:	4b4c      	ldr	r3, [pc, #304]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 8005246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0ee      	beq.n	800522e <HAL_RCC_OscConfig+0x386>
 8005250:	e014      	b.n	800527c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005252:	f7fe fcaf 	bl	8003bb4 <HAL_GetTick>
 8005256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005258:	e00a      	b.n	8005270 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800525a:	f7fe fcab 	bl	8003bb4 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	f241 3288 	movw	r2, #5000	; 0x1388
 8005268:	4293      	cmp	r3, r2
 800526a:	d901      	bls.n	8005270 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e0c2      	b.n	80053f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005270:	4b41      	ldr	r3, [pc, #260]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 8005272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1ee      	bne.n	800525a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800527c:	7dfb      	ldrb	r3, [r7, #23]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d105      	bne.n	800528e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005282:	4b3d      	ldr	r3, [pc, #244]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	4a3c      	ldr	r2, [pc, #240]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 8005288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800528c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 80ae 	beq.w	80053f4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005298:	4b37      	ldr	r3, [pc, #220]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f003 030c 	and.w	r3, r3, #12
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d06d      	beq.n	8005380 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d14b      	bne.n	8005344 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ac:	4b32      	ldr	r3, [pc, #200]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a31      	ldr	r2, [pc, #196]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 80052b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b8:	f7fe fc7c 	bl	8003bb4 <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c0:	f7fe fc78 	bl	8003bb4 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e091      	b.n	80053f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052d2:	4b29      	ldr	r3, [pc, #164]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1f0      	bne.n	80052c0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	69da      	ldr	r2, [r3, #28]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	431a      	orrs	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	019b      	lsls	r3, r3, #6
 80052ee:	431a      	orrs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f4:	085b      	lsrs	r3, r3, #1
 80052f6:	3b01      	subs	r3, #1
 80052f8:	041b      	lsls	r3, r3, #16
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005300:	061b      	lsls	r3, r3, #24
 8005302:	431a      	orrs	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005308:	071b      	lsls	r3, r3, #28
 800530a:	491b      	ldr	r1, [pc, #108]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 800530c:	4313      	orrs	r3, r2
 800530e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005310:	4b19      	ldr	r3, [pc, #100]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a18      	ldr	r2, [pc, #96]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 8005316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800531a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800531c:	f7fe fc4a 	bl	8003bb4 <HAL_GetTick>
 8005320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005322:	e008      	b.n	8005336 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005324:	f7fe fc46 	bl	8003bb4 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e05f      	b.n	80053f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005336:	4b10      	ldr	r3, [pc, #64]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d0f0      	beq.n	8005324 <HAL_RCC_OscConfig+0x47c>
 8005342:	e057      	b.n	80053f4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005344:	4b0c      	ldr	r3, [pc, #48]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a0b      	ldr	r2, [pc, #44]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 800534a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800534e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005350:	f7fe fc30 	bl	8003bb4 <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005358:	f7fe fc2c 	bl	8003bb4 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e045      	b.n	80053f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800536a:	4b03      	ldr	r3, [pc, #12]	; (8005378 <HAL_RCC_OscConfig+0x4d0>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1f0      	bne.n	8005358 <HAL_RCC_OscConfig+0x4b0>
 8005376:	e03d      	b.n	80053f4 <HAL_RCC_OscConfig+0x54c>
 8005378:	40023800 	.word	0x40023800
 800537c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005380:	4b1f      	ldr	r3, [pc, #124]	; (8005400 <HAL_RCC_OscConfig+0x558>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d030      	beq.n	80053f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005398:	429a      	cmp	r2, r3
 800539a:	d129      	bne.n	80053f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d122      	bne.n	80053f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053b0:	4013      	ands	r3, r2
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053b6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d119      	bne.n	80053f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c6:	085b      	lsrs	r3, r3, #1
 80053c8:	3b01      	subs	r3, #1
 80053ca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d10f      	bne.n	80053f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053da:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80053dc:	429a      	cmp	r2, r3
 80053de:	d107      	bne.n	80053f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ea:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d001      	beq.n	80053f4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e000      	b.n	80053f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3718      	adds	r7, #24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	40023800 	.word	0x40023800

08005404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800540e:	2300      	movs	r3, #0
 8005410:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e0d0      	b.n	80055be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800541c:	4b6a      	ldr	r3, [pc, #424]	; (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 030f 	and.w	r3, r3, #15
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d910      	bls.n	800544c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800542a:	4b67      	ldr	r3, [pc, #412]	; (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f023 020f 	bic.w	r2, r3, #15
 8005432:	4965      	ldr	r1, [pc, #404]	; (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	4313      	orrs	r3, r2
 8005438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800543a:	4b63      	ldr	r3, [pc, #396]	; (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 030f 	and.w	r3, r3, #15
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	429a      	cmp	r2, r3
 8005446:	d001      	beq.n	800544c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e0b8      	b.n	80055be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d020      	beq.n	800549a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0304 	and.w	r3, r3, #4
 8005460:	2b00      	cmp	r3, #0
 8005462:	d005      	beq.n	8005470 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005464:	4b59      	ldr	r3, [pc, #356]	; (80055cc <HAL_RCC_ClockConfig+0x1c8>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	4a58      	ldr	r2, [pc, #352]	; (80055cc <HAL_RCC_ClockConfig+0x1c8>)
 800546a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800546e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0308 	and.w	r3, r3, #8
 8005478:	2b00      	cmp	r3, #0
 800547a:	d005      	beq.n	8005488 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800547c:	4b53      	ldr	r3, [pc, #332]	; (80055cc <HAL_RCC_ClockConfig+0x1c8>)
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	4a52      	ldr	r2, [pc, #328]	; (80055cc <HAL_RCC_ClockConfig+0x1c8>)
 8005482:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005486:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005488:	4b50      	ldr	r3, [pc, #320]	; (80055cc <HAL_RCC_ClockConfig+0x1c8>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	494d      	ldr	r1, [pc, #308]	; (80055cc <HAL_RCC_ClockConfig+0x1c8>)
 8005496:	4313      	orrs	r3, r2
 8005498:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d040      	beq.n	8005528 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d107      	bne.n	80054be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ae:	4b47      	ldr	r3, [pc, #284]	; (80055cc <HAL_RCC_ClockConfig+0x1c8>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d115      	bne.n	80054e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e07f      	b.n	80055be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d107      	bne.n	80054d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054c6:	4b41      	ldr	r3, [pc, #260]	; (80055cc <HAL_RCC_ClockConfig+0x1c8>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d109      	bne.n	80054e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e073      	b.n	80055be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054d6:	4b3d      	ldr	r3, [pc, #244]	; (80055cc <HAL_RCC_ClockConfig+0x1c8>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e06b      	b.n	80055be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054e6:	4b39      	ldr	r3, [pc, #228]	; (80055cc <HAL_RCC_ClockConfig+0x1c8>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f023 0203 	bic.w	r2, r3, #3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	4936      	ldr	r1, [pc, #216]	; (80055cc <HAL_RCC_ClockConfig+0x1c8>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054f8:	f7fe fb5c 	bl	8003bb4 <HAL_GetTick>
 80054fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054fe:	e00a      	b.n	8005516 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005500:	f7fe fb58 	bl	8003bb4 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	f241 3288 	movw	r2, #5000	; 0x1388
 800550e:	4293      	cmp	r3, r2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e053      	b.n	80055be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005516:	4b2d      	ldr	r3, [pc, #180]	; (80055cc <HAL_RCC_ClockConfig+0x1c8>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 020c 	and.w	r2, r3, #12
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	429a      	cmp	r2, r3
 8005526:	d1eb      	bne.n	8005500 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005528:	4b27      	ldr	r3, [pc, #156]	; (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 030f 	and.w	r3, r3, #15
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	429a      	cmp	r2, r3
 8005534:	d210      	bcs.n	8005558 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005536:	4b24      	ldr	r3, [pc, #144]	; (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f023 020f 	bic.w	r2, r3, #15
 800553e:	4922      	ldr	r1, [pc, #136]	; (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	4313      	orrs	r3, r2
 8005544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005546:	4b20      	ldr	r3, [pc, #128]	; (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 030f 	and.w	r3, r3, #15
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	429a      	cmp	r2, r3
 8005552:	d001      	beq.n	8005558 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e032      	b.n	80055be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	2b00      	cmp	r3, #0
 8005562:	d008      	beq.n	8005576 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005564:	4b19      	ldr	r3, [pc, #100]	; (80055cc <HAL_RCC_ClockConfig+0x1c8>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	4916      	ldr	r1, [pc, #88]	; (80055cc <HAL_RCC_ClockConfig+0x1c8>)
 8005572:	4313      	orrs	r3, r2
 8005574:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b00      	cmp	r3, #0
 8005580:	d009      	beq.n	8005596 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005582:	4b12      	ldr	r3, [pc, #72]	; (80055cc <HAL_RCC_ClockConfig+0x1c8>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	490e      	ldr	r1, [pc, #56]	; (80055cc <HAL_RCC_ClockConfig+0x1c8>)
 8005592:	4313      	orrs	r3, r2
 8005594:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005596:	f000 f821 	bl	80055dc <HAL_RCC_GetSysClockFreq>
 800559a:	4602      	mov	r2, r0
 800559c:	4b0b      	ldr	r3, [pc, #44]	; (80055cc <HAL_RCC_ClockConfig+0x1c8>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	091b      	lsrs	r3, r3, #4
 80055a2:	f003 030f 	and.w	r3, r3, #15
 80055a6:	490a      	ldr	r1, [pc, #40]	; (80055d0 <HAL_RCC_ClockConfig+0x1cc>)
 80055a8:	5ccb      	ldrb	r3, [r1, r3]
 80055aa:	fa22 f303 	lsr.w	r3, r2, r3
 80055ae:	4a09      	ldr	r2, [pc, #36]	; (80055d4 <HAL_RCC_ClockConfig+0x1d0>)
 80055b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80055b2:	4b09      	ldr	r3, [pc, #36]	; (80055d8 <HAL_RCC_ClockConfig+0x1d4>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fe fab8 	bl	8003b2c <HAL_InitTick>

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	40023c00 	.word	0x40023c00
 80055cc:	40023800 	.word	0x40023800
 80055d0:	08009d9c 	.word	0x08009d9c
 80055d4:	20000000 	.word	0x20000000
 80055d8:	20000004 	.word	0x20000004

080055dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055e0:	b090      	sub	sp, #64	; 0x40
 80055e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80055e4:	2300      	movs	r3, #0
 80055e6:	637b      	str	r3, [r7, #52]	; 0x34
 80055e8:	2300      	movs	r3, #0
 80055ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055ec:	2300      	movs	r3, #0
 80055ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80055f0:	2300      	movs	r3, #0
 80055f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055f4:	4b59      	ldr	r3, [pc, #356]	; (800575c <HAL_RCC_GetSysClockFreq+0x180>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f003 030c 	and.w	r3, r3, #12
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d00d      	beq.n	800561c <HAL_RCC_GetSysClockFreq+0x40>
 8005600:	2b08      	cmp	r3, #8
 8005602:	f200 80a1 	bhi.w	8005748 <HAL_RCC_GetSysClockFreq+0x16c>
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <HAL_RCC_GetSysClockFreq+0x34>
 800560a:	2b04      	cmp	r3, #4
 800560c:	d003      	beq.n	8005616 <HAL_RCC_GetSysClockFreq+0x3a>
 800560e:	e09b      	b.n	8005748 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005610:	4b53      	ldr	r3, [pc, #332]	; (8005760 <HAL_RCC_GetSysClockFreq+0x184>)
 8005612:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005614:	e09b      	b.n	800574e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005616:	4b53      	ldr	r3, [pc, #332]	; (8005764 <HAL_RCC_GetSysClockFreq+0x188>)
 8005618:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800561a:	e098      	b.n	800574e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800561c:	4b4f      	ldr	r3, [pc, #316]	; (800575c <HAL_RCC_GetSysClockFreq+0x180>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005624:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005626:	4b4d      	ldr	r3, [pc, #308]	; (800575c <HAL_RCC_GetSysClockFreq+0x180>)
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d028      	beq.n	8005684 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005632:	4b4a      	ldr	r3, [pc, #296]	; (800575c <HAL_RCC_GetSysClockFreq+0x180>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	099b      	lsrs	r3, r3, #6
 8005638:	2200      	movs	r2, #0
 800563a:	623b      	str	r3, [r7, #32]
 800563c:	627a      	str	r2, [r7, #36]	; 0x24
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005644:	2100      	movs	r1, #0
 8005646:	4b47      	ldr	r3, [pc, #284]	; (8005764 <HAL_RCC_GetSysClockFreq+0x188>)
 8005648:	fb03 f201 	mul.w	r2, r3, r1
 800564c:	2300      	movs	r3, #0
 800564e:	fb00 f303 	mul.w	r3, r0, r3
 8005652:	4413      	add	r3, r2
 8005654:	4a43      	ldr	r2, [pc, #268]	; (8005764 <HAL_RCC_GetSysClockFreq+0x188>)
 8005656:	fba0 1202 	umull	r1, r2, r0, r2
 800565a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800565c:	460a      	mov	r2, r1
 800565e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005662:	4413      	add	r3, r2
 8005664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005668:	2200      	movs	r2, #0
 800566a:	61bb      	str	r3, [r7, #24]
 800566c:	61fa      	str	r2, [r7, #28]
 800566e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005672:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005676:	f7fa fde7 	bl	8000248 <__aeabi_uldivmod>
 800567a:	4602      	mov	r2, r0
 800567c:	460b      	mov	r3, r1
 800567e:	4613      	mov	r3, r2
 8005680:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005682:	e053      	b.n	800572c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005684:	4b35      	ldr	r3, [pc, #212]	; (800575c <HAL_RCC_GetSysClockFreq+0x180>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	099b      	lsrs	r3, r3, #6
 800568a:	2200      	movs	r2, #0
 800568c:	613b      	str	r3, [r7, #16]
 800568e:	617a      	str	r2, [r7, #20]
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005696:	f04f 0b00 	mov.w	fp, #0
 800569a:	4652      	mov	r2, sl
 800569c:	465b      	mov	r3, fp
 800569e:	f04f 0000 	mov.w	r0, #0
 80056a2:	f04f 0100 	mov.w	r1, #0
 80056a6:	0159      	lsls	r1, r3, #5
 80056a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056ac:	0150      	lsls	r0, r2, #5
 80056ae:	4602      	mov	r2, r0
 80056b0:	460b      	mov	r3, r1
 80056b2:	ebb2 080a 	subs.w	r8, r2, sl
 80056b6:	eb63 090b 	sbc.w	r9, r3, fp
 80056ba:	f04f 0200 	mov.w	r2, #0
 80056be:	f04f 0300 	mov.w	r3, #0
 80056c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80056c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80056ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80056ce:	ebb2 0408 	subs.w	r4, r2, r8
 80056d2:	eb63 0509 	sbc.w	r5, r3, r9
 80056d6:	f04f 0200 	mov.w	r2, #0
 80056da:	f04f 0300 	mov.w	r3, #0
 80056de:	00eb      	lsls	r3, r5, #3
 80056e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056e4:	00e2      	lsls	r2, r4, #3
 80056e6:	4614      	mov	r4, r2
 80056e8:	461d      	mov	r5, r3
 80056ea:	eb14 030a 	adds.w	r3, r4, sl
 80056ee:	603b      	str	r3, [r7, #0]
 80056f0:	eb45 030b 	adc.w	r3, r5, fp
 80056f4:	607b      	str	r3, [r7, #4]
 80056f6:	f04f 0200 	mov.w	r2, #0
 80056fa:	f04f 0300 	mov.w	r3, #0
 80056fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005702:	4629      	mov	r1, r5
 8005704:	028b      	lsls	r3, r1, #10
 8005706:	4621      	mov	r1, r4
 8005708:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800570c:	4621      	mov	r1, r4
 800570e:	028a      	lsls	r2, r1, #10
 8005710:	4610      	mov	r0, r2
 8005712:	4619      	mov	r1, r3
 8005714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005716:	2200      	movs	r2, #0
 8005718:	60bb      	str	r3, [r7, #8]
 800571a:	60fa      	str	r2, [r7, #12]
 800571c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005720:	f7fa fd92 	bl	8000248 <__aeabi_uldivmod>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	4613      	mov	r3, r2
 800572a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800572c:	4b0b      	ldr	r3, [pc, #44]	; (800575c <HAL_RCC_GetSysClockFreq+0x180>)
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	0c1b      	lsrs	r3, r3, #16
 8005732:	f003 0303 	and.w	r3, r3, #3
 8005736:	3301      	adds	r3, #1
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800573c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	fbb2 f3f3 	udiv	r3, r2, r3
 8005744:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005746:	e002      	b.n	800574e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005748:	4b05      	ldr	r3, [pc, #20]	; (8005760 <HAL_RCC_GetSysClockFreq+0x184>)
 800574a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800574c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800574e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005750:	4618      	mov	r0, r3
 8005752:	3740      	adds	r7, #64	; 0x40
 8005754:	46bd      	mov	sp, r7
 8005756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800575a:	bf00      	nop
 800575c:	40023800 	.word	0x40023800
 8005760:	00f42400 	.word	0x00f42400
 8005764:	017d7840 	.word	0x017d7840

08005768 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005768:	b480      	push	{r7}
 800576a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800576c:	4b03      	ldr	r3, [pc, #12]	; (800577c <HAL_RCC_GetHCLKFreq+0x14>)
 800576e:	681b      	ldr	r3, [r3, #0]
}
 8005770:	4618      	mov	r0, r3
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	20000000 	.word	0x20000000

08005780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005784:	f7ff fff0 	bl	8005768 <HAL_RCC_GetHCLKFreq>
 8005788:	4602      	mov	r2, r0
 800578a:	4b05      	ldr	r3, [pc, #20]	; (80057a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	0a9b      	lsrs	r3, r3, #10
 8005790:	f003 0307 	and.w	r3, r3, #7
 8005794:	4903      	ldr	r1, [pc, #12]	; (80057a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005796:	5ccb      	ldrb	r3, [r1, r3]
 8005798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800579c:	4618      	mov	r0, r3
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	40023800 	.word	0x40023800
 80057a4:	08009dac 	.word	0x08009dac

080057a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80057ac:	f7ff ffdc 	bl	8005768 <HAL_RCC_GetHCLKFreq>
 80057b0:	4602      	mov	r2, r0
 80057b2:	4b05      	ldr	r3, [pc, #20]	; (80057c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	0b5b      	lsrs	r3, r3, #13
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	4903      	ldr	r1, [pc, #12]	; (80057cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80057be:	5ccb      	ldrb	r3, [r1, r3]
 80057c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	40023800 	.word	0x40023800
 80057cc:	08009dac 	.word	0x08009dac

080057d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b088      	sub	sp, #32
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80057d8:	2300      	movs	r3, #0
 80057da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80057dc:	2300      	movs	r3, #0
 80057de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80057e0:	2300      	movs	r3, #0
 80057e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80057e4:	2300      	movs	r3, #0
 80057e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80057e8:	2300      	movs	r3, #0
 80057ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d012      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80057f8:	4b69      	ldr	r3, [pc, #420]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	4a68      	ldr	r2, [pc, #416]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005802:	6093      	str	r3, [r2, #8]
 8005804:	4b66      	ldr	r3, [pc, #408]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800580c:	4964      	ldr	r1, [pc, #400]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800580e:	4313      	orrs	r3, r2
 8005810:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800581a:	2301      	movs	r3, #1
 800581c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d017      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800582a:	4b5d      	ldr	r3, [pc, #372]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800582c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005830:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005838:	4959      	ldr	r1, [pc, #356]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800583a:	4313      	orrs	r3, r2
 800583c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005844:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005848:	d101      	bne.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800584a:	2301      	movs	r3, #1
 800584c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005856:	2301      	movs	r3, #1
 8005858:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d017      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005866:	4b4e      	ldr	r3, [pc, #312]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005868:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800586c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005874:	494a      	ldr	r1, [pc, #296]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005876:	4313      	orrs	r3, r2
 8005878:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005880:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005884:	d101      	bne.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005886:	2301      	movs	r3, #1
 8005888:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005892:	2301      	movs	r3, #1
 8005894:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80058a2:	2301      	movs	r3, #1
 80058a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0320 	and.w	r3, r3, #32
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f000 808b 	beq.w	80059ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80058b4:	4b3a      	ldr	r3, [pc, #232]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b8:	4a39      	ldr	r2, [pc, #228]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058be:	6413      	str	r3, [r2, #64]	; 0x40
 80058c0:	4b37      	ldr	r3, [pc, #220]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058c8:	60bb      	str	r3, [r7, #8]
 80058ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80058cc:	4b35      	ldr	r3, [pc, #212]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a34      	ldr	r2, [pc, #208]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058d8:	f7fe f96c 	bl	8003bb4 <HAL_GetTick>
 80058dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80058de:	e008      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058e0:	f7fe f968 	bl	8003bb4 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b64      	cmp	r3, #100	; 0x64
 80058ec:	d901      	bls.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e38f      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80058f2:	4b2c      	ldr	r3, [pc, #176]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d0f0      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058fe:	4b28      	ldr	r3, [pc, #160]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005906:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d035      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	429a      	cmp	r2, r3
 800591a:	d02e      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800591c:	4b20      	ldr	r3, [pc, #128]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800591e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005924:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005926:	4b1e      	ldr	r3, [pc, #120]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592a:	4a1d      	ldr	r2, [pc, #116]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800592c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005930:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005932:	4b1b      	ldr	r3, [pc, #108]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005936:	4a1a      	ldr	r2, [pc, #104]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800593c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800593e:	4a18      	ldr	r2, [pc, #96]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005944:	4b16      	ldr	r3, [pc, #88]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b01      	cmp	r3, #1
 800594e:	d114      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005950:	f7fe f930 	bl	8003bb4 <HAL_GetTick>
 8005954:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005956:	e00a      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005958:	f7fe f92c 	bl	8003bb4 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	f241 3288 	movw	r2, #5000	; 0x1388
 8005966:	4293      	cmp	r3, r2
 8005968:	d901      	bls.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e351      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800596e:	4b0c      	ldr	r3, [pc, #48]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b00      	cmp	r3, #0
 8005978:	d0ee      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005986:	d111      	bne.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005988:	4b05      	ldr	r3, [pc, #20]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005994:	4b04      	ldr	r3, [pc, #16]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005996:	400b      	ands	r3, r1
 8005998:	4901      	ldr	r1, [pc, #4]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800599a:	4313      	orrs	r3, r2
 800599c:	608b      	str	r3, [r1, #8]
 800599e:	e00b      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80059a0:	40023800 	.word	0x40023800
 80059a4:	40007000 	.word	0x40007000
 80059a8:	0ffffcff 	.word	0x0ffffcff
 80059ac:	4bac      	ldr	r3, [pc, #688]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	4aab      	ldr	r2, [pc, #684]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80059b6:	6093      	str	r3, [r2, #8]
 80059b8:	4ba9      	ldr	r3, [pc, #676]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059c4:	49a6      	ldr	r1, [pc, #664]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0310 	and.w	r3, r3, #16
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d010      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059d6:	4ba2      	ldr	r3, [pc, #648]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059dc:	4aa0      	ldr	r2, [pc, #640]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80059e6:	4b9e      	ldr	r3, [pc, #632]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f0:	499b      	ldr	r1, [pc, #620]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00a      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a04:	4b96      	ldr	r3, [pc, #600]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a12:	4993      	ldr	r1, [pc, #588]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00a      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a26:	4b8e      	ldr	r3, [pc, #568]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a34:	498a      	ldr	r1, [pc, #552]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00a      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a48:	4b85      	ldr	r3, [pc, #532]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a56:	4982      	ldr	r1, [pc, #520]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00a      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a6a:	4b7d      	ldr	r3, [pc, #500]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a78:	4979      	ldr	r1, [pc, #484]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00a      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a8c:	4b74      	ldr	r3, [pc, #464]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a92:	f023 0203 	bic.w	r2, r3, #3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a9a:	4971      	ldr	r1, [pc, #452]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005aae:	4b6c      	ldr	r3, [pc, #432]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab4:	f023 020c 	bic.w	r2, r3, #12
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005abc:	4968      	ldr	r1, [pc, #416]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00a      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ad0:	4b63      	ldr	r3, [pc, #396]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ade:	4960      	ldr	r1, [pc, #384]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00a      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005af2:	4b5b      	ldr	r3, [pc, #364]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005af8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b00:	4957      	ldr	r1, [pc, #348]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00a      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b14:	4b52      	ldr	r3, [pc, #328]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b22:	494f      	ldr	r1, [pc, #316]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00a      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005b36:	4b4a      	ldr	r3, [pc, #296]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b44:	4946      	ldr	r1, [pc, #280]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00a      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005b58:	4b41      	ldr	r3, [pc, #260]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b66:	493e      	ldr	r1, [pc, #248]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00a      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005b7a:	4b39      	ldr	r3, [pc, #228]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b88:	4935      	ldr	r1, [pc, #212]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00a      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b9c:	4b30      	ldr	r3, [pc, #192]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005baa:	492d      	ldr	r1, [pc, #180]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d011      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005bbe:	4b28      	ldr	r3, [pc, #160]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bcc:	4924      	ldr	r1, [pc, #144]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bdc:	d101      	bne.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005bde:	2301      	movs	r3, #1
 8005be0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0308 	and.w	r3, r3, #8
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00a      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bfe:	4b18      	ldr	r3, [pc, #96]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c04:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c0c:	4914      	ldr	r1, [pc, #80]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00b      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c20:	4b0f      	ldr	r3, [pc, #60]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c26:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c30:	490b      	ldr	r1, [pc, #44]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00f      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005c44:	4b06      	ldr	r3, [pc, #24]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c54:	4902      	ldr	r1, [pc, #8]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005c5c:	e002      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005c5e:	bf00      	nop
 8005c60:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00b      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c70:	4b8a      	ldr	r3, [pc, #552]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c76:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c80:	4986      	ldr	r1, [pc, #536]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00b      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005c94:	4b81      	ldr	r3, [pc, #516]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c9a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ca4:	497d      	ldr	r1, [pc, #500]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d006      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 80d6 	beq.w	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005cc0:	4b76      	ldr	r3, [pc, #472]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a75      	ldr	r2, [pc, #468]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005cca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ccc:	f7fd ff72 	bl	8003bb4 <HAL_GetTick>
 8005cd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cd2:	e008      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005cd4:	f7fd ff6e 	bl	8003bb4 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b64      	cmp	r3, #100	; 0x64
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e195      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ce6:	4b6d      	ldr	r3, [pc, #436]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1f0      	bne.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d021      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d11d      	bne.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d06:	4b65      	ldr	r3, [pc, #404]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d0c:	0c1b      	lsrs	r3, r3, #16
 8005d0e:	f003 0303 	and.w	r3, r3, #3
 8005d12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d14:	4b61      	ldr	r3, [pc, #388]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d1a:	0e1b      	lsrs	r3, r3, #24
 8005d1c:	f003 030f 	and.w	r3, r3, #15
 8005d20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	019a      	lsls	r2, r3, #6
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	041b      	lsls	r3, r3, #16
 8005d2c:	431a      	orrs	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	061b      	lsls	r3, r3, #24
 8005d32:	431a      	orrs	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	071b      	lsls	r3, r3, #28
 8005d3a:	4958      	ldr	r1, [pc, #352]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d004      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d56:	d00a      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d02e      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d6c:	d129      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d6e:	4b4b      	ldr	r3, [pc, #300]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d74:	0c1b      	lsrs	r3, r3, #16
 8005d76:	f003 0303 	and.w	r3, r3, #3
 8005d7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d7c:	4b47      	ldr	r3, [pc, #284]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d82:	0f1b      	lsrs	r3, r3, #28
 8005d84:	f003 0307 	and.w	r3, r3, #7
 8005d88:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	019a      	lsls	r2, r3, #6
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	041b      	lsls	r3, r3, #16
 8005d94:	431a      	orrs	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	061b      	lsls	r3, r3, #24
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	071b      	lsls	r3, r3, #28
 8005da2:	493e      	ldr	r1, [pc, #248]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005daa:	4b3c      	ldr	r3, [pc, #240]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005db0:	f023 021f 	bic.w	r2, r3, #31
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	3b01      	subs	r3, #1
 8005dba:	4938      	ldr	r1, [pc, #224]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d01d      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005dce:	4b33      	ldr	r3, [pc, #204]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dd4:	0e1b      	lsrs	r3, r3, #24
 8005dd6:	f003 030f 	and.w	r3, r3, #15
 8005dda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005ddc:	4b2f      	ldr	r3, [pc, #188]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005de2:	0f1b      	lsrs	r3, r3, #28
 8005de4:	f003 0307 	and.w	r3, r3, #7
 8005de8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	019a      	lsls	r2, r3, #6
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	041b      	lsls	r3, r3, #16
 8005df6:	431a      	orrs	r2, r3
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	061b      	lsls	r3, r3, #24
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	071b      	lsls	r3, r3, #28
 8005e02:	4926      	ldr	r1, [pc, #152]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d011      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	019a      	lsls	r2, r3, #6
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	041b      	lsls	r3, r3, #16
 8005e22:	431a      	orrs	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	061b      	lsls	r3, r3, #24
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	071b      	lsls	r3, r3, #28
 8005e32:	491a      	ldr	r1, [pc, #104]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e3a:	4b18      	ldr	r3, [pc, #96]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a17      	ldr	r2, [pc, #92]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e46:	f7fd feb5 	bl	8003bb4 <HAL_GetTick>
 8005e4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e4c:	e008      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e4e:	f7fd feb1 	bl	8003bb4 <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b64      	cmp	r3, #100	; 0x64
 8005e5a:	d901      	bls.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e0d8      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e60:	4b0e      	ldr	r3, [pc, #56]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d0f0      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	f040 80ce 	bne.w	8006010 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005e74:	4b09      	ldr	r3, [pc, #36]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a08      	ldr	r2, [pc, #32]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e80:	f7fd fe98 	bl	8003bb4 <HAL_GetTick>
 8005e84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e86:	e00b      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e88:	f7fd fe94 	bl	8003bb4 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b64      	cmp	r3, #100	; 0x64
 8005e94:	d904      	bls.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e0bb      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005e9a:	bf00      	nop
 8005e9c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ea0:	4b5e      	ldr	r3, [pc, #376]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eac:	d0ec      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d009      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d02e      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d12a      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005ed6:	4b51      	ldr	r3, [pc, #324]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005edc:	0c1b      	lsrs	r3, r3, #16
 8005ede:	f003 0303 	and.w	r3, r3, #3
 8005ee2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ee4:	4b4d      	ldr	r3, [pc, #308]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eea:	0f1b      	lsrs	r3, r3, #28
 8005eec:	f003 0307 	and.w	r3, r3, #7
 8005ef0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	019a      	lsls	r2, r3, #6
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	041b      	lsls	r3, r3, #16
 8005efc:	431a      	orrs	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	061b      	lsls	r3, r3, #24
 8005f04:	431a      	orrs	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	071b      	lsls	r3, r3, #28
 8005f0a:	4944      	ldr	r1, [pc, #272]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005f12:	4b42      	ldr	r3, [pc, #264]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f18:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f20:	3b01      	subs	r3, #1
 8005f22:	021b      	lsls	r3, r3, #8
 8005f24:	493d      	ldr	r1, [pc, #244]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d022      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f40:	d11d      	bne.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f42:	4b36      	ldr	r3, [pc, #216]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f48:	0e1b      	lsrs	r3, r3, #24
 8005f4a:	f003 030f 	and.w	r3, r3, #15
 8005f4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f50:	4b32      	ldr	r3, [pc, #200]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f56:	0f1b      	lsrs	r3, r3, #28
 8005f58:	f003 0307 	and.w	r3, r3, #7
 8005f5c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	019a      	lsls	r2, r3, #6
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	041b      	lsls	r3, r3, #16
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	061b      	lsls	r3, r3, #24
 8005f70:	431a      	orrs	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	071b      	lsls	r3, r3, #28
 8005f76:	4929      	ldr	r1, [pc, #164]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0308 	and.w	r3, r3, #8
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d028      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f8a:	4b24      	ldr	r3, [pc, #144]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f90:	0e1b      	lsrs	r3, r3, #24
 8005f92:	f003 030f 	and.w	r3, r3, #15
 8005f96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f98:	4b20      	ldr	r3, [pc, #128]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f9e:	0c1b      	lsrs	r3, r3, #16
 8005fa0:	f003 0303 	and.w	r3, r3, #3
 8005fa4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	019a      	lsls	r2, r3, #6
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	041b      	lsls	r3, r3, #16
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	061b      	lsls	r3, r3, #24
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	071b      	lsls	r3, r3, #28
 8005fbe:	4917      	ldr	r1, [pc, #92]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005fc6:	4b15      	ldr	r3, [pc, #84]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	4911      	ldr	r1, [pc, #68]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005fdc:	4b0f      	ldr	r3, [pc, #60]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a0e      	ldr	r2, [pc, #56]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fe6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fe8:	f7fd fde4 	bl	8003bb4 <HAL_GetTick>
 8005fec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005fee:	e008      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ff0:	f7fd fde0 	bl	8003bb4 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b64      	cmp	r3, #100	; 0x64
 8005ffc:	d901      	bls.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e007      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006002:	4b06      	ldr	r3, [pc, #24]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800600a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800600e:	d1ef      	bne.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3720      	adds	r7, #32
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	40023800 	.word	0x40023800

08006020 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e09d      	b.n	800616e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	2b00      	cmp	r3, #0
 8006038:	d108      	bne.n	800604c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006042:	d009      	beq.n	8006058 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	61da      	str	r2, [r3, #28]
 800604a:	e005      	b.n	8006058 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d106      	bne.n	8006078 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7fd f96e 	bl	8003354 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2202      	movs	r2, #2
 800607c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800608e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006098:	d902      	bls.n	80060a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800609a:	2300      	movs	r3, #0
 800609c:	60fb      	str	r3, [r7, #12]
 800609e:	e002      	b.n	80060a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80060a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80060ae:	d007      	beq.n	80060c0 <HAL_SPI_Init+0xa0>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060b8:	d002      	beq.n	80060c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80060d0:	431a      	orrs	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	431a      	orrs	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	431a      	orrs	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060ee:	431a      	orrs	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060f8:	431a      	orrs	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006102:	ea42 0103 	orr.w	r1, r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	0c1b      	lsrs	r3, r3, #16
 800611c:	f003 0204 	and.w	r2, r3, #4
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006124:	f003 0310 	and.w	r3, r3, #16
 8006128:	431a      	orrs	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800612e:	f003 0308 	and.w	r3, r3, #8
 8006132:	431a      	orrs	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800613c:	ea42 0103 	orr.w	r1, r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	69da      	ldr	r2, [r3, #28]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800615c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b088      	sub	sp, #32
 800617a:	af00      	add	r7, sp, #0
 800617c:	60f8      	str	r0, [r7, #12]
 800617e:	60b9      	str	r1, [r7, #8]
 8006180:	603b      	str	r3, [r7, #0]
 8006182:	4613      	mov	r3, r2
 8006184:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006186:	2300      	movs	r3, #0
 8006188:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006190:	2b01      	cmp	r3, #1
 8006192:	d101      	bne.n	8006198 <HAL_SPI_Transmit+0x22>
 8006194:	2302      	movs	r3, #2
 8006196:	e158      	b.n	800644a <HAL_SPI_Transmit+0x2d4>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061a0:	f7fd fd08 	bl	8003bb4 <HAL_GetTick>
 80061a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80061a6:	88fb      	ldrh	r3, [r7, #6]
 80061a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d002      	beq.n	80061bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80061b6:	2302      	movs	r3, #2
 80061b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80061ba:	e13d      	b.n	8006438 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d002      	beq.n	80061c8 <HAL_SPI_Transmit+0x52>
 80061c2:	88fb      	ldrh	r3, [r7, #6]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d102      	bne.n	80061ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80061cc:	e134      	b.n	8006438 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2203      	movs	r2, #3
 80061d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	88fa      	ldrh	r2, [r7, #6]
 80061e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	88fa      	ldrh	r2, [r7, #6]
 80061ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006218:	d10f      	bne.n	800623a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006228:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006238:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006244:	2b40      	cmp	r3, #64	; 0x40
 8006246:	d007      	beq.n	8006258 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006256:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006260:	d94b      	bls.n	80062fa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d002      	beq.n	8006270 <HAL_SPI_Transmit+0xfa>
 800626a:	8afb      	ldrh	r3, [r7, #22]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d13e      	bne.n	80062ee <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006274:	881a      	ldrh	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006280:	1c9a      	adds	r2, r3, #2
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800628a:	b29b      	uxth	r3, r3
 800628c:	3b01      	subs	r3, #1
 800628e:	b29a      	uxth	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006294:	e02b      	b.n	80062ee <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f003 0302 	and.w	r3, r3, #2
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d112      	bne.n	80062ca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a8:	881a      	ldrh	r2, [r3, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b4:	1c9a      	adds	r2, r3, #2
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062be:	b29b      	uxth	r3, r3
 80062c0:	3b01      	subs	r3, #1
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062c8:	e011      	b.n	80062ee <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062ca:	f7fd fc73 	bl	8003bb4 <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d803      	bhi.n	80062e2 <HAL_SPI_Transmit+0x16c>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e0:	d102      	bne.n	80062e8 <HAL_SPI_Transmit+0x172>
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d102      	bne.n	80062ee <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80062ec:	e0a4      	b.n	8006438 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1ce      	bne.n	8006296 <HAL_SPI_Transmit+0x120>
 80062f8:	e07c      	b.n	80063f4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d002      	beq.n	8006308 <HAL_SPI_Transmit+0x192>
 8006302:	8afb      	ldrh	r3, [r7, #22]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d170      	bne.n	80063ea <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800630c:	b29b      	uxth	r3, r3
 800630e:	2b01      	cmp	r3, #1
 8006310:	d912      	bls.n	8006338 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006316:	881a      	ldrh	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006322:	1c9a      	adds	r2, r3, #2
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800632c:	b29b      	uxth	r3, r3
 800632e:	3b02      	subs	r3, #2
 8006330:	b29a      	uxth	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006336:	e058      	b.n	80063ea <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	330c      	adds	r3, #12
 8006342:	7812      	ldrb	r2, [r2, #0]
 8006344:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634a:	1c5a      	adds	r2, r3, #1
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006354:	b29b      	uxth	r3, r3
 8006356:	3b01      	subs	r3, #1
 8006358:	b29a      	uxth	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800635e:	e044      	b.n	80063ea <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b02      	cmp	r3, #2
 800636c:	d12b      	bne.n	80063c6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006372:	b29b      	uxth	r3, r3
 8006374:	2b01      	cmp	r3, #1
 8006376:	d912      	bls.n	800639e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637c:	881a      	ldrh	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006388:	1c9a      	adds	r2, r3, #2
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006392:	b29b      	uxth	r3, r3
 8006394:	3b02      	subs	r3, #2
 8006396:	b29a      	uxth	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800639c:	e025      	b.n	80063ea <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	330c      	adds	r3, #12
 80063a8:	7812      	ldrb	r2, [r2, #0]
 80063aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b0:	1c5a      	adds	r2, r3, #1
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	3b01      	subs	r3, #1
 80063be:	b29a      	uxth	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063c4:	e011      	b.n	80063ea <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063c6:	f7fd fbf5 	bl	8003bb4 <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	683a      	ldr	r2, [r7, #0]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d803      	bhi.n	80063de <HAL_SPI_Transmit+0x268>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063dc:	d102      	bne.n	80063e4 <HAL_SPI_Transmit+0x26e>
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d102      	bne.n	80063ea <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80063e8:	e026      	b.n	8006438 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1b5      	bne.n	8006360 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	6839      	ldr	r1, [r7, #0]
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 fd07 	bl	8006e0c <SPI_EndRxTxTransaction>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d002      	beq.n	800640a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2220      	movs	r2, #32
 8006408:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10a      	bne.n	8006428 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006412:	2300      	movs	r3, #0
 8006414:	613b      	str	r3, [r7, #16]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	613b      	str	r3, [r7, #16]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	613b      	str	r3, [r7, #16]
 8006426:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800642c:	2b00      	cmp	r3, #0
 800642e:	d002      	beq.n	8006436 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	77fb      	strb	r3, [r7, #31]
 8006434:	e000      	b.n	8006438 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006436:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006448:	7ffb      	ldrb	r3, [r7, #31]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3720      	adds	r7, #32
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b088      	sub	sp, #32
 8006456:	af02      	add	r7, sp, #8
 8006458:	60f8      	str	r0, [r7, #12]
 800645a:	60b9      	str	r1, [r7, #8]
 800645c:	603b      	str	r3, [r7, #0]
 800645e:	4613      	mov	r3, r2
 8006460:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800646e:	d112      	bne.n	8006496 <HAL_SPI_Receive+0x44>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d10e      	bne.n	8006496 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2204      	movs	r2, #4
 800647c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006480:	88fa      	ldrh	r2, [r7, #6]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	4613      	mov	r3, r2
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	68b9      	ldr	r1, [r7, #8]
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 f910 	bl	80066b2 <HAL_SPI_TransmitReceive>
 8006492:	4603      	mov	r3, r0
 8006494:	e109      	b.n	80066aa <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800649c:	2b01      	cmp	r3, #1
 800649e:	d101      	bne.n	80064a4 <HAL_SPI_Receive+0x52>
 80064a0:	2302      	movs	r3, #2
 80064a2:	e102      	b.n	80066aa <HAL_SPI_Receive+0x258>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064ac:	f7fd fb82 	bl	8003bb4 <HAL_GetTick>
 80064b0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d002      	beq.n	80064c4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80064be:	2302      	movs	r3, #2
 80064c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064c2:	e0e9      	b.n	8006698 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d002      	beq.n	80064d0 <HAL_SPI_Receive+0x7e>
 80064ca:	88fb      	ldrh	r3, [r7, #6]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d102      	bne.n	80064d6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064d4:	e0e0      	b.n	8006698 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2204      	movs	r2, #4
 80064da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	88fa      	ldrh	r2, [r7, #6]
 80064ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	88fa      	ldrh	r2, [r7, #6]
 80064f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006520:	d908      	bls.n	8006534 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006530:	605a      	str	r2, [r3, #4]
 8006532:	e007      	b.n	8006544 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006542:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800654c:	d10f      	bne.n	800656e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800655c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800656c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006578:	2b40      	cmp	r3, #64	; 0x40
 800657a:	d007      	beq.n	800658c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800658a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006594:	d867      	bhi.n	8006666 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006596:	e030      	b.n	80065fa <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d117      	bne.n	80065d6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f103 020c 	add.w	r2, r3, #12
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b2:	7812      	ldrb	r2, [r2, #0]
 80065b4:	b2d2      	uxtb	r2, r2
 80065b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065bc:	1c5a      	adds	r2, r3, #1
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	3b01      	subs	r3, #1
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80065d4:	e011      	b.n	80065fa <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065d6:	f7fd faed 	bl	8003bb4 <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	683a      	ldr	r2, [r7, #0]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d803      	bhi.n	80065ee <HAL_SPI_Receive+0x19c>
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ec:	d102      	bne.n	80065f4 <HAL_SPI_Receive+0x1a2>
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d102      	bne.n	80065fa <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80065f8:	e04e      	b.n	8006698 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006600:	b29b      	uxth	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1c8      	bne.n	8006598 <HAL_SPI_Receive+0x146>
 8006606:	e034      	b.n	8006672 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b01      	cmp	r3, #1
 8006614:	d115      	bne.n	8006642 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68da      	ldr	r2, [r3, #12]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006620:	b292      	uxth	r2, r2
 8006622:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006628:	1c9a      	adds	r2, r3, #2
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006634:	b29b      	uxth	r3, r3
 8006636:	3b01      	subs	r3, #1
 8006638:	b29a      	uxth	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006640:	e011      	b.n	8006666 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006642:	f7fd fab7 	bl	8003bb4 <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	683a      	ldr	r2, [r7, #0]
 800664e:	429a      	cmp	r2, r3
 8006650:	d803      	bhi.n	800665a <HAL_SPI_Receive+0x208>
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006658:	d102      	bne.n	8006660 <HAL_SPI_Receive+0x20e>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d102      	bne.n	8006666 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006664:	e018      	b.n	8006698 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800666c:	b29b      	uxth	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1ca      	bne.n	8006608 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	6839      	ldr	r1, [r7, #0]
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 fb4c 	bl	8006d14 <SPI_EndRxTransaction>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d002      	beq.n	8006688 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2220      	movs	r2, #32
 8006686:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	75fb      	strb	r3, [r7, #23]
 8006694:	e000      	b.n	8006698 <HAL_SPI_Receive+0x246>
  }

error :
 8006696:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80066a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b08a      	sub	sp, #40	; 0x28
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	60f8      	str	r0, [r7, #12]
 80066ba:	60b9      	str	r1, [r7, #8]
 80066bc:	607a      	str	r2, [r7, #4]
 80066be:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80066c0:	2301      	movs	r3, #1
 80066c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80066c4:	2300      	movs	r3, #0
 80066c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d101      	bne.n	80066d8 <HAL_SPI_TransmitReceive+0x26>
 80066d4:	2302      	movs	r3, #2
 80066d6:	e1fb      	b.n	8006ad0 <HAL_SPI_TransmitReceive+0x41e>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066e0:	f7fd fa68 	bl	8003bb4 <HAL_GetTick>
 80066e4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80066ec:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80066f4:	887b      	ldrh	r3, [r7, #2]
 80066f6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80066f8:	887b      	ldrh	r3, [r7, #2]
 80066fa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80066fc:	7efb      	ldrb	r3, [r7, #27]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d00e      	beq.n	8006720 <HAL_SPI_TransmitReceive+0x6e>
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006708:	d106      	bne.n	8006718 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d102      	bne.n	8006718 <HAL_SPI_TransmitReceive+0x66>
 8006712:	7efb      	ldrb	r3, [r7, #27]
 8006714:	2b04      	cmp	r3, #4
 8006716:	d003      	beq.n	8006720 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006718:	2302      	movs	r3, #2
 800671a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800671e:	e1cd      	b.n	8006abc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d005      	beq.n	8006732 <HAL_SPI_TransmitReceive+0x80>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d002      	beq.n	8006732 <HAL_SPI_TransmitReceive+0x80>
 800672c:	887b      	ldrh	r3, [r7, #2]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d103      	bne.n	800673a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006738:	e1c0      	b.n	8006abc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b04      	cmp	r3, #4
 8006744:	d003      	beq.n	800674e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2205      	movs	r2, #5
 800674a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	887a      	ldrh	r2, [r7, #2]
 800675e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	887a      	ldrh	r2, [r7, #2]
 8006766:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	887a      	ldrh	r2, [r7, #2]
 8006774:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	887a      	ldrh	r2, [r7, #2]
 800677a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006790:	d802      	bhi.n	8006798 <HAL_SPI_TransmitReceive+0xe6>
 8006792:	8a3b      	ldrh	r3, [r7, #16]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d908      	bls.n	80067aa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067a6:	605a      	str	r2, [r3, #4]
 80067a8:	e007      	b.n	80067ba <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80067b8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c4:	2b40      	cmp	r3, #64	; 0x40
 80067c6:	d007      	beq.n	80067d8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067e0:	d97c      	bls.n	80068dc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d002      	beq.n	80067f0 <HAL_SPI_TransmitReceive+0x13e>
 80067ea:	8a7b      	ldrh	r3, [r7, #18]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d169      	bne.n	80068c4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f4:	881a      	ldrh	r2, [r3, #0]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006800:	1c9a      	adds	r2, r3, #2
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800680a:	b29b      	uxth	r3, r3
 800680c:	3b01      	subs	r3, #1
 800680e:	b29a      	uxth	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006814:	e056      	b.n	80068c4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f003 0302 	and.w	r3, r3, #2
 8006820:	2b02      	cmp	r3, #2
 8006822:	d11b      	bne.n	800685c <HAL_SPI_TransmitReceive+0x1aa>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006828:	b29b      	uxth	r3, r3
 800682a:	2b00      	cmp	r3, #0
 800682c:	d016      	beq.n	800685c <HAL_SPI_TransmitReceive+0x1aa>
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	2b01      	cmp	r3, #1
 8006832:	d113      	bne.n	800685c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006838:	881a      	ldrh	r2, [r3, #0]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006844:	1c9a      	adds	r2, r3, #2
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800684e:	b29b      	uxth	r3, r3
 8006850:	3b01      	subs	r3, #1
 8006852:	b29a      	uxth	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b01      	cmp	r3, #1
 8006868:	d11c      	bne.n	80068a4 <HAL_SPI_TransmitReceive+0x1f2>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006870:	b29b      	uxth	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d016      	beq.n	80068a4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68da      	ldr	r2, [r3, #12]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006880:	b292      	uxth	r2, r2
 8006882:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006888:	1c9a      	adds	r2, r3, #2
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006894:	b29b      	uxth	r3, r3
 8006896:	3b01      	subs	r3, #1
 8006898:	b29a      	uxth	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068a0:	2301      	movs	r3, #1
 80068a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80068a4:	f7fd f986 	bl	8003bb4 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d807      	bhi.n	80068c4 <HAL_SPI_TransmitReceive+0x212>
 80068b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ba:	d003      	beq.n	80068c4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80068c2:	e0fb      	b.n	8006abc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1a3      	bne.n	8006816 <HAL_SPI_TransmitReceive+0x164>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d19d      	bne.n	8006816 <HAL_SPI_TransmitReceive+0x164>
 80068da:	e0df      	b.n	8006a9c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d003      	beq.n	80068ec <HAL_SPI_TransmitReceive+0x23a>
 80068e4:	8a7b      	ldrh	r3, [r7, #18]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	f040 80cb 	bne.w	8006a82 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d912      	bls.n	800691c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fa:	881a      	ldrh	r2, [r3, #0]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006906:	1c9a      	adds	r2, r3, #2
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006910:	b29b      	uxth	r3, r3
 8006912:	3b02      	subs	r3, #2
 8006914:	b29a      	uxth	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	87da      	strh	r2, [r3, #62]	; 0x3e
 800691a:	e0b2      	b.n	8006a82 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	330c      	adds	r3, #12
 8006926:	7812      	ldrb	r2, [r2, #0]
 8006928:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692e:	1c5a      	adds	r2, r3, #1
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006938:	b29b      	uxth	r3, r3
 800693a:	3b01      	subs	r3, #1
 800693c:	b29a      	uxth	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006942:	e09e      	b.n	8006a82 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b02      	cmp	r3, #2
 8006950:	d134      	bne.n	80069bc <HAL_SPI_TransmitReceive+0x30a>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006956:	b29b      	uxth	r3, r3
 8006958:	2b00      	cmp	r3, #0
 800695a:	d02f      	beq.n	80069bc <HAL_SPI_TransmitReceive+0x30a>
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695e:	2b01      	cmp	r3, #1
 8006960:	d12c      	bne.n	80069bc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006966:	b29b      	uxth	r3, r3
 8006968:	2b01      	cmp	r3, #1
 800696a:	d912      	bls.n	8006992 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006970:	881a      	ldrh	r2, [r3, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697c:	1c9a      	adds	r2, r3, #2
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006986:	b29b      	uxth	r3, r3
 8006988:	3b02      	subs	r3, #2
 800698a:	b29a      	uxth	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006990:	e012      	b.n	80069b8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	330c      	adds	r3, #12
 800699c:	7812      	ldrb	r2, [r2, #0]
 800699e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a4:	1c5a      	adds	r2, r3, #1
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	3b01      	subs	r3, #1
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d148      	bne.n	8006a5c <HAL_SPI_TransmitReceive+0x3aa>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d042      	beq.n	8006a5c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069dc:	b29b      	uxth	r3, r3
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d923      	bls.n	8006a2a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68da      	ldr	r2, [r3, #12]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ec:	b292      	uxth	r2, r2
 80069ee:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f4:	1c9a      	adds	r2, r3, #2
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	3b02      	subs	r3, #2
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d81f      	bhi.n	8006a58 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a26:	605a      	str	r2, [r3, #4]
 8006a28:	e016      	b.n	8006a58 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f103 020c 	add.w	r2, r3, #12
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a36:	7812      	ldrb	r2, [r2, #0]
 8006a38:	b2d2      	uxtb	r2, r2
 8006a3a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a40:	1c5a      	adds	r2, r3, #1
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006a5c:	f7fd f8aa 	bl	8003bb4 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d803      	bhi.n	8006a74 <HAL_SPI_TransmitReceive+0x3c2>
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a72:	d102      	bne.n	8006a7a <HAL_SPI_TransmitReceive+0x3c8>
 8006a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d103      	bne.n	8006a82 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006a80:	e01c      	b.n	8006abc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f47f af5b 	bne.w	8006944 <HAL_SPI_TransmitReceive+0x292>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	f47f af54 	bne.w	8006944 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a9c:	69fa      	ldr	r2, [r7, #28]
 8006a9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f000 f9b3 	bl	8006e0c <SPI_EndRxTxTransaction>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d006      	beq.n	8006aba <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	661a      	str	r2, [r3, #96]	; 0x60
 8006ab8:	e000      	b.n	8006abc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006aba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006acc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3728      	adds	r7, #40	; 0x28
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b088      	sub	sp, #32
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	603b      	str	r3, [r7, #0]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ae8:	f7fd f864 	bl	8003bb4 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af0:	1a9b      	subs	r3, r3, r2
 8006af2:	683a      	ldr	r2, [r7, #0]
 8006af4:	4413      	add	r3, r2
 8006af6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006af8:	f7fd f85c 	bl	8003bb4 <HAL_GetTick>
 8006afc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006afe:	4b39      	ldr	r3, [pc, #228]	; (8006be4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	015b      	lsls	r3, r3, #5
 8006b04:	0d1b      	lsrs	r3, r3, #20
 8006b06:	69fa      	ldr	r2, [r7, #28]
 8006b08:	fb02 f303 	mul.w	r3, r2, r3
 8006b0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b0e:	e054      	b.n	8006bba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b16:	d050      	beq.n	8006bba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b18:	f7fd f84c 	bl	8003bb4 <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	69fa      	ldr	r2, [r7, #28]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d902      	bls.n	8006b2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d13d      	bne.n	8006baa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b46:	d111      	bne.n	8006b6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b50:	d004      	beq.n	8006b5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b5a:	d107      	bne.n	8006b6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b74:	d10f      	bne.n	8006b96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b84:	601a      	str	r2, [r3, #0]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e017      	b.n	8006bda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d101      	bne.n	8006bb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	689a      	ldr	r2, [r3, #8]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	bf0c      	ite	eq
 8006bca:	2301      	moveq	r3, #1
 8006bcc:	2300      	movne	r3, #0
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	79fb      	ldrb	r3, [r7, #7]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d19b      	bne.n	8006b10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3720      	adds	r7, #32
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	20000000 	.word	0x20000000

08006be8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08a      	sub	sp, #40	; 0x28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
 8006bf4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006bfa:	f7fc ffdb 	bl	8003bb4 <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c02:	1a9b      	subs	r3, r3, r2
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	4413      	add	r3, r2
 8006c08:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006c0a:	f7fc ffd3 	bl	8003bb4 <HAL_GetTick>
 8006c0e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	330c      	adds	r3, #12
 8006c16:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006c18:	4b3d      	ldr	r3, [pc, #244]	; (8006d10 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	00da      	lsls	r2, r3, #3
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	0d1b      	lsrs	r3, r3, #20
 8006c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c2a:	fb02 f303 	mul.w	r3, r2, r3
 8006c2e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006c30:	e060      	b.n	8006cf4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006c38:	d107      	bne.n	8006c4a <SPI_WaitFifoStateUntilTimeout+0x62>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d104      	bne.n	8006c4a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c50:	d050      	beq.n	8006cf4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c52:	f7fc ffaf 	bl	8003bb4 <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	6a3b      	ldr	r3, [r7, #32]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d902      	bls.n	8006c68 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d13d      	bne.n	8006ce4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	685a      	ldr	r2, [r3, #4]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c80:	d111      	bne.n	8006ca6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c8a:	d004      	beq.n	8006c96 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c94:	d107      	bne.n	8006ca6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ca4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cae:	d10f      	bne.n	8006cd0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cbe:	601a      	str	r2, [r3, #0]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e010      	b.n	8006d06 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006cea:	2300      	movs	r3, #0
 8006cec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689a      	ldr	r2, [r3, #8]
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d196      	bne.n	8006c32 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3728      	adds	r7, #40	; 0x28
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	20000000 	.word	0x20000000

08006d14 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b088      	sub	sp, #32
 8006d18:	af02      	add	r7, sp, #8
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d28:	d111      	bne.n	8006d4e <SPI_EndRxTransaction+0x3a>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d32:	d004      	beq.n	8006d3e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d3c:	d107      	bne.n	8006d4e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d4c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d56:	d112      	bne.n	8006d7e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	2180      	movs	r1, #128	; 0x80
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f7ff feb8 	bl	8006ad8 <SPI_WaitFlagStateUntilTimeout>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d021      	beq.n	8006db2 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d72:	f043 0220 	orr.w	r2, r3, #32
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e03d      	b.n	8006dfa <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006d7e:	4b21      	ldr	r3, [pc, #132]	; (8006e04 <SPI_EndRxTransaction+0xf0>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a21      	ldr	r2, [pc, #132]	; (8006e08 <SPI_EndRxTransaction+0xf4>)
 8006d84:	fba2 2303 	umull	r2, r3, r2, r3
 8006d88:	0d5b      	lsrs	r3, r3, #21
 8006d8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d8e:	fb02 f303 	mul.w	r3, r2, r3
 8006d92:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00a      	beq.n	8006db0 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006daa:	2b80      	cmp	r3, #128	; 0x80
 8006dac:	d0f2      	beq.n	8006d94 <SPI_EndRxTransaction+0x80>
 8006dae:	e000      	b.n	8006db2 <SPI_EndRxTransaction+0x9e>
        break;
 8006db0:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dba:	d11d      	bne.n	8006df8 <SPI_EndRxTransaction+0xe4>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dc4:	d004      	beq.n	8006dd0 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dce:	d113      	bne.n	8006df8 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f7ff ff03 	bl	8006be8 <SPI_WaitFifoStateUntilTimeout>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d007      	beq.n	8006df8 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dec:	f043 0220 	orr.w	r2, r3, #32
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e000      	b.n	8006dfa <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3718      	adds	r7, #24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	20000000 	.word	0x20000000
 8006e08:	165e9f81 	.word	0x165e9f81

08006e0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b088      	sub	sp, #32
 8006e10:	af02      	add	r7, sp, #8
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	9300      	str	r3, [sp, #0]
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f7ff fedf 	bl	8006be8 <SPI_WaitFifoStateUntilTimeout>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d007      	beq.n	8006e40 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e34:	f043 0220 	orr.w	r2, r3, #32
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e046      	b.n	8006ece <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e40:	4b25      	ldr	r3, [pc, #148]	; (8006ed8 <SPI_EndRxTxTransaction+0xcc>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a25      	ldr	r2, [pc, #148]	; (8006edc <SPI_EndRxTxTransaction+0xd0>)
 8006e46:	fba2 2303 	umull	r2, r3, r2, r3
 8006e4a:	0d5b      	lsrs	r3, r3, #21
 8006e4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e50:	fb02 f303 	mul.w	r3, r2, r3
 8006e54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e5e:	d112      	bne.n	8006e86 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2200      	movs	r2, #0
 8006e68:	2180      	movs	r1, #128	; 0x80
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f7ff fe34 	bl	8006ad8 <SPI_WaitFlagStateUntilTimeout>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d016      	beq.n	8006ea4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e7a:	f043 0220 	orr.w	r2, r3, #32
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e023      	b.n	8006ece <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00a      	beq.n	8006ea2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e9c:	2b80      	cmp	r3, #128	; 0x80
 8006e9e:	d0f2      	beq.n	8006e86 <SPI_EndRxTxTransaction+0x7a>
 8006ea0:	e000      	b.n	8006ea4 <SPI_EndRxTxTransaction+0x98>
        break;
 8006ea2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f7ff fe99 	bl	8006be8 <SPI_WaitFifoStateUntilTimeout>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d007      	beq.n	8006ecc <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ec0:	f043 0220 	orr.w	r2, r3, #32
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e000      	b.n	8006ece <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3718      	adds	r7, #24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	20000000 	.word	0x20000000
 8006edc:	165e9f81 	.word	0x165e9f81

08006ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e049      	b.n	8006f86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d106      	bne.n	8006f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7fc fc8c 	bl	8003824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	3304      	adds	r3, #4
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	4610      	mov	r0, r2
 8006f20:	f000 ff64 	bl	8007dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3708      	adds	r7, #8
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
	...

08006f90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d001      	beq.n	8006fa8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e04c      	b.n	8007042 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2202      	movs	r2, #2
 8006fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a26      	ldr	r2, [pc, #152]	; (8007050 <HAL_TIM_Base_Start+0xc0>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d022      	beq.n	8007000 <HAL_TIM_Base_Start+0x70>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fc2:	d01d      	beq.n	8007000 <HAL_TIM_Base_Start+0x70>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a22      	ldr	r2, [pc, #136]	; (8007054 <HAL_TIM_Base_Start+0xc4>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d018      	beq.n	8007000 <HAL_TIM_Base_Start+0x70>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a21      	ldr	r2, [pc, #132]	; (8007058 <HAL_TIM_Base_Start+0xc8>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d013      	beq.n	8007000 <HAL_TIM_Base_Start+0x70>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a1f      	ldr	r2, [pc, #124]	; (800705c <HAL_TIM_Base_Start+0xcc>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d00e      	beq.n	8007000 <HAL_TIM_Base_Start+0x70>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a1e      	ldr	r2, [pc, #120]	; (8007060 <HAL_TIM_Base_Start+0xd0>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d009      	beq.n	8007000 <HAL_TIM_Base_Start+0x70>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a1c      	ldr	r2, [pc, #112]	; (8007064 <HAL_TIM_Base_Start+0xd4>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d004      	beq.n	8007000 <HAL_TIM_Base_Start+0x70>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a1b      	ldr	r2, [pc, #108]	; (8007068 <HAL_TIM_Base_Start+0xd8>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d115      	bne.n	800702c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689a      	ldr	r2, [r3, #8]
 8007006:	4b19      	ldr	r3, [pc, #100]	; (800706c <HAL_TIM_Base_Start+0xdc>)
 8007008:	4013      	ands	r3, r2
 800700a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b06      	cmp	r3, #6
 8007010:	d015      	beq.n	800703e <HAL_TIM_Base_Start+0xae>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007018:	d011      	beq.n	800703e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f042 0201 	orr.w	r2, r2, #1
 8007028:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800702a:	e008      	b.n	800703e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f042 0201 	orr.w	r2, r2, #1
 800703a:	601a      	str	r2, [r3, #0]
 800703c:	e000      	b.n	8007040 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800703e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	40010000 	.word	0x40010000
 8007054:	40000400 	.word	0x40000400
 8007058:	40000800 	.word	0x40000800
 800705c:	40000c00 	.word	0x40000c00
 8007060:	40010400 	.word	0x40010400
 8007064:	40014000 	.word	0x40014000
 8007068:	40001800 	.word	0x40001800
 800706c:	00010007 	.word	0x00010007

08007070 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b01      	cmp	r3, #1
 8007082:	d001      	beq.n	8007088 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e054      	b.n	8007132 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2202      	movs	r2, #2
 800708c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68da      	ldr	r2, [r3, #12]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f042 0201 	orr.w	r2, r2, #1
 800709e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a26      	ldr	r2, [pc, #152]	; (8007140 <HAL_TIM_Base_Start_IT+0xd0>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d022      	beq.n	80070f0 <HAL_TIM_Base_Start_IT+0x80>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b2:	d01d      	beq.n	80070f0 <HAL_TIM_Base_Start_IT+0x80>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a22      	ldr	r2, [pc, #136]	; (8007144 <HAL_TIM_Base_Start_IT+0xd4>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d018      	beq.n	80070f0 <HAL_TIM_Base_Start_IT+0x80>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a21      	ldr	r2, [pc, #132]	; (8007148 <HAL_TIM_Base_Start_IT+0xd8>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d013      	beq.n	80070f0 <HAL_TIM_Base_Start_IT+0x80>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a1f      	ldr	r2, [pc, #124]	; (800714c <HAL_TIM_Base_Start_IT+0xdc>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d00e      	beq.n	80070f0 <HAL_TIM_Base_Start_IT+0x80>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a1e      	ldr	r2, [pc, #120]	; (8007150 <HAL_TIM_Base_Start_IT+0xe0>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d009      	beq.n	80070f0 <HAL_TIM_Base_Start_IT+0x80>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a1c      	ldr	r2, [pc, #112]	; (8007154 <HAL_TIM_Base_Start_IT+0xe4>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d004      	beq.n	80070f0 <HAL_TIM_Base_Start_IT+0x80>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a1b      	ldr	r2, [pc, #108]	; (8007158 <HAL_TIM_Base_Start_IT+0xe8>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d115      	bne.n	800711c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689a      	ldr	r2, [r3, #8]
 80070f6:	4b19      	ldr	r3, [pc, #100]	; (800715c <HAL_TIM_Base_Start_IT+0xec>)
 80070f8:	4013      	ands	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2b06      	cmp	r3, #6
 8007100:	d015      	beq.n	800712e <HAL_TIM_Base_Start_IT+0xbe>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007108:	d011      	beq.n	800712e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f042 0201 	orr.w	r2, r2, #1
 8007118:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800711a:	e008      	b.n	800712e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f042 0201 	orr.w	r2, r2, #1
 800712a:	601a      	str	r2, [r3, #0]
 800712c:	e000      	b.n	8007130 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800712e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	40010000 	.word	0x40010000
 8007144:	40000400 	.word	0x40000400
 8007148:	40000800 	.word	0x40000800
 800714c:	40000c00 	.word	0x40000c00
 8007150:	40010400 	.word	0x40010400
 8007154:	40014000 	.word	0x40014000
 8007158:	40001800 	.word	0x40001800
 800715c:	00010007 	.word	0x00010007

08007160 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d101      	bne.n	8007172 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e049      	b.n	8007206 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d106      	bne.n	800718c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7fc fbb4 	bl	80038f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2202      	movs	r2, #2
 8007190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	3304      	adds	r3, #4
 800719c:	4619      	mov	r1, r3
 800719e:	4610      	mov	r0, r2
 80071a0:	f000 fe24 	bl	8007dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b082      	sub	sp, #8
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e049      	b.n	80072b4 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b00      	cmp	r3, #0
 800722a:	d106      	bne.n	800723a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f841 	bl	80072bc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2202      	movs	r2, #2
 800723e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	3304      	adds	r3, #4
 800724a:	4619      	mov	r1, r3
 800724c:	4610      	mov	r0, r2
 800724e:	f000 fdcd 	bl	8007dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d104      	bne.n	80072ee <HAL_TIM_IC_Start_IT+0x1e>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	e023      	b.n	8007336 <HAL_TIM_IC_Start_IT+0x66>
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	2b04      	cmp	r3, #4
 80072f2:	d104      	bne.n	80072fe <HAL_TIM_IC_Start_IT+0x2e>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	e01b      	b.n	8007336 <HAL_TIM_IC_Start_IT+0x66>
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	2b08      	cmp	r3, #8
 8007302:	d104      	bne.n	800730e <HAL_TIM_IC_Start_IT+0x3e>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800730a:	b2db      	uxtb	r3, r3
 800730c:	e013      	b.n	8007336 <HAL_TIM_IC_Start_IT+0x66>
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	2b0c      	cmp	r3, #12
 8007312:	d104      	bne.n	800731e <HAL_TIM_IC_Start_IT+0x4e>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800731a:	b2db      	uxtb	r3, r3
 800731c:	e00b      	b.n	8007336 <HAL_TIM_IC_Start_IT+0x66>
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	2b10      	cmp	r3, #16
 8007322:	d104      	bne.n	800732e <HAL_TIM_IC_Start_IT+0x5e>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800732a:	b2db      	uxtb	r3, r3
 800732c:	e003      	b.n	8007336 <HAL_TIM_IC_Start_IT+0x66>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007334:	b2db      	uxtb	r3, r3
 8007336:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d104      	bne.n	8007348 <HAL_TIM_IC_Start_IT+0x78>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007344:	b2db      	uxtb	r3, r3
 8007346:	e013      	b.n	8007370 <HAL_TIM_IC_Start_IT+0xa0>
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2b04      	cmp	r3, #4
 800734c:	d104      	bne.n	8007358 <HAL_TIM_IC_Start_IT+0x88>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007354:	b2db      	uxtb	r3, r3
 8007356:	e00b      	b.n	8007370 <HAL_TIM_IC_Start_IT+0xa0>
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	2b08      	cmp	r3, #8
 800735c:	d104      	bne.n	8007368 <HAL_TIM_IC_Start_IT+0x98>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007364:	b2db      	uxtb	r3, r3
 8007366:	e003      	b.n	8007370 <HAL_TIM_IC_Start_IT+0xa0>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800736e:	b2db      	uxtb	r3, r3
 8007370:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007372:	7bbb      	ldrb	r3, [r7, #14]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d102      	bne.n	800737e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007378:	7b7b      	ldrb	r3, [r7, #13]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d001      	beq.n	8007382 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e0e2      	b.n	8007548 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d104      	bne.n	8007392 <HAL_TIM_IC_Start_IT+0xc2>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2202      	movs	r2, #2
 800738c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007390:	e023      	b.n	80073da <HAL_TIM_IC_Start_IT+0x10a>
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	2b04      	cmp	r3, #4
 8007396:	d104      	bne.n	80073a2 <HAL_TIM_IC_Start_IT+0xd2>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2202      	movs	r2, #2
 800739c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073a0:	e01b      	b.n	80073da <HAL_TIM_IC_Start_IT+0x10a>
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	2b08      	cmp	r3, #8
 80073a6:	d104      	bne.n	80073b2 <HAL_TIM_IC_Start_IT+0xe2>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2202      	movs	r2, #2
 80073ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073b0:	e013      	b.n	80073da <HAL_TIM_IC_Start_IT+0x10a>
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	2b0c      	cmp	r3, #12
 80073b6:	d104      	bne.n	80073c2 <HAL_TIM_IC_Start_IT+0xf2>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2202      	movs	r2, #2
 80073bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80073c0:	e00b      	b.n	80073da <HAL_TIM_IC_Start_IT+0x10a>
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2b10      	cmp	r3, #16
 80073c6:	d104      	bne.n	80073d2 <HAL_TIM_IC_Start_IT+0x102>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2202      	movs	r2, #2
 80073cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073d0:	e003      	b.n	80073da <HAL_TIM_IC_Start_IT+0x10a>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2202      	movs	r2, #2
 80073d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d104      	bne.n	80073ea <HAL_TIM_IC_Start_IT+0x11a>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2202      	movs	r2, #2
 80073e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073e8:	e013      	b.n	8007412 <HAL_TIM_IC_Start_IT+0x142>
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b04      	cmp	r3, #4
 80073ee:	d104      	bne.n	80073fa <HAL_TIM_IC_Start_IT+0x12a>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2202      	movs	r2, #2
 80073f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073f8:	e00b      	b.n	8007412 <HAL_TIM_IC_Start_IT+0x142>
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2b08      	cmp	r3, #8
 80073fe:	d104      	bne.n	800740a <HAL_TIM_IC_Start_IT+0x13a>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2202      	movs	r2, #2
 8007404:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007408:	e003      	b.n	8007412 <HAL_TIM_IC_Start_IT+0x142>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2202      	movs	r2, #2
 800740e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b0c      	cmp	r3, #12
 8007416:	d841      	bhi.n	800749c <HAL_TIM_IC_Start_IT+0x1cc>
 8007418:	a201      	add	r2, pc, #4	; (adr r2, 8007420 <HAL_TIM_IC_Start_IT+0x150>)
 800741a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741e:	bf00      	nop
 8007420:	08007455 	.word	0x08007455
 8007424:	0800749d 	.word	0x0800749d
 8007428:	0800749d 	.word	0x0800749d
 800742c:	0800749d 	.word	0x0800749d
 8007430:	08007467 	.word	0x08007467
 8007434:	0800749d 	.word	0x0800749d
 8007438:	0800749d 	.word	0x0800749d
 800743c:	0800749d 	.word	0x0800749d
 8007440:	08007479 	.word	0x08007479
 8007444:	0800749d 	.word	0x0800749d
 8007448:	0800749d 	.word	0x0800749d
 800744c:	0800749d 	.word	0x0800749d
 8007450:	0800748b 	.word	0x0800748b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68da      	ldr	r2, [r3, #12]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f042 0202 	orr.w	r2, r2, #2
 8007462:	60da      	str	r2, [r3, #12]
      break;
 8007464:	e01d      	b.n	80074a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68da      	ldr	r2, [r3, #12]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f042 0204 	orr.w	r2, r2, #4
 8007474:	60da      	str	r2, [r3, #12]
      break;
 8007476:	e014      	b.n	80074a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68da      	ldr	r2, [r3, #12]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f042 0208 	orr.w	r2, r2, #8
 8007486:	60da      	str	r2, [r3, #12]
      break;
 8007488:	e00b      	b.n	80074a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68da      	ldr	r2, [r3, #12]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f042 0210 	orr.w	r2, r2, #16
 8007498:	60da      	str	r2, [r3, #12]
      break;
 800749a:	e002      	b.n	80074a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	73fb      	strb	r3, [r7, #15]
      break;
 80074a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d14e      	bne.n	8007546 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2201      	movs	r2, #1
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	4618      	mov	r0, r3
 80074b2:	f001 f9f1 	bl	8008898 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a25      	ldr	r2, [pc, #148]	; (8007550 <HAL_TIM_IC_Start_IT+0x280>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d022      	beq.n	8007506 <HAL_TIM_IC_Start_IT+0x236>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074c8:	d01d      	beq.n	8007506 <HAL_TIM_IC_Start_IT+0x236>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a21      	ldr	r2, [pc, #132]	; (8007554 <HAL_TIM_IC_Start_IT+0x284>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d018      	beq.n	8007506 <HAL_TIM_IC_Start_IT+0x236>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a1f      	ldr	r2, [pc, #124]	; (8007558 <HAL_TIM_IC_Start_IT+0x288>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d013      	beq.n	8007506 <HAL_TIM_IC_Start_IT+0x236>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a1e      	ldr	r2, [pc, #120]	; (800755c <HAL_TIM_IC_Start_IT+0x28c>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d00e      	beq.n	8007506 <HAL_TIM_IC_Start_IT+0x236>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a1c      	ldr	r2, [pc, #112]	; (8007560 <HAL_TIM_IC_Start_IT+0x290>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d009      	beq.n	8007506 <HAL_TIM_IC_Start_IT+0x236>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a1b      	ldr	r2, [pc, #108]	; (8007564 <HAL_TIM_IC_Start_IT+0x294>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d004      	beq.n	8007506 <HAL_TIM_IC_Start_IT+0x236>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a19      	ldr	r2, [pc, #100]	; (8007568 <HAL_TIM_IC_Start_IT+0x298>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d115      	bne.n	8007532 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	689a      	ldr	r2, [r3, #8]
 800750c:	4b17      	ldr	r3, [pc, #92]	; (800756c <HAL_TIM_IC_Start_IT+0x29c>)
 800750e:	4013      	ands	r3, r2
 8007510:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2b06      	cmp	r3, #6
 8007516:	d015      	beq.n	8007544 <HAL_TIM_IC_Start_IT+0x274>
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800751e:	d011      	beq.n	8007544 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f042 0201 	orr.w	r2, r2, #1
 800752e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007530:	e008      	b.n	8007544 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f042 0201 	orr.w	r2, r2, #1
 8007540:	601a      	str	r2, [r3, #0]
 8007542:	e000      	b.n	8007546 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007544:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007546:	7bfb      	ldrb	r3, [r7, #15]
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	40010000 	.word	0x40010000
 8007554:	40000400 	.word	0x40000400
 8007558:	40000800 	.word	0x40000800
 800755c:	40000c00 	.word	0x40000c00
 8007560:	40010400 	.word	0x40010400
 8007564:	40014000 	.word	0x40014000
 8007568:	40001800 	.word	0x40001800
 800756c:	00010007 	.word	0x00010007

08007570 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	f003 0302 	and.w	r3, r3, #2
 8007582:	2b02      	cmp	r3, #2
 8007584:	d122      	bne.n	80075cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	f003 0302 	and.w	r3, r3, #2
 8007590:	2b02      	cmp	r3, #2
 8007592:	d11b      	bne.n	80075cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f06f 0202 	mvn.w	r2, #2
 800759c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	f003 0303 	and.w	r3, r3, #3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d003      	beq.n	80075ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7fb fde0 	bl	8003178 <HAL_TIM_IC_CaptureCallback>
 80075b8:	e005      	b.n	80075c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fbf8 	bl	8007db0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 fbff 	bl	8007dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	f003 0304 	and.w	r3, r3, #4
 80075d6:	2b04      	cmp	r3, #4
 80075d8:	d122      	bne.n	8007620 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	f003 0304 	and.w	r3, r3, #4
 80075e4:	2b04      	cmp	r3, #4
 80075e6:	d11b      	bne.n	8007620 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f06f 0204 	mvn.w	r2, #4
 80075f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2202      	movs	r2, #2
 80075f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	699b      	ldr	r3, [r3, #24]
 80075fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7fb fdb6 	bl	8003178 <HAL_TIM_IC_CaptureCallback>
 800760c:	e005      	b.n	800761a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fbce 	bl	8007db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fbd5 	bl	8007dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	f003 0308 	and.w	r3, r3, #8
 800762a:	2b08      	cmp	r3, #8
 800762c:	d122      	bne.n	8007674 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	f003 0308 	and.w	r3, r3, #8
 8007638:	2b08      	cmp	r3, #8
 800763a:	d11b      	bne.n	8007674 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f06f 0208 	mvn.w	r2, #8
 8007644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2204      	movs	r2, #4
 800764a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	f003 0303 	and.w	r3, r3, #3
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7fb fd8c 	bl	8003178 <HAL_TIM_IC_CaptureCallback>
 8007660:	e005      	b.n	800766e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fba4 	bl	8007db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fbab 	bl	8007dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	f003 0310 	and.w	r3, r3, #16
 800767e:	2b10      	cmp	r3, #16
 8007680:	d122      	bne.n	80076c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	f003 0310 	and.w	r3, r3, #16
 800768c:	2b10      	cmp	r3, #16
 800768e:	d11b      	bne.n	80076c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f06f 0210 	mvn.w	r2, #16
 8007698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2208      	movs	r2, #8
 800769e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	69db      	ldr	r3, [r3, #28]
 80076a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d003      	beq.n	80076b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7fb fd62 	bl	8003178 <HAL_TIM_IC_CaptureCallback>
 80076b4:	e005      	b.n	80076c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fb7a 	bl	8007db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fb81 	bl	8007dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d10e      	bne.n	80076f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	f003 0301 	and.w	r3, r3, #1
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d107      	bne.n	80076f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f06f 0201 	mvn.w	r2, #1
 80076ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7fb fd2c 	bl	800314c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076fe:	2b80      	cmp	r3, #128	; 0x80
 8007700:	d10e      	bne.n	8007720 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800770c:	2b80      	cmp	r3, #128	; 0x80
 800770e:	d107      	bne.n	8007720 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f001 f97a 	bl	8008a14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800772a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800772e:	d10e      	bne.n	800774e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800773a:	2b80      	cmp	r3, #128	; 0x80
 800773c:	d107      	bne.n	800774e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f001 f96d 	bl	8008a28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007758:	2b40      	cmp	r3, #64	; 0x40
 800775a:	d10e      	bne.n	800777a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007766:	2b40      	cmp	r3, #64	; 0x40
 8007768:	d107      	bne.n	800777a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fb2f 	bl	8007dd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	f003 0320 	and.w	r3, r3, #32
 8007784:	2b20      	cmp	r3, #32
 8007786:	d10e      	bne.n	80077a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	f003 0320 	and.w	r3, r3, #32
 8007792:	2b20      	cmp	r3, #32
 8007794:	d107      	bne.n	80077a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f06f 0220 	mvn.w	r2, #32
 800779e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f001 f92d 	bl	8008a00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077a6:	bf00      	nop
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b086      	sub	sp, #24
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	60f8      	str	r0, [r7, #12]
 80077b6:	60b9      	str	r1, [r7, #8]
 80077b8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d101      	bne.n	80077cc <HAL_TIM_IC_ConfigChannel+0x1e>
 80077c8:	2302      	movs	r3, #2
 80077ca:	e088      	b.n	80078de <HAL_TIM_IC_ConfigChannel+0x130>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d11b      	bne.n	8007812 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6818      	ldr	r0, [r3, #0]
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	6819      	ldr	r1, [r3, #0]
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	685a      	ldr	r2, [r3, #4]
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	f000 fe91 	bl	8008510 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	699a      	ldr	r2, [r3, #24]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f022 020c 	bic.w	r2, r2, #12
 80077fc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	6999      	ldr	r1, [r3, #24]
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	689a      	ldr	r2, [r3, #8]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	430a      	orrs	r2, r1
 800780e:	619a      	str	r2, [r3, #24]
 8007810:	e060      	b.n	80078d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2b04      	cmp	r3, #4
 8007816:	d11c      	bne.n	8007852 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6818      	ldr	r0, [r3, #0]
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	6819      	ldr	r1, [r3, #0]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	685a      	ldr	r2, [r3, #4]
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	f000 ff15 	bl	8008656 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	699a      	ldr	r2, [r3, #24]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800783a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6999      	ldr	r1, [r3, #24]
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	021a      	lsls	r2, r3, #8
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	430a      	orrs	r2, r1
 800784e:	619a      	str	r2, [r3, #24]
 8007850:	e040      	b.n	80078d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b08      	cmp	r3, #8
 8007856:	d11b      	bne.n	8007890 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6818      	ldr	r0, [r3, #0]
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	6819      	ldr	r1, [r3, #0]
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	685a      	ldr	r2, [r3, #4]
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	f000 ff62 	bl	8008730 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	69da      	ldr	r2, [r3, #28]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f022 020c 	bic.w	r2, r2, #12
 800787a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	69d9      	ldr	r1, [r3, #28]
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	689a      	ldr	r2, [r3, #8]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	430a      	orrs	r2, r1
 800788c:	61da      	str	r2, [r3, #28]
 800788e:	e021      	b.n	80078d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b0c      	cmp	r3, #12
 8007894:	d11c      	bne.n	80078d0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6818      	ldr	r0, [r3, #0]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	6819      	ldr	r1, [r3, #0]
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	685a      	ldr	r2, [r3, #4]
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	f000 ff7f 	bl	80087a8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	69da      	ldr	r2, [r3, #28]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80078b8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	69d9      	ldr	r1, [r3, #28]
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	021a      	lsls	r2, r3, #8
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	61da      	str	r2, [r3, #28]
 80078ce:	e001      	b.n	80078d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3718      	adds	r7, #24
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
	...

080078e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b086      	sub	sp, #24
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d101      	bne.n	8007906 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007902:	2302      	movs	r3, #2
 8007904:	e0ff      	b.n	8007b06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2b14      	cmp	r3, #20
 8007912:	f200 80f0 	bhi.w	8007af6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007916:	a201      	add	r2, pc, #4	; (adr r2, 800791c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791c:	08007971 	.word	0x08007971
 8007920:	08007af7 	.word	0x08007af7
 8007924:	08007af7 	.word	0x08007af7
 8007928:	08007af7 	.word	0x08007af7
 800792c:	080079b1 	.word	0x080079b1
 8007930:	08007af7 	.word	0x08007af7
 8007934:	08007af7 	.word	0x08007af7
 8007938:	08007af7 	.word	0x08007af7
 800793c:	080079f3 	.word	0x080079f3
 8007940:	08007af7 	.word	0x08007af7
 8007944:	08007af7 	.word	0x08007af7
 8007948:	08007af7 	.word	0x08007af7
 800794c:	08007a33 	.word	0x08007a33
 8007950:	08007af7 	.word	0x08007af7
 8007954:	08007af7 	.word	0x08007af7
 8007958:	08007af7 	.word	0x08007af7
 800795c:	08007a75 	.word	0x08007a75
 8007960:	08007af7 	.word	0x08007af7
 8007964:	08007af7 	.word	0x08007af7
 8007968:	08007af7 	.word	0x08007af7
 800796c:	08007ab5 	.word	0x08007ab5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68b9      	ldr	r1, [r7, #8]
 8007976:	4618      	mov	r0, r3
 8007978:	f000 fad8 	bl	8007f2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	699a      	ldr	r2, [r3, #24]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f042 0208 	orr.w	r2, r2, #8
 800798a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	699a      	ldr	r2, [r3, #24]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f022 0204 	bic.w	r2, r2, #4
 800799a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6999      	ldr	r1, [r3, #24]
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	691a      	ldr	r2, [r3, #16]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	430a      	orrs	r2, r1
 80079ac:	619a      	str	r2, [r3, #24]
      break;
 80079ae:	e0a5      	b.n	8007afc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68b9      	ldr	r1, [r7, #8]
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 fb2a 	bl	8008010 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	699a      	ldr	r2, [r3, #24]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	699a      	ldr	r2, [r3, #24]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	6999      	ldr	r1, [r3, #24]
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	021a      	lsls	r2, r3, #8
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	430a      	orrs	r2, r1
 80079ee:	619a      	str	r2, [r3, #24]
      break;
 80079f0:	e084      	b.n	8007afc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68b9      	ldr	r1, [r7, #8]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 fb81 	bl	8008100 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	69da      	ldr	r2, [r3, #28]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f042 0208 	orr.w	r2, r2, #8
 8007a0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	69da      	ldr	r2, [r3, #28]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f022 0204 	bic.w	r2, r2, #4
 8007a1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	69d9      	ldr	r1, [r3, #28]
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	691a      	ldr	r2, [r3, #16]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	61da      	str	r2, [r3, #28]
      break;
 8007a30:	e064      	b.n	8007afc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68b9      	ldr	r1, [r7, #8]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f000 fbd7 	bl	80081ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	69da      	ldr	r2, [r3, #28]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	69da      	ldr	r2, [r3, #28]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	69d9      	ldr	r1, [r3, #28]
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	021a      	lsls	r2, r3, #8
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	61da      	str	r2, [r3, #28]
      break;
 8007a72:	e043      	b.n	8007afc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68b9      	ldr	r1, [r7, #8]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 fc0e 	bl	800829c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f042 0208 	orr.w	r2, r2, #8
 8007a8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f022 0204 	bic.w	r2, r2, #4
 8007a9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	691a      	ldr	r2, [r3, #16]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007ab2:	e023      	b.n	8007afc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68b9      	ldr	r1, [r7, #8]
 8007aba:	4618      	mov	r0, r3
 8007abc:	f000 fc40 	bl	8008340 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ace:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ade:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	021a      	lsls	r2, r3, #8
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	430a      	orrs	r2, r1
 8007af2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007af4:	e002      	b.n	8007afc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	75fb      	strb	r3, [r7, #23]
      break;
 8007afa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3718      	adds	r7, #24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop

08007b10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d101      	bne.n	8007b2c <HAL_TIM_ConfigClockSource+0x1c>
 8007b28:	2302      	movs	r3, #2
 8007b2a:	e0b4      	b.n	8007c96 <HAL_TIM_ConfigClockSource+0x186>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2202      	movs	r2, #2
 8007b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	4b56      	ldr	r3, [pc, #344]	; (8007ca0 <HAL_TIM_ConfigClockSource+0x190>)
 8007b48:	4013      	ands	r3, r2
 8007b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b64:	d03e      	beq.n	8007be4 <HAL_TIM_ConfigClockSource+0xd4>
 8007b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b6a:	f200 8087 	bhi.w	8007c7c <HAL_TIM_ConfigClockSource+0x16c>
 8007b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b72:	f000 8086 	beq.w	8007c82 <HAL_TIM_ConfigClockSource+0x172>
 8007b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b7a:	d87f      	bhi.n	8007c7c <HAL_TIM_ConfigClockSource+0x16c>
 8007b7c:	2b70      	cmp	r3, #112	; 0x70
 8007b7e:	d01a      	beq.n	8007bb6 <HAL_TIM_ConfigClockSource+0xa6>
 8007b80:	2b70      	cmp	r3, #112	; 0x70
 8007b82:	d87b      	bhi.n	8007c7c <HAL_TIM_ConfigClockSource+0x16c>
 8007b84:	2b60      	cmp	r3, #96	; 0x60
 8007b86:	d050      	beq.n	8007c2a <HAL_TIM_ConfigClockSource+0x11a>
 8007b88:	2b60      	cmp	r3, #96	; 0x60
 8007b8a:	d877      	bhi.n	8007c7c <HAL_TIM_ConfigClockSource+0x16c>
 8007b8c:	2b50      	cmp	r3, #80	; 0x50
 8007b8e:	d03c      	beq.n	8007c0a <HAL_TIM_ConfigClockSource+0xfa>
 8007b90:	2b50      	cmp	r3, #80	; 0x50
 8007b92:	d873      	bhi.n	8007c7c <HAL_TIM_ConfigClockSource+0x16c>
 8007b94:	2b40      	cmp	r3, #64	; 0x40
 8007b96:	d058      	beq.n	8007c4a <HAL_TIM_ConfigClockSource+0x13a>
 8007b98:	2b40      	cmp	r3, #64	; 0x40
 8007b9a:	d86f      	bhi.n	8007c7c <HAL_TIM_ConfigClockSource+0x16c>
 8007b9c:	2b30      	cmp	r3, #48	; 0x30
 8007b9e:	d064      	beq.n	8007c6a <HAL_TIM_ConfigClockSource+0x15a>
 8007ba0:	2b30      	cmp	r3, #48	; 0x30
 8007ba2:	d86b      	bhi.n	8007c7c <HAL_TIM_ConfigClockSource+0x16c>
 8007ba4:	2b20      	cmp	r3, #32
 8007ba6:	d060      	beq.n	8007c6a <HAL_TIM_ConfigClockSource+0x15a>
 8007ba8:	2b20      	cmp	r3, #32
 8007baa:	d867      	bhi.n	8007c7c <HAL_TIM_ConfigClockSource+0x16c>
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d05c      	beq.n	8007c6a <HAL_TIM_ConfigClockSource+0x15a>
 8007bb0:	2b10      	cmp	r3, #16
 8007bb2:	d05a      	beq.n	8007c6a <HAL_TIM_ConfigClockSource+0x15a>
 8007bb4:	e062      	b.n	8007c7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6818      	ldr	r0, [r3, #0]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	6899      	ldr	r1, [r3, #8]
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	685a      	ldr	r2, [r3, #4]
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	f000 fe47 	bl	8008858 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007bd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	609a      	str	r2, [r3, #8]
      break;
 8007be2:	e04f      	b.n	8007c84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6818      	ldr	r0, [r3, #0]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	6899      	ldr	r1, [r3, #8]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	685a      	ldr	r2, [r3, #4]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	f000 fe30 	bl	8008858 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	689a      	ldr	r2, [r3, #8]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c06:	609a      	str	r2, [r3, #8]
      break;
 8007c08:	e03c      	b.n	8007c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6818      	ldr	r0, [r3, #0]
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	6859      	ldr	r1, [r3, #4]
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	461a      	mov	r2, r3
 8007c18:	f000 fcee 	bl	80085f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2150      	movs	r1, #80	; 0x50
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 fdfd 	bl	8008822 <TIM_ITRx_SetConfig>
      break;
 8007c28:	e02c      	b.n	8007c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6818      	ldr	r0, [r3, #0]
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	6859      	ldr	r1, [r3, #4]
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	461a      	mov	r2, r3
 8007c38:	f000 fd4a 	bl	80086d0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2160      	movs	r1, #96	; 0x60
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 fded 	bl	8008822 <TIM_ITRx_SetConfig>
      break;
 8007c48:	e01c      	b.n	8007c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6818      	ldr	r0, [r3, #0]
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	6859      	ldr	r1, [r3, #4]
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	461a      	mov	r2, r3
 8007c58:	f000 fcce 	bl	80085f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2140      	movs	r1, #64	; 0x40
 8007c62:	4618      	mov	r0, r3
 8007c64:	f000 fddd 	bl	8008822 <TIM_ITRx_SetConfig>
      break;
 8007c68:	e00c      	b.n	8007c84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4619      	mov	r1, r3
 8007c74:	4610      	mov	r0, r2
 8007c76:	f000 fdd4 	bl	8008822 <TIM_ITRx_SetConfig>
      break;
 8007c7a:	e003      	b.n	8007c84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c80:	e000      	b.n	8007c84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007c82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	fffeff88 	.word	0xfffeff88

08007ca4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d101      	bne.n	8007cbc <HAL_TIM_SlaveConfigSynchro+0x18>
 8007cb8:	2302      	movs	r3, #2
 8007cba:	e031      	b.n	8007d20 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007ccc:	6839      	ldr	r1, [r7, #0]
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fb8a 	bl	80083e8 <TIM_SlaveTimer_SetConfig>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d009      	beq.n	8007cee <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e018      	b.n	8007d20 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68da      	ldr	r2, [r3, #12]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cfc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68da      	ldr	r2, [r3, #12]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007d0c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007d32:	2300      	movs	r3, #0
 8007d34:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2b0c      	cmp	r3, #12
 8007d3a:	d831      	bhi.n	8007da0 <HAL_TIM_ReadCapturedValue+0x78>
 8007d3c:	a201      	add	r2, pc, #4	; (adr r2, 8007d44 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d42:	bf00      	nop
 8007d44:	08007d79 	.word	0x08007d79
 8007d48:	08007da1 	.word	0x08007da1
 8007d4c:	08007da1 	.word	0x08007da1
 8007d50:	08007da1 	.word	0x08007da1
 8007d54:	08007d83 	.word	0x08007d83
 8007d58:	08007da1 	.word	0x08007da1
 8007d5c:	08007da1 	.word	0x08007da1
 8007d60:	08007da1 	.word	0x08007da1
 8007d64:	08007d8d 	.word	0x08007d8d
 8007d68:	08007da1 	.word	0x08007da1
 8007d6c:	08007da1 	.word	0x08007da1
 8007d70:	08007da1 	.word	0x08007da1
 8007d74:	08007d97 	.word	0x08007d97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d7e:	60fb      	str	r3, [r7, #12]

      break;
 8007d80:	e00f      	b.n	8007da2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d88:	60fb      	str	r3, [r7, #12]

      break;
 8007d8a:	e00a      	b.n	8007da2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d92:	60fb      	str	r3, [r7, #12]

      break;
 8007d94:	e005      	b.n	8007da2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9c:	60fb      	str	r3, [r7, #12]

      break;
 8007d9e:	e000      	b.n	8007da2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007da0:	bf00      	nop
  }

  return tmpreg;
 8007da2:	68fb      	ldr	r3, [r7, #12]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3714      	adds	r7, #20
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a40      	ldr	r2, [pc, #256]	; (8007f00 <TIM_Base_SetConfig+0x114>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d013      	beq.n	8007e2c <TIM_Base_SetConfig+0x40>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e0a:	d00f      	beq.n	8007e2c <TIM_Base_SetConfig+0x40>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a3d      	ldr	r2, [pc, #244]	; (8007f04 <TIM_Base_SetConfig+0x118>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d00b      	beq.n	8007e2c <TIM_Base_SetConfig+0x40>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a3c      	ldr	r2, [pc, #240]	; (8007f08 <TIM_Base_SetConfig+0x11c>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d007      	beq.n	8007e2c <TIM_Base_SetConfig+0x40>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a3b      	ldr	r2, [pc, #236]	; (8007f0c <TIM_Base_SetConfig+0x120>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d003      	beq.n	8007e2c <TIM_Base_SetConfig+0x40>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a3a      	ldr	r2, [pc, #232]	; (8007f10 <TIM_Base_SetConfig+0x124>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d108      	bne.n	8007e3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a2f      	ldr	r2, [pc, #188]	; (8007f00 <TIM_Base_SetConfig+0x114>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d02b      	beq.n	8007e9e <TIM_Base_SetConfig+0xb2>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e4c:	d027      	beq.n	8007e9e <TIM_Base_SetConfig+0xb2>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a2c      	ldr	r2, [pc, #176]	; (8007f04 <TIM_Base_SetConfig+0x118>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d023      	beq.n	8007e9e <TIM_Base_SetConfig+0xb2>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a2b      	ldr	r2, [pc, #172]	; (8007f08 <TIM_Base_SetConfig+0x11c>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d01f      	beq.n	8007e9e <TIM_Base_SetConfig+0xb2>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a2a      	ldr	r2, [pc, #168]	; (8007f0c <TIM_Base_SetConfig+0x120>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d01b      	beq.n	8007e9e <TIM_Base_SetConfig+0xb2>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a29      	ldr	r2, [pc, #164]	; (8007f10 <TIM_Base_SetConfig+0x124>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d017      	beq.n	8007e9e <TIM_Base_SetConfig+0xb2>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a28      	ldr	r2, [pc, #160]	; (8007f14 <TIM_Base_SetConfig+0x128>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d013      	beq.n	8007e9e <TIM_Base_SetConfig+0xb2>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a27      	ldr	r2, [pc, #156]	; (8007f18 <TIM_Base_SetConfig+0x12c>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d00f      	beq.n	8007e9e <TIM_Base_SetConfig+0xb2>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a26      	ldr	r2, [pc, #152]	; (8007f1c <TIM_Base_SetConfig+0x130>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d00b      	beq.n	8007e9e <TIM_Base_SetConfig+0xb2>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a25      	ldr	r2, [pc, #148]	; (8007f20 <TIM_Base_SetConfig+0x134>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d007      	beq.n	8007e9e <TIM_Base_SetConfig+0xb2>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a24      	ldr	r2, [pc, #144]	; (8007f24 <TIM_Base_SetConfig+0x138>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d003      	beq.n	8007e9e <TIM_Base_SetConfig+0xb2>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a23      	ldr	r2, [pc, #140]	; (8007f28 <TIM_Base_SetConfig+0x13c>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d108      	bne.n	8007eb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	689a      	ldr	r2, [r3, #8]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a0a      	ldr	r2, [pc, #40]	; (8007f00 <TIM_Base_SetConfig+0x114>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d003      	beq.n	8007ee4 <TIM_Base_SetConfig+0xf8>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a0c      	ldr	r2, [pc, #48]	; (8007f10 <TIM_Base_SetConfig+0x124>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d103      	bne.n	8007eec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	691a      	ldr	r2, [r3, #16]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	615a      	str	r2, [r3, #20]
}
 8007ef2:	bf00      	nop
 8007ef4:	3714      	adds	r7, #20
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	40010000 	.word	0x40010000
 8007f04:	40000400 	.word	0x40000400
 8007f08:	40000800 	.word	0x40000800
 8007f0c:	40000c00 	.word	0x40000c00
 8007f10:	40010400 	.word	0x40010400
 8007f14:	40014000 	.word	0x40014000
 8007f18:	40014400 	.word	0x40014400
 8007f1c:	40014800 	.word	0x40014800
 8007f20:	40001800 	.word	0x40001800
 8007f24:	40001c00 	.word	0x40001c00
 8007f28:	40002000 	.word	0x40002000

08007f2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b087      	sub	sp, #28
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	f023 0201 	bic.w	r2, r3, #1
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a1b      	ldr	r3, [r3, #32]
 8007f46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	4b2b      	ldr	r3, [pc, #172]	; (8008004 <TIM_OC1_SetConfig+0xd8>)
 8007f58:	4013      	ands	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f023 0303 	bic.w	r3, r3, #3
 8007f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	f023 0302 	bic.w	r3, r3, #2
 8007f74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	697a      	ldr	r2, [r7, #20]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a21      	ldr	r2, [pc, #132]	; (8008008 <TIM_OC1_SetConfig+0xdc>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d003      	beq.n	8007f90 <TIM_OC1_SetConfig+0x64>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a20      	ldr	r2, [pc, #128]	; (800800c <TIM_OC1_SetConfig+0xe0>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d10c      	bne.n	8007faa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	f023 0308 	bic.w	r3, r3, #8
 8007f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	697a      	ldr	r2, [r7, #20]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	f023 0304 	bic.w	r3, r3, #4
 8007fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a16      	ldr	r2, [pc, #88]	; (8008008 <TIM_OC1_SetConfig+0xdc>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d003      	beq.n	8007fba <TIM_OC1_SetConfig+0x8e>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a15      	ldr	r2, [pc, #84]	; (800800c <TIM_OC1_SetConfig+0xe0>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d111      	bne.n	8007fde <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	695b      	ldr	r3, [r3, #20]
 8007fce:	693a      	ldr	r2, [r7, #16]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	693a      	ldr	r2, [r7, #16]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	621a      	str	r2, [r3, #32]
}
 8007ff8:	bf00      	nop
 8007ffa:	371c      	adds	r7, #28
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr
 8008004:	fffeff8f 	.word	0xfffeff8f
 8008008:	40010000 	.word	0x40010000
 800800c:	40010400 	.word	0x40010400

08008010 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008010:	b480      	push	{r7}
 8008012:	b087      	sub	sp, #28
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	f023 0210 	bic.w	r2, r3, #16
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a1b      	ldr	r3, [r3, #32]
 800802a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	4b2e      	ldr	r3, [pc, #184]	; (80080f4 <TIM_OC2_SetConfig+0xe4>)
 800803c:	4013      	ands	r3, r2
 800803e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008046:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	021b      	lsls	r3, r3, #8
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	4313      	orrs	r3, r2
 8008052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	f023 0320 	bic.w	r3, r3, #32
 800805a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	011b      	lsls	r3, r3, #4
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	4313      	orrs	r3, r2
 8008066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a23      	ldr	r2, [pc, #140]	; (80080f8 <TIM_OC2_SetConfig+0xe8>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d003      	beq.n	8008078 <TIM_OC2_SetConfig+0x68>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a22      	ldr	r2, [pc, #136]	; (80080fc <TIM_OC2_SetConfig+0xec>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d10d      	bne.n	8008094 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800807e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	011b      	lsls	r3, r3, #4
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	4313      	orrs	r3, r2
 800808a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008092:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a18      	ldr	r2, [pc, #96]	; (80080f8 <TIM_OC2_SetConfig+0xe8>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d003      	beq.n	80080a4 <TIM_OC2_SetConfig+0x94>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a17      	ldr	r2, [pc, #92]	; (80080fc <TIM_OC2_SetConfig+0xec>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d113      	bne.n	80080cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	695b      	ldr	r3, [r3, #20]
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	693a      	ldr	r2, [r7, #16]
 80080bc:	4313      	orrs	r3, r2
 80080be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	693a      	ldr	r2, [r7, #16]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	693a      	ldr	r2, [r7, #16]
 80080d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	685a      	ldr	r2, [r3, #4]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	621a      	str	r2, [r3, #32]
}
 80080e6:	bf00      	nop
 80080e8:	371c      	adds	r7, #28
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	feff8fff 	.word	0xfeff8fff
 80080f8:	40010000 	.word	0x40010000
 80080fc:	40010400 	.word	0x40010400

08008100 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008100:	b480      	push	{r7}
 8008102:	b087      	sub	sp, #28
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a1b      	ldr	r3, [r3, #32]
 800810e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a1b      	ldr	r3, [r3, #32]
 800811a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	69db      	ldr	r3, [r3, #28]
 8008126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	4b2d      	ldr	r3, [pc, #180]	; (80081e0 <TIM_OC3_SetConfig+0xe0>)
 800812c:	4013      	ands	r3, r2
 800812e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f023 0303 	bic.w	r3, r3, #3
 8008136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	4313      	orrs	r3, r2
 8008140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	021b      	lsls	r3, r3, #8
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	4313      	orrs	r3, r2
 8008154:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a22      	ldr	r2, [pc, #136]	; (80081e4 <TIM_OC3_SetConfig+0xe4>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d003      	beq.n	8008166 <TIM_OC3_SetConfig+0x66>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a21      	ldr	r2, [pc, #132]	; (80081e8 <TIM_OC3_SetConfig+0xe8>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d10d      	bne.n	8008182 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800816c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	021b      	lsls	r3, r3, #8
 8008174:	697a      	ldr	r2, [r7, #20]
 8008176:	4313      	orrs	r3, r2
 8008178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008180:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a17      	ldr	r2, [pc, #92]	; (80081e4 <TIM_OC3_SetConfig+0xe4>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d003      	beq.n	8008192 <TIM_OC3_SetConfig+0x92>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a16      	ldr	r2, [pc, #88]	; (80081e8 <TIM_OC3_SetConfig+0xe8>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d113      	bne.n	80081ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	695b      	ldr	r3, [r3, #20]
 80081a6:	011b      	lsls	r3, r3, #4
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	699b      	ldr	r3, [r3, #24]
 80081b2:	011b      	lsls	r3, r3, #4
 80081b4:	693a      	ldr	r2, [r7, #16]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	685a      	ldr	r2, [r3, #4]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	697a      	ldr	r2, [r7, #20]
 80081d2:	621a      	str	r2, [r3, #32]
}
 80081d4:	bf00      	nop
 80081d6:	371c      	adds	r7, #28
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr
 80081e0:	fffeff8f 	.word	0xfffeff8f
 80081e4:	40010000 	.word	0x40010000
 80081e8:	40010400 	.word	0x40010400

080081ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b087      	sub	sp, #28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	69db      	ldr	r3, [r3, #28]
 8008212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	4b1e      	ldr	r3, [pc, #120]	; (8008290 <TIM_OC4_SetConfig+0xa4>)
 8008218:	4013      	ands	r3, r2
 800821a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	021b      	lsls	r3, r3, #8
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	4313      	orrs	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	031b      	lsls	r3, r3, #12
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	4313      	orrs	r3, r2
 8008242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a13      	ldr	r2, [pc, #76]	; (8008294 <TIM_OC4_SetConfig+0xa8>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d003      	beq.n	8008254 <TIM_OC4_SetConfig+0x68>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a12      	ldr	r2, [pc, #72]	; (8008298 <TIM_OC4_SetConfig+0xac>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d109      	bne.n	8008268 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800825a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	695b      	ldr	r3, [r3, #20]
 8008260:	019b      	lsls	r3, r3, #6
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	4313      	orrs	r3, r2
 8008266:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	685a      	ldr	r2, [r3, #4]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	693a      	ldr	r2, [r7, #16]
 8008280:	621a      	str	r2, [r3, #32]
}
 8008282:	bf00      	nop
 8008284:	371c      	adds	r7, #28
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	feff8fff 	.word	0xfeff8fff
 8008294:	40010000 	.word	0x40010000
 8008298:	40010400 	.word	0x40010400

0800829c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800829c:	b480      	push	{r7}
 800829e:	b087      	sub	sp, #28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a1b      	ldr	r3, [r3, #32]
 80082b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	4b1b      	ldr	r3, [pc, #108]	; (8008334 <TIM_OC5_SetConfig+0x98>)
 80082c8:	4013      	ands	r3, r2
 80082ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80082dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	041b      	lsls	r3, r3, #16
 80082e4:	693a      	ldr	r2, [r7, #16]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a12      	ldr	r2, [pc, #72]	; (8008338 <TIM_OC5_SetConfig+0x9c>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d003      	beq.n	80082fa <TIM_OC5_SetConfig+0x5e>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a11      	ldr	r2, [pc, #68]	; (800833c <TIM_OC5_SetConfig+0xa0>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d109      	bne.n	800830e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008300:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	695b      	ldr	r3, [r3, #20]
 8008306:	021b      	lsls	r3, r3, #8
 8008308:	697a      	ldr	r2, [r7, #20]
 800830a:	4313      	orrs	r3, r2
 800830c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	697a      	ldr	r2, [r7, #20]
 8008312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	68fa      	ldr	r2, [r7, #12]
 8008318:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	685a      	ldr	r2, [r3, #4]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	693a      	ldr	r2, [r7, #16]
 8008326:	621a      	str	r2, [r3, #32]
}
 8008328:	bf00      	nop
 800832a:	371c      	adds	r7, #28
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr
 8008334:	fffeff8f 	.word	0xfffeff8f
 8008338:	40010000 	.word	0x40010000
 800833c:	40010400 	.word	0x40010400

08008340 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008340:	b480      	push	{r7}
 8008342:	b087      	sub	sp, #28
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	4b1c      	ldr	r3, [pc, #112]	; (80083dc <TIM_OC6_SetConfig+0x9c>)
 800836c:	4013      	ands	r3, r2
 800836e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	021b      	lsls	r3, r3, #8
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	4313      	orrs	r3, r2
 800837a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008382:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	051b      	lsls	r3, r3, #20
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	4313      	orrs	r3, r2
 800838e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a13      	ldr	r2, [pc, #76]	; (80083e0 <TIM_OC6_SetConfig+0xa0>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d003      	beq.n	80083a0 <TIM_OC6_SetConfig+0x60>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a12      	ldr	r2, [pc, #72]	; (80083e4 <TIM_OC6_SetConfig+0xa4>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d109      	bne.n	80083b4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	695b      	ldr	r3, [r3, #20]
 80083ac:	029b      	lsls	r3, r3, #10
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	685a      	ldr	r2, [r3, #4]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	693a      	ldr	r2, [r7, #16]
 80083cc:	621a      	str	r2, [r3, #32]
}
 80083ce:	bf00      	nop
 80083d0:	371c      	adds	r7, #28
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	feff8fff 	.word	0xfeff8fff
 80083e0:	40010000 	.word	0x40010000
 80083e4:	40010400 	.word	0x40010400

080083e8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b086      	sub	sp, #24
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083f2:	2300      	movs	r3, #0
 80083f4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008404:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	693a      	ldr	r2, [r7, #16]
 800840c:	4313      	orrs	r3, r2
 800840e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008410:	693a      	ldr	r2, [r7, #16]
 8008412:	4b3e      	ldr	r3, [pc, #248]	; (800850c <TIM_SlaveTimer_SetConfig+0x124>)
 8008414:	4013      	ands	r3, r2
 8008416:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	693a      	ldr	r2, [r7, #16]
 800841e:	4313      	orrs	r3, r2
 8008420:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	2b70      	cmp	r3, #112	; 0x70
 8008430:	d01a      	beq.n	8008468 <TIM_SlaveTimer_SetConfig+0x80>
 8008432:	2b70      	cmp	r3, #112	; 0x70
 8008434:	d860      	bhi.n	80084f8 <TIM_SlaveTimer_SetConfig+0x110>
 8008436:	2b60      	cmp	r3, #96	; 0x60
 8008438:	d054      	beq.n	80084e4 <TIM_SlaveTimer_SetConfig+0xfc>
 800843a:	2b60      	cmp	r3, #96	; 0x60
 800843c:	d85c      	bhi.n	80084f8 <TIM_SlaveTimer_SetConfig+0x110>
 800843e:	2b50      	cmp	r3, #80	; 0x50
 8008440:	d046      	beq.n	80084d0 <TIM_SlaveTimer_SetConfig+0xe8>
 8008442:	2b50      	cmp	r3, #80	; 0x50
 8008444:	d858      	bhi.n	80084f8 <TIM_SlaveTimer_SetConfig+0x110>
 8008446:	2b40      	cmp	r3, #64	; 0x40
 8008448:	d019      	beq.n	800847e <TIM_SlaveTimer_SetConfig+0x96>
 800844a:	2b40      	cmp	r3, #64	; 0x40
 800844c:	d854      	bhi.n	80084f8 <TIM_SlaveTimer_SetConfig+0x110>
 800844e:	2b30      	cmp	r3, #48	; 0x30
 8008450:	d055      	beq.n	80084fe <TIM_SlaveTimer_SetConfig+0x116>
 8008452:	2b30      	cmp	r3, #48	; 0x30
 8008454:	d850      	bhi.n	80084f8 <TIM_SlaveTimer_SetConfig+0x110>
 8008456:	2b20      	cmp	r3, #32
 8008458:	d051      	beq.n	80084fe <TIM_SlaveTimer_SetConfig+0x116>
 800845a:	2b20      	cmp	r3, #32
 800845c:	d84c      	bhi.n	80084f8 <TIM_SlaveTimer_SetConfig+0x110>
 800845e:	2b00      	cmp	r3, #0
 8008460:	d04d      	beq.n	80084fe <TIM_SlaveTimer_SetConfig+0x116>
 8008462:	2b10      	cmp	r3, #16
 8008464:	d04b      	beq.n	80084fe <TIM_SlaveTimer_SetConfig+0x116>
 8008466:	e047      	b.n	80084f8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6818      	ldr	r0, [r3, #0]
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	68d9      	ldr	r1, [r3, #12]
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	689a      	ldr	r2, [r3, #8]
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	f000 f9ee 	bl	8008858 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800847c:	e040      	b.n	8008500 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2b05      	cmp	r3, #5
 8008484:	d101      	bne.n	800848a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e03b      	b.n	8008502 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	6a1b      	ldr	r3, [r3, #32]
 8008490:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	6a1a      	ldr	r2, [r3, #32]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f022 0201 	bic.w	r2, r2, #1
 80084a0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	699b      	ldr	r3, [r3, #24]
 80084a8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084b0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	011b      	lsls	r3, r3, #4
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	621a      	str	r2, [r3, #32]
      break;
 80084ce:	e017      	b.n	8008500 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6818      	ldr	r0, [r3, #0]
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	6899      	ldr	r1, [r3, #8]
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	461a      	mov	r2, r3
 80084de:	f000 f88b 	bl	80085f8 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80084e2:	e00d      	b.n	8008500 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6818      	ldr	r0, [r3, #0]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	6899      	ldr	r1, [r3, #8]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	461a      	mov	r2, r3
 80084f2:	f000 f8ed 	bl	80086d0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80084f6:	e003      	b.n	8008500 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	75fb      	strb	r3, [r7, #23]
      break;
 80084fc:	e000      	b.n	8008500 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80084fe:	bf00      	nop
  }

  return status;
 8008500:	7dfb      	ldrb	r3, [r7, #23]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3718      	adds	r7, #24
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	fffefff8 	.word	0xfffefff8

08008510 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008510:	b480      	push	{r7}
 8008512:	b087      	sub	sp, #28
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
 800851c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6a1b      	ldr	r3, [r3, #32]
 8008522:	f023 0201 	bic.w	r2, r3, #1
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	699b      	ldr	r3, [r3, #24]
 800852e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6a1b      	ldr	r3, [r3, #32]
 8008534:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	4a28      	ldr	r2, [pc, #160]	; (80085dc <TIM_TI1_SetConfig+0xcc>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d01b      	beq.n	8008576 <TIM_TI1_SetConfig+0x66>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008544:	d017      	beq.n	8008576 <TIM_TI1_SetConfig+0x66>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	4a25      	ldr	r2, [pc, #148]	; (80085e0 <TIM_TI1_SetConfig+0xd0>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d013      	beq.n	8008576 <TIM_TI1_SetConfig+0x66>
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	4a24      	ldr	r2, [pc, #144]	; (80085e4 <TIM_TI1_SetConfig+0xd4>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d00f      	beq.n	8008576 <TIM_TI1_SetConfig+0x66>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	4a23      	ldr	r2, [pc, #140]	; (80085e8 <TIM_TI1_SetConfig+0xd8>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d00b      	beq.n	8008576 <TIM_TI1_SetConfig+0x66>
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	4a22      	ldr	r2, [pc, #136]	; (80085ec <TIM_TI1_SetConfig+0xdc>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d007      	beq.n	8008576 <TIM_TI1_SetConfig+0x66>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	4a21      	ldr	r2, [pc, #132]	; (80085f0 <TIM_TI1_SetConfig+0xe0>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d003      	beq.n	8008576 <TIM_TI1_SetConfig+0x66>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	4a20      	ldr	r2, [pc, #128]	; (80085f4 <TIM_TI1_SetConfig+0xe4>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d101      	bne.n	800857a <TIM_TI1_SetConfig+0x6a>
 8008576:	2301      	movs	r3, #1
 8008578:	e000      	b.n	800857c <TIM_TI1_SetConfig+0x6c>
 800857a:	2300      	movs	r3, #0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d008      	beq.n	8008592 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	f023 0303 	bic.w	r3, r3, #3
 8008586:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008588:	697a      	ldr	r2, [r7, #20]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4313      	orrs	r3, r2
 800858e:	617b      	str	r3, [r7, #20]
 8008590:	e003      	b.n	800859a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	f043 0301 	orr.w	r3, r3, #1
 8008598:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	011b      	lsls	r3, r3, #4
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	697a      	ldr	r2, [r7, #20]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	f023 030a 	bic.w	r3, r3, #10
 80085b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	f003 030a 	and.w	r3, r3, #10
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	4313      	orrs	r3, r2
 80085c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	697a      	ldr	r2, [r7, #20]
 80085c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	693a      	ldr	r2, [r7, #16]
 80085cc:	621a      	str	r2, [r3, #32]
}
 80085ce:	bf00      	nop
 80085d0:	371c      	adds	r7, #28
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	40010000 	.word	0x40010000
 80085e0:	40000400 	.word	0x40000400
 80085e4:	40000800 	.word	0x40000800
 80085e8:	40000c00 	.word	0x40000c00
 80085ec:	40010400 	.word	0x40010400
 80085f0:	40014000 	.word	0x40014000
 80085f4:	40001800 	.word	0x40001800

080085f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b087      	sub	sp, #28
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6a1b      	ldr	r3, [r3, #32]
 8008608:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6a1b      	ldr	r3, [r3, #32]
 800860e:	f023 0201 	bic.w	r2, r3, #1
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	011b      	lsls	r3, r3, #4
 8008628:	693a      	ldr	r2, [r7, #16]
 800862a:	4313      	orrs	r3, r2
 800862c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	f023 030a 	bic.w	r3, r3, #10
 8008634:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	4313      	orrs	r3, r2
 800863c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	693a      	ldr	r2, [r7, #16]
 8008642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	621a      	str	r2, [r3, #32]
}
 800864a:	bf00      	nop
 800864c:	371c      	adds	r7, #28
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr

08008656 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008656:	b480      	push	{r7}
 8008658:	b087      	sub	sp, #28
 800865a:	af00      	add	r7, sp, #0
 800865c:	60f8      	str	r0, [r7, #12]
 800865e:	60b9      	str	r1, [r7, #8]
 8008660:	607a      	str	r2, [r7, #4]
 8008662:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6a1b      	ldr	r3, [r3, #32]
 8008668:	f023 0210 	bic.w	r2, r3, #16
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6a1b      	ldr	r3, [r3, #32]
 800867a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008682:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	021b      	lsls	r3, r3, #8
 8008688:	697a      	ldr	r2, [r7, #20]
 800868a:	4313      	orrs	r3, r2
 800868c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008694:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	031b      	lsls	r3, r3, #12
 800869a:	b29b      	uxth	r3, r3
 800869c:	697a      	ldr	r2, [r7, #20]
 800869e:	4313      	orrs	r3, r2
 80086a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80086a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	011b      	lsls	r3, r3, #4
 80086ae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80086b2:	693a      	ldr	r2, [r7, #16]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	697a      	ldr	r2, [r7, #20]
 80086bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	621a      	str	r2, [r3, #32]
}
 80086c4:	bf00      	nop
 80086c6:	371c      	adds	r7, #28
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b087      	sub	sp, #28
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6a1b      	ldr	r3, [r3, #32]
 80086e0:	f023 0210 	bic.w	r2, r3, #16
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	699b      	ldr	r3, [r3, #24]
 80086ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6a1b      	ldr	r3, [r3, #32]
 80086f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	031b      	lsls	r3, r3, #12
 8008700:	697a      	ldr	r2, [r7, #20]
 8008702:	4313      	orrs	r3, r2
 8008704:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800870c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	011b      	lsls	r3, r3, #4
 8008712:	693a      	ldr	r2, [r7, #16]
 8008714:	4313      	orrs	r3, r2
 8008716:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	697a      	ldr	r2, [r7, #20]
 800871c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	693a      	ldr	r2, [r7, #16]
 8008722:	621a      	str	r2, [r3, #32]
}
 8008724:	bf00      	nop
 8008726:	371c      	adds	r7, #28
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008730:	b480      	push	{r7}
 8008732:	b087      	sub	sp, #28
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
 800873c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6a1b      	ldr	r3, [r3, #32]
 8008742:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	69db      	ldr	r3, [r3, #28]
 800874e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6a1b      	ldr	r3, [r3, #32]
 8008754:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f023 0303 	bic.w	r3, r3, #3
 800875c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800875e:	697a      	ldr	r2, [r7, #20]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4313      	orrs	r3, r2
 8008764:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800876c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	011b      	lsls	r3, r3, #4
 8008772:	b2db      	uxtb	r3, r3
 8008774:	697a      	ldr	r2, [r7, #20]
 8008776:	4313      	orrs	r3, r2
 8008778:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008780:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	021b      	lsls	r3, r3, #8
 8008786:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800878a:	693a      	ldr	r2, [r7, #16]
 800878c:	4313      	orrs	r3, r2
 800878e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	697a      	ldr	r2, [r7, #20]
 8008794:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	621a      	str	r2, [r3, #32]
}
 800879c:	bf00      	nop
 800879e:	371c      	adds	r7, #28
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b087      	sub	sp, #28
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	607a      	str	r2, [r7, #4]
 80087b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	69db      	ldr	r3, [r3, #28]
 80087c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6a1b      	ldr	r3, [r3, #32]
 80087cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	021b      	lsls	r3, r3, #8
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	4313      	orrs	r3, r2
 80087de:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80087e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	031b      	lsls	r3, r3, #12
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	697a      	ldr	r2, [r7, #20]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80087fa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	031b      	lsls	r3, r3, #12
 8008800:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008804:	693a      	ldr	r2, [r7, #16]
 8008806:	4313      	orrs	r3, r2
 8008808:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	697a      	ldr	r2, [r7, #20]
 800880e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	693a      	ldr	r2, [r7, #16]
 8008814:	621a      	str	r2, [r3, #32]
}
 8008816:	bf00      	nop
 8008818:	371c      	adds	r7, #28
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr

08008822 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008822:	b480      	push	{r7}
 8008824:	b085      	sub	sp, #20
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
 800882a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008838:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800883a:	683a      	ldr	r2, [r7, #0]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	4313      	orrs	r3, r2
 8008840:	f043 0307 	orr.w	r3, r3, #7
 8008844:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	609a      	str	r2, [r3, #8]
}
 800884c:	bf00      	nop
 800884e:	3714      	adds	r7, #20
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008858:	b480      	push	{r7}
 800885a:	b087      	sub	sp, #28
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	607a      	str	r2, [r7, #4]
 8008864:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008872:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	021a      	lsls	r2, r3, #8
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	431a      	orrs	r2, r3
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	4313      	orrs	r3, r2
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	4313      	orrs	r3, r2
 8008884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	697a      	ldr	r2, [r7, #20]
 800888a:	609a      	str	r2, [r3, #8]
}
 800888c:	bf00      	nop
 800888e:	371c      	adds	r7, #28
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008898:	b480      	push	{r7}
 800889a:	b087      	sub	sp, #28
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	f003 031f 	and.w	r3, r3, #31
 80088aa:	2201      	movs	r2, #1
 80088ac:	fa02 f303 	lsl.w	r3, r2, r3
 80088b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6a1a      	ldr	r2, [r3, #32]
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	43db      	mvns	r3, r3
 80088ba:	401a      	ands	r2, r3
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6a1a      	ldr	r2, [r3, #32]
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	f003 031f 	and.w	r3, r3, #31
 80088ca:	6879      	ldr	r1, [r7, #4]
 80088cc:	fa01 f303 	lsl.w	r3, r1, r3
 80088d0:	431a      	orrs	r2, r3
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	621a      	str	r2, [r3, #32]
}
 80088d6:	bf00      	nop
 80088d8:	371c      	adds	r7, #28
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr
	...

080088e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d101      	bne.n	80088fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088f8:	2302      	movs	r3, #2
 80088fa:	e06d      	b.n	80089d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2202      	movs	r2, #2
 8008908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a30      	ldr	r2, [pc, #192]	; (80089e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d004      	beq.n	8008930 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a2f      	ldr	r2, [pc, #188]	; (80089e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d108      	bne.n	8008942 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008936:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	4313      	orrs	r3, r2
 8008940:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008948:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	4313      	orrs	r3, r2
 8008952:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a20      	ldr	r2, [pc, #128]	; (80089e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d022      	beq.n	80089ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800896e:	d01d      	beq.n	80089ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a1d      	ldr	r2, [pc, #116]	; (80089ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d018      	beq.n	80089ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a1c      	ldr	r2, [pc, #112]	; (80089f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d013      	beq.n	80089ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a1a      	ldr	r2, [pc, #104]	; (80089f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d00e      	beq.n	80089ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a15      	ldr	r2, [pc, #84]	; (80089e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d009      	beq.n	80089ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a16      	ldr	r2, [pc, #88]	; (80089f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d004      	beq.n	80089ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a15      	ldr	r2, [pc, #84]	; (80089fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d10c      	bne.n	80089c6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	68ba      	ldr	r2, [r7, #8]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2201      	movs	r2, #1
 80089ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr
 80089e4:	40010000 	.word	0x40010000
 80089e8:	40010400 	.word	0x40010400
 80089ec:	40000400 	.word	0x40000400
 80089f0:	40000800 	.word	0x40000800
 80089f4:	40000c00 	.word	0x40000c00
 80089f8:	40014000 	.word	0x40014000
 80089fc:	40001800 	.word	0x40001800

08008a00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a1c:	bf00      	nop
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d101      	bne.n	8008a4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e040      	b.n	8008ad0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d106      	bne.n	8008a64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f7fa ffd0 	bl	8003a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2224      	movs	r2, #36	; 0x24
 8008a68:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f022 0201 	bic.w	r2, r2, #1
 8008a78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 f8c0 	bl	8008c00 <UART_SetConfig>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d101      	bne.n	8008a8a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e022      	b.n	8008ad0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d002      	beq.n	8008a98 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fb18 	bl	80090c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	685a      	ldr	r2, [r3, #4]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008aa6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	689a      	ldr	r2, [r3, #8]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ab6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f042 0201 	orr.w	r2, r2, #1
 8008ac6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 fb9f 	bl	800920c <UART_CheckIdleState>
 8008ace:	4603      	mov	r3, r0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b08a      	sub	sp, #40	; 0x28
 8008adc:	af02      	add	r7, sp, #8
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	603b      	str	r3, [r7, #0]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008aec:	2b20      	cmp	r3, #32
 8008aee:	f040 8081 	bne.w	8008bf4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d002      	beq.n	8008afe <HAL_UART_Transmit+0x26>
 8008af8:	88fb      	ldrh	r3, [r7, #6]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d101      	bne.n	8008b02 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e079      	b.n	8008bf6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d101      	bne.n	8008b10 <HAL_UART_Transmit+0x38>
 8008b0c:	2302      	movs	r3, #2
 8008b0e:	e072      	b.n	8008bf6 <HAL_UART_Transmit+0x11e>
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2221      	movs	r2, #33	; 0x21
 8008b24:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b26:	f7fb f845 	bl	8003bb4 <HAL_GetTick>
 8008b2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	88fa      	ldrh	r2, [r7, #6]
 8008b30:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	88fa      	ldrh	r2, [r7, #6]
 8008b38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b44:	d108      	bne.n	8008b58 <HAL_UART_Transmit+0x80>
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d104      	bne.n	8008b58 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	61bb      	str	r3, [r7, #24]
 8008b56:	e003      	b.n	8008b60 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008b68:	e02c      	b.n	8008bc4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	9300      	str	r3, [sp, #0]
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	2200      	movs	r2, #0
 8008b72:	2180      	movs	r1, #128	; 0x80
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f000 fb92 	bl	800929e <UART_WaitOnFlagUntilTimeout>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d001      	beq.n	8008b84 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008b80:	2303      	movs	r3, #3
 8008b82:	e038      	b.n	8008bf6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10b      	bne.n	8008ba2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	881b      	ldrh	r3, [r3, #0]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b98:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	3302      	adds	r3, #2
 8008b9e:	61bb      	str	r3, [r7, #24]
 8008ba0:	e007      	b.n	8008bb2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	781a      	ldrb	r2, [r3, #0]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1cc      	bne.n	8008b6a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	2140      	movs	r1, #64	; 0x40
 8008bda:	68f8      	ldr	r0, [r7, #12]
 8008bdc:	f000 fb5f 	bl	800929e <UART_WaitOnFlagUntilTimeout>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d001      	beq.n	8008bea <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8008be6:	2303      	movs	r3, #3
 8008be8:	e005      	b.n	8008bf6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2220      	movs	r2, #32
 8008bee:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	e000      	b.n	8008bf6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8008bf4:	2302      	movs	r3, #2
  }
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3720      	adds	r7, #32
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
	...

08008c00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b088      	sub	sp, #32
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	689a      	ldr	r2, [r3, #8]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	431a      	orrs	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	695b      	ldr	r3, [r3, #20]
 8008c1a:	431a      	orrs	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	69db      	ldr	r3, [r3, #28]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	4ba6      	ldr	r3, [pc, #664]	; (8008ec4 <UART_SetConfig+0x2c4>)
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	6812      	ldr	r2, [r2, #0]
 8008c32:	6979      	ldr	r1, [r7, #20]
 8008c34:	430b      	orrs	r3, r1
 8008c36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	68da      	ldr	r2, [r3, #12]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	430a      	orrs	r2, r1
 8008c4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	699b      	ldr	r3, [r3, #24]
 8008c52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6a1b      	ldr	r3, [r3, #32]
 8008c58:	697a      	ldr	r2, [r7, #20]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	697a      	ldr	r2, [r7, #20]
 8008c6e:	430a      	orrs	r2, r1
 8008c70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a94      	ldr	r2, [pc, #592]	; (8008ec8 <UART_SetConfig+0x2c8>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d120      	bne.n	8008cbe <UART_SetConfig+0xbe>
 8008c7c:	4b93      	ldr	r3, [pc, #588]	; (8008ecc <UART_SetConfig+0x2cc>)
 8008c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c82:	f003 0303 	and.w	r3, r3, #3
 8008c86:	2b03      	cmp	r3, #3
 8008c88:	d816      	bhi.n	8008cb8 <UART_SetConfig+0xb8>
 8008c8a:	a201      	add	r2, pc, #4	; (adr r2, 8008c90 <UART_SetConfig+0x90>)
 8008c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c90:	08008ca1 	.word	0x08008ca1
 8008c94:	08008cad 	.word	0x08008cad
 8008c98:	08008ca7 	.word	0x08008ca7
 8008c9c:	08008cb3 	.word	0x08008cb3
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	77fb      	strb	r3, [r7, #31]
 8008ca4:	e150      	b.n	8008f48 <UART_SetConfig+0x348>
 8008ca6:	2302      	movs	r3, #2
 8008ca8:	77fb      	strb	r3, [r7, #31]
 8008caa:	e14d      	b.n	8008f48 <UART_SetConfig+0x348>
 8008cac:	2304      	movs	r3, #4
 8008cae:	77fb      	strb	r3, [r7, #31]
 8008cb0:	e14a      	b.n	8008f48 <UART_SetConfig+0x348>
 8008cb2:	2308      	movs	r3, #8
 8008cb4:	77fb      	strb	r3, [r7, #31]
 8008cb6:	e147      	b.n	8008f48 <UART_SetConfig+0x348>
 8008cb8:	2310      	movs	r3, #16
 8008cba:	77fb      	strb	r3, [r7, #31]
 8008cbc:	e144      	b.n	8008f48 <UART_SetConfig+0x348>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a83      	ldr	r2, [pc, #524]	; (8008ed0 <UART_SetConfig+0x2d0>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d132      	bne.n	8008d2e <UART_SetConfig+0x12e>
 8008cc8:	4b80      	ldr	r3, [pc, #512]	; (8008ecc <UART_SetConfig+0x2cc>)
 8008cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cce:	f003 030c 	and.w	r3, r3, #12
 8008cd2:	2b0c      	cmp	r3, #12
 8008cd4:	d828      	bhi.n	8008d28 <UART_SetConfig+0x128>
 8008cd6:	a201      	add	r2, pc, #4	; (adr r2, 8008cdc <UART_SetConfig+0xdc>)
 8008cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cdc:	08008d11 	.word	0x08008d11
 8008ce0:	08008d29 	.word	0x08008d29
 8008ce4:	08008d29 	.word	0x08008d29
 8008ce8:	08008d29 	.word	0x08008d29
 8008cec:	08008d1d 	.word	0x08008d1d
 8008cf0:	08008d29 	.word	0x08008d29
 8008cf4:	08008d29 	.word	0x08008d29
 8008cf8:	08008d29 	.word	0x08008d29
 8008cfc:	08008d17 	.word	0x08008d17
 8008d00:	08008d29 	.word	0x08008d29
 8008d04:	08008d29 	.word	0x08008d29
 8008d08:	08008d29 	.word	0x08008d29
 8008d0c:	08008d23 	.word	0x08008d23
 8008d10:	2300      	movs	r3, #0
 8008d12:	77fb      	strb	r3, [r7, #31]
 8008d14:	e118      	b.n	8008f48 <UART_SetConfig+0x348>
 8008d16:	2302      	movs	r3, #2
 8008d18:	77fb      	strb	r3, [r7, #31]
 8008d1a:	e115      	b.n	8008f48 <UART_SetConfig+0x348>
 8008d1c:	2304      	movs	r3, #4
 8008d1e:	77fb      	strb	r3, [r7, #31]
 8008d20:	e112      	b.n	8008f48 <UART_SetConfig+0x348>
 8008d22:	2308      	movs	r3, #8
 8008d24:	77fb      	strb	r3, [r7, #31]
 8008d26:	e10f      	b.n	8008f48 <UART_SetConfig+0x348>
 8008d28:	2310      	movs	r3, #16
 8008d2a:	77fb      	strb	r3, [r7, #31]
 8008d2c:	e10c      	b.n	8008f48 <UART_SetConfig+0x348>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a68      	ldr	r2, [pc, #416]	; (8008ed4 <UART_SetConfig+0x2d4>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d120      	bne.n	8008d7a <UART_SetConfig+0x17a>
 8008d38:	4b64      	ldr	r3, [pc, #400]	; (8008ecc <UART_SetConfig+0x2cc>)
 8008d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d3e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008d42:	2b30      	cmp	r3, #48	; 0x30
 8008d44:	d013      	beq.n	8008d6e <UART_SetConfig+0x16e>
 8008d46:	2b30      	cmp	r3, #48	; 0x30
 8008d48:	d814      	bhi.n	8008d74 <UART_SetConfig+0x174>
 8008d4a:	2b20      	cmp	r3, #32
 8008d4c:	d009      	beq.n	8008d62 <UART_SetConfig+0x162>
 8008d4e:	2b20      	cmp	r3, #32
 8008d50:	d810      	bhi.n	8008d74 <UART_SetConfig+0x174>
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d002      	beq.n	8008d5c <UART_SetConfig+0x15c>
 8008d56:	2b10      	cmp	r3, #16
 8008d58:	d006      	beq.n	8008d68 <UART_SetConfig+0x168>
 8008d5a:	e00b      	b.n	8008d74 <UART_SetConfig+0x174>
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	77fb      	strb	r3, [r7, #31]
 8008d60:	e0f2      	b.n	8008f48 <UART_SetConfig+0x348>
 8008d62:	2302      	movs	r3, #2
 8008d64:	77fb      	strb	r3, [r7, #31]
 8008d66:	e0ef      	b.n	8008f48 <UART_SetConfig+0x348>
 8008d68:	2304      	movs	r3, #4
 8008d6a:	77fb      	strb	r3, [r7, #31]
 8008d6c:	e0ec      	b.n	8008f48 <UART_SetConfig+0x348>
 8008d6e:	2308      	movs	r3, #8
 8008d70:	77fb      	strb	r3, [r7, #31]
 8008d72:	e0e9      	b.n	8008f48 <UART_SetConfig+0x348>
 8008d74:	2310      	movs	r3, #16
 8008d76:	77fb      	strb	r3, [r7, #31]
 8008d78:	e0e6      	b.n	8008f48 <UART_SetConfig+0x348>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a56      	ldr	r2, [pc, #344]	; (8008ed8 <UART_SetConfig+0x2d8>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d120      	bne.n	8008dc6 <UART_SetConfig+0x1c6>
 8008d84:	4b51      	ldr	r3, [pc, #324]	; (8008ecc <UART_SetConfig+0x2cc>)
 8008d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008d8e:	2bc0      	cmp	r3, #192	; 0xc0
 8008d90:	d013      	beq.n	8008dba <UART_SetConfig+0x1ba>
 8008d92:	2bc0      	cmp	r3, #192	; 0xc0
 8008d94:	d814      	bhi.n	8008dc0 <UART_SetConfig+0x1c0>
 8008d96:	2b80      	cmp	r3, #128	; 0x80
 8008d98:	d009      	beq.n	8008dae <UART_SetConfig+0x1ae>
 8008d9a:	2b80      	cmp	r3, #128	; 0x80
 8008d9c:	d810      	bhi.n	8008dc0 <UART_SetConfig+0x1c0>
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d002      	beq.n	8008da8 <UART_SetConfig+0x1a8>
 8008da2:	2b40      	cmp	r3, #64	; 0x40
 8008da4:	d006      	beq.n	8008db4 <UART_SetConfig+0x1b4>
 8008da6:	e00b      	b.n	8008dc0 <UART_SetConfig+0x1c0>
 8008da8:	2300      	movs	r3, #0
 8008daa:	77fb      	strb	r3, [r7, #31]
 8008dac:	e0cc      	b.n	8008f48 <UART_SetConfig+0x348>
 8008dae:	2302      	movs	r3, #2
 8008db0:	77fb      	strb	r3, [r7, #31]
 8008db2:	e0c9      	b.n	8008f48 <UART_SetConfig+0x348>
 8008db4:	2304      	movs	r3, #4
 8008db6:	77fb      	strb	r3, [r7, #31]
 8008db8:	e0c6      	b.n	8008f48 <UART_SetConfig+0x348>
 8008dba:	2308      	movs	r3, #8
 8008dbc:	77fb      	strb	r3, [r7, #31]
 8008dbe:	e0c3      	b.n	8008f48 <UART_SetConfig+0x348>
 8008dc0:	2310      	movs	r3, #16
 8008dc2:	77fb      	strb	r3, [r7, #31]
 8008dc4:	e0c0      	b.n	8008f48 <UART_SetConfig+0x348>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a44      	ldr	r2, [pc, #272]	; (8008edc <UART_SetConfig+0x2dc>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d125      	bne.n	8008e1c <UART_SetConfig+0x21c>
 8008dd0:	4b3e      	ldr	r3, [pc, #248]	; (8008ecc <UART_SetConfig+0x2cc>)
 8008dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dde:	d017      	beq.n	8008e10 <UART_SetConfig+0x210>
 8008de0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008de4:	d817      	bhi.n	8008e16 <UART_SetConfig+0x216>
 8008de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dea:	d00b      	beq.n	8008e04 <UART_SetConfig+0x204>
 8008dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008df0:	d811      	bhi.n	8008e16 <UART_SetConfig+0x216>
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d003      	beq.n	8008dfe <UART_SetConfig+0x1fe>
 8008df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dfa:	d006      	beq.n	8008e0a <UART_SetConfig+0x20a>
 8008dfc:	e00b      	b.n	8008e16 <UART_SetConfig+0x216>
 8008dfe:	2300      	movs	r3, #0
 8008e00:	77fb      	strb	r3, [r7, #31]
 8008e02:	e0a1      	b.n	8008f48 <UART_SetConfig+0x348>
 8008e04:	2302      	movs	r3, #2
 8008e06:	77fb      	strb	r3, [r7, #31]
 8008e08:	e09e      	b.n	8008f48 <UART_SetConfig+0x348>
 8008e0a:	2304      	movs	r3, #4
 8008e0c:	77fb      	strb	r3, [r7, #31]
 8008e0e:	e09b      	b.n	8008f48 <UART_SetConfig+0x348>
 8008e10:	2308      	movs	r3, #8
 8008e12:	77fb      	strb	r3, [r7, #31]
 8008e14:	e098      	b.n	8008f48 <UART_SetConfig+0x348>
 8008e16:	2310      	movs	r3, #16
 8008e18:	77fb      	strb	r3, [r7, #31]
 8008e1a:	e095      	b.n	8008f48 <UART_SetConfig+0x348>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a2f      	ldr	r2, [pc, #188]	; (8008ee0 <UART_SetConfig+0x2e0>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d125      	bne.n	8008e72 <UART_SetConfig+0x272>
 8008e26:	4b29      	ldr	r3, [pc, #164]	; (8008ecc <UART_SetConfig+0x2cc>)
 8008e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008e30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e34:	d017      	beq.n	8008e66 <UART_SetConfig+0x266>
 8008e36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e3a:	d817      	bhi.n	8008e6c <UART_SetConfig+0x26c>
 8008e3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e40:	d00b      	beq.n	8008e5a <UART_SetConfig+0x25a>
 8008e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e46:	d811      	bhi.n	8008e6c <UART_SetConfig+0x26c>
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d003      	beq.n	8008e54 <UART_SetConfig+0x254>
 8008e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e50:	d006      	beq.n	8008e60 <UART_SetConfig+0x260>
 8008e52:	e00b      	b.n	8008e6c <UART_SetConfig+0x26c>
 8008e54:	2301      	movs	r3, #1
 8008e56:	77fb      	strb	r3, [r7, #31]
 8008e58:	e076      	b.n	8008f48 <UART_SetConfig+0x348>
 8008e5a:	2302      	movs	r3, #2
 8008e5c:	77fb      	strb	r3, [r7, #31]
 8008e5e:	e073      	b.n	8008f48 <UART_SetConfig+0x348>
 8008e60:	2304      	movs	r3, #4
 8008e62:	77fb      	strb	r3, [r7, #31]
 8008e64:	e070      	b.n	8008f48 <UART_SetConfig+0x348>
 8008e66:	2308      	movs	r3, #8
 8008e68:	77fb      	strb	r3, [r7, #31]
 8008e6a:	e06d      	b.n	8008f48 <UART_SetConfig+0x348>
 8008e6c:	2310      	movs	r3, #16
 8008e6e:	77fb      	strb	r3, [r7, #31]
 8008e70:	e06a      	b.n	8008f48 <UART_SetConfig+0x348>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a1b      	ldr	r2, [pc, #108]	; (8008ee4 <UART_SetConfig+0x2e4>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d138      	bne.n	8008eee <UART_SetConfig+0x2ee>
 8008e7c:	4b13      	ldr	r3, [pc, #76]	; (8008ecc <UART_SetConfig+0x2cc>)
 8008e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e82:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008e86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008e8a:	d017      	beq.n	8008ebc <UART_SetConfig+0x2bc>
 8008e8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008e90:	d82a      	bhi.n	8008ee8 <UART_SetConfig+0x2e8>
 8008e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e96:	d00b      	beq.n	8008eb0 <UART_SetConfig+0x2b0>
 8008e98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e9c:	d824      	bhi.n	8008ee8 <UART_SetConfig+0x2e8>
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d003      	beq.n	8008eaa <UART_SetConfig+0x2aa>
 8008ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ea6:	d006      	beq.n	8008eb6 <UART_SetConfig+0x2b6>
 8008ea8:	e01e      	b.n	8008ee8 <UART_SetConfig+0x2e8>
 8008eaa:	2300      	movs	r3, #0
 8008eac:	77fb      	strb	r3, [r7, #31]
 8008eae:	e04b      	b.n	8008f48 <UART_SetConfig+0x348>
 8008eb0:	2302      	movs	r3, #2
 8008eb2:	77fb      	strb	r3, [r7, #31]
 8008eb4:	e048      	b.n	8008f48 <UART_SetConfig+0x348>
 8008eb6:	2304      	movs	r3, #4
 8008eb8:	77fb      	strb	r3, [r7, #31]
 8008eba:	e045      	b.n	8008f48 <UART_SetConfig+0x348>
 8008ebc:	2308      	movs	r3, #8
 8008ebe:	77fb      	strb	r3, [r7, #31]
 8008ec0:	e042      	b.n	8008f48 <UART_SetConfig+0x348>
 8008ec2:	bf00      	nop
 8008ec4:	efff69f3 	.word	0xefff69f3
 8008ec8:	40011000 	.word	0x40011000
 8008ecc:	40023800 	.word	0x40023800
 8008ed0:	40004400 	.word	0x40004400
 8008ed4:	40004800 	.word	0x40004800
 8008ed8:	40004c00 	.word	0x40004c00
 8008edc:	40005000 	.word	0x40005000
 8008ee0:	40011400 	.word	0x40011400
 8008ee4:	40007800 	.word	0x40007800
 8008ee8:	2310      	movs	r3, #16
 8008eea:	77fb      	strb	r3, [r7, #31]
 8008eec:	e02c      	b.n	8008f48 <UART_SetConfig+0x348>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a72      	ldr	r2, [pc, #456]	; (80090bc <UART_SetConfig+0x4bc>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d125      	bne.n	8008f44 <UART_SetConfig+0x344>
 8008ef8:	4b71      	ldr	r3, [pc, #452]	; (80090c0 <UART_SetConfig+0x4c0>)
 8008efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008efe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008f02:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008f06:	d017      	beq.n	8008f38 <UART_SetConfig+0x338>
 8008f08:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008f0c:	d817      	bhi.n	8008f3e <UART_SetConfig+0x33e>
 8008f0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f12:	d00b      	beq.n	8008f2c <UART_SetConfig+0x32c>
 8008f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f18:	d811      	bhi.n	8008f3e <UART_SetConfig+0x33e>
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d003      	beq.n	8008f26 <UART_SetConfig+0x326>
 8008f1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f22:	d006      	beq.n	8008f32 <UART_SetConfig+0x332>
 8008f24:	e00b      	b.n	8008f3e <UART_SetConfig+0x33e>
 8008f26:	2300      	movs	r3, #0
 8008f28:	77fb      	strb	r3, [r7, #31]
 8008f2a:	e00d      	b.n	8008f48 <UART_SetConfig+0x348>
 8008f2c:	2302      	movs	r3, #2
 8008f2e:	77fb      	strb	r3, [r7, #31]
 8008f30:	e00a      	b.n	8008f48 <UART_SetConfig+0x348>
 8008f32:	2304      	movs	r3, #4
 8008f34:	77fb      	strb	r3, [r7, #31]
 8008f36:	e007      	b.n	8008f48 <UART_SetConfig+0x348>
 8008f38:	2308      	movs	r3, #8
 8008f3a:	77fb      	strb	r3, [r7, #31]
 8008f3c:	e004      	b.n	8008f48 <UART_SetConfig+0x348>
 8008f3e:	2310      	movs	r3, #16
 8008f40:	77fb      	strb	r3, [r7, #31]
 8008f42:	e001      	b.n	8008f48 <UART_SetConfig+0x348>
 8008f44:	2310      	movs	r3, #16
 8008f46:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	69db      	ldr	r3, [r3, #28]
 8008f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f50:	d15b      	bne.n	800900a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008f52:	7ffb      	ldrb	r3, [r7, #31]
 8008f54:	2b08      	cmp	r3, #8
 8008f56:	d828      	bhi.n	8008faa <UART_SetConfig+0x3aa>
 8008f58:	a201      	add	r2, pc, #4	; (adr r2, 8008f60 <UART_SetConfig+0x360>)
 8008f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f5e:	bf00      	nop
 8008f60:	08008f85 	.word	0x08008f85
 8008f64:	08008f8d 	.word	0x08008f8d
 8008f68:	08008f95 	.word	0x08008f95
 8008f6c:	08008fab 	.word	0x08008fab
 8008f70:	08008f9b 	.word	0x08008f9b
 8008f74:	08008fab 	.word	0x08008fab
 8008f78:	08008fab 	.word	0x08008fab
 8008f7c:	08008fab 	.word	0x08008fab
 8008f80:	08008fa3 	.word	0x08008fa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f84:	f7fc fbfc 	bl	8005780 <HAL_RCC_GetPCLK1Freq>
 8008f88:	61b8      	str	r0, [r7, #24]
        break;
 8008f8a:	e013      	b.n	8008fb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f8c:	f7fc fc0c 	bl	80057a8 <HAL_RCC_GetPCLK2Freq>
 8008f90:	61b8      	str	r0, [r7, #24]
        break;
 8008f92:	e00f      	b.n	8008fb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f94:	4b4b      	ldr	r3, [pc, #300]	; (80090c4 <UART_SetConfig+0x4c4>)
 8008f96:	61bb      	str	r3, [r7, #24]
        break;
 8008f98:	e00c      	b.n	8008fb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f9a:	f7fc fb1f 	bl	80055dc <HAL_RCC_GetSysClockFreq>
 8008f9e:	61b8      	str	r0, [r7, #24]
        break;
 8008fa0:	e008      	b.n	8008fb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fa6:	61bb      	str	r3, [r7, #24]
        break;
 8008fa8:	e004      	b.n	8008fb4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008faa:	2300      	movs	r3, #0
 8008fac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	77bb      	strb	r3, [r7, #30]
        break;
 8008fb2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d074      	beq.n	80090a4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	005a      	lsls	r2, r3, #1
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	085b      	lsrs	r3, r3, #1
 8008fc4:	441a      	add	r2, r3
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	2b0f      	cmp	r3, #15
 8008fd4:	d916      	bls.n	8009004 <UART_SetConfig+0x404>
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fdc:	d212      	bcs.n	8009004 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	f023 030f 	bic.w	r3, r3, #15
 8008fe6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	085b      	lsrs	r3, r3, #1
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	f003 0307 	and.w	r3, r3, #7
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	89fb      	ldrh	r3, [r7, #14]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	89fa      	ldrh	r2, [r7, #14]
 8009000:	60da      	str	r2, [r3, #12]
 8009002:	e04f      	b.n	80090a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	77bb      	strb	r3, [r7, #30]
 8009008:	e04c      	b.n	80090a4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800900a:	7ffb      	ldrb	r3, [r7, #31]
 800900c:	2b08      	cmp	r3, #8
 800900e:	d828      	bhi.n	8009062 <UART_SetConfig+0x462>
 8009010:	a201      	add	r2, pc, #4	; (adr r2, 8009018 <UART_SetConfig+0x418>)
 8009012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009016:	bf00      	nop
 8009018:	0800903d 	.word	0x0800903d
 800901c:	08009045 	.word	0x08009045
 8009020:	0800904d 	.word	0x0800904d
 8009024:	08009063 	.word	0x08009063
 8009028:	08009053 	.word	0x08009053
 800902c:	08009063 	.word	0x08009063
 8009030:	08009063 	.word	0x08009063
 8009034:	08009063 	.word	0x08009063
 8009038:	0800905b 	.word	0x0800905b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800903c:	f7fc fba0 	bl	8005780 <HAL_RCC_GetPCLK1Freq>
 8009040:	61b8      	str	r0, [r7, #24]
        break;
 8009042:	e013      	b.n	800906c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009044:	f7fc fbb0 	bl	80057a8 <HAL_RCC_GetPCLK2Freq>
 8009048:	61b8      	str	r0, [r7, #24]
        break;
 800904a:	e00f      	b.n	800906c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800904c:	4b1d      	ldr	r3, [pc, #116]	; (80090c4 <UART_SetConfig+0x4c4>)
 800904e:	61bb      	str	r3, [r7, #24]
        break;
 8009050:	e00c      	b.n	800906c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009052:	f7fc fac3 	bl	80055dc <HAL_RCC_GetSysClockFreq>
 8009056:	61b8      	str	r0, [r7, #24]
        break;
 8009058:	e008      	b.n	800906c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800905a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800905e:	61bb      	str	r3, [r7, #24]
        break;
 8009060:	e004      	b.n	800906c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009062:	2300      	movs	r3, #0
 8009064:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	77bb      	strb	r3, [r7, #30]
        break;
 800906a:	bf00      	nop
    }

    if (pclk != 0U)
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d018      	beq.n	80090a4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	085a      	lsrs	r2, r3, #1
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	441a      	add	r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	fbb2 f3f3 	udiv	r3, r2, r3
 8009084:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	2b0f      	cmp	r3, #15
 800908a:	d909      	bls.n	80090a0 <UART_SetConfig+0x4a0>
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009092:	d205      	bcs.n	80090a0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	b29a      	uxth	r2, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	60da      	str	r2, [r3, #12]
 800909e:	e001      	b.n	80090a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80090b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3720      	adds	r7, #32
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	40007c00 	.word	0x40007c00
 80090c0:	40023800 	.word	0x40023800
 80090c4:	00f42400 	.word	0x00f42400

080090c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d4:	f003 0301 	and.w	r3, r3, #1
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00a      	beq.n	80090f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	430a      	orrs	r2, r1
 80090f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f6:	f003 0302 	and.w	r3, r3, #2
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d00a      	beq.n	8009114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	430a      	orrs	r2, r1
 8009112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009118:	f003 0304 	and.w	r3, r3, #4
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00a      	beq.n	8009136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	430a      	orrs	r2, r1
 8009134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913a:	f003 0308 	and.w	r3, r3, #8
 800913e:	2b00      	cmp	r3, #0
 8009140:	d00a      	beq.n	8009158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	430a      	orrs	r2, r1
 8009156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915c:	f003 0310 	and.w	r3, r3, #16
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00a      	beq.n	800917a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	430a      	orrs	r2, r1
 8009178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917e:	f003 0320 	and.w	r3, r3, #32
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00a      	beq.n	800919c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	430a      	orrs	r2, r1
 800919a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d01a      	beq.n	80091de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	430a      	orrs	r2, r1
 80091bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091c6:	d10a      	bne.n	80091de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	430a      	orrs	r2, r1
 80091dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00a      	beq.n	8009200 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	430a      	orrs	r2, r1
 80091fe:	605a      	str	r2, [r3, #4]
  }
}
 8009200:	bf00      	nop
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b086      	sub	sp, #24
 8009210:	af02      	add	r7, sp, #8
 8009212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800921c:	f7fa fcca 	bl	8003bb4 <HAL_GetTick>
 8009220:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f003 0308 	and.w	r3, r3, #8
 800922c:	2b08      	cmp	r3, #8
 800922e:	d10e      	bne.n	800924e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009234:	9300      	str	r3, [sp, #0]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f82d 	bl	800929e <UART_WaitOnFlagUntilTimeout>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d001      	beq.n	800924e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800924a:	2303      	movs	r3, #3
 800924c:	e023      	b.n	8009296 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 0304 	and.w	r3, r3, #4
 8009258:	2b04      	cmp	r3, #4
 800925a:	d10e      	bne.n	800927a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800925c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009260:	9300      	str	r3, [sp, #0]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2200      	movs	r2, #0
 8009266:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 f817 	bl	800929e <UART_WaitOnFlagUntilTimeout>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d001      	beq.n	800927a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009276:	2303      	movs	r3, #3
 8009278:	e00d      	b.n	8009296 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2220      	movs	r2, #32
 800927e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2220      	movs	r2, #32
 8009284:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b09c      	sub	sp, #112	; 0x70
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	60f8      	str	r0, [r7, #12]
 80092a6:	60b9      	str	r1, [r7, #8]
 80092a8:	603b      	str	r3, [r7, #0]
 80092aa:	4613      	mov	r3, r2
 80092ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092ae:	e0a5      	b.n	80093fc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b6:	f000 80a1 	beq.w	80093fc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092ba:	f7fa fc7b 	bl	8003bb4 <HAL_GetTick>
 80092be:	4602      	mov	r2, r0
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	1ad3      	subs	r3, r2, r3
 80092c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d302      	bcc.n	80092d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80092ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d13e      	bne.n	800934e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092d8:	e853 3f00 	ldrex	r3, [r3]
 80092dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80092de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80092e4:	667b      	str	r3, [r7, #100]	; 0x64
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	461a      	mov	r2, r3
 80092ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80092f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80092f6:	e841 2300 	strex	r3, r2, [r1]
 80092fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80092fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1e6      	bne.n	80092d0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	3308      	adds	r3, #8
 8009308:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800930c:	e853 3f00 	ldrex	r3, [r3]
 8009310:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009314:	f023 0301 	bic.w	r3, r3, #1
 8009318:	663b      	str	r3, [r7, #96]	; 0x60
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	3308      	adds	r3, #8
 8009320:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009322:	64ba      	str	r2, [r7, #72]	; 0x48
 8009324:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009326:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800932a:	e841 2300 	strex	r3, r2, [r1]
 800932e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1e5      	bne.n	8009302 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2220      	movs	r2, #32
 800933a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2220      	movs	r2, #32
 8009340:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2200      	movs	r2, #0
 8009346:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800934a:	2303      	movs	r3, #3
 800934c:	e067      	b.n	800941e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f003 0304 	and.w	r3, r3, #4
 8009358:	2b00      	cmp	r3, #0
 800935a:	d04f      	beq.n	80093fc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	69db      	ldr	r3, [r3, #28]
 8009362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800936a:	d147      	bne.n	80093fc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009374:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937e:	e853 3f00 	ldrex	r3, [r3]
 8009382:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009386:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800938a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	461a      	mov	r2, r3
 8009392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009394:	637b      	str	r3, [r7, #52]	; 0x34
 8009396:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009398:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800939a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800939c:	e841 2300 	strex	r3, r2, [r1]
 80093a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80093a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1e6      	bne.n	8009376 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	3308      	adds	r3, #8
 80093ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	e853 3f00 	ldrex	r3, [r3]
 80093b6:	613b      	str	r3, [r7, #16]
   return(result);
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	f023 0301 	bic.w	r3, r3, #1
 80093be:	66bb      	str	r3, [r7, #104]	; 0x68
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	3308      	adds	r3, #8
 80093c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80093c8:	623a      	str	r2, [r7, #32]
 80093ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093cc:	69f9      	ldr	r1, [r7, #28]
 80093ce:	6a3a      	ldr	r2, [r7, #32]
 80093d0:	e841 2300 	strex	r3, r2, [r1]
 80093d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1e5      	bne.n	80093a8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2220      	movs	r2, #32
 80093e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2220      	movs	r2, #32
 80093e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2220      	movs	r2, #32
 80093ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2200      	movs	r2, #0
 80093f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80093f8:	2303      	movs	r3, #3
 80093fa:	e010      	b.n	800941e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	69da      	ldr	r2, [r3, #28]
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	4013      	ands	r3, r2
 8009406:	68ba      	ldr	r2, [r7, #8]
 8009408:	429a      	cmp	r2, r3
 800940a:	bf0c      	ite	eq
 800940c:	2301      	moveq	r3, #1
 800940e:	2300      	movne	r3, #0
 8009410:	b2db      	uxtb	r3, r3
 8009412:	461a      	mov	r2, r3
 8009414:	79fb      	ldrb	r3, [r7, #7]
 8009416:	429a      	cmp	r2, r3
 8009418:	f43f af4a 	beq.w	80092b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3770      	adds	r7, #112	; 0x70
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
	...

08009428 <__libc_init_array>:
 8009428:	b570      	push	{r4, r5, r6, lr}
 800942a:	4d0d      	ldr	r5, [pc, #52]	; (8009460 <__libc_init_array+0x38>)
 800942c:	4c0d      	ldr	r4, [pc, #52]	; (8009464 <__libc_init_array+0x3c>)
 800942e:	1b64      	subs	r4, r4, r5
 8009430:	10a4      	asrs	r4, r4, #2
 8009432:	2600      	movs	r6, #0
 8009434:	42a6      	cmp	r6, r4
 8009436:	d109      	bne.n	800944c <__libc_init_array+0x24>
 8009438:	4d0b      	ldr	r5, [pc, #44]	; (8009468 <__libc_init_array+0x40>)
 800943a:	4c0c      	ldr	r4, [pc, #48]	; (800946c <__libc_init_array+0x44>)
 800943c:	f000 f8aa 	bl	8009594 <_init>
 8009440:	1b64      	subs	r4, r4, r5
 8009442:	10a4      	asrs	r4, r4, #2
 8009444:	2600      	movs	r6, #0
 8009446:	42a6      	cmp	r6, r4
 8009448:	d105      	bne.n	8009456 <__libc_init_array+0x2e>
 800944a:	bd70      	pop	{r4, r5, r6, pc}
 800944c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009450:	4798      	blx	r3
 8009452:	3601      	adds	r6, #1
 8009454:	e7ee      	b.n	8009434 <__libc_init_array+0xc>
 8009456:	f855 3b04 	ldr.w	r3, [r5], #4
 800945a:	4798      	blx	r3
 800945c:	3601      	adds	r6, #1
 800945e:	e7f2      	b.n	8009446 <__libc_init_array+0x1e>
 8009460:	08009de4 	.word	0x08009de4
 8009464:	08009de4 	.word	0x08009de4
 8009468:	08009de4 	.word	0x08009de4
 800946c:	08009de8 	.word	0x08009de8

08009470 <memset>:
 8009470:	4402      	add	r2, r0
 8009472:	4603      	mov	r3, r0
 8009474:	4293      	cmp	r3, r2
 8009476:	d100      	bne.n	800947a <memset+0xa>
 8009478:	4770      	bx	lr
 800947a:	f803 1b01 	strb.w	r1, [r3], #1
 800947e:	e7f9      	b.n	8009474 <memset+0x4>

08009480 <__utoa>:
 8009480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009482:	4c1f      	ldr	r4, [pc, #124]	; (8009500 <__utoa+0x80>)
 8009484:	b08b      	sub	sp, #44	; 0x2c
 8009486:	4605      	mov	r5, r0
 8009488:	460b      	mov	r3, r1
 800948a:	466e      	mov	r6, sp
 800948c:	f104 0c20 	add.w	ip, r4, #32
 8009490:	6820      	ldr	r0, [r4, #0]
 8009492:	6861      	ldr	r1, [r4, #4]
 8009494:	4637      	mov	r7, r6
 8009496:	c703      	stmia	r7!, {r0, r1}
 8009498:	3408      	adds	r4, #8
 800949a:	4564      	cmp	r4, ip
 800949c:	463e      	mov	r6, r7
 800949e:	d1f7      	bne.n	8009490 <__utoa+0x10>
 80094a0:	7921      	ldrb	r1, [r4, #4]
 80094a2:	7139      	strb	r1, [r7, #4]
 80094a4:	1e91      	subs	r1, r2, #2
 80094a6:	6820      	ldr	r0, [r4, #0]
 80094a8:	6038      	str	r0, [r7, #0]
 80094aa:	2922      	cmp	r1, #34	; 0x22
 80094ac:	f04f 0100 	mov.w	r1, #0
 80094b0:	d904      	bls.n	80094bc <__utoa+0x3c>
 80094b2:	7019      	strb	r1, [r3, #0]
 80094b4:	460b      	mov	r3, r1
 80094b6:	4618      	mov	r0, r3
 80094b8:	b00b      	add	sp, #44	; 0x2c
 80094ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094bc:	1e58      	subs	r0, r3, #1
 80094be:	4684      	mov	ip, r0
 80094c0:	fbb5 f7f2 	udiv	r7, r5, r2
 80094c4:	fb02 5617 	mls	r6, r2, r7, r5
 80094c8:	3628      	adds	r6, #40	; 0x28
 80094ca:	446e      	add	r6, sp
 80094cc:	460c      	mov	r4, r1
 80094ce:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80094d2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80094d6:	462e      	mov	r6, r5
 80094d8:	42b2      	cmp	r2, r6
 80094da:	f101 0101 	add.w	r1, r1, #1
 80094de:	463d      	mov	r5, r7
 80094e0:	d9ee      	bls.n	80094c0 <__utoa+0x40>
 80094e2:	2200      	movs	r2, #0
 80094e4:	545a      	strb	r2, [r3, r1]
 80094e6:	1919      	adds	r1, r3, r4
 80094e8:	1aa5      	subs	r5, r4, r2
 80094ea:	42aa      	cmp	r2, r5
 80094ec:	dae3      	bge.n	80094b6 <__utoa+0x36>
 80094ee:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80094f2:	780e      	ldrb	r6, [r1, #0]
 80094f4:	7006      	strb	r6, [r0, #0]
 80094f6:	3201      	adds	r2, #1
 80094f8:	f801 5901 	strb.w	r5, [r1], #-1
 80094fc:	e7f4      	b.n	80094e8 <__utoa+0x68>
 80094fe:	bf00      	nop
 8009500:	08009db4 	.word	0x08009db4

08009504 <utoa>:
 8009504:	f7ff bfbc 	b.w	8009480 <__utoa>

08009508 <round>:
 8009508:	ee10 1a90 	vmov	r1, s1
 800950c:	f3c1 500a 	ubfx	r0, r1, #20, #11
 8009510:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 8009514:	2a13      	cmp	r2, #19
 8009516:	b510      	push	{r4, lr}
 8009518:	ee10 3a10 	vmov	r3, s0
 800951c:	dc19      	bgt.n	8009552 <round+0x4a>
 800951e:	2a00      	cmp	r2, #0
 8009520:	da09      	bge.n	8009536 <round+0x2e>
 8009522:	3201      	adds	r2, #1
 8009524:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009528:	d103      	bne.n	8009532 <round+0x2a>
 800952a:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800952e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009532:	2000      	movs	r0, #0
 8009534:	e026      	b.n	8009584 <round+0x7c>
 8009536:	4816      	ldr	r0, [pc, #88]	; (8009590 <round+0x88>)
 8009538:	4110      	asrs	r0, r2
 800953a:	ea01 0400 	and.w	r4, r1, r0
 800953e:	4323      	orrs	r3, r4
 8009540:	d00e      	beq.n	8009560 <round+0x58>
 8009542:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009546:	fa43 f202 	asr.w	r2, r3, r2
 800954a:	4411      	add	r1, r2
 800954c:	ea21 0100 	bic.w	r1, r1, r0
 8009550:	e7ef      	b.n	8009532 <round+0x2a>
 8009552:	2a33      	cmp	r2, #51	; 0x33
 8009554:	dd05      	ble.n	8009562 <round+0x5a>
 8009556:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800955a:	d101      	bne.n	8009560 <round+0x58>
 800955c:	ee30 0b00 	vadd.f64	d0, d0, d0
 8009560:	bd10      	pop	{r4, pc}
 8009562:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 8009566:	f04f 30ff 	mov.w	r0, #4294967295
 800956a:	40e0      	lsrs	r0, r4
 800956c:	4203      	tst	r3, r0
 800956e:	d0f7      	beq.n	8009560 <round+0x58>
 8009570:	2401      	movs	r4, #1
 8009572:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 8009576:	fa04 f202 	lsl.w	r2, r4, r2
 800957a:	189b      	adds	r3, r3, r2
 800957c:	bf28      	it	cs
 800957e:	1909      	addcs	r1, r1, r4
 8009580:	ea23 0000 	bic.w	r0, r3, r0
 8009584:	460b      	mov	r3, r1
 8009586:	4602      	mov	r2, r0
 8009588:	ec43 2b10 	vmov	d0, r2, r3
 800958c:	e7e8      	b.n	8009560 <round+0x58>
 800958e:	bf00      	nop
 8009590:	000fffff 	.word	0x000fffff

08009594 <_init>:
 8009594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009596:	bf00      	nop
 8009598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800959a:	bc08      	pop	{r3}
 800959c:	469e      	mov	lr, r3
 800959e:	4770      	bx	lr

080095a0 <_fini>:
 80095a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095a2:	bf00      	nop
 80095a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095a6:	bc08      	pop	{r3}
 80095a8:	469e      	mov	lr, r3
 80095aa:	4770      	bx	lr
