
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a80  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08005c78  08005c78  00015c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060a0  080060a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080060a0  080060a0  000160a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060a8  080060a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060a8  080060a8  000160a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060ac  080060ac  000160ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080060b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  2000000c  080060bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  080060bc  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017158  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032e6  00000000  00000000  00037192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  0003a478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  0003b700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b53b  00000000  00000000  0003c810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017f9f  00000000  00000000  00067d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107787  00000000  00000000  0007fcea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00187471  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c24  00000000  00000000  001874c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005c60 	.word	0x08005c60

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08005c60 	.word	0x08005c60

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	b29a      	uxth	r2, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <uartTransmit+0x24>)
 8000556:	f004 feb5 	bl	80052c4 <HAL_UART_Transmit>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000240 	.word	0x20000240

08000568 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 8000572:	683a      	ldr	r2, [r7, #0]
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	4619      	mov	r1, r3
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f005 fb6e 	bl	8005c5c <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff fe57 	bl	8000238 <strlen>
 800058a:	4603      	mov	r3, r0
 800058c:	b29a      	uxth	r2, r3
 800058e:	f107 010c 	add.w	r1, r7, #12
 8000592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <uartTransmitNumber+0x3c>)
 8000598:	f004 fe94 	bl	80052c4 <HAL_UART_Transmit>
}
 800059c:	bf00      	nop
 800059e:	3718      	adds	r7, #24
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000240 	.word	0x20000240

080005a8 <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 80005ae:	2113      	movs	r1, #19
 80005b0:	483b      	ldr	r0, [pc, #236]	; (80006a0 <collectHardwareInfo+0xf8>)
 80005b2:	f7ff ffc5 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 80005b6:	f001 fc7b 	bl	8001eb0 <HAL_GetDEVID>
 80005ba:	4603      	mov	r3, r0
 80005bc:	210a      	movs	r1, #10
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff ffd2 	bl	8000568 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 80005c4:	2115      	movs	r1, #21
 80005c6:	4837      	ldr	r0, [pc, #220]	; (80006a4 <collectHardwareInfo+0xfc>)
 80005c8:	f7ff ffba 	bl	8000540 <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 80005cc:	f001 fc64 	bl	8001e98 <HAL_GetREVID>
 80005d0:	4603      	mov	r3, r0
 80005d2:	f242 0201 	movw	r2, #8193	; 0x2001
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d016      	beq.n	8000608 <collectHardwareInfo+0x60>
 80005da:	f242 0201 	movw	r2, #8193	; 0x2001
 80005de:	4293      	cmp	r3, r2
 80005e0:	d817      	bhi.n	8000612 <collectHardwareInfo+0x6a>
 80005e2:	f241 0201 	movw	r2, #4097	; 0x1001
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d004      	beq.n	80005f4 <collectHardwareInfo+0x4c>
 80005ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d005      	beq.n	80005fe <collectHardwareInfo+0x56>
 80005f2:	e00e      	b.n	8000612 <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 80005f4:	2101      	movs	r1, #1
 80005f6:	482c      	ldr	r0, [pc, #176]	; (80006a8 <collectHardwareInfo+0x100>)
 80005f8:	f7ff ffa2 	bl	8000540 <uartTransmit>
			break;
 80005fc:	e011      	b.n	8000622 <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 80005fe:	2101      	movs	r1, #1
 8000600:	482a      	ldr	r0, [pc, #168]	; (80006ac <collectHardwareInfo+0x104>)
 8000602:	f7ff ff9d 	bl	8000540 <uartTransmit>
			break;
 8000606:	e00c      	b.n	8000622 <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8000608:	2101      	movs	r1, #1
 800060a:	4829      	ldr	r0, [pc, #164]	; (80006b0 <collectHardwareInfo+0x108>)
 800060c:	f7ff ff98 	bl	8000540 <uartTransmit>
			break;
 8000610:	e007      	b.n	8000622 <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 8000612:	f001 fc41 	bl	8001e98 <HAL_GetREVID>
 8000616:	4603      	mov	r3, r0
 8000618:	210a      	movs	r1, #10
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ffa4 	bl	8000568 <uartTransmitNumber>
			break;
 8000620:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 8000622:	2113      	movs	r1, #19
 8000624:	4823      	ldr	r0, [pc, #140]	; (80006b4 <collectHardwareInfo+0x10c>)
 8000626:	f7ff ff8b 	bl	8000540 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 800062a:	f002 fea5 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 800062e:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <collectHardwareInfo+0x110>)
 8000634:	fba2 2303 	umull	r2, r3, r2, r3
 8000638:	0c9b      	lsrs	r3, r3, #18
 800063a:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 800063c:	210a      	movs	r1, #10
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f7ff ff92 	bl	8000568 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 8000644:	2104      	movs	r1, #4
 8000646:	481d      	ldr	r0, [pc, #116]	; (80006bc <collectHardwareInfo+0x114>)
 8000648:	f7ff ff7a 	bl	8000540 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 800064c:	210f      	movs	r1, #15
 800064e:	481c      	ldr	r0, [pc, #112]	; (80006c0 <collectHardwareInfo+0x118>)
 8000650:	f7ff ff76 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 8000654:	f001 fc3a 	bl	8001ecc <HAL_GetUIDw0>
 8000658:	4603      	mov	r3, r0
 800065a:	2110      	movs	r1, #16
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ff83 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000662:	2101      	movs	r1, #1
 8000664:	4817      	ldr	r0, [pc, #92]	; (80006c4 <collectHardwareInfo+0x11c>)
 8000666:	f7ff ff6b 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 800066a:	f001 fc3b 	bl	8001ee4 <HAL_GetUIDw1>
 800066e:	4603      	mov	r3, r0
 8000670:	2110      	movs	r1, #16
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ff78 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000678:	2101      	movs	r1, #1
 800067a:	4812      	ldr	r0, [pc, #72]	; (80006c4 <collectHardwareInfo+0x11c>)
 800067c:	f7ff ff60 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8000680:	f001 fc3c 	bl	8001efc <HAL_GetUIDw2>
 8000684:	4603      	mov	r3, r0
 8000686:	2110      	movs	r1, #16
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff6d 	bl	8000568 <uartTransmitNumber>

	uartTransmit("\n", 1);
 800068e:	2101      	movs	r1, #1
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <collectHardwareInfo+0x120>)
 8000692:	f7ff ff55 	bl	8000540 <uartTransmit>
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	08005c78 	.word	0x08005c78
 80006a4:	08005c8c 	.word	0x08005c8c
 80006a8:	08005ca4 	.word	0x08005ca4
 80006ac:	08005ca8 	.word	0x08005ca8
 80006b0:	08005cac 	.word	0x08005cac
 80006b4:	08005cb0 	.word	0x08005cb0
 80006b8:	431bde83 	.word	0x431bde83
 80006bc:	08005cc4 	.word	0x08005cc4
 80006c0:	08005ccc 	.word	0x08005ccc
 80006c4:	08005cdc 	.word	0x08005cdc
 80006c8:	08005ce0 	.word	0x08005ce0

080006cc <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 80006d0:	2112      	movs	r1, #18
 80006d2:	4824      	ldr	r0, [pc, #144]	; (8000764 <collectMiddlewareInfo+0x98>)
 80006d4:	f7ff ff34 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 80006d8:	210a      	movs	r1, #10
 80006da:	2005      	movs	r0, #5
 80006dc:	f7ff ff44 	bl	8000568 <uartTransmitNumber>
	uartTransmit(".", 1);
 80006e0:	2101      	movs	r1, #1
 80006e2:	4821      	ldr	r0, [pc, #132]	; (8000768 <collectMiddlewareInfo+0x9c>)
 80006e4:	f7ff ff2c 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 80006e8:	210a      	movs	r1, #10
 80006ea:	2001      	movs	r0, #1
 80006ec:	f7ff ff3c 	bl	8000568 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 80006f0:	2110      	movs	r1, #16
 80006f2:	481e      	ldr	r0, [pc, #120]	; (800076c <collectMiddlewareInfo+0xa0>)
 80006f4:	f7ff ff24 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 80006f8:	f001 fbc4 	bl	8001e84 <HAL_GetHalVersion>
 80006fc:	4603      	mov	r3, r0
 80006fe:	0e1b      	lsrs	r3, r3, #24
 8000700:	b2db      	uxtb	r3, r3
 8000702:	210a      	movs	r1, #10
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff2f 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 800070a:	2101      	movs	r1, #1
 800070c:	4816      	ldr	r0, [pc, #88]	; (8000768 <collectMiddlewareInfo+0x9c>)
 800070e:	f7ff ff17 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 8000712:	f001 fbb7 	bl	8001e84 <HAL_GetHalVersion>
 8000716:	4603      	mov	r3, r0
 8000718:	0c1b      	lsrs	r3, r3, #16
 800071a:	b2db      	uxtb	r3, r3
 800071c:	210a      	movs	r1, #10
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff22 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000724:	2101      	movs	r1, #1
 8000726:	4810      	ldr	r0, [pc, #64]	; (8000768 <collectMiddlewareInfo+0x9c>)
 8000728:	f7ff ff0a 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 800072c:	f001 fbaa 	bl	8001e84 <HAL_GetHalVersion>
 8000730:	4603      	mov	r3, r0
 8000732:	0a1b      	lsrs	r3, r3, #8
 8000734:	b2db      	uxtb	r3, r3
 8000736:	210a      	movs	r1, #10
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff15 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 800073e:	2101      	movs	r1, #1
 8000740:	4809      	ldr	r0, [pc, #36]	; (8000768 <collectMiddlewareInfo+0x9c>)
 8000742:	f7ff fefd 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000746:	f001 fb9d 	bl	8001e84 <HAL_GetHalVersion>
 800074a:	4603      	mov	r3, r0
 800074c:	b2db      	uxtb	r3, r3
 800074e:	210a      	movs	r1, #10
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff09 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 8000756:	2101      	movs	r1, #1
 8000758:	4805      	ldr	r0, [pc, #20]	; (8000770 <collectMiddlewareInfo+0xa4>)
 800075a:	f7ff fef1 	bl	8000540 <uartTransmit>
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	08005ce4 	.word	0x08005ce4
 8000768:	08005cf8 	.word	0x08005cf8
 800076c:	08005cfc 	.word	0x08005cfc
 8000770:	08005ce0 	.word	0x08005ce0

08000774 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 8000778:	210f      	movs	r1, #15
 800077a:	4826      	ldr	r0, [pc, #152]	; (8000814 <collectSoftwareInfo+0xa0>)
 800077c:	f7ff fee0 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8000780:	2108      	movs	r1, #8
 8000782:	4825      	ldr	r0, [pc, #148]	; (8000818 <collectSoftwareInfo+0xa4>)
 8000784:	f7ff fedc 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8000788:	210f      	movs	r1, #15
 800078a:	4824      	ldr	r0, [pc, #144]	; (800081c <collectSoftwareInfo+0xa8>)
 800078c:	f7ff fed8 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8000790:	2104      	movs	r1, #4
 8000792:	4823      	ldr	r0, [pc, #140]	; (8000820 <collectSoftwareInfo+0xac>)
 8000794:	f7ff fed4 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8000798:	210d      	movs	r1, #13
 800079a:	4822      	ldr	r0, [pc, #136]	; (8000824 <collectSoftwareInfo+0xb0>)
 800079c:	f7ff fed0 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 80007a0:	2129      	movs	r1, #41	; 0x29
 80007a2:	4821      	ldr	r0, [pc, #132]	; (8000828 <collectSoftwareInfo+0xb4>)
 80007a4:	f7ff fecc 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80007a8:	2101      	movs	r1, #1
 80007aa:	4820      	ldr	r0, [pc, #128]	; (800082c <collectSoftwareInfo+0xb8>)
 80007ac:	f7ff fec8 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 80007b0:	2115      	movs	r1, #21
 80007b2:	481f      	ldr	r0, [pc, #124]	; (8000830 <collectSoftwareInfo+0xbc>)
 80007b4:	f7ff fec4 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 80007b8:	2105      	movs	r1, #5
 80007ba:	481e      	ldr	r0, [pc, #120]	; (8000834 <collectSoftwareInfo+0xc0>)
 80007bc:	f7ff fec0 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 80007c0:	2114      	movs	r1, #20
 80007c2:	481d      	ldr	r0, [pc, #116]	; (8000838 <collectSoftwareInfo+0xc4>)
 80007c4:	f7ff febc 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 80007c8:	2108      	movs	r1, #8
 80007ca:	481c      	ldr	r0, [pc, #112]	; (800083c <collectSoftwareInfo+0xc8>)
 80007cc:	f7ff feb8 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 80007d0:	2115      	movs	r1, #21
 80007d2:	481b      	ldr	r0, [pc, #108]	; (8000840 <collectSoftwareInfo+0xcc>)
 80007d4:	f7ff feb4 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 80007d8:	2110      	movs	r1, #16
 80007da:	481a      	ldr	r0, [pc, #104]	; (8000844 <collectSoftwareInfo+0xd0>)
 80007dc:	f7ff feb0 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80007e0:	2101      	movs	r1, #1
 80007e2:	4812      	ldr	r0, [pc, #72]	; (800082c <collectSoftwareInfo+0xb8>)
 80007e4:	f7ff feac 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 80007e8:	210f      	movs	r1, #15
 80007ea:	4817      	ldr	r0, [pc, #92]	; (8000848 <collectSoftwareInfo+0xd4>)
 80007ec:	f7ff fea8 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 80007f0:	210b      	movs	r1, #11
 80007f2:	4816      	ldr	r0, [pc, #88]	; (800084c <collectSoftwareInfo+0xd8>)
 80007f4:	f7ff fea4 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 80007f8:	210f      	movs	r1, #15
 80007fa:	4815      	ldr	r0, [pc, #84]	; (8000850 <collectSoftwareInfo+0xdc>)
 80007fc:	f7ff fea0 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 8000800:	2109      	movs	r1, #9
 8000802:	4814      	ldr	r0, [pc, #80]	; (8000854 <collectSoftwareInfo+0xe0>)
 8000804:	f7ff fe9c 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000808:	2101      	movs	r1, #1
 800080a:	4808      	ldr	r0, [pc, #32]	; (800082c <collectSoftwareInfo+0xb8>)
 800080c:	f7ff fe98 	bl	8000540 <uartTransmit>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	08005d0c 	.word	0x08005d0c
 8000818:	08005d1c 	.word	0x08005d1c
 800081c:	08005d24 	.word	0x08005d24
 8000820:	08005d34 	.word	0x08005d34
 8000824:	08005d38 	.word	0x08005d38
 8000828:	08005d48 	.word	0x08005d48
 800082c:	08005ce0 	.word	0x08005ce0
 8000830:	08005d74 	.word	0x08005d74
 8000834:	08005d8c 	.word	0x08005d8c
 8000838:	08005d94 	.word	0x08005d94
 800083c:	08005da8 	.word	0x08005da8
 8000840:	08005db0 	.word	0x08005db0
 8000844:	08005dc8 	.word	0x08005dc8
 8000848:	08005dd8 	.word	0x08005dd8
 800084c:	08005de8 	.word	0x08005de8
 8000850:	08005df4 	.word	0x08005df4
 8000854:	08005e04 	.word	0x08005e04

08000858 <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 800085c:	2114      	movs	r1, #20
 800085e:	4814      	ldr	r0, [pc, #80]	; (80008b0 <collectGitcounts+0x58>)
 8000860:	f7ff fe6e 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 8000864:	2102      	movs	r1, #2
 8000866:	4813      	ldr	r0, [pc, #76]	; (80008b4 <collectGitcounts+0x5c>)
 8000868:	f7ff fe6a 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 800086c:	2116      	movs	r1, #22
 800086e:	4812      	ldr	r0, [pc, #72]	; (80008b8 <collectGitcounts+0x60>)
 8000870:	f7ff fe66 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 8000874:	2103      	movs	r1, #3
 8000876:	4811      	ldr	r0, [pc, #68]	; (80008bc <collectGitcounts+0x64>)
 8000878:	f7ff fe62 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 800087c:	211c      	movs	r1, #28
 800087e:	4810      	ldr	r0, [pc, #64]	; (80008c0 <collectGitcounts+0x68>)
 8000880:	f7ff fe5e 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 8000884:	2102      	movs	r1, #2
 8000886:	480f      	ldr	r0, [pc, #60]	; (80008c4 <collectGitcounts+0x6c>)
 8000888:	f7ff fe5a 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 800088c:	2115      	movs	r1, #21
 800088e:	480e      	ldr	r0, [pc, #56]	; (80008c8 <collectGitcounts+0x70>)
 8000890:	f7ff fe56 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8000894:	2102      	movs	r1, #2
 8000896:	480d      	ldr	r0, [pc, #52]	; (80008cc <collectGitcounts+0x74>)
 8000898:	f7ff fe52 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 800089c:	2114      	movs	r1, #20
 800089e:	480c      	ldr	r0, [pc, #48]	; (80008d0 <collectGitcounts+0x78>)
 80008a0:	f7ff fe4e 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 80008a4:	2102      	movs	r1, #2
 80008a6:	480b      	ldr	r0, [pc, #44]	; (80008d4 <collectGitcounts+0x7c>)
 80008a8:	f7ff fe4a 	bl	8000540 <uartTransmit>
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	08005e10 	.word	0x08005e10
 80008b4:	08005e24 	.word	0x08005e24
 80008b8:	08005e28 	.word	0x08005e28
 80008bc:	08005e40 	.word	0x08005e40
 80008c0:	08005e44 	.word	0x08005e44
 80008c4:	08005e60 	.word	0x08005e60
 80008c8:	08005d74 	.word	0x08005d74
 80008cc:	08005e64 	.word	0x08005e64
 80008d0:	08005d94 	.word	0x08005d94
 80008d4:	08005e68 	.word	0x08005e68

080008d8 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 80008dc:	2111      	movs	r1, #17
 80008de:	480e      	ldr	r0, [pc, #56]	; (8000918 <collectSystemInfo+0x40>)
 80008e0:	f7ff fe2e 	bl	8000540 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 80008e4:	f7ff fe60 	bl	80005a8 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 80008e8:	2111      	movs	r1, #17
 80008ea:	480c      	ldr	r0, [pc, #48]	; (800091c <collectSystemInfo+0x44>)
 80008ec:	f7ff fe28 	bl	8000540 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 80008f0:	f7ff ff40 	bl	8000774 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 80008f4:	2113      	movs	r1, #19
 80008f6:	480a      	ldr	r0, [pc, #40]	; (8000920 <collectSystemInfo+0x48>)
 80008f8:	f7ff fe22 	bl	8000540 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 80008fc:	f7ff fee6 	bl	80006cc <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 8000900:	2113      	movs	r1, #19
 8000902:	4808      	ldr	r0, [pc, #32]	; (8000924 <collectSystemInfo+0x4c>)
 8000904:	f7ff fe1c 	bl	8000540 <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 8000908:	f7ff ffa6 	bl	8000858 <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 800090c:	2103      	movs	r1, #3
 800090e:	4806      	ldr	r0, [pc, #24]	; (8000928 <collectSystemInfo+0x50>)
 8000910:	f7ff fe16 	bl	8000540 <uartTransmit>
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	08005e6c 	.word	0x08005e6c
 800091c:	08005e80 	.word	0x08005e80
 8000920:	08005e94 	.word	0x08005e94
 8000924:	08005ea8 	.word	0x08005ea8
 8000928:	08005ebc 	.word	0x08005ebc

0800092c <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 8000932:	2300      	movs	r3, #0
 8000934:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8000936:	4b25      	ldr	r3, [pc, #148]	; (80009cc <readResetSource+0xa0>)
 8000938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800093a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800093e:	2b00      	cmp	r3, #0
 8000940:	d002      	beq.n	8000948 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	3301      	adds	r3, #1
 8000946:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8000948:	4b20      	ldr	r3, [pc, #128]	; (80009cc <readResetSource+0xa0>)
 800094a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800094c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000950:	2b00      	cmp	r3, #0
 8000952:	d002      	beq.n	800095a <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	3302      	adds	r3, #2
 8000958:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <readResetSource+0xa0>)
 800095c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800095e:	2b00      	cmp	r3, #0
 8000960:	da02      	bge.n	8000968 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	3304      	adds	r3, #4
 8000966:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <readResetSource+0xa0>)
 800096a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800096c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000970:	2b00      	cmp	r3, #0
 8000972:	d002      	beq.n	800097a <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	3308      	adds	r3, #8
 8000978:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <readResetSource+0xa0>)
 800097c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800097e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000982:	2b00      	cmp	r3, #0
 8000984:	d002      	beq.n	800098c <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	3310      	adds	r3, #16
 800098a:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <readResetSource+0xa0>)
 800098e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000994:	2b00      	cmp	r3, #0
 8000996:	d002      	beq.n	800099e <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	3320      	adds	r3, #32
 800099c:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <readResetSource+0xa0>)
 80009a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d002      	beq.n	80009b0 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	3340      	adds	r3, #64	; 0x40
 80009ae:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <readResetSource+0xa0>)
 80009b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009b4:	4a05      	ldr	r2, [pc, #20]	; (80009cc <readResetSource+0xa0>)
 80009b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009ba:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 80009bc:	79fb      	ldrb	r3, [r7, #7]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800

080009d0 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 80009da:	2106      	movs	r1, #6
 80009dc:	482a      	ldr	r0, [pc, #168]	; (8000a88 <printResetSource+0xb8>)
 80009de:	f7ff fdaf 	bl	8000540 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d104      	bne.n	80009f2 <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 80009e8:	210f      	movs	r1, #15
 80009ea:	4828      	ldr	r0, [pc, #160]	; (8000a8c <printResetSource+0xbc>)
 80009ec:	f7ff fda8 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 80009f0:	e046      	b.n	8000a80 <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d003      	beq.n	8000a04 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 80009fc:	2118      	movs	r1, #24
 80009fe:	4824      	ldr	r0, [pc, #144]	; (8000a90 <printResetSource+0xc0>)
 8000a00:	f7ff fd9e 	bl	8000540 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d003      	beq.n	8000a16 <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8000a0e:	2116      	movs	r1, #22
 8000a10:	4820      	ldr	r0, [pc, #128]	; (8000a94 <printResetSource+0xc4>)
 8000a12:	f7ff fd95 	bl	8000540 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	f003 0304 	and.w	r3, r3, #4
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d003      	beq.n	8000a28 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8000a20:	210a      	movs	r1, #10
 8000a22:	481d      	ldr	r0, [pc, #116]	; (8000a98 <printResetSource+0xc8>)
 8000a24:	f7ff fd8c 	bl	8000540 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	f003 0308 	and.w	r3, r3, #8
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d003      	beq.n	8000a3a <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 8000a32:	2110      	movs	r1, #16
 8000a34:	4819      	ldr	r0, [pc, #100]	; (8000a9c <printResetSource+0xcc>)
 8000a36:	f7ff fd83 	bl	8000540 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	f003 0310 	and.w	r3, r3, #16
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d003      	beq.n	8000a4c <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 8000a44:	210f      	movs	r1, #15
 8000a46:	4816      	ldr	r0, [pc, #88]	; (8000aa0 <printResetSource+0xd0>)
 8000a48:	f7ff fd7a 	bl	8000540 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	f003 0320 	and.w	r3, r3, #32
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d003      	beq.n	8000a5e <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 8000a56:	210f      	movs	r1, #15
 8000a58:	4812      	ldr	r0, [pc, #72]	; (8000aa4 <printResetSource+0xd4>)
 8000a5a:	f7ff fd71 	bl	8000540 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d003      	beq.n	8000a70 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8000a68:	210a      	movs	r1, #10
 8000a6a:	480f      	ldr	r0, [pc, #60]	; (8000aa8 <printResetSource+0xd8>)
 8000a6c:	f7ff fd68 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8000a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	da03      	bge.n	8000a80 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8000a78:	2105      	movs	r1, #5
 8000a7a:	480c      	ldr	r0, [pc, #48]	; (8000aac <printResetSource+0xdc>)
 8000a7c:	f7ff fd60 	bl	8000540 <uartTransmit>
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	08005ec0 	.word	0x08005ec0
 8000a8c:	08005ec8 	.word	0x08005ec8
 8000a90:	08005ed8 	.word	0x08005ed8
 8000a94:	08005ef4 	.word	0x08005ef4
 8000a98:	08005f0c 	.word	0x08005f0c
 8000a9c:	08005f18 	.word	0x08005f18
 8000aa0:	08005f2c 	.word	0x08005f2c
 8000aa4:	08005f3c 	.word	0x08005f3c
 8000aa8:	08005f4c 	.word	0x08005f4c
 8000aac:	08005f58 	.word	0x08005f58

08000ab0 <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 8000ab4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab8:	4850      	ldr	r0, [pc, #320]	; (8000bfc <readall_inputs+0x14c>)
 8000aba:	f002 f841 	bl	8002b40 <HAL_GPIO_ReadPin>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	f003 0301 	and.w	r3, r3, #1
 8000ac4:	b2d9      	uxtb	r1, r3
 8000ac6:	4a4e      	ldr	r2, [pc, #312]	; (8000c00 <readall_inputs+0x150>)
 8000ac8:	7813      	ldrb	r3, [r2, #0]
 8000aca:	f361 0300 	bfi	r3, r1, #0, #1
 8000ace:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 8000ad0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ad4:	484b      	ldr	r0, [pc, #300]	; (8000c04 <readall_inputs+0x154>)
 8000ad6:	f002 f833 	bl	8002b40 <HAL_GPIO_ReadPin>
 8000ada:	4603      	mov	r3, r0
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	b2d9      	uxtb	r1, r3
 8000ae2:	4a47      	ldr	r2, [pc, #284]	; (8000c00 <readall_inputs+0x150>)
 8000ae4:	7813      	ldrb	r3, [r2, #0]
 8000ae6:	f361 0341 	bfi	r3, r1, #1, #1
 8000aea:	7013      	strb	r3, [r2, #0]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8000aec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000af0:	4845      	ldr	r0, [pc, #276]	; (8000c08 <readall_inputs+0x158>)
 8000af2:	f002 f825 	bl	8002b40 <HAL_GPIO_ReadPin>
 8000af6:	4603      	mov	r3, r0
 8000af8:	f003 0301 	and.w	r3, r3, #1
 8000afc:	b2d9      	uxtb	r1, r3
 8000afe:	4a40      	ldr	r2, [pc, #256]	; (8000c00 <readall_inputs+0x150>)
 8000b00:	7813      	ldrb	r3, [r2, #0]
 8000b02:	f361 03c3 	bfi	r3, r1, #3, #1
 8000b06:	7013      	strb	r3, [r2, #0]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8000b08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b0c:	483e      	ldr	r0, [pc, #248]	; (8000c08 <readall_inputs+0x158>)
 8000b0e:	f002 f817 	bl	8002b40 <HAL_GPIO_ReadPin>
 8000b12:	4603      	mov	r3, r0
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	b2d9      	uxtb	r1, r3
 8000b1a:	4a39      	ldr	r2, [pc, #228]	; (8000c00 <readall_inputs+0x150>)
 8000b1c:	7813      	ldrb	r3, [r2, #0]
 8000b1e:	f361 1304 	bfi	r3, r1, #4, #1
 8000b22:	7013      	strb	r3, [r2, #0]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 8000b24:	2101      	movs	r1, #1
 8000b26:	4838      	ldr	r0, [pc, #224]	; (8000c08 <readall_inputs+0x158>)
 8000b28:	f002 f80a 	bl	8002b40 <HAL_GPIO_ReadPin>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	b2d9      	uxtb	r1, r3
 8000b34:	4a32      	ldr	r2, [pc, #200]	; (8000c00 <readall_inputs+0x150>)
 8000b36:	7813      	ldrb	r3, [r2, #0]
 8000b38:	f361 1345 	bfi	r3, r1, #5, #1
 8000b3c:	7013      	strb	r3, [r2, #0]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8000b3e:	2104      	movs	r1, #4
 8000b40:	4831      	ldr	r0, [pc, #196]	; (8000c08 <readall_inputs+0x158>)
 8000b42:	f001 fffd 	bl	8002b40 <HAL_GPIO_ReadPin>
 8000b46:	4603      	mov	r3, r0
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	b2d9      	uxtb	r1, r3
 8000b4e:	4a2c      	ldr	r2, [pc, #176]	; (8000c00 <readall_inputs+0x150>)
 8000b50:	7813      	ldrb	r3, [r2, #0]
 8000b52:	f361 1386 	bfi	r3, r1, #6, #1
 8000b56:	7013      	strb	r3, [r2, #0]

	// SDC-Eingaenge einlesen
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);					// IMD OK, Akku
 8000b58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5c:	4827      	ldr	r0, [pc, #156]	; (8000bfc <readall_inputs+0x14c>)
 8000b5e:	f001 ffef 	bl	8002b40 <HAL_GPIO_ReadPin>
 8000b62:	4603      	mov	r3, r0
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	b2d9      	uxtb	r1, r3
 8000b6a:	4a28      	ldr	r2, [pc, #160]	; (8000c0c <readall_inputs+0x15c>)
 8000b6c:	7813      	ldrb	r3, [r2, #0]
 8000b6e:	f361 0300 	bfi	r3, r1, #0, #1
 8000b72:	7013      	strb	r3, [r2, #0]
	sdc_in.HVIL = HAL_GPIO_ReadPin(SENSE_SDC_HVIL_GPIO_Port, SENSE_SDC_HVIL_Pin);				// Shutdown-Circuit HVIL, OK
 8000b74:	2108      	movs	r1, #8
 8000b76:	4821      	ldr	r0, [pc, #132]	; (8000bfc <readall_inputs+0x14c>)
 8000b78:	f001 ffe2 	bl	8002b40 <HAL_GPIO_ReadPin>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	b2d9      	uxtb	r1, r3
 8000b84:	4a21      	ldr	r2, [pc, #132]	; (8000c0c <readall_inputs+0x15c>)
 8000b86:	7813      	ldrb	r3, [r2, #0]
 8000b88:	f361 0341 	bfi	r3, r1, #1, #1
 8000b8c:	7013      	strb	r3, [r2, #0]
	sdc_in.MotorSDC = HAL_GPIO_ReadPin(SENSE_SDC_MOTOR_GPIO_Port, SENSE_SDC_MOTOR_Pin);			// Shutdown-Circuit Akku, OK
 8000b8e:	2120      	movs	r1, #32
 8000b90:	481a      	ldr	r0, [pc, #104]	; (8000bfc <readall_inputs+0x14c>)
 8000b92:	f001 ffd5 	bl	8002b40 <HAL_GPIO_ReadPin>
 8000b96:	4603      	mov	r3, r0
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	b2d9      	uxtb	r1, r3
 8000b9e:	4a1b      	ldr	r2, [pc, #108]	; (8000c0c <readall_inputs+0x15c>)
 8000ba0:	7813      	ldrb	r3, [r2, #0]
 8000ba2:	f361 0382 	bfi	r3, r1, #2, #1
 8000ba6:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8000ba8:	2110      	movs	r1, #16
 8000baa:	4814      	ldr	r0, [pc, #80]	; (8000bfc <readall_inputs+0x14c>)
 8000bac:	f001 ffc8 	bl	8002b40 <HAL_GPIO_ReadPin>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	b2d9      	uxtb	r1, r3
 8000bb8:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <readall_inputs+0x15c>)
 8000bba:	7813      	ldrb	r3, [r2, #0]
 8000bbc:	f361 03c3 	bfi	r3, r1, #3, #1
 8000bc0:	7013      	strb	r3, [r2, #0]
	sdc_in.PrechargeIn = HAL_GPIO_ReadPin(PRECHARGE_IN_GPIO_Port, PRECHARGE_IN_Pin);			// Eingang Precharge abgeschlossen
 8000bc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bc6:	4812      	ldr	r0, [pc, #72]	; (8000c10 <readall_inputs+0x160>)
 8000bc8:	f001 ffba 	bl	8002b40 <HAL_GPIO_ReadPin>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	b2d9      	uxtb	r1, r3
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <readall_inputs+0x15c>)
 8000bd6:	7813      	ldrb	r3, [r2, #0]
 8000bd8:	f361 1304 	bfi	r3, r1, #4, #1
 8000bdc:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.OVC = HAL_GPIO_ReadPin(OVC_SENSE_GPIO_Port, OVC_SENSE_Pin);						// Eingang Overcurrent erkannt
 8000bde:	2104      	movs	r1, #4
 8000be0:	480b      	ldr	r0, [pc, #44]	; (8000c10 <readall_inputs+0x160>)
 8000be2:	f001 ffad 	bl	8002b40 <HAL_GPIO_ReadPin>
 8000be6:	4603      	mov	r3, r0
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	b2d9      	uxtb	r1, r3
 8000bee:	4a09      	ldr	r2, [pc, #36]	; (8000c14 <readall_inputs+0x164>)
 8000bf0:	7813      	ldrb	r3, [r2, #0]
 8000bf2:	f361 0300 	bfi	r3, r1, #0, #1
 8000bf6:	7013      	strb	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	2000002c 	.word	0x2000002c
 8000c04:	40020c00 	.word	0x40020c00
 8000c08:	40020000 	.word	0x40020000
 8000c0c:	20000034 	.word	0x20000034
 8000c10:	40021400 	.word	0x40021400
 8000c14:	20000030 	.word	0x20000030

08000c18 <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);								// Blaue LED Platine setzen
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2180      	movs	r1, #128	; 0x80
 8000c20:	481b      	ldr	r0, [pc, #108]	; (8000c90 <testPCB_Leds+0x78>)
 8000c22:	f001 ffa5 	bl	8002b70 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000c26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c2a:	f001 f907 	bl	8001e3c <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);							// Blaue LED Platine zuruecksetzen
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2180      	movs	r1, #128	; 0x80
 8000c32:	4817      	ldr	r0, [pc, #92]	; (8000c90 <testPCB_Leds+0x78>)
 8000c34:	f001 ff9c 	bl	8002b70 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000c38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c3c:	f001 f8fe 	bl	8001e3c <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);							// Gruene LED Platine setzen
 8000c40:	2201      	movs	r2, #1
 8000c42:	2104      	movs	r1, #4
 8000c44:	4812      	ldr	r0, [pc, #72]	; (8000c90 <testPCB_Leds+0x78>)
 8000c46:	f001 ff93 	bl	8002b70 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000c4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c4e:	f001 f8f5 	bl	8001e3c <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);							// Gruene LED Platine zuruecksetzen
 8000c52:	2200      	movs	r2, #0
 8000c54:	2104      	movs	r1, #4
 8000c56:	480e      	ldr	r0, [pc, #56]	; (8000c90 <testPCB_Leds+0x78>)
 8000c58:	f001 ff8a 	bl	8002b70 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000c5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c60:	f001 f8ec 	bl	8001e3c <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);								// Rote LED Platine setzen
 8000c64:	2201      	movs	r2, #1
 8000c66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c6a:	4809      	ldr	r0, [pc, #36]	; (8000c90 <testPCB_Leds+0x78>)
 8000c6c:	f001 ff80 	bl	8002b70 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000c70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c74:	f001 f8e2 	bl	8001e3c <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);								// Rote LED Platine zuruecksetzen
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c7e:	4804      	ldr	r0, [pc, #16]	; (8000c90 <testPCB_Leds+0x78>)
 8000c80:	f001 ff76 	bl	8002b70 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000c84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c88:	f001 f8d8 	bl	8001e3c <HAL_Delay>
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40020400 	.word	0x40020400

08000c94 <testLeds>:
//----------------------------------------------------------------------

// Teste alle externen LEDs
//----------------------------------------------------------------------
void testLeds(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	// Leds Testen
	HAL_GPIO_WritePin(AKKU_LED_GPIO_Port, AKKU_LED_Pin, GPIO_PIN_SET);								// Akku LED Kombiinstrument setzen
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2180      	movs	r1, #128	; 0x80
 8000c9c:	481a      	ldr	r0, [pc, #104]	; (8000d08 <testLeds+0x74>)
 8000c9e:	f001 ff67 	bl	8002b70 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000ca2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca6:	f001 f8c9 	bl	8001e3c <HAL_Delay>
	HAL_GPIO_WritePin(AKKU_LED_GPIO_Port, AKKU_LED_Pin, GPIO_PIN_RESET);							// Akku LED Kombiinstrument zuruecksetzen
 8000caa:	2200      	movs	r2, #0
 8000cac:	2180      	movs	r1, #128	; 0x80
 8000cae:	4816      	ldr	r0, [pc, #88]	; (8000d08 <testLeds+0x74>)
 8000cb0:	f001 ff5e 	bl	8002b70 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000cb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cb8:	f001 f8c0 	bl	8001e3c <HAL_Delay>
	HAL_GPIO_WritePin(INLET_RED_GPIO_Port, INLET_RED_Pin, GPIO_PIN_SET);							// Red Inlet LED setzen
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2104      	movs	r1, #4
 8000cc0:	4812      	ldr	r0, [pc, #72]	; (8000d0c <testLeds+0x78>)
 8000cc2:	f001 ff55 	bl	8002b70 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000cc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cca:	f001 f8b7 	bl	8001e3c <HAL_Delay>
	HAL_GPIO_WritePin(INLET_RED_GPIO_Port, INLET_RED_Pin, GPIO_PIN_RESET);							// Red Inlet LED zuruecksetzen
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2104      	movs	r1, #4
 8000cd2:	480e      	ldr	r0, [pc, #56]	; (8000d0c <testLeds+0x78>)
 8000cd4:	f001 ff4c 	bl	8002b70 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000cd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cdc:	f001 f8ae 	bl	8001e3c <HAL_Delay>
	HAL_GPIO_WritePin(INLET_GREEN_GPIO_Port, INLET_GREEN_Pin, GPIO_PIN_SET);						// Green Inlet LED setzen
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	2102      	movs	r1, #2
 8000ce4:	4809      	ldr	r0, [pc, #36]	; (8000d0c <testLeds+0x78>)
 8000ce6:	f001 ff43 	bl	8002b70 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000cea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cee:	f001 f8a5 	bl	8001e3c <HAL_Delay>
	HAL_GPIO_WritePin(INLET_GREEN_GPIO_Port, INLET_GREEN_Pin, GPIO_PIN_RESET);						// Green Inlet LED zuruecksetzen
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2102      	movs	r1, #2
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <testLeds+0x78>)
 8000cf8:	f001 ff3a 	bl	8002b70 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000cfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d00:	f001 f89c 	bl	8001e3c <HAL_Delay>
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40021800 	.word	0x40021800
 8000d0c:	40021000 	.word	0x40021000

08000d10 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d16:	463b      	mov	r3, r7
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d22:	4b21      	ldr	r3, [pc, #132]	; (8000da8 <MX_ADC1_Init+0x98>)
 8000d24:	4a21      	ldr	r2, [pc, #132]	; (8000dac <MX_ADC1_Init+0x9c>)
 8000d26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d28:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <MX_ADC1_Init+0x98>)
 8000d2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d30:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <MX_ADC1_Init+0x98>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d36:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <MX_ADC1_Init+0x98>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <MX_ADC1_Init+0x98>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <MX_ADC1_Init+0x98>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d4a:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <MX_ADC1_Init+0x98>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <MX_ADC1_Init+0x98>)
 8000d52:	4a17      	ldr	r2, [pc, #92]	; (8000db0 <MX_ADC1_Init+0xa0>)
 8000d54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d56:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <MX_ADC1_Init+0x98>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <MX_ADC1_Init+0x98>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <MX_ADC1_Init+0x98>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <MX_ADC1_Init+0x98>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d70:	480d      	ldr	r0, [pc, #52]	; (8000da8 <MX_ADC1_Init+0x98>)
 8000d72:	f001 f8cf 	bl	8001f14 <HAL_ADC_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d7c:	f000 fc34 	bl	80015e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d80:	2304      	movs	r3, #4
 8000d82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d84:	2301      	movs	r3, #1
 8000d86:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_ADC1_Init+0x98>)
 8000d92:	f001 f903 	bl	8001f9c <HAL_ADC_ConfigChannel>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d9c:	f000 fc24 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000048 	.word	0x20000048
 8000dac:	40012000 	.word	0x40012000
 8000db0:	0f000001 	.word	0x0f000001

08000db4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a15      	ldr	r2, [pc, #84]	; (8000e28 <HAL_ADC_MspInit+0x74>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d123      	bne.n	8000e1e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_ADC_MspInit+0x78>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <HAL_ADC_MspInit+0x78>)
 8000ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de0:	6453      	str	r3, [r2, #68]	; 0x44
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_ADC_MspInit+0x78>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <HAL_ADC_MspInit+0x78>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <HAL_ADC_MspInit+0x78>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <HAL_ADC_MspInit+0x78>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 8000e06:	23f8      	movs	r3, #248	; 0xf8
 8000e08:	617b      	str	r3, [r7, #20]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	4805      	ldr	r0, [pc, #20]	; (8000e30 <HAL_ADC_MspInit+0x7c>)
 8000e1a:	f001 fce5 	bl	80027e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e1e:	bf00      	nop
 8000e20:	3728      	adds	r7, #40	; 0x28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40012000 	.word	0x40012000
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40020000 	.word	0x40020000

08000e34 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e38:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <MX_CAN1_Init+0x64>)
 8000e3a:	4a18      	ldr	r2, [pc, #96]	; (8000e9c <MX_CAN1_Init+0x68>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <MX_CAN1_Init+0x64>)
 8000e40:	2210      	movs	r2, #16
 8000e42:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <MX_CAN1_Init+0x64>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <MX_CAN1_Init+0x64>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <MX_CAN1_Init+0x64>)
 8000e52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e56:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <MX_CAN1_Init+0x64>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <MX_CAN1_Init+0x64>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <MX_CAN1_Init+0x64>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <MX_CAN1_Init+0x64>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <MX_CAN1_Init+0x64>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <MX_CAN1_Init+0x64>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <MX_CAN1_Init+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_CAN1_Init+0x64>)
 8000e84:	f001 face 	bl	8002424 <HAL_CAN_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000e8e:	f000 fbab 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200000b8 	.word	0x200000b8
 8000e9c:	40006400 	.word	0x40006400

08000ea0 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <MX_CAN3_Init+0x64>)
 8000ea6:	4a18      	ldr	r2, [pc, #96]	; (8000f08 <MX_CAN3_Init+0x68>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8000eaa:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MX_CAN3_Init+0x64>)
 8000eac:	2206      	movs	r2, #6
 8000eae:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_CAN3_Init+0x64>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_CAN3_Init+0x64>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_CAN3_Init+0x64>)
 8000ebe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ec2:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_CAN3_Init+0x64>)
 8000ec6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000eca:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8000ecc:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <MX_CAN3_Init+0x64>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_CAN3_Init+0x64>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <MX_CAN3_Init+0x64>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_CAN3_Init+0x64>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <MX_CAN3_Init+0x64>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <MX_CAN3_Init+0x64>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8000ef0:	4804      	ldr	r0, [pc, #16]	; (8000f04 <MX_CAN3_Init+0x64>)
 8000ef2:	f001 fa97 	bl	8002424 <HAL_CAN_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8000efc:	f000 fb74 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000090 	.word	0x20000090
 8000f08:	40003400 	.word	0x40003400

08000f0c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08e      	sub	sp, #56	; 0x38
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a43      	ldr	r2, [pc, #268]	; (8001038 <HAL_CAN_MspInit+0x12c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d131      	bne.n	8000f92 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000f2e:	4b43      	ldr	r3, [pc, #268]	; (800103c <HAL_CAN_MspInit+0x130>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	3301      	adds	r3, #1
 8000f34:	4a41      	ldr	r2, [pc, #260]	; (800103c <HAL_CAN_MspInit+0x130>)
 8000f36:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000f38:	4b40      	ldr	r3, [pc, #256]	; (800103c <HAL_CAN_MspInit+0x130>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d10b      	bne.n	8000f58 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000f40:	4b3f      	ldr	r3, [pc, #252]	; (8001040 <HAL_CAN_MspInit+0x134>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f44:	4a3e      	ldr	r2, [pc, #248]	; (8001040 <HAL_CAN_MspInit+0x134>)
 8000f46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4c:	4b3c      	ldr	r3, [pc, #240]	; (8001040 <HAL_CAN_MspInit+0x134>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f54:	623b      	str	r3, [r7, #32]
 8000f56:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f58:	4b39      	ldr	r3, [pc, #228]	; (8001040 <HAL_CAN_MspInit+0x134>)
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5c:	4a38      	ldr	r2, [pc, #224]	; (8001040 <HAL_CAN_MspInit+0x134>)
 8000f5e:	f043 0308 	orr.w	r3, r3, #8
 8000f62:	6313      	str	r3, [r2, #48]	; 0x30
 8000f64:	4b36      	ldr	r3, [pc, #216]	; (8001040 <HAL_CAN_MspInit+0x134>)
 8000f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f68:	f003 0308 	and.w	r3, r3, #8
 8000f6c:	61fb      	str	r3, [r7, #28]
 8000f6e:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f70:	2303      	movs	r3, #3
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f80:	2309      	movs	r3, #9
 8000f82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f88:	4619      	mov	r1, r3
 8000f8a:	482e      	ldr	r0, [pc, #184]	; (8001044 <HAL_CAN_MspInit+0x138>)
 8000f8c:	f001 fc2c 	bl	80027e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8000f90:	e04e      	b.n	8001030 <HAL_CAN_MspInit+0x124>
  else if(canHandle->Instance==CAN3)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a2c      	ldr	r2, [pc, #176]	; (8001048 <HAL_CAN_MspInit+0x13c>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d149      	bne.n	8001030 <HAL_CAN_MspInit+0x124>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8000f9c:	4b28      	ldr	r3, [pc, #160]	; (8001040 <HAL_CAN_MspInit+0x134>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	4a27      	ldr	r2, [pc, #156]	; (8001040 <HAL_CAN_MspInit+0x134>)
 8000fa2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fa6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa8:	4b25      	ldr	r3, [pc, #148]	; (8001040 <HAL_CAN_MspInit+0x134>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fb0:	61bb      	str	r3, [r7, #24]
 8000fb2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000fb4:	4b22      	ldr	r3, [pc, #136]	; (8001040 <HAL_CAN_MspInit+0x134>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	4a21      	ldr	r2, [pc, #132]	; (8001040 <HAL_CAN_MspInit+0x134>)
 8000fba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <HAL_CAN_MspInit+0x134>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	; (800103c <HAL_CAN_MspInit+0x130>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	4a1a      	ldr	r2, [pc, #104]	; (800103c <HAL_CAN_MspInit+0x130>)
 8000fd4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <HAL_CAN_MspInit+0x130>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d10b      	bne.n	8000ff6 <HAL_CAN_MspInit+0xea>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000fde:	4b18      	ldr	r3, [pc, #96]	; (8001040 <HAL_CAN_MspInit+0x134>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	4a17      	ldr	r2, [pc, #92]	; (8001040 <HAL_CAN_MspInit+0x134>)
 8000fe4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_CAN_MspInit+0x134>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_CAN_MspInit+0x134>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a11      	ldr	r2, [pc, #68]	; (8001040 <HAL_CAN_MspInit+0x134>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <HAL_CAN_MspInit+0x134>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 800100e:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001020:	230b      	movs	r3, #11
 8001022:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001028:	4619      	mov	r1, r3
 800102a:	4808      	ldr	r0, [pc, #32]	; (800104c <HAL_CAN_MspInit+0x140>)
 800102c:	f001 fbdc 	bl	80027e8 <HAL_GPIO_Init>
}
 8001030:	bf00      	nop
 8001032:	3738      	adds	r7, #56	; 0x38
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40006400 	.word	0x40006400
 800103c:	20000028 	.word	0x20000028
 8001040:	40023800 	.word	0x40023800
 8001044:	40020c00 	.word	0x40020c00
 8001048:	40003400 	.word	0x40003400
 800104c:	40020000 	.word	0x40020000

08001050 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08e      	sub	sp, #56	; 0x38
 8001054:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001066:	4ba9      	ldr	r3, [pc, #676]	; (800130c <MX_GPIO_Init+0x2bc>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4aa8      	ldr	r2, [pc, #672]	; (800130c <MX_GPIO_Init+0x2bc>)
 800106c:	f043 0310 	orr.w	r3, r3, #16
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4ba6      	ldr	r3, [pc, #664]	; (800130c <MX_GPIO_Init+0x2bc>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0310 	and.w	r3, r3, #16
 800107a:	623b      	str	r3, [r7, #32]
 800107c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107e:	4ba3      	ldr	r3, [pc, #652]	; (800130c <MX_GPIO_Init+0x2bc>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4aa2      	ldr	r2, [pc, #648]	; (800130c <MX_GPIO_Init+0x2bc>)
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4ba0      	ldr	r3, [pc, #640]	; (800130c <MX_GPIO_Init+0x2bc>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0304 	and.w	r3, r3, #4
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001096:	4b9d      	ldr	r3, [pc, #628]	; (800130c <MX_GPIO_Init+0x2bc>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a9c      	ldr	r2, [pc, #624]	; (800130c <MX_GPIO_Init+0x2bc>)
 800109c:	f043 0320 	orr.w	r3, r3, #32
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b9a      	ldr	r3, [pc, #616]	; (800130c <MX_GPIO_Init+0x2bc>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0320 	and.w	r3, r3, #32
 80010aa:	61bb      	str	r3, [r7, #24]
 80010ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ae:	4b97      	ldr	r3, [pc, #604]	; (800130c <MX_GPIO_Init+0x2bc>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a96      	ldr	r2, [pc, #600]	; (800130c <MX_GPIO_Init+0x2bc>)
 80010b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b94      	ldr	r3, [pc, #592]	; (800130c <MX_GPIO_Init+0x2bc>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	4b91      	ldr	r3, [pc, #580]	; (800130c <MX_GPIO_Init+0x2bc>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a90      	ldr	r2, [pc, #576]	; (800130c <MX_GPIO_Init+0x2bc>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b8e      	ldr	r3, [pc, #568]	; (800130c <MX_GPIO_Init+0x2bc>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	4b8b      	ldr	r3, [pc, #556]	; (800130c <MX_GPIO_Init+0x2bc>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a8a      	ldr	r2, [pc, #552]	; (800130c <MX_GPIO_Init+0x2bc>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b88      	ldr	r3, [pc, #544]	; (800130c <MX_GPIO_Init+0x2bc>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f6:	4b85      	ldr	r3, [pc, #532]	; (800130c <MX_GPIO_Init+0x2bc>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a84      	ldr	r2, [pc, #528]	; (800130c <MX_GPIO_Init+0x2bc>)
 80010fc:	f043 0308 	orr.w	r3, r3, #8
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b82      	ldr	r3, [pc, #520]	; (800130c <MX_GPIO_Init+0x2bc>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0308 	and.w	r3, r3, #8
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800110e:	4b7f      	ldr	r3, [pc, #508]	; (800130c <MX_GPIO_Init+0x2bc>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a7e      	ldr	r2, [pc, #504]	; (800130c <MX_GPIO_Init+0x2bc>)
 8001114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b7c      	ldr	r3, [pc, #496]	; (800130c <MX_GPIO_Init+0x2bc>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 8001126:	2200      	movs	r2, #0
 8001128:	f248 0187 	movw	r1, #32903	; 0x8087
 800112c:	4878      	ldr	r0, [pc, #480]	; (8001310 <MX_GPIO_Init+0x2c0>)
 800112e:	f001 fd1f 	bl	8002b70 <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin|PRECHARGE_IN_Pin, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	f24a 0102 	movw	r1, #40962	; 0xa002
 8001138:	4876      	ldr	r0, [pc, #472]	; (8001314 <MX_GPIO_Init+0x2c4>)
 800113a:	f001 fd19 	bl	8002b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	f240 6102 	movw	r1, #1538	; 0x602
 8001144:	4874      	ldr	r0, [pc, #464]	; (8001318 <MX_GPIO_Init+0x2c8>)
 8001146:	f001 fd13 	bl	8002b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	f244 0184 	movw	r1, #16516	; 0x4084
 8001150:	4872      	ldr	r0, [pc, #456]	; (800131c <MX_GPIO_Init+0x2cc>)
 8001152:	f001 fd0d 	bl	8002b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8001156:	2200      	movs	r2, #0
 8001158:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 800115c:	4870      	ldr	r0, [pc, #448]	; (8001320 <MX_GPIO_Init+0x2d0>)
 800115e:	f001 fd07 	bl	8002b70 <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	2118      	movs	r1, #24
 8001166:	486f      	ldr	r0, [pc, #444]	; (8001324 <MX_GPIO_Init+0x2d4>)
 8001168:	f001 fd02 	bl	8002b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 800116c:	f248 0387 	movw	r3, #32903	; 0x8087
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
                          |INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001172:	2301      	movs	r3, #1
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800117e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001182:	4619      	mov	r1, r3
 8001184:	4862      	ldr	r0, [pc, #392]	; (8001310 <MX_GPIO_Init+0x2c0>)
 8001186:	f001 fb2f 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 800118a:	f44f 739c 	mov.w	r3, #312	; 0x138
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001190:	2300      	movs	r3, #0
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119c:	4619      	mov	r1, r3
 800119e:	485c      	ldr	r0, [pc, #368]	; (8001310 <MX_GPIO_Init+0x2c0>)
 80011a0:	f001 fb22 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 80011a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011aa:	4b5f      	ldr	r3, [pc, #380]	; (8001328 <MX_GPIO_Init+0x2d8>)
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 80011b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b6:	4619      	mov	r1, r3
 80011b8:	485c      	ldr	r0, [pc, #368]	; (800132c <MX_GPIO_Init+0x2dc>)
 80011ba:	f001 fb15 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin|PRECHARGE_IN_Pin;
 80011be:	f24a 0302 	movw	r3, #40962	; 0xa002
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2300      	movs	r3, #0
 80011ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d4:	4619      	mov	r1, r3
 80011d6:	484f      	ldr	r0, [pc, #316]	; (8001314 <MX_GPIO_Init+0x2c4>)
 80011d8:	f001 fb06 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin;
 80011dc:	2304      	movs	r3, #4
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OVC_SENSE_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ec:	4619      	mov	r1, r3
 80011ee:	4849      	ldr	r0, [pc, #292]	; (8001314 <MX_GPIO_Init+0x2c4>)
 80011f0:	f001 fafa 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 80011f4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011fa:	2303      	movs	r3, #3
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001206:	4619      	mov	r1, r3
 8001208:	4842      	ldr	r0, [pc, #264]	; (8001314 <MX_GPIO_Init+0x2c4>)
 800120a:	f001 faed 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 800120e:	f240 6302 	movw	r3, #1538	; 0x602
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001214:	2301      	movs	r3, #1
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001224:	4619      	mov	r1, r3
 8001226:	483c      	ldr	r0, [pc, #240]	; (8001318 <MX_GPIO_Init+0x2c8>)
 8001228:	f001 fade 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 800122c:	f244 0384 	movw	r3, #16516	; 0x4084
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001232:	2301      	movs	r3, #1
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2300      	movs	r3, #0
 800123c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001242:	4619      	mov	r1, r3
 8001244:	4835      	ldr	r0, [pc, #212]	; (800131c <MX_GPIO_Init+0x2cc>)
 8001246:	f001 facf 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 800124a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001250:	2300      	movs	r3, #0
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 8001258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125c:	4619      	mov	r1, r3
 800125e:	4831      	ldr	r0, [pc, #196]	; (8001324 <MX_GPIO_Init+0x2d4>)
 8001260:	f001 fac2 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8001264:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126a:	2301      	movs	r3, #1
 800126c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127a:	4619      	mov	r1, r3
 800127c:	4828      	ldr	r0, [pc, #160]	; (8001320 <MX_GPIO_Init+0x2d0>)
 800127e:	f001 fab3 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = SD_SW_Pin|SD_D0_Pin|SD_D1_Pin|SD_D2_Pin
 8001282:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
                          |SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001288:	2303      	movs	r3, #3
 800128a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001294:	4619      	mov	r1, r3
 8001296:	4825      	ldr	r0, [pc, #148]	; (800132c <MX_GPIO_Init+0x2dc>)
 8001298:	f001 faa6 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON1_Pin;
 800129c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ae:	4619      	mov	r1, r3
 80012b0:	4819      	ldr	r0, [pc, #100]	; (8001318 <MX_GPIO_Init+0x2c8>)
 80012b2:	f001 fa99 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CMD_Pin;
 80012b6:	2304      	movs	r3, #4
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ba:	2303      	movs	r3, #3
 80012bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 80012c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c6:	4619      	mov	r1, r3
 80012c8:	4816      	ldr	r0, [pc, #88]	; (8001324 <MX_GPIO_Init+0x2d4>)
 80012ca:	f001 fa8d 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|DIGITAL2_Pin;
 80012ce:	2318      	movs	r3, #24
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d2:	2301      	movs	r3, #1
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e2:	4619      	mov	r1, r3
 80012e4:	480f      	ldr	r0, [pc, #60]	; (8001324 <MX_GPIO_Init+0x2d4>)
 80012e6:	f001 fa7f 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 80012ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f0:	2303      	movs	r3, #3
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fc:	4619      	mov	r1, r3
 80012fe:	4807      	ldr	r0, [pc, #28]	; (800131c <MX_GPIO_Init+0x2cc>)
 8001300:	f001 fa72 	bl	80027e8 <HAL_GPIO_Init>

}
 8001304:	bf00      	nop
 8001306:	3738      	adds	r7, #56	; 0x38
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40023800 	.word	0x40023800
 8001310:	40021000 	.word	0x40021000
 8001314:	40021400 	.word	0x40021400
 8001318:	40020000 	.word	0x40020000
 800131c:	40020400 	.word	0x40020400
 8001320:	40021800 	.word	0x40021800
 8001324:	40020c00 	.word	0x40020c00
 8001328:	10110000 	.word	0x10110000
 800132c:	40020800 	.word	0x40020800

08001330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001334:	f000 fd39 	bl	8001daa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001338:	f000 f8c4 	bl	80014c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800133c:	f7ff fe88 	bl	8001050 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001340:	f7ff fd78 	bl	8000e34 <MX_CAN1_Init>
  MX_SPI4_Init();
 8001344:	f000 f996 	bl	8001674 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 8001348:	f000 fc92 	bl	8001c70 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800134c:	f7ff fce0 	bl	8000d10 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001350:	f000 fad2 	bl	80018f8 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001354:	f000 fb74 	bl	8001a40 <MX_TIM4_Init>
  MX_SPI1_Init();
 8001358:	f000 f94e 	bl	80015f8 <MX_SPI1_Init>
  MX_CAN3_Init();
 800135c:	f7ff fda0 	bl	8000ea0 <MX_CAN3_Init>
  /* USER CODE BEGIN 2 */

	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 8001360:	f7ff fae4 	bl	800092c <readResetSource>
 8001364:	4603      	mov	r3, r0
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fb32 	bl	80009d0 <printResetSource>

	/* Teste serielle Schnittstelle*/
	#define TEST_STRING_UART		"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 800136c:	213a      	movs	r1, #58	; 0x3a
 800136e:	4848      	ldr	r0, [pc, #288]	; (8001490 <main+0x160>)
 8001370:	f7ff f8e6 	bl	8000540 <uartTransmit>

	// Sammel Systeminformationen
	collectSystemInfo();
 8001374:	f7ff fab0 	bl	80008d8 <collectSystemInfo>
#endif

	// Leds Testen
	testPCB_Leds();
 8001378:	f7ff fc4e 	bl	8000c18 <testPCB_Leds>
	testLeds();
 800137c:	f7ff fc8a 	bl	8000c94 <testLeds>

	// Lese alle Eingaenge
	readall_inputs();
 8001380:	f7ff fb96 	bl	8000ab0 <readall_inputs>

	if (!(sdc_in.sdcinput && 0b00001111))										// SDC OK; Motor, BTB, IMD und HVIL OK
 8001384:	4b43      	ldr	r3, [pc, #268]	; (8001494 <main+0x164>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d15e      	bne.n	800144a <main+0x11a>
	{
		#define SDC_STRING_ERROR			"\nSDC ist nicht geschlossen"
		uartTransmit(SDC_STRING_ERROR, sizeof(SDC_STRING_ERROR));
 800138c:	211b      	movs	r1, #27
 800138e:	4842      	ldr	r0, [pc, #264]	; (8001498 <main+0x168>)
 8001390:	f7ff f8d6 	bl	8000540 <uartTransmit>

		// LEDs setzen bei SDC Fehler
		leuchten_out.GreenLed = 0;
 8001394:	4a41      	ldr	r2, [pc, #260]	; (800149c <main+0x16c>)
 8001396:	7813      	ldrb	r3, [r2, #0]
 8001398:	f36f 1386 	bfc	r3, #6, #1
 800139c:	7013      	strb	r3, [r2, #0]
		leuchten_out.RedLed = 1;
 800139e:	4a3f      	ldr	r2, [pc, #252]	; (800149c <main+0x16c>)
 80013a0:	7813      	ldrb	r3, [r2, #0]
 80013a2:	f043 0320 	orr.w	r3, r3, #32
 80013a6:	7013      	strb	r3, [r2, #0]
		leuchten_out.AkkuLed = 0;
 80013a8:	4a3c      	ldr	r2, [pc, #240]	; (800149c <main+0x16c>)
 80013aa:	7813      	ldrb	r3, [r2, #0]
 80013ac:	f36f 0382 	bfc	r3, #2, #1
 80013b0:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);
 80013b2:	4b3a      	ldr	r3, [pc, #232]	; (800149c <main+0x16c>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	461a      	mov	r2, r3
 80013be:	2104      	movs	r1, #4
 80013c0:	4837      	ldr	r0, [pc, #220]	; (80014a0 <main+0x170>)
 80013c2:	f001 fbd5 	bl	8002b70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);
 80013c6:	4b35      	ldr	r3, [pc, #212]	; (800149c <main+0x16c>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013d6:	4832      	ldr	r0, [pc, #200]	; (80014a0 <main+0x170>)
 80013d8:	f001 fbca 	bl	8002b70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AKKU_LED_GPIO_Port, AKKU_LED_Pin, leuchten_out.AkkuLed);
 80013dc:	4b2f      	ldr	r3, [pc, #188]	; (800149c <main+0x16c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	461a      	mov	r2, r3
 80013e8:	2180      	movs	r1, #128	; 0x80
 80013ea:	482e      	ldr	r0, [pc, #184]	; (80014a4 <main+0x174>)
 80013ec:	f001 fbc0 	bl	8002b70 <HAL_GPIO_WritePin>

		// Ausgabe welcher Fehler vorhanden
		// Motorsteuergeraet Fehler
		if(!(sdc_in.MotorSDC == 1))
 80013f0:	4b28      	ldr	r3, [pc, #160]	; (8001494 <main+0x164>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d103      	bne.n	8001406 <main+0xd6>
		{
			#define SDC_STRING_MOTOR		"\nSDC Motor hat einen Fehler und ist offen"
			uartTransmit(SDC_STRING_MOTOR, sizeof(SDC_STRING_MOTOR));
 80013fe:	212a      	movs	r1, #42	; 0x2a
 8001400:	4829      	ldr	r0, [pc, #164]	; (80014a8 <main+0x178>)
 8001402:	f7ff f89d 	bl	8000540 <uartTransmit>
		}

		// BamoCar Fehler
		if (!(sdc_in.BTB_SDC == 1))
 8001406:	4b23      	ldr	r3, [pc, #140]	; (8001494 <main+0x164>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	d103      	bne.n	800141c <main+0xec>
		{
			#define SDC_STRING_BTB			"\nSDC BTB hat einen Fehler und ist offen"
			uartTransmit(SDC_STRING_BTB, sizeof(SDC_STRING_BTB));
 8001414:	2128      	movs	r1, #40	; 0x28
 8001416:	4825      	ldr	r0, [pc, #148]	; (80014ac <main+0x17c>)
 8001418:	f7ff f892 	bl	8000540 <uartTransmit>
		}

		// HVIL Fehler
		if (!(sdc_in.HVIL == 1))
 800141c:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <main+0x164>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d103      	bne.n	8001432 <main+0x102>
		{
			#define SDC_STRING_HVIL			"\nSDC HVIL ist nicht geschlossen"
			uartTransmit(SDC_STRING_HVIL, sizeof(SDC_STRING_HVIL));
 800142a:	2120      	movs	r1, #32
 800142c:	4820      	ldr	r0, [pc, #128]	; (80014b0 <main+0x180>)
 800142e:	f7ff f887 	bl	8000540 <uartTransmit>
		}

		// IMD Fehler
		if (!(sdc_in.IMD_OK_IN == 1))
 8001432:	4b18      	ldr	r3, [pc, #96]	; (8001494 <main+0x164>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	d126      	bne.n	800148e <main+0x15e>
		{
			#define SDC_STRING_IMD			"\nSDC IMD hat einen Fehler"
			uartTransmit(SDC_STRING_IMD, sizeof(SDC_STRING_IMD));
 8001440:	211a      	movs	r1, #26
 8001442:	481c      	ldr	r0, [pc, #112]	; (80014b4 <main+0x184>)
 8001444:	f7ff f87c 	bl	8000540 <uartTransmit>
 8001448:	e021      	b.n	800148e <main+0x15e>
		}
	}
	else
	{
		// Keine Fehler, LEDs fuer OK setzen
		system_out.AmsOK = 1;
 800144a:	4a1b      	ldr	r2, [pc, #108]	; (80014b8 <main+0x188>)
 800144c:	7813      	ldrb	r3, [r2, #0]
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, system_out.AmsOK);
 8001454:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <main+0x188>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800145c:	b2db      	uxtb	r3, r3
 800145e:	461a      	mov	r2, r3
 8001460:	2180      	movs	r1, #128	; 0x80
 8001462:	4816      	ldr	r0, [pc, #88]	; (80014bc <main+0x18c>)
 8001464:	f001 fb84 	bl	8002b70 <HAL_GPIO_WritePin>
		leuchten_out.GreenLed = 1;
 8001468:	4a0c      	ldr	r2, [pc, #48]	; (800149c <main+0x16c>)
 800146a:	7813      	ldrb	r3, [r2, #0]
 800146c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001470:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <main+0x16c>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800147a:	b2db      	uxtb	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	2104      	movs	r1, #4
 8001480:	4807      	ldr	r0, [pc, #28]	; (80014a0 <main+0x170>)
 8001482:	f001 fb75 	bl	8002b70 <HAL_GPIO_WritePin>

		// Ausgabe SDC geschlossen
		#define SDC_STRING_OK				"\nSDC ist geschlossen"
		uartTransmit(SDC_STRING_OK, sizeof(SDC_STRING_OK));
 8001486:	2115      	movs	r1, #21
 8001488:	480d      	ldr	r0, [pc, #52]	; (80014c0 <main+0x190>)
 800148a:	f7ff f859 	bl	8000540 <uartTransmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800148e:	e7fe      	b.n	800148e <main+0x15e>
 8001490:	08005f60 	.word	0x08005f60
 8001494:	20000034 	.word	0x20000034
 8001498:	08005f9c 	.word	0x08005f9c
 800149c:	20000044 	.word	0x20000044
 80014a0:	40020400 	.word	0x40020400
 80014a4:	40021800 	.word	0x40021800
 80014a8:	08005fb8 	.word	0x08005fb8
 80014ac:	08005fe4 	.word	0x08005fe4
 80014b0:	0800600c 	.word	0x0800600c
 80014b4:	0800602c 	.word	0x0800602c
 80014b8:	2000003c 	.word	0x2000003c
 80014bc:	40021000 	.word	0x40021000
 80014c0:	08006048 	.word	0x08006048

080014c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b0b8      	sub	sp, #224	; 0xe0
 80014c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014ce:	2234      	movs	r2, #52	; 0x34
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f004 fb78 	bl	8005bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	2290      	movs	r2, #144	; 0x90
 80014ee:	2100      	movs	r1, #0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f004 fb69 	bl	8005bc8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f6:	4b3a      	ldr	r3, [pc, #232]	; (80015e0 <SystemClock_Config+0x11c>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	4a39      	ldr	r2, [pc, #228]	; (80015e0 <SystemClock_Config+0x11c>)
 80014fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001500:	6413      	str	r3, [r2, #64]	; 0x40
 8001502:	4b37      	ldr	r3, [pc, #220]	; (80015e0 <SystemClock_Config+0x11c>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800150e:	4b35      	ldr	r3, [pc, #212]	; (80015e4 <SystemClock_Config+0x120>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a34      	ldr	r2, [pc, #208]	; (80015e4 <SystemClock_Config+0x120>)
 8001514:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	4b32      	ldr	r3, [pc, #200]	; (80015e4 <SystemClock_Config+0x120>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001526:	2301      	movs	r3, #1
 8001528:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800152c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001530:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001534:	2302      	movs	r3, #2
 8001536:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800153a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800153e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001542:	2319      	movs	r3, #25
 8001544:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001548:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800154c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001550:	2302      	movs	r3, #2
 8001552:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001556:	2308      	movs	r3, #8
 8001558:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800155c:	2302      	movs	r3, #2
 800155e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001562:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001566:	4618      	mov	r0, r3
 8001568:	f001 fb6c 	bl	8002c44 <HAL_RCC_OscConfig>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001572:	f000 f839 	bl	80015e8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001576:	f001 fb15 	bl	8002ba4 <HAL_PWREx_EnableOverDrive>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001580:	f000 f832 	bl	80015e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001584:	230f      	movs	r3, #15
 8001586:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800158a:	2302      	movs	r3, #2
 800158c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001590:	2300      	movs	r3, #0
 8001592:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001596:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800159a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800159e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80015a6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015aa:	2107      	movs	r1, #7
 80015ac:	4618      	mov	r0, r3
 80015ae:	f001 fdf7 	bl	80031a0 <HAL_RCC_ClockConfig>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80015b8:	f000 f816 	bl	80015e8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015bc:	2380      	movs	r3, #128	; 0x80
 80015be:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015c0:	2300      	movs	r3, #0
 80015c2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015c4:	f107 0308 	add.w	r3, r7, #8
 80015c8:	4618      	mov	r0, r3
 80015ca:	f001 ffbf 	bl	800354c <HAL_RCCEx_PeriphCLKConfig>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <SystemClock_Config+0x114>
  {
    Error_Handler();
 80015d4:	f000 f808 	bl	80015e8 <Error_Handler>
  }
}
 80015d8:	bf00      	nop
 80015da:	37e0      	adds	r7, #224	; 0xe0
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40007000 	.word	0x40007000

080015e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <MX_SPI1_Init+0x74>)
 80015fe:	4a1c      	ldr	r2, [pc, #112]	; (8001670 <MX_SPI1_Init+0x78>)
 8001600:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <MX_SPI1_Init+0x74>)
 8001604:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001608:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800160a:	4b18      	ldr	r3, [pc, #96]	; (800166c <MX_SPI1_Init+0x74>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001610:	4b16      	ldr	r3, [pc, #88]	; (800166c <MX_SPI1_Init+0x74>)
 8001612:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001616:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <MX_SPI1_Init+0x74>)
 800161a:	2200      	movs	r2, #0
 800161c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800161e:	4b13      	ldr	r3, [pc, #76]	; (800166c <MX_SPI1_Init+0x74>)
 8001620:	2200      	movs	r2, #0
 8001622:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <MX_SPI1_Init+0x74>)
 8001626:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800162a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <MX_SPI1_Init+0x74>)
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <MX_SPI1_Init+0x74>)
 8001634:	2200      	movs	r2, #0
 8001636:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <MX_SPI1_Init+0x74>)
 800163a:	2200      	movs	r2, #0
 800163c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <MX_SPI1_Init+0x74>)
 8001640:	2200      	movs	r2, #0
 8001642:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <MX_SPI1_Init+0x74>)
 8001646:	2207      	movs	r2, #7
 8001648:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <MX_SPI1_Init+0x74>)
 800164c:	2200      	movs	r2, #0
 800164e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <MX_SPI1_Init+0x74>)
 8001652:	2208      	movs	r2, #8
 8001654:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001656:	4805      	ldr	r0, [pc, #20]	; (800166c <MX_SPI1_Init+0x74>)
 8001658:	f002 fba0 	bl	8003d9c <HAL_SPI_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001662:	f7ff ffc1 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000144 	.word	0x20000144
 8001670:	40013000 	.word	0x40013000

08001674 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001678:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <MX_SPI4_Init+0x74>)
 800167a:	4a1c      	ldr	r2, [pc, #112]	; (80016ec <MX_SPI4_Init+0x78>)
 800167c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800167e:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <MX_SPI4_Init+0x74>)
 8001680:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001684:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <MX_SPI4_Init+0x74>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 800168c:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <MX_SPI4_Init+0x74>)
 800168e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001692:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <MX_SPI4_Init+0x74>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <MX_SPI4_Init+0x74>)
 800169c:	2200      	movs	r2, #0
 800169e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <MX_SPI4_Init+0x74>)
 80016a2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016a6:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <MX_SPI4_Init+0x74>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <MX_SPI4_Init+0x74>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <MX_SPI4_Init+0x74>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ba:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <MX_SPI4_Init+0x74>)
 80016bc:	2200      	movs	r2, #0
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <MX_SPI4_Init+0x74>)
 80016c2:	2207      	movs	r2, #7
 80016c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016c6:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <MX_SPI4_Init+0x74>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <MX_SPI4_Init+0x74>)
 80016ce:	2208      	movs	r2, #8
 80016d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80016d2:	4805      	ldr	r0, [pc, #20]	; (80016e8 <MX_SPI4_Init+0x74>)
 80016d4:	f002 fb62 	bl	8003d9c <HAL_SPI_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80016de:	f7ff ff83 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200000e0 	.word	0x200000e0
 80016ec:	40013400 	.word	0x40013400

080016f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08c      	sub	sp, #48	; 0x30
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 031c 	add.w	r3, r7, #28
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a3d      	ldr	r2, [pc, #244]	; (8001804 <HAL_SPI_MspInit+0x114>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d145      	bne.n	800179e <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001712:	4b3d      	ldr	r3, [pc, #244]	; (8001808 <HAL_SPI_MspInit+0x118>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	4a3c      	ldr	r2, [pc, #240]	; (8001808 <HAL_SPI_MspInit+0x118>)
 8001718:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800171c:	6453      	str	r3, [r2, #68]	; 0x44
 800171e:	4b3a      	ldr	r3, [pc, #232]	; (8001808 <HAL_SPI_MspInit+0x118>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001726:	61bb      	str	r3, [r7, #24]
 8001728:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800172a:	4b37      	ldr	r3, [pc, #220]	; (8001808 <HAL_SPI_MspInit+0x118>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a36      	ldr	r2, [pc, #216]	; (8001808 <HAL_SPI_MspInit+0x118>)
 8001730:	f043 0308 	orr.w	r3, r3, #8
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b34      	ldr	r3, [pc, #208]	; (8001808 <HAL_SPI_MspInit+0x118>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001742:	4b31      	ldr	r3, [pc, #196]	; (8001808 <HAL_SPI_MspInit+0x118>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a30      	ldr	r2, [pc, #192]	; (8001808 <HAL_SPI_MspInit+0x118>)
 8001748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b2e      	ldr	r3, [pc, #184]	; (8001808 <HAL_SPI_MspInit+0x118>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001766:	2303      	movs	r3, #3
 8001768:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800176a:	2305      	movs	r3, #5
 800176c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 800176e:	f107 031c 	add.w	r3, r7, #28
 8001772:	4619      	mov	r1, r3
 8001774:	4825      	ldr	r0, [pc, #148]	; (800180c <HAL_SPI_MspInit+0x11c>)
 8001776:	f001 f837 	bl	80027e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTI_MISO_Pin|POTI_CS_Pin|POTI_SCK_Pin;
 800177a:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800177e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001788:	2303      	movs	r3, #3
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800178c:	2305      	movs	r3, #5
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	4619      	mov	r1, r3
 8001796:	481e      	ldr	r0, [pc, #120]	; (8001810 <HAL_SPI_MspInit+0x120>)
 8001798:	f001 f826 	bl	80027e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800179c:	e02d      	b.n	80017fa <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI4)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a1c      	ldr	r2, [pc, #112]	; (8001814 <HAL_SPI_MspInit+0x124>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d128      	bne.n	80017fa <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80017a8:	4b17      	ldr	r3, [pc, #92]	; (8001808 <HAL_SPI_MspInit+0x118>)
 80017aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ac:	4a16      	ldr	r2, [pc, #88]	; (8001808 <HAL_SPI_MspInit+0x118>)
 80017ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017b2:	6453      	str	r3, [r2, #68]	; 0x44
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <HAL_SPI_MspInit+0x118>)
 80017b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_SPI_MspInit+0x118>)
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	4a10      	ldr	r2, [pc, #64]	; (8001808 <HAL_SPI_MspInit+0x118>)
 80017c6:	f043 0310 	orr.w	r3, r3, #16
 80017ca:	6313      	str	r3, [r2, #48]	; 0x30
 80017cc:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <HAL_SPI_MspInit+0x118>)
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	f003 0310 	and.w	r3, r3, #16
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ISOSPI_CS_Pin|ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 80017d8:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80017dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e6:	2303      	movs	r3, #3
 80017e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80017ea:	2305      	movs	r3, #5
 80017ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017ee:	f107 031c 	add.w	r3, r7, #28
 80017f2:	4619      	mov	r1, r3
 80017f4:	4808      	ldr	r0, [pc, #32]	; (8001818 <HAL_SPI_MspInit+0x128>)
 80017f6:	f000 fff7 	bl	80027e8 <HAL_GPIO_Init>
}
 80017fa:	bf00      	nop
 80017fc:	3730      	adds	r7, #48	; 0x30
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40013000 	.word	0x40013000
 8001808:	40023800 	.word	0x40023800
 800180c:	40020c00 	.word	0x40020c00
 8001810:	40021800 	.word	0x40021800
 8001814:	40013400 	.word	0x40013400
 8001818:	40021000 	.word	0x40021000

0800181c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <HAL_MspInit+0x4c>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a10      	ldr	r2, [pc, #64]	; (8001868 <HAL_MspInit+0x4c>)
 8001828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <HAL_MspInit+0x4c>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <HAL_MspInit+0x4c>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <HAL_MspInit+0x4c>)
 8001840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001844:	6453      	str	r3, [r2, #68]	; 0x44
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <HAL_MspInit+0x4c>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	210f      	movs	r1, #15
 8001856:	f06f 0001 	mvn.w	r0, #1
 800185a:	f000 ff9c 	bl	8002796 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <HardFault_Handler+0x4>

08001880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <MemManage_Handler+0x4>

08001886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <BusFault_Handler+0x4>

0800188c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <UsageFault_Handler+0x4>

08001892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <SystemInit+0x28>)
 80018d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018d6:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <SystemInit+0x28>)
 80018d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018e0:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <SystemInit+0x28>)
 80018e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018e6:	609a      	str	r2, [r3, #8]
#endif
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b090      	sub	sp, #64	; 0x40
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800190c:	f107 031c 	add.w	r3, r7, #28
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800192a:	463b      	mov	r3, r7
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001934:	4b40      	ldr	r3, [pc, #256]	; (8001a38 <MX_TIM1_Init+0x140>)
 8001936:	4a41      	ldr	r2, [pc, #260]	; (8001a3c <MX_TIM1_Init+0x144>)
 8001938:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800193a:	4b3f      	ldr	r3, [pc, #252]	; (8001a38 <MX_TIM1_Init+0x140>)
 800193c:	2200      	movs	r2, #0
 800193e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001940:	4b3d      	ldr	r3, [pc, #244]	; (8001a38 <MX_TIM1_Init+0x140>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001946:	4b3c      	ldr	r3, [pc, #240]	; (8001a38 <MX_TIM1_Init+0x140>)
 8001948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800194c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194e:	4b3a      	ldr	r3, [pc, #232]	; (8001a38 <MX_TIM1_Init+0x140>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001954:	4b38      	ldr	r3, [pc, #224]	; (8001a38 <MX_TIM1_Init+0x140>)
 8001956:	2200      	movs	r2, #0
 8001958:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195a:	4b37      	ldr	r3, [pc, #220]	; (8001a38 <MX_TIM1_Init+0x140>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001960:	4835      	ldr	r0, [pc, #212]	; (8001a38 <MX_TIM1_Init+0x140>)
 8001962:	f002 fac6 	bl	8003ef2 <HAL_TIM_Base_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800196c:	f7ff fe3c 	bl	80015e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001976:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800197a:	4619      	mov	r1, r3
 800197c:	482e      	ldr	r0, [pc, #184]	; (8001a38 <MX_TIM1_Init+0x140>)
 800197e:	f002 fd6b 	bl	8004458 <HAL_TIM_ConfigClockSource>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001988:	f7ff fe2e 	bl	80015e8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800198c:	482a      	ldr	r0, [pc, #168]	; (8001a38 <MX_TIM1_Init+0x140>)
 800198e:	f002 fb5e 	bl	800404e <HAL_TIM_IC_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001998:	f7ff fe26 	bl	80015e8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800199c:	2304      	movs	r3, #4
 800199e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80019a0:	2350      	movs	r3, #80	; 0x50
 80019a2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019a4:	2300      	movs	r3, #0
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80019b0:	f107 031c 	add.w	r3, r7, #28
 80019b4:	4619      	mov	r1, r3
 80019b6:	4820      	ldr	r0, [pc, #128]	; (8001a38 <MX_TIM1_Init+0x140>)
 80019b8:	f002 fe14 	bl	80045e4 <HAL_TIM_SlaveConfigSynchro>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80019c2:	f7ff fe11 	bl	80015e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80019ca:	2301      	movs	r3, #1
 80019cc:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80019d6:	f107 030c 	add.w	r3, r7, #12
 80019da:	2200      	movs	r2, #0
 80019dc:	4619      	mov	r1, r3
 80019de:	4816      	ldr	r0, [pc, #88]	; (8001a38 <MX_TIM1_Init+0x140>)
 80019e0:	f002 fb96 	bl	8004110 <HAL_TIM_IC_ConfigChannel>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80019ea:	f7ff fdfd 	bl	80015e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80019ee:	2302      	movs	r3, #2
 80019f0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80019f2:	2302      	movs	r3, #2
 80019f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80019f6:	f107 030c 	add.w	r3, r7, #12
 80019fa:	2204      	movs	r2, #4
 80019fc:	4619      	mov	r1, r3
 80019fe:	480e      	ldr	r0, [pc, #56]	; (8001a38 <MX_TIM1_Init+0x140>)
 8001a00:	f002 fb86 	bl	8004110 <HAL_TIM_IC_ConfigChannel>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001a0a:	f7ff fded 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4806      	ldr	r0, [pc, #24]	; (8001a38 <MX_TIM1_Init+0x140>)
 8001a20:	f003 fb74 	bl	800510c <HAL_TIMEx_MasterConfigSynchronization>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8001a2a:	f7ff fddd 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a2e:	bf00      	nop
 8001a30:	3740      	adds	r7, #64	; 0x40
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200001f4 	.word	0x200001f4
 8001a3c:	40010000 	.word	0x40010000

08001a40 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08a      	sub	sp, #40	; 0x28
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a46:	f107 031c 	add.w	r3, r7, #28
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a52:	463b      	mov	r3, r7
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
 8001a60:	615a      	str	r2, [r3, #20]
 8001a62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a64:	4b32      	ldr	r3, [pc, #200]	; (8001b30 <MX_TIM4_Init+0xf0>)
 8001a66:	4a33      	ldr	r2, [pc, #204]	; (8001b34 <MX_TIM4_Init+0xf4>)
 8001a68:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a6a:	4b31      	ldr	r3, [pc, #196]	; (8001b30 <MX_TIM4_Init+0xf0>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a70:	4b2f      	ldr	r3, [pc, #188]	; (8001b30 <MX_TIM4_Init+0xf0>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a76:	4b2e      	ldr	r3, [pc, #184]	; (8001b30 <MX_TIM4_Init+0xf0>)
 8001a78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a7c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7e:	4b2c      	ldr	r3, [pc, #176]	; (8001b30 <MX_TIM4_Init+0xf0>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a84:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <MX_TIM4_Init+0xf0>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a8a:	4829      	ldr	r0, [pc, #164]	; (8001b30 <MX_TIM4_Init+0xf0>)
 8001a8c:	f002 fa88 	bl	8003fa0 <HAL_TIM_PWM_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001a96:	f7ff fda7 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001aa2:	f107 031c 	add.w	r3, r7, #28
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4821      	ldr	r0, [pc, #132]	; (8001b30 <MX_TIM4_Init+0xf0>)
 8001aaa:	f003 fb2f 	bl	800510c <HAL_TIMEx_MasterConfigSynchronization>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001ab4:	f7ff fd98 	bl	80015e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ab8:	2360      	movs	r3, #96	; 0x60
 8001aba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ac8:	463b      	mov	r3, r7
 8001aca:	2200      	movs	r2, #0
 8001acc:	4619      	mov	r1, r3
 8001ace:	4818      	ldr	r0, [pc, #96]	; (8001b30 <MX_TIM4_Init+0xf0>)
 8001ad0:	f002 fbb2 	bl	8004238 <HAL_TIM_PWM_ConfigChannel>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001ada:	f7ff fd85 	bl	80015e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ade:	463b      	mov	r3, r7
 8001ae0:	2204      	movs	r2, #4
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4812      	ldr	r0, [pc, #72]	; (8001b30 <MX_TIM4_Init+0xf0>)
 8001ae6:	f002 fba7 	bl	8004238 <HAL_TIM_PWM_ConfigChannel>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001af0:	f7ff fd7a 	bl	80015e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001af4:	463b      	mov	r3, r7
 8001af6:	2208      	movs	r2, #8
 8001af8:	4619      	mov	r1, r3
 8001afa:	480d      	ldr	r0, [pc, #52]	; (8001b30 <MX_TIM4_Init+0xf0>)
 8001afc:	f002 fb9c 	bl	8004238 <HAL_TIM_PWM_ConfigChannel>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8001b06:	f7ff fd6f 	bl	80015e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b0a:	463b      	mov	r3, r7
 8001b0c:	220c      	movs	r2, #12
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4807      	ldr	r0, [pc, #28]	; (8001b30 <MX_TIM4_Init+0xf0>)
 8001b12:	f002 fb91 	bl	8004238 <HAL_TIM_PWM_ConfigChannel>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8001b1c:	f7ff fd64 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b20:	4803      	ldr	r0, [pc, #12]	; (8001b30 <MX_TIM4_Init+0xf0>)
 8001b22:	f000 f86d 	bl	8001c00 <HAL_TIM_MspPostInit>

}
 8001b26:	bf00      	nop
 8001b28:	3728      	adds	r7, #40	; 0x28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200001a8 	.word	0x200001a8
 8001b34:	40000800 	.word	0x40000800

08001b38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a17      	ldr	r2, [pc, #92]	; (8001bb4 <HAL_TIM_Base_MspInit+0x7c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d128      	bne.n	8001bac <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b5a:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <HAL_TIM_Base_MspInit+0x80>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	4a16      	ldr	r2, [pc, #88]	; (8001bb8 <HAL_TIM_Base_MspInit+0x80>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6453      	str	r3, [r2, #68]	; 0x44
 8001b66:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <HAL_TIM_Base_MspInit+0x80>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <HAL_TIM_Base_MspInit+0x80>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a10      	ldr	r2, [pc, #64]	; (8001bb8 <HAL_TIM_Base_MspInit+0x80>)
 8001b78:	f043 0310 	orr.w	r3, r3, #16
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <HAL_TIM_Base_MspInit+0x80>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0310 	and.w	r3, r3, #16
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 8001b8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4805      	ldr	r0, [pc, #20]	; (8001bbc <HAL_TIM_Base_MspInit+0x84>)
 8001ba8:	f000 fe1e 	bl	80027e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001bac:	bf00      	nop
 8001bae:	3728      	adds	r7, #40	; 0x28
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40010000 	.word	0x40010000
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40021000 	.word	0x40021000

08001bc0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <HAL_TIM_PWM_MspInit+0x38>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d10b      	bne.n	8001bea <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <HAL_TIM_PWM_MspInit+0x3c>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	4a09      	ldr	r2, [pc, #36]	; (8001bfc <HAL_TIM_PWM_MspInit+0x3c>)
 8001bd8:	f043 0304 	orr.w	r3, r3, #4
 8001bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bde:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <HAL_TIM_PWM_MspInit+0x3c>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40000800 	.word	0x40000800
 8001bfc:	40023800 	.word	0x40023800

08001c00 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a11      	ldr	r2, [pc, #68]	; (8001c64 <HAL_TIM_MspPostInit+0x64>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d11c      	bne.n	8001c5c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <HAL_TIM_MspPostInit+0x68>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a10      	ldr	r2, [pc, #64]	; (8001c68 <HAL_TIM_MspPostInit+0x68>)
 8001c28:	f043 0308 	orr.w	r3, r3, #8
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <HAL_TIM_MspPostInit+0x68>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin|PWM_HV_Charger_Pin;
 8001c3a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001c3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c40:	2302      	movs	r3, #2
 8001c42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c50:	f107 030c 	add.w	r3, r7, #12
 8001c54:	4619      	mov	r1, r3
 8001c56:	4805      	ldr	r0, [pc, #20]	; (8001c6c <HAL_TIM_MspPostInit+0x6c>)
 8001c58:	f000 fdc6 	bl	80027e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001c5c:	bf00      	nop
 8001c5e:	3720      	adds	r7, #32
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40000800 	.word	0x40000800
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40020c00 	.word	0x40020c00

08001c70 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c74:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <MX_USART2_UART_Init+0x58>)
 8001c76:	4a15      	ldr	r2, [pc, #84]	; (8001ccc <MX_USART2_UART_Init+0x5c>)
 8001c78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c7a:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <MX_USART2_UART_Init+0x58>)
 8001c7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c82:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <MX_USART2_UART_Init+0x58>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c88:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <MX_USART2_UART_Init+0x58>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <MX_USART2_UART_Init+0x58>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <MX_USART2_UART_Init+0x58>)
 8001c96:	220c      	movs	r2, #12
 8001c98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <MX_USART2_UART_Init+0x58>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <MX_USART2_UART_Init+0x58>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <MX_USART2_UART_Init+0x58>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <MX_USART2_UART_Init+0x58>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cb2:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <MX_USART2_UART_Init+0x58>)
 8001cb4:	f003 fab8 	bl	8005228 <HAL_UART_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001cbe:	f7ff fc93 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000240 	.word	0x20000240
 8001ccc:	40004400 	.word	0x40004400

08001cd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08a      	sub	sp, #40	; 0x28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a17      	ldr	r2, [pc, #92]	; (8001d4c <HAL_UART_MspInit+0x7c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d127      	bne.n	8001d42 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <HAL_UART_MspInit+0x80>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	4a16      	ldr	r2, [pc, #88]	; (8001d50 <HAL_UART_MspInit+0x80>)
 8001cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfe:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <HAL_UART_MspInit+0x80>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <HAL_UART_MspInit+0x80>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a10      	ldr	r2, [pc, #64]	; (8001d50 <HAL_UART_MspInit+0x80>)
 8001d10:	f043 0308 	orr.w	r3, r3, #8
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <HAL_UART_MspInit+0x80>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001d22:	2360      	movs	r3, #96	; 0x60
 8001d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d26:	2302      	movs	r3, #2
 8001d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d32:	2307      	movs	r3, #7
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4805      	ldr	r0, [pc, #20]	; (8001d54 <HAL_UART_MspInit+0x84>)
 8001d3e:	f000 fd53 	bl	80027e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d42:	bf00      	nop
 8001d44:	3728      	adds	r7, #40	; 0x28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40004400 	.word	0x40004400
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40020c00 	.word	0x40020c00

08001d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d5e:	e003      	b.n	8001d68 <LoopCopyDataInit>

08001d60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d66:	3104      	adds	r1, #4

08001d68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d68:	480b      	ldr	r0, [pc, #44]	; (8001d98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d70:	d3f6      	bcc.n	8001d60 <CopyDataInit>
  ldr  r2, =_sbss
 8001d72:	4a0b      	ldr	r2, [pc, #44]	; (8001da0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d74:	e002      	b.n	8001d7c <LoopFillZerobss>

08001d76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d78:	f842 3b04 	str.w	r3, [r2], #4

08001d7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d7c:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d80:	d3f9      	bcc.n	8001d76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d82:	f7ff fda3 	bl	80018cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d86:	f003 fefb 	bl	8005b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d8a:	f7ff fad1 	bl	8001330 <main>
  bx  lr    
 8001d8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d90:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001d94:	080060b0 	.word	0x080060b0
  ldr  r0, =_sdata
 8001d98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d9c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001da0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001da4:	200002c8 	.word	0x200002c8

08001da8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001da8:	e7fe      	b.n	8001da8 <ADC_IRQHandler>

08001daa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dae:	2003      	movs	r0, #3
 8001db0:	f000 fce6 	bl	8002780 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001db4:	2000      	movs	r0, #0
 8001db6:	f000 f805 	bl	8001dc4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001dba:	f7ff fd2f 	bl	800181c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_InitTick+0x54>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_InitTick+0x58>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 fcf3 	bl	80027ce <HAL_SYSTICK_Config>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e00e      	b.n	8001e10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b0f      	cmp	r3, #15
 8001df6:	d80a      	bhi.n	8001e0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001e00:	f000 fcc9 	bl	8002796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e04:	4a06      	ldr	r2, [pc, #24]	; (8001e20 <HAL_InitTick+0x5c>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e000      	b.n	8001e10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000000 	.word	0x20000000
 8001e1c:	20000008 	.word	0x20000008
 8001e20:	20000004 	.word	0x20000004

08001e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return uwTick;
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <HAL_GetTick+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	200002c4 	.word	0x200002c4

08001e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e44:	f7ff ffee 	bl	8001e24 <HAL_GetTick>
 8001e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e54:	d005      	beq.n	8001e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <HAL_Delay+0x44>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4413      	add	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e62:	bf00      	nop
 8001e64:	f7ff ffde 	bl	8001e24 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d8f7      	bhi.n	8001e64 <HAL_Delay+0x28>
  {
  }
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000008 	.word	0x20000008

08001e84 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
 return __STM32F7xx_HAL_VERSION;
 8001e88:	4b02      	ldr	r3, [pc, #8]	; (8001e94 <HAL_GetHalVersion+0x10>)
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	01020900 	.word	0x01020900

08001e98 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <HAL_GetREVID+0x14>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	0c1b      	lsrs	r3, r3, #16
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e0042000 	.word	0xe0042000

08001eb0 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8001eb4:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <HAL_GetDEVID+0x18>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	e0042000 	.word	0xe0042000

08001ecc <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8001ed0:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <HAL_GetUIDw0+0x14>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	1ff0f420 	.word	0x1ff0f420

08001ee4 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <HAL_GetUIDw1+0x14>)
 8001eea:	681b      	ldr	r3, [r3, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	1ff0f424 	.word	0x1ff0f424

08001efc <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8001f00:	4b03      	ldr	r3, [pc, #12]	; (8001f10 <HAL_GetUIDw2+0x14>)
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	1ff0f428 	.word	0x1ff0f428

08001f14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e031      	b.n	8001f8e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d109      	bne.n	8001f46 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7fe ff3e 	bl	8000db4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d116      	bne.n	8001f80 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f56:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <HAL_ADC_Init+0x84>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	f043 0202 	orr.w	r2, r3, #2
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f964 	bl	8002230 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f023 0303 	bic.w	r3, r3, #3
 8001f76:	f043 0201 	orr.w	r2, r3, #1
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	641a      	str	r2, [r3, #64]	; 0x40
 8001f7e:	e001      	b.n	8001f84 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	ffffeefd 	.word	0xffffeefd

08001f9c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x1c>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e12a      	b.n	800220e <HAL_ADC_ConfigChannel+0x272>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b09      	cmp	r3, #9
 8001fc6:	d93a      	bls.n	800203e <HAL_ADC_ConfigChannel+0xa2>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fd0:	d035      	beq.n	800203e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68d9      	ldr	r1, [r3, #12]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	461a      	mov	r2, r3
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3b1e      	subs	r3, #30
 8001fe8:	2207      	movs	r2, #7
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a87      	ldr	r2, [pc, #540]	; (800221c <HAL_ADC_ConfigChannel+0x280>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d10a      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68d9      	ldr	r1, [r3, #12]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	061a      	lsls	r2, r3, #24
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002016:	e035      	b.n	8002084 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68d9      	ldr	r1, [r3, #12]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	b29b      	uxth	r3, r3
 8002028:	4618      	mov	r0, r3
 800202a:	4603      	mov	r3, r0
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4403      	add	r3, r0
 8002030:	3b1e      	subs	r3, #30
 8002032:	409a      	lsls	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800203c:	e022      	b.n	8002084 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6919      	ldr	r1, [r3, #16]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	b29b      	uxth	r3, r3
 800204a:	461a      	mov	r2, r3
 800204c:	4613      	mov	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4413      	add	r3, r2
 8002052:	2207      	movs	r2, #7
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43da      	mvns	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	400a      	ands	r2, r1
 8002060:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6919      	ldr	r1, [r3, #16]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	b29b      	uxth	r3, r3
 8002072:	4618      	mov	r0, r3
 8002074:	4603      	mov	r3, r0
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4403      	add	r3, r0
 800207a:	409a      	lsls	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b06      	cmp	r3, #6
 800208a:	d824      	bhi.n	80020d6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	3b05      	subs	r3, #5
 800209e:	221f      	movs	r2, #31
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43da      	mvns	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	400a      	ands	r2, r1
 80020ac:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	4618      	mov	r0, r3
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	3b05      	subs	r3, #5
 80020c8:	fa00 f203 	lsl.w	r2, r0, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	635a      	str	r2, [r3, #52]	; 0x34
 80020d4:	e04c      	b.n	8002170 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b0c      	cmp	r3, #12
 80020dc:	d824      	bhi.n	8002128 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	3b23      	subs	r3, #35	; 0x23
 80020f0:	221f      	movs	r2, #31
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43da      	mvns	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	400a      	ands	r2, r1
 80020fe:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	b29b      	uxth	r3, r3
 800210c:	4618      	mov	r0, r3
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	3b23      	subs	r3, #35	; 0x23
 800211a:	fa00 f203 	lsl.w	r2, r0, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	631a      	str	r2, [r3, #48]	; 0x30
 8002126:	e023      	b.n	8002170 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	3b41      	subs	r3, #65	; 0x41
 800213a:	221f      	movs	r2, #31
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43da      	mvns	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	400a      	ands	r2, r1
 8002148:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	b29b      	uxth	r3, r3
 8002156:	4618      	mov	r0, r3
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	3b41      	subs	r3, #65	; 0x41
 8002164:	fa00 f203 	lsl.w	r2, r0, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a2a      	ldr	r2, [pc, #168]	; (8002220 <HAL_ADC_ConfigChannel+0x284>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d10a      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x1f4>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002182:	d105      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002184:	4b27      	ldr	r3, [pc, #156]	; (8002224 <HAL_ADC_ConfigChannel+0x288>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	4a26      	ldr	r2, [pc, #152]	; (8002224 <HAL_ADC_ConfigChannel+0x288>)
 800218a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800218e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a22      	ldr	r2, [pc, #136]	; (8002220 <HAL_ADC_ConfigChannel+0x284>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d109      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x212>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2b12      	cmp	r3, #18
 80021a0:	d105      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80021a2:	4b20      	ldr	r3, [pc, #128]	; (8002224 <HAL_ADC_ConfigChannel+0x288>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	4a1f      	ldr	r2, [pc, #124]	; (8002224 <HAL_ADC_ConfigChannel+0x288>)
 80021a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021ac:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a1b      	ldr	r2, [pc, #108]	; (8002220 <HAL_ADC_ConfigChannel+0x284>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d125      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x268>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a17      	ldr	r2, [pc, #92]	; (800221c <HAL_ADC_ConfigChannel+0x280>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d003      	beq.n	80021ca <HAL_ADC_ConfigChannel+0x22e>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b11      	cmp	r3, #17
 80021c8:	d11c      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80021ca:	4b16      	ldr	r3, [pc, #88]	; (8002224 <HAL_ADC_ConfigChannel+0x288>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	4a15      	ldr	r2, [pc, #84]	; (8002224 <HAL_ADC_ConfigChannel+0x288>)
 80021d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021d4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a10      	ldr	r2, [pc, #64]	; (800221c <HAL_ADC_ConfigChannel+0x280>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d111      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80021e0:	4b11      	ldr	r3, [pc, #68]	; (8002228 <HAL_ADC_ConfigChannel+0x28c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a11      	ldr	r2, [pc, #68]	; (800222c <HAL_ADC_ConfigChannel+0x290>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	0c9a      	lsrs	r2, r3, #18
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80021f6:	e002      	b.n	80021fe <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1f9      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	10000012 	.word	0x10000012
 8002220:	40012000 	.word	0x40012000
 8002224:	40012300 	.word	0x40012300
 8002228:	20000000 	.word	0x20000000
 800222c:	431bde83 	.word	0x431bde83

08002230 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002238:	4b78      	ldr	r3, [pc, #480]	; (800241c <ADC_Init+0x1ec>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	4a77      	ldr	r2, [pc, #476]	; (800241c <ADC_Init+0x1ec>)
 800223e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002242:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002244:	4b75      	ldr	r3, [pc, #468]	; (800241c <ADC_Init+0x1ec>)
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	4973      	ldr	r1, [pc, #460]	; (800241c <ADC_Init+0x1ec>)
 800224e:	4313      	orrs	r3, r2
 8002250:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002260:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6859      	ldr	r1, [r3, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	021a      	lsls	r2, r3, #8
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002284:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6859      	ldr	r1, [r3, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6899      	ldr	r1, [r3, #8]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022be:	4a58      	ldr	r2, [pc, #352]	; (8002420 <ADC_Init+0x1f0>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d022      	beq.n	800230a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6899      	ldr	r1, [r3, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6899      	ldr	r1, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	e00f      	b.n	800232a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002318:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002328:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0202 	bic.w	r2, r2, #2
 8002338:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6899      	ldr	r1, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	005a      	lsls	r2, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d01b      	beq.n	8002390 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002366:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002376:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6859      	ldr	r1, [r3, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	3b01      	subs	r3, #1
 8002384:	035a      	lsls	r2, r3, #13
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	e007      	b.n	80023a0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800239e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	051a      	lsls	r2, r3, #20
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6899      	ldr	r1, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023e2:	025a      	lsls	r2, r3, #9
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6899      	ldr	r1, [r3, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	029a      	lsls	r2, r3, #10
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	609a      	str	r2, [r3, #8]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	40012300 	.word	0x40012300
 8002420:	0f000001 	.word	0x0f000001

08002424 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e0ed      	b.n	8002612 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 3020 	ldrb.w	r3, [r3, #32]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d102      	bne.n	8002448 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7fe fd62 	bl	8000f0c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0202 	bic.w	r2, r2, #2
 8002456:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002458:	f7ff fce4 	bl	8001e24 <HAL_GetTick>
 800245c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800245e:	e012      	b.n	8002486 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002460:	f7ff fce0 	bl	8001e24 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b0a      	cmp	r3, #10
 800246c:	d90b      	bls.n	8002486 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2205      	movs	r2, #5
 800247e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e0c5      	b.n	8002612 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1e5      	bne.n	8002460 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0201 	orr.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024a4:	f7ff fcbe 	bl	8001e24 <HAL_GetTick>
 80024a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024aa:	e012      	b.n	80024d2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024ac:	f7ff fcba 	bl	8001e24 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b0a      	cmp	r3, #10
 80024b8:	d90b      	bls.n	80024d2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2205      	movs	r2, #5
 80024ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e09f      	b.n	8002612 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0e5      	beq.n	80024ac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	7e1b      	ldrb	r3, [r3, #24]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d108      	bne.n	80024fa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	e007      	b.n	800250a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002508:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	7e5b      	ldrb	r3, [r3, #25]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d108      	bne.n	8002524 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	e007      	b.n	8002534 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002532:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	7e9b      	ldrb	r3, [r3, #26]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d108      	bne.n	800254e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0220 	orr.w	r2, r2, #32
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	e007      	b.n	800255e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0220 	bic.w	r2, r2, #32
 800255c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	7edb      	ldrb	r3, [r3, #27]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d108      	bne.n	8002578 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0210 	bic.w	r2, r2, #16
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	e007      	b.n	8002588 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0210 	orr.w	r2, r2, #16
 8002586:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	7f1b      	ldrb	r3, [r3, #28]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d108      	bne.n	80025a2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0208 	orr.w	r2, r2, #8
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	e007      	b.n	80025b2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0208 	bic.w	r2, r2, #8
 80025b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	7f5b      	ldrb	r3, [r3, #29]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d108      	bne.n	80025cc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f042 0204 	orr.w	r2, r2, #4
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	e007      	b.n	80025dc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0204 	bic.w	r2, r2, #4
 80025da:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	431a      	orrs	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	ea42 0103 	orr.w	r1, r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	1e5a      	subs	r2, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <__NVIC_SetPriorityGrouping+0x40>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002638:	4013      	ands	r3, r2
 800263a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <__NVIC_SetPriorityGrouping+0x44>)
 8002646:	4313      	orrs	r3, r2
 8002648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800264a:	4a04      	ldr	r2, [pc, #16]	; (800265c <__NVIC_SetPriorityGrouping+0x40>)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	60d3      	str	r3, [r2, #12]
}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	e000ed00 	.word	0xe000ed00
 8002660:	05fa0000 	.word	0x05fa0000

08002664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002668:	4b04      	ldr	r3, [pc, #16]	; (800267c <__NVIC_GetPriorityGrouping+0x18>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	0a1b      	lsrs	r3, r3, #8
 800266e:	f003 0307 	and.w	r3, r3, #7
}
 8002672:	4618      	mov	r0, r3
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	6039      	str	r1, [r7, #0]
 800268a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002690:	2b00      	cmp	r3, #0
 8002692:	db0a      	blt.n	80026aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	b2da      	uxtb	r2, r3
 8002698:	490c      	ldr	r1, [pc, #48]	; (80026cc <__NVIC_SetPriority+0x4c>)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	0112      	lsls	r2, r2, #4
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	440b      	add	r3, r1
 80026a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a8:	e00a      	b.n	80026c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4908      	ldr	r1, [pc, #32]	; (80026d0 <__NVIC_SetPriority+0x50>)
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	3b04      	subs	r3, #4
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	440b      	add	r3, r1
 80026be:	761a      	strb	r2, [r3, #24]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000e100 	.word	0xe000e100
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b089      	sub	sp, #36	; 0x24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f1c3 0307 	rsb	r3, r3, #7
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	bf28      	it	cs
 80026f2:	2304      	movcs	r3, #4
 80026f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3304      	adds	r3, #4
 80026fa:	2b06      	cmp	r3, #6
 80026fc:	d902      	bls.n	8002704 <NVIC_EncodePriority+0x30>
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3b03      	subs	r3, #3
 8002702:	e000      	b.n	8002706 <NVIC_EncodePriority+0x32>
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002708:	f04f 32ff 	mov.w	r2, #4294967295
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43da      	mvns	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	401a      	ands	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800271c:	f04f 31ff 	mov.w	r1, #4294967295
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	fa01 f303 	lsl.w	r3, r1, r3
 8002726:	43d9      	mvns	r1, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	4313      	orrs	r3, r2
         );
}
 800272e:	4618      	mov	r0, r3
 8002730:	3724      	adds	r7, #36	; 0x24
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800274c:	d301      	bcc.n	8002752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800274e:	2301      	movs	r3, #1
 8002750:	e00f      	b.n	8002772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002752:	4a0a      	ldr	r2, [pc, #40]	; (800277c <SysTick_Config+0x40>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800275a:	210f      	movs	r1, #15
 800275c:	f04f 30ff 	mov.w	r0, #4294967295
 8002760:	f7ff ff8e 	bl	8002680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <SysTick_Config+0x40>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800276a:	4b04      	ldr	r3, [pc, #16]	; (800277c <SysTick_Config+0x40>)
 800276c:	2207      	movs	r2, #7
 800276e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	e000e010 	.word	0xe000e010

08002780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff ff47 	bl	800261c <__NVIC_SetPriorityGrouping>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002796:	b580      	push	{r7, lr}
 8002798:	b086      	sub	sp, #24
 800279a:	af00      	add	r7, sp, #0
 800279c:	4603      	mov	r3, r0
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027a8:	f7ff ff5c 	bl	8002664 <__NVIC_GetPriorityGrouping>
 80027ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	6978      	ldr	r0, [r7, #20]
 80027b4:	f7ff ff8e 	bl	80026d4 <NVIC_EncodePriority>
 80027b8:	4602      	mov	r2, r0
 80027ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027be:	4611      	mov	r1, r2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff5d 	bl	8002680 <__NVIC_SetPriority>
}
 80027c6:	bf00      	nop
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff ffb0 	bl	800273c <SysTick_Config>
 80027dc:	4603      	mov	r3, r0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b089      	sub	sp, #36	; 0x24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027fa:	2300      	movs	r3, #0
 80027fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027fe:	2300      	movs	r3, #0
 8002800:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
 8002806:	e175      	b.n	8002af4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002808:	2201      	movs	r2, #1
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	4013      	ands	r3, r2
 800281a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	429a      	cmp	r2, r3
 8002822:	f040 8164 	bne.w	8002aee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d00b      	beq.n	8002846 <HAL_GPIO_Init+0x5e>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d007      	beq.n	8002846 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800283a:	2b11      	cmp	r3, #17
 800283c:	d003      	beq.n	8002846 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b12      	cmp	r3, #18
 8002844:	d130      	bne.n	80028a8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	2203      	movs	r2, #3
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4013      	ands	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800287c:	2201      	movs	r2, #1
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	f003 0201 	and.w	r2, r3, #1
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	2203      	movs	r2, #3
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d003      	beq.n	80028e8 <HAL_GPIO_Init+0x100>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b12      	cmp	r3, #18
 80028e6:	d123      	bne.n	8002930 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	08da      	lsrs	r2, r3, #3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3208      	adds	r2, #8
 80028f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	220f      	movs	r2, #15
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	08da      	lsrs	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3208      	adds	r2, #8
 800292a:	69b9      	ldr	r1, [r7, #24]
 800292c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	2203      	movs	r2, #3
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0203 	and.w	r2, r3, #3
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80be 	beq.w	8002aee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002972:	4b66      	ldr	r3, [pc, #408]	; (8002b0c <HAL_GPIO_Init+0x324>)
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	4a65      	ldr	r2, [pc, #404]	; (8002b0c <HAL_GPIO_Init+0x324>)
 8002978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800297c:	6453      	str	r3, [r2, #68]	; 0x44
 800297e:	4b63      	ldr	r3, [pc, #396]	; (8002b0c <HAL_GPIO_Init+0x324>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800298a:	4a61      	ldr	r2, [pc, #388]	; (8002b10 <HAL_GPIO_Init+0x328>)
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	089b      	lsrs	r3, r3, #2
 8002990:	3302      	adds	r3, #2
 8002992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	220f      	movs	r2, #15
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a58      	ldr	r2, [pc, #352]	; (8002b14 <HAL_GPIO_Init+0x32c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d037      	beq.n	8002a26 <HAL_GPIO_Init+0x23e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a57      	ldr	r2, [pc, #348]	; (8002b18 <HAL_GPIO_Init+0x330>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d031      	beq.n	8002a22 <HAL_GPIO_Init+0x23a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a56      	ldr	r2, [pc, #344]	; (8002b1c <HAL_GPIO_Init+0x334>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d02b      	beq.n	8002a1e <HAL_GPIO_Init+0x236>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a55      	ldr	r2, [pc, #340]	; (8002b20 <HAL_GPIO_Init+0x338>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d025      	beq.n	8002a1a <HAL_GPIO_Init+0x232>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a54      	ldr	r2, [pc, #336]	; (8002b24 <HAL_GPIO_Init+0x33c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d01f      	beq.n	8002a16 <HAL_GPIO_Init+0x22e>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a53      	ldr	r2, [pc, #332]	; (8002b28 <HAL_GPIO_Init+0x340>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d019      	beq.n	8002a12 <HAL_GPIO_Init+0x22a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a52      	ldr	r2, [pc, #328]	; (8002b2c <HAL_GPIO_Init+0x344>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d013      	beq.n	8002a0e <HAL_GPIO_Init+0x226>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a51      	ldr	r2, [pc, #324]	; (8002b30 <HAL_GPIO_Init+0x348>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d00d      	beq.n	8002a0a <HAL_GPIO_Init+0x222>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a50      	ldr	r2, [pc, #320]	; (8002b34 <HAL_GPIO_Init+0x34c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d007      	beq.n	8002a06 <HAL_GPIO_Init+0x21e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a4f      	ldr	r2, [pc, #316]	; (8002b38 <HAL_GPIO_Init+0x350>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d101      	bne.n	8002a02 <HAL_GPIO_Init+0x21a>
 80029fe:	2309      	movs	r3, #9
 8002a00:	e012      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a02:	230a      	movs	r3, #10
 8002a04:	e010      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a06:	2308      	movs	r3, #8
 8002a08:	e00e      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a0a:	2307      	movs	r3, #7
 8002a0c:	e00c      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a0e:	2306      	movs	r3, #6
 8002a10:	e00a      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a12:	2305      	movs	r3, #5
 8002a14:	e008      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a16:	2304      	movs	r3, #4
 8002a18:	e006      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e004      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e002      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a26:	2300      	movs	r3, #0
 8002a28:	69fa      	ldr	r2, [r7, #28]
 8002a2a:	f002 0203 	and.w	r2, r2, #3
 8002a2e:	0092      	lsls	r2, r2, #2
 8002a30:	4093      	lsls	r3, r2
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a38:	4935      	ldr	r1, [pc, #212]	; (8002b10 <HAL_GPIO_Init+0x328>)
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	089b      	lsrs	r3, r3, #2
 8002a3e:	3302      	adds	r3, #2
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a46:	4b3d      	ldr	r3, [pc, #244]	; (8002b3c <HAL_GPIO_Init+0x354>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4013      	ands	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a6a:	4a34      	ldr	r2, [pc, #208]	; (8002b3c <HAL_GPIO_Init+0x354>)
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a70:	4b32      	ldr	r3, [pc, #200]	; (8002b3c <HAL_GPIO_Init+0x354>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a94:	4a29      	ldr	r2, [pc, #164]	; (8002b3c <HAL_GPIO_Init+0x354>)
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a9a:	4b28      	ldr	r3, [pc, #160]	; (8002b3c <HAL_GPIO_Init+0x354>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002abe:	4a1f      	ldr	r2, [pc, #124]	; (8002b3c <HAL_GPIO_Init+0x354>)
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ac4:	4b1d      	ldr	r3, [pc, #116]	; (8002b3c <HAL_GPIO_Init+0x354>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ae8:	4a14      	ldr	r2, [pc, #80]	; (8002b3c <HAL_GPIO_Init+0x354>)
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	3301      	adds	r3, #1
 8002af2:	61fb      	str	r3, [r7, #28]
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	2b0f      	cmp	r3, #15
 8002af8:	f67f ae86 	bls.w	8002808 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002afc:	bf00      	nop
 8002afe:	bf00      	nop
 8002b00:	3724      	adds	r7, #36	; 0x24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40013800 	.word	0x40013800
 8002b14:	40020000 	.word	0x40020000
 8002b18:	40020400 	.word	0x40020400
 8002b1c:	40020800 	.word	0x40020800
 8002b20:	40020c00 	.word	0x40020c00
 8002b24:	40021000 	.word	0x40021000
 8002b28:	40021400 	.word	0x40021400
 8002b2c:	40021800 	.word	0x40021800
 8002b30:	40021c00 	.word	0x40021c00
 8002b34:	40022000 	.word	0x40022000
 8002b38:	40022400 	.word	0x40022400
 8002b3c:	40013c00 	.word	0x40013c00

08002b40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691a      	ldr	r2, [r3, #16]
 8002b50:	887b      	ldrh	r3, [r7, #2]
 8002b52:	4013      	ands	r3, r2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
 8002b5c:	e001      	b.n	8002b62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	807b      	strh	r3, [r7, #2]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b80:	787b      	ldrb	r3, [r7, #1]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b86:	887a      	ldrh	r2, [r7, #2]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b8c:	e003      	b.n	8002b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b8e:	887b      	ldrh	r3, [r7, #2]
 8002b90:	041a      	lsls	r2, r3, #16
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	619a      	str	r2, [r3, #24]
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002bae:	4b23      	ldr	r3, [pc, #140]	; (8002c3c <HAL_PWREx_EnableOverDrive+0x98>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	4a22      	ldr	r2, [pc, #136]	; (8002c3c <HAL_PWREx_EnableOverDrive+0x98>)
 8002bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bba:	4b20      	ldr	r3, [pc, #128]	; (8002c3c <HAL_PWREx_EnableOverDrive+0x98>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	603b      	str	r3, [r7, #0]
 8002bc4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002bc6:	4b1e      	ldr	r3, [pc, #120]	; (8002c40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a1d      	ldr	r2, [pc, #116]	; (8002c40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bd2:	f7ff f927 	bl	8001e24 <HAL_GetTick>
 8002bd6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bd8:	e009      	b.n	8002bee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bda:	f7ff f923 	bl	8001e24 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002be8:	d901      	bls.n	8002bee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e022      	b.n	8002c34 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bee:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bfa:	d1ee      	bne.n	8002bda <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002bfc:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a0f      	ldr	r2, [pc, #60]	; (8002c40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c06:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c08:	f7ff f90c 	bl	8001e24 <HAL_GetTick>
 8002c0c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c0e:	e009      	b.n	8002c24 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c10:	f7ff f908 	bl	8001e24 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c1e:	d901      	bls.n	8002c24 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e007      	b.n	8002c34 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c30:	d1ee      	bne.n	8002c10 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	40007000 	.word	0x40007000

08002c44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e29b      	b.n	8003192 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 8087 	beq.w	8002d76 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c68:	4b96      	ldr	r3, [pc, #600]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 030c 	and.w	r3, r3, #12
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d00c      	beq.n	8002c8e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c74:	4b93      	ldr	r3, [pc, #588]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 030c 	and.w	r3, r3, #12
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d112      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x62>
 8002c80:	4b90      	ldr	r3, [pc, #576]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c8c:	d10b      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8e:	4b8d      	ldr	r3, [pc, #564]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d06c      	beq.n	8002d74 <HAL_RCC_OscConfig+0x130>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d168      	bne.n	8002d74 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e275      	b.n	8003192 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cae:	d106      	bne.n	8002cbe <HAL_RCC_OscConfig+0x7a>
 8002cb0:	4b84      	ldr	r3, [pc, #528]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a83      	ldr	r2, [pc, #524]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	e02e      	b.n	8002d1c <HAL_RCC_OscConfig+0xd8>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x9c>
 8002cc6:	4b7f      	ldr	r3, [pc, #508]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a7e      	ldr	r2, [pc, #504]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	4b7c      	ldr	r3, [pc, #496]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a7b      	ldr	r2, [pc, #492]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002cd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	e01d      	b.n	8002d1c <HAL_RCC_OscConfig+0xd8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ce8:	d10c      	bne.n	8002d04 <HAL_RCC_OscConfig+0xc0>
 8002cea:	4b76      	ldr	r3, [pc, #472]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a75      	ldr	r2, [pc, #468]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	4b73      	ldr	r3, [pc, #460]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a72      	ldr	r2, [pc, #456]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	e00b      	b.n	8002d1c <HAL_RCC_OscConfig+0xd8>
 8002d04:	4b6f      	ldr	r3, [pc, #444]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a6e      	ldr	r2, [pc, #440]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0e:	6013      	str	r3, [r2, #0]
 8002d10:	4b6c      	ldr	r3, [pc, #432]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a6b      	ldr	r2, [pc, #428]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d013      	beq.n	8002d4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7ff f87e 	bl	8001e24 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d2c:	f7ff f87a 	bl	8001e24 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b64      	cmp	r3, #100	; 0x64
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e229      	b.n	8003192 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3e:	4b61      	ldr	r3, [pc, #388]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCC_OscConfig+0xe8>
 8002d4a:	e014      	b.n	8002d76 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4c:	f7ff f86a 	bl	8001e24 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d54:	f7ff f866 	bl	8001e24 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b64      	cmp	r3, #100	; 0x64
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e215      	b.n	8003192 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d66:	4b57      	ldr	r3, [pc, #348]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0x110>
 8002d72:	e000      	b.n	8002d76 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d069      	beq.n	8002e56 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d82:	4b50      	ldr	r3, [pc, #320]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 030c 	and.w	r3, r3, #12
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00b      	beq.n	8002da6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d8e:	4b4d      	ldr	r3, [pc, #308]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d11c      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x190>
 8002d9a:	4b4a      	ldr	r3, [pc, #296]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d116      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da6:	4b47      	ldr	r3, [pc, #284]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d005      	beq.n	8002dbe <HAL_RCC_OscConfig+0x17a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d001      	beq.n	8002dbe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e1e9      	b.n	8003192 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dbe:	4b41      	ldr	r3, [pc, #260]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	493d      	ldr	r1, [pc, #244]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd2:	e040      	b.n	8002e56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d023      	beq.n	8002e24 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ddc:	4b39      	ldr	r3, [pc, #228]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a38      	ldr	r2, [pc, #224]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de8:	f7ff f81c 	bl	8001e24 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002df0:	f7ff f818 	bl	8001e24 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e1c7      	b.n	8003192 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e02:	4b30      	ldr	r3, [pc, #192]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0f0      	beq.n	8002df0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0e:	4b2d      	ldr	r3, [pc, #180]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4929      	ldr	r1, [pc, #164]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	600b      	str	r3, [r1, #0]
 8002e22:	e018      	b.n	8002e56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e24:	4b27      	ldr	r3, [pc, #156]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a26      	ldr	r2, [pc, #152]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002e2a:	f023 0301 	bic.w	r3, r3, #1
 8002e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e30:	f7fe fff8 	bl	8001e24 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e38:	f7fe fff4 	bl	8001e24 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e1a3      	b.n	8003192 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e4a:	4b1e      	ldr	r3, [pc, #120]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d038      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d019      	beq.n	8002e9e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e6a:	4b16      	ldr	r3, [pc, #88]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e6e:	4a15      	ldr	r2, [pc, #84]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e76:	f7fe ffd5 	bl	8001e24 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e7e:	f7fe ffd1 	bl	8001e24 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e180      	b.n	8003192 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e90:	4b0c      	ldr	r3, [pc, #48]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x23a>
 8002e9c:	e01a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e9e:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea2:	4a08      	ldr	r2, [pc, #32]	; (8002ec4 <HAL_RCC_OscConfig+0x280>)
 8002ea4:	f023 0301 	bic.w	r3, r3, #1
 8002ea8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eaa:	f7fe ffbb 	bl	8001e24 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb0:	e00a      	b.n	8002ec8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb2:	f7fe ffb7 	bl	8001e24 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d903      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e166      	b.n	8003192 <HAL_RCC_OscConfig+0x54e>
 8002ec4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec8:	4b92      	ldr	r3, [pc, #584]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 8002eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1ee      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 80a4 	beq.w	800302a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ee2:	4b8c      	ldr	r3, [pc, #560]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10d      	bne.n	8002f0a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eee:	4b89      	ldr	r3, [pc, #548]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	4a88      	ldr	r2, [pc, #544]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 8002ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8002efa:	4b86      	ldr	r3, [pc, #536]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f02:	60bb      	str	r3, [r7, #8]
 8002f04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f06:	2301      	movs	r3, #1
 8002f08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f0a:	4b83      	ldr	r3, [pc, #524]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d118      	bne.n	8002f48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002f16:	4b80      	ldr	r3, [pc, #512]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a7f      	ldr	r2, [pc, #508]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 8002f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f22:	f7fe ff7f 	bl	8001e24 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2a:	f7fe ff7b 	bl	8001e24 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b64      	cmp	r3, #100	; 0x64
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e12a      	b.n	8003192 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f3c:	4b76      	ldr	r3, [pc, #472]	; (8003118 <HAL_RCC_OscConfig+0x4d4>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d106      	bne.n	8002f5e <HAL_RCC_OscConfig+0x31a>
 8002f50:	4b70      	ldr	r3, [pc, #448]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 8002f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f54:	4a6f      	ldr	r2, [pc, #444]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 8002f56:	f043 0301 	orr.w	r3, r3, #1
 8002f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5c:	e02d      	b.n	8002fba <HAL_RCC_OscConfig+0x376>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10c      	bne.n	8002f80 <HAL_RCC_OscConfig+0x33c>
 8002f66:	4b6b      	ldr	r3, [pc, #428]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 8002f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6a:	4a6a      	ldr	r2, [pc, #424]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 8002f6c:	f023 0301 	bic.w	r3, r3, #1
 8002f70:	6713      	str	r3, [r2, #112]	; 0x70
 8002f72:	4b68      	ldr	r3, [pc, #416]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f76:	4a67      	ldr	r2, [pc, #412]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 8002f78:	f023 0304 	bic.w	r3, r3, #4
 8002f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7e:	e01c      	b.n	8002fba <HAL_RCC_OscConfig+0x376>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b05      	cmp	r3, #5
 8002f86:	d10c      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x35e>
 8002f88:	4b62      	ldr	r3, [pc, #392]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8c:	4a61      	ldr	r2, [pc, #388]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 8002f8e:	f043 0304 	orr.w	r3, r3, #4
 8002f92:	6713      	str	r3, [r2, #112]	; 0x70
 8002f94:	4b5f      	ldr	r3, [pc, #380]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 8002f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f98:	4a5e      	ldr	r2, [pc, #376]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa0:	e00b      	b.n	8002fba <HAL_RCC_OscConfig+0x376>
 8002fa2:	4b5c      	ldr	r3, [pc, #368]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa6:	4a5b      	ldr	r2, [pc, #364]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 8002fa8:	f023 0301 	bic.w	r3, r3, #1
 8002fac:	6713      	str	r3, [r2, #112]	; 0x70
 8002fae:	4b59      	ldr	r3, [pc, #356]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb2:	4a58      	ldr	r2, [pc, #352]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 8002fb4:	f023 0304 	bic.w	r3, r3, #4
 8002fb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d015      	beq.n	8002fee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc2:	f7fe ff2f 	bl	8001e24 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fca:	f7fe ff2b 	bl	8001e24 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e0d8      	b.n	8003192 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe0:	4b4c      	ldr	r3, [pc, #304]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 8002fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0ee      	beq.n	8002fca <HAL_RCC_OscConfig+0x386>
 8002fec:	e014      	b.n	8003018 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fee:	f7fe ff19 	bl	8001e24 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff4:	e00a      	b.n	800300c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff6:	f7fe ff15 	bl	8001e24 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	f241 3288 	movw	r2, #5000	; 0x1388
 8003004:	4293      	cmp	r3, r2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e0c2      	b.n	8003192 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800300c:	4b41      	ldr	r3, [pc, #260]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 800300e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1ee      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003018:	7dfb      	ldrb	r3, [r7, #23]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d105      	bne.n	800302a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800301e:	4b3d      	ldr	r3, [pc, #244]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	4a3c      	ldr	r2, [pc, #240]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 8003024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003028:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 80ae 	beq.w	8003190 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003034:	4b37      	ldr	r3, [pc, #220]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 030c 	and.w	r3, r3, #12
 800303c:	2b08      	cmp	r3, #8
 800303e:	d06d      	beq.n	800311c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	2b02      	cmp	r3, #2
 8003046:	d14b      	bne.n	80030e0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003048:	4b32      	ldr	r3, [pc, #200]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a31      	ldr	r2, [pc, #196]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 800304e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7fe fee6 	bl	8001e24 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305c:	f7fe fee2 	bl	8001e24 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e091      	b.n	8003192 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306e:	4b29      	ldr	r3, [pc, #164]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69da      	ldr	r2, [r3, #28]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	019b      	lsls	r3, r3, #6
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	3b01      	subs	r3, #1
 8003094:	041b      	lsls	r3, r3, #16
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	061b      	lsls	r3, r3, #24
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	071b      	lsls	r3, r3, #28
 80030a6:	491b      	ldr	r1, [pc, #108]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ac:	4b19      	ldr	r3, [pc, #100]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a18      	ldr	r2, [pc, #96]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 80030b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b8:	f7fe feb4 	bl	8001e24 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c0:	f7fe feb0 	bl	8001e24 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e05f      	b.n	8003192 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d2:	4b10      	ldr	r3, [pc, #64]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0x47c>
 80030de:	e057      	b.n	8003190 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e0:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a0b      	ldr	r2, [pc, #44]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 80030e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ec:	f7fe fe9a 	bl	8001e24 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f4:	f7fe fe96 	bl	8001e24 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e045      	b.n	8003192 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003106:	4b03      	ldr	r3, [pc, #12]	; (8003114 <HAL_RCC_OscConfig+0x4d0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0x4b0>
 8003112:	e03d      	b.n	8003190 <HAL_RCC_OscConfig+0x54c>
 8003114:	40023800 	.word	0x40023800
 8003118:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800311c:	4b1f      	ldr	r3, [pc, #124]	; (800319c <HAL_RCC_OscConfig+0x558>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d030      	beq.n	800318c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003134:	429a      	cmp	r2, r3
 8003136:	d129      	bne.n	800318c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003142:	429a      	cmp	r2, r3
 8003144:	d122      	bne.n	800318c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800314c:	4013      	ands	r3, r2
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003152:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003154:	4293      	cmp	r3, r2
 8003156:	d119      	bne.n	800318c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003162:	085b      	lsrs	r3, r3, #1
 8003164:	3b01      	subs	r3, #1
 8003166:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003168:	429a      	cmp	r2, r3
 800316a:	d10f      	bne.n	800318c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003176:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003178:	429a      	cmp	r2, r3
 800317a:	d107      	bne.n	800318c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003188:	429a      	cmp	r2, r3
 800318a:	d001      	beq.n	8003190 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40023800 	.word	0x40023800

080031a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80031aa:	2300      	movs	r3, #0
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0d0      	b.n	800335a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031b8:	4b6a      	ldr	r3, [pc, #424]	; (8003364 <HAL_RCC_ClockConfig+0x1c4>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 030f 	and.w	r3, r3, #15
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d910      	bls.n	80031e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c6:	4b67      	ldr	r3, [pc, #412]	; (8003364 <HAL_RCC_ClockConfig+0x1c4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 020f 	bic.w	r2, r3, #15
 80031ce:	4965      	ldr	r1, [pc, #404]	; (8003364 <HAL_RCC_ClockConfig+0x1c4>)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b63      	ldr	r3, [pc, #396]	; (8003364 <HAL_RCC_ClockConfig+0x1c4>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0b8      	b.n	800335a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d020      	beq.n	8003236 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003200:	4b59      	ldr	r3, [pc, #356]	; (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4a58      	ldr	r2, [pc, #352]	; (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 8003206:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800320a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003218:	4b53      	ldr	r3, [pc, #332]	; (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	4a52      	ldr	r2, [pc, #328]	; (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 800321e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003222:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003224:	4b50      	ldr	r3, [pc, #320]	; (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	494d      	ldr	r1, [pc, #308]	; (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 8003232:	4313      	orrs	r3, r2
 8003234:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d040      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d107      	bne.n	800325a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	4b47      	ldr	r3, [pc, #284]	; (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d115      	bne.n	8003282 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e07f      	b.n	800335a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d107      	bne.n	8003272 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003262:	4b41      	ldr	r3, [pc, #260]	; (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e073      	b.n	800335a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003272:	4b3d      	ldr	r3, [pc, #244]	; (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e06b      	b.n	800335a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003282:	4b39      	ldr	r3, [pc, #228]	; (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f023 0203 	bic.w	r2, r3, #3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	4936      	ldr	r1, [pc, #216]	; (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 8003290:	4313      	orrs	r3, r2
 8003292:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003294:	f7fe fdc6 	bl	8001e24 <HAL_GetTick>
 8003298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329a:	e00a      	b.n	80032b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800329c:	f7fe fdc2 	bl	8001e24 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e053      	b.n	800335a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b2:	4b2d      	ldr	r3, [pc, #180]	; (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 020c 	and.w	r2, r3, #12
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d1eb      	bne.n	800329c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032c4:	4b27      	ldr	r3, [pc, #156]	; (8003364 <HAL_RCC_ClockConfig+0x1c4>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 030f 	and.w	r3, r3, #15
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d210      	bcs.n	80032f4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d2:	4b24      	ldr	r3, [pc, #144]	; (8003364 <HAL_RCC_ClockConfig+0x1c4>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f023 020f 	bic.w	r2, r3, #15
 80032da:	4922      	ldr	r1, [pc, #136]	; (8003364 <HAL_RCC_ClockConfig+0x1c4>)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	4313      	orrs	r3, r2
 80032e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e2:	4b20      	ldr	r3, [pc, #128]	; (8003364 <HAL_RCC_ClockConfig+0x1c4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d001      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e032      	b.n	800335a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003300:	4b19      	ldr	r3, [pc, #100]	; (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4916      	ldr	r1, [pc, #88]	; (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 800330e:	4313      	orrs	r3, r2
 8003310:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d009      	beq.n	8003332 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800331e:	4b12      	ldr	r3, [pc, #72]	; (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	490e      	ldr	r1, [pc, #56]	; (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 800332e:	4313      	orrs	r3, r2
 8003330:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003332:	f000 f821 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8003336:	4602      	mov	r2, r0
 8003338:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <HAL_RCC_ClockConfig+0x1c8>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	091b      	lsrs	r3, r3, #4
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	490a      	ldr	r1, [pc, #40]	; (800336c <HAL_RCC_ClockConfig+0x1cc>)
 8003344:	5ccb      	ldrb	r3, [r1, r3]
 8003346:	fa22 f303 	lsr.w	r3, r2, r3
 800334a:	4a09      	ldr	r2, [pc, #36]	; (8003370 <HAL_RCC_ClockConfig+0x1d0>)
 800334c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800334e:	4b09      	ldr	r3, [pc, #36]	; (8003374 <HAL_RCC_ClockConfig+0x1d4>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe fd36 	bl	8001dc4 <HAL_InitTick>

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40023c00 	.word	0x40023c00
 8003368:	40023800 	.word	0x40023800
 800336c:	08006060 	.word	0x08006060
 8003370:	20000000 	.word	0x20000000
 8003374:	20000004 	.word	0x20000004

08003378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003378:	b5b0      	push	{r4, r5, r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800337e:	2100      	movs	r1, #0
 8003380:	6079      	str	r1, [r7, #4]
 8003382:	2100      	movs	r1, #0
 8003384:	60f9      	str	r1, [r7, #12]
 8003386:	2100      	movs	r1, #0
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800338a:	2100      	movs	r1, #0
 800338c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800338e:	4952      	ldr	r1, [pc, #328]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003390:	6889      	ldr	r1, [r1, #8]
 8003392:	f001 010c 	and.w	r1, r1, #12
 8003396:	2908      	cmp	r1, #8
 8003398:	d00d      	beq.n	80033b6 <HAL_RCC_GetSysClockFreq+0x3e>
 800339a:	2908      	cmp	r1, #8
 800339c:	f200 8094 	bhi.w	80034c8 <HAL_RCC_GetSysClockFreq+0x150>
 80033a0:	2900      	cmp	r1, #0
 80033a2:	d002      	beq.n	80033aa <HAL_RCC_GetSysClockFreq+0x32>
 80033a4:	2904      	cmp	r1, #4
 80033a6:	d003      	beq.n	80033b0 <HAL_RCC_GetSysClockFreq+0x38>
 80033a8:	e08e      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033aa:	4b4c      	ldr	r3, [pc, #304]	; (80034dc <HAL_RCC_GetSysClockFreq+0x164>)
 80033ac:	60bb      	str	r3, [r7, #8]
      break;
 80033ae:	e08e      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033b0:	4b4b      	ldr	r3, [pc, #300]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80033b2:	60bb      	str	r3, [r7, #8]
      break;
 80033b4:	e08b      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033b6:	4948      	ldr	r1, [pc, #288]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80033b8:	6849      	ldr	r1, [r1, #4]
 80033ba:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80033be:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80033c0:	4945      	ldr	r1, [pc, #276]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80033c2:	6849      	ldr	r1, [r1, #4]
 80033c4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80033c8:	2900      	cmp	r1, #0
 80033ca:	d024      	beq.n	8003416 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033cc:	4942      	ldr	r1, [pc, #264]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80033ce:	6849      	ldr	r1, [r1, #4]
 80033d0:	0989      	lsrs	r1, r1, #6
 80033d2:	4608      	mov	r0, r1
 80033d4:	f04f 0100 	mov.w	r1, #0
 80033d8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80033dc:	f04f 0500 	mov.w	r5, #0
 80033e0:	ea00 0204 	and.w	r2, r0, r4
 80033e4:	ea01 0305 	and.w	r3, r1, r5
 80033e8:	493d      	ldr	r1, [pc, #244]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80033ea:	fb01 f003 	mul.w	r0, r1, r3
 80033ee:	2100      	movs	r1, #0
 80033f0:	fb01 f102 	mul.w	r1, r1, r2
 80033f4:	1844      	adds	r4, r0, r1
 80033f6:	493a      	ldr	r1, [pc, #232]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80033f8:	fba2 0101 	umull	r0, r1, r2, r1
 80033fc:	1863      	adds	r3, r4, r1
 80033fe:	4619      	mov	r1, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	461a      	mov	r2, r3
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	f7fc ff1e 	bl	8000248 <__aeabi_uldivmod>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4613      	mov	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	e04a      	b.n	80034ac <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003416:	4b30      	ldr	r3, [pc, #192]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	099b      	lsrs	r3, r3, #6
 800341c:	461a      	mov	r2, r3
 800341e:	f04f 0300 	mov.w	r3, #0
 8003422:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003426:	f04f 0100 	mov.w	r1, #0
 800342a:	ea02 0400 	and.w	r4, r2, r0
 800342e:	ea03 0501 	and.w	r5, r3, r1
 8003432:	4620      	mov	r0, r4
 8003434:	4629      	mov	r1, r5
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	014b      	lsls	r3, r1, #5
 8003440:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003444:	0142      	lsls	r2, r0, #5
 8003446:	4610      	mov	r0, r2
 8003448:	4619      	mov	r1, r3
 800344a:	1b00      	subs	r0, r0, r4
 800344c:	eb61 0105 	sbc.w	r1, r1, r5
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	018b      	lsls	r3, r1, #6
 800345a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800345e:	0182      	lsls	r2, r0, #6
 8003460:	1a12      	subs	r2, r2, r0
 8003462:	eb63 0301 	sbc.w	r3, r3, r1
 8003466:	f04f 0000 	mov.w	r0, #0
 800346a:	f04f 0100 	mov.w	r1, #0
 800346e:	00d9      	lsls	r1, r3, #3
 8003470:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003474:	00d0      	lsls	r0, r2, #3
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	1912      	adds	r2, r2, r4
 800347c:	eb45 0303 	adc.w	r3, r5, r3
 8003480:	f04f 0000 	mov.w	r0, #0
 8003484:	f04f 0100 	mov.w	r1, #0
 8003488:	0299      	lsls	r1, r3, #10
 800348a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800348e:	0290      	lsls	r0, r2, #10
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	4610      	mov	r0, r2
 8003496:	4619      	mov	r1, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	461a      	mov	r2, r3
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	f7fc fed2 	bl	8000248 <__aeabi_uldivmod>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4613      	mov	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80034ac:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	0c1b      	lsrs	r3, r3, #16
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	3301      	adds	r3, #1
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c4:	60bb      	str	r3, [r7, #8]
      break;
 80034c6:	e002      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034c8:	4b04      	ldr	r3, [pc, #16]	; (80034dc <HAL_RCC_GetSysClockFreq+0x164>)
 80034ca:	60bb      	str	r3, [r7, #8]
      break;
 80034cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ce:	68bb      	ldr	r3, [r7, #8]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bdb0      	pop	{r4, r5, r7, pc}
 80034d8:	40023800 	.word	0x40023800
 80034dc:	00f42400 	.word	0x00f42400
 80034e0:	017d7840 	.word	0x017d7840

080034e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e8:	4b03      	ldr	r3, [pc, #12]	; (80034f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034ea:	681b      	ldr	r3, [r3, #0]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	20000000 	.word	0x20000000

080034fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003500:	f7ff fff0 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 8003504:	4602      	mov	r2, r0
 8003506:	4b05      	ldr	r3, [pc, #20]	; (800351c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	0a9b      	lsrs	r3, r3, #10
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	4903      	ldr	r1, [pc, #12]	; (8003520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003512:	5ccb      	ldrb	r3, [r1, r3]
 8003514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003518:	4618      	mov	r0, r3
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40023800 	.word	0x40023800
 8003520:	08006070 	.word	0x08006070

08003524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003528:	f7ff ffdc 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 800352c:	4602      	mov	r2, r0
 800352e:	4b05      	ldr	r3, [pc, #20]	; (8003544 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	0b5b      	lsrs	r3, r3, #13
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	4903      	ldr	r1, [pc, #12]	; (8003548 <HAL_RCC_GetPCLK2Freq+0x24>)
 800353a:	5ccb      	ldrb	r3, [r1, r3]
 800353c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003540:	4618      	mov	r0, r3
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40023800 	.word	0x40023800
 8003548:	08006070 	.word	0x08006070

0800354c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b088      	sub	sp, #32
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003554:	2300      	movs	r3, #0
 8003556:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003558:	2300      	movs	r3, #0
 800355a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800355c:	2300      	movs	r3, #0
 800355e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003560:	2300      	movs	r3, #0
 8003562:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003564:	2300      	movs	r3, #0
 8003566:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d012      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003574:	4b69      	ldr	r3, [pc, #420]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	4a68      	ldr	r2, [pc, #416]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800357a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800357e:	6093      	str	r3, [r2, #8]
 8003580:	4b66      	ldr	r3, [pc, #408]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003588:	4964      	ldr	r1, [pc, #400]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800358a:	4313      	orrs	r3, r2
 800358c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003596:	2301      	movs	r3, #1
 8003598:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d017      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035a6:	4b5d      	ldr	r3, [pc, #372]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b4:	4959      	ldr	r1, [pc, #356]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035c4:	d101      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80035c6:	2301      	movs	r3, #1
 80035c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80035d2:	2301      	movs	r3, #1
 80035d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d017      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035e2:	4b4e      	ldr	r3, [pc, #312]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	494a      	ldr	r1, [pc, #296]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003600:	d101      	bne.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003602:	2301      	movs	r3, #1
 8003604:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800360e:	2301      	movs	r3, #1
 8003610:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800361e:	2301      	movs	r3, #1
 8003620:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0320 	and.w	r3, r3, #32
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 808b 	beq.w	8003746 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003630:	4b3a      	ldr	r3, [pc, #232]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	4a39      	ldr	r2, [pc, #228]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800363a:	6413      	str	r3, [r2, #64]	; 0x40
 800363c:	4b37      	ldr	r3, [pc, #220]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003648:	4b35      	ldr	r3, [pc, #212]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a34      	ldr	r2, [pc, #208]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800364e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003652:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003654:	f7fe fbe6 	bl	8001e24 <HAL_GetTick>
 8003658:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800365a:	e008      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365c:	f7fe fbe2 	bl	8001e24 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b64      	cmp	r3, #100	; 0x64
 8003668:	d901      	bls.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e38f      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800366e:	4b2c      	ldr	r3, [pc, #176]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f0      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800367a:	4b28      	ldr	r3, [pc, #160]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800367c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003682:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d035      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	429a      	cmp	r2, r3
 8003696:	d02e      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003698:	4b20      	ldr	r3, [pc, #128]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036a2:	4b1e      	ldr	r3, [pc, #120]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a6:	4a1d      	ldr	r2, [pc, #116]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036ae:	4b1b      	ldr	r3, [pc, #108]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b2:	4a1a      	ldr	r2, [pc, #104]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80036ba:	4a18      	ldr	r2, [pc, #96]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80036c0:	4b16      	ldr	r3, [pc, #88]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d114      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7fe fbaa 	bl	8001e24 <HAL_GetTick>
 80036d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d2:	e00a      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036d4:	f7fe fba6 	bl	8001e24 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d901      	bls.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e351      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ea:	4b0c      	ldr	r3, [pc, #48]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0ee      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003702:	d111      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003704:	4b05      	ldr	r3, [pc, #20]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003710:	4b04      	ldr	r3, [pc, #16]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003712:	400b      	ands	r3, r1
 8003714:	4901      	ldr	r1, [pc, #4]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]
 800371a:	e00b      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800371c:	40023800 	.word	0x40023800
 8003720:	40007000 	.word	0x40007000
 8003724:	0ffffcff 	.word	0x0ffffcff
 8003728:	4bb3      	ldr	r3, [pc, #716]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	4ab2      	ldr	r2, [pc, #712]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800372e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003732:	6093      	str	r3, [r2, #8]
 8003734:	4bb0      	ldr	r3, [pc, #704]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003736:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003740:	49ad      	ldr	r1, [pc, #692]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003742:	4313      	orrs	r3, r2
 8003744:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0310 	and.w	r3, r3, #16
 800374e:	2b00      	cmp	r3, #0
 8003750:	d010      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003752:	4ba9      	ldr	r3, [pc, #676]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003758:	4aa7      	ldr	r2, [pc, #668]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800375a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800375e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003762:	4ba5      	ldr	r3, [pc, #660]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003764:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376c:	49a2      	ldr	r1, [pc, #648]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003780:	4b9d      	ldr	r3, [pc, #628]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003786:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800378e:	499a      	ldr	r1, [pc, #616]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003790:	4313      	orrs	r3, r2
 8003792:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037a2:	4b95      	ldr	r3, [pc, #596]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037b0:	4991      	ldr	r1, [pc, #580]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00a      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037c4:	4b8c      	ldr	r3, [pc, #560]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037d2:	4989      	ldr	r1, [pc, #548]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037e6:	4b84      	ldr	r3, [pc, #528]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f4:	4980      	ldr	r1, [pc, #512]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003808:	4b7b      	ldr	r3, [pc, #492]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380e:	f023 0203 	bic.w	r2, r3, #3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003816:	4978      	ldr	r1, [pc, #480]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003818:	4313      	orrs	r3, r2
 800381a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800382a:	4b73      	ldr	r3, [pc, #460]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800382c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003830:	f023 020c 	bic.w	r2, r3, #12
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003838:	496f      	ldr	r1, [pc, #444]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800384c:	4b6a      	ldr	r3, [pc, #424]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800384e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003852:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385a:	4967      	ldr	r1, [pc, #412]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800385c:	4313      	orrs	r3, r2
 800385e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800386e:	4b62      	ldr	r3, [pc, #392]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003874:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800387c:	495e      	ldr	r1, [pc, #376]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003890:	4b59      	ldr	r3, [pc, #356]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003896:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389e:	4956      	ldr	r1, [pc, #344]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80038b2:	4b51      	ldr	r3, [pc, #324]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c0:	494d      	ldr	r1, [pc, #308]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80038d4:	4b48      	ldr	r3, [pc, #288]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e2:	4945      	ldr	r1, [pc, #276]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80038f6:	4b40      	ldr	r3, [pc, #256]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003904:	493c      	ldr	r1, [pc, #240]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00a      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003918:	4b37      	ldr	r3, [pc, #220]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800391a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003926:	4934      	ldr	r1, [pc, #208]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d011      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800393a:	4b2f      	ldr	r3, [pc, #188]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800393c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003940:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003948:	492b      	ldr	r1, [pc, #172]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800394a:	4313      	orrs	r3, r2
 800394c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003954:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003958:	d101      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800395a:	2301      	movs	r3, #1
 800395c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800396a:	2301      	movs	r3, #1
 800396c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800397a:	4b1f      	ldr	r3, [pc, #124]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800397c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003980:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003988:	491b      	ldr	r1, [pc, #108]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00b      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800399c:	4b16      	ldr	r3, [pc, #88]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800399e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ac:	4912      	ldr	r1, [pc, #72]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00b      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80039c0:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039d0:	4909      	ldr	r1, [pc, #36]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00f      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039e4:	4b04      	ldr	r3, [pc, #16]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f4:	e002      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80039f6:	bf00      	nop
 80039f8:	40023800 	.word	0x40023800
 80039fc:	4986      	ldr	r1, [pc, #536]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00b      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003a10:	4b81      	ldr	r3, [pc, #516]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a16:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a20:	497d      	ldr	r1, [pc, #500]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d006      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 80d6 	beq.w	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a3c:	4b76      	ldr	r3, [pc, #472]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a75      	ldr	r2, [pc, #468]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a48:	f7fe f9ec 	bl	8001e24 <HAL_GetTick>
 8003a4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a50:	f7fe f9e8 	bl	8001e24 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b64      	cmp	r3, #100	; 0x64
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e195      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a62:	4b6d      	ldr	r3, [pc, #436]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f0      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d021      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d11d      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a82:	4b65      	ldr	r3, [pc, #404]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a88:	0c1b      	lsrs	r3, r3, #16
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a90:	4b61      	ldr	r3, [pc, #388]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a96:	0e1b      	lsrs	r3, r3, #24
 8003a98:	f003 030f 	and.w	r3, r3, #15
 8003a9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	019a      	lsls	r2, r3, #6
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	041b      	lsls	r3, r3, #16
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	061b      	lsls	r3, r3, #24
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	071b      	lsls	r3, r3, #28
 8003ab6:	4958      	ldr	r1, [pc, #352]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d004      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ad2:	d00a      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d02e      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ae8:	d129      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003aea:	4b4b      	ldr	r3, [pc, #300]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003af0:	0c1b      	lsrs	r3, r3, #16
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003af8:	4b47      	ldr	r3, [pc, #284]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003afe:	0f1b      	lsrs	r3, r3, #28
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	019a      	lsls	r2, r3, #6
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	041b      	lsls	r3, r3, #16
 8003b10:	431a      	orrs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	061b      	lsls	r3, r3, #24
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	071b      	lsls	r3, r3, #28
 8003b1e:	493e      	ldr	r1, [pc, #248]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b26:	4b3c      	ldr	r3, [pc, #240]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b2c:	f023 021f 	bic.w	r2, r3, #31
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	3b01      	subs	r3, #1
 8003b36:	4938      	ldr	r1, [pc, #224]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d01d      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b4a:	4b33      	ldr	r3, [pc, #204]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b50:	0e1b      	lsrs	r3, r3, #24
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b58:	4b2f      	ldr	r3, [pc, #188]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b5e:	0f1b      	lsrs	r3, r3, #28
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	019a      	lsls	r2, r3, #6
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	041b      	lsls	r3, r3, #16
 8003b72:	431a      	orrs	r2, r3
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	061b      	lsls	r3, r3, #24
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	071b      	lsls	r3, r3, #28
 8003b7e:	4926      	ldr	r1, [pc, #152]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d011      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	019a      	lsls	r2, r3, #6
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	041b      	lsls	r3, r3, #16
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	061b      	lsls	r3, r3, #24
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	071b      	lsls	r3, r3, #28
 8003bae:	491a      	ldr	r1, [pc, #104]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003bb6:	4b18      	ldr	r3, [pc, #96]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a17      	ldr	r2, [pc, #92]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bc2:	f7fe f92f 	bl	8001e24 <HAL_GetTick>
 8003bc6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bc8:	e008      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bca:	f7fe f92b 	bl	8001e24 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b64      	cmp	r3, #100	; 0x64
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e0d8      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bdc:	4b0e      	ldr	r3, [pc, #56]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0f0      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	f040 80ce 	bne.w	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003bf0:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a08      	ldr	r2, [pc, #32]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bfc:	f7fe f912 	bl	8001e24 <HAL_GetTick>
 8003c00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c02:	e00b      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c04:	f7fe f90e 	bl	8001e24 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b64      	cmp	r3, #100	; 0x64
 8003c10:	d904      	bls.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e0bb      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003c16:	bf00      	nop
 8003c18:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c1c:	4b5e      	ldr	r3, [pc, #376]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c28:	d0ec      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d009      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d02e      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d12a      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c52:	4b51      	ldr	r3, [pc, #324]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c58:	0c1b      	lsrs	r3, r3, #16
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c60:	4b4d      	ldr	r3, [pc, #308]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c66:	0f1b      	lsrs	r3, r3, #28
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	019a      	lsls	r2, r3, #6
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	041b      	lsls	r3, r3, #16
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	061b      	lsls	r3, r3, #24
 8003c80:	431a      	orrs	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	071b      	lsls	r3, r3, #28
 8003c86:	4944      	ldr	r1, [pc, #272]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c8e:	4b42      	ldr	r3, [pc, #264]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c94:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	021b      	lsls	r3, r3, #8
 8003ca0:	493d      	ldr	r1, [pc, #244]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d022      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cbc:	d11d      	bne.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cbe:	4b36      	ldr	r3, [pc, #216]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc4:	0e1b      	lsrs	r3, r3, #24
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ccc:	4b32      	ldr	r3, [pc, #200]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd2:	0f1b      	lsrs	r3, r3, #28
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	019a      	lsls	r2, r3, #6
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	041b      	lsls	r3, r3, #16
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	061b      	lsls	r3, r3, #24
 8003cec:	431a      	orrs	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	071b      	lsls	r3, r3, #28
 8003cf2:	4929      	ldr	r1, [pc, #164]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d028      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d06:	4b24      	ldr	r3, [pc, #144]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0c:	0e1b      	lsrs	r3, r3, #24
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d14:	4b20      	ldr	r3, [pc, #128]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1a:	0c1b      	lsrs	r3, r3, #16
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	019a      	lsls	r2, r3, #6
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	041b      	lsls	r3, r3, #16
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	061b      	lsls	r3, r3, #24
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	071b      	lsls	r3, r3, #28
 8003d3a:	4917      	ldr	r1, [pc, #92]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d42:	4b15      	ldr	r3, [pc, #84]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	4911      	ldr	r1, [pc, #68]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d58:	4b0f      	ldr	r3, [pc, #60]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a0e      	ldr	r2, [pc, #56]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d64:	f7fe f85e 	bl	8001e24 <HAL_GetTick>
 8003d68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d6c:	f7fe f85a 	bl	8001e24 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b64      	cmp	r3, #100	; 0x64
 8003d78:	d901      	bls.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e007      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d7e:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d8a:	d1ef      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3720      	adds	r7, #32
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40023800 	.word	0x40023800

08003d9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e09d      	b.n	8003eea <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d108      	bne.n	8003dc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dbe:	d009      	beq.n	8003dd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	61da      	str	r2, [r3, #28]
 8003dc6:	e005      	b.n	8003dd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d106      	bne.n	8003df4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7fd fc7e 	bl	80016f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2202      	movs	r2, #2
 8003df8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e0a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e14:	d902      	bls.n	8003e1c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	e002      	b.n	8003e22 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e20:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003e2a:	d007      	beq.n	8003e3c <HAL_SPI_Init+0xa0>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e34:	d002      	beq.n	8003e3c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7e:	ea42 0103 	orr.w	r1, r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e86:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	0c1b      	lsrs	r3, r3, #16
 8003e98:	f003 0204 	and.w	r2, r3, #4
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	f003 0310 	and.w	r3, r3, #16
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eaa:	f003 0308 	and.w	r3, r3, #8
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003eb8:	ea42 0103 	orr.w	r1, r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69da      	ldr	r2, [r3, #28]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ed8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b082      	sub	sp, #8
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e049      	b.n	8003f98 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d106      	bne.n	8003f1e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7fd fe0d 	bl	8001b38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2202      	movs	r2, #2
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4610      	mov	r0, r2
 8003f32:	f000 fb99 	bl	8004668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e049      	b.n	8004046 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d106      	bne.n	8003fcc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7fd fdfa 	bl	8001bc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3304      	adds	r3, #4
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4610      	mov	r0, r2
 8003fe0:	f000 fb42 	bl	8004668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b082      	sub	sp, #8
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e049      	b.n	80040f4 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d106      	bne.n	800407a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f841 	bl	80040fc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2202      	movs	r2, #2
 800407e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3304      	adds	r3, #4
 800408a:	4619      	mov	r1, r3
 800408c:	4610      	mov	r0, r2
 800408e:	f000 faeb 	bl	8004668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004122:	2b01      	cmp	r3, #1
 8004124:	d101      	bne.n	800412a <HAL_TIM_IC_ConfigChannel+0x1a>
 8004126:	2302      	movs	r3, #2
 8004128:	e082      	b.n	8004230 <HAL_TIM_IC_ConfigChannel+0x120>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d11b      	bne.n	8004170 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6818      	ldr	r0, [r3, #0]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	6819      	ldr	r1, [r3, #0]
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f000 fe1c 	bl	8004d84 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 020c 	bic.w	r2, r2, #12
 800415a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6999      	ldr	r1, [r3, #24]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	619a      	str	r2, [r3, #24]
 800416e:	e05a      	b.n	8004226 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b04      	cmp	r3, #4
 8004174:	d11c      	bne.n	80041b0 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6818      	ldr	r0, [r3, #0]
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	6819      	ldr	r1, [r3, #0]
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f000 fea0 	bl	8004eca <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699a      	ldr	r2, [r3, #24]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004198:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6999      	ldr	r1, [r3, #24]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	021a      	lsls	r2, r3, #8
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	619a      	str	r2, [r3, #24]
 80041ae:	e03a      	b.n	8004226 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	d11b      	bne.n	80041ee <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	6819      	ldr	r1, [r3, #0]
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f000 feed 	bl	8004fa4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	69da      	ldr	r2, [r3, #28]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 020c 	bic.w	r2, r2, #12
 80041d8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	69d9      	ldr	r1, [r3, #28]
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	61da      	str	r2, [r3, #28]
 80041ec:	e01b      	b.n	8004226 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6818      	ldr	r0, [r3, #0]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	6819      	ldr	r1, [r3, #0]
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f000 ff0d 	bl	800501c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69da      	ldr	r2, [r3, #28]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004210:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69d9      	ldr	r1, [r3, #28]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	021a      	lsls	r2, r3, #8
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800424a:	2b01      	cmp	r3, #1
 800424c:	d101      	bne.n	8004252 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800424e:	2302      	movs	r3, #2
 8004250:	e0fd      	b.n	800444e <HAL_TIM_PWM_ConfigChannel+0x216>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b14      	cmp	r3, #20
 800425e:	f200 80f0 	bhi.w	8004442 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004262:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004268:	080042bd 	.word	0x080042bd
 800426c:	08004443 	.word	0x08004443
 8004270:	08004443 	.word	0x08004443
 8004274:	08004443 	.word	0x08004443
 8004278:	080042fd 	.word	0x080042fd
 800427c:	08004443 	.word	0x08004443
 8004280:	08004443 	.word	0x08004443
 8004284:	08004443 	.word	0x08004443
 8004288:	0800433f 	.word	0x0800433f
 800428c:	08004443 	.word	0x08004443
 8004290:	08004443 	.word	0x08004443
 8004294:	08004443 	.word	0x08004443
 8004298:	0800437f 	.word	0x0800437f
 800429c:	08004443 	.word	0x08004443
 80042a0:	08004443 	.word	0x08004443
 80042a4:	08004443 	.word	0x08004443
 80042a8:	080043c1 	.word	0x080043c1
 80042ac:	08004443 	.word	0x08004443
 80042b0:	08004443 	.word	0x08004443
 80042b4:	08004443 	.word	0x08004443
 80042b8:	08004401 	.word	0x08004401
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68b9      	ldr	r1, [r7, #8]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fa70 	bl	80047a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699a      	ldr	r2, [r3, #24]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f042 0208 	orr.w	r2, r2, #8
 80042d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0204 	bic.w	r2, r2, #4
 80042e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6999      	ldr	r1, [r3, #24]
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	691a      	ldr	r2, [r3, #16]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	619a      	str	r2, [r3, #24]
      break;
 80042fa:	e0a3      	b.n	8004444 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68b9      	ldr	r1, [r7, #8]
 8004302:	4618      	mov	r0, r3
 8004304:	f000 fac2 	bl	800488c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	699a      	ldr	r2, [r3, #24]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6999      	ldr	r1, [r3, #24]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	021a      	lsls	r2, r3, #8
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	619a      	str	r2, [r3, #24]
      break;
 800433c:	e082      	b.n	8004444 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68b9      	ldr	r1, [r7, #8]
 8004344:	4618      	mov	r0, r3
 8004346:	f000 fb19 	bl	800497c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	69da      	ldr	r2, [r3, #28]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 0208 	orr.w	r2, r2, #8
 8004358:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0204 	bic.w	r2, r2, #4
 8004368:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69d9      	ldr	r1, [r3, #28]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	691a      	ldr	r2, [r3, #16]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	61da      	str	r2, [r3, #28]
      break;
 800437c:	e062      	b.n	8004444 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68b9      	ldr	r1, [r7, #8]
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fb6f 	bl	8004a68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69da      	ldr	r2, [r3, #28]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004398:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69da      	ldr	r2, [r3, #28]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69d9      	ldr	r1, [r3, #28]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	021a      	lsls	r2, r3, #8
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	61da      	str	r2, [r3, #28]
      break;
 80043be:	e041      	b.n	8004444 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68b9      	ldr	r1, [r7, #8]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fba6 	bl	8004b18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0208 	orr.w	r2, r2, #8
 80043da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0204 	bic.w	r2, r2, #4
 80043ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	691a      	ldr	r2, [r3, #16]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80043fe:	e021      	b.n	8004444 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68b9      	ldr	r1, [r7, #8]
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fbd8 	bl	8004bbc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800441a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800442a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	021a      	lsls	r2, r3, #8
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004440:	e000      	b.n	8004444 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004442:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop

08004458 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004468:	2b01      	cmp	r3, #1
 800446a:	d101      	bne.n	8004470 <HAL_TIM_ConfigClockSource+0x18>
 800446c:	2302      	movs	r3, #2
 800446e:	e0b3      	b.n	80045d8 <HAL_TIM_ConfigClockSource+0x180>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4b55      	ldr	r3, [pc, #340]	; (80045e0 <HAL_TIM_ConfigClockSource+0x188>)
 800448c:	4013      	ands	r3, r2
 800448e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004496:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044a8:	d03e      	beq.n	8004528 <HAL_TIM_ConfigClockSource+0xd0>
 80044aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ae:	f200 8087 	bhi.w	80045c0 <HAL_TIM_ConfigClockSource+0x168>
 80044b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b6:	f000 8085 	beq.w	80045c4 <HAL_TIM_ConfigClockSource+0x16c>
 80044ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044be:	d87f      	bhi.n	80045c0 <HAL_TIM_ConfigClockSource+0x168>
 80044c0:	2b70      	cmp	r3, #112	; 0x70
 80044c2:	d01a      	beq.n	80044fa <HAL_TIM_ConfigClockSource+0xa2>
 80044c4:	2b70      	cmp	r3, #112	; 0x70
 80044c6:	d87b      	bhi.n	80045c0 <HAL_TIM_ConfigClockSource+0x168>
 80044c8:	2b60      	cmp	r3, #96	; 0x60
 80044ca:	d050      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x116>
 80044cc:	2b60      	cmp	r3, #96	; 0x60
 80044ce:	d877      	bhi.n	80045c0 <HAL_TIM_ConfigClockSource+0x168>
 80044d0:	2b50      	cmp	r3, #80	; 0x50
 80044d2:	d03c      	beq.n	800454e <HAL_TIM_ConfigClockSource+0xf6>
 80044d4:	2b50      	cmp	r3, #80	; 0x50
 80044d6:	d873      	bhi.n	80045c0 <HAL_TIM_ConfigClockSource+0x168>
 80044d8:	2b40      	cmp	r3, #64	; 0x40
 80044da:	d058      	beq.n	800458e <HAL_TIM_ConfigClockSource+0x136>
 80044dc:	2b40      	cmp	r3, #64	; 0x40
 80044de:	d86f      	bhi.n	80045c0 <HAL_TIM_ConfigClockSource+0x168>
 80044e0:	2b30      	cmp	r3, #48	; 0x30
 80044e2:	d064      	beq.n	80045ae <HAL_TIM_ConfigClockSource+0x156>
 80044e4:	2b30      	cmp	r3, #48	; 0x30
 80044e6:	d86b      	bhi.n	80045c0 <HAL_TIM_ConfigClockSource+0x168>
 80044e8:	2b20      	cmp	r3, #32
 80044ea:	d060      	beq.n	80045ae <HAL_TIM_ConfigClockSource+0x156>
 80044ec:	2b20      	cmp	r3, #32
 80044ee:	d867      	bhi.n	80045c0 <HAL_TIM_ConfigClockSource+0x168>
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d05c      	beq.n	80045ae <HAL_TIM_ConfigClockSource+0x156>
 80044f4:	2b10      	cmp	r3, #16
 80044f6:	d05a      	beq.n	80045ae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80044f8:	e062      	b.n	80045c0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6818      	ldr	r0, [r3, #0]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	6899      	ldr	r1, [r3, #8]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f000 fddf 	bl	80050cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800451c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	609a      	str	r2, [r3, #8]
      break;
 8004526:	e04e      	b.n	80045c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6818      	ldr	r0, [r3, #0]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	6899      	ldr	r1, [r3, #8]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f000 fdc8 	bl	80050cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800454a:	609a      	str	r2, [r3, #8]
      break;
 800454c:	e03b      	b.n	80045c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	6859      	ldr	r1, [r3, #4]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	461a      	mov	r2, r3
 800455c:	f000 fc86 	bl	8004e6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2150      	movs	r1, #80	; 0x50
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fd95 	bl	8005096 <TIM_ITRx_SetConfig>
      break;
 800456c:	e02b      	b.n	80045c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	6859      	ldr	r1, [r3, #4]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	461a      	mov	r2, r3
 800457c:	f000 fce2 	bl	8004f44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2160      	movs	r1, #96	; 0x60
 8004586:	4618      	mov	r0, r3
 8004588:	f000 fd85 	bl	8005096 <TIM_ITRx_SetConfig>
      break;
 800458c:	e01b      	b.n	80045c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	6859      	ldr	r1, [r3, #4]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	461a      	mov	r2, r3
 800459c:	f000 fc66 	bl	8004e6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2140      	movs	r1, #64	; 0x40
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fd75 	bl	8005096 <TIM_ITRx_SetConfig>
      break;
 80045ac:	e00b      	b.n	80045c6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4619      	mov	r1, r3
 80045b8:	4610      	mov	r0, r2
 80045ba:	f000 fd6c 	bl	8005096 <TIM_ITRx_SetConfig>
        break;
 80045be:	e002      	b.n	80045c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80045c0:	bf00      	nop
 80045c2:	e000      	b.n	80045c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80045c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	fffeff88 	.word	0xfffeff88

080045e4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_TIM_SlaveConfigSynchro+0x18>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e031      	b.n	8004660 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800460c:	6839      	ldr	r1, [r7, #0]
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fb28 	bl	8004c64 <TIM_SlaveTimer_SetConfig>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d009      	beq.n	800462e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e018      	b.n	8004660 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800463c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68da      	ldr	r2, [r3, #12]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800464c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a40      	ldr	r2, [pc, #256]	; (800477c <TIM_Base_SetConfig+0x114>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d013      	beq.n	80046a8 <TIM_Base_SetConfig+0x40>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004686:	d00f      	beq.n	80046a8 <TIM_Base_SetConfig+0x40>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a3d      	ldr	r2, [pc, #244]	; (8004780 <TIM_Base_SetConfig+0x118>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00b      	beq.n	80046a8 <TIM_Base_SetConfig+0x40>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a3c      	ldr	r2, [pc, #240]	; (8004784 <TIM_Base_SetConfig+0x11c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d007      	beq.n	80046a8 <TIM_Base_SetConfig+0x40>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a3b      	ldr	r2, [pc, #236]	; (8004788 <TIM_Base_SetConfig+0x120>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d003      	beq.n	80046a8 <TIM_Base_SetConfig+0x40>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a3a      	ldr	r2, [pc, #232]	; (800478c <TIM_Base_SetConfig+0x124>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d108      	bne.n	80046ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a2f      	ldr	r2, [pc, #188]	; (800477c <TIM_Base_SetConfig+0x114>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d02b      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c8:	d027      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a2c      	ldr	r2, [pc, #176]	; (8004780 <TIM_Base_SetConfig+0x118>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d023      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a2b      	ldr	r2, [pc, #172]	; (8004784 <TIM_Base_SetConfig+0x11c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d01f      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a2a      	ldr	r2, [pc, #168]	; (8004788 <TIM_Base_SetConfig+0x120>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d01b      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a29      	ldr	r2, [pc, #164]	; (800478c <TIM_Base_SetConfig+0x124>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d017      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a28      	ldr	r2, [pc, #160]	; (8004790 <TIM_Base_SetConfig+0x128>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d013      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a27      	ldr	r2, [pc, #156]	; (8004794 <TIM_Base_SetConfig+0x12c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d00f      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a26      	ldr	r2, [pc, #152]	; (8004798 <TIM_Base_SetConfig+0x130>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d00b      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a25      	ldr	r2, [pc, #148]	; (800479c <TIM_Base_SetConfig+0x134>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d007      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a24      	ldr	r2, [pc, #144]	; (80047a0 <TIM_Base_SetConfig+0x138>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d003      	beq.n	800471a <TIM_Base_SetConfig+0xb2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a23      	ldr	r2, [pc, #140]	; (80047a4 <TIM_Base_SetConfig+0x13c>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d108      	bne.n	800472c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	4313      	orrs	r3, r2
 800472a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	4313      	orrs	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a0a      	ldr	r2, [pc, #40]	; (800477c <TIM_Base_SetConfig+0x114>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d003      	beq.n	8004760 <TIM_Base_SetConfig+0xf8>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a0c      	ldr	r2, [pc, #48]	; (800478c <TIM_Base_SetConfig+0x124>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d103      	bne.n	8004768 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	615a      	str	r2, [r3, #20]
}
 800476e:	bf00      	nop
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	40010000 	.word	0x40010000
 8004780:	40000400 	.word	0x40000400
 8004784:	40000800 	.word	0x40000800
 8004788:	40000c00 	.word	0x40000c00
 800478c:	40010400 	.word	0x40010400
 8004790:	40014000 	.word	0x40014000
 8004794:	40014400 	.word	0x40014400
 8004798:	40014800 	.word	0x40014800
 800479c:	40001800 	.word	0x40001800
 80047a0:	40001c00 	.word	0x40001c00
 80047a4:	40002000 	.word	0x40002000

080047a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	f023 0201 	bic.w	r2, r3, #1
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	4b2b      	ldr	r3, [pc, #172]	; (8004880 <TIM_OC1_SetConfig+0xd8>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 0303 	bic.w	r3, r3, #3
 80047de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f023 0302 	bic.w	r3, r3, #2
 80047f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a21      	ldr	r2, [pc, #132]	; (8004884 <TIM_OC1_SetConfig+0xdc>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d003      	beq.n	800480c <TIM_OC1_SetConfig+0x64>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a20      	ldr	r2, [pc, #128]	; (8004888 <TIM_OC1_SetConfig+0xe0>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d10c      	bne.n	8004826 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f023 0308 	bic.w	r3, r3, #8
 8004812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	4313      	orrs	r3, r2
 800481c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f023 0304 	bic.w	r3, r3, #4
 8004824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a16      	ldr	r2, [pc, #88]	; (8004884 <TIM_OC1_SetConfig+0xdc>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d003      	beq.n	8004836 <TIM_OC1_SetConfig+0x8e>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a15      	ldr	r2, [pc, #84]	; (8004888 <TIM_OC1_SetConfig+0xe0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d111      	bne.n	800485a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800483c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	4313      	orrs	r3, r2
 800484e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4313      	orrs	r3, r2
 8004858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	621a      	str	r2, [r3, #32]
}
 8004874:	bf00      	nop
 8004876:	371c      	adds	r7, #28
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	fffeff8f 	.word	0xfffeff8f
 8004884:	40010000 	.word	0x40010000
 8004888:	40010400 	.word	0x40010400

0800488c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	f023 0210 	bic.w	r2, r3, #16
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4b2e      	ldr	r3, [pc, #184]	; (8004970 <TIM_OC2_SetConfig+0xe4>)
 80048b8:	4013      	ands	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	021b      	lsls	r3, r3, #8
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f023 0320 	bic.w	r3, r3, #32
 80048d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	011b      	lsls	r3, r3, #4
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a23      	ldr	r2, [pc, #140]	; (8004974 <TIM_OC2_SetConfig+0xe8>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d003      	beq.n	80048f4 <TIM_OC2_SetConfig+0x68>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a22      	ldr	r2, [pc, #136]	; (8004978 <TIM_OC2_SetConfig+0xec>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d10d      	bne.n	8004910 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	4313      	orrs	r3, r2
 8004906:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800490e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a18      	ldr	r2, [pc, #96]	; (8004974 <TIM_OC2_SetConfig+0xe8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d003      	beq.n	8004920 <TIM_OC2_SetConfig+0x94>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a17      	ldr	r2, [pc, #92]	; (8004978 <TIM_OC2_SetConfig+0xec>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d113      	bne.n	8004948 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004926:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800492e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	4313      	orrs	r3, r2
 800493a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	4313      	orrs	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	621a      	str	r2, [r3, #32]
}
 8004962:	bf00      	nop
 8004964:	371c      	adds	r7, #28
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	feff8fff 	.word	0xfeff8fff
 8004974:	40010000 	.word	0x40010000
 8004978:	40010400 	.word	0x40010400

0800497c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800497c:	b480      	push	{r7}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	4b2d      	ldr	r3, [pc, #180]	; (8004a5c <TIM_OC3_SetConfig+0xe0>)
 80049a8:	4013      	ands	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 0303 	bic.w	r3, r3, #3
 80049b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	021b      	lsls	r3, r3, #8
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a22      	ldr	r2, [pc, #136]	; (8004a60 <TIM_OC3_SetConfig+0xe4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d003      	beq.n	80049e2 <TIM_OC3_SetConfig+0x66>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a21      	ldr	r2, [pc, #132]	; (8004a64 <TIM_OC3_SetConfig+0xe8>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d10d      	bne.n	80049fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	021b      	lsls	r3, r3, #8
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a17      	ldr	r2, [pc, #92]	; (8004a60 <TIM_OC3_SetConfig+0xe4>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d003      	beq.n	8004a0e <TIM_OC3_SetConfig+0x92>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a16      	ldr	r2, [pc, #88]	; (8004a64 <TIM_OC3_SetConfig+0xe8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d113      	bne.n	8004a36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	011b      	lsls	r3, r3, #4
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	011b      	lsls	r3, r3, #4
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	621a      	str	r2, [r3, #32]
}
 8004a50:	bf00      	nop
 8004a52:	371c      	adds	r7, #28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	fffeff8f 	.word	0xfffeff8f
 8004a60:	40010000 	.word	0x40010000
 8004a64:	40010400 	.word	0x40010400

08004a68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4b1e      	ldr	r3, [pc, #120]	; (8004b0c <TIM_OC4_SetConfig+0xa4>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	021b      	lsls	r3, r3, #8
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ab2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	031b      	lsls	r3, r3, #12
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a13      	ldr	r2, [pc, #76]	; (8004b10 <TIM_OC4_SetConfig+0xa8>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d003      	beq.n	8004ad0 <TIM_OC4_SetConfig+0x68>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a12      	ldr	r2, [pc, #72]	; (8004b14 <TIM_OC4_SetConfig+0xac>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d109      	bne.n	8004ae4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ad6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	019b      	lsls	r3, r3, #6
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	621a      	str	r2, [r3, #32]
}
 8004afe:	bf00      	nop
 8004b00:	371c      	adds	r7, #28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	feff8fff 	.word	0xfeff8fff
 8004b10:	40010000 	.word	0x40010000
 8004b14:	40010400 	.word	0x40010400

08004b18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4b1b      	ldr	r3, [pc, #108]	; (8004bb0 <TIM_OC5_SetConfig+0x98>)
 8004b44:	4013      	ands	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	041b      	lsls	r3, r3, #16
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a12      	ldr	r2, [pc, #72]	; (8004bb4 <TIM_OC5_SetConfig+0x9c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d003      	beq.n	8004b76 <TIM_OC5_SetConfig+0x5e>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a11      	ldr	r2, [pc, #68]	; (8004bb8 <TIM_OC5_SetConfig+0xa0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d109      	bne.n	8004b8a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	021b      	lsls	r3, r3, #8
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	621a      	str	r2, [r3, #32]
}
 8004ba4:	bf00      	nop
 8004ba6:	371c      	adds	r7, #28
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	fffeff8f 	.word	0xfffeff8f
 8004bb4:	40010000 	.word	0x40010000
 8004bb8:	40010400 	.word	0x40010400

08004bbc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	4b1c      	ldr	r3, [pc, #112]	; (8004c58 <TIM_OC6_SetConfig+0x9c>)
 8004be8:	4013      	ands	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	021b      	lsls	r3, r3, #8
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004bfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	051b      	lsls	r3, r3, #20
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a13      	ldr	r2, [pc, #76]	; (8004c5c <TIM_OC6_SetConfig+0xa0>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d003      	beq.n	8004c1c <TIM_OC6_SetConfig+0x60>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a12      	ldr	r2, [pc, #72]	; (8004c60 <TIM_OC6_SetConfig+0xa4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d109      	bne.n	8004c30 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	029b      	lsls	r3, r3, #10
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	621a      	str	r2, [r3, #32]
}
 8004c4a:	bf00      	nop
 8004c4c:	371c      	adds	r7, #28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	feff8fff 	.word	0xfeff8fff
 8004c5c:	40010000 	.word	0x40010000
 8004c60:	40010400 	.word	0x40010400

08004c64 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c7c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	4b3d      	ldr	r3, [pc, #244]	; (8004d80 <TIM_SlaveTimer_SetConfig+0x11c>)
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b70      	cmp	r3, #112	; 0x70
 8004ca8:	d01a      	beq.n	8004ce0 <TIM_SlaveTimer_SetConfig+0x7c>
 8004caa:	2b70      	cmp	r3, #112	; 0x70
 8004cac:	d860      	bhi.n	8004d70 <TIM_SlaveTimer_SetConfig+0x10c>
 8004cae:	2b60      	cmp	r3, #96	; 0x60
 8004cb0:	d054      	beq.n	8004d5c <TIM_SlaveTimer_SetConfig+0xf8>
 8004cb2:	2b60      	cmp	r3, #96	; 0x60
 8004cb4:	d85c      	bhi.n	8004d70 <TIM_SlaveTimer_SetConfig+0x10c>
 8004cb6:	2b50      	cmp	r3, #80	; 0x50
 8004cb8:	d046      	beq.n	8004d48 <TIM_SlaveTimer_SetConfig+0xe4>
 8004cba:	2b50      	cmp	r3, #80	; 0x50
 8004cbc:	d858      	bhi.n	8004d70 <TIM_SlaveTimer_SetConfig+0x10c>
 8004cbe:	2b40      	cmp	r3, #64	; 0x40
 8004cc0:	d019      	beq.n	8004cf6 <TIM_SlaveTimer_SetConfig+0x92>
 8004cc2:	2b40      	cmp	r3, #64	; 0x40
 8004cc4:	d854      	bhi.n	8004d70 <TIM_SlaveTimer_SetConfig+0x10c>
 8004cc6:	2b30      	cmp	r3, #48	; 0x30
 8004cc8:	d054      	beq.n	8004d74 <TIM_SlaveTimer_SetConfig+0x110>
 8004cca:	2b30      	cmp	r3, #48	; 0x30
 8004ccc:	d850      	bhi.n	8004d70 <TIM_SlaveTimer_SetConfig+0x10c>
 8004cce:	2b20      	cmp	r3, #32
 8004cd0:	d050      	beq.n	8004d74 <TIM_SlaveTimer_SetConfig+0x110>
 8004cd2:	2b20      	cmp	r3, #32
 8004cd4:	d84c      	bhi.n	8004d70 <TIM_SlaveTimer_SetConfig+0x10c>
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d04c      	beq.n	8004d74 <TIM_SlaveTimer_SetConfig+0x110>
 8004cda:	2b10      	cmp	r3, #16
 8004cdc:	d04a      	beq.n	8004d74 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8004cde:	e047      	b.n	8004d70 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6818      	ldr	r0, [r3, #0]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	68d9      	ldr	r1, [r3, #12]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	f000 f9ec 	bl	80050cc <TIM_ETR_SetConfig>
      break;
 8004cf4:	e03f      	b.n	8004d76 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b05      	cmp	r3, #5
 8004cfc:	d101      	bne.n	8004d02 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e03a      	b.n	8004d78 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6a1a      	ldr	r2, [r3, #32]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0201 	bic.w	r2, r2, #1
 8004d18:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d28:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	011b      	lsls	r3, r3, #4
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	621a      	str	r2, [r3, #32]
      break;
 8004d46:	e016      	b.n	8004d76 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6818      	ldr	r0, [r3, #0]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	6899      	ldr	r1, [r3, #8]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	461a      	mov	r2, r3
 8004d56:	f000 f889 	bl	8004e6c <TIM_TI1_ConfigInputStage>
      break;
 8004d5a:	e00c      	b.n	8004d76 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6818      	ldr	r0, [r3, #0]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	6899      	ldr	r1, [r3, #8]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	f000 f8eb 	bl	8004f44 <TIM_TI2_ConfigInputStage>
      break;
 8004d6e:	e002      	b.n	8004d76 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8004d70:	bf00      	nop
 8004d72:	e000      	b.n	8004d76 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8004d74:	bf00      	nop
  }
  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3718      	adds	r7, #24
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	fffefff8 	.word	0xfffefff8

08004d84 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
 8004d90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	f023 0201 	bic.w	r2, r3, #1
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4a28      	ldr	r2, [pc, #160]	; (8004e50 <TIM_TI1_SetConfig+0xcc>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d01b      	beq.n	8004dea <TIM_TI1_SetConfig+0x66>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db8:	d017      	beq.n	8004dea <TIM_TI1_SetConfig+0x66>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4a25      	ldr	r2, [pc, #148]	; (8004e54 <TIM_TI1_SetConfig+0xd0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d013      	beq.n	8004dea <TIM_TI1_SetConfig+0x66>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	4a24      	ldr	r2, [pc, #144]	; (8004e58 <TIM_TI1_SetConfig+0xd4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00f      	beq.n	8004dea <TIM_TI1_SetConfig+0x66>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4a23      	ldr	r2, [pc, #140]	; (8004e5c <TIM_TI1_SetConfig+0xd8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00b      	beq.n	8004dea <TIM_TI1_SetConfig+0x66>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4a22      	ldr	r2, [pc, #136]	; (8004e60 <TIM_TI1_SetConfig+0xdc>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d007      	beq.n	8004dea <TIM_TI1_SetConfig+0x66>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4a21      	ldr	r2, [pc, #132]	; (8004e64 <TIM_TI1_SetConfig+0xe0>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d003      	beq.n	8004dea <TIM_TI1_SetConfig+0x66>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4a20      	ldr	r2, [pc, #128]	; (8004e68 <TIM_TI1_SetConfig+0xe4>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d101      	bne.n	8004dee <TIM_TI1_SetConfig+0x6a>
 8004dea:	2301      	movs	r3, #1
 8004dec:	e000      	b.n	8004df0 <TIM_TI1_SetConfig+0x6c>
 8004dee:	2300      	movs	r3, #0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d008      	beq.n	8004e06 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f023 0303 	bic.w	r3, r3, #3
 8004dfa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	e003      	b.n	8004e0e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f043 0301 	orr.w	r3, r3, #1
 8004e0c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	011b      	lsls	r3, r3, #4
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	f023 030a 	bic.w	r3, r3, #10
 8004e28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	f003 030a 	and.w	r3, r3, #10
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	621a      	str	r2, [r3, #32]
}
 8004e42:	bf00      	nop
 8004e44:	371c      	adds	r7, #28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40010000 	.word	0x40010000
 8004e54:	40000400 	.word	0x40000400
 8004e58:	40000800 	.word	0x40000800
 8004e5c:	40000c00 	.word	0x40000c00
 8004e60:	40010400 	.word	0x40010400
 8004e64:	40014000 	.word	0x40014000
 8004e68:	40001800 	.word	0x40001800

08004e6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	f023 0201 	bic.w	r2, r3, #1
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f023 030a 	bic.w	r3, r3, #10
 8004ea8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	621a      	str	r2, [r3, #32]
}
 8004ebe:	bf00      	nop
 8004ec0:	371c      	adds	r7, #28
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b087      	sub	sp, #28
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	607a      	str	r2, [r7, #4]
 8004ed6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	f023 0210 	bic.w	r2, r3, #16
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	021b      	lsls	r3, r3, #8
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	031b      	lsls	r3, r3, #12
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f1c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	011b      	lsls	r3, r3, #4
 8004f22:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	621a      	str	r2, [r3, #32]
}
 8004f38:	bf00      	nop
 8004f3a:	371c      	adds	r7, #28
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b087      	sub	sp, #28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	f023 0210 	bic.w	r2, r3, #16
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	031b      	lsls	r3, r3, #12
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	621a      	str	r2, [r3, #32]
}
 8004f98:	bf00      	nop
 8004f9a:	371c      	adds	r7, #28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
 8004fb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f023 0303 	bic.w	r3, r3, #3
 8004fd0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fe0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	011b      	lsls	r3, r3, #4
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004ff4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	021b      	lsls	r3, r3, #8
 8004ffa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	4313      	orrs	r3, r2
 8005002:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	621a      	str	r2, [r3, #32]
}
 8005010:	bf00      	nop
 8005012:	371c      	adds	r7, #28
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
 8005028:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005048:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	021b      	lsls	r3, r3, #8
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	4313      	orrs	r3, r2
 8005052:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800505a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	031b      	lsls	r3, r3, #12
 8005060:	b29b      	uxth	r3, r3
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	4313      	orrs	r3, r2
 8005066:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800506e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	031b      	lsls	r3, r3, #12
 8005074:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	4313      	orrs	r3, r2
 800507c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	621a      	str	r2, [r3, #32]
}
 800508a:	bf00      	nop
 800508c:	371c      	adds	r7, #28
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005096:	b480      	push	{r7}
 8005098:	b085      	sub	sp, #20
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	f043 0307 	orr.w	r3, r3, #7
 80050b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	609a      	str	r2, [r3, #8]
}
 80050c0:	bf00      	nop
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
 80050d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	021a      	lsls	r2, r3, #8
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	431a      	orrs	r2, r3
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	609a      	str	r2, [r3, #8]
}
 8005100:	bf00      	nop
 8005102:	371c      	adds	r7, #28
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005120:	2302      	movs	r3, #2
 8005122:	e06d      	b.n	8005200 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a30      	ldr	r2, [pc, #192]	; (800520c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d004      	beq.n	8005158 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a2f      	ldr	r2, [pc, #188]	; (8005210 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d108      	bne.n	800516a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800515e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	4313      	orrs	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005170:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4313      	orrs	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a20      	ldr	r2, [pc, #128]	; (800520c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d022      	beq.n	80051d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005196:	d01d      	beq.n	80051d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a1d      	ldr	r2, [pc, #116]	; (8005214 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d018      	beq.n	80051d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a1c      	ldr	r2, [pc, #112]	; (8005218 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d013      	beq.n	80051d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a1a      	ldr	r2, [pc, #104]	; (800521c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d00e      	beq.n	80051d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a15      	ldr	r2, [pc, #84]	; (8005210 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d009      	beq.n	80051d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a16      	ldr	r2, [pc, #88]	; (8005220 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d004      	beq.n	80051d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a15      	ldr	r2, [pc, #84]	; (8005224 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d10c      	bne.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	40010000 	.word	0x40010000
 8005210:	40010400 	.word	0x40010400
 8005214:	40000400 	.word	0x40000400
 8005218:	40000800 	.word	0x40000800
 800521c:	40000c00 	.word	0x40000c00
 8005220:	40014000 	.word	0x40014000
 8005224:	40001800 	.word	0x40001800

08005228 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e040      	b.n	80052bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800523e:	2b00      	cmp	r3, #0
 8005240:	d106      	bne.n	8005250 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7fc fd40 	bl	8001cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2224      	movs	r2, #36	; 0x24
 8005254:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0201 	bic.w	r2, r2, #1
 8005264:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f8c0 	bl	80053ec <UART_SetConfig>
 800526c:	4603      	mov	r3, r0
 800526e:	2b01      	cmp	r3, #1
 8005270:	d101      	bne.n	8005276 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e022      	b.n	80052bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	2b00      	cmp	r3, #0
 800527c:	d002      	beq.n	8005284 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fb16 	bl	80058b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005292:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0201 	orr.w	r2, r2, #1
 80052b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 fb9d 	bl	80059f4 <UART_CheckIdleState>
 80052ba:	4603      	mov	r3, r0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b08a      	sub	sp, #40	; 0x28
 80052c8:	af02      	add	r7, sp, #8
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	603b      	str	r3, [r7, #0]
 80052d0:	4613      	mov	r3, r2
 80052d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052d8:	2b20      	cmp	r3, #32
 80052da:	f040 8081 	bne.w	80053e0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d002      	beq.n	80052ea <HAL_UART_Transmit+0x26>
 80052e4:	88fb      	ldrh	r3, [r7, #6]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e079      	b.n	80053e2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d101      	bne.n	80052fc <HAL_UART_Transmit+0x38>
 80052f8:	2302      	movs	r3, #2
 80052fa:	e072      	b.n	80053e2 <HAL_UART_Transmit+0x11e>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2221      	movs	r2, #33	; 0x21
 8005310:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005312:	f7fc fd87 	bl	8001e24 <HAL_GetTick>
 8005316:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	88fa      	ldrh	r2, [r7, #6]
 800531c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	88fa      	ldrh	r2, [r7, #6]
 8005324:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005330:	d108      	bne.n	8005344 <HAL_UART_Transmit+0x80>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d104      	bne.n	8005344 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800533a:	2300      	movs	r3, #0
 800533c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	61bb      	str	r3, [r7, #24]
 8005342:	e003      	b.n	800534c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005348:	2300      	movs	r3, #0
 800534a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005354:	e02c      	b.n	80053b0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2200      	movs	r2, #0
 800535e:	2180      	movs	r1, #128	; 0x80
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 fb90 	bl	8005a86 <UART_WaitOnFlagUntilTimeout>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e038      	b.n	80053e2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10b      	bne.n	800538e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	461a      	mov	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005384:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	3302      	adds	r3, #2
 800538a:	61bb      	str	r3, [r7, #24]
 800538c:	e007      	b.n	800539e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	781a      	ldrb	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	3301      	adds	r3, #1
 800539c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	3b01      	subs	r3, #1
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1cc      	bne.n	8005356 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	2200      	movs	r2, #0
 80053c4:	2140      	movs	r1, #64	; 0x40
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 fb5d 	bl	8005a86 <UART_WaitOnFlagUntilTimeout>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e005      	b.n	80053e2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2220      	movs	r2, #32
 80053da:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	e000      	b.n	80053e2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80053e0:	2302      	movs	r3, #2
  }
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3720      	adds	r7, #32
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
	...

080053ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053f4:	2300      	movs	r3, #0
 80053f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	431a      	orrs	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	4313      	orrs	r3, r2
 800540e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	4ba7      	ldr	r3, [pc, #668]	; (80056b4 <UART_SetConfig+0x2c8>)
 8005418:	4013      	ands	r3, r2
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	6812      	ldr	r2, [r2, #0]
 800541e:	6979      	ldr	r1, [r7, #20]
 8005420:	430b      	orrs	r3, r1
 8005422:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	4313      	orrs	r3, r2
 8005448:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	430a      	orrs	r2, r1
 800545c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a95      	ldr	r2, [pc, #596]	; (80056b8 <UART_SetConfig+0x2cc>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d120      	bne.n	80054aa <UART_SetConfig+0xbe>
 8005468:	4b94      	ldr	r3, [pc, #592]	; (80056bc <UART_SetConfig+0x2d0>)
 800546a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	2b03      	cmp	r3, #3
 8005474:	d816      	bhi.n	80054a4 <UART_SetConfig+0xb8>
 8005476:	a201      	add	r2, pc, #4	; (adr r2, 800547c <UART_SetConfig+0x90>)
 8005478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547c:	0800548d 	.word	0x0800548d
 8005480:	08005499 	.word	0x08005499
 8005484:	08005493 	.word	0x08005493
 8005488:	0800549f 	.word	0x0800549f
 800548c:	2301      	movs	r3, #1
 800548e:	77fb      	strb	r3, [r7, #31]
 8005490:	e14f      	b.n	8005732 <UART_SetConfig+0x346>
 8005492:	2302      	movs	r3, #2
 8005494:	77fb      	strb	r3, [r7, #31]
 8005496:	e14c      	b.n	8005732 <UART_SetConfig+0x346>
 8005498:	2304      	movs	r3, #4
 800549a:	77fb      	strb	r3, [r7, #31]
 800549c:	e149      	b.n	8005732 <UART_SetConfig+0x346>
 800549e:	2308      	movs	r3, #8
 80054a0:	77fb      	strb	r3, [r7, #31]
 80054a2:	e146      	b.n	8005732 <UART_SetConfig+0x346>
 80054a4:	2310      	movs	r3, #16
 80054a6:	77fb      	strb	r3, [r7, #31]
 80054a8:	e143      	b.n	8005732 <UART_SetConfig+0x346>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a84      	ldr	r2, [pc, #528]	; (80056c0 <UART_SetConfig+0x2d4>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d132      	bne.n	800551a <UART_SetConfig+0x12e>
 80054b4:	4b81      	ldr	r3, [pc, #516]	; (80056bc <UART_SetConfig+0x2d0>)
 80054b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ba:	f003 030c 	and.w	r3, r3, #12
 80054be:	2b0c      	cmp	r3, #12
 80054c0:	d828      	bhi.n	8005514 <UART_SetConfig+0x128>
 80054c2:	a201      	add	r2, pc, #4	; (adr r2, 80054c8 <UART_SetConfig+0xdc>)
 80054c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c8:	080054fd 	.word	0x080054fd
 80054cc:	08005515 	.word	0x08005515
 80054d0:	08005515 	.word	0x08005515
 80054d4:	08005515 	.word	0x08005515
 80054d8:	08005509 	.word	0x08005509
 80054dc:	08005515 	.word	0x08005515
 80054e0:	08005515 	.word	0x08005515
 80054e4:	08005515 	.word	0x08005515
 80054e8:	08005503 	.word	0x08005503
 80054ec:	08005515 	.word	0x08005515
 80054f0:	08005515 	.word	0x08005515
 80054f4:	08005515 	.word	0x08005515
 80054f8:	0800550f 	.word	0x0800550f
 80054fc:	2300      	movs	r3, #0
 80054fe:	77fb      	strb	r3, [r7, #31]
 8005500:	e117      	b.n	8005732 <UART_SetConfig+0x346>
 8005502:	2302      	movs	r3, #2
 8005504:	77fb      	strb	r3, [r7, #31]
 8005506:	e114      	b.n	8005732 <UART_SetConfig+0x346>
 8005508:	2304      	movs	r3, #4
 800550a:	77fb      	strb	r3, [r7, #31]
 800550c:	e111      	b.n	8005732 <UART_SetConfig+0x346>
 800550e:	2308      	movs	r3, #8
 8005510:	77fb      	strb	r3, [r7, #31]
 8005512:	e10e      	b.n	8005732 <UART_SetConfig+0x346>
 8005514:	2310      	movs	r3, #16
 8005516:	77fb      	strb	r3, [r7, #31]
 8005518:	e10b      	b.n	8005732 <UART_SetConfig+0x346>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a69      	ldr	r2, [pc, #420]	; (80056c4 <UART_SetConfig+0x2d8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d120      	bne.n	8005566 <UART_SetConfig+0x17a>
 8005524:	4b65      	ldr	r3, [pc, #404]	; (80056bc <UART_SetConfig+0x2d0>)
 8005526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800552a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800552e:	2b30      	cmp	r3, #48	; 0x30
 8005530:	d013      	beq.n	800555a <UART_SetConfig+0x16e>
 8005532:	2b30      	cmp	r3, #48	; 0x30
 8005534:	d814      	bhi.n	8005560 <UART_SetConfig+0x174>
 8005536:	2b20      	cmp	r3, #32
 8005538:	d009      	beq.n	800554e <UART_SetConfig+0x162>
 800553a:	2b20      	cmp	r3, #32
 800553c:	d810      	bhi.n	8005560 <UART_SetConfig+0x174>
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <UART_SetConfig+0x15c>
 8005542:	2b10      	cmp	r3, #16
 8005544:	d006      	beq.n	8005554 <UART_SetConfig+0x168>
 8005546:	e00b      	b.n	8005560 <UART_SetConfig+0x174>
 8005548:	2300      	movs	r3, #0
 800554a:	77fb      	strb	r3, [r7, #31]
 800554c:	e0f1      	b.n	8005732 <UART_SetConfig+0x346>
 800554e:	2302      	movs	r3, #2
 8005550:	77fb      	strb	r3, [r7, #31]
 8005552:	e0ee      	b.n	8005732 <UART_SetConfig+0x346>
 8005554:	2304      	movs	r3, #4
 8005556:	77fb      	strb	r3, [r7, #31]
 8005558:	e0eb      	b.n	8005732 <UART_SetConfig+0x346>
 800555a:	2308      	movs	r3, #8
 800555c:	77fb      	strb	r3, [r7, #31]
 800555e:	e0e8      	b.n	8005732 <UART_SetConfig+0x346>
 8005560:	2310      	movs	r3, #16
 8005562:	77fb      	strb	r3, [r7, #31]
 8005564:	e0e5      	b.n	8005732 <UART_SetConfig+0x346>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a57      	ldr	r2, [pc, #348]	; (80056c8 <UART_SetConfig+0x2dc>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d120      	bne.n	80055b2 <UART_SetConfig+0x1c6>
 8005570:	4b52      	ldr	r3, [pc, #328]	; (80056bc <UART_SetConfig+0x2d0>)
 8005572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005576:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800557a:	2bc0      	cmp	r3, #192	; 0xc0
 800557c:	d013      	beq.n	80055a6 <UART_SetConfig+0x1ba>
 800557e:	2bc0      	cmp	r3, #192	; 0xc0
 8005580:	d814      	bhi.n	80055ac <UART_SetConfig+0x1c0>
 8005582:	2b80      	cmp	r3, #128	; 0x80
 8005584:	d009      	beq.n	800559a <UART_SetConfig+0x1ae>
 8005586:	2b80      	cmp	r3, #128	; 0x80
 8005588:	d810      	bhi.n	80055ac <UART_SetConfig+0x1c0>
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <UART_SetConfig+0x1a8>
 800558e:	2b40      	cmp	r3, #64	; 0x40
 8005590:	d006      	beq.n	80055a0 <UART_SetConfig+0x1b4>
 8005592:	e00b      	b.n	80055ac <UART_SetConfig+0x1c0>
 8005594:	2300      	movs	r3, #0
 8005596:	77fb      	strb	r3, [r7, #31]
 8005598:	e0cb      	b.n	8005732 <UART_SetConfig+0x346>
 800559a:	2302      	movs	r3, #2
 800559c:	77fb      	strb	r3, [r7, #31]
 800559e:	e0c8      	b.n	8005732 <UART_SetConfig+0x346>
 80055a0:	2304      	movs	r3, #4
 80055a2:	77fb      	strb	r3, [r7, #31]
 80055a4:	e0c5      	b.n	8005732 <UART_SetConfig+0x346>
 80055a6:	2308      	movs	r3, #8
 80055a8:	77fb      	strb	r3, [r7, #31]
 80055aa:	e0c2      	b.n	8005732 <UART_SetConfig+0x346>
 80055ac:	2310      	movs	r3, #16
 80055ae:	77fb      	strb	r3, [r7, #31]
 80055b0:	e0bf      	b.n	8005732 <UART_SetConfig+0x346>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a45      	ldr	r2, [pc, #276]	; (80056cc <UART_SetConfig+0x2e0>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d125      	bne.n	8005608 <UART_SetConfig+0x21c>
 80055bc:	4b3f      	ldr	r3, [pc, #252]	; (80056bc <UART_SetConfig+0x2d0>)
 80055be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055ca:	d017      	beq.n	80055fc <UART_SetConfig+0x210>
 80055cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055d0:	d817      	bhi.n	8005602 <UART_SetConfig+0x216>
 80055d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055d6:	d00b      	beq.n	80055f0 <UART_SetConfig+0x204>
 80055d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055dc:	d811      	bhi.n	8005602 <UART_SetConfig+0x216>
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <UART_SetConfig+0x1fe>
 80055e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055e6:	d006      	beq.n	80055f6 <UART_SetConfig+0x20a>
 80055e8:	e00b      	b.n	8005602 <UART_SetConfig+0x216>
 80055ea:	2300      	movs	r3, #0
 80055ec:	77fb      	strb	r3, [r7, #31]
 80055ee:	e0a0      	b.n	8005732 <UART_SetConfig+0x346>
 80055f0:	2302      	movs	r3, #2
 80055f2:	77fb      	strb	r3, [r7, #31]
 80055f4:	e09d      	b.n	8005732 <UART_SetConfig+0x346>
 80055f6:	2304      	movs	r3, #4
 80055f8:	77fb      	strb	r3, [r7, #31]
 80055fa:	e09a      	b.n	8005732 <UART_SetConfig+0x346>
 80055fc:	2308      	movs	r3, #8
 80055fe:	77fb      	strb	r3, [r7, #31]
 8005600:	e097      	b.n	8005732 <UART_SetConfig+0x346>
 8005602:	2310      	movs	r3, #16
 8005604:	77fb      	strb	r3, [r7, #31]
 8005606:	e094      	b.n	8005732 <UART_SetConfig+0x346>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a30      	ldr	r2, [pc, #192]	; (80056d0 <UART_SetConfig+0x2e4>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d125      	bne.n	800565e <UART_SetConfig+0x272>
 8005612:	4b2a      	ldr	r3, [pc, #168]	; (80056bc <UART_SetConfig+0x2d0>)
 8005614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005618:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800561c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005620:	d017      	beq.n	8005652 <UART_SetConfig+0x266>
 8005622:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005626:	d817      	bhi.n	8005658 <UART_SetConfig+0x26c>
 8005628:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800562c:	d00b      	beq.n	8005646 <UART_SetConfig+0x25a>
 800562e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005632:	d811      	bhi.n	8005658 <UART_SetConfig+0x26c>
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <UART_SetConfig+0x254>
 8005638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800563c:	d006      	beq.n	800564c <UART_SetConfig+0x260>
 800563e:	e00b      	b.n	8005658 <UART_SetConfig+0x26c>
 8005640:	2301      	movs	r3, #1
 8005642:	77fb      	strb	r3, [r7, #31]
 8005644:	e075      	b.n	8005732 <UART_SetConfig+0x346>
 8005646:	2302      	movs	r3, #2
 8005648:	77fb      	strb	r3, [r7, #31]
 800564a:	e072      	b.n	8005732 <UART_SetConfig+0x346>
 800564c:	2304      	movs	r3, #4
 800564e:	77fb      	strb	r3, [r7, #31]
 8005650:	e06f      	b.n	8005732 <UART_SetConfig+0x346>
 8005652:	2308      	movs	r3, #8
 8005654:	77fb      	strb	r3, [r7, #31]
 8005656:	e06c      	b.n	8005732 <UART_SetConfig+0x346>
 8005658:	2310      	movs	r3, #16
 800565a:	77fb      	strb	r3, [r7, #31]
 800565c:	e069      	b.n	8005732 <UART_SetConfig+0x346>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a1c      	ldr	r2, [pc, #112]	; (80056d4 <UART_SetConfig+0x2e8>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d137      	bne.n	80056d8 <UART_SetConfig+0x2ec>
 8005668:	4b14      	ldr	r3, [pc, #80]	; (80056bc <UART_SetConfig+0x2d0>)
 800566a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800566e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005672:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005676:	d017      	beq.n	80056a8 <UART_SetConfig+0x2bc>
 8005678:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800567c:	d817      	bhi.n	80056ae <UART_SetConfig+0x2c2>
 800567e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005682:	d00b      	beq.n	800569c <UART_SetConfig+0x2b0>
 8005684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005688:	d811      	bhi.n	80056ae <UART_SetConfig+0x2c2>
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <UART_SetConfig+0x2aa>
 800568e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005692:	d006      	beq.n	80056a2 <UART_SetConfig+0x2b6>
 8005694:	e00b      	b.n	80056ae <UART_SetConfig+0x2c2>
 8005696:	2300      	movs	r3, #0
 8005698:	77fb      	strb	r3, [r7, #31]
 800569a:	e04a      	b.n	8005732 <UART_SetConfig+0x346>
 800569c:	2302      	movs	r3, #2
 800569e:	77fb      	strb	r3, [r7, #31]
 80056a0:	e047      	b.n	8005732 <UART_SetConfig+0x346>
 80056a2:	2304      	movs	r3, #4
 80056a4:	77fb      	strb	r3, [r7, #31]
 80056a6:	e044      	b.n	8005732 <UART_SetConfig+0x346>
 80056a8:	2308      	movs	r3, #8
 80056aa:	77fb      	strb	r3, [r7, #31]
 80056ac:	e041      	b.n	8005732 <UART_SetConfig+0x346>
 80056ae:	2310      	movs	r3, #16
 80056b0:	77fb      	strb	r3, [r7, #31]
 80056b2:	e03e      	b.n	8005732 <UART_SetConfig+0x346>
 80056b4:	efff69f3 	.word	0xefff69f3
 80056b8:	40011000 	.word	0x40011000
 80056bc:	40023800 	.word	0x40023800
 80056c0:	40004400 	.word	0x40004400
 80056c4:	40004800 	.word	0x40004800
 80056c8:	40004c00 	.word	0x40004c00
 80056cc:	40005000 	.word	0x40005000
 80056d0:	40011400 	.word	0x40011400
 80056d4:	40007800 	.word	0x40007800
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a71      	ldr	r2, [pc, #452]	; (80058a4 <UART_SetConfig+0x4b8>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d125      	bne.n	800572e <UART_SetConfig+0x342>
 80056e2:	4b71      	ldr	r3, [pc, #452]	; (80058a8 <UART_SetConfig+0x4bc>)
 80056e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80056ec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056f0:	d017      	beq.n	8005722 <UART_SetConfig+0x336>
 80056f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056f6:	d817      	bhi.n	8005728 <UART_SetConfig+0x33c>
 80056f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056fc:	d00b      	beq.n	8005716 <UART_SetConfig+0x32a>
 80056fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005702:	d811      	bhi.n	8005728 <UART_SetConfig+0x33c>
 8005704:	2b00      	cmp	r3, #0
 8005706:	d003      	beq.n	8005710 <UART_SetConfig+0x324>
 8005708:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800570c:	d006      	beq.n	800571c <UART_SetConfig+0x330>
 800570e:	e00b      	b.n	8005728 <UART_SetConfig+0x33c>
 8005710:	2300      	movs	r3, #0
 8005712:	77fb      	strb	r3, [r7, #31]
 8005714:	e00d      	b.n	8005732 <UART_SetConfig+0x346>
 8005716:	2302      	movs	r3, #2
 8005718:	77fb      	strb	r3, [r7, #31]
 800571a:	e00a      	b.n	8005732 <UART_SetConfig+0x346>
 800571c:	2304      	movs	r3, #4
 800571e:	77fb      	strb	r3, [r7, #31]
 8005720:	e007      	b.n	8005732 <UART_SetConfig+0x346>
 8005722:	2308      	movs	r3, #8
 8005724:	77fb      	strb	r3, [r7, #31]
 8005726:	e004      	b.n	8005732 <UART_SetConfig+0x346>
 8005728:	2310      	movs	r3, #16
 800572a:	77fb      	strb	r3, [r7, #31]
 800572c:	e001      	b.n	8005732 <UART_SetConfig+0x346>
 800572e:	2310      	movs	r3, #16
 8005730:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800573a:	d15b      	bne.n	80057f4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800573c:	7ffb      	ldrb	r3, [r7, #31]
 800573e:	2b08      	cmp	r3, #8
 8005740:	d827      	bhi.n	8005792 <UART_SetConfig+0x3a6>
 8005742:	a201      	add	r2, pc, #4	; (adr r2, 8005748 <UART_SetConfig+0x35c>)
 8005744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005748:	0800576d 	.word	0x0800576d
 800574c:	08005775 	.word	0x08005775
 8005750:	0800577d 	.word	0x0800577d
 8005754:	08005793 	.word	0x08005793
 8005758:	08005783 	.word	0x08005783
 800575c:	08005793 	.word	0x08005793
 8005760:	08005793 	.word	0x08005793
 8005764:	08005793 	.word	0x08005793
 8005768:	0800578b 	.word	0x0800578b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800576c:	f7fd fec6 	bl	80034fc <HAL_RCC_GetPCLK1Freq>
 8005770:	61b8      	str	r0, [r7, #24]
        break;
 8005772:	e013      	b.n	800579c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005774:	f7fd fed6 	bl	8003524 <HAL_RCC_GetPCLK2Freq>
 8005778:	61b8      	str	r0, [r7, #24]
        break;
 800577a:	e00f      	b.n	800579c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800577c:	4b4b      	ldr	r3, [pc, #300]	; (80058ac <UART_SetConfig+0x4c0>)
 800577e:	61bb      	str	r3, [r7, #24]
        break;
 8005780:	e00c      	b.n	800579c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005782:	f7fd fdf9 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8005786:	61b8      	str	r0, [r7, #24]
        break;
 8005788:	e008      	b.n	800579c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800578a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800578e:	61bb      	str	r3, [r7, #24]
        break;
 8005790:	e004      	b.n	800579c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	77bb      	strb	r3, [r7, #30]
        break;
 800579a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d074      	beq.n	800588c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	005a      	lsls	r2, r3, #1
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	085b      	lsrs	r3, r3, #1
 80057ac:	441a      	add	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	2b0f      	cmp	r3, #15
 80057be:	d916      	bls.n	80057ee <UART_SetConfig+0x402>
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c6:	d212      	bcs.n	80057ee <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	f023 030f 	bic.w	r3, r3, #15
 80057d0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	085b      	lsrs	r3, r3, #1
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	f003 0307 	and.w	r3, r3, #7
 80057dc:	b29a      	uxth	r2, r3
 80057de:	89fb      	ldrh	r3, [r7, #14]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	89fa      	ldrh	r2, [r7, #14]
 80057ea:	60da      	str	r2, [r3, #12]
 80057ec:	e04e      	b.n	800588c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	77bb      	strb	r3, [r7, #30]
 80057f2:	e04b      	b.n	800588c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057f4:	7ffb      	ldrb	r3, [r7, #31]
 80057f6:	2b08      	cmp	r3, #8
 80057f8:	d827      	bhi.n	800584a <UART_SetConfig+0x45e>
 80057fa:	a201      	add	r2, pc, #4	; (adr r2, 8005800 <UART_SetConfig+0x414>)
 80057fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005800:	08005825 	.word	0x08005825
 8005804:	0800582d 	.word	0x0800582d
 8005808:	08005835 	.word	0x08005835
 800580c:	0800584b 	.word	0x0800584b
 8005810:	0800583b 	.word	0x0800583b
 8005814:	0800584b 	.word	0x0800584b
 8005818:	0800584b 	.word	0x0800584b
 800581c:	0800584b 	.word	0x0800584b
 8005820:	08005843 	.word	0x08005843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005824:	f7fd fe6a 	bl	80034fc <HAL_RCC_GetPCLK1Freq>
 8005828:	61b8      	str	r0, [r7, #24]
        break;
 800582a:	e013      	b.n	8005854 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800582c:	f7fd fe7a 	bl	8003524 <HAL_RCC_GetPCLK2Freq>
 8005830:	61b8      	str	r0, [r7, #24]
        break;
 8005832:	e00f      	b.n	8005854 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005834:	4b1d      	ldr	r3, [pc, #116]	; (80058ac <UART_SetConfig+0x4c0>)
 8005836:	61bb      	str	r3, [r7, #24]
        break;
 8005838:	e00c      	b.n	8005854 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800583a:	f7fd fd9d 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 800583e:	61b8      	str	r0, [r7, #24]
        break;
 8005840:	e008      	b.n	8005854 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005846:	61bb      	str	r3, [r7, #24]
        break;
 8005848:	e004      	b.n	8005854 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	77bb      	strb	r3, [r7, #30]
        break;
 8005852:	bf00      	nop
    }

    if (pclk != 0U)
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d018      	beq.n	800588c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	085a      	lsrs	r2, r3, #1
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	441a      	add	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	fbb2 f3f3 	udiv	r3, r2, r3
 800586c:	b29b      	uxth	r3, r3
 800586e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	2b0f      	cmp	r3, #15
 8005874:	d908      	bls.n	8005888 <UART_SetConfig+0x49c>
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800587c:	d204      	bcs.n	8005888 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	60da      	str	r2, [r3, #12]
 8005886:	e001      	b.n	800588c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005898:	7fbb      	ldrb	r3, [r7, #30]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3720      	adds	r7, #32
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	40007c00 	.word	0x40007c00
 80058a8:	40023800 	.word	0x40023800
 80058ac:	00f42400 	.word	0x00f42400

080058b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00a      	beq.n	80058da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00a      	beq.n	80058fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00a      	beq.n	800591e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005922:	f003 0308 	and.w	r3, r3, #8
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	430a      	orrs	r2, r1
 800593e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	f003 0310 	and.w	r3, r3, #16
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00a      	beq.n	8005962 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005966:	f003 0320 	and.w	r3, r3, #32
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00a      	beq.n	8005984 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598c:	2b00      	cmp	r3, #0
 800598e:	d01a      	beq.n	80059c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059ae:	d10a      	bne.n	80059c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	605a      	str	r2, [r3, #4]
  }
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af02      	add	r7, sp, #8
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a04:	f7fc fa0e 	bl	8001e24 <HAL_GetTick>
 8005a08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0308 	and.w	r3, r3, #8
 8005a14:	2b08      	cmp	r3, #8
 8005a16:	d10e      	bne.n	8005a36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f82d 	bl	8005a86 <UART_WaitOnFlagUntilTimeout>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e023      	b.n	8005a7e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0304 	and.w	r3, r3, #4
 8005a40:	2b04      	cmp	r3, #4
 8005a42:	d10e      	bne.n	8005a62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f817 	bl	8005a86 <UART_WaitOnFlagUntilTimeout>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e00d      	b.n	8005a7e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2220      	movs	r2, #32
 8005a66:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b084      	sub	sp, #16
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	60f8      	str	r0, [r7, #12]
 8005a8e:	60b9      	str	r1, [r7, #8]
 8005a90:	603b      	str	r3, [r7, #0]
 8005a92:	4613      	mov	r3, r2
 8005a94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a96:	e05e      	b.n	8005b56 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9e:	d05a      	beq.n	8005b56 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aa0:	f7fc f9c0 	bl	8001e24 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d302      	bcc.n	8005ab6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d11b      	bne.n	8005aee <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ac4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f022 0201 	bic.w	r2, r2, #1
 8005ad4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e043      	b.n	8005b76 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0304 	and.w	r3, r3, #4
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d02c      	beq.n	8005b56 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b0a:	d124      	bne.n	8005b56 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b14:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b24:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0201 	bic.w	r2, r2, #1
 8005b34:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e00f      	b.n	8005b76 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	69da      	ldr	r2, [r3, #28]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	4013      	ands	r3, r2
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	bf0c      	ite	eq
 8005b66:	2301      	moveq	r3, #1
 8005b68:	2300      	movne	r3, #0
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	79fb      	ldrb	r3, [r7, #7]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d091      	beq.n	8005a98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <__libc_init_array>:
 8005b80:	b570      	push	{r4, r5, r6, lr}
 8005b82:	4d0d      	ldr	r5, [pc, #52]	; (8005bb8 <__libc_init_array+0x38>)
 8005b84:	4c0d      	ldr	r4, [pc, #52]	; (8005bbc <__libc_init_array+0x3c>)
 8005b86:	1b64      	subs	r4, r4, r5
 8005b88:	10a4      	asrs	r4, r4, #2
 8005b8a:	2600      	movs	r6, #0
 8005b8c:	42a6      	cmp	r6, r4
 8005b8e:	d109      	bne.n	8005ba4 <__libc_init_array+0x24>
 8005b90:	4d0b      	ldr	r5, [pc, #44]	; (8005bc0 <__libc_init_array+0x40>)
 8005b92:	4c0c      	ldr	r4, [pc, #48]	; (8005bc4 <__libc_init_array+0x44>)
 8005b94:	f000 f864 	bl	8005c60 <_init>
 8005b98:	1b64      	subs	r4, r4, r5
 8005b9a:	10a4      	asrs	r4, r4, #2
 8005b9c:	2600      	movs	r6, #0
 8005b9e:	42a6      	cmp	r6, r4
 8005ba0:	d105      	bne.n	8005bae <__libc_init_array+0x2e>
 8005ba2:	bd70      	pop	{r4, r5, r6, pc}
 8005ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ba8:	4798      	blx	r3
 8005baa:	3601      	adds	r6, #1
 8005bac:	e7ee      	b.n	8005b8c <__libc_init_array+0xc>
 8005bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bb2:	4798      	blx	r3
 8005bb4:	3601      	adds	r6, #1
 8005bb6:	e7f2      	b.n	8005b9e <__libc_init_array+0x1e>
 8005bb8:	080060a8 	.word	0x080060a8
 8005bbc:	080060a8 	.word	0x080060a8
 8005bc0:	080060a8 	.word	0x080060a8
 8005bc4:	080060ac 	.word	0x080060ac

08005bc8 <memset>:
 8005bc8:	4402      	add	r2, r0
 8005bca:	4603      	mov	r3, r0
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d100      	bne.n	8005bd2 <memset+0xa>
 8005bd0:	4770      	bx	lr
 8005bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8005bd6:	e7f9      	b.n	8005bcc <memset+0x4>

08005bd8 <__utoa>:
 8005bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bda:	4c1f      	ldr	r4, [pc, #124]	; (8005c58 <__utoa+0x80>)
 8005bdc:	b08b      	sub	sp, #44	; 0x2c
 8005bde:	4605      	mov	r5, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	466e      	mov	r6, sp
 8005be4:	f104 0c20 	add.w	ip, r4, #32
 8005be8:	6820      	ldr	r0, [r4, #0]
 8005bea:	6861      	ldr	r1, [r4, #4]
 8005bec:	4637      	mov	r7, r6
 8005bee:	c703      	stmia	r7!, {r0, r1}
 8005bf0:	3408      	adds	r4, #8
 8005bf2:	4564      	cmp	r4, ip
 8005bf4:	463e      	mov	r6, r7
 8005bf6:	d1f7      	bne.n	8005be8 <__utoa+0x10>
 8005bf8:	7921      	ldrb	r1, [r4, #4]
 8005bfa:	7139      	strb	r1, [r7, #4]
 8005bfc:	1e91      	subs	r1, r2, #2
 8005bfe:	6820      	ldr	r0, [r4, #0]
 8005c00:	6038      	str	r0, [r7, #0]
 8005c02:	2922      	cmp	r1, #34	; 0x22
 8005c04:	f04f 0100 	mov.w	r1, #0
 8005c08:	d904      	bls.n	8005c14 <__utoa+0x3c>
 8005c0a:	7019      	strb	r1, [r3, #0]
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	4618      	mov	r0, r3
 8005c10:	b00b      	add	sp, #44	; 0x2c
 8005c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c14:	1e58      	subs	r0, r3, #1
 8005c16:	4684      	mov	ip, r0
 8005c18:	fbb5 f7f2 	udiv	r7, r5, r2
 8005c1c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8005c20:	fb02 5617 	mls	r6, r2, r7, r5
 8005c24:	4476      	add	r6, lr
 8005c26:	460c      	mov	r4, r1
 8005c28:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005c2c:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005c30:	462e      	mov	r6, r5
 8005c32:	42b2      	cmp	r2, r6
 8005c34:	f101 0101 	add.w	r1, r1, #1
 8005c38:	463d      	mov	r5, r7
 8005c3a:	d9ed      	bls.n	8005c18 <__utoa+0x40>
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	545a      	strb	r2, [r3, r1]
 8005c40:	1919      	adds	r1, r3, r4
 8005c42:	1aa5      	subs	r5, r4, r2
 8005c44:	42aa      	cmp	r2, r5
 8005c46:	dae2      	bge.n	8005c0e <__utoa+0x36>
 8005c48:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005c4c:	780e      	ldrb	r6, [r1, #0]
 8005c4e:	7006      	strb	r6, [r0, #0]
 8005c50:	3201      	adds	r2, #1
 8005c52:	f801 5901 	strb.w	r5, [r1], #-1
 8005c56:	e7f4      	b.n	8005c42 <__utoa+0x6a>
 8005c58:	08006078 	.word	0x08006078

08005c5c <utoa>:
 8005c5c:	f7ff bfbc 	b.w	8005bd8 <__utoa>

08005c60 <_init>:
 8005c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c62:	bf00      	nop
 8005c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c66:	bc08      	pop	{r3}
 8005c68:	469e      	mov	lr, r3
 8005c6a:	4770      	bx	lr

08005c6c <_fini>:
 8005c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6e:	bf00      	nop
 8005c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c72:	bc08      	pop	{r3}
 8005c74:	469e      	mov	lr, r3
 8005c76:	4770      	bx	lr
